/**
* DevExpress Dashboard (layout-options-editor.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var control_options_1 = require("../../../common/control-options");
var _default_1 = require("../../../data/localization/_default");
var disposable_object_1 = require("../../../model/disposable-object");
var _knockout_utils_1 = require("../../../model/internal/_knockout-utils");
var _layout_options_editor_1 = require("./_layout-options-editor");
var LayoutOptionEditorExtension = (function (_super) {
    __extends(LayoutOptionEditorExtension, _super);
    function LayoutOptionEditorExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.name = 'layoutOptionEditor';
        _this._dashboardControl = dashboardControl;
        var widthItems = _layout_options_editor_1.getDimensionToolbarItems(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Width'), 'width');
        var heightItems = _layout_options_editor_1.getDimensionToolbarItems(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Height'), 'height');
        _this._predefinedToolbarItems = widthItems.items.concat(heightItems.items);
        _this._defaultToolbarItems = _this._predefinedToolbarItems.map(function (item, index) { return ({ name: item.name, index: LayoutOptionEditorExtension._toolbarItemsIndex + index }); });
        _this._refreshItems = function (layoutOptions) {
            widthItems.assignModel(layoutOptions && layoutOptions.width);
            heightItems.assignModel(layoutOptions && layoutOptions.height);
        };
        _this._disposeItems = function () {
            widthItems.dispose();
            heightItems.dispose();
        };
        return _this;
    }
    LayoutOptionEditorExtension.prototype.start = function () {
        var _this = this;
        this._addToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._extensionsChangeSubscription = this._dashboardControl.subscribeExtensionsChanged({
            added: function (extension) {
                if (extension.name === 'designerToolbar') {
                    _this._addToolbarItems(extension);
                }
            },
            deleted: function (extension) {
                if (extension.name === 'designerToolbar') {
                    _this._removeToolbarItems(extension);
                }
            }
        });
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._dashboardSubscription = _knockout_utils_1.subscribeAndPerform(this._dashboardControl.dashboard, function (dashboard) { return _this._refreshItems(dashboard && dashboard.layoutOptions); });
    };
    LayoutOptionEditorExtension.prototype.stop = function () {
        this._extensionsChangeSubscription && this._extensionsChangeSubscription.dispose();
        this._dashboardSubscription && this._dashboardSubscription.dispose();
        this._removeToolbarItems(this._dashboardControl.findExtension('designerToolbar'));
    };
    LayoutOptionEditorExtension.prototype._addToolbarItems = function (toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._registerDefaultItems(this._defaultToolbarItems);
            toolbar._registerPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    };
    LayoutOptionEditorExtension.prototype._removeToolbarItems = function (toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    };
    LayoutOptionEditorExtension.prototype.dispose = function () {
        this.stop();
        this._disposeItems();
        _super.prototype.dispose.call(this);
    };
    LayoutOptionEditorExtension._toolbarItemsIndex = 100;
    return LayoutOptionEditorExtension;
}(disposable_object_1.DisposableObject));
exports.LayoutOptionEditorExtension = LayoutOptionEditorExtension;
control_options_1.designerExtensions['layoutOptionEditor'] = function (dashboardControl, options) { return new LayoutOptionEditorExtension(dashboardControl); };
control_options_1.extensionNameMap['layoutOptionEditor'] = 'layoutOptionEditor';
