/**
* DevExpress Dashboard (_layout-options-editor.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = require("devextreme/core/utils/string");
var number_box_1 = require("devextreme/ui/number_box");
var validator_1 = require("devextreme/ui/validator");
var _default_1 = require("../../../data/localization/_default");
var _formatter_1 = require("../../../data/_formatter");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _utils_1 = require("../../../data/_utils");
var _toolbar_extension_1 = require("../../toolbar-extension/_toolbar-extension");
function getDimensionToolbarItems(caption, namePrefix) {
    var minDimensionValue = 100;
    var maxDimensionValue = 10000;
    var dimensionRangeRuleMessage = function () {
        var formatViewModel = {
            FormatType: 'Number',
            IncludeGroupSeparator: true,
        };
        var maxFormattedDimensionValue = _formatter_1.formatNumeric(maxDimensionValue, formatViewModel);
        var minFormattedDimensionValue = _formatter_1.formatNumeric(minDimensionValue, formatViewModel);
        return string_1.format(_default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.LayoutDimensionValidationError'), minFormattedDimensionValue, maxFormattedDimensionValue);
    }();
    var dimensionOptions;
    var numberBox;
    var numberBoxValidator;
    var buttonGroup;
    var dimensionNameElement = document.createElement('div');
    dimensionNameElement.innerText = caption;
    var pixelElement = document.createElement('div');
    pixelElement.innerText = _default_1.getLocalizationById('DashboardWebStringId.DesignerToolbar.Pixels');
    var valueSubscription;
    var buttonGroupModeSubscription;
    var textBoxModeSubscription;
    var pixelElementModeSubscription;
    var updateNumberBox = function () {
        if (numberBox) {
            if (dimensionOptions) {
                var updateNumberBoxText_1 = function (value) {
                    if (numberBox.option('disabled') || !_utils_1.type.isDefined(value))
                        numberBox.option('value', null);
                    else
                        numberBox.option('value', value);
                };
                var updateNumberBoxDisability_1 = function (mode) {
                    numberBox.option('disabled', mode !== 'Fixed');
                    updateNumberBoxText_1(dimensionOptions.value());
                };
                updateNumberBoxDisability_1(dimensionOptions.mode());
                valueSubscription && valueSubscription.dispose();
                valueSubscription = dimensionOptions.value.subscribe(function (newValue) { return updateNumberBoxText_1(newValue); });
                textBoxModeSubscription && textBoxModeSubscription.dispose();
                textBoxModeSubscription = dimensionOptions.mode.subscribe(function (newMode) { return updateNumberBoxDisability_1(newMode); });
                numberBox.option('onValueChanged', function (args) {
                    if (dimensionOptions && dimensionOptions.mode() === 'Fixed' && numberBox.option('isValid'))
                        dimensionOptions.value(args.value && parseInt(args.value));
                });
            }
            else {
                numberBox.option('value', null);
                numberBox.option('disabled', true);
                numberBox.option('onValueChanged', function (args) { });
            }
        }
    };
    var updateButtonGroup = function () {
        buttonGroupModeSubscription && buttonGroupModeSubscription.dispose();
        if (buttonGroup) {
            if (dimensionOptions) {
                buttonGroup.option('disabled', false);
                var updateButtonGroupSelection_1 = function (value) { return buttonGroup && buttonGroup.option('selectedItemKeys', value ? [value] : []); };
                buttonGroupModeSubscription = dimensionOptions.mode.subscribe(function (newValue) { return updateButtonGroupSelection_1(newValue); });
                buttonGroup.option('onSelectionChanged', function (args) {
                    if (args.addedItems && args.addedItems.length === 1 && dimensionOptions) {
                        var buttonType = args.addedItems[0].key;
                        dimensionOptions.mode(buttonType);
                    }
                });
                updateButtonGroupSelection_1(dimensionOptions.mode());
            }
            else {
                buttonGroup.option('disabled', true);
                buttonGroup.option('onSelectionChanged', function (args) { });
            }
        }
    };
    var updatePixelElement = function () {
        pixelElementModeSubscription && pixelElementModeSubscription.dispose();
        var updatePixelElementDisability = function (mode) {
            if (mode === 'Fixed')
                pixelElement.classList.remove('dx-dashboard-toolbar-disabled-label');
            else
                pixelElement.classList.add('dx-dashboard-toolbar-disabled-label');
        };
        if (dimensionOptions) {
            updatePixelElementDisability(dimensionOptions.mode());
            pixelElementModeSubscription = dimensionOptions.mode.subscribe(function (newMode) { return updatePixelElementDisability(newMode); });
        }
        else {
            updatePixelElementDisability(null);
        }
    };
    var updateDimensionNameElement = function () {
        if (dimensionOptions)
            dimensionNameElement.classList.remove('dx-dashboard-toolbar-disabled-label');
        else
            dimensionNameElement.classList.add('dx-dashboard-toolbar-disabled-label');
    };
    var validateDimensionValue = function (option) {
        if (dimensionOptions && dimensionOptions.mode() === 'Fixed') {
            var newValue = option.value ? parseInt(option.value.toString()) : 0;
            var currentDimensionValue = dimensionOptions.value();
            var currentValue = currentDimensionValue ? parseInt(currentDimensionValue.toString()) : 0;
            if (currentValue !== newValue)
                return newValue >= minDimensionValue && newValue <= maxDimensionValue;
        }
        return true;
    };
    var items = [
        {
            name: namePrefix + 'Label',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-label',
            template: function (data, index, element) {
                updateDimensionNameElement();
                _jquery_helpers_1.$unwrap(element).appendChild(dimensionNameElement);
            }
        },
        {
            name: namePrefix + 'ButtonGroup',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-button-group',
            widget: 'dxButtonGroup',
            options: {
                items: [
                    {
                        text: _default_1.getLocalizationById('DashboardStringId.LayoutDimensionModeAuto'),
                        key: 'Auto'
                    },
                    {
                        text: _default_1.getLocalizationById('DashboardStringId.LayoutDimensionModeFixed'),
                        key: 'Fixed'
                    }
                ],
                keyExpr: 'key',
                onInitialized: function (args) {
                    buttonGroup = args.component;
                    updateButtonGroup();
                },
                width: '100%',
                disabled: true
            }
        },
        {
            name: namePrefix + 'NumberBox',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-spinedit',
            template: function (data, index, element) {
                var widgetContainer = document.createElement('div');
                _jquery_helpers_1.$unwrap(element).appendChild(widgetContainer);
                numberBox = new number_box_1.default(widgetContainer, {
                    disabled: true,
                    showSpinButtons: true,
                    width: '100%',
                    min: 1,
                    step: 10,
                });
                numberBoxValidator = new validator_1.default(widgetContainer, {
                    validationRules: [{
                            type: 'custom',
                            validationCallback: validateDimensionValue,
                            message: dimensionRangeRuleMessage,
                        }],
                });
                updateNumberBox();
            }
        },
        {
            name: namePrefix + 'PixelLabel',
            location: 'before',
            cssClass: 'dx-dashboard-toolbar-pixel-label',
            template: function (data, index, element) {
                updatePixelElement();
                _jquery_helpers_1.$unwrap(element).appendChild(pixelElement);
            }
        },
        __assign({ name: namePrefix + 'Separator', location: 'before' }, _toolbar_extension_1.createToolbarSeparator())
    ];
    return {
        items: items,
        assignModel: function (options) {
            dimensionOptions = options;
            updateDimensionNameElement();
            updateButtonGroup();
            updateNumberBox();
            updatePixelElement();
        },
        dispose: function () {
            numberBoxValidator && numberBoxValidator.dispose();
            valueSubscription && valueSubscription.dispose();
            buttonGroupModeSubscription && buttonGroupModeSubscription.dispose();
            textBoxModeSubscription && textBoxModeSubscription.dispose();
            pixelElementModeSubscription && pixelElementModeSubscription.dispose();
        }
    };
}
exports.getDimensionToolbarItems = getDimensionToolbarItems;
