/**
* DevExpress Dashboard (convert.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var control_options_1 = require("../../common/control-options");
var _default_1 = require("../../data/localization/_default");
var _utils_1 = require("../../data/_utils");
var dashboard_1 = require("../../model/dashboard");
var dashboard_item_1 = require("../../model/items/dashboard-item");
var data_dashboard_item_1 = require("../../model/items/data-dashboard-item");
var serializable_model_1 = require("../../model/serializable-model");
var _dashboard_item_menu_1 = require("../items/_dashboard-item-menu");
var name = 'item-conversion-panel';
var nameAlias = 'itemConversionPanel';
var ConversionPanelExtension = (function () {
    function ConversionPanelExtension(dashboardControl) {
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._subscriptions = [];
    }
    ConversionPanelExtension.prototype._contextMenuSubscriber = function (itemContextMenu) {
        if (!!itemContextMenu) {
            var item = this.dashboardControl._actualLayoutController().selectedDashboardItem();
            if (item instanceof data_dashboard_item_1.DataDashboardItem) {
                this._updateContextMenu(itemContextMenu, item, this.dashboardControl.dashboard(), this.dashboardControl._serviceClient());
            }
        }
    };
    ConversionPanelExtension.prototype.start = function () {
        var contextMenuExtension = this.dashboardControl.findExtension('item-menu');
        if (contextMenuExtension) {
            this._subscriptions.push(contextMenuExtension._itemContextMenu.subscribe(this._contextMenuSubscriber, this));
            this._contextMenuSubscriber(contextMenuExtension._itemContextMenu());
        }
    };
    ConversionPanelExtension.prototype.stop = function () {
        this._subscriptions.forEach(function (s) { return s.dispose(); });
        this._subscriptions = [];
    };
    ConversionPanelExtension.prototype._updateContextMenu = function (itemContextMenu, dashboardItem, dashboard, serviceClient) {
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        var _convertItem = _utils_1.asyncDebounce(serviceClient.convertItem.bind(serviceClient), function (result) {
            var tmpDashboard = new dashboard_1.Dashboard(result);
            var newItem = tmpDashboard.items()[0];
            newItem.dataSource(dashboardItem.dataSource());
            newItem.componentName(undefined);
            dashboard._changeItem(dashboardItem, newItem);
        });
        var groups = toolboxExtension && toolboxExtension
            .toolboxGroups()
            .map(function (group) { return ({
            groupTitle: _default_1.getLocalizationById(group.title),
            items: group.items()
                .filter(function (item) { return !!item.type && item.type !== 'Group' && item.type !== 'Image' && item.type !== 'TabContainer' && !serializable_model_1.itemTypesMap[item.type].customItemType; })
                .map(function (item) { return ({
                title: _default_1.getLocalizationById(item.title),
                icon: item.icon,
                convert: function () { return _convertItem(dashboardItem, dashboard_item_1.DashboardItem._getCommonItemType(item.type)); },
                disabled: dashboardItem.itemType() === item.type,
                type: item.type
            }); })
        }); })
            .filter(function (group) { return group.items.length; }) || [];
        var viewModel = {
            groups: groups,
            duplicate: function () { return dashboard._duplicateItem(dashboardItem); },
            duplicateActionCaption: _default_1.getLocalizationById('DashboardWebStringId.Duplicate'),
        };
        itemContextMenu.contextMenuItems.push({
            menuItemId: this.name,
            icon: 'dx-dashboard-convert',
            title: 'DashboardWebStringId.ConvertTo',
            panelWidth: _dashboard_item_menu_1.DashboardItemMenuSizes.OptionsPanelWidth,
            templateName: 'dx-dashboard-convert-to',
            detailVisible: ko.observable(false),
            customData: viewModel,
            index: 400
        });
    };
    return ConversionPanelExtension;
}());
exports.ConversionPanelExtension = ConversionPanelExtension;
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new ConversionPanelExtension(dashboardControl); };
control_options_1.extensionNameMap[name] = nameAlias;
