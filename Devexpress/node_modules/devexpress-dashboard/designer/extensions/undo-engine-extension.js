/**
* DevExpress Dashboard (undo-engine-extension.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var control_options_1 = require("../../common/control-options");
var _interfaces_1 = require("../../common/internal/_interfaces");
var _default_1 = require("../../data/localization/_default");
var _utils_1 = require("../../data/_utils");
var disposable_object_1 = require("../../model/disposable-object");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _obsolete_helper_1 = require("../../model/internal/_obsolete-helper");
var _undo_engine_helper_1 = require("../../model/internal/_undo-engine-helper");
var viewer_parts_1 = require("../../viewer-parts");
var _toolbar_extension_1 = require("../toolbar-extension/_toolbar-extension");
var toolbox_items_1 = require("../toolbox-extension/toolbox-items");
var name = 'undo-redo';
var nameAlias = 'undoRedo';
var UndoRedoExtension = (function (_super) {
    __extends(UndoRedoExtension, _super);
    function UndoRedoExtension(dashboardControl) {
        var _this = _super.call(this) || this;
        _this.dashboardControl = dashboardControl;
        _this.name = name;
        _this._undoEngine = ko.observable();
        _this._predefinedToolbarItems = [];
        _this._defaultToolbarItems = [];
        _this.isChanged = ko.computed({
            read: function () { return !!(_this._undoEngine() && _this._undoEngine().isDirty()); },
            write: function (value) { return _this._undoEngine() && _this._undoEngine().isDirty(value); }
        });
        _obsolete_helper_1.defineObsoleteProperty({
            target: _this,
            memberName: 'undoEngine',
            oldMemberDisplayName: 'UndoRedoExtension.undoEngine',
            warmMessage: 'The undoEngine property is obsolete.',
            action: function () {
                return _this._undoEngine;
            }
        });
        return _this;
    }
    UndoRedoExtension.prototype.reset = function () {
        if (this._undoEngine()) {
            this._undoEngine().reset();
        }
    };
    UndoRedoExtension.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        if (keyEventType === 'keyup' && eventArgs.ctrlKey) {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Z && this._undoEngine().undoEnabled()) {
                this._undoEngine().undo();
                return true;
            }
            else if (eventArgs.keyCode === _interfaces_1.KeyCodes.Y && this._undoEngine().redoEnabled()) {
                this._undoEngine().redo();
                return true;
            }
        }
        else if (keyEventType === 'keydown' && eventArgs.ctrlKey && [_interfaces_1.KeyCodes.Z, _interfaces_1.KeyCodes.Y].indexOf(eventArgs.keyCode) !== -1) {
            eventArgs.preventDefault();
            return true;
        }
        return false;
    };
    UndoRedoExtension.prototype.start = function () {
        var _this = this;
        this.toDispose(this.dashboardControl.dashboard.subscribe(function (prevDashboard) {
            _this.reset();
        }, null, 'beforeChange'));
        this.toDispose(this.dashboardControl.dashboard.subscribe(function (newDashboard) {
            var undoEngine = new DashboardUndoEngine(newDashboard, null, 'getInfo');
            _undo_engine_helper_1.UndoEngineContainer.undoEngine = undoEngine;
            _this._undoEngine(undoEngine);
        }));
        this._controlOptionChangedHandler = this._onControlOptionChanged.bind(this);
        this.dashboardControl.on('optionChanged', this._controlOptionChangedHandler);
        this._setShowConfirmationDialog(this.dashboardControl.showConfirmationOnBrowserClosing);
        var undoButton = this._createToolbarItem('undoButton', function () { return _this.undo(); }, 'dx-dashboard-undo', _default_1.getLocalizationById('DashboardStringId.UndoText'), ko.pureComputed(function () { return !_this.undoEnabled(); }));
        var redoButton = this._createToolbarItem('redoButton', function () { return _this.redo(); }, 'dx-dashboard-redo', _default_1.getLocalizationById('DashboardStringId.RedoText'), ko.pureComputed(function () { return !_this.redoEnabled(); }));
        var separator = __assign({ name: 'undoRedoSeparator', location: 'before' }, _toolbar_extension_1.createToolbarSeparator());
        this._predefinedToolbarItems = [undoButton, redoButton, separator];
        if (viewer_parts_1.LegacySettings.showUndoRedoButtonsInToolbox) {
            var toolboxExtension = this.dashboardControl.findExtension('toolbox');
            if (!!toolboxExtension) {
                var undoItem = new toolbox_items_1.DashboardToolbarItem('undo', function () { return _this.undo(); }, 'dx-dashboard-undo', 'DashboardStringId.UndoText');
                undoItem.disabled = ko.pureComputed(function () { return !_this.undoEnabled(); });
                var redoItem = new toolbox_items_1.DashboardToolbarItem('redo', function () { return _this.redo(); }, 'dx-dashboard-redo', 'DashboardStringId.RedoText');
                redoItem.disabled = ko.pureComputed(function () { return !_this.redoEnabled(); });
                this._toolboxToolbarGroup = new toolbox_items_1.DashboardToolbarGroup('undo-redo', 'Undo/Redo', 50, undoItem, redoItem);
                toolboxExtension.toolbarGroups.push(this._toolboxToolbarGroup);
            }
        }
        else {
            this._defaultToolbarItems = this._predefinedToolbarItems.map(function (item, index) { return ({ name: item.name, index: UndoRedoExtension._toolbarItemsIndex + index }); });
        }
        this._addToolbarItems(this.dashboardControl.findExtension('designerToolbar'));
    };
    UndoRedoExtension.prototype._createToolbarItem = function (name, action, icon, hint, disabled) {
        var subscription;
        return {
            name: name,
            location: 'before',
            widget: 'dxButton',
            cssClass: "dx-dashboard-undo-redo-button " + icon,
            options: {
                hint: hint,
                stylingMode: 'text',
                onClick: action,
                focusStateEnabled: false,
                activeStateEnabled: false,
                disabled: disabled(),
                template: function (args) { return _utils_1.createSvgIconElement(icon); },
                onInitialized: function (args) {
                    subscription = _knockout_utils_1.subscribeAndPerform(disabled, function () {
                        args.component && args.component.option('disabled', disabled());
                    });
                },
                onDisposed: function () {
                    subscription.dispose();
                }
            }
        };
    };
    UndoRedoExtension.prototype._addToolbarItems = function (toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._registerDefaultItems(this._defaultToolbarItems);
            toolbar._registerPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    };
    UndoRedoExtension.prototype._removeToolbarItems = function (toolbar) {
        if (toolbar) {
            toolbar._unregisterDefaultItems(this._defaultToolbarItems);
            toolbar._unregisterPredefinedItems(this._predefinedToolbarItems);
            toolbar._update();
        }
    };
    UndoRedoExtension.prototype.undo = function () {
        this._undoEngine() && this._undoEngine().undo();
    };
    UndoRedoExtension.prototype.redo = function () {
        this._undoEngine() && this._undoEngine().redo();
    };
    UndoRedoExtension.prototype.undoEnabled = function () {
        return !!(this._undoEngine() && this._undoEngine().undoEnabled());
    };
    UndoRedoExtension.prototype.redoEnabled = function () {
        return !!(this._undoEngine() && this._undoEngine().redoEnabled());
    };
    UndoRedoExtension.prototype.stop = function () {
        this._removeToolbarItems(this.dashboardControl.findExtension('designerToolbar'));
        var toolboxExtension = this.dashboardControl.findExtension('toolbox');
        if (toolboxExtension && this._toolboxToolbarGroup) {
            toolboxExtension.toolbarGroups.remove(this._toolboxToolbarGroup);
        }
        this.reset();
        if (this._controlOptionChangedHandler)
            this.dashboardControl.off('optionChanged', this._controlOptionChangedHandler);
        this._setShowConfirmationDialog(false);
    };
    UndoRedoExtension.prototype._onControlOptionChanged = function (args) {
        switch (args.name) {
            case 'showConfirmationOnBrowserClosing':
                this._setShowConfirmationDialog(args.value);
                break;
        }
    };
    UndoRedoExtension.prototype._setShowConfirmationDialog = function (value) {
        if (value) {
            this._beforeWindowUnloadHandler = this._onBeforeWindowUnload.bind(this);
            window.onbeforeunload = this._beforeWindowUnloadHandler;
        }
        else {
            if (this._beforeWindowUnloadHandler)
                window.onbeforeunload = null;
            this._beforeWindowUnloadHandler = null;
        }
    };
    UndoRedoExtension.prototype._onBeforeWindowUnload = function (e) {
        if (this.dashboardControl.isDesignMode() && this.isChanged()) {
            return _default_1.getLocalizationById('DashboardWebStringId.LayoutHasBeenChangedDialogMessage') + ' ' + _default_1.getLocalizationById('DashboardWebStringId.SaveConfirmationDialogMessage');
        }
    };
    UndoRedoExtension._toolbarItemsIndex = 0;
    return UndoRedoExtension;
}(disposable_object_1.DisposableObject));
exports.UndoRedoExtension = UndoRedoExtension;
var DashboardUndoEngine = (function (_super) {
    __extends(DashboardUndoEngine, _super);
    function DashboardUndoEngine(target, ignoredProperties, getInfoMethodName) {
        return _super.call(this, target, ignoredProperties, getInfoMethodName) || this;
    }
    DashboardUndoEngine.prototype.validatePropertyName = function (target, propertyName) {
        return propertyName;
    };
    return DashboardUndoEngine;
}(analytics_utils_1.UndoEngine));
control_options_1.designerExtensions[name] = function (dashboardControl, options) { return new UndoRedoExtension(dashboardControl); };
control_options_1.extensionNameMap[name] = nameAlias;
