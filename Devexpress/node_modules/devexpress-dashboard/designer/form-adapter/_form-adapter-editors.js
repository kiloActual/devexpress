/**
* DevExpress Dashboard (_form-adapter-editors.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var data_source_1 = require("devextreme/data/data_source");
var list_1 = require("devextreme/ui/list");
var tag_box_1 = require("devextreme/ui/tag_box");
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var _common_1 = require("../../data/_common");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _parameters_helper_1 = require("../../model/parameters/_parameters-helper");
var _expression_editor_1 = require("../calculations/_expression-editor");
var _condition_type_editor_1 = require("../conditional-formatting/_condition-type-editor");
var _rule_ranges_editor_1 = require("../conditional-formatting/_rule-ranges-editor");
var _style_settings_editor_1 = require("../conditional-formatting/_style-settings-editor");
var _currency_selector_1 = require("../currency-selector/_currency-selector");
var _filter_expression_editor_1 = require("../expression-editor/_filter-expression-editor");
var _simple_filter_editor_view_model_1 = require("../filtering/simple-filter-editor/_simple-filter-editor-view-model");
var _container_type_selector_1 = require("../items/container-type-selector/_container-type-selector");
var form_item_templates_1 = require("../public-editors/form-item-templates");
var _collection_editor_viewmodel_1 = require("../ui-widgets/collection-editor/_collection-editor-viewmodel");
var _editable_list_editor_viewmodel_1 = require("../ui-widgets/collection-editor/_editable-list-editor-viewmodel");
var _inline_edit_collection_editor_viewmodel_1 = require("../ui-widgets/collection-editor/_inline-edit-collection-editor-viewmodel");
var _file_picker_1 = require("../ui-widgets/_file-picker");
function getFieldValue(args) {
    return ko.unwrap(args.component.option('formData')[args.dataField]);
}
exports.getFieldValue = getFieldValue;
function localizeValues(v) {
    return v.map(function (v) { return ({ value: v.value, displayValue: _default_1.getLocalizationById(v.displayValueId) }); });
}
exports.dateBoxEditor = function () { return ({
    editorType: 'dxDateBox',
    editorOptions: {
        closeOnValueChange: true,
        showClearButton: true,
        type: 'datetime'
    }
}); };
exports.numberBoxEditor = function (options) {
    if (options === void 0) { options = {}; }
    return ({
        editorType: 'dxNumberBox',
        editorOptions: __assign({}, options, { showSpinButtons: true })
    });
};
exports.checkBoxEditor = function (args) {
    var text = args && args.text || null;
    return {
        editorType: 'dxCheckBox',
        label: { visible: !text },
        editorOptions: {
            elementAttr: {
                class: 'dx-dashboard-check-box'
            },
            text: text
        }
    };
};
exports.textBoxEditor = function () { return ({ editorType: 'dxTextBox' }); };
exports.guidEditor = function () { return ({
    editorType: 'dxTextBox',
    validationRules: [
        {
            type: 'custom',
            validationCallback: function (options) { return _parameters_helper_1.validateGuid(options.value); },
            message: _default_1.getLocalizationById('AnalyticsCoreStringId.GuidIsRequired_Error')
        }
    ]
}); };
exports.selectBoxEditor = function (values) { return function (context) {
    return {
        editorType: 'dxSelectBox',
        editorOptions: {
            items: localizeValues(values),
            valueExpr: 'value',
            displayExpr: 'displayValue',
            displayCustomValue: true,
            dropDownOptions: { container: context.widgetContainer }
        }
    };
}; };
exports.dynamicSelectBoxEditor = function (options) { return function (context) {
    var disposables = [];
    var dataSource = new data_source_1.default({
        load: function () { return localizeValues(options.values()); },
        key: 'value',
        loadMode: 'raw'
    });
    var dynamicOptions = options.additionalOptions && options.additionalOptions() || {};
    return {
        editorType: 'dxSelectBox',
        editorOptions: __assign({ dataSource: dataSource, valueExpr: 'value', displayExpr: 'displayValue', displayCustomValue: true, dropDownOptions: { container: context.widgetContainer }, onInitialized: function (e) {
                var disposables = e.component.__DX_DASHBOARD_DISPOSABLES = (e.component.__DX_DASHBOARD_DISPOSABLES || []);
                disposables.push(options.values.subscribe(function (newItems) {
                    dataSource.reload();
                }));
            }, onDisposing: function (e) {
                (e.component.__DX_DASHBOARD_DISPOSABLES || []).forEach(function (d) { return d && d.dispose(); });
                e.component.__DX_DASHBOARD_DISPOSABLES = [];
            } }, dynamicOptions),
        comparableEditorOptions: options.comparableEditorOptions
    };
}; };
exports.buttonGroupEditor = function (values) { return ({
    template: form_item_templates_1.FormItemTemplates.buttonGroup,
    editorOptions: {
        keyExpr: 'value',
        items: values.map(function (val) { return ({ value: val.value, text: _default_1.getLocalizationById(val.displayValueId) }); }),
    }
}); };
exports.listEditor = function (values) { return ({
    template: function (args) { return getListTemplate(args, values); }
}); };
function getListTemplate(args, values) {
    var div = document.createElement('div');
    var initialValue = getFieldValue(args);
    var options = {
        dataSource: values,
        selectionMode: 'single',
        disabled: args.editorOptions && args.editorOptions.disabled || undefined,
        selectedItems: values.filter(function (value) { return value.value === initialValue; }),
        onItemClick: function (e) { args.component.updateData(args.dataField, e.itemData.value); },
        itemTemplate: function (itemData) {
            var span = document.createElement('span');
            span.innerText = _default_1.getLocalizationById(itemData.displayValueId);
            return span;
        }
    };
    new list_1.default(div, options);
    return div;
}
exports.editableListEditor = function (options) { return function (context) {
    return {
        editorOptions: options,
        template: function (args) { return editableListEditorTemplate(args, context, options); }
    };
}; };
var editableListEditorTemplate = function (args, context, options) {
    var viewModel = new _editable_list_editor_viewmodel_1.EditableListEditorViewModel(options, args.component.option('formData')[args.dataField]);
    var div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
exports.collectionEditor = function (options) { return function (context) {
    return {
        editorOptions: options,
        template: function (args) { return collectionEditorTemplate(args, context, options); }
    };
}; };
var collectionEditorTemplate = function (args, context, options) {
    var viewModel = new _collection_editor_viewmodel_1.CollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    var div = document.createElement('div');
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-collection-editor', data: viewModel } }, context.bindingContext);
    return div;
};
exports.inlineEditCollectionEditor = function (options) { return function (context) { return ({
    editorOptions: options,
    template: function (args, elt) { return inlineEditCollectionEditorTemplate(args, _jquery_helpers_1.$unwrap(elt), context, options); }
}); }; };
var inlineEditCollectionEditorTemplate = function (args, elt, context, options) {
    var viewModel = new _inline_edit_collection_editor_viewmodel_1.InlineEditCollectionEditorViewModel(options, args.component.option('formData')[args.dataField]);
    ko.applyBindingsToNode(elt, { template: { name: 'dx-dashboard-editable-collection-editor', data: viewModel } }, context.bindingContext);
};
exports.textPreviewEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var field = args.component.option('formData')[args.dataField];
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-text-preview');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-text-preview', data: options.target } }, context.bindingContext);
            return div;
        }
    };
}; };
exports.actionButtons = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-action-buttons', data: { buttons: options } } }, context.bindingContext);
            return div;
        }
    };
}; };
exports.flagsEnumListEditor = function (options) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-point-label-content-type-selector');
            new list_1.default(div, __assign({ showSelectionControls: true, selectionMode: 'multiple', keyExpr: 'value', onInitialized: function (e) {
                    e.component.option('selectedItemKeys', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values)));
            return div;
        }
    };
};
exports.flagsEnumTagBoxEditor = function (options) { return function (context) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            div.classList.add('dx-dashboard-enum-flags-date-type-selector');
            new tag_box_1.default(div, __assign({ placeholder: _default_1.getLocalizationById('DashboardWebStringId.ConditionalFormatting.DatesOccurringNone'), selectAllMode: 'allPages', showSelectionControls: true, showDropDownButton: true, multiline: false, searchEnabled: true, valueExpr: 'value', onInitialized: function (e) {
                    e.component.option('value', _common_1.getFlagsEnumTypeValues(getFieldValue(args), options.enumDeclaration, 'value'));
                } }, getFlagsEnumWidgetCommonOptions(args, options.values), {
                selectAllText: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                pageLoadMode: 'scrollBottom',
                dropDownOptions: { container: context.widgetContainer }
            }));
            return div;
        }
    };
}; };
function getFlagsEnumWidgetCommonOptions(args, values) {
    return {
        dataSource: values,
        displayExpr: function (e) { return e && _default_1.getLocalizationById(e.displayValueId); },
        onSelectionChanged: function (e) {
            var val = getFieldValue(args);
            e.addedItems.forEach(function (added) {
                val = val | added.value;
            });
            e.removedItems.forEach(function (removed) {
                val = val & ~removed.value;
            });
            args.component.updateData(args.dataField, val);
        },
    };
}
exports.currencyEditor = function () { return function (context) { return ({
    template: function (args) { return currencyEditorTemplate(args, context); }
}); }; };
var currencyEditorTemplate = function (args, context) {
    var div = document.createElement('div');
    var viewModel = new _currency_selector_1.CurrencySelector(args.component.option('formData')[args.dataField], args.editorOptions.disabled);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-currency-editor-template', data: viewModel } }, context.bindingContext);
    return div;
};
exports.iconTypeEditor = function (options) { return function (context) { return ({
    template: function (args) { return iconTypeEditorTemplate(args, context, options); }
}); }; };
var iconTypeEditorTemplate = function (args, context, options) {
    var div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    var viewModel = new _container_type_selector_1.ContainerTypeSelector(options.containersMap, value, options.containerGroupLocalization || undefined, options.highlightedTypes);
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-container-type-selector-full', data: viewModel } }, context.bindingContext);
    return div;
};
exports.nullableNumberBoxEditor = function (options) { return function (context) {
    return {
        template: function (args) { return nullableNumberBoxEditorTemplate(args, context, options); }
    };
}; };
var nullableNumberBoxEditorTemplate = function (args, context, options) {
    var div = document.createElement('div');
    var value = args.component.option('formData')[args.dataField];
    var defaultValue = options.defaultValue ? options.defaultValue : 0;
    var viewModel = {
        buttonGroupOptions: {
            selectedItemKeys: ko.pureComputed(function () { return [isNaN(value())]; }),
            keyExpr: 'value',
            width: '100%',
            items: [
                { value: true, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Auto') },
                { value: false, text: _default_1.getLocalizationById('DashboardWebStringId.Gauge.Scale.Custom') }
            ],
            onItemClick: function (e) { value(e.itemData.value ? NaN : defaultValue); }
        },
        numberBoxOptions: __assign({}, options.editorOptions, { disabled: ko.pureComputed(function () { return isNaN(value()); }), value: value, showSpinButtons: true, step: 1 })
    };
    ko.applyBindingsToNode(div, { template: { name: 'dx-dashboard-nullable-numberbox', data: viewModel } }, context.bindingContext);
    return div;
};
exports.flowModeSettingsEditor = function () { return function (context) {
    return {
        template: function (args, itemElement) {
            var periodLimit = args.component.option('formData')[args.dataField];
            var viewModel = {
                selectBoxOptions: {
                    items: periodLimit._getAvailableIntervals(),
                    value: periodLimit.interval,
                    valueExpr: 'value',
                    displayExpr: 'displayValue',
                    displayCustomValue: true,
                    dropDownOptions: { container: args.editorOptions.dashboardWidgetContainer }
                },
                numberBoxOptions: {
                    value: periodLimit.offset,
                    showSpinButtons: true,
                    step: 1
                }
            };
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-flow-mode-settings', data: viewModel } }, context.bindingContext);
        }
    };
}; };
exports.calculationExpressionEditor = function (options) { return expressionEditorFormAdapter(function () { return new _expression_editor_1.CalculationExpressionEditor(options); }); };
exports.filterEditor = function (options) { return expressionEditorFormAdapter(function () { return new _filter_expression_editor_1.FilterExpressionEditorViewModel(options); }); };
exports.simpleFilterEditor = function (options) { return expressionEditorFormAdapter(function () { return new _simple_filter_editor_view_model_1.SimpleFilterExpressionEditorViewModel(options); }); };
function expressionEditorFormAdapter(createEditorViewModel) {
    return function (context) {
        return {
            template: function (args, itemElement) {
                var viewModel = createEditorViewModel();
                ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-expression-editor-view', data: viewModel } }, context.bindingContext);
            }
        };
    };
}
exports.filePickerEditor = function (options) {
    return {
        template: function (args) {
            var div = document.createElement('div');
            new _file_picker_1.dxDashboardFilePicker(div, function () {
                return __assign({}, options, { value: getFieldValue(args), onValueChanged: function (e) {
                        args.component.updateData(args.dataField, e.value);
                    } });
            }).bind();
            return div;
        }
    };
};
exports.nestedPropertyGridEditor = function (caption) { return function (context) {
    return {
        template: function (args, itemElement) {
            var formatModel = args.component.option('formData')[args.dataField];
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-nested-propertygrid-editor', data: {
                        object: formatModel,
                        caption: caption
                    } } }, context.bindingContext);
        }
    };
}; };
exports.ruleRangesEditor = function (options) { return function (context) {
    return {
        options: options,
        template: function (args, itemElement) {
            var viewModel = new _rule_ranges_editor_1.RuleRangesEditor(options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-rule-ranges-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };
exports.styleSettingsEditor = function (options) { return function (context) {
    return {
        options: options,
        template: function (args, itemElement) {
            var styleSettings = args.component.option('formData')[args.dataField];
            var viewModel = new _style_settings_editor_1.StyleSettingsEditor(styleSettings, options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-style-settings-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };
exports.conditionTypeEditor = function (options) { return function (context) {
    return {
        options: options,
        template: function (args, itemElement) {
            var viewModel = new _condition_type_editor_1.FormatConditionTypeEditorSurface(options);
            ko.applyBindingsToNode(_jquery_helpers_1.$unwrap(itemElement), { template: { name: 'dx-dashboard-format-rule-condition-type-editor', data: viewModel } }, context.bindingContext);
        }
    };
}; };
