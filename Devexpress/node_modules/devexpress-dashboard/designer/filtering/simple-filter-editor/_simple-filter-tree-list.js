/**
* DevExpress Dashboard (_simple-filter-tree-list.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var array_store_1 = require("devextreme/data/array_store");
var custom_store_1 = require("devextreme/data/custom_store");
var check_box_1 = require("devextreme/ui/check_box");
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _utils_1 = require("../../../data/_utils");
var model_1 = require("../../../model");
var treeRootValue = '0';
var SimpleFilterTreeList = (function (_super) {
    __extends(SimpleFilterTreeList, _super);
    function SimpleFilterTreeList(dashboardItem, dataSourceBrowser) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this.dataSourceBrowser = dataSourceBrowser;
        _this._dataCache = [];
        _this.template = {
            name: 'dx-simple-filter-tree-list',
            data: {
                editorOptions: ko.observable(undefined),
                visible: ko.observable(false)
            }
        };
        return _this;
    }
    SimpleFilterTreeList.prototype.reload = function (field) {
        this._dataCache = [];
        this.template.data.editorOptions(this._getTreeListOptions(this._getStore(field), field && !field.isGroup()));
    };
    SimpleFilterTreeList.prototype.show = function (field) {
        this.template.data.visible(true);
        this.reload(field);
    };
    SimpleFilterTreeList.prototype.hide = function () {
        this.template.data.visible(false);
        this.template.data.editorOptions(undefined);
    };
    SimpleFilterTreeList.prototype.getTreeListItems = function () {
        return this._dataCache;
    };
    SimpleFilterTreeList.prototype.dispose = function () {
        this.dispose();
        this._dataCache = [];
    };
    SimpleFilterTreeList.prototype._getBranchIndexes = function (filterItems, initialParentId) {
        var branchIndexes = [];
        var parentId = initialParentId;
        while (parentId !== treeRootValue) {
            var index = _utils_1.findIndex(filterItems, function (filterItem) { return filterItem.id == parentId; });
            branchIndexes.push(index);
            parentId = filterItems[index].parentId;
        }
        return branchIndexes.reverse();
    };
    SimpleFilterTreeList.prototype._getStore = function (selectedField) {
        var _this = this;
        return new custom_store_1.default({
            load: function (options) {
                if (!selectedField) {
                    return undefined;
                }
                var result = _jquery_helpers_1.createJQueryDeferred();
                if (options.filter) {
                    new array_store_1.default({ data: _this._dataCache })
                        .load({ filter: options.filter })
                        .then(function (data) {
                        if (data && data.length) {
                            result.resolve(data);
                        }
                        else if (options.filter[0] === 'parentId') {
                            var parentId_1 = (options.filter && options.filter[0] === 'parentId') ? options.filter[2] : treeRootValue;
                            var pathComponents_1 = !!parentId_1 ? parentId_1.split('.') : undefined;
                            var filterItemsState = _this.getTreeListItems();
                            var branch = _this._getBranchIndexes(filterItemsState, parentId_1);
                            _this.dataSourceBrowser.getDimensionFilterItems(_this.dashboardItem, selectedField.dataMember(), filterItemsState.map(function (i) { return i.data; }), branch).done(function (expandedItems) {
                                var _a;
                                var items = expandedItems.map(function (item, index) {
                                    return {
                                        id: parentId_1 + '.' + index,
                                        parentId: parentId_1,
                                        displayName: item.IsBlank ? '(Blank)' : item.Text,
                                        hasItems: selectedField.hasItems(pathComponents_1),
                                        data: item
                                    };
                                });
                                var parentIndex = _utils_1.findIndex(_this._dataCache, function (item) { return item.id === parentId_1; });
                                (_a = _this._dataCache).splice.apply(_a, [parentIndex + 1, 0].concat(items));
                                result.resolve(items);
                            });
                        }
                        else {
                            result.resolve([]);
                        }
                    });
                }
                return _jquery_helpers_1.$promiseAdapter(result.promise());
            }
        });
    };
    SimpleFilterTreeList.prototype._getTreeListOptions = function (store, searchEnabled) {
        var _this = this;
        return {
            dataSource: { store: store },
            noDataText: '',
            rootValue: treeRootValue,
            dataStructure: 'plain',
            keyExpr: 'id',
            parentIdExpr: 'parentId',
            hasItemsExpr: 'hasItems',
            columns: [{
                    caption: _default_1.getLocalizationById('DashboardStringId.FilterElementShowAllItem'),
                    dataField: 'displayName',
                }],
            selection: {
                allowSelectAll: true,
                mode: 'multiple',
                recursive: true
            },
            scrolling: {
                mode: 'virtual'
            },
            searchPanel: {
                placeholder: _default_1.getLocalizationById('DashboardStringId.SearchNullValuePrompt'),
                visible: searchEnabled,
                width: '100%',
                searchVisibleColumnsOnly: true
            },
            remoteOperations: {
                filtering: true
            },
            showRowLines: false,
            onEditorPrepared: function (e) {
                _jquery_helpers_1.$unwrap(e.editorElement).classList.remove('dx-treelist-checkbox-size');
            },
            onSelectionChanged: function (e) {
                e.component.forEachNode(function (node) {
                    node.data.data.IsChecked = e.component.isRowSelected(node.key);
                });
            },
            onCellPrepared: function (e) {
                if (e.rowType === 'data' && (e.data.data.IsChecked === null || e.data.data.IsChecked === undefined)) {
                    var editor = check_box_1.default.getInstance(_jquery_helpers_1.$unwrap(e.cellElement).querySelector('.dx-select-checkbox'));
                    if (editor) {
                        editor.option('value', undefined);
                    }
                }
            },
            onNodesInitialized: function (e) {
                var selectedKeys = [];
                e.component.forEachNode(function (node) {
                    if (node.data.data.IsChecked) {
                        selectedKeys.push(node.key);
                    }
                });
                e.component.selectRows(selectedKeys, false);
            },
            onInitialized: function (e) {
                _this.treeList = e.component;
            },
        };
    };
    return SimpleFilterTreeList;
}(model_1.DisposableObject));
exports.SimpleFilterTreeList = SimpleFilterTreeList;
