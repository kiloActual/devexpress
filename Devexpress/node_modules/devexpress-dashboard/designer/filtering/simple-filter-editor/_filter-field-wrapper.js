/**
* DevExpress Dashboard (_filter-field-wrapper.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var model_1 = require("../../../model");
var dimension_1 = require("../../../model/data-item/dimension");
var _display_name_provider_1 = require("../../_display-name-provider");
var FilterFieldWrapper = (function () {
    function FilterFieldWrapper(dimension, getDisplayName) {
        var _this = this;
        this.getDisplayName = getDisplayName;
        this.add = function (d) { return _this._dimensions.push(d); };
        this.dataMember = function () { return _this._dimensions[0].dataMember(); };
        this.displayName = function () { return _this._dimensions.map(function (d) { return '[' + _this.getDisplayName(d) + ']'; }).join(' - '); };
        this.groupIndex = function () { return _this._dimensions[0].groupIndex(); };
        this.hasItems = function (path) { return (_this.isGroup() && !!path) ? path.length !== _this._dimensions.length : _this.isGroup(); };
        this.isGroup = function () { return _this._dimensions.length > 1; };
        this.reorder = function (dataFields) {
            if (!dataFields)
                return;
            var newDimensions = [];
            dataFields.forEach(function (dataField) {
                var dimension = _this._dimensions.filter(function (d) { return d.dataMember() == dataField.dataMember(); })[0];
                if (!!dimension) {
                    newDimensions.push(dimension);
                }
            });
            _this._dimensions = newDimensions;
        };
        this._dimensions = [dimension];
    }
    return FilterFieldWrapper;
}());
var FilterFieldSelector = (function (_super) {
    __extends(FilterFieldSelector, _super);
    function FilterFieldSelector(dashboardItem, dataSourceBrowser, selectedFieldChanged) {
        var _this = _super.call(this) || this;
        _this.dashboardItem = dashboardItem;
        _this.dataSourceBrowser = dataSourceBrowser;
        _this._selectedField = ko.observable();
        _this._fields = ko.observableArray();
        _this.template = {
            name: 'dx-simple-filter-data-field-selector',
            data: {
                selectedField: _this._selectedField,
                fields: _this._fields
            }
        };
        _this.toDispose(_this._selectedField.subscribe(function (field) {
            selectedFieldChanged(field);
        }));
        return _this;
    }
    Object.defineProperty(FilterFieldSelector.prototype, "selectedField", {
        get: function () {
            return this._selectedField();
        },
        enumerable: true,
        configurable: true
    });
    FilterFieldSelector.prototype.init = function () {
        var _this = this;
        this._loadDataFields().done(function (fields) {
            _this._selectedField(fields[0]);
            _this._fields(fields);
        });
    };
    FilterFieldSelector.prototype.clear = function () {
        this._selectedField(null);
    };
    FilterFieldSelector.prototype._loadDataFields = function () {
        var _this = this;
        var deferred = _jquery_helpers_1.createJQueryDeferred();
        var dimensions = this.dashboardItem._uniqueDataItems.filter(function (item) { return item instanceof dimension_1.Dimension; });
        var result = this._generateFields(dimensions);
        var findPromises = dimensions.map(function (dimension) { return _this.dataSourceBrowser.findDataField(_this.dashboardItem.dataSource(), _this.dashboardItem.dataMember(), dimension.dataMember()); });
        _jquery_helpers_1.jqueryWhenArray(findPromises).done(function () {
            var dataFields = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                dataFields[_i] = arguments[_i];
            }
            result.forEach(function (wrapper) {
                if (wrapper.groupIndex() !== undefined && wrapper.groupIndex() !== null) {
                    var groupedFields = dataFields.filter(function (dataField) { return !!dataField && dataField.groupIndex() == wrapper.groupIndex(); });
                    wrapper.reorder(groupedFields && groupedFields.length > 0 && groupedFields[0].groupDataItems);
                }
            });
            deferred.resolve(result);
        });
        return deferred.promise();
    };
    FilterFieldSelector.prototype._generateFields = function (dimensions) {
        var _this = this;
        var fields = [];
        return dimensions.reduce(function (acc, dimension) {
            if (dimension.groupIndex() !== undefined && dimension.groupIndex() !== null) {
                var groupField = acc.filter(function (wrapper) { return wrapper.groupIndex() === dimension.groupIndex(); })[0];
                if (groupField) {
                    groupField.add(dimension);
                    return acc;
                }
            }
            acc.push(new FilterFieldWrapper(dimension, function (dataItem) { return _display_name_provider_1.getDataItemDisplayName(_this.dataSourceBrowser, _this.dashboardItem, dataItem); }));
            return acc;
        }, []);
    };
    return FilterFieldSelector;
}(model_1.DisposableObject));
exports.FilterFieldSelector = FilterFieldSelector;
