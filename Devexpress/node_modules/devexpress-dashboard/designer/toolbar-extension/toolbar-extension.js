/**
* DevExpress Dashboard (toolbar-extension.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var control_options_1 = require("../../common/control-options");
var _options_manager_1 = require("../../common/internal/_options-manager");
var _helpers_1 = require("../../common/_helpers");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _utils_1 = require("../../data/_utils");
var disposable_object_1 = require("../../model/disposable-object");
var _toolbox_extension_1 = require("../toolbox-extension/_toolbox-extension");
var _toolbar_extension_1 = require("./_toolbar-extension");
var _toolbar_view_model_1 = require("./_toolbar-view-model");
var nameAlias = 'designerToolbar';
var DesignerToolbarExtension = (function (_super) {
    __extends(DesignerToolbarExtension, _super);
    function DesignerToolbarExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this._defaultItems = [];
        _this._predefinedItems = [];
        _this.name = 'designerToolbar';
        _this._optionsManager = new _options_manager_1.OptionsManager();
        _this._showPanelAsync = function (options, cancellationToken) {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                _this._viewModel.showPanel();
                setTimeout(function () {
                    if (!cancellationToken.canceled) {
                        options.surfaceTop = _this._viewModel.height;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, _toolbar_view_model_1.toolbarAnimationTime);
            }
            return def.promise();
        };
        _this._hidePanelAsync = function (options, cancellationToken) {
            var def = _jquery_helpers_1.createJQueryDeferred();
            if (cancellationToken.canceled)
                def.reject();
            else {
                _this._viewModel.hidePanel();
                setTimeout(function () {
                    if (!cancellationToken.canceled) {
                        options.surfaceTop = 0;
                        def.resolve(options);
                    }
                    else {
                        def.reject();
                    }
                }, _toolbar_view_model_1.toolbarAnimationTime);
            }
            return def.promise();
        };
        _this._dashboardControl = dashboardControl;
        _this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: _this,
            initOptions: options,
            optionChanged: function (args) {
                switch (args.name) {
                    case 'items':
                    case 'onPreparing':
                        _this._update();
                        break;
                }
                return 'noop';
            }
        });
        _this._predefinedItems = [
            __assign({}, _toolbar_extension_1.createToolbarSeparator(), { name: 'separator' })
        ];
        var cancelableDesignerToViewerAction = {
            orderNo: 40,
            action: function (options) { return _this._hidePanelAsync(options, _helpers_1.CancellationToken.None); },
            cancelableAction: _this._hidePanelAsync
        };
        _this.designerToViewerAction = cancelableDesignerToViewerAction;
        var cancelableViewerToDesignerAction = {
            orderNo: 40,
            action: function (options) { return _this._showPanelAsync(options, _helpers_1.CancellationToken.None); },
            cancelableAction: _this._showPanelAsync
        };
        _this.viewerToDesignerAction = cancelableViewerToDesignerAction;
        _this._viewModel = new _toolbar_view_model_1.ToolbarKoViewModel(function () { return _this._dashboardControl.getWidgetContainer(); }, function () { return _this._update(); });
        _this.template = {
            data: _this._viewModel,
            name: 'dx-dashboard-toolbar-extension'
        };
        return _this;
    }
    DesignerToolbarExtension.prototype.start = function () {
        var _this = this;
        var toolbox = this._dashboardControl.findExtension('toolbox');
        this._viewModel.left(toolbox ? _toolbox_extension_1.toolboxConstants.leftPanelWidth : 0);
        this._extensionChangeSubscription && this._extensionChangeSubscription.dispose();
        this._extensionChangeSubscription = this._dashboardControl.subscribeExtensionsChanged({
            added: function (extension) {
                if (extension.name === 'toolbox')
                    _this._viewModel.left(_toolbox_extension_1.toolboxConstants.leftPanelWidth);
            },
            deleted: function (extension) {
                if (extension.name === 'toolbox')
                    _this._viewModel.left(0);
            }
        });
        if (this._dashboardControl.isDesignMode())
            this._viewModel.showPanel();
        else
            this._viewModel.hidePanel();
        this._dashboardControl.surfaceTop(this._viewModel.height);
        this._update();
    };
    DesignerToolbarExtension.prototype.stop = function () {
        this._unsubscribe();
        this._viewModel.hidePanel();
        this._dashboardControl.surfaceTop(0);
    };
    DesignerToolbarExtension.prototype._unsubscribe = function () {
        this._extensionChangeSubscription && this._extensionChangeSubscription.dispose();
    };
    DesignerToolbarExtension.prototype._registerDefaultItems = function (defaultItems) {
        var _a;
        (_a = this._defaultItems).push.apply(_a, defaultItems);
    };
    DesignerToolbarExtension.prototype._unregisterDefaultItems = function (defaultItems) {
        this._defaultItems = this._defaultItems.filter(function (item) { return !defaultItems.some(function (n) { return n === item; }); });
    };
    DesignerToolbarExtension.prototype._registerPredefinedItems = function (predefinedItems) {
        var _a;
        (_a = this._predefinedItems).push.apply(_a, predefinedItems);
    };
    DesignerToolbarExtension.prototype._unregisterPredefinedItems = function (predefinedItems) {
        this._predefinedItems = this._predefinedItems.filter(function (item) { return !predefinedItems.some(function (n) { return n === item; }); });
    };
    DesignerToolbarExtension.prototype._update = function () {
        var _this = this;
        var args = {
            component: this._dashboardControl,
            dashboard: this._dashboardControl.dashboard(),
            items: []
        };
        var items = this._optionsManager.get('items');
        if (items) {
            args.items = items;
        }
        else {
            args.items = this._defaultItems
                .filter(function (defaultItem) { return _utils_1.type.isDefined(defaultItem.index); })
                .sort(function (item1, item2) { return item1.index - item2.index; });
        }
        this._optionsManager.raiseEvent('preparing', args);
        var dxToolbarItems = args.items.reduce(function (acc, sourceItem) {
            var item = typeof sourceItem === 'string' ? { name: sourceItem } : sourceItem;
            var defaultItem = _this._predefinedItems.find(function (predefinedItem) { return predefinedItem.name === item.name; });
            if (defaultItem) {
                var resultItem = {};
                _options_manager_1.mergeOptions(resultItem, defaultItem);
                _options_manager_1.mergeOptions(resultItem, item);
                resultItem.name = undefined;
                return acc.concat(resultItem);
            }
            return acc.concat([item]);
        }, []);
        this._viewModel.setToolbarItems(dxToolbarItems);
    };
    DesignerToolbarExtension.prototype.dispose = function () {
        this.stop();
        this._optionsManager.dispose();
        _super.prototype.dispose.call(this);
    };
    return DesignerToolbarExtension;
}(disposable_object_1.DisposableObject));
exports.DesignerToolbarExtension = DesignerToolbarExtension;
control_options_1.designerExtensions['designerToolbar'] = function (dashboardControl, options) { return new DesignerToolbarExtension(dashboardControl, options); };
control_options_1.extensionNameMap['designerToolbar'] = nameAlias;
