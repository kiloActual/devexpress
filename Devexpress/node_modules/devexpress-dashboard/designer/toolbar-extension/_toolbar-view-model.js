/**
* DevExpress Dashboard (_toolbar-view-model.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _toolbox_extension_1 = require("../toolbox-extension/_toolbox-extension");
exports.toolbarAnimationTime = 500;
var ToolbarKoViewModel = (function () {
    function ToolbarKoViewModel(getContainer, toolbarInitialized) {
        this._visible = ko.observable(false);
        this._popupDisposables = [];
        this.left = ko.observable(0);
        this.toolbarItems = ko.observableArray([]);
        this._getContainer = getContainer;
        this._toolbarInitialized = toolbarInitialized;
        this.koToolbarOptions = this._getKoToolbarOptions();
    }
    Object.defineProperty(ToolbarKoViewModel.prototype, "height", {
        get: function () { return this._visible() ? _toolbox_extension_1.toolboxConstants.menuTitleHeight : 0; },
        enumerable: true,
        configurable: true
    });
    ToolbarKoViewModel.prototype.getKoPopupOptions = function () {
        var _this = this;
        var container = this._getContainer();
        var popupOptions = {
            container: container,
            position: {
                my: 'left top',
                at: 'left top',
                of: container,
                collision: 'flipfit',
                boundary: container,
                boundaryOffset: {
                    y: 0
                }
            },
            animation: {
                show: { type: 'slide', from: { top: -_toolbox_extension_1.toolboxConstants.menuTitleHeight }, to: { top: 0 }, duration: exports.toolbarAnimationTime },
                hide: { type: 'slide', from: { top: 0 }, to: { top: -_toolbox_extension_1.toolboxConstants.menuTitleHeight }, duration: exports.toolbarAnimationTime }
            },
            onShowing: function (args) {
                var setWidth = function () { return args.component.option('width', container.getBoundingClientRect().width - _this.left()); };
                _this._popupDisposables.push(_this.left.subscribe(setWidth));
                var resizeObserver = new ResizeObserver(function (entries) { return entries[0] && setWidth(); });
                resizeObserver.observe(container);
                _this._popupDisposables.push({ dispose: function () { return resizeObserver.unobserve(container); } });
                setWidth();
            },
            onHidden: function () {
                _this._popupDisposables.forEach(function (d) { return d.dispose(); });
                _this._popupDisposables = [];
            },
            focusStateEnabled: false,
            showCloseButton: false,
            dragEnabled: false,
            height: _toolbox_extension_1.toolboxConstants.menuTitleHeight,
            shading: false,
            wrapperAttr: {
                class: 'dx-dashboard-toolbar-extension'
            },
            showTitle: false
        };
        var koPopupOptions = __assign({}, popupOptions, { visible: this._visible });
        var position = koPopupOptions.position;
        var positionOffset = position.boundaryOffset;
        position.boundaryOffset = __assign({}, positionOffset, { x: this.left });
        return koPopupOptions;
    };
    ToolbarKoViewModel.prototype._getKoToolbarOptions = function () {
        var _this = this;
        var toolbarOptions = {
            onInitialized: function (args) {
                _this._toolbarInitialized();
            }
        };
        var koToolbarOptions = __assign({}, toolbarOptions, { items: this.toolbarItems });
        return koToolbarOptions;
    };
    ToolbarKoViewModel.prototype.setToolbarItems = function (items) {
        this.toolbarItems(items);
    };
    ToolbarKoViewModel.prototype.showPanel = function () {
        this._visible(true);
    };
    ToolbarKoViewModel.prototype.hidePanel = function () {
        this._visible(false);
    };
    return ToolbarKoViewModel;
}());
exports.ToolbarKoViewModel = ToolbarKoViewModel;
