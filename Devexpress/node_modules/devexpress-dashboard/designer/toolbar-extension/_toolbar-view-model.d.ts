/**
* DevExpress Dashboard (_toolbar-view-model.d.ts)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { Item as dxToolbarItem } from 'devextreme/ui/toolbar';
import * as ko from 'knockout';
export declare let toolbarAnimationTime: number;
export declare class ToolbarKoViewModel {
    private _getContainer;
    private _toolbarInitialized;
    private _visible;
    private _popupDisposables;
    left: ko.Observable<number>;
    toolbarItems: ko.ObservableArray<dxToolbarItem>;
    readonly height: number;
    koToolbarOptions: any;
    constructor(getContainer: () => HTMLElement, toolbarInitialized: () => void);
    getKoPopupOptions(): {
        visible: ko.Observable<boolean>;
        animation?: import("devextreme/ui/popup").dxPopupAnimation;
        container?: string | Element;
        dragEnabled?: boolean;
        focusStateEnabled?: boolean;
        fullScreen?: boolean;
        height?: string | number | (() => string | number);
        onResize?: (e: import("devextreme/ui/popup").ResizeEvent) => void;
        onResizeEnd?: (e: import("devextreme/ui/popup").ResizeEvent) => void;
        onResizeStart?: (e: import("devextreme/ui/popup").ResizeEvent) => void;
        onTitleRendered?: (e: import("devextreme/ui/popup").TitleRenderedEvent) => void;
        position?: Function | "left" | "right" | "center" | "top" | "bottom" | import("devextreme/animation/position").PositionConfig | "left bottom" | "left top" | "right bottom" | "right top";
        resizeEnabled?: boolean;
        restorePosition?: boolean;
        showCloseButton?: boolean;
        showTitle?: boolean;
        title?: string;
        titleTemplate?: string | Function | Element | ((titleElement: HTMLElement) => string | Element);
        toolbarItems?: import("devextreme/ui/popup").dxPopupToolbarItem[];
        width?: string | number | (() => string | number);
        closeOnOutsideClick?: boolean | ((event: import("devextreme/events").EventObject) => boolean);
        contentTemplate?: string | Function | Element | ((contentElement: HTMLElement) => string | Element);
        copyRootClassesToWrapper?: boolean;
        deferRendering?: boolean;
        dragAndResizeArea?: string | Element;
        dragOutsideBoundary?: boolean;
        elementAttr?: any;
        maxHeight?: string | number | (() => string | number);
        maxWidth?: string | number | (() => string | number);
        minHeight?: string | number | (() => string | number);
        minWidth?: string | number | (() => string | number);
        onHidden?: (e: import("devextreme/events").EventInfo<import("devextreme/ui/popup").PopupInstance>) => void;
        onHiding?: (e: import("devextreme/events").Cancelable & import("devextreme/events").EventInfo<import("devextreme/ui/popup").PopupInstance>) => void;
        onShowing?: (e: import("devextreme/events").Cancelable & import("devextreme/events").EventInfo<import("devextreme/ui/popup").PopupInstance>) => void;
        onShown?: (e: import("devextreme/events").EventInfo<import("devextreme/ui/popup").PopupInstance>) => void;
        shading?: boolean;
        shadingColor?: string;
        wrapperAttr?: any;
        hideOnParentScroll?: boolean;
        accessKey?: string;
        activeStateEnabled?: boolean;
        disabled?: boolean;
        hint?: string;
        hoverStateEnabled?: boolean;
        onContentReady?: (e: import("devextreme/events").EventInfo<import("devextreme/ui/popup").PopupInstance>) => void;
        tabIndex?: number;
        bindingOptions?: {
            [key: string]: any;
        };
        onDisposing?: (e: {
            component?: import("devextreme/ui/popup").PopupInstance;
            element?: HTMLElement;
            model?: any;
        }) => void;
        onOptionChanged?: (e: {
            component?: import("devextreme/ui/popup").PopupInstance;
            element?: HTMLElement;
            model?: any;
            name?: string;
            fullName?: string;
            value?: any;
        }) => void;
        rtlEnabled?: boolean;
        onInitialized?: (e: {
            component?: import("devextreme/ui/popup").PopupInstance;
            element?: HTMLElement;
        }) => void;
    };
    private _getKoToolbarOptions;
    setToolbarItems(items: dxToolbarItem[]): void;
    showPanel(): void;
    hidePanel(): void;
}
