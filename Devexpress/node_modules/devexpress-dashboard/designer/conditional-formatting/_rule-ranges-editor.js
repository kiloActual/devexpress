/**
* DevExpress Dashboard (_rule-ranges-editor.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var color_1 = require("../../model/color");
var _range_info_1 = require("../../model/format-rules/conditions/range/metadata/_range-info");
var range_generator_1 = require("../../model/format-rules/conditions/range/range-generator");
var _format_rules_common_1 = require("../../model/format-rules/metadata/_format-rules-common");
var _style_settings_base_1 = require("../../model/format-rules/style-settings/metadata/_style-settings-base");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _style_settings_adapters_1 = require("./_style-settings-adapters");
var negativeInfinityDisplayText = '-∞';
var dataGridColumnTypes = {
    Text: 'string',
    DateTime: 'date',
    Bool: 'boolean',
    Integer: 'number',
    Float: 'number',
    Double: 'number',
    Decimal: 'number',
    Enum: 'string',
    Custom: 'object',
    Unknown: 'object'
};
var RuleRangesEditor = (function () {
    function RuleRangesEditor(options) {
        var _this = this;
        this.selection = ko.observable(null);
        this.value = ko.observableArray([]);
        this.closeEditCell = function () {
            _this._closeEditCell && _this._closeEditCell();
        };
        this._closeEditCell = null;
        this.isGradient = options.condition.isGradient();
        this.appearanceMode = options.appearanceMode;
        this.condition = options.condition;
        this.enableCustomStyles = options.enableCustomStyles;
        this.dataType = this.condition.dataType;
        this.isPercent = ko.computed({
            read: function () { return _this.condition.valueType() === 'Percent'; },
            write: function (isPercent) {
                if (isPercent) {
                    _this.condition.setValues(range_generator_1.FormatConditionRangeGenerator.calculateRangePercentValues(_this.condition.rangeSet.ranges.peek().length));
                }
            }
        });
        _knockout_utils_1.safeComputed({ valueType: this.condition.valueType }, function () { return _this._updateValue(); });
        this.condition.rangeSet.ranges.subscribe(function () { return _this._updateValue(); }, null, 'arrayChange');
    }
    RuleRangesEditor.prototype.isRangeEmptyAllowed = function (range) {
        if (this.isGradient) {
            var ranges = this.value.peek();
            var index = ranges.indexOf(range);
            return (index != 0) && (index != ranges.length - 1);
        }
        else {
            return true;
        }
    };
    RuleRangesEditor.prototype.createStyleSettingsEditorOptions = function (range) {
        return {
            allowChangeViewMode: false,
            appearanceMode: this.appearanceMode,
            isEmptyAllowed: this.isRangeEmptyAllowed(range),
            selectedChanged: this.getSelectedStyleChangedHandler(range),
            closeEditCell: this.closeEditCell,
            enableCustomStyles: this.enableCustomStyles,
        };
    };
    RuleRangesEditor.prototype.createStyleSettingsEditorItemOptions = function (range) {
        return {
            item: range.style(),
            clickHandler: function () { },
            isSelected: ko.observable(false),
            isEmptyAllowed: this.isRangeEmptyAllowed(range),
            isRange: true,
            isGradient: this.isGradient,
            restrictToColor: this.isGradient
        };
    };
    RuleRangesEditor.prototype.createRangeNumberEditorViewModel = function (args) {
        var isNegativeInfintySelected = args.value() === _format_rules_common_1.negativeInfinity;
        var numberBoxValue = ko.observable(isNegativeInfintySelected ? 0 : args.value());
        var allowInfinity = args.grid.totalCount() === args.rowIndex + 1 && !this.isPercent();
        var infinitValue = ko.observable(isNegativeInfintySelected);
        var numberBoxOptions = {
            onValueChanged: function (e) {
                args.setValue(e.value);
                numberBoxValue(e.value);
            },
            value: numberBoxValue(),
        };
        var buttonOptions = {
            width: '100%',
            keyExpr: 'value',
            selectedItemKeys: [isNegativeInfintySelected ? _format_rules_common_1.negativeInfinity : 'number'],
            items: [{
                    value: 'number',
                    text: _default_1.getLocalizationById('DashboardStringId.FormatConditionNumberValueType')
                }, {
                    value: _format_rules_common_1.negativeInfinity,
                    text: negativeInfinityDisplayText
                }],
            selectionMode: 'single',
            onSelectionChanged: function (e) {
                if (e.addedItems[0].value === _format_rules_common_1.negativeInfinity) {
                    args.setValue(_format_rules_common_1.negativeInfinity);
                    infinitValue(true);
                }
                else {
                    args.setValue(numberBoxValue());
                    infinitValue(false);
                }
            }
        };
        return {
            negativeInfinityDisplayText: negativeInfinityDisplayText,
            allowInfinity: allowInfinity,
            infinitValue: infinitValue,
            numberBoxOptions: numberBoxOptions,
            buttonOptions: buttonOptions
        };
    };
    Object.defineProperty(RuleRangesEditor.prototype, "dataGridOptions", {
        get: function () {
            var _this = this;
            var valueType = dataGridColumnTypes[this.dataType()];
            return {
                dataSource: (this.value),
                twoWayBindingEnabled: false,
                hoverStateEnabled: false,
                showRowLines: true,
                showColumnHeaders: false,
                rowAlternationEnabled: false,
                selection: undefined,
                paging: {
                    enabled: false
                },
                editing: {
                    mode: 'cell',
                    allowFiltering: false,
                    allowSorting: false,
                    allowUpdating: true
                },
                onInitialized: function (e) {
                    e.component.getController('editorFactory')._showRevertButton = function () { };
                    _this._closeEditCell = function () {
                        e.component.closeEditCell();
                        _this._updateValue();
                    };
                },
                onCellHoverChanged: function (e) {
                    var cellElement = _jquery_helpers_1.$unwrap(e.cellElement);
                    if (e.eventType === 'mouseover') {
                        cellElement.classList.add('dx-dashboard-range-editor-state-hover');
                    }
                    else {
                        cellElement.classList.remove('dx-dashboard-range-editor-state-hover');
                    }
                },
                onRowPrepared: function (e) {
                    if (e.data === this.selection()) {
                        var selectedRow = _jquery_helpers_1.$unwrap(e.element).querySelector('tr.dx-selection');
                        if (selectedRow) {
                            selectedRow.classList.remove('dx-selection');
                        }
                        _jquery_helpers_1.$unwrap(e.rowElement).classList.add('dx-selection');
                    }
                },
                onEditingStart: function (e) {
                    if (e.component.getRowIndexByKey(e.key) === 0 && e.column.dataField === 'leftValue') {
                        e.cancel = true;
                    }
                },
                onCellPrepared: function (e) {
                    var cellElement = _jquery_helpers_1.$unwrap(e.cellElement);
                    if (cellElement.classList.contains('dx-editor-cell')) {
                        this.selection(e.data);
                        var selectedRow = _jquery_helpers_1.$unwrap(e.element).querySelector('tr.dx-selection');
                        if (selectedRow) {
                            selectedRow.classList.remove('dx-selection');
                        }
                        cellElement.parentElement.classList.add('dx-selection');
                    }
                },
                onRowValidating: function (e) {
                    if (!!e.newData.sign || e.brokenRules.length > 0)
                        return;
                    var dataGrid = e.component, value = e.newData.leftValue || e.newData.rightValue, rowIndex = dataGrid.getRowIndexByKey(e.key), bottomValue = undefined, upperValue = undefined;
                    if (!!e.newData.leftValue) {
                        bottomValue = dataGrid.getKeyByRowIndex(rowIndex).rightValue();
                        upperValue = rowIndex - 1 >= 0 ? dataGrid.getKeyByRowIndex(rowIndex - 1).leftValue() : undefined;
                    }
                    else if (!!e.newData.rightValue) {
                        var count = dataGrid.option('dataSource').length;
                        var minBottomValue = this.isPercent() && (rowIndex + 1 == count) ? 0 : undefined;
                        bottomValue = rowIndex + 1 < count ? dataGrid.getKeyByRowIndex(rowIndex + 1).rightValue() : minBottomValue;
                        upperValue = dataGrid.getKeyByRowIndex(rowIndex).leftValue();
                    }
                    if (value == undefined || (bottomValue !== undefined && value < bottomValue) || (upperValue !== undefined && value > upperValue)) {
                        e.isValid = false;
                        e.errorText = 'Invalid value: value should be between [' + bottomValue + ', ' + upperValue + ']';
                    }
                },
                columns: [{
                        dataField: 'style',
                        alignment: 'center',
                        width: 52,
                        cellTemplate: 'dx-dashboard-range-style-template',
                        lookup: {
                            dataSource: []
                        },
                        editCellTemplate: 'dx-dashboard-range-style-editor-template'
                    }, {
                        dataField: 'leftValue',
                        dataType: valueType,
                        width: 74,
                        alignment: 'center',
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        cssClass: 'dx-dashboard-range-value',
                        validationRules: [{ type: 'required' }]
                    }, {
                        dataField: 'sign',
                        alignment: 'center',
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        cssClass: 'dx-dashboard-range-sign',
                        showEditorAlways: false,
                        editorOptions: {
                            searchEnabled: false,
                            showDropDownButton: false
                        },
                        lookup: {
                            dataSource: [{
                                    name: _range_info_1.rangeValueComparison.values['GreaterOrEqual'],
                                    id: 'GreaterOrEqual'
                                }, {
                                    name: _range_info_1.rangeValueComparison.values['Greater'],
                                    id: 'Greater'
                                }],
                            displayExpr: 'name',
                            valueExpr: 'id'
                        }
                    }, {
                        dataField: 'rightValue',
                        dataType: valueType,
                        alignment: 'center',
                        width: 74,
                        cellTemplate: 'dx-dashboard-range-cell-template',
                        editCellTemplate: 'dx-dashboard-range-edit-number-template',
                        cssClass: 'dx-dashboard-range-value',
                        validationRules: [{ type: 'required' }],
                        customizeText: function (e) {
                            return e.value === -Infinity ? negativeInfinityDisplayText : e.value.toString();
                        }
                    }
                ]
            };
        },
        enumerable: true,
        configurable: true
    });
    RuleRangesEditor.prototype.add = function () {
        var index = !!this.selection() ? this.condition.rangeSet.ranges.indexOf(this.selection().rangeInfo) : this.condition.rangeSet.ranges().length - 1;
        var rangeInfo = this.condition.rangeSet.ranges()[index];
        this.condition.rangeSet.ranges.splice(index, 0, rangeInfo.clone());
    };
    RuleRangesEditor.prototype.remove = function () {
        if (!!this.selection() && this.condition.rangeSet.ranges().length > 2) {
            var rangeInfo = this.selection().rangeInfo;
            var index = this.condition.rangeSet.ranges.indexOf(rangeInfo);
            this.condition.rangeSet.ranges.splice(index, 1);
            this.selection(this.value()[this.value().indexOf(this.selection())]);
        }
    };
    RuleRangesEditor.prototype.getSelectedStyleChangedHandler = function (range) {
        return function (oldStyle, newStyle) {
            range.rangeInfo.styleSettings(newStyle);
        };
    };
    RuleRangesEditor.prototype._updateValue = function () {
        this.value(generateRanges(this.condition.rangeSet.ranges.peek(), this.isGradient, this.isPercent()));
    };
    return RuleRangesEditor;
}());
exports.RuleRangesEditor = RuleRangesEditor;
var generateRanges = function (ranges, isGradient, isPercent) {
    var value = [];
    var prevIndex = -1, nextIndex = ranges.length;
    var isStyleEmpty = function (s) {
        return !s || _style_settings_adapters_1.styleSettingsAdapter(s).getPredefinedStyle() == _style_settings_base_1.emptyStyleType;
    };
    var generateStyleSettings = function (currentIndex) {
        var color;
        var nextColor;
        var itemAdapter = _style_settings_adapters_1.styleSettingsAdapter(ranges[prevIndex].styleSettings());
        var nextItemAdapter = _style_settings_adapters_1.styleSettingsAdapter(ranges[nextIndex].styleSettings());
        color = itemAdapter.hasCustomStyle() ? color_1.Color.fromRgbaString(itemAdapter.getCustomColor()) : color_1.Color.fromAppearance(itemAdapter.getPredefinedStyle());
        nextColor = nextItemAdapter.hasCustomStyle() ? color_1.Color.fromRgbaString(nextItemAdapter.getCustomColor()) : color_1.Color.fromAppearance(nextItemAdapter.getPredefinedStyle());
        var generatedColor = color_1.Color.fromDxColor(nextColor.blend(color, (currentIndex - nextIndex) / (prevIndex - nextIndex))).css;
        var newItem = _style_settings_adapters_1.styleSettingsAdapter(ranges[0].styleSettings()).itemFactory();
        _style_settings_adapters_1.styleSettingsAdapter(newItem).setCustomColor(generatedColor);
        return ko.observable(newItem);
    };
    var getRangeValue = function (index) {
        var rangeInfo = ranges[index];
        return rangeInfo.value.value;
    };
    for (var i = ranges.length - 1; i >= 0; i--) {
        var styleSettings = ranges[i].styleSettings;
        if (isGradient) {
            if (isStyleEmpty(styleSettings())) {
                if (nextIndex > i) {
                    for (var j = i - 1; j >= 0; j--) {
                        if (!isStyleEmpty(ranges[j].styleSettings())) {
                            nextIndex = j;
                            break;
                        }
                    }
                }
                styleSettings = generateStyleSettings(i);
            }
            else {
                prevIndex = i;
            }
        }
        value.push({
            style: styleSettings,
            sign: ranges[i].valueComparison,
            leftValue: (i < ranges.length - 1) ? getRangeValue(i + 1) : (isPercent ? ko.observable(100) : ko.observable('∞')),
            rightValue: getRangeValue(i),
            rangeInfo: ranges[i]
        });
    }
    return value;
};
