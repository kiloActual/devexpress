/**
* DevExpress Dashboard (_custom-appearance-dialog.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../data/localization/_default");
var CustomAppearanceDialog = (function () {
    function CustomAppearanceDialog(setAppearance) {
        var _this = this;
        this.setAppearance = setAppearance;
        this.visible = ko.observable(false);
        this.appearance = ko.observable();
        this.appearanceWrapper = {};
        this.items = [{
                label: { text: 'Font family' },
                dataField: 'fontFamily',
                editorType: 'dxSelectBox',
                editorOptions: {
                    dataSource: [
                        'Arial',
                        'Segoe UI',
                        'Tahoma',
                        'Times New Roman',
                    ]
                }
            }, {
                label: { text: 'Bold' },
                dataField: 'bold',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Italic' },
                dataField: 'italic',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Underline' },
                dataField: 'underline',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Strikeout' },
                dataField: 'strikeout',
                editorType: 'dxCheckBox',
                editorOptions: {}
            }, {
                label: { text: 'Background color' },
                dataField: 'backColor',
                editorType: 'dxColorBox',
                editorOptions: {}
            }, {
                label: { text: 'Foreground color' },
                dataField: 'foreColor',
                editorType: 'dxColorBox',
                editorOptions: {}
            }];
        this.buttonItems = ko.observableArray([
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton', options: {
                    text: _default_1.getLocalizationById('DashboardWebStringId.ButtonConfirm'), onClick: function () {
                        _this.setValue(_this.appearanceWrapper);
                        _this.setAppearance(_this.appearance());
                        _this.visible(false);
                    }
                }
            },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: _default_1.getLocalizationById('DashboardStringId.ButtonCancel'), onClick: function () { return _this.visible(false); } } }
        ]);
    }
    CustomAppearanceDialog.prototype.show = function (appearance) {
        var styles = appearance && appearance.fontStyle && appearance.fontStyle.split(',').filter(function (item) { return !!item; }).map(function (item) { return item.trim(); }) || [];
        this.appearanceWrapper = {
            backColor: appearance && appearance.backColor,
            foreColor: appearance && appearance.foreColor,
            fontFamily: appearance && appearance.fontFamily,
            bold: styles.indexOf('Bold') !== -1,
            italic: styles.indexOf('Italic') !== -1,
            underline: styles.indexOf('Underline') !== -1,
            strikeout: styles.indexOf('Strikeout') !== -1,
        };
        this.visible(true);
    };
    CustomAppearanceDialog.prototype.setValue = function (value) {
        var styles = [];
        if (value.bold)
            styles.push('Bold');
        if (value.italic)
            styles.push('Italic');
        if (value.underline)
            styles.push('Underline');
        if (value.strikeout)
            styles.push('Strikeout');
        var appearance = {
            backColor: value.backColor,
            foreColor: value.foreColor,
            fontFamily: value.fontFamily,
            fontStyle: styles.length ? styles.join(', ') : null
        };
        this.appearance(appearance);
    };
    return CustomAppearanceDialog;
}());
exports.CustomAppearanceDialog = CustomAppearanceDialog;
