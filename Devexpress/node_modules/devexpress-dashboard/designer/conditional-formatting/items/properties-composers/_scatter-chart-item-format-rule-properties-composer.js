/**
* DevExpress Dashboard (_scatter-chart-item-format-rule-properties-composer.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _chart_item_format_rule_base_1 = require("../../../../model/format-rules/metadata/_chart-item-format-rule-base");
var _form_adapter_editors_1 = require("../../../form-adapter/_form-adapter-editors");
var _display_name_provider_1 = require("../../../_display-name-provider");
var _chart_item_format_rule_properties_composer_1 = require("./_chart-item-format-rule-properties-composer");
var _shared_format_rule_properties_composer_1 = require("./_shared-format-rule-properties-composer");
function createScatterChartItemFormatRulePropertiesComposer() {
    var opts = {
        conditionTypeFilter: _chart_item_format_rule_properties_composer_1.chartFormatRuleConditionFilters,
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) { return getCommonScatterChartFormatRuleProperties(formatRule, getDataItems(dashboardItem, dataSourceBrowser)); },
        getConditionFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) { return ({ properties: [] }); },
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        getAdditionalTabs: function (formatRule) { return _chart_item_format_rule_properties_composer_1.getChartFormatRuleLegendSettingsTab(formatRule); },
    };
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer(opts);
}
exports.createScatterChartItemFormatRulePropertiesComposer = createScatterChartItemFormatRulePropertiesComposer;
function getCommonScatterChartFormatRuleProperties(formatRule, getDataItems) {
    var dataItems = ko.pureComputed(function () { return getDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    return {
        properties: [__assign({}, _chart_item_format_rule_base_1.dataItemName, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItems }) })]
    };
}
function getDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return [
        dashboardItem.axisXMeasure(),
        dashboardItem.axisYMeasure(),
        dashboardItem.weight()
    ].concat(dashboardItem.arguments(), dashboardItem.hiddenMeasures()).filter(function (dataItem) { return !!dataItem; })
        .map(function (dataItem) { return ({
        uniqueName: dataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
    }); }); };
}
