/**
* DevExpress Dashboard (_chart-item-format-rule-properties-composer.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var model_1 = require("../../../../model");
var format_condition_range_base_1 = require("../../../../model/format-rules/conditions/range/format-condition-range-base");
var _chart_item_format_rule_1 = require("../../../../model/format-rules/metadata/_chart-item-format-rule");
var _chart_item_format_rule_base_1 = require("../../../../model/format-rules/metadata/_chart-item-format-rule-base");
var chart_series_1 = require("../../../../model/items/chart/chart-series");
var _form_adapter_editors_1 = require("../../../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../../../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../../../properties-controller/_accordion-tab");
var _display_name_provider_1 = require("../../../_display-name-provider");
var _shared_format_rule_properties_composer_1 = require("./_shared-format-rule-properties-composer");
function createChartItemFormatRulePropertiesComposer() {
    var opts = {
        conditionTypeFilter: exports.chartFormatRuleConditionFilters,
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (model, dashboardItem, dataSourceBrowser, ruleAdded) {
            return getCommonChartFormatRuleProperties(model, getDataItems(dashboardItem, dataSourceBrowser), getChartApplyToDataItems(dashboardItem, dataSourceBrowser));
        },
        getConditionFormatRuleProperties: function (model, dashboardItem, dataSourceBrowser) {
            var _a;
            return ({
                properties: [_chart_item_format_rule_1.applyToChartElement],
                visibilityFilterRules: (_a = {},
                    _a[_chart_item_format_rule_1.applyToChartElement.propertyName] = function (_) { return canChangeApplyToElement(dashboardItem, model); },
                    _a)
            });
        },
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        getAdditionalTabs: function (formatRule) { return getChartFormatRuleLegendSettingsTab(formatRule); },
    };
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer(opts);
}
exports.createChartItemFormatRulePropertiesComposer = createChartItemFormatRulePropertiesComposer;
function getCommonChartFormatRuleProperties(formatRule, getDataItems, getApplyToDataItems) {
    var dataItems = ko.pureComputed(function () { return getDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    var applyToDataItems = ko.pureComputed(function () { return getApplyToDataItems().map(function (m) { return ({ value: ko.unwrap(m.uniqueName), displayValueId: ko.unwrap(m.displayName) }); }); });
    if (!formatRule.dataItemName() && dataItems().length) {
        formatRule.dataItemName(ko.unwrap(dataItems()[0].value));
    }
    var applyToDataItemsNames = applyToDataItems().map(function (di) { return ko.unwrap(di.value); });
    if (!formatRule.dataItemApplyToName() && applyToDataItemsNames.length) {
        formatRule.dataItemApplyToName(applyToDataItemsNames[0]);
    }
    var commonProperties = [];
    commonProperties.push(__assign({}, _chart_item_format_rule_base_1.dataItemName, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItems }) }));
    commonProperties.push(__assign({}, _chart_item_format_rule_1.dataItemApplyToName, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: applyToDataItems }) }));
    return {
        properties: commonProperties
    };
}
function getChartCFSeries(dashboardItem) {
    var _a;
    return (_a = []).concat.apply(_a, dashboardItem.panes().map(function (pane) { return pane.series(); })).filter(function (series) { return series._isConditionalFormattingSupported; });
}
function getDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return []
        .concat.apply([], getChartCFSeries(dashboardItem).map(function (s) { return s._measures; }).concat([dashboardItem.arguments(),
        dashboardItem.seriesDimensions(),
        dashboardItem.hiddenMeasures()])).map(function (dataItem) { return ({
        uniqueName: dataItem.uniqueName(),
        displayName: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
    }); }); };
}
function canChangeApplyToElement(chartItem, formatRule) {
    var unsupportedSimpleSeriesTypes = ['Bar', 'StackedBar', 'FullStackedBar', 'Point'];
    var unsupportedRangeSeriesTypes = ['SideBySideRangeBar'];
    var selectedSeries = chartItem
        .panes()
        .reduce(function (seriesCollection, pane) { return seriesCollection.concat(pane.series()); }, [])
        .filter(function (series) { return series._measures.some(function (measure) { return measure.uniqueName() === formatRule.dataItemApplyToName(); }); })[0];
    return (selectedSeries instanceof chart_series_1.SimpleSeries && unsupportedSimpleSeriesTypes.indexOf(selectedSeries.seriesType()) === -1)
        || (selectedSeries instanceof chart_series_1.RangeSeries && unsupportedRangeSeriesTypes.indexOf(selectedSeries.seriesType()) === -1);
}
function getChartApplyToDataItems(dashboardItem, dataSourceBrowser) {
    return function () { return getChartCFSeries(dashboardItem).reduce(function (result, series) {
        result.push({
            uniqueName: series._getDataId(),
            displayName: series.name() || _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, series)
        });
        return result;
    }, []); };
}
exports.getChartApplyToDataItems = getChartApplyToDataItems;
exports.chartFormatRuleConditionFilters = {
    conditionTypeFilter: function (name, subType) {
        var disabledTypes = [{
                name: 'conditionBar'
            }, {
                name: 'conditionColorRangeBar'
            }, {
                name: 'conditionGradientRangeBar'
            }, {
                name: 'conditionRangeSet',
                subType: 'icons'
            }];
        return disabledTypes.filter(function (item) { return item.name === name && (!item.subType || item.subType === subType); }).length === 0;
    },
    rangeGradientPredefinedTypeFilter: function (type) {
        var validTypes = [
            model_1.FormatConditionRangeGradientPredefinedType.YellowGreen,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellow,
            model_1.FormatConditionRangeGradientPredefinedType.YellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellow,
            model_1.FormatConditionRangeGradientPredefinedType.BlueRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedBlue,
            model_1.FormatConditionRangeGradientPredefinedType.YellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellow,
            model_1.FormatConditionRangeGradientPredefinedType.GreenBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueGreen,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellowGreen,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellowRed,
            model_1.FormatConditionRangeGradientPredefinedType.RedYellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.GreenYellowBlue,
            model_1.FormatConditionRangeGradientPredefinedType.BlueYellowGreen
        ];
        return validTypes.indexOf(type) !== -1;
    },
    rangeSetPredefinedTypeFilter: function (type) {
        var validTypes = [
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedGreen,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedGreenBlue,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedYellowGreenBlue,
            model_1.FormatConditionRangeSetPredefinedType.ColorsRedOrangeYellowGreenBlue
        ];
        return validTypes.indexOf(type) !== -1;
    }
};
function getChartFormatRuleLegendSettingsTab(formatRule) {
    var _a, _b;
    var tab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.FormatRuleChartLegend, 'DashboardWebStringId.AccordionTab.ChartLegend');
    var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
        model: formatRule,
        properties: [_chart_item_format_rule_base_1.displayName, _chart_item_format_rule_base_1.showInLegend],
        disabledFilterRules: (_a = {},
            _a[_chart_item_format_rule_base_1.showInLegend.propertyName] = function (_) { return !(formatRule.displayName() || formatRule.condition() instanceof format_condition_range_base_1.FormatConditionRangeBase); },
            _a),
        visibilityFilterRules: (_b = {},
            _b[_chart_item_format_rule_base_1.displayName.propertyName] = function (_) { return !(formatRule.condition() instanceof format_condition_range_base_1.FormatConditionRangeBase); },
            _b)
    });
    tab.tabModel(wrapper);
    return [tab];
}
exports.getChartFormatRuleLegendSettingsTab = getChartFormatRuleLegendSettingsTab;
