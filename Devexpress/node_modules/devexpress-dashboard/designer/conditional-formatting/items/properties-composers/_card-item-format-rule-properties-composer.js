/**
* DevExpress Dashboard (_card-item-format-rule-properties-composer.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../../../data/localization/_default");
var model_1 = require("../../../../model");
var card_item_delta_format_rule_1 = require("../../../../model/format-rules/card-item-delta-format-rule");
var card_item_format_rule_1 = require("../../../../model/format-rules/card-item-format-rule");
var _card_format_rule_row_element_1 = require("../../../../model/format-rules/metadata/_card-format-rule-row-element");
var _card_item_delta_format_rule_1 = require("../../../../model/format-rules/metadata/_card-item-delta-format-rule");
var _card_item_format_rule_1 = require("../../../../model/format-rules/metadata/_card-item-format-rule");
var _card_item_format_rule_base_1 = require("../../../../model/format-rules/metadata/_card-item-format-rule-base");
var _card_layout_template_element_1 = require("../../../../model/items/card/metadata/_card-layout-template-element");
var _delta_options_1 = require("../../../../model/items/options/metadata/_delta-options");
var _base_metadata_1 = require("../../../../model/metadata/_base-metadata");
var _form_adapter_editors_1 = require("../../../form-adapter/_form-adapter-editors");
var _display_name_provider_1 = require("../../../_display-name-provider");
var _shared_format_rule_properties_composer_1 = require("./_shared-format-rule-properties-composer");
function getCardItemFormatRuleDataItems(dashboardItem) {
    return dashboardItem.seriesDimensions().concat(dashboardItem.hiddenMeasures());
}
function isDataItemFormatRuleAvaliable(dashboardItem) {
    return getCardItemFormatRuleDataItems(dashboardItem).length > 0;
}
exports.isDataItemFormatRuleAvaliable = isDataItemFormatRuleAvaliable;
function createCardItemFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser) {
            var propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var dataItems = getCardItemFormatRuleDataItems(dashboardItem);
            var dataItemsDisplayText = ko.pureComputed(function () {
                return dataItems.map(function (dataItem) {
                    return {
                        value: dataItem.uniqueName(),
                        displayValueId: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dataItem)
                    };
                });
            });
            if (!formatRule.dataItemName() && dataItems.length) {
                formatRule.dataItemName(dataItems[0].uniqueName());
            }
            propertiesInfo.properties.push(__assign({}, _card_item_format_rule_1.cardItemformatRuleDataItem, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: dataItemsDisplayText }) }));
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        conditionTypeFilter: exports.cardItemConditionTypeFilters,
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
    });
}
exports.createCardItemFormatRulePropertiesComposer = createCardItemFormatRulePropertiesComposer;
function cardItemDeltaFormatRuleCards(dashboardItem) {
    return dashboardItem.cards();
}
function isDeltaFormatRuleAvaliable(dashboardItem) {
    return cardItemDeltaFormatRuleCards(dashboardItem).length > 0;
}
exports.isDeltaFormatRuleAvaliable = isDeltaFormatRuleAvaliable;
function createCardItemDeltaFormatRulePropertiesComposer(selectedRuleContainer) {
    return new _shared_format_rule_properties_composer_1.FormatRulePropertiesComposer({
        createDataTypeObservable: _shared_format_rule_properties_composer_1.createDeltaDataTypeObservable,
        getCommonFormatRuleProperties: function (formatRule, dashboardItem, dataSourceBrowser, requestRecalculation) {
            var propertiesInfo = {
                properties: [],
                disabledFilterRules: {},
                dynamicEditorRules: {},
                visibilityFilterRules: {}
            };
            var card = cardItemDeltaFormatRuleCards(dashboardItem);
            var cardsDisplayText = ko.pureComputed(function () {
                return card.map(function (card) {
                    return {
                        value: card._getDataId(),
                        displayValueId: _display_name_provider_1.getDataItemContainerDisplayName(dataSourceBrowser, dashboardItem, card)
                    };
                });
            });
            if (!formatRule.cardId() && cardsDisplayText().length) {
                formatRule.cardId(cardsDisplayText()[0].value);
            }
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.cardId.propertyName] = function (_) { return !!formatRule.condition(); };
            propertiesInfo.disabledFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = function (_) { return !!formatRule.condition(); };
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.cardId, { formAdapterItem: _form_adapter_editors_1.dynamicSelectBoxEditor({ values: cardsDisplayText }) }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { simpleFormAdapterItem: 'selectBoxEditor', values: _delta_options_1.deltaValueTypeMap }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { replacementPropertyName: 'fakeDeltaValueTypeActual', sourceObject: ko.observable('ActualValue'), simpleFormAdapterItem: 'selectBoxEditor', values: { 'ActualValue': 'DashboardStringId.DeltaValueTypeActualValueCaption' } }));
            propertiesInfo.properties.push(__assign({}, _card_item_delta_format_rule_1.deltaValueType, { sourceObject: ko.observable('TargetValue'), replacementPropertyName: 'fakeDeltaValueTypeTarget', simpleFormAdapterItem: 'selectBoxEditor', values: { 'TargetValue': 'DashboardStringId.DeltaValueTypeTargetValueCaption' } }));
            var getActualCard = function () { return dashboardItem.cards().filter(function (card) { return card._getDataId() === formatRule.cardId(); })[0]; };
            var hasActualDataItem = function () { return !!getActualCard().actualValue(); };
            var hasTargetDataItem = function () { return !!getActualCard().targetValue(); };
            requestRecalculation.add(function (_) {
                if (dashboardItem.formatRules.indexOf(formatRule) === -1) {
                    if (hasActualDataItem() && !hasTargetDataItem())
                        formatRule.deltaValueType('ActualValue');
                    else if (!hasActualDataItem() && hasTargetDataItem()) {
                        formatRule.deltaValueType('TargetValue');
                    }
                }
            });
            propertiesInfo.visibilityFilterRules[_card_item_delta_format_rule_1.deltaValueType.propertyName] = function (_) { return hasActualDataItem() && hasTargetDataItem(); };
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeActual'] = function (_) { return hasActualDataItem() && !hasTargetDataItem(); };
            propertiesInfo.visibilityFilterRules['fakeDeltaValueTypeTarget'] = function (_) { return !hasActualDataItem() && hasTargetDataItem(); };
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeActual'] = function (_) { return true; };
            propertiesInfo.disabledFilterRules['fakeDeltaValueTypeTarget'] = function (_) { return true; };
            return getCommonCardFormatRuleProperties(formatRule, dashboardItem, propertiesInfo, selectedRuleContainer);
        },
        getConditionFormatRuleProperties: getConditionFormatRuleProperties,
        getMiscFormatRuleProperties: function () { return ({ properties: [] }); },
        conditionTypeFilter: exports.cardItemConditionTypeFilters
    });
}
exports.createCardItemDeltaFormatRulePropertiesComposer = createCardItemDeltaFormatRulePropertiesComposer;
function getConditionFormatRuleProperties(formatRule, dashboardItem, dataSourceBrowser) {
    var layoutElementTypeValues = Object.keys(_card_layout_template_element_1.сardFormatRuleLayoutElementValuesMap).map(function (key) {
        return { value: key, displayValue: _default_1.getLocalizationById(_card_layout_template_element_1.сardFormatRuleLayoutElementValuesMap[key]) };
    });
    layoutElementTypeValues.push({ value: 'Dimension', displayValue: _default_1.getLocalizationById('DashboardWebStringId.FormatRuleApplyToDimensionElement') });
    layoutElementTypeValues.push({ value: 'Text', displayValue: _default_1.getLocalizationById('DashboardWebStringId.FormatRuleApplyToTextElement') });
    var textEditorValues = getAllApplyToTextElements(formatRule, dashboardItem);
    var dimensionEditorValues = dashboardItem.seriesDimensions().map(function (dimension) {
        return { value: dimension.uniqueName(), displayValue: _display_name_provider_1.getDataItemDisplayName(dataSourceBrowser, dashboardItem, dimension) };
    });
    var visibilityFilterRules = {};
    visibilityFilterRules[_card_format_rule_row_element_1.dimensionId.propertyName] = function (model) { return model.elementTypeApplyTo() === 'Dimension'; };
    visibilityFilterRules[_card_format_rule_row_element_1.textId.propertyName] = function (model) { return model.elementTypeApplyTo() === 'Text'; };
    var properties = [{
            container: _card_item_format_rule_base_1.cardLayoutElement,
            properties: [
                __assign({}, _card_format_rule_row_element_1.elementTypeApplyTo, { valuesArray: layoutElementTypeValues }),
                __assign({}, _card_format_rule_row_element_1.dimensionId, { valuesArray: dimensionEditorValues }),
                __assign({}, _card_format_rule_row_element_1.textId, { valuesArray: textEditorValues })
            ]
        }];
    return {
        properties: properties,
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: visibilityFilterRules
    };
}
function getAllApplyToTextElements(formatRule, dashboardItem) {
    var isExpressionRule = formatRule.condition() instanceof model_1.FormatConditionExpression;
    var isHiddenMeasureRule = formatRule instanceof card_item_format_rule_1.CardItemFormatRule && dashboardItem.hiddenMeasures().filter(function (measure) { return measure.uniqueName() === formatRule.dataItemName(); }).length > 0;
    var affectedCards = isExpressionRule || isHiddenMeasureRule ? dashboardItem.cards() : [(dashboardItem.cards()[dashboardItem._selectedElementIndex() || 0])];
    return affectedCards.map(function (card) { return getCardApplyToTextElements(card); }).reduce(function (prev, curr) { return prev.concat(curr); });
}
function getCardApplyToTextElements(card) {
    var textElements = getCardRows(card).map(function (row) { return row.elements().filter(function (element) { return element instanceof model_1.CardRowTextElement; }); });
    if (textElements.length > 0) {
        return textElements.reduce(function (prev, current) { return prev.concat(current); })
            .map(function (textElement) {
            return { value: textElement.text(), displayValue: textElement.text() };
        });
    }
    else
        return [];
}
function getCardRows(card) {
    var layoutTemplate = card.layoutTemplate();
    var layout = layoutTemplate ? layoutTemplate.layout : null;
    return layout ? layout.rows().filter(function (element) { return element instanceof model_1.CardRow; }) : [];
}
exports.cardItemConditionTypeFilters = {
    conditionTypeFilter: function (conditionTypePropertyName) {
        return ['conditionBar', 'conditionColorRangeBar', 'conditionGradientRangeBar'].indexOf(conditionTypePropertyName) === -1;
    }
};
function getCommonCardFormatRuleProperties(formatRule, dashboardItem, calculatedByProperties, selectedRuleContainer) {
    var _a;
    var propertiesInfo = {
        properties: [],
        disabledFilterRules: {},
        dynamicEditorRules: {},
        visibilityFilterRules: {}
    };
    var selectedRuleType = ko.observable(formatRule.itemType());
    selectedRuleType.subscribe(function (newSelectedContainer) {
        if (newSelectedContainer === 'CardItemFormatRule') {
            selectedRuleContainer(new card_item_format_rule_1.CardItemFormatRule());
        }
        else if (newSelectedContainer === 'CardItemDeltaFormatRule') {
            selectedRuleContainer(new card_item_delta_format_rule_1.CardItemDeltaFormatRule());
        }
    });
    propertiesInfo.properties.push(__assign({}, _base_metadata_1.itemType, { sourceObject: selectedRuleType, replacementPropertyName: 'selectedContainer', displayName: 'DashboardWebStringId.ConditionalFormatting.CalculatedBy', formAdapterItem: _form_adapter_editors_1.buttonGroupEditor([
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeCard',
                value: 'CardItemDeltaFormatRule'
            },
            {
                displayValueId: 'DashboardWebStringId.ConditionalFormatting.CardRuleTypeDataItem',
                value: 'CardItemFormatRule'
            }
        ]) }));
    propertiesInfo.disabledFilterRules['selectedContainer'] = function (m) { return !!formatRule.condition() || !isDeltaFormatRuleAvaliable(dashboardItem) || !isDataItemFormatRuleAvaliable(dashboardItem); };
    (_a = propertiesInfo.properties).push.apply(_a, calculatedByProperties.properties);
    propertiesInfo.disabledFilterRules = __assign({}, propertiesInfo.disabledFilterRules, calculatedByProperties.disabledFilterRules);
    propertiesInfo.dynamicEditorRules = __assign({}, propertiesInfo.dynamicEditorRules, calculatedByProperties.dynamicEditorRules);
    propertiesInfo.visibilityFilterRules = __assign({}, propertiesInfo.visibilityFilterRules, calculatedByProperties.visibilityFilterRules);
    return propertiesInfo;
}
