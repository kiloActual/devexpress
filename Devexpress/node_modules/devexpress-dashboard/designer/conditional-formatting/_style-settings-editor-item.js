/**
* DevExpress Dashboard (_style-settings-editor-item.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _custom_appearance_dialog_1 = require("./custom-style-settings/_custom-appearance-dialog");
var _popover_color_picker_1 = require("./custom-style-settings/_popover-color-picker");
var _style_settings_adapters_1 = require("./_style-settings-adapters");
var StyleSettingsEditorItem = (function () {
    function StyleSettingsEditorItem(args) {
        var _this = this;
        this._item = args.item;
        this._itemAdapter = _style_settings_adapters_1.styleSettingsAdapter(this._item);
        this._editorClickHandler = args.clickHandler;
        this._isSelected = args.isSelected;
        this._initialize({ isEmptyAllowed: args.isEmptyAllowed, isRange: args.isRange, isGradient: args.isGradient, restrictToColor: args.restrictToColor });
        this.colorPicker = new _popover_color_picker_1.PopoverColorPicker(function (style) {
            if (style) {
                _this._itemAdapter.setCustomColor(style);
                _this._editorClickHandler('SaveColor');
            }
        });
        this.customizeAppearanceDialog = new _custom_appearance_dialog_1.CustomAppearanceDialog(function (style) {
            if (style) {
                _this._itemAdapter.setCustomAppearance(style);
                _this._editorClickHandler('SaveAppearance');
            }
        });
    }
    StyleSettingsEditorItem.prototype.clickHandlerCore = function (isRestrictToColor) {
        if (this._itemAdapter.hasCustomStyle() && (this._itemAdapter.isEmptyCustomStyle() || this._isSelected())) {
            this._showCustomStyleEditor(isRestrictToColor);
        }
        else {
            this._editorClickHandler('None');
        }
    };
    StyleSettingsEditorItem.prototype._showCustomStyleEditor = function (isRestrictToColor) {
        if (isRestrictToColor) {
            var color = this._itemAdapter.getCustomColor();
            this.colorPicker.show(color ? color : 'rgba(255,255,255,1)');
        }
        else {
            var appearance = this._itemAdapter.getCustomAppearance();
            this.customizeAppearanceDialog.show(appearance);
        }
        return {};
    };
    StyleSettingsEditorItem.prototype._initialize = function (_a) {
        var _this = this;
        var isEmptyAllowed = _a.isEmptyAllowed, isRange = _a.isRange, isGradient = _a.isGradient, restrictToColor = _a.restrictToColor;
        this.title = ko.pureComputed(function () { return _this._itemAdapter.getLocalizedCaption(); });
        this.cssStyles = ko.pureComputed(function () { return _this._itemAdapter.getCssStyles(); });
        this.cssClasses = ko.pureComputed(function () {
            var classes = _this._itemAdapter.getCssClasses(isEmptyAllowed, isRange, isGradient);
            if (_this._isSelected() && !isRange)
                classes.push('dx-state-selected');
            return classes.join(' ');
        });
        this.dataLabel = ko.pureComputed(function () { return _this._itemAdapter.getLabelText(isRange, isGradient); });
        this.isRangeStop = ko.pureComputed(function () { return isRange && isGradient && _this._itemAdapter.getPredefinedStyle() !== 'None'; });
        this.clickHandler = isRange ? undefined : function () { return _this.clickHandlerCore(restrictToColor); };
    };
    return StyleSettingsEditorItem;
}());
exports.StyleSettingsEditorItem = StyleSettingsEditorItem;
ko.components.register('dx-dashboard-style-settings-editor-item', {
    viewModel: {
        createViewModel: function (params) {
            return new StyleSettingsEditorItem(ko.unwrap(params.args));
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor-item' }
});
