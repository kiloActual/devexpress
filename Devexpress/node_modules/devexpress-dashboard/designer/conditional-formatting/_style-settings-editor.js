/**
* DevExpress Dashboard (_style-settings-editor.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var appearance_settings_1 = require("../../model/format-rules/style-settings/appearance-settings");
var icon_settings_1 = require("../../model/format-rules/style-settings/icon-settings");
var _icon_settings_1 = require("../../model/format-rules/style-settings/metadata/_icon-settings");
var _style_settings_base_1 = require("../../model/format-rules/style-settings/metadata/_style-settings-base");
var _conditional_formatting_custom_color_storage_1 = require("./custom-style-settings/_conditional-formatting-custom-color-storage");
var _style_settings_adapters_1 = require("./_style-settings-adapters");
var _style_settings_palette_1 = require("./_style-settings-palette");
var StyleSettingsEditor = (function () {
    function StyleSettingsEditor(target, params) {
        this.customColorsSupported = false;
        this.allowChangeViewMode = false;
        this.isGradient = false;
        this.isEmptyAllowed = false;
        this.restrictToColor = false;
        this.numberOfCustomStyleItems = 8;
        this.value = target;
        this.isEmptyAllowed = params.isEmptyAllowed;
        this.isGradient = params.appearanceMode === 'GradientColors';
        this.allowChangeViewMode = (this.value() instanceof appearance_settings_1.AppearanceSettings || this.value() instanceof icon_settings_1.IconSettings) && params.allowChangeViewMode;
        this.viewMode = ko.observable(this.value() instanceof icon_settings_1.IconSettings ? 'Icon' : 'Appearance');
        this.customColorsSupported = params.enableCustomStyles;
        this.restrictToColor = true;
        this.selectedChanged = params.selectedChanged;
        this.closeEditCell = params.closeEditCell || (function () { });
        var _a = this._createDataSources(params.appearanceMode, this.isEmptyAllowed, this.customColorsSupported, this.restrictToColor, this.value, _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor), predefinedStyles = _a.predefinedStyles, predefinedIcons = _a.predefinedIcons, customStyles = _a.customStyles;
        this.list = predefinedStyles;
        this.iconList = predefinedIcons;
        this.customStyleItems = customStyles;
    }
    StyleSettingsEditor.prototype._setStyleType = function (styleSettingsModel, saveCustomStyle) {
        var oldSelectedStyle = this.value();
        this.value(styleSettingsModel);
        if (this.selectedChanged) {
            this.selectedChanged(oldSelectedStyle, styleSettingsModel);
        }
        this.closeEditCell();
        switch (saveCustomStyle) {
            case 'SaveColor':
                var customColors = this.customStyleItems
                    .map(function (viewModel) { return viewModel.item; })
                    .filter(function (model) { return !!model; })
                    .map(function (model) { return _style_settings_adapters_1.styleSettingsAdapter(model).getCustomColor(); });
                _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor.customColorStorage.setValue(customColors);
                break;
            case 'SaveAppearance':
                var customAppearances = this.customStyleItems
                    .map(function (viewModel) { return viewModel.item; })
                    .filter(function (model) { return !!model; })
                    .map(function (model) { return _style_settings_adapters_1.styleSettingsAdapter(model).getCustomAppearance(); });
                _conditional_formatting_custom_color_storage_1.conditionalFormattingEditor.customAppearanceStorage.setValue(customAppearances);
                break;
            case 'None':
            default:
                break;
        }
    };
    StyleSettingsEditor.prototype._createDataSources = function (mode, isEmptyAllowed, isCustomStyleEnabled, isCustomColorsOnly, selectedValue, customStylesProvider) {
        var predefinedAppearanceItems = [];
        var predefinedIconItems = [];
        var customStyleItems = null;
        var specificCustomItemType = undefined;
        switch (mode) {
            case 'Appearance':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.standard;
                predefinedIconItems = Object.keys(_icon_settings_1.iconType.values).slice(1);
                specificCustomItemType = appearance_settings_1.AppearanceSettings;
                break;
            case 'AllColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.allColors;
                break;
            case 'RichColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.richColors;
                break;
            case 'GradientColors':
                predefinedAppearanceItems = _style_settings_palette_1.Palette.gradient;
                break;
        }
        if (isEmptyAllowed) {
            predefinedAppearanceItems = [_style_settings_base_1.emptyStyleType].concat(predefinedAppearanceItems);
            predefinedIconItems = predefinedIconItems.length ? [_style_settings_base_1.emptyStyleType].concat(predefinedIconItems) : [];
        }
        if (isCustomStyleEnabled) {
            var selectedItemAdapter = _style_settings_adapters_1.styleSettingsAdapter(selectedValue());
            if (isCustomColorsOnly) {
                customStyleItems = this._getCustomStyles(customStylesProvider.customColorStorage, selectedItemAdapter.hasCustomStyle() && selectedItemAdapter.getCustomColor())
                    .map(this.createItemViewModel(this.createCustomColorStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue));
            }
            else {
                customStyleItems = this._getCustomStyles(customStylesProvider.customAppearanceStorage, selectedItemAdapter.hasCustomStyle() && selectedItemAdapter.getCustomAppearance())
                    .map(this.createItemViewModel(this.createCustomAppearanceStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue));
            }
        }
        return {
            predefinedStyles: predefinedAppearanceItems.map(this.createItemViewModel(this.createStyleSettingsModel(selectedValue(), specificCustomItemType), selectedValue)),
            predefinedIcons: predefinedIconItems.map(this.createItemViewModel(this.createStyleSettingsModel(selectedValue(), icon_settings_1.IconSettings), selectedValue)),
            customStyles: customStyleItems
        };
    };
    StyleSettingsEditor.prototype._getCustomStyles = function (storage, selectedStyle) {
        var savedStyles = (storage && storage.getValue() || []);
        var styles = savedStyles.concat(Array.apply(null, Array(Math.max(this.numberOfCustomStyleItems - savedStyles.length, 0))));
        if (!!selectedStyle && styles.indexOf(selectedStyle) === -1) {
            var i = 0;
            for (; i < styles.length; i++) {
                if (!styles[i]) {
                    styles[i] = selectedStyle;
                    break;
                }
            }
            if (styles.length === i) {
                styles[styles.length - 1] = selectedStyle;
            }
        }
        return styles;
    };
    StyleSettingsEditor.prototype.createStyleSettingsModel = function (selectedValue, stylesModelType) {
        return function (item) {
            var model = _style_settings_adapters_1.styleSettingsAdapter(selectedValue, stylesModelType).itemFactory();
            _style_settings_adapters_1.styleSettingsAdapter(model).setPredefinedStyle(item);
            return model;
        };
    };
    StyleSettingsEditor.prototype.createCustomColorStyleSettingsModel = function (selectedValue, stylesModelType) {
        var _this = this;
        return function (color) {
            var model = _this.createStyleSettingsModel(selectedValue, stylesModelType)('Custom');
            color && _style_settings_adapters_1.styleSettingsAdapter(model).setCustomColor(color);
            return model;
        };
    };
    StyleSettingsEditor.prototype.createCustomAppearanceStyleSettingsModel = function (selectedValue, stylesModelType) {
        var _this = this;
        return function (appearance) {
            var model = _this.createStyleSettingsModel(selectedValue, stylesModelType)('Custom');
            appearance && _style_settings_adapters_1.styleSettingsAdapter(model).setCustomAppearance(appearance);
            return model;
        };
    };
    StyleSettingsEditor.prototype.createItemViewModel = function (modelFactory, selectedValue) {
        var _this = this;
        return function (item) {
            var itemModel = modelFactory(item);
            return {
                item: itemModel,
                clickHandler: function (saveCustomStyle) { return _this._setStyleType(itemModel, saveCustomStyle); },
                isSelected: ko.computed(function () { return !!itemModel.equals(selectedValue()); }),
                isEmptyAllowed: _this.isEmptyAllowed,
                isRange: false,
                isGradient: _this.isGradient,
                restrictToColor: _this.restrictToColor
            };
        };
    };
    return StyleSettingsEditor;
}());
exports.StyleSettingsEditor = StyleSettingsEditor;
ko.components.register('dx-dashboard-style-settings-editor', {
    viewModel: {
        createViewModel: function (params) {
            return new StyleSettingsEditor(ko.unwrap(params).target, ko.unwrap(params).options);
        }
    },
    template: { element: 'dx-dashboard-style-settings-editor' }
});
