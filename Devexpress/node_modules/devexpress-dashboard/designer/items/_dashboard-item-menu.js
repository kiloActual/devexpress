/**
* DevExpress Dashboard (_dashboard-item-menu.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("devextreme/events");
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _utils_1 = require("../../data/_utils");
var disposable_object_1 = require("../../model/disposable-object");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _properties_controller_1 = require("../properties-controller/_properties-controller");
var _dashboard_item_menu_popover_1 = require("./_dashboard-item-menu-popover");
var _section_descriptors_1 = require("./_section-descriptors");
exports.DashboardItemMenuSizes = {
    BindingPanelPanelWidth: 495,
    OptionsPanelWidth: 274
};
exports.createContextPopupMenuViewModel = function (menuItem, dashboardItemMenu) {
    return {
        menuButton: {
            icon: menuItem.icon,
            hint: _default_1.getLocalizationById(menuItem.hint || menuItem.title),
            cssClass: _knockout_utils_1.safeComputed({ detailVisible: menuItem.detailVisible }, function (args) {
                var classes = ['dx-dashboard-' + menuItem.menuItemId + '-options-button'];
                if (args.detailVisible)
                    classes.push('dx-state-selected');
                return classes.join(' ');
            }),
            clickHandler: function () { return dashboardItemMenu.menuItemClick(menuItem && menuItem.menuItemId); },
        },
        menuPropertiesPanel: {
            title: _default_1.getLocalizationById(menuItem.title),
            panelContent: {
                view: menuItem.templateName,
                viewModel: {
                    data: menuItem.customData,
                    isSecondaryPanelVisible: dashboardItemMenu.isSecondaryPanelVisible,
                    hideBindingPanel: dashboardItemMenu.hideBindingPanel,
                    hideBindingProperties: dashboardItemMenu.hideBindingProperties,
                    detailVisible: menuItem.detailVisible
                }
            },
            cssClasses: ko.pureComputed(function () {
                return dashboardItemMenu.selectedItemSurface
                    && dashboardItemMenu.selectedItemSurface.propertiesController.mainModel() ? 'dx-visible-properties' : '';
            }),
            style: dashboardItemMenu.propertiesPanelStyle,
            detailVisible: menuItem.detailVisible,
            hidePanelAction: dashboardItemMenu.hideBindingPanel,
        },
        getPopoverOptions: _dashboard_item_menu_popover_1.createPopoverOptionsGetterFunction(menuItem, dashboardItemMenu)
    };
};
var DashboardItemMenu = (function (_super) {
    __extends(DashboardItemMenu, _super);
    function DashboardItemMenu(layoutController, layoutItem, _positionCalculator, propertiesController, itemSurface) {
        var _this = _super.call(this) || this;
        _this.layoutController = layoutController;
        _this.layoutItem = layoutItem;
        _this._positionCalculator = _positionCalculator;
        _this.propertiesController = propertiesController;
        _this.menuItemClick = function (menuItemId) {
            _this.contextMenuItems().forEach(function (contextMenuItem) {
                if (contextMenuItem.menuItemId !== menuItemId) {
                    contextMenuItem.detailVisible(false);
                }
                else {
                    _this.propertiesController.mainModel(null);
                    if (contextMenuItem.detailVisible.peek()) {
                        contextMenuItem.detailVisible(false);
                    }
                    else {
                        contextMenuItem.showMenu && contextMenuItem.showMenu();
                        contextMenuItem.detailVisible(true);
                    }
                }
            });
        };
        _this.contextMenuItems = ko.observableArray();
        _this.contextMenuItemViewModels = _knockout_utils_1.safeComputed({ contextMenuItems: _this.contextMenuItems }, function (args) {
            return args.contextMenuItems
                .sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); })
                .map(function (item) { return exports.createContextPopupMenuViewModel(item, _this); });
        });
        _this.menuItemDetailVisible = ko.pureComputed(function () { return _this.contextMenuItems().some(function (contextMenuItem) { return contextMenuItem.detailVisible(); }); });
        _this.verticalPosition = ko.observable();
        _this.isLeft = ko.observable();
        _this.isCollapsed = ko.observable(false);
        _this.isCollapsedStateToggleVisible = ko.observable(false);
        _this._recalculateVerticalPosition = function () {
            window.setTimeout(function () {
                _this.verticalPosition(_this._positionCalculator.calculateVPosition());
            }, 1);
        };
        _this._recalculatePosition = function () {
            _this.verticalPosition(_this._positionCalculator.calculateVPosition());
            _this.isLeft(_this._positionCalculator.calculateIsLeft());
        };
        _this._recalculatePositionDebounced = _utils_1.debounce(_this._recalculatePosition, 1);
        _this.hideBindingProperties = function () {
            if (_this.propertiesController.secondaryModel() && _this.isSecondaryPanelVisible()) {
                _this.isSecondaryPanelVisible(false);
            }
            else {
                _this.propertiesController.mainModel(null);
                if (_this.contextMenuItems().filter(function (mi) { return mi.detailVisible() && mi.menuItemId !== 'item-binding-panel'; })[0]) {
                    _this.hideBindingPanel();
                }
            }
        };
        _this.hideBindingPanel = function () {
            _this.propertiesController.secondaryModel(null);
            _this.propertiesController.mainModel(null);
            _this.menuItemClick(null);
        };
        _this.isSecondaryPanelVisible = ko.observable(false);
        _this.__secondaryPanelVisibleTimeout = 0;
        _this._repaintHandlers = [];
        _this.selectedItemSurface = itemSurface;
        ko.computed(function () {
            layoutController.itemInteractionInProgress(_this.menuItemDetailVisible());
        });
        _this.isSecondaryPanelVisible.subscribe(function (visibility) {
            if (!visibility) {
                _this.__secondaryPanelVisibleTimeout = window.setTimeout(function () {
                    _this.propertiesController.secondaryModel(undefined);
                    _this.__secondaryPanelVisibleTimeout = 0;
                }, 350);
            }
        });
        _this.propertiesController.secondaryModel.subscribe(function (model) {
            _this.isSecondaryPanelVisible(!!model);
            if (_this.__secondaryPanelVisibleTimeout)
                clearTimeout(_this.__secondaryPanelVisibleTimeout);
        });
        _this.propertiesPanelStyle = ko.computed(function () {
            var visiblePanel = _this.contextMenuItems().filter(function (contextMenuItem) { return contextMenuItem.detailVisible(); })[0], mainModel = _this.propertiesController.mainModel();
            if (visiblePanel) {
                if (visiblePanel.menuItemId === 'item-binding-panel') {
                    if (mainModel) {
                        return { width: exports.DashboardItemMenuSizes.BindingPanelPanelWidth.toString() + 'px', marginLeft: '' };
                    }
                    else {
                        return { width: '220px', marginLeft: '' };
                    }
                }
            }
            return { width: exports.DashboardItemMenuSizes.OptionsPanelWidth.toString() + 'px', marginLeft: '0px' };
        });
        _this.subscribeLayoutItemRepaintRequest(_this._recalculatePositionDebounced);
        _this.toDispose(_this.contextMenuItemViewModels.subscribe(function () { return _this._recalculatePositionDebounced(); }));
        _this.toDispose(_this.layoutItem.isSelected.subscribe(function () { return _this._recalculatePositionDebounced(); }));
        _this._recalculatePosition();
        return _this;
    }
    DashboardItemMenu.prototype.createViewModel = function () {
        var _this = this;
        return {
            isCollapsedStateToggleVisible: _knockout_utils_1.safeComputed({ isLeft: this.isLeft }, function (args) { return args.isLeft && _this._positionCalculator.calculateIsLeftAndInside(); }),
            isCollapsed: this.isCollapsed,
            collapsedStateToggle: function () { return _this.isCollapsed(!_this.isCollapsed()); },
            menuContainerCssClasses: _knockout_utils_1.safeComputed({
                isLeft: this.isLeft,
                isSelected: this.layoutItem.isSelected,
                verticalPosition: this.verticalPosition,
                isCollapsed: this.isCollapsed,
            }, function (args) {
                var classes = [];
                var isInnerMenu = args.isLeft && _this._positionCalculator.calculateIsLeftAndInside();
                if (isInnerMenu) {
                    classes.push('dx-position-left-inside');
                }
                else if (args.isLeft) {
                    classes.push('dx-position-left');
                }
                args.isSelected && classes.push('dx-state-selected');
                args.verticalPosition === 'top' && classes.push('dx-dashboard-item-top');
                if (args.verticalPosition === 'bottom') {
                    args.isCollapsed && isInnerMenu ? classes.push('dx-dashboard-item-top') : classes.push('dx-dashboard-item-bottom');
                }
                return classes.join(' ');
            }),
            menuItemDetailVisible: this.menuItemDetailVisible,
            contextMenuItemViewModels: this.contextMenuItemViewModels,
            deleteCurrentItemAction: function () { return _this.layoutController._selectedLayoutItem().delete(); },
            deleteCurrentItemActionCaption: _default_1.getLocalizationById('DashboardWebStringId.Remove'),
        };
    };
    DashboardItemMenu.prototype.subscribeLayoutItemRepaintRequest = function (handler) {
        this.layoutItem.repaintCallbacks.add(handler);
        this._repaintHandlers.push(handler);
    };
    DashboardItemMenu.prototype.unsubscribeLayoutItemRepaintRequest = function (handler) {
        this.layoutItem.repaintCallbacks.remove(handler);
        this._repaintHandlers.splice(this._repaintHandlers.indexOf(handler), 1);
    };
    DashboardItemMenu.prototype.dispose = function () {
        var _this = this;
        _super.prototype.dispose.call(this);
        this._repaintHandlers.forEach(function (handler) { return _this.layoutItem.repaintCallbacks.remove(handler); });
        this._repaintHandlers = [];
        this.selectedItemSurface && this.selectedItemSurface.dispose();
    };
    return DashboardItemMenu;
}(disposable_object_1.DisposableObject));
exports.DashboardItemMenu = DashboardItemMenu;
ko.components.register('dx-dashboard-item-menu', {
    viewModel: {
        createViewModel: function (_a, componentInfo) {
            var layoutController = _a.layoutController, layoutItem = _a.layoutItem, itemMenuViewModelContainer = _a.itemMenuViewModelContainer;
            var positionCalculator = new ItemMenuPositionCalculator(componentInfo.element);
            var itemSurface = _section_descriptors_1.surfaceItemsFactory.createSurfaceItem(layoutItem.viewModel.item(), layoutController.dashboardModel, layoutController.dataSourceBrowser);
            var propertiesController = new _properties_controller_1.PropertiesController();
            itemSurface.propertiesController = propertiesController;
            var itemMenu = new DashboardItemMenu(layoutController, layoutItem, positionCalculator, propertiesController, itemSurface);
            itemMenuViewModelContainer(itemMenu);
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, function () {
                itemMenu.dispose();
                propertiesController.dispose();
                itemMenuViewModelContainer(undefined);
            });
            return itemMenu.createViewModel();
        }
    },
    template: { element: 'dx-dashboard-item-menu' }
});
var ItemMenuPositionCalculator = (function () {
    function ItemMenuPositionCalculator(element) {
        this.element = element;
        this.layoutContainer = _jquery_helpers_1.closest(this.element, '.dx-dashboard-layout-container');
    }
    ItemMenuPositionCalculator.prototype._isValidElement = function () {
        return this.element.parentElement && this.layoutContainer;
    };
    ItemMenuPositionCalculator.prototype.calculateIsLeft = function () {
        if (!this._isValidElement()) {
            return false;
        }
        var elementParentBounds = this.element.parentElement.getBoundingClientRect();
        var rootBounds = this.layoutContainer.getBoundingClientRect();
        var left = elementParentBounds.left, right = elementParentBounds.right, rootLeft = rootBounds.left, rootRight = rootBounds.right;
        return (rootRight - right < exports.DashboardItemMenuSizes.BindingPanelPanelWidth &&
            left - rootLeft > exports.DashboardItemMenuSizes.BindingPanelPanelWidth) || (rootRight - right < 50);
    };
    ItemMenuPositionCalculator.prototype.calculateVPosition = function () {
        var itemMenuElement = this.element.querySelector('.dx-dashboard-item-menu');
        var layoutItem = _jquery_helpers_1.closest(this.element, '.dx-layout-item-wrapper');
        if (!this._isValidElement() || !layoutItem || !itemMenuElement) {
            return 'center';
        }
        var layoutItemBounds = layoutItem.getBoundingClientRect();
        var layoutRootBounds = this.layoutContainer.getBoundingClientRect();
        var itemMenuBounds = itemMenuElement.getBoundingClientRect();
        if (itemMenuBounds.height <= layoutItemBounds.height) {
            return 'center';
        }
        else {
            if (layoutItemBounds.top + layoutItemBounds.height - itemMenuBounds.height < layoutRootBounds.top) {
                return 'top';
            }
            else {
                return 'bottom';
            }
        }
    };
    ItemMenuPositionCalculator.prototype.calculateIsLeftAndInside = function () {
        if (!this._isValidElement()) {
            return false;
        }
        var elementParentBounds = this.element.parentElement.getBoundingClientRect();
        var layoutRootBounds = this.layoutContainer.getBoundingClientRect();
        return elementParentBounds.left - 50 < layoutRootBounds.left;
    };
    return ItemMenuPositionCalculator;
}());
exports.ItemMenuPositionCalculator = ItemMenuPositionCalculator;
var DISAPPEARING_EVENT_NAMESPACE = '.disappearing';
var findContainer = function (element) {
    return _jquery_helpers_1.closest(element, '.dx-layout-item-wrapper').querySelector('.dx-layout-item-container');
};
ko.bindingHandlers['menuVisibilitySubscription'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            events_1.off(findContainer(element), DISAPPEARING_EVENT_NAMESPACE);
        });
    },
    update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var toggleClass = function (state) {
            var cssClass = 'dx-target-widget-hovered';
            var nodes = document.querySelectorAll('.dx-disappearing-overlay>.dx-overlay-content');
            for (var i = 0; i < nodes.length; i++) {
                if (state) {
                    nodes[i].classList.add(cssClass);
                }
                else {
                    nodes[i].classList.remove(cssClass);
                }
            }
        };
        valueAccessor().visible.subscribe(function (val) {
            var container = findContainer(element);
            if (val) {
                events_1.on(container, 'mouseenter' + DISAPPEARING_EVENT_NAMESPACE, function () { toggleClass(true); });
                events_1.on(container, 'mouseleave' + DISAPPEARING_EVENT_NAMESPACE, function () { toggleClass(false); });
            }
            else {
                events_1.off(container, DISAPPEARING_EVENT_NAMESPACE);
                toggleClass(false);
            }
        });
    }
};
