/**
* DevExpress Dashboard (_item-filter-properties-composer.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var model_1 = require("../../model");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _data_dashboard_item_1 = require("../../model/items/metadata/_data-dashboard-item");
var _filter_utils_1 = require("../filtering/_filter-utils");
var _item_filter_display_name_provider_1 = require("../filtering/_item-filter-display-name-provider");
var _item_filter_items_provider_1 = require("../filtering/_item-filter-items-provider");
var _form_adapter_editors_1 = require("../form-adapter/_form-adapter-editors");
var _object_properties_wrapper_1 = require("../form-adapter/_object-properties-wrapper");
var _accordion_tab_1 = require("../properties-controller/_accordion-tab");
var ItemFilterPropertiesComposer = (function () {
    function ItemFilterPropertiesComposer(dataSourceBrowser) {
        this.dataSourceBrowser = dataSourceBrowser;
    }
    ItemFilterPropertiesComposer.prototype.composeTabs = function (item) {
        if (this.dataSourceBrowser.findDataSource(item.dataSource()) instanceof model_1.OlapDataSource) {
            var itemFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            this._fillSimpleFilterTab(itemFilterTab, item, this.dataSourceBrowser);
            return [itemFilterTab];
        }
        else {
            var itemFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ItemFilter, 'DashboardWebStringId.AccordionTab.ItemFilter');
            var visibleDataFilterTab = new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.VisibleDataFilter, 'DashboardWebStringId.AccordionTab.VisibleDataFilter');
            this._fillFilterTab(itemFilterTab, item, item.filterString, this.dataSourceBrowser, _data_dashboard_item_1.filterString);
            this._fillFilterTab(visibleDataFilterTab, item, item.visibleDataFilterString, this.dataSourceBrowser, _data_dashboard_item_1.visibleDataFilterString);
            return [itemFilterTab, visibleDataFilterTab];
        }
    };
    ItemFilterPropertiesComposer.prototype._fillFilterTab = function (tab, dashboardItem, targetObservable, dataSourceBrowser, propertyDescriptor) {
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                __assign({}, propertyDescriptor, { formAdapterItem: _form_adapter_editors_1.filterEditor({
                        fieldListProvider: ko.observable(new _item_filter_items_provider_1.ItemFilterItemsProvider(dataSourceBrowser, dataSourceBrowser, dataSourceBrowser.parameters, dashboardItem, function (di) { return di instanceof model_1.Dimension; })),
                        options: _filter_utils_1.createItemFilterOptions(targetObservable, undefined, dataSourceBrowser),
                        displayNameProvider: new _item_filter_display_name_provider_1.ItemFilterDisplayNameProvider(dashboardItem, dataSourceBrowser)
                    }) })
            ],
            summary: _knockout_utils_1.safeComputed({ filterString: targetObservable }, function (args) { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    };
    ItemFilterPropertiesComposer.prototype._fillSimpleFilterTab = function (tab, dashboardItem, dataSourceBrowser) {
        var wrapper = new _object_properties_wrapper_1.ObjectPropertiesWrapper({
            model: dashboardItem,
            properties: [
                __assign({}, _data_dashboard_item_1.filterString, { formAdapterItem: _form_adapter_editors_1.simpleFilterEditor({
                        dashboardItem: dashboardItem, dataSourceBrowser: dataSourceBrowser
                    }) })
            ],
            summary: _knockout_utils_1.safeComputed({ filterString: dashboardItem.filterString }, function (args) { return !!args.filterString ? _default_1.getLocalizationById('DashboardWebStringId.ButtonOn') : ''; })
        });
        tab.tabModel(wrapper);
    };
    return ItemFilterPropertiesComposer;
}());
exports.ItemFilterPropertiesComposer = ItemFilterPropertiesComposer;
