/**
* DevExpress Dashboard (_scatter-chart-item-surface.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var scatter_chart_item_format_rule_1 = require("../../../model/format-rules/scatter-chart-item-format-rule");
var _format_rule_surface_1 = require("../../conditional-formatting/items/surfaces/_format-rule-surface");
var _accordion_tab_1 = require("../../properties-controller/_accordion-tab");
var _data_item_properties_composer_1 = require("../properties-composers/_data-item-properties-composer");
var _scatter_chart_item_properties_composer_1 = require("../properties-composers/_scatter-chart-item-properties-composer");
var _data_item_collection_surface_1 = require("../sections/_data-item-collection-surface");
var _single_data_item_surface_1 = require("../sections/_single-data-item-surface");
var _section_descriptors_1 = require("../_section-descriptors");
var _base_item_surface_1 = require("./_base-item-surface");
var ScatterChartItemSurface = (function (_super) {
    __extends(ScatterChartItemSurface, _super);
    function ScatterChartItemSurface(dashboardItem, dashboardModel, dataSourceBrowser) {
        return _super.call(this, dashboardItem, dashboardModel, dataSourceBrowser) || this;
    }
    ScatterChartItemSurface.prototype.fillSections = function () {
        var _this = this;
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisXMeasure,
            warning: ko.computed(function () { return !_this.dashboardItem.axisXMeasure() && (!!_this.dashboardItem.arguments().length || !!_this.dashboardItem.weight() || !!_this.dashboardItem.axisYMeasure()); }),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.AxisYMeasure,
            warning: ko.computed(function () { return !_this.dashboardItem.axisYMeasure() && (!!_this.dashboardItem.arguments().length || !!_this.dashboardItem.weight() || !!_this.dashboardItem.axisXMeasure()); }),
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _single_data_item_surface_1.SingleDataItemSurface({
            itemSurface: this,
            sectionInfo: _section_descriptors_1.SectionDescriptors.Weight,
            extendTabsHandler: this.addConditionalFormattingOptions.bind(this),
        }));
        this.dataSections.push(new _data_item_collection_surface_1.DataItemCollectionSurface(this, _section_descriptors_1.SectionDescriptors.Arguments, this.addConditionalFormattingOptions.bind(this), ko.computed(function () { return !!_this.dashboardItem.weight() && !_this.dashboardItem.arguments().length; })));
    };
    ScatterChartItemSurface.prototype.getPropertiesComposer = function () {
        return new _scatter_chart_item_properties_composer_1.ScatterChartItemPropertiesComposer(this._dashboardItemCustomization, this.editCFRuleRuleHandler.bind(this), this.createCFRuleDelegate.bind(this));
    };
    ScatterChartItemSurface.prototype.editCFRuleRuleHandler = function (item, args, container) {
        var surface = new _format_rule_surface_1.FormatRuleSurface(container, this.dashboardItem, this._dataSourceBrowser, this.propertiesController);
        surface.startEditing(args);
    };
    ScatterChartItemSurface.prototype.createCFRuleDelegate = function () {
        return new scatter_chart_item_format_rule_1.ScatterChartItemFormatRule();
    };
    ScatterChartItemSurface.prototype.addConditionalFormattingOptions = function (tabs, dataItem) {
        var _this = this;
        var dataItemName = dataItem && dataItem.uniqueName();
        if (!dataItemName)
            return;
        var createRule = function () {
            var cfRule = _this.createCFRuleDelegate();
            cfRule.dataItemName(dataItemName);
            return cfRule;
        };
        tabs.push(new _accordion_tab_1.AccordionTab(_accordion_tab_1.KnownTabs.ConditionalFormatting, 'DashboardWebStringId.ConditionalFormatting', _data_item_properties_composer_1.DataItemsPropertiesComposer.getFormatRulesWrapper(this.dashboardItem, createRule, function (cfRule) { return cfRule.dataItemName() === dataItemName; }, this.editCFRuleRuleHandler.bind(this))));
    };
    ScatterChartItemSurface.prototype.extendHiddenMeasuresTabs = function (tabs, model) {
        this.addConditionalFormattingOptions(tabs, model);
    };
    return ScatterChartItemSurface;
}(_base_item_surface_1.DataDashboardItemSurface));
exports.ScatterChartItemSurface = ScatterChartItemSurface;
_section_descriptors_1.surfaceItemsFactory.register('ScatterChart', ScatterChartItemSurface);
