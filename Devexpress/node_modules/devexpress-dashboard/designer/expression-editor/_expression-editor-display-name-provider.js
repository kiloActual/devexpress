/**
* DevExpress Dashboard (_expression-editor-display-name-provider.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var ef_data_source_1 = require("../../model/data-sources/ef-data-source");
var object_data_source_1 = require("../../model/data-sources/object-data-source");
var xpo_data_source_1 = require("../../model/data-sources/xpo-data-source");
var ExpressionEditorDisplayNameProvider = (function () {
    function ExpressionEditorDisplayNameProvider(_dataFieldsProvider, _dataSourceName, _dataMember) {
        this._dataFieldsProvider = _dataFieldsProvider;
        this._dataSourceName = _dataSourceName;
        this._dataMember = _dataMember;
    }
    ExpressionEditorDisplayNameProvider.create = function (dataSourceProvider, dataFieldsProvider, dataSourceName, dataMember) {
        var dataSource = dataSourceProvider.findDataSource(dataSourceName);
        if (dataSource instanceof object_data_source_1.ObjectDataSource || dataSource instanceof xpo_data_source_1.XpoDataSource || dataSource instanceof ef_data_source_1.EFDataSource) {
            return new ExpressionEditorDisplayNameProvider(dataFieldsProvider, dataSourceName, dataMember);
        }
        return null;
    };
    ExpressionEditorDisplayNameProvider.prototype.getDisplayNameByPath = function (dataSourcePath, fieldPath) {
        var _this = this;
        var parts = fieldPath.split('.');
        var result = null;
        var curPath = null;
        var _loop_1 = function (i) {
            curPath = curPath ? curPath + '.' + parts[i] : parts[i];
            var closedCurPath = curPath;
            var addCurDisplayPart = function (curDisplayPath) { return _this._dataFieldsProvider.findDataField(_this._dataSourceName, _this._dataMember, closedCurPath)
                .then(function (dataField) {
                var def = _jquery_helpers_1.createJQueryDeferred();
                if (!dataField)
                    def.reject(fieldPath);
                else {
                    var displayName = dataField.displayName() || dataField.dataMember();
                    def.resolve(curDisplayPath ? curDisplayPath + '.' + displayName : displayName);
                }
                return def.promise();
            }, function () { return fieldPath; }); };
            result = result ? result.then(addCurDisplayPart) : addCurDisplayPart('');
        };
        for (var i = 0; i < parts.length; i++) {
            _loop_1(i);
        }
        var removeRejection = function (result) { return _jquery_helpers_1.createJQueryDeferred().resolve(result).promise(); };
        return result.then(removeRejection, removeRejection);
    };
    ExpressionEditorDisplayNameProvider.prototype.getRealName = function (dataSourcePath, fieldDisplayPath) {
        return this._getRealNameRecursive('', fieldDisplayPath.split('.'))
            .then(function (dataMember) { return _jquery_helpers_1.createJQueryDeferred().resolve(dataMember ? dataMember : fieldDisplayPath).promise(); });
    };
    ExpressionEditorDisplayNameProvider.prototype._getRealNameRecursive = function (curFieldPath, displayNameParts) {
        var _this = this;
        return this._dataFieldsProvider.getDataFieldsArray(this._dataSourceName, this._dataMember, curFieldPath, function (_) { return true; }).then(function (dataFieldList) {
            var i = 0;
            var dataField;
            var _loop_2 = function () {
                var displayName = displayNameParts.slice(0, i).join('.');
                dataField = dataFieldList.filter(function (dataField) { return dataField.displayName() === displayName; })[0];
                if (dataField)
                    return "break";
            };
            for (; i <= displayNameParts.length; i++) {
                var state_1 = _loop_2();
                if (state_1 === "break")
                    break;
            }
            if (!dataField)
                return;
            if (i === displayNameParts.length)
                return dataField.dataMember();
            return _this._getRealNameRecursive(dataField.dataMember(), displayNameParts.slice(i));
        });
    };
    return ExpressionEditorDisplayNameProvider;
}());
exports.ExpressionEditorDisplayNameProvider = ExpressionEditorDisplayNameProvider;
