/**
* DevExpress Dashboard (_expression-editor.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var analytics_criteria_1 = require("@devexpress/analytics-core/analytics-criteria");
var analytics_widgets_1 = require("@devexpress/analytics-core/analytics-widgets");
var $ = require("jquery");
var ko = require("knockout");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _dx_designer_integration_1 = require("../_dx-designer-integration");
var _expression_editor_functions_1 = require("./_expression-editor-functions");
var _flat_item_provider_wrapper_1 = require("./_flat-item-provider-wrapper");
var DashboardExpressionEditor = (function (_super) {
    __extends(DashboardExpressionEditor, _super);
    function DashboardExpressionEditor(options, fieldListProvider, displayNameProvider, saveHandler, disabled) {
        var _this = this;
        options.theme = _dx_designer_integration_1.getAceTheme();
        _this = _super.call(this, options, fieldListProvider, disabled, undefined, displayNameProvider) || this;
        var createCompletersBase = _this.languageHelper.createCompleters;
        _this.languageHelper.createCompleters = function (e, b, v) {
            var completers = createCompletersBase.call(_this.languageHelper, e, b, v);
            completers[0]['_fieldListProvider'] = new _flat_item_provider_wrapper_1.FlatItemProviderWrapper(fieldListProvider());
            completers.forEach(function (completer) { return _this._disposables.push(completer); });
            return completers;
        };
        var saveHandlerValue = function (callback) {
            var val = '';
            if (_this.aceAvailable) {
                val = _this.editorContainer().getSession().getValue();
            }
            else {
                val = _this.textAreaValue();
            }
            var toRealExpressionPromise = _this.displayExpressionConverter ?
                _this.displayExpressionConverter.toRealExpression(options.path(), val) :
                _jquery_helpers_1.createJQueryDeferred().resolve(val).promise();
            toRealExpressionPromise
                .then(function (realExpression) {
                if (!!realExpression) {
                    analytics_criteria_1.CriteriaOperator.parse(realExpression);
                    options.value(realExpression);
                    _this.isValid(true);
                    options.isValid(true);
                }
                else {
                    _this.isValid(false);
                    options.isValid(false);
                }
            })
                .catch(function (exception) {
                _this.isValid(false);
                options.isValid(false);
            })
                .then(function () {
                if (_this.isValid()) {
                    callback();
                }
            });
        };
        saveHandler && saveHandler(saveHandlerValue);
        _this._disposables.push(_this.displayValue.subscribe(function (newValue) { return _this.textAreaValue(newValue); }));
        return _this;
    }
    DashboardExpressionEditor.prototype.focus = function () {
        this.editorContainer() && this.editorContainer().focus();
    };
    return DashboardExpressionEditor;
}(analytics_widgets_1.ExpressionEditor));
exports.DashboardExpressionEditor = DashboardExpressionEditor;
ko.bindingHandlers['dshdExpressionEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var $element = $(element);
        $element.children().remove();
        $element.addClass('dx-filtereditor');
        var templateHtml = analytics_widgets_1.getTemplate('dx-expressioneditor-main'), $element = $element.append(templateHtml), editorElement = $element.children()[0], values = valueAccessor();
        values.options.functions = _expression_editor_functions_1.getExpressionEditorFunctions();
        var editor = new DashboardExpressionEditor(values.options, ko.observable(values.fieldListProvider), values.displayNameProvider, values.saveHandler, viewModel.disabled);
        editor.popupVisible(true);
        ko.utils.domNodeDisposal.addDisposeCallback(editorElement, function () {
            editor.dispose();
        });
        ko.applyBindings(editor, editorElement);
        editor.focus();
        return { controlsDescendantBindings: true };
    }
};
