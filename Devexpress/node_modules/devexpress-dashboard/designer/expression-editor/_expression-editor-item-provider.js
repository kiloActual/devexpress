/**
* DevExpress Dashboard (_expression-editor-item-provider.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _data_source_browser_1 = require("../../common/_data-source-browser");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var data_item_1 = require("../../model/data-item/data-item");
var olap_data_source_1 = require("../../model/data-sources/olap-data-source");
var _parameters_helper_1 = require("../../model/parameters/_parameters-helper");
var ExpressionEditorItemsProvider = (function () {
    function ExpressionEditorItemsProvider(dataFieldsProvider, dataSourceProvider, parameters, dataSourceName, dataMember, filterPredicate) {
        if (filterPredicate === void 0) { filterPredicate = function () { return true; }; }
        this.dataFieldsProvider = dataFieldsProvider;
        this.dataSourceProvider = dataSourceProvider;
        this.parameters = parameters;
        this.dataSourceName = dataSourceName;
        this.dataMember = dataMember;
        this.filterPredicate = filterPredicate;
    }
    ExpressionEditorItemsProvider.prototype.getItems = function (pathRequest) {
        var _this = this;
        var items = [], fullPath = pathRequest.fullPath && pathRequest.fullPath.toLowerCase() || '';
        if (fullPath === '') {
            items = [{
                    displayName: 'Parameters',
                    name: 'Parameters',
                    isList: true,
                    specifics: 'parameters'
                }];
        }
        else if (fullPath === 'parameters') {
            items = (this.parameters && this.parameters || []).map(function (parameter) {
                var parameterType = _parameters_helper_1.ParameterHelper.typeValues.filter(function (item) { return item.value === parameter.type(); })[0];
                var parameterSpecific = parameterType && parameterType.specifics || 'Default';
                return {
                    displayName: parameter.name(),
                    name: parameter.name(),
                    isList: false,
                    specifics: parameterSpecific
                };
            });
        }
        else {
            var deferred = _jquery_helpers_1.createJQueryDeferred(), fieldPath = pathRequest.path, dataSource = this.dataSourceProvider.findDataSource(this.dataSourceName());
            if (!!this.dataMember) {
                fieldPath = _data_source_browser_1.trimLeadingPathElement(fieldPath, this.dataMember());
            }
            this.dataFieldsProvider.getDataFieldsArray(this.dataSourceName(), this.dataMember(), fieldPath, _data_source_browser_1.isNonCollectionDataField)
                .done(function (dataFields) {
                items = dataFields.filter(_this.filterPredicate).map(function (field) {
                    return {
                        displayName: ko.unwrap(field.displayName),
                        name: dataSource instanceof olap_data_source_1.OlapDataSource ? field.dataMember() : field.name(),
                        field: field,
                        isList: !field.isDataFieldNode(),
                        hasItems: !field.isDataFieldNode(),
                        specifics: field.isDataFieldNode() ? data_item_1.DataItem.typesMap[field.fieldType()] || 'Default' : field.isList && field.isList() ? 'List' : 'Default'
                    };
                });
                deferred.resolve(items);
            });
            return deferred.promise();
        }
        return _jquery_helpers_1.createJQueryDeferred().resolve(items).promise();
    };
    return ExpressionEditorItemsProvider;
}());
exports.ExpressionEditorItemsProvider = ExpressionEditorItemsProvider;
