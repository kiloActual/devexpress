/**
* DevExpress Dashboard (_toolbox-view-model.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _drag_item_info_1 = require("../../common/docking-layout/drag-and-drop/_drag-item-info");
var _interfaces_1 = require("../../common/internal/_interfaces");
var index_internal_1 = require("../../model/index.internal");
var _dashboard_item_helper_1 = require("../../model/internal/_dashboard-item_helper");
var _toolbox_extension_1 = require("./_toolbox-extension");
var ToolboxViewModel = (function () {
    function ToolboxViewModel(menuVisible, _defaultMenuItemData, _menuItems, _toolboxGroups, _toolbarGroups, _layoutDragController) {
        var _this = this;
        this._defaultMenuItemData = _defaultMenuItemData;
        this._menuItems = _menuItems;
        this._toolboxGroups = _toolboxGroups;
        this._toolbarGroups = _toolbarGroups;
        this._layoutDragController = _layoutDragController;
        this.toolbarHeight = ko.observable(0);
        this.settingsForm = ko.observable();
        this.toggleMenu = function () {
            _this.settingsFormVisible(false);
            _this.settingsForm(null);
            _this.menuVisible(!_this.menuVisible());
        };
        this.closeMenu = function () {
            if (_this.menuVisible()) {
                _this.toggleMenu();
            }
        };
        this.showMenu = function () {
            if (!_this.menuVisible()) {
                _this.toggleMenu();
            }
        };
        this.menuItemClick = function (menuItem) {
            menuItem.click && menuItem.click();
            if (menuItem.template) {
                _this.settingsForm({
                    title: menuItem.title.replace('…', ''),
                    template: menuItem.template,
                    data: !!menuItem.data ? menuItem.data : _this._defaultMenuItemData
                });
                _this._menuItems().forEach(function (item) { return item.selected(item === menuItem); });
            }
        };
        this.menuVisible = ko.observable(false);
        this.designerPanelLeft = ko.observable(menuVisible ? 0 : -_toolbox_extension_1.toolboxConstants.leftPanelWidth);
        this.menuItemsSorted = ko.pureComputed(function () {
            return _this._menuItems().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.toolboxGroupsSorted = ko.pureComputed(function () {
            return _this._toolboxGroups().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.toolbarGroupsSorted = ko.pureComputed(function () {
            return _this._toolbarGroups().sort(function (a, b) { return (a.index || Number.MAX_VALUE) - (b.index || Number.MAX_VALUE); });
        });
        this.settingsFormVisible = ko.computed({
            read: function () { return _this.menuVisible() && _this._menuItems().some(function (contextMenuItem) { return contextMenuItem.selected(); }); },
            write: function (val) { return _this._menuItems().forEach(function (item) { return item.selected(val); }); }
        });
    }
    ToolboxViewModel.prototype.initDragEvents = function (itemType) {
        var _this = this;
        var subscription = null;
        return {
            onInitialize: function (args) {
                var controller = _this._layoutDragController();
                controller && controller.initExternalElement(args.element, new ToolboxItemDragItemInfo(itemType));
                subscription = index_internal_1.subscribeWithPrev(_this._layoutDragController, function (prevValue, newValue) {
                    prevValue && prevValue.cleanExternalElement(args.element);
                    newValue && newValue.initExternalElement(args.element, new ToolboxItemDragItemInfo(itemType));
                });
            },
            onDisposing: function (args) {
                var controller = _this._layoutDragController();
                controller && controller.cleanExternalElement(args.element);
                subscription && subscription.dispose();
            }
        };
    };
    ToolboxViewModel.prototype.processKeyEvent = function (keyEventType, eventArgs) {
        var _this = this;
        if (keyEventType === 'keyup') {
            if (eventArgs.altKey) {
                var menuItem = this._menuItems().filter(function (item) { return item.hotKey === eventArgs.keyCode; })[0];
                if (menuItem) {
                    setTimeout(function () {
                        setTimeout(function () { return _this.menuItemClick(menuItem); }, _this.menuVisible() ? 10 : 250);
                        _this.menuVisible(true);
                    }, 1);
                    return true;
                }
            }
        }
        else if (keyEventType === 'keydown') {
            if (eventArgs.keyCode === _interfaces_1.KeyCodes.Esc && this.menuVisible()) {
                this.closeMenu();
                return true;
            }
            else if (eventArgs.altKey && this._menuItems().map(function (menuItem) { return menuItem.hotKey; }).indexOf(eventArgs.keyCode) !== -1) {
                eventArgs.preventDefault();
                return true;
            }
        }
        return false;
    };
    ToolboxViewModel.prototype.showDesignerPanel = function () {
        this.designerPanelLeft(0);
    };
    ToolboxViewModel.prototype.hideDesignerPanel = function () {
        this.designerPanelLeft(-_toolbox_extension_1.toolboxConstants.leftPanelWidth);
    };
    return ToolboxViewModel;
}());
exports.ToolboxViewModel = ToolboxViewModel;
var ToolboxItemDragItemInfo = (function (_super) {
    __extends(ToolboxItemDragItemInfo, _super);
    function ToolboxItemDragItemInfo(_itemType) {
        var _this = _super.call(this) || this;
        _this._itemType = _itemType;
        return _this;
    }
    ToolboxItemDragItemInfo.prototype.canDrop = function (layoutItem) {
        return layoutItem.canAttach(_dashboard_item_helper_1.getItemJson(this._itemType));
    };
    ToolboxItemDragItemInfo.prototype.drop = function (dragOverState) {
        dragOverState.targetItem.create(_dashboard_item_helper_1.getItemJson(this._itemType), dragOverState.hoverLocation, dragOverState.targetItemBehavior);
    };
    ToolboxItemDragItemInfo.prototype.dragStart = function () { };
    ToolboxItemDragItemInfo.prototype.dragEnd = function () { };
    return ToolboxItemDragItemInfo;
}(_drag_item_info_1.DashboardDragItemInfo));
