/**
* DevExpress Dashboard (format-condition-bar.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var _format_rules_common_1 = require("../metadata/_format-rules-common");
var bar_style_settings_1 = require("../style-settings/bar-style-settings");
var format_condition_min_max_base_1 = require("./format-condition-min-max-base");
var _format_condition_bar_1 = require("./metadata/_format-condition-bar");
var FormatConditionBar = (function (_super) {
    __extends(FormatConditionBar, _super);
    function FormatConditionBar(modelJson, serializer) {
        if (serializer === void 0) { serializer = new analytics_utils_1.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.currentStyleSettingsType = ko.observable('Positive');
        _this.getSpecificType = function () { return null; };
        _this.setSpecificType = function (type) { };
        _this.negativeStyleSettings(new bar_style_settings_1.BarStyleSettings(modelJson && modelJson[_format_condition_bar_1.barNegativeStyleSettings.modelName] || {}));
        if (modelJson) {
            delete modelJson[_format_condition_bar_1.barNegativeStyleSettings.modelName];
        }
        _this.currentStyleSettings = ko.computed({
            read: function () { return _this.currentStyleSettingsType() == 'Positive' ? _this.styleSettings() : _this.negativeStyleSettings(); },
            write: function (value) { return _this.currentStyleSettingsType() == 'Positive' ? _this.styleSettings(value) : _this.negativeStyleSettings(value); }
        });
        return _this;
    }
    Object.defineProperty(FormatConditionBar.prototype, "_isApplyToRowColumnRestricted", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    FormatConditionBar.prototype._getInfoButStyleSettings = function () {
        return _format_condition_bar_1.formatConditionBarSerializationsInfo;
    };
    FormatConditionBar.prototype._getStyleSettingsInfo = function () {
        return __assign({}, _format_rules_common_1.styleSettings, { modelName: 'StyleSettings', type: bar_style_settings_1.BarStyleSettings });
    };
    FormatConditionBar.prototype._getDefaultStyleSettingsType = function () {
        return 'BarStyleSettings';
    };
    FormatConditionBar.prototype.init = function () {
        _super.prototype.init.call(this);
        if (this.negativeStyleSettings()) {
            this.negativeStyleSettings().init();
        }
        this.isEmpty(false);
    };
    return FormatConditionBar;
}(format_condition_min_max_base_1.FormatConditionMinMaxBase));
exports.FormatConditionBar = FormatConditionBar;
