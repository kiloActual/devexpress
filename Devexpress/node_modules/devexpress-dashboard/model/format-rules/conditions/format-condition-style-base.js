/**
* DevExpress Dashboard (format-condition-style-base.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var ko = require("knockout");
var _format_rules_common_1 = require("../metadata/_format-rules-common");
var _style_settings_utils_1 = require("../style-settings/_style-settings-utils");
var format_condition_base_1 = require("./format-condition-base");
exports.currentStyleSettingsInfo = function (styleSettingsType) {
    return !styleSettingsType ? undefined : __assign({}, _format_rules_common_1.styleSettings, { modelName: styleSettingsType(), type: _style_settings_utils_1.styleSettingsTypesMap[styleSettingsType()] });
};
var FormatConditionStyleBase = (function (_super) {
    __extends(FormatConditionStyleBase, _super);
    function FormatConditionStyleBase(modelJson, serializer) {
        if (serializer === void 0) { serializer = new analytics_utils_1.ModelSerializer(); }
        var _this = _super.call(this, modelJson, serializer) || this;
        _this.styleSettings = ko.observable();
        _this._styleSettingsType = ko.observable();
        _this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(function (mapItem) { return !!modelJson && modelJson[mapItem]; })[0] || _this._getDefaultStyleSettingsType());
        var styleSettingsModelName = _this._getStyleSettingsInfo().modelName;
        var styleSettingsJson = (modelJson || {})[styleSettingsModelName];
        _this.styleSettings(new _style_settings_utils_1.styleSettingsTypesMap[_this._styleSettingsType()](styleSettingsJson));
        delete _this['_model'][styleSettingsModelName];
        _this.styleSettings.subscribe(function (styleSettings) {
            _this._styleSettingsType(_style_settings_utils_1.styleSettingsTypes.filter(function (mapItem) { return styleSettings instanceof _style_settings_utils_1.styleSettingsTypesMap[mapItem]; })[0]);
        });
        return _this;
    }
    FormatConditionStyleBase.prototype.getInfo = function () {
        var styleSettingsInfo = this._getStyleSettingsInfo();
        return this._getInfoButStyleSettings().concat(!styleSettingsInfo ? [] : [styleSettingsInfo]);
    };
    FormatConditionStyleBase.prototype._getStyleSettingsInfo = function () {
        return exports.currentStyleSettingsInfo(this._styleSettingsType);
    };
    FormatConditionStyleBase.prototype._getDefaultStyleSettingsType = function () {
        return 'AppearanceSettings';
    };
    FormatConditionStyleBase.prototype.getDefaultStyleSettingsType = function () {
        return this._getDefaultStyleSettingsType();
    };
    FormatConditionStyleBase.prototype.isValid = function () {
        return _super.prototype.isValid.call(this);
    };
    FormatConditionStyleBase.prototype.init = function () {
        if (this.styleSettings()) {
            this.styleSettings().init();
        }
        this.isEmpty(false);
    };
    return FormatConditionStyleBase;
}(format_condition_base_1.FormatConditionBase));
exports.FormatConditionStyleBase = FormatConditionStyleBase;
