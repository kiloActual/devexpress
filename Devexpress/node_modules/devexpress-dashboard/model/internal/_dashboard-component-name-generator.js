/**
* DevExpress Dashboard (_dashboard-component-name-generator.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _helper_classes_1 = require("./_helper-classes");
var _knockout_utils_1 = require("./_knockout-utils");
var DashboardUniqueNameGenerator = (function () {
    function DashboardUniqueNameGenerator(_propertyName, _startIndex) {
        var collections = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            collections[_i - 2] = arguments[_i];
        }
        var _this = this;
        this._propertyName = _propertyName;
        this._startIndex = _startIndex;
        this._disposables = [];
        this._componentsCollections = collections;
        this._componentsCollections.map(function (collection) {
            collection().forEach(function (item) { return _this._ensureUniqueName(item); });
            _this._disposables.push(_knockout_utils_1.subscribeArrayChangeWithCancel(collection, function (changes) {
                for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
                    var itemChange = changes_1[_i];
                    var change = itemChange;
                    if (change.status === 'added') {
                        if (!_this._ensureUniqueName(change.value))
                            return false;
                    }
                }
                return true;
            }));
        });
    }
    DashboardUniqueNameGenerator.prototype._ensureUniqueName = function (item) {
        var affectedItems = this._componentsCollections.reduce(function (result, collection) { return result.concat(collection()); }, []), itemIndex = affectedItems.indexOf(item), uniqueName = item[this._propertyName]();
        affectedItems.splice(itemIndex, 1);
        if (!!uniqueName && !_helper_classes_1.NameGenerator.isValidName(uniqueName, affectedItems, this._propertyName))
            throw new Error("Invalid Name \"" + uniqueName + "\": An item with the same name already exists. Check the name or set it to 'undefined' to generate a unique name automatically.");
        if (!uniqueName) {
            item[this._propertyName](_helper_classes_1.NameGenerator.generateName(item.getUniqueNamePrefix(), affectedItems, this._propertyName, this._startIndex));
        }
        return true;
    };
    DashboardUniqueNameGenerator.prototype.dispose = function () {
        this._disposables.map(function (disposable) { return disposable.dispose(); });
    };
    return DashboardUniqueNameGenerator;
}());
exports.DashboardUniqueNameGenerator = DashboardUniqueNameGenerator;
