/**
* DevExpress Dashboard (_jquery-helpers.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("devextreme/core/config");
var $ = require("jquery");
exports.$promiseAdapter = function (promise) { return promise; };
exports.$unwrap = function (element) {
    if (element.jquery || element.dxRenderer) {
        return element[0];
    }
    else {
        return element;
    }
};
exports.$wrap = function (element) { return $(element); };
exports.wrapPublicElement = function (element) { return (config_1.default().useJQuery ? exports.$wrap(element) : element); };
exports.extend = function (target, source1) {
    var sources = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        sources[_i - 2] = arguments[_i];
    }
    return $.extend.apply($, [target, source1].concat(sources));
};
exports.deepExtend = function (target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    return $.extend.apply($, [true, target].concat(sources));
};
exports.isPlainObject = function (object) { return $.isPlainObject(object); };
exports.getWidth = function (element) { return $(element).width(); };
exports.getHeight = function (element) { return $(element).height(); };
exports.getOuterWidth = function (element) { return $(element).outerWidth(); };
exports.getOuterHeight = function (element) { return $(element).outerHeight(); };
exports.isVisible = function (element) { return $(element).is(':visible'); };
exports.closest = function (element, css) {
    var node = element;
    var matches = node.matches || node.matchesSelector || node.webkitMatchesSelector || node.mozMatchesSelector || node.msMatchesSelector || node.oMatchesSelector;
    while (node) {
        if (matches.apply(node, [css]))
            return node;
        node = closestParentElement(node);
    }
    return null;
};
var closestParentElement = function (node) {
    while (node && !node.parentElement) {
        node = node.parentNode;
    }
    return node ? node.parentElement : null;
};
exports.createJQueryCallbacks = function () { return $.Callbacks(); };
exports.createJQueryDeferred = function () { return $.Deferred(); };
exports.jqueryWhen = function () {
    var promises = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        promises[_i] = arguments[_i];
    }
    return $.when.apply($, promises);
};
exports.jqueryWhenArray = function (promises) { return $.when.apply($.when, promises); };
exports.jqueryQueryParam = function (value) { return $.param(value); };
exports.jqueryOffset = function (element) { return $(element).offset(); };
