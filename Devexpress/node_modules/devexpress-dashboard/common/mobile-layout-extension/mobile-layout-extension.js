/**
* DevExpress Dashboard (mobile-layout-extension.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var devices_1 = require("devextreme/core/devices");
var dialog_1 = require("devextreme/ui/dialog");
var ko = require("knockout");
var _default_1 = require("../../data/localization/_default");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var control_options_1 = require("../control-options");
var _options_manager_1 = require("../internal/_options-manager");
var _mobile_layout_1 = require("./_mobile-layout");
var name = 'mobile-layout';
var nameAlias = 'mobileLayout';
var MobileLayoutExtension = (function () {
    function MobileLayoutExtension(dashboardControl, options) {
        var _this = this;
        this.dashboardControl = dashboardControl;
        this.name = name;
        this._disposables = [];
        this._optionsManager = new _options_manager_1.OptionsManager();
        this._mobileLayoutEnabledOption = ko.observable();
        this._defaultOptions = {
            mobileLayoutEnabled: 'Auto'
        };
        this._mobileLayoutTemplateName = 'dx-dashboard-mobile-layout';
        this._dashboardList = [];
        this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: this._defaultOptions,
            initOptions: options,
            optionChanged: function (args) { return _this._optionChanged(args); }
        });
        this._mobileLayoutEnabledOption(this._optionsManager.get('mobileLayoutEnabled'));
        this._canMobileLayoutBeEnabled = _knockout_utils_1.safeComputed({ isDesignMode: this.dashboardControl.isDesignMode }, function (args) { return !args.isDesignMode; });
        this._isMobileLayoutModeExpected = _knockout_utils_1.safeComputed({ mobileLayoutEnabled: this._mobileLayoutEnabledOption }, function (args) {
            if (args.mobileLayoutEnabled === 'Always') {
                return true;
            }
            else if (args.mobileLayoutEnabled === 'Never') {
                return false;
            }
            else {
                return devices_1.default.current().phone;
            }
        });
        this.mobileLayoutEnabled = _knockout_utils_1.safeComputed({
            canMobileLayoutBeEnabled: this._canMobileLayoutBeEnabled,
            isMobileLayoutModeExpected: this._isMobileLayoutModeExpected
        }, function (args) {
            if (args.canMobileLayoutBeEnabled) {
                return args.isMobileLayoutModeExpected;
            }
            else {
                return false;
            }
        });
    }
    MobileLayoutExtension.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'mobileLayoutEnabled':
                this._mobileLayoutEnabledOption(args.value);
                return 'reinitializeDashboard';
            default:
                return null;
        }
    };
    MobileLayoutExtension.prototype.start = function () {
        var _this = this;
        setTimeout(function () {
            if (_this._isMobileLayoutModeExpected() && !_this._canMobileLayoutBeEnabled()) {
                dialog_1.confirm(_default_1.getLocalizationById('DashboardWebStringId.MobileLayout.SwitchToViewer'), '').then(function (res) {
                    if (res) {
                        _this.dashboardControl.switchToViewer();
                    }
                });
            }
        });
        var layoutController = _knockout_utils_1.safeComputed({
            dashboard: this.dashboardControl.dashboard,
            mobileLayoutEnabled: this.mobileLayoutEnabled
        }, function (args) {
            if (args.dashboard && args.mobileLayoutEnabled) {
                return new _mobile_layout_1.DashboardMobileLayoutController(args.dashboard, _this.dashboardControl._dashboardContext, function (name) { return _this.dashboardControl.findExtension(name); }, _this.dashboardControl.encodeHtml, _this.dashboardControl._viewerApi);
            }
            return null;
        });
        this._disposables.push(layoutController);
        this.dashboardControl._layoutInfoProviderCollection.splice(0, 0, {
            condition: function () { return _this.mobileLayoutEnabled(); },
            name: this._mobileLayoutTemplateName,
            getViewModel: function () { return _knockout_utils_1.safeComputed({ layoutController: layoutController }, function (args) { return ({ componentArgs: args.layoutController }); }); },
            getLayoutController: function () { return layoutController; }
        });
        this.dashboardControl._updateLayout();
        this.mobileLayoutEnabled.subscribe(function (_) {
            _this.dashboardControl._updateLayout();
        });
    };
    MobileLayoutExtension.prototype.stop = function () {
        this._disposables.forEach(function (d) { return d.dispose(); });
    };
    return MobileLayoutExtension;
}());
exports.MobileLayoutExtension = MobileLayoutExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new MobileLayoutExtension(dashboardControl, options); };
control_options_1.extensionNameMap[name] = nameAlias;
