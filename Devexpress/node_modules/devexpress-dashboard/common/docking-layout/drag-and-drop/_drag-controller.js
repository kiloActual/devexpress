/**
* DevExpress Dashboard (_drag-controller.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("devextreme/events");
var ko = require("knockout");
var _layout_item_1 = require("../core/_layout-item");
var _layout_drag_over_state_1 = require("./_layout-drag-over-state");
var _layout_item_drag_item_1 = require("./_layout-item-drag-item");
var _scroll_animator_1 = require("./_scroll-animator");
var LayoutDragController = (function () {
    function LayoutDragController() {
        this._dragOverState = new _layout_drag_over_state_1.DragOverStateController();
        this._layoutMainElement = null;
        this._externalElements = [];
        this._firstOverEvent = false;
    }
    LayoutDragController.prototype.initScrollAnimator = function (scrollViewProvider) {
        this._scrollAnimator = new _scroll_animator_1.ScrollAnimator(scrollViewProvider);
    };
    LayoutDragController.prototype.cleanScrollAnimator = function () {
        this._scrollAnimator && this._scrollAnimator.dispose();
        this._scrollAnimator = null;
    };
    LayoutDragController.prototype.initLayoutMainElement = function (element) {
        var _this = this;
        if (this._layoutMainElement) {
            throw new Error('Layout main element already initialized');
        }
        this._layoutMainElement = element;
        events_1.on(element, 'dragstart.dx-layout-drag', '.dx-layout-item-plate', function (args) {
            var originalEvent = args.originalEvent;
            var item = ko.dataFor(originalEvent.target);
            if (item instanceof _layout_item_1.LayoutItem) {
                _this._onDragStart(args, new _layout_item_drag_item_1.LayoutItemDragItemInfo(item));
                return true;
            }
        });
        events_1.on(element, 'dragover.dx-layout-drag', function (args) {
            var originalEvent = args.originalEvent;
            var item = ko.dataFor(originalEvent.target);
            _this._onDragOver(args, item);
        });
        events_1.on(element, 'drag.dx-layout-drag', function (args) { return _this._onDrag(args); });
        events_1.on(element, 'dragleave.dx-layout-drag', function (args) { return _this._onDragLeave(); });
        events_1.on(element, 'drop.dx-layout-drag', function (args) { return _this._onDrop(args); });
        events_1.on(element, 'dragend.dx-layout-drag', function (args) { return _this._onDragEnd(); });
    };
    LayoutDragController.prototype.cleanLayoutMainElement = function (element) {
        if (this._layoutMainElement === element) {
            events_1.off(element, '.dx-layout-drag');
            this._layoutMainElement = null;
        }
    };
    LayoutDragController.prototype.initExternalElement = function (element, dragItemInfo) {
        var _this = this;
        this._externalElements.push(element);
        events_1.on(element, 'dragstart.dx-layout-drag', function (args) {
            _this._onDragStart(args, dragItemInfo);
        });
        events_1.on(element, 'drag.dx-layout-drag', function (args) { return _this._onDrag(args); });
        events_1.on(element, 'dragend.dx-layout-drag', function (args) { return _this._onDragEnd(); });
    };
    LayoutDragController.prototype.cleanExternalElement = function (element) {
        this._externalElements && this._externalElements.splice(this._externalElements.indexOf(element), 1);
        events_1.off(element, '.dx-layout-drag');
    };
    LayoutDragController.prototype.dispose = function () {
        var _this = this;
        this.cleanScrollAnimator();
        this.cleanLayoutMainElement(this._layoutMainElement);
        this._externalElements && this._externalElements.slice().forEach(function (element) { return _this.cleanExternalElement(element); });
        this._externalElements = null;
    };
    LayoutDragController.prototype._onDragStart = function (eventArgs, dragData) {
        var originalEvent = eventArgs.originalEvent;
        originalEvent.dataTransfer.effectAllowed = 'move';
        this._dragData = dragData;
        this._firstOverEvent = true;
        this._dragOverState.reset();
        this._scrollAnimator && this._scrollAnimator.start();
    };
    LayoutDragController.prototype._onDragOver = function (eventArgs, targetLayoutItem) {
        var originalEvent = eventArgs.originalEvent;
        var cursorClientX = originalEvent.clientX;
        var cursorClientY = originalEvent.clientY;
        var targetElement = eventArgs.target;
        if (this._firstOverEvent) {
            this._dragData.dragStart();
            this._firstOverEvent = false;
        }
        if (targetLayoutItem instanceof _layout_item_1.LayoutItem && this._dragData && this._dragData.canDrop(targetLayoutItem)) {
            var dragOverController = targetLayoutItem.viewModel.dragOverInnerElementController;
            if (dragOverController) {
                var index = findElementIndex(targetElement, dragOverController.selector, cursorClientX, cursorClientY);
                if (index !== -1) {
                    dragOverController.onDragOver(index);
                }
            }
            var itemBounds = targetElement.getBoundingClientRect();
            var currentHoverLocation = getLocation(cursorClientX - itemBounds.left, cursorClientY - itemBounds.top, itemBounds.width, itemBounds.height);
            this._dragOverState.update(targetLayoutItem, currentHoverLocation);
            eventArgs.preventDefault();
            return true;
        }
        else {
            this._dragOverState.reset();
        }
    };
    LayoutDragController.prototype._onDragLeave = function () {
        this._dragOverState.reset();
    };
    LayoutDragController.prototype._onDrop = function (eventArgs) {
        var dragOverState = this._dragOverState.getState();
        if (dragOverState) {
            this._dragData.drop(dragOverState);
            eventArgs.stopPropagation();
        }
        this._onDragEnd();
    };
    LayoutDragController.prototype._onDrag = function (eventArgs) {
        if (this._scrollAnimator) {
            var originalEvent = eventArgs.originalEvent;
            this._scrollAnimator.updateCursorPosition(originalEvent.clientX, originalEvent.clientY);
        }
    };
    LayoutDragController.prototype._onDragEnd = function () {
        this._scrollAnimator && this._scrollAnimator.stop();
        this._dragOverState.reset();
        this._dragData && this._dragData.dragEnd();
        this._dragData = null;
    };
    return LayoutDragController;
}());
exports.LayoutDragController = LayoutDragController;
var getLocation = function (x, y, width, height) {
    if (y >= height / width * x) {
        return (y >= -height / width * x + height) ? 'bottom' : 'left';
    }
    else {
        return (y >= -height / width * x + height) ? 'right' : 'top';
    }
};
var findElementIndex = function (originalElement, selector, mouseClientX, mouseClientY) {
    var elements = originalElement
        .parentElement
        .querySelectorAll(selector);
    for (var index = 0; index < elements.length; index++) {
        var element = elements[index];
        var rect = element.getBoundingClientRect();
        if (rect.left < mouseClientX && rect.right > mouseClientX
            && rect.top < mouseClientY && rect.bottom > mouseClientY) {
            return index;
        }
    }
    return -1;
};
