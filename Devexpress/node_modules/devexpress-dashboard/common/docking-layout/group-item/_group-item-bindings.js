/**
* DevExpress Dashboard (_group-item-bindings.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var disposable_object_1 = require("../../../model/disposable-object");
var _dashboard_item_bindings_1 = require("../../viewer/_dashboard-item-bindings");
var _layout_item_1 = require("../core/_layout-item");
var GroupViewModel = (function (_super) {
    __extends(GroupViewModel, _super);
    function GroupViewModel(params) {
        var _this = _super.call(this) || this;
        _this.defaultPadding = _layout_item_1.SplitterSize * 2;
        _this.padding = ko.observable(_this.defaultPadding);
        _this.headerHeight = ko.observable(_dashboard_item_bindings_1.DashboardItemHeaderHeight);
        _this.layoutItem = ko.computed(function () { return ko.unwrap(params.layoutItem); });
        ko.computed(function () {
            _this.layoutItem().verticalPaddings(_this.padding() * 2 + _this.headerHeight());
            _this.layoutItem().horizontalPaddings(_this.padding() * 2);
        });
        ko.computed(function () {
            _this.layoutItem().setConstraints({
                min: {
                    width: _this.layoutItem().items().length === 0 ? 100 : 0,
                    height: _this.layoutItem().items().length === 0 ? 100 : 0
                },
                max: {
                    width: Number.MAX_VALUE,
                    height: Number.MAX_VALUE
                }
            });
        });
        return _this;
    }
    return GroupViewModel;
}(disposable_object_1.DisposableObject));
exports.GroupViewModel = GroupViewModel;
ko.components.register('dx-dashboard-layout-group', {
    viewModel: GroupViewModel,
    template: { element: 'dx-dashboard-layout-group' }
});
