/**
* DevExpress Dashboard (_docking-layout-controller.d.ts)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { DashboardItem } from '../../model';
import { Dashboard } from '../../model/dashboard';
import { DisposableObject } from '../../model/disposable-object';
import { IExtension, KnockoutTemplate } from '../common-interfaces';
import { DashboardLayoutController, ISizeController, VisibleItemsProvider } from '../internal/_interfaces';
import { ElementAccessorKoComponentArgs } from '../internal/_ko-element-accessor';
import { DashboardTitleContext } from '../viewer/title/_title-component';
import { ViewerApi } from '../viewer/_viewer-api';
import { IDashboardContext } from '../viewer/_viewer-interfaces';
import { DataSourceBrowser } from '../_data-source-browser';
import { LayoutItem } from './core/_layout-item';
import { LayoutDragController } from './drag-and-drop/_drag-controller';
import { FullscreenItemModel } from './_docking-layout-fullscreen-item';
export declare class DockingLayoutController extends DisposableObject implements DashboardLayoutController {
    dashboardModel: Dashboard;
    dataSourceBrowser: DataSourceBrowser;
    context: IDashboardContext;
    private _findExtension;
    allowMaximizeItems: boolean;
    resizeByTimer: ko.Observable<boolean>;
    repaintRequest: JQueryCallback;
    encodeHtml: boolean;
    constructor(dashboardModel: Dashboard, dataSourceBrowser: DataSourceBrowser, context: IDashboardContext, _findExtension: (name: string) => IExtension, allowMaximizeItems: boolean, resizeByTimer: ko.Observable<boolean>, repaintRequest: JQueryCallback, encodeHtml: boolean, viewerApi: ViewerApi);
    selectedLayoutItem: ko.Computed<ISizeController>;
    titleContext: DashboardTitleContext;
    readonly fullscreenItemProvider: FullscreenItemModel;
    select(item: LayoutItem): void;
    dragController: LayoutDragController;
    _scrollSubscriptions: any[];
    scrollViewEvents: import("devextreme/ui/scroll_view").dxScrollViewOptions;
    subscribeOnScroll(handler: () => void): void;
    unsubscribeOnScroll(handler: () => void): void;
    rootItem: LayoutItem;
    allowExportDashboard: boolean;
    fullscreenItemModel: FullscreenItemModel;
    layoutMainElementEvents: ElementAccessorKoComponentArgs;
    itemInteractionInProgress: ko.Observable<boolean>;
    _selectedLayoutItem: ko.Observable<LayoutItem>;
    selectedDashboardItem: ko.Computed<DashboardItem>;
    emptyItemTemplates: ko.ObservableArray<KnockoutTemplate>;
    emptyItemTemplatesService: (layoutItem: LayoutItem) => KnockoutTemplate;
    contextMenu: (layoutItem: LayoutItem) => KnockoutTemplate;
    layoutItemPlaceholderService: (layoutItem: LayoutItem) => KnockoutTemplate;
    addDashboardItem: (data: {
        type: string;
    }) => void;
    width: ko.Observable<number>;
    height: ko.Observable<number>;
    headerHeight: ko.Observable<number>;
    visibleItemsProvider: VisibleItemsProvider;
    dispose(): void;
}
