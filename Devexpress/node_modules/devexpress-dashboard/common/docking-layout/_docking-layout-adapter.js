/**
* DevExpress Dashboard (_docking-layout-adapter.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var disposable_object_1 = require("../../model/disposable-object");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _interfaces_1 = require("../internal/_interfaces");
var _docking_layout_controller_1 = require("./_docking-layout-controller");
var DockingLayoutAdapter = (function (_super) {
    __extends(DockingLayoutAdapter, _super);
    function DockingLayoutAdapter(_dashboardControl) {
        var _this = _super.call(this) || this;
        _this._dashboardControl = _dashboardControl;
        _this._dockingLayoutController = ko.observable();
        _this._templateName = 'dx-dashboard-resizable-layout';
        _this.toDispose(_this._dashboardControl.isDesignMode.subscribe(function (isDesignMode) {
            if (_this._dockingLayoutController() && _this._dockingLayoutController().rootItem) {
                _this._dockingLayoutController().rootItem.isDesignMode(isDesignMode);
                _this._dockingLayoutController().select(null);
            }
        }));
        _this.toDispose(_this._dashboardControl.dashboardContainer.subscribe(function (dashboardContainer) {
            if (dashboardContainer && dashboardContainer.dashboard) {
                _this._dockingLayoutController(new _docking_layout_controller_1.DockingLayoutController(dashboardContainer.dashboard, _this._dashboardControl._dataSourceBrowser, _this._dashboardControl._dashboardContext, function (name) { return _this._dashboardControl.findExtension(name); }, _this._dashboardControl.option('allowMaximizeItems'), _this._dashboardControl.resizeByTimer, _this._dashboardControl._repaintRequest, _this._dashboardControl.encodeHtml, _this._dashboardControl._viewerApi));
                _this._dockingLayoutController().rootItem.isDesignMode(_this._dashboardControl.isDesignMode());
            }
            else {
                if (_this._dockingLayoutController()) {
                    _this._dockingLayoutController().dispose();
                }
                _this._dockingLayoutController(null);
            }
        }));
        return _this;
    }
    DockingLayoutAdapter.prototype.start = function () {
        var _this = this;
        this._dashboardControl._layoutInfoProviderCollection.push({
            name: this._templateName,
            condition: function () { return true; },
            getViewModel: function () { return _this._getKoViewModel(); },
            getLayoutController: function () { return _this._dockingLayoutController; },
        });
        this._dashboardControl._updateLayout();
    };
    DockingLayoutAdapter.prototype.stop = function () {
        var _this = this;
        this._dashboardControl._layoutInfoProviderCollection = this._dashboardControl._layoutInfoProviderCollection
            .filter(function (layoutInfo) { return layoutInfo.name !== _this._templateName; });
        this._dashboardControl._updateLayout();
        if (this._dockingLayoutController()) {
            this._dockingLayoutController().dispose();
        }
    };
    DockingLayoutAdapter.prototype.processKeyEvent = function (eventName, e) {
        if (e.keyCode === _interfaces_1.KeyCodes.Delete && this._dockingLayoutController() && this._dockingLayoutController()._selectedLayoutItem() && !this._dockingLayoutController().itemInteractionInProgress()) {
            this._dockingLayoutController()._selectedLayoutItem().delete();
            return true;
        }
    };
    DockingLayoutAdapter.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.stop();
    };
    DockingLayoutAdapter.prototype._getKoViewModel = function () {
        var _this = this;
        var viewModel = ko.observable(new DockingLayoutViewModel(this._dockingLayoutController()));
        this.toDispose(this._dockingLayoutController.subscribe(function (_) { return viewModel() && viewModel().dispose(); }, null, 'beforeChange'));
        this.toDispose(this._dockingLayoutController.subscribe(function (controller) {
            viewModel(new DockingLayoutViewModel(controller));
            viewModel() && _this.toDispose(viewModel());
        }));
        return viewModel;
    };
    return DockingLayoutAdapter;
}(disposable_object_1.DisposableObject));
exports.DockingLayoutAdapter = DockingLayoutAdapter;
var DockingLayoutViewModel = (function (_super) {
    __extends(DockingLayoutViewModel, _super);
    function DockingLayoutViewModel(_layoutController) {
        var _this = _super.call(this) || this;
        _this._layoutController = _layoutController;
        _this.componentArgs = _this._initComponentArgs();
        _this.cssClasses = _this._initSubscriptions();
        return _this;
    }
    DockingLayoutViewModel.prototype._initComponentArgs = function () {
        if (!this._layoutController)
            return {};
        return {
            dashboard: this._layoutController.dashboardModel,
            dataSourceBrowser: this._layoutController.dataSourceBrowser,
            encodeHtml: this._layoutController.encodeHtml,
            titleContext: this._layoutController.titleContext,
            resizeByTimer: this._layoutController.resizeByTimer,
            layout: this._layoutController.rootItem,
            headerHeight: this._layoutController.headerHeight,
            layoutMainElementEvents: this._layoutController.layoutMainElementEvents,
            repaintRequest: this._layoutController.repaintRequest,
            fullscreenItemModel: this._layoutController.fullscreenItemModel,
            scrollViewEvents: this._layoutController.scrollViewEvents
        };
    };
    DockingLayoutViewModel.prototype._initSubscriptions = function () {
        if (!this._layoutController)
            return;
        var subscription = _knockout_utils_1.safeComputed({ itemInteractionInProgress: this._layoutController.itemInteractionInProgress }, function (args) {
            var classes = ['dx-dashboard-viewer', 'dx-dashboard-container'];
            if (args.itemInteractionInProgress)
                classes.push('dx-dashboard-in-work');
            return classes.join(' ');
        });
        this.toDispose(subscription);
        return subscription;
    };
    return DockingLayoutViewModel;
}(disposable_object_1.DisposableObject));
