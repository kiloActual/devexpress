/**
* DevExpress Dashboard (_docking-layout-bindings.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var _jquery_helpers_1 = require("../../data/_jquery-helpers");
var _utils_1 = require("../../data/_utils");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _dashboard_title_view_constants_1 = require("../../viewer-parts/title/_dashboard-title-view-constants");
var _dashboard_title_model_1 = require("../viewer/title/_dashboard-title-model");
var _layout_item_1 = require("./core/_layout-item");
var _docking_layout_settings_1 = require("./_docking-layout-settings");
var ShadowSize = _layout_item_1.SplitterSize / 2;
var _getPaddingBesideScrollBar = function (mode) {
    return _knockout_utils_1.safeComputed({ mode: mode }, function (args) {
        var scrollbarSize = 8;
        var calculatedPadding = _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings - scrollbarSize;
        calculatedPadding = calculatedPadding < 0 ? 0 : calculatedPadding;
        return args.mode === 'Fixed' ? calculatedPadding : _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings;
    });
};
var _getScrollDirection = function (verticalMode, horizontalMode) {
    if (horizontalMode === 'Fixed' && verticalMode === 'Fixed') {
        return 'both';
    }
    else if (horizontalMode === 'Fixed') {
        return 'horizontal';
    }
    else if (verticalMode === 'Fixed') {
        return 'vertical';
    }
};
var processResize = function (_a) {
    var element = _a.element, layout = _a.layout, layoutOptions = _a.layoutOptions, fullscreenItemModel = _a.fullscreenItemModel, titleModel = _a.titleModel, titleWidth = _a.titleWidth, titleHeight = _a.titleHeight, repaintRequest = _a.repaintRequest, resizeByTimer = _a.resizeByTimer;
    var disposables = [];
    var toDispose = function (disposable) {
        disposables.push(disposable);
        return disposable;
    };
    var layoutContainerSize = {
        width: _jquery_helpers_1.getWidth(element),
        height: _jquery_helpers_1.getHeight(element),
    };
    var getLayoutWidth = function () {
        var initialWidth = layoutOptions.width.mode() === 'Fixed' ? layoutOptions.width.value() : layoutContainerSize.width;
        return initialWidth - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2;
    };
    var getLayoutHeight = function () {
        var initialHeight = layoutOptions.height.mode() === 'Fixed' ? layoutOptions.height.value() : layoutContainerSize.height;
        return initialHeight - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2 - (titleModel.showTitle() === true ? titleHeight() : 0);
    };
    var updateTitleWidth = function () {
        var titleContainerWidth = layoutContainerSize.width - _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings * 2;
        titleWidth((fullscreenItemModel.visible() ? titleContainerWidth : Math.min(getLayoutWidth(), titleContainerWidth)) - ShadowSize * 2);
    };
    var updateFullscreenItemSize = function () {
        if (fullscreenItemModel.visible()) {
            fullscreenItemModel.viewModel().repaintRequest.fire();
        }
    };
    var updateSize = function () {
        updateFullscreenItemSize();
        updateTitleWidth();
        layout.updateSize(getLayoutWidth(), getLayoutHeight());
    };
    var updateSizeDebounced = _utils_1.debounce(updateSize, 100);
    var resizeObserver = new ResizeObserver(function (entries) {
        layoutContainerSize.width = entries[0].contentRect.width;
        layoutContainerSize.height = entries[0].contentRect.height;
        if (resizeByTimer()) {
            updateSizeDebounced();
        }
    });
    resizeObserver.observe(element);
    toDispose(_knockout_utils_1.safeSubscribe({
        widthMode: layoutOptions.width.mode,
        fixedWidth: layoutOptions.width.value,
        mode: layoutOptions.height.mode,
        fixedHeight: layoutOptions.height.value,
        titleHeight: titleHeight,
        showTitle: titleModel.showTitle
    }, function () { return updateSize(); }));
    toDispose(fullscreenItemModel.visible.subscribe(updateTitleWidth));
    toDispose(resizeByTimer.subscribe(function (newValue) { return newValue && updateSize(); }));
    var forceRepaintCallback = function () { return updateSize(); };
    repaintRequest.add(forceRepaintCallback);
    toDispose({
        dispose: function () {
            repaintRequest.remove(forceRepaintCallback);
        }
    });
    return disposables;
};
ko.components.register('dashboard-docking-layout', {
    viewModel: {
        createViewModel: function (_a, componentInfo) {
            var componentArgs = _a.componentArgs;
            var disposables = [];
            var toDispose = function (disposable) {
                disposables.push(disposable);
                return disposable;
            };
            var titleWidth = ko.observable(_jquery_helpers_1.getWidth(componentInfo.element));
            var titleHeight = ko.observable(_dashboard_title_view_constants_1.titleHeight);
            var titleModel = new _dashboard_title_model_1.DashboardTitleModel(componentArgs.titleContext, componentArgs.dashboard);
            var isTitleVisible = titleModel.showTitle;
            var layout = componentArgs.layout;
            var layoutOptions = componentArgs.dashboard.layoutOptions;
            var fullscreenItemModel = componentArgs.fullscreenItemModel;
            var layoutTop = toDispose(_knockout_utils_1.safeComputed({ isTitleVisible: isTitleVisible, titleHeight: titleHeight, }, function (args) { return args.isTitleVisible ? args.titleHeight + _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings : 0; }));
            var paddings = {
                paddingTop: toDispose(_knockout_utils_1.safeComputed({ isTitleVisible: isTitleVisible }, function (args) { return args.isTitleVisible ? 0 : _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings; })),
                paddingRight: toDispose(_getPaddingBesideScrollBar(layoutOptions.height.mode)),
                paddingBottom: toDispose(_getPaddingBesideScrollBar(layoutOptions.width.mode)),
                paddingLeft: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings
            };
            var scrollViewOptions = toDispose(_knockout_utils_1.safeComputed({
                verticalMode: layoutOptions.height.mode,
                horizontalMode: layoutOptions.width.mode
            }, function (args) { return (__assign({ direction: _getScrollDirection(args.verticalMode, args.horizontalMode), showScrollbar: _getScrollDirection(args.verticalMode, args.horizontalMode) ? 'always' : 'never' }, componentArgs.scrollViewEvents)); }));
            var viewModel = {
                title: {
                    showTitle: titleModel.showTitle,
                    containerStyles: {
                        display: 'flex',
                        justifyContent: 'start',
                        position: 'absolute',
                        top: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        left: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings + ShadowSize,
                        height: titleHeight
                    },
                    styles: {
                        width: titleWidth,
                    },
                    componentArgs: {
                        height: titleHeight,
                        width: titleWidth,
                        encodeHtml: componentArgs.encodeHtml,
                        options: titleModel.toolbarOptions,
                    }
                },
                scrollView: {
                    options: scrollViewOptions,
                    styles: { top: layoutTop },
                    contentWrapperStyles: __assign({}, paddings, { display: 'block' }),
                },
                fullscreenItem: {
                    styles: {
                        paddingTop: paddings.paddingTop,
                        paddingRight: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        paddingBottom: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        paddingLeft: _docking_layout_settings_1.DockingLayoutSettings.layoutPaddings,
                        top: layoutTop
                    }
                },
                layout: layout,
                layoutMainElementEvents: componentArgs.layoutMainElementEvents,
                fullscreenItemModel: fullscreenItemModel,
            };
            processResize({
                element: componentInfo.element,
                layout: layout,
                layoutOptions: layoutOptions,
                fullscreenItemModel: fullscreenItemModel,
                titleModel: titleModel,
                titleWidth: titleWidth,
                titleHeight: titleHeight,
                repaintRequest: componentArgs.repaintRequest,
                resizeByTimer: componentArgs.resizeByTimer,
            })
                .forEach(function (d) { return toDispose(d); });
            var disposeCallback = function () {
                disposables.forEach(function (disposable) { return disposable.dispose(); });
                disposables = [];
                titleModel.dispose();
                window.removeEventListener('unload', disposeCallback);
            };
            ko.utils.domNodeDisposal.addDisposeCallback(componentInfo.element, disposeCallback);
            window.addEventListener('unload', disposeCallback);
            return viewModel;
        }
    },
    template: { element: 'dx-dashboard-docking-layout' }
});
