/**
* DevExpress Dashboard (_dashboard-item-bindings.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var disposable_object_1 = require("../../model/disposable-object");
var _dashboard_item_helper_1 = require("../../model/internal/_dashboard-item_helper");
var _knockout_utils_1 = require("../../model/internal/_knockout-utils");
var _element_size_utils_1 = require("./_element-size-utils");
exports.DashboardItemHeaderHeight = 34;
function createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var _disposables = [];
    var beforeRender = function (viewerItem) {
        var updateConstraintsHandler = function (viewerItem) {
            if (viewerItem && sizeController.setConstraints) {
                sizeController.setConstraints(viewerItem.getConstraints(true));
            }
        };
        updateConstraintsHandler(viewerItem);
        _disposables.push(dashboardItem.showCaption.subscribe(function () {
            setTimeout(function () { return updateConstraintsHandler(viewerItem); }, 100);
        }));
        viewerItem.constraintsUpdated.add(function () {
            updateConstraintsHandler(viewerItem);
        });
        _element_size_utils_1.setElementSize(element, sizeController);
        _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, sizeController));
        if (sizeController.visible) {
            _disposables.push(sizeController.visible.subscribe(function (isVisible) {
                if (!isVisible) {
                    var castedItem = viewerItem;
                    if (castedItem.chartViewer) {
                        castedItem.chartViewer.hideTooltip();
                    }
                }
            }));
        }
    };
    var itemViewerAdapter = dashboardContext.viewerItemsManager.create(dashboardItem, element, dashboardContext, localContext, beforeRender);
    itemViewerAdapter.itemUpdated = function (viewerItem) { updateLayoutItemBackbound(element, viewerItem._isTransparentBackground()); };
    itemViewerAdapter.initialize();
    _disposables.push(itemViewerAdapter);
    return { dispose: function () { _disposables.forEach(function (disposable) { return disposable.dispose(); }); } };
}
function renderItemViewer(element, dashboardItem, dashboardContext, localContext, sizeController) {
    var perViewerItemDisposable;
    var subscription = null;
    if (localContext && localContext.visualMode) {
        subscription = _knockout_utils_1.subscribeAndPerform(localContext.visualMode, function (_) {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            perViewerItemDisposable = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
        });
    }
    else {
        subscription = createViewerItemAdapter(element, dashboardItem, dashboardContext, localContext, sizeController);
    }
    return {
        dispose: function () {
            perViewerItemDisposable && perViewerItemDisposable.dispose();
            subscription && subscription.dispose();
        }
    };
}
function getUiStateTemplate(dashboardItem, sizeController, additionalClasses) {
    if (additionalClasses === void 0) { additionalClasses = []; }
    var sizeObservable = ko.observable();
    var getFullClassList = function (className) { return [className].concat(additionalClasses).join(' '); };
    var setSizeClass = function (sizeController) {
        var height = sizeController.getHeight();
        if (height > 120) {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-large'));
        }
        else if (height > 80) {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-medium'));
        }
        else {
            sizeObservable(getFullClassList('dx-dashboard-layout-state-small'));
        }
    };
    setSizeClass(sizeController);
    var resizeHandler = function () { return setSizeClass(sizeController); };
    sizeController.requestRepaint.add(resizeHandler);
    var disposable = {
        dispose: function () {
            sizeController.requestRepaint.remove(resizeHandler);
        }
    };
    if (dashboardItem._uiState() === 'loading') {
        return { template: { name: 'dx-dashboard-item-state-loading' }, disposable: disposable };
    }
    else if (dashboardItem._uiState() === 'error') {
        return {
            template: {
                name: 'dx-dashboard-item-state-error',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    errorState: dashboardItem._errorState,
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
    else if (dashboardItem._uiState() === 'empty') {
        return {
            template: {
                name: 'dx-dashboard-item-state-empty',
                data: {
                    icon: _dashboard_item_helper_1.getItemIconName(dashboardItem),
                    title: _dashboard_item_helper_1.getItemTitle(dashboardItem),
                    sizeClass: sizeObservable
                }
            },
            disposable: disposable
        };
    }
}
function updateLayoutItemBackbound(element, isTransparent) {
    if (isTransparent) {
        element.classList.add('dx-layout-item-container-transparent');
    }
    else {
        element.classList.remove('dx-layout-item-container-transparent');
    }
}
ko.bindingHandlers['dx-dashboard-item-binding'] = {
    init: function (element, valueAccessor, _, __, bindingContext) {
        var params = ko.unwrap(valueAccessor());
        var dashboardItem = params.dashboardItem;
        var sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        element.classList.add('dx-dashboard-item-container');
        var uiStateController = new DashboardUIItemStateController(element, params.dashboardItem, params.sizeController, bindingContext, function () {
            return renderItemViewer(element, dashboardItem, params.dashboardContext, params.localContext, params.sizeController);
        });
        uiStateController.render();
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            uiStateController.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
ko.bindingHandlers['dx-dashboard-layout-group-binding'] = {
    init: function (element, valueAccessor) {
        var _disposables = [];
        var params = ko.unwrap(valueAccessor());
        element.classList.add('dx-dashboard-item-container');
        var sizeController = params.sizeController;
        _element_size_utils_1.setElementSize(element, sizeController);
        var itemViewerAdapter = params.dashboardContext.viewerItemsManager.create(params.dashboardItem, element, params.dashboardContext, params.localContext, function (viewerItem) {
            _disposables.push(ko.computed(function () {
                params.headerHeight(params.dashboardItem.showCaption() ? exports.DashboardItemHeaderHeight : 0);
            }));
            _element_size_utils_1.setElementSize(element, sizeController);
            _disposables.push(_element_size_utils_1.createItemSizeUpdater(viewerItem, params.sizeController));
        });
        itemViewerAdapter.initialize();
        _disposables.push(itemViewerAdapter);
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            _disposables.forEach(function (d) { return d.dispose(); });
        });
        return { controlsDescendantBindings: true };
    }
};
var DashboardUIItemStateController = (function (_super) {
    __extends(DashboardUIItemStateController, _super);
    function DashboardUIItemStateController(_element, _dashboardItem, _sizeController, _bindingContext, _renderDashboardItem, _additionalClasses) {
        if (_additionalClasses === void 0) { _additionalClasses = []; }
        var _this = _super.call(this) || this;
        _this._element = _element;
        _this._dashboardItem = _dashboardItem;
        _this._sizeController = _sizeController;
        _this._bindingContext = _bindingContext;
        _this._renderDashboardItem = _renderDashboardItem;
        _this._additionalClasses = _additionalClasses;
        _this._perUiStateSubscriptions = [];
        _this._renderDashboardItemState = function () {
            _this._perUiStateSubscriptions.forEach(function (d) { return d.dispose(); });
            _this._perUiStateSubscriptions = [];
            if (_this._dashboardItem._uiState() === 'live') {
                _this._perUiStateSubscriptions.push(_this._renderDashboardItem());
            }
            else {
                var _a = getUiStateTemplate(_this._dashboardItem, _this._sizeController, _this._additionalClasses), template = _a.template, disposable = _a.disposable;
                _this._perUiStateSubscriptions.push(disposable);
                _this._perUiStateSubscriptions.push(_element_size_utils_1.createElementSizeUpdater(_this._element, _this._sizeController));
                ko.applyBindingsToNode(_this._element, { template: template }, _this._bindingContext);
            }
        };
        return _this;
    }
    DashboardUIItemStateController.prototype.render = function () {
        var _this = this;
        this._renderDashboardItemState();
        this.toDispose(this._dashboardItem._uiState.subscribe(function () { return _this._renderDashboardItemState(); }));
    };
    DashboardUIItemStateController.prototype.dispose = function () {
        this._perUiStateSubscriptions.forEach(function (d) { return d.dispose(); });
        this._perUiStateSubscriptions = [];
        _super.prototype.dispose.call(this);
    };
    return DashboardUIItemStateController;
}(disposable_object_1.DisposableObject));
exports.DashboardUIItemStateController = DashboardUIItemStateController;
