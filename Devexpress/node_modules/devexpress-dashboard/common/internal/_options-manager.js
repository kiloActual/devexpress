/**
* DevExpress Dashboard (_options-manager.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var data_1 = require("devextreme/core/utils/data");
exports.getEventName = function (actionName) {
    return actionName.charAt(2).toLowerCase() + actionName.substr(3);
};
exports.getOptionNameByEvent = function (eventName) {
    return 'on' + eventName.charAt(0).toUpperCase() + eventName.substr(1);
};
exports.isEventName = function (actionName) {
    return actionName && actionName.length && actionName.indexOf('on') === 0 && actionName.charAt(2).toUpperCase() === actionName.charAt(2);
};
var OptionsManager = (function () {
    function OptionsManager() {
        this._internalEvents = new EventManager();
        this._cachedSetters = {};
    }
    OptionsManager.prototype.initialize = function (_config) {
        this._config = _config;
        this._dashboardControl = _config.dashboardControl;
        if (_config.eventsHolder) {
            _config.eventsHolder.on = this._internalEvents.on;
            _config.eventsHolder.off = this._internalEvents.off;
        }
    };
    OptionsManager.prototype.getDefaultOptions = function () {
        return this._config.defaultOptions;
    };
    OptionsManager.prototype.getInitialOptions = function () {
        var res = {};
        this._merge(res, this._config.defaultOptions);
        this._merge(res, this._config.initOptions);
        return res;
    };
    OptionsManager.prototype.dispose = function () {
        this._internalEvents.dispose();
    };
    OptionsManager.prototype.optionChanged = function (args) {
        return this._config.optionChanged(args);
    };
    OptionsManager.prototype.raiseEvent = function (eventName, eventArgs) {
        var optionName = "extensions." + this._config.alias + "." + exports.getOptionNameByEvent(eventName);
        var delegateFromOptions = this._dashboardControl.option(optionName);
        if (typeof delegateFromOptions === 'function') {
            delegateFromOptions.call(this._dashboardControl, eventArgs);
        }
        this._internalEvents.raise(eventName, eventArgs);
    };
    OptionsManager.prototype.get = function (optionName) {
        return this._dashboardControl.option("extensions." + this._config.alias + "." + optionName);
    };
    OptionsManager.prototype.set = function (optionName, value) {
        return this._set(optionName, value, false);
    };
    OptionsManager.prototype.silent = function (optionName, value) {
        return this._set(optionName, value, true);
    };
    OptionsManager.prototype._set = function (optionName, value, silent) {
        var name = "extensions." + this._config.alias + "." + optionName;
        return silent ? this._dashboardControl._silent(name, value) : this._dashboardControl.option(name, value);
    };
    OptionsManager.prototype._merge = function (target, source) {
        exports.mergeOptions(target, source, this._cachedSetters);
    };
    return OptionsManager;
}());
exports.OptionsManager = OptionsManager;
exports.mergeOptions = function (target, source, externalCache) {
    if (externalCache === void 0) { externalCache = {}; }
    for (var name in source) {
        var setter = externalCache[name];
        if (setter === undefined)
            setter = externalCache[name] = data_1.compileSetter(name);
        setter(target, source[name], {
            functionsAsIs: true,
            merge: true,
            unwrapObservables: false
        });
    }
};
var EventManager = (function () {
    function EventManager() {
        var _this = this;
        this._handlers = [];
        this.on = function (eventName, eventHandler) {
            if (!_this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0]) {
                _this._handlers.push({
                    eventName: eventName,
                    event: eventHandler
                });
            }
        };
        this.off = function (eventName, eventHandler) {
            var eventInfo = _this._handlers.filter(function (handler) { return handler.eventName === eventName && handler.event === eventHandler; })[0];
            var index = _this._handlers.indexOf(eventInfo);
            if (index !== -1) {
                _this._handlers.splice(index, 1);
            }
        };
    }
    EventManager.prototype.dispose = function () {
        this._handlers = [];
    };
    EventManager.prototype.raise = function (eventName, eventArgs) {
        this._handlers
            .filter(function (handler) { return handler.eventName === eventName; })
            .forEach(function (handler) { return handler.event(eventArgs); });
    };
    return EventManager;
}());
exports.EventManager = EventManager;
