/**
* DevExpress Dashboard (_update-controller.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _utils_1 = require("../../data/_utils");
var UpdateController = (function () {
    function UpdateController(_actionMap, _mapActionByState) {
        this._actionMap = _actionMap;
        this._mapActionByState = _mapActionByState;
        this._locker = 0;
        this._actions = [];
    }
    UpdateController.prototype.beginUpdate = function () {
        this._locker++;
    };
    UpdateController.prototype.endUpdate = function () {
        if (this._locker > 0)
            this._locker--;
        this.commitUpdate();
    };
    UpdateController.prototype.commitUpdate = function () {
        var _this = this;
        if (this._locker === 0 && this._actions.length) {
            this.beginUpdate();
            var actions_1 = this._actions;
            this._actions = [];
            while (actions_1.length) {
                actions_1 = _utils_1.distinct(actions_1
                    .map(function (action) { return _this._mapActionByState(_this.getControlState.bind(_this), action); })
                    .map(function (action) {
                    var masterAction = (_this._actionMap[action].masterActions || []).filter(function (masterAction) { return actions_1.indexOf(masterAction) !== -1; }).pop();
                    return masterAction || action;
                }));
                var actualAction = actions_1.shift();
                actualAction && this._actionMap[actualAction].action();
            }
            this.endUpdate();
        }
    };
    UpdateController.prototype.addAction = function (actionName) {
        var actualAction = this._mapActionByState(this.getControlState.bind(this), actionName);
        this._actions.push(actualAction);
    };
    UpdateController.prototype.switchControlState = function (controlState) {
        this._state = controlState;
    };
    UpdateController.prototype.getControlState = function () {
        return this._state;
    };
    return UpdateController;
}());
exports.UpdateController = UpdateController;
