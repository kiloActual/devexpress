/**
* DevExpress Dashboard (viewer-api-extension.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var disposable_object_1 = require("../../model/disposable-object");
var control_options_1 = require("../control-options");
var _options_manager_1 = require("../internal/_options-manager");
var _viewer_api_1 = require("../viewer/_viewer-api");
var name = 'viewer-api';
var nameAlias = 'viewerApi';
var ViewerApiExtension = (function (_super) {
    __extends(ViewerApiExtension, _super);
    function ViewerApiExtension(dashboardControl, options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this) || this;
        _this.name = name;
        _this._optionsManager = new _options_manager_1.OptionsManager();
        _this.requestUnderlyingData = function (itemName, args, onCompleted) {
            _this._viewerApi.requestUnderlyingData(itemName, args, onCompleted);
        };
        _this._viewerApi = dashboardControl._viewerApi;
        _this._optionsManager.initialize({
            alias: nameAlias,
            dashboardControl: dashboardControl,
            defaultOptions: {},
            eventsHolder: _this,
            initOptions: options,
            optionChanged: function (args) { return null; }
        });
        return _this;
    }
    ViewerApiExtension.prototype.start = function () {
        var _this = this;
        _viewer_api_1.viewerApiEventsNames.forEach(function (eventName) {
            var handler = _this['_on' + eventName] = function (args) { return _this._optionsManager.raiseEvent(eventName, args); };
            _this._viewerApi.on(eventName, handler);
        });
    };
    ViewerApiExtension.prototype.stop = function () {
        var _this = this;
        _viewer_api_1.viewerApiEventsNames.forEach(function (eventName) {
            var handler = _this['_on' + eventName];
            _this._viewerApi.off(eventName, handler);
        });
    };
    ViewerApiExtension.prototype.getCurrentRange = function (itemName) {
        return this._viewerApi.getCurrentRange(itemName);
    };
    ViewerApiExtension.prototype.getEntireRange = function (itemName) {
        return this._viewerApi.getEntireRange(itemName);
    };
    ViewerApiExtension.prototype.setRange = function (itemName, range) {
        this._viewerApi.setRange(itemName, range);
    };
    ViewerApiExtension.prototype.setPredefinedRange = function (itemName, dateTimePeriodName) {
        return this._viewerApi.setPredefinedRange(itemName, dateTimePeriodName);
    };
    ViewerApiExtension.prototype.getAvailablePredefinedRanges = function (itemName) {
        return this._viewerApi.getAvailablePredefinedRanges(itemName);
    };
    ViewerApiExtension.prototype.getCurrentPredefinedRange = function (itemName) {
        return this._viewerApi.getCurrentPredefinedRange(itemName);
    };
    ViewerApiExtension.prototype.getCurrentSelection = function (itemName) {
        return this._viewerApi.getCurrentSelection(itemName);
    };
    ViewerApiExtension.prototype.canSetMasterFilter = function (itemName) {
        return this._viewerApi.canSetMasterFilter(itemName);
    };
    ViewerApiExtension.prototype.canClearMasterFilter = function (itemName) {
        return this._viewerApi.canClearMasterFilter(itemName);
    };
    ViewerApiExtension.prototype.canPerformDrillDown = function (itemName) {
        return this._viewerApi.canPerformDrillDown(itemName);
    };
    ViewerApiExtension.prototype.canPerformDrillUp = function (itemName) {
        return this._viewerApi.canPerformDrillUp(itemName);
    };
    ViewerApiExtension.prototype.getItemData = function (itemName) {
        return this._viewerApi.getItemData(itemName);
    };
    ViewerApiExtension.prototype.getCurrentFilterValues = function (itemName) {
        return this._viewerApi.getCurrentFilterValues(itemName);
    };
    ViewerApiExtension.prototype.getAvailableFilterValues = function (itemName) {
        return this._viewerApi.getAvailableFilterValues(itemName);
    };
    ViewerApiExtension.prototype.getCurrentDrillDownValues = function (itemName) {
        return this._viewerApi.getCurrentDrillDownValues(itemName);
    };
    ViewerApiExtension.prototype.getAvailableDrillDownValues = function (itemName) {
        return this._viewerApi.getAvailableDrillDownValues(itemName);
    };
    ViewerApiExtension.prototype.setMasterFilter = function (itemName, values) {
        this._viewerApi.setMasterFilter(itemName, values);
    };
    ViewerApiExtension.prototype.clearMasterFilter = function (itemName) {
        this._viewerApi.clearMasterFilter(itemName);
    };
    ViewerApiExtension.prototype.performDrillDown = function (itemName, value) {
        this._viewerApi.performDrillDown(itemName, value);
    };
    ViewerApiExtension.prototype.performDrillUp = function (itemName) {
        this._viewerApi.performDrillUp(itemName);
    };
    ViewerApiExtension.prototype.getAvailableActions = function (itemName) {
        return this._viewerApi.getAvailableActions(itemName);
    };
    ViewerApiExtension.prototype.updateItemCaptionToolbar = function (itemName) {
        this._viewerApi.updateItemCaptionToolbar(itemName);
    };
    ViewerApiExtension.prototype.updateDashboardTitleToolbar = function () {
        this._viewerApi.updateDashboardTitleToolbar();
    };
    ViewerApiExtension.prototype.setSelectedTabPage = function (tabPageName) {
        this._viewerApi.setSelectedTabPage(tabPageName);
    };
    ViewerApiExtension.prototype.setSelectedTabPageIndex = function (tabContainerName, index) {
        this._viewerApi.setSelectedTabPageIndex(tabContainerName, index);
    };
    ViewerApiExtension.prototype.getSelectedTabPageIndex = function (tabContainerName) {
        return this._viewerApi.getSelectedTabPageIndex(tabContainerName);
    };
    ViewerApiExtension.prototype.getSelectedTabPage = function (tabContainerName) {
        return this._viewerApi.getSelectedTabPage(tabContainerName);
    };
    return ViewerApiExtension;
}(disposable_object_1.DisposableObject));
exports.ViewerApiExtension = ViewerApiExtension;
control_options_1.defaultExtensions[name] = function (dashboardControl, options) { return new ViewerApiExtension(dashboardControl, options); };
control_options_1.extensionNameMap[name] = nameAlias;
