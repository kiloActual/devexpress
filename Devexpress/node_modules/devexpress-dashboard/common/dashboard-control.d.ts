/**
* DevExpress Dashboard (dashboard-control.d.ts)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { Dashboard } from '../model/dashboard';
import { DashboardState } from '../model/dashboard-state';
import { DisposableType } from '../model/disposable-object';
import { DashboardContainer, IExtension, IRemoteService, KnockoutTemplate } from './common-interfaces';
import { DashboardControlEvents, DashboardControlOptions, DashboardOptionChangedArgs, RefreshItemsArgs } from './control-options';
import { DashboardUpdateHub } from './dashboard-update-hub/_dashboard-update-hub';
import { DockingLayoutAdapter } from './docking-layout/_docking-layout-adapter';
import { DashboardLayoutController, IEndpointCollection, LayoutInfoProvider } from './internal/_interfaces';
import { NotificationController } from './notification-controller/notificator';
import { ViewerApi } from './viewer/_viewer-api';
import { IDashboardContext } from './viewer/_viewer-interfaces';
import { DataSourceBrowser } from './_data-source-browser';
import { IDataServiceClient } from './_service-client';
export declare class DashboardControl {
    private static _recursiveAsyncEval;
    readonly _updateHub: DashboardUpdateHub;
    readonly encodeHtml: boolean;
    _repaintRequest: JQuery.Callbacks<Function>;
    private _extensions;
    private _updateHubPrivate;
    _dashboardContext: IDashboardContext;
    private _allowSwitchToDesigner;
    private _controlOptions;
    private _defaultControlOptions;
    _viewerApi: ViewerApi;
    _externalTemplates: ko.Computed<KnockoutTemplate[]>;
    _endpointCollection: IEndpointCollection;
    _serviceClient: ko.Observable<IDataServiceClient>;
    _displayAllData: ko.Observable<boolean>;
    _widgetContainer: HTMLElement;
    _dataSourceBrowser: DataSourceBrowser;
    _isLoading: ko.Observable<boolean>;
    _perDashboardDisposables: Array<DisposableType>;
    _layoutInfo: ko.Observable<{
        template: KnockoutTemplate;
        layoutController: ko.Subscribable<DashboardLayoutController>;
    }>;
    _layoutInfoProviderCollection: LayoutInfoProvider[];
    _dockingLayoutAdapter: DockingLayoutAdapter;
    _actualLayoutController: ko.Computed<DashboardLayoutController>;
    _emptyControlTemplates: ko.ObservableArray<KnockoutTemplate>;
    _surfaceLeft: ko.Observable<number>;
    _surfaceTop: ko.Observable<number>;
    surfaceLeft: ko.Observable<number>;
    surfaceTop: ko.Observable<number>;
    resizeByTimer: ko.Observable<boolean>;
    remoteService: IRemoteService;
    notificationController: NotificationController;
    readonly showConfirmationOnBrowserClosing: boolean;
    isDesignMode: ko.Observable<boolean>;
    dashboardContainer: ko.Observable<DashboardContainer>;
    dashboard: ko.Computed<Dashboard>;
    customTemplates: ko.ObservableArray<KnockoutTemplate>;
    getWidgetContainer: () => HTMLElement;
    readonly allowSwitchToDesigner: boolean;
    readonly maximizedDashboardItemName: string;
    readonly extensions: IExtension[];
    element(): Element;
    private _element;
    _eventsStrategy: any;
    on<K extends Extract<keyof DashboardControlEvents, string>>(eventName: K, eventHandler: (ev: DashboardControlEvents[K]) => any): void;
    off<K extends Extract<keyof DashboardControlEvents, string>>(eventName: K, eventHandler: (ev: DashboardControlEvents[K]) => any): void;
    _raiseEvent<K extends Extract<keyof DashboardControlEvents, string>>(eventName: K, eventArgs: DashboardControlEvents[K]): void;
    private _options;
    option(): DashboardControlOptions;
    option(name: string): any;
    option(name: string, value: any): any;
    option(args: DashboardControlOptions): any;
    _silent(...args: any[]): any;
    resetOption(name: any): void;
    private _updateController;
    beginUpdate(): void;
    endUpdate(): void;
    _getOptionValue(name: any, context?: any): any;
    _getDefaultOptions(): DashboardControlOptions;
    _getOptionsByReference(): {};
    _getDeprecatedOptions(): {};
    _notifyOptionChanged(option: any, value: any): void;
    _reinitializeDashboard(): void;
    private _getCebabCaseExtensionName;
    private _getCamelCaseExtensionName;
    private _optionChanging;
    _optionChanged(args: DashboardOptionChangedArgs<DashboardControlOptions>): void;
    private _processExtensionsOption;
    private _createExtensionOption;
    private _processExtensionsOptions;
    constructor(element: Element, options?: DashboardControlOptions);
    _updateLayout(): void;
    readonly _colorSchemeCss: "dx-color-scheme-light" | "dx-color-scheme-dark";
    repaint(): void;
    render(): void;
    maximizeDashboardItem(itemName: string): void;
    restoreDashboardItem(): void;
    initializeDashboard(id: string, dashboardJson: Object, initialState?: DashboardState): void;
    requestDashboardList(): JQueryPromise<any>;
    _dashboardLoadingDeferred: JQueryDeferred<any>;
    loadDashboard(dashboardId: string): JQueryPromise<any>;
    _loadDashboardCore(dashboardId: string): JQueryPromise<any>;
    unloadDashboard(): void;
    _unloadDashboardCore(): void;
    switchToViewer(): void;
    _workingModeChangeDeferred: JQuery.Deferred<any>;
    _switchToViewer(): JQueryPromise<void>;
    switchToDesigner(): void;
    _switchToDesigner(): JQueryPromise<void>;
    reloadData(): void;
    refresh(args?: RefreshItemsArgs): void;
    getDashboardState(): string;
    setDashboardState(dashboardState: DashboardState | string): void;
    getDashboardId(): string;
    registerIcon(icon: string): void;
    registerExtension(...extensions: IExtension[]): void;
    private _registerExtensionCore;
    findExtension(extensionName: string): IExtension;
    unregisterExtension(...extensionNames: string[]): void;
    private _unregisterExtensionCore;
    subscribeExtensionsChanged(handlers: {
        added?: (item: IExtension) => void;
        deleted?: (item: IExtension) => void;
    }): ko.Subscription;
    dispose(): void;
    _renderDashboardItem(element: Element, dashboardItemName: string, isStandalone?: boolean): void;
    private _getFullscreenItemProvider;
    private _registerKeyProcessing;
    private _registerDefaultExtensions;
    private _unrollEndpointCollection;
    private _loadInitialDashboard;
    private _initializeServiceClient;
    private _validateWorkingMode;
    private _canAddExtension;
    private _addExtension;
    private _startExtension;
    private _unloadDashboardServices;
    private _applyBindings;
}
