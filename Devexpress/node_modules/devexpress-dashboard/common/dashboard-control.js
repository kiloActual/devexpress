/**
* DevExpress Dashboard (dashboard-control.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var events_strategy_1 = require("devextreme/core/events_strategy");
var options_1 = require("devextreme/core/options");
var popup_1 = require("devextreme/ui/popup");
var $ = require("jquery");
var ko = require("knockout");
var _default_1 = require("../data/localization/_default");
var _jquery_helpers_1 = require("../data/_jquery-helpers");
var _utils_1 = require("../data/_utils");
var dashboard_1 = require("../model/dashboard");
var _knockout_utils_1 = require("../model/internal/_knockout-utils");
var _obsolete_helper_1 = require("../model/internal/_obsolete-helper");
var custom_item_1 = require("../model/items/custom-item/custom-item");
var serializable_model_1 = require("../model/serializable-model");
var legacy_settings_1 = require("../viewer-parts/legacy-settings");
var _dx_devextreme_themes_integration_1 = require("../viewer-parts/_dx-devextreme-themes-integration");
var control_options_1 = require("./control-options");
var _dashboard_update_hub_1 = require("./dashboard-update-hub/_dashboard-update-hub");
var _docking_layout_adapter_1 = require("./docking-layout/_docking-layout-adapter");
var _interfaces_1 = require("./internal/_interfaces");
var _options_manager_1 = require("./internal/_options-manager");
var _update_controller_1 = require("./internal/_update-controller");
var notificator_1 = require("./notification-controller/notificator");
var remote_service_1 = require("./remote-service");
var resource_manager_1 = require("./resource-manager");
var _item_viewer_adapter_factory_1 = require("./viewer/adapters/_item-viewer-adapter-factory");
var _viewer_api_1 = require("./viewer/_viewer-api");
var _data_source_browser_1 = require("./_data-source-browser");
var _helpers_1 = require("./_helpers");
var _service_client_1 = require("./_service-client");
var DashboardControl = (function () {
    function DashboardControl(element, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._repaintRequest = _jquery_helpers_1.createJQueryCallbacks();
        this._extensions = ko.observableArray();
        this._serviceClient = ko.observable();
        this._displayAllData = ko.observable();
        this._isLoading = ko.observable(false);
        this._perDashboardDisposables = [];
        this._layoutInfo = ko.observable(null);
        this._layoutInfoProviderCollection = [];
        this._actualLayoutController = ko.pureComputed(function () { return _this._layoutInfo() && _this._layoutInfo().layoutController(); });
        this._emptyControlTemplates = ko.observableArray();
        this._surfaceLeft = ko.observable(0);
        this._surfaceTop = ko.observable(0);
        this.surfaceLeft = ko.observable(0);
        this.surfaceTop = ko.observable(0);
        this.isDesignMode = ko.observable(true);
        this.dashboardContainer = ko.observable();
        this.dashboard = ko.computed(function () { return _this.dashboardContainer() && _this.dashboardContainer().dashboard || null; });
        this.customTemplates = ko.observableArray();
        this.getWidgetContainer = function () {
            if (!_this._widgetContainer) {
                var wc = _this._element.querySelector('.dx-dashboard-widget-container');
                if (wc) {
                    _this._widgetContainer = wc;
                }
            }
            return _this._widgetContainer;
        };
        this._updateController = new _update_controller_1.UpdateController({
            'updateItemToolbars': {
                action: function () {
                    if (_this.dashboard()) {
                        _this._viewerApi.updateItemCaptionToolbar();
                    }
                },
                masterActions: ['refreshData', 'reinitializeDashboard', 'loadDashboard']
            },
            'updateDashboardToolbar': {
                action: function () { return _this._reinitializeDashboard(); },
                masterActions: ['reinitializeDashboard', 'loadDashboard']
            },
            'refreshData': {
                action: function () { return _this._reinitializeDashboard(); },
                masterActions: ['reinitializeDashboard', 'loadDashboard']
            },
            'reinitializeDashboard': {
                action: function () { return _this._reinitializeDashboard(); },
                masterActions: ['loadDashboard']
            },
            'loadDashboard': {
                action: function () {
                    if (_this.option('dashboardId')) {
                        _this._loadDashboardCore(_this.option('dashboardId'));
                    }
                    else {
                        _this._unloadDashboardCore();
                    }
                }
            },
            'noop': {
                action: function () { },
                masterActions: ['updateItemToolbars', 'updateDashboardToolbar', 'refreshData', 'reinitializeDashboard', 'loadDashboard'],
            }
        }, function (stateProvider, action) {
            switch (stateProvider()) {
                case 'controlInitializing':
                    return 'noop';
                case 'controlInitialized':
                case 'dashboardLoading':
                case 'dashboardLoaded':
                case 'dashboardInitializing':
                    return action === 'loadDashboard' ? action : 'noop';
                case 'dashboardInitialized':
                    return action;
            }
        });
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        this._updateController.switchControlState('controlInitializing');
        this._element = element;
        this._controlOptions = this._getDefaultOptions();
        this._defaultControlOptions = this._getDefaultOptions();
        this._eventsStrategy = events_strategy_1.EventsStrategy.create(this, options.eventsStrategy);
        this._options = new options_1.Options(this._controlOptions, this._defaultControlOptions, this._getOptionsByReference(), this._getDeprecatedOptions());
        this._options.onChanging(function (name, previousValue, value) { return _this._optionChanging(name, value, previousValue); });
        this._options.onChanged(function (name, value, previousValue) {
            return _this._notifyOptionChanged(name, value);
        });
        this._options.onStartChange(function () { return _this.beginUpdate(); });
        this._options.onEndChange(function () { return _this.endUpdate(); });
        if (options.extensions) {
            for (var extensionName in options.extensions) {
                if (control_options_1.extensionNameMap.hasOwnProperty(extensionName)) {
                    var newName = control_options_1.extensionNameMap[extensionName];
                    if (newName !== extensionName) {
                        options.extensions[newName] = options.extensions[extensionName];
                        delete options.extensions[extensionName];
                    }
                }
            }
        }
        this.resizeByTimer = ko.observable(this._defaultControlOptions.resizeByTimer);
        this.option(options);
        this._endpointCollection = this._unrollEndpointCollection(this.option());
        this.remoteService = new remote_service_1.AjaxRemoteService(this.option('ajaxRemoteService'));
        legacy_settings_1.LegacySettings._useCardLegacyLayout = this.option('useCardLegacyLayout');
        this.surfaceLeft.subscribe(function (value) {
            _this._surfaceLeft(value);
            _this.repaint();
        });
        this.surfaceTop.subscribe(function (value) {
            _this._surfaceTop(value);
            _this.repaint();
        });
        this._dashboardContext = {
            beforeApplyViewerItemOptions: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemCreated: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemDispose: _jquery_helpers_1.createJQueryCallbacks(),
            addContextToolbarItems: _jquery_helpers_1.createJQueryCallbacks(),
            viewerItemCreator: {},
            refresh: function (itemName) { return _this.refresh(itemName); },
            useNeutralFilterMode: function () { return _this.option('useNeutralFilterMode'); },
            isDesignMode: this.isDesignMode,
            viewerItemsManager: null
        };
        this._dashboardContext.beforeApplyViewerItemOptions.add(function (item, itemOptions, isCreation) {
            itemOptions.useNeutralFilterMode = _this.option('useNeutralFilterMode');
            itemOptions.encodeHtml = _this.encodeHtml;
        });
        this._externalTemplates = ko.computed(function () {
            var result = [];
            _this.customTemplates().forEach(function (template) {
                result.push(template);
            });
            _this._extensions().forEach(function (extension) {
                if (extension['template']) {
                    if (typeof extension['template'] === 'string') {
                        result.push({
                            name: extension['template'],
                            data: extension
                        });
                    }
                    else {
                        result.push(extension['template']);
                    }
                }
            });
            return result;
        });
        this.notificationController = new notificator_1.NotificationController();
        this.isDesignMode.subscribe(function (isDesignMode) {
            _this._validateWorkingMode();
        }, null, 'beforeChange');
        this.isDesignMode.subscribe(function (isDesignMode) {
            _this._validateWorkingMode();
            _this._initializeServiceClient(_this.dashboardContainer());
        });
        this._allowSwitchToDesigner = this.option('workingMode') !== 'ViewerOnly';
        var extensionsToRegister = {};
        for (var name_1 in control_options_1.defaultExtensions) {
            extensionsToRegister[name_1] = control_options_1.defaultExtensions[name_1];
        }
        if (this.allowSwitchToDesigner) {
            for (var name_2 in control_options_1.designerExtensions) {
                extensionsToRegister[name_2] = control_options_1.designerExtensions[name_2];
            }
        }
        analytics_internal_1._setShowMessageFunc(function (msg, type, displayTime, debugInfo) { });
        this._dockingLayoutAdapter = new _docking_layout_adapter_1.DockingLayoutAdapter(this);
        this._dockingLayoutAdapter.start();
        this._raiseEvent('initializing', { component: this });
        this._viewerApi = new _viewer_api_1.ViewerApi(this);
        this._viewerApi.start();
        this._registerDefaultExtensions(extensionsToRegister, this.option('extensions'));
        this._registerKeyProcessing();
        this._isLoading.subscribe(function (isLoading) { return _this.notificationController.suspended(isLoading); });
        this._isLoading(true);
        this._updateController.switchControlState('controlInitialized');
        setTimeout(function () {
            if (!_this.dashboard()) {
                _this._loadInitialDashboard()
                    .done(function () {
                    var initialDashboardState = _this.option('initialDashboardState');
                    if (initialDashboardState) {
                        _this.dashboard().stateString = initialDashboardState;
                    }
                })
                    .always(function () { _this._isLoading(false); });
            }
            else {
                _this._isLoading(false);
            }
        }, 1);
        _defineDashboardControlObsoleteMethods(this);
        if (this.option('renderImmediately')) {
            this.render();
        }
    }
    DashboardControl._recursiveAsyncEval = function (sequence, cancellationToken, previousOptions, currentIndex) {
        if (currentIndex === void 0) { currentIndex = 0; }
        if (!previousOptions) {
            previousOptions = {
                surfaceLeft: 0
            };
        }
        var def = _jquery_helpers_1.createJQueryDeferred();
        var sequenceActions = sequence[currentIndex];
        if (sequenceActions) {
            var actions = sequenceActions.map(function (sa) { return sa.cancelableAction; });
            $.when.apply($, actions.map(function (a) { return a(previousOptions, cancellationToken); })).done(function () {
                var options = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    options[_i] = arguments[_i];
                }
                if (cancellationToken.canceled)
                    def.reject();
                else {
                    DashboardControl._recursiveAsyncEval(sequence, cancellationToken, _helpers_1.combineOptions(previousOptions, options), currentIndex + 1)
                        .done(function (opts) {
                        if (cancellationToken.canceled)
                            def.reject();
                        else
                            def.resolve(opts);
                    })
                        .fail(function () { return def.reject(); });
                }
            })
                .fail(function () { return def.reject(); });
        }
        else {
            if (cancellationToken.canceled)
                def.reject();
            else {
                if (cancellationToken.canceled)
                    def.reject();
                else
                    def.resolve(previousOptions);
            }
        }
        return def.promise();
    };
    Object.defineProperty(DashboardControl.prototype, "_updateHub", {
        get: function () {
            return this._updateHubPrivate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "encodeHtml", {
        get: function () {
            return this.option('encodeHtml');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "showConfirmationOnBrowserClosing", {
        get: function () { return this.option('showConfirmationOnBrowserClosing'); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "allowSwitchToDesigner", {
        get: function () {
            return this._allowSwitchToDesigner;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "maximizedDashboardItemName", {
        get: function () {
            var fullscreenItemProvider = this._getFullscreenItemProvider();
            return fullscreenItemProvider && fullscreenItemProvider.maximizedItemName || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardControl.prototype, "extensions", {
        get: function () {
            return this._extensions();
        },
        enumerable: true,
        configurable: true
    });
    DashboardControl.prototype.element = function () {
        return this._element;
    };
    DashboardControl.prototype.on = function (eventName, eventHandler) {
        this._eventsStrategy.on(eventName, eventHandler);
    };
    DashboardControl.prototype.off = function (eventName, eventHandler) {
        this._eventsStrategy.off(eventName, eventHandler);
    };
    DashboardControl.prototype._raiseEvent = function (eventName, eventArgs) {
        this._eventsStrategy.fireEvent(eventName, [eventArgs]);
        var optionName = _options_manager_1.getOptionNameByEvent(eventName);
        if (optionName) {
            var func = this.option(optionName);
            if (func) {
                func.call(this, eventArgs);
            }
        }
    };
    DashboardControl.prototype.option = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a;
        return (_a = this._options).option.apply(_a, args);
    };
    DashboardControl.prototype._silent = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var _a;
        return (_a = this._options).silent.apply(_a, args);
    };
    DashboardControl.prototype.resetOption = function (name) {
        this.beginUpdate();
        this._options.reset(name);
        this.endUpdate();
    };
    DashboardControl.prototype.beginUpdate = function () {
        this._updateController.beginUpdate();
    };
    DashboardControl.prototype.endUpdate = function () {
        this._updateController.endUpdate();
    };
    DashboardControl.prototype._getOptionValue = function (name, context) {
        var value = this.option(name);
        return value;
    };
    DashboardControl.prototype._getDefaultOptions = function () {
        return {
            limitVisibleDataMode: 'Designer',
            resizeByTimer: true,
            ajaxRemoteService: {
                beforeSend: function () { },
                complete: function () { },
                headers: {}
            },
            encodeHtml: true,
            useNeutralFilterMode: true,
            allowMaximizeItems: true,
            useCardLegacyLayout: false,
            showConfirmationOnBrowserClosing: true,
            workingMode: 'Designer',
            loadDefaultDashboard: true,
            dataRequestOptions: {},
            extensions: {}
        };
    };
    DashboardControl.prototype._getOptionsByReference = function () {
        return {};
    };
    DashboardControl.prototype._getDeprecatedOptions = function () {
        return {};
    };
    DashboardControl.prototype._notifyOptionChanged = function (option, value) {
        document.createElement;
        var name = option;
        var args = {
            name: name.split(/[.[]/)[0],
            fullName: name,
            value: value,
            component: this
        };
        this._optionChanged(args);
        this._raiseEvent('optionChanged', args);
    };
    DashboardControl.prototype._reinitializeDashboard = function () {
        if (this.dashboard()) {
            var dashboardState = this.getDashboardState();
            this.initializeDashboard(this.option('dashboardId'), this.dashboard().getJSON(), dashboardState && JSON.parse(this.getDashboardState()) || '');
        }
    };
    DashboardControl.prototype._getCebabCaseExtensionName = function (extensionName) {
        var index = Object.keys(control_options_1.extensionNameMap).map(function (k) { return control_options_1.extensionNameMap[k]; }).indexOf(extensionName);
        return index === -1 ? extensionName : Object.keys(control_options_1.extensionNameMap)[index];
    };
    DashboardControl.prototype._getCamelCaseExtensionName = function (extensionName) {
        return control_options_1.extensionNameMap[extensionName] || extensionName;
    };
    DashboardControl.prototype._optionChanging = function (name, value, previousValue) {
        switch (name) {
            case 'workingMode':
                if (this._updateController.getControlState() !== 'controlInitializing' && (previousValue === 'ViewerOnly' || value === 'ViewerOnly')) {
                    throw new Error("Cannot switch to " + value + " from " + previousValue + " mode.");
                }
                break;
        }
    };
    DashboardControl.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'dashboardId':
                if (this._updateController.getControlState() !== 'dashboardInitializing')
                    this._updateController.addAction('loadDashboard');
                break;
            case 'workingMode':
                if (this._updateController.getControlState() === 'controlInitializing') {
                    this.isDesignMode(args.value === 'Designer');
                }
                else {
                    if (args.value === 'Designer') {
                        this._switchToDesigner();
                    }
                    else {
                        this._switchToViewer();
                    }
                }
                break;
            case 'initialDashboardState':
                break;
            case 'useNeutralFilterMode':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'useCardLegacyLayout':
                break;
            case 'resizeByTimer':
                this.resizeByTimer(args.value);
                break;
            case 'endpoint':
                break;
            case 'dataRequestOptions':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'encodeHtml':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'ajaxRemoteService':
                if (this.remoteService && this.remoteService instanceof remote_service_1.AjaxRemoteService) {
                    this.remoteService._applyOptions(this.option('ajaxRemoteService'));
                }
                break;
            case 'limitVisibleDataMode':
                this._updateController.addAction('reinitializeDashboard');
                break;
            case 'onInitializing':
            case 'onOptionChanged':
                break;
            case 'allowMaximizeItems':
                if (this._actualLayoutController()) {
                    this._actualLayoutController().allowMaximizeItems = args.value;
                }
                this._updateController.addAction('updateItemToolbars');
                break;
            case 'extensions':
                if (this._updateController.getControlState() !== 'controlInitializing') {
                    this._processExtensionsOption(args);
                }
                break;
            case 'onDashboardInitializing':
            case 'onDashboardInitialized':
            case 'onDashboardStateChanged':
            case 'onItemBeginUpdate':
            case 'onItemEndUpdate':
            case 'onDashboardBeginUpdate':
            case 'onDashboardEndUpdate':
            case 'showConfirmationOnBrowserClosing':
            case 'loadDefaultDashboard':
                break;
        }
        this._updateController.commitUpdate();
    };
    DashboardControl.prototype._processExtensionsOption = function (args) {
        var _a;
        if (args.name === args.fullName && args.value === false) {
            this._unregisterExtensionCore.apply(this, this._extensions().map(function (extension) { return extension.name; }));
            return;
        }
        if (args.name === args.fullName && typeof args.value === 'object') {
            this._processExtensionsOptions(args.value);
            return;
        }
        else {
            var parts = args.fullName
                .split(/(?:\[|\]|\.)/)
                .filter(function (item) { return !!item.length; });
            var extensionName = parts[1];
            var extensionOptionParts = parts.slice(2);
            this._processExtensionsOptions((_a = {},
                _a[extensionName] = this._createExtensionOption(extensionOptionParts, args.value),
                _a));
        }
    };
    DashboardControl.prototype._createExtensionOption = function (parts, value) {
        var _a;
        if (parts.length === 0)
            return value;
        return parts.slice(0, parts.length - 1).reverse().reduce(function (acc, cur) {
            var _a;
            return _a = {}, _a[cur] = acc, _a;
        }, (_a = {},
            _a[parts[parts.length - 1]] = value,
            _a));
    };
    DashboardControl.prototype._processExtensionsOptions = function (extensionsOptions) {
        var _this = this;
        Object.keys(extensionsOptions).forEach(function (key) {
            var extensionName = key;
            var extensionOptions = extensionsOptions[extensionName];
            if (extensionOptions === false) {
                _this._unregisterExtensionCore(extensionName);
            }
            else if (typeof extensionOptions === 'object') {
                var extension = _this.findExtension(extensionName);
                if (!extension) {
                    var extensionsFactory = __assign({}, control_options_1.defaultExtensions, control_options_1.designerExtensions);
                    var extensionCreator = extensionsFactory[_this._getCebabCaseExtensionName(extensionName)];
                    _utils_1.type.isFunction(extensionCreator) && _this.registerExtension(extensionCreator(_this, extensionOptions));
                }
                else {
                    var optionsManager = extension && extension._optionsManager;
                    if (optionsManager) {
                        Object.keys(extensionOptions).forEach(function (optionName) {
                            var extensionArgs = { name: optionName, fullName: optionName, value: extensionOptions[optionName] };
                            var extensionAction = optionsManager.optionChanged(extensionArgs);
                            if (extensionAction)
                                _this._updateController.addAction(extensionAction);
                        });
                    }
                }
            }
        });
    };
    DashboardControl.prototype._updateLayout = function () {
        var binders = this._layoutInfoProviderCollection;
        var binder = binders.filter(function (b) { return b.condition(); })[0];
        if (binder && (!this._layoutInfo() || binder.name !== this._layoutInfo().template.name)) {
            this._layoutInfo({
                template: {
                    name: binder.name,
                    data: binder.getViewModel(),
                },
                layoutController: binder.getLayoutController(),
            });
        }
    };
    Object.defineProperty(DashboardControl.prototype, "_colorSchemeCss", {
        get: function () {
            return _dx_devextreme_themes_integration_1.getBaseColorScheme() === 'light' ? 'dx-color-scheme-light' : 'dx-color-scheme-dark';
        },
        enumerable: true,
        configurable: true
    });
    DashboardControl.prototype.repaint = function () {
        this._repaintRequest.fire();
    };
    DashboardControl.prototype.render = function () {
        resource_manager_1.ResourceManager._embedBundledResourcesCore(this._element);
        this._raiseEvent('beforeRender', { component: this });
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-control' } "), closingComment = document.createComment(' /ko ');
        this._element.appendChild(openComment);
        this._element.appendChild(closingComment);
        this._applyBindings(this._element);
    };
    DashboardControl.prototype.maximizeDashboardItem = function (itemName) {
        if (this.dashboard()) {
            var dashboardItem = this.dashboard().findItem(itemName);
            if (dashboardItem) {
                var fullscreenItemProvider = this._getFullscreenItemProvider();
                if (fullscreenItemProvider) {
                    fullscreenItemProvider.maximizeItem(dashboardItem);
                }
            }
            else {
                throw Error("The item with the '" + itemName + "' name does not exist");
            }
        }
    };
    DashboardControl.prototype.restoreDashboardItem = function () {
        var fullscreenItemProvider = this._getFullscreenItemProvider();
        fullscreenItemProvider && fullscreenItemProvider.restoreDownItem();
    };
    DashboardControl.prototype.initializeDashboard = function (id, dashboardJson, initialState) {
        var _this = this;
        this._updateController.switchControlState('dashboardInitializing');
        if (this.option('dashboardId') !== id) {
            this.option('dashboardId', id);
        }
        this._unloadDashboardServices();
        var dashboard = new dashboard_1.Dashboard(dashboardJson);
        if (initialState) {
            dashboard._state(initialState);
        }
        var e = {
            component: this,
            dashboard: dashboard,
            dashboardId: id,
            ready: _jquery_helpers_1.createJQueryDeferred().resolve().promise()
        };
        this._raiseEvent('dashboardInitializing', e);
        e.ready.done(function () {
            dashboard.items().forEach(function (item) { return item._useNeutralFilterMode(_this.option('useNeutralFilterMode')); });
            _this._perDashboardDisposables.push(_knockout_utils_1.subscribeArrayChange(dashboard.items, {
                added: function (newItem) { return newItem._useNeutralFilterMode(_this.option('useNeutralFilterMode')); }
            }));
            var dashboardContainer = { id: id, dashboard: dashboard };
            _this._initializeServiceClient(dashboardContainer);
            _this._dataSourceBrowser = new _data_source_browser_1.DataSourceBrowser(dashboard.dataSources, _this.isDesignMode, dashboard.parameters, _this._serviceClient, _this._isLoading);
            _this._dashboardContext.viewerItemsManager = new _item_viewer_adapter_factory_1.ViewerItemAdaptersManager();
            _this._perDashboardDisposables.push(_this._dashboardContext.viewerItemsManager);
            _this._updateHubPrivate = new _dashboard_update_hub_1.DashboardUpdateHub(dashboard, _this.option('dataRequestOptions'), {
                getItemData: function (item) { return _this._serviceClient().getItemData(item, isModeAllowsToReduceData()); },
                getBatchItemData: function (items) { return _this._serviceClient().getBatchItemData(items, isModeAllowsToReduceData()); },
                getMapShapeFile: function (item) { return _this._serviceClient().getMapShapeFile(item.componentName()); }
            }, function () { return _this._actualLayoutController() && _this._actualLayoutController().visibleItemsProvider || null; });
            _this._updateHubPrivate.dashboardBeginUpdate = function () { return _this._raiseEvent('dashboardBeginUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id
            }); };
            _this._updateHubPrivate.dashboardEndUpdate = function () { return _this._raiseEvent('dashboardEndUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id
            }); };
            _this._updateHubPrivate.itemBeginUpdate = function (itemName) { return _this._raiseEvent('itemBeginUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id,
                itemName: itemName
            }); };
            _this._updateHubPrivate.itemEndUpdate = function (itemName) { return _this._raiseEvent('itemEndUpdate', {
                component: _this,
                dashboardId: _this.dashboardContainer().id,
                itemName: itemName
            }); };
            _this.dashboardContainer(dashboardContainer);
            _this.notificationController.reset();
            _this._updateController.switchControlState('dashboardInitialized');
            _this._raiseEvent('dashboardInitialized', {
                component: _this,
                dashboardId: id,
                dashboard: dashboard
            });
            _this._raiseEvent('dashboardStateChanged', {
                component: _this,
                dashboard: dashboard,
                dashboardId: id,
                stateString: dashboard.stateString
            });
            var isModeAllowsToReduceData = function () {
                var limitMode = _this.option('limitVisibleDataMode');
                return limitMode === 'DesignerAndViewer' || (_this.isDesignMode() && limitMode === 'Designer');
            };
            _this._updateHubPrivate.initialize();
            _this._perDashboardDisposables.push(_this.dashboard()._state.subscribe(function (_) {
                _this._raiseEvent('dashboardStateChanged', {
                    component: _this,
                    dashboard: _this.dashboard(),
                    dashboardId: _this.dashboardContainer().id,
                    stateString: dashboard.stateString
                });
            }));
        }).fail(function () {
            _this.notificationController.reset();
        });
    };
    DashboardControl.prototype.requestDashboardList = function () {
        var _this = this;
        var urls = this._endpointCollection.dashboardUrls;
        if (urls) {
            return this.remoteService.getFromServer(urls.GetDashboardsAction, null, { cache: false })
                .fail(function () {
                _this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboards'));
            });
        }
        return _jquery_helpers_1.createJQueryDeferred().reject().promise();
    };
    DashboardControl.prototype.loadDashboard = function (dashboardId) {
        var def = _jquery_helpers_1.createJQueryDeferred();
        if (this._dashboardLoadingDeferred) {
            this._dashboardLoadingDeferred.reject();
        }
        this._dashboardLoadingDeferred = def;
        if (this.option('dashboardId') === dashboardId) {
            this._loadDashboardCore(dashboardId);
        }
        else {
            this.option('dashboardId', dashboardId);
        }
        return def.promise();
    };
    DashboardControl.prototype._loadDashboardCore = function (dashboardId) {
        var _this = this;
        var urls = this._endpointCollection && this._endpointCollection.dashboardUrls || null;
        if (urls) {
            var prevDashboardState_1 = this._updateController.getControlState();
            this._updateController.switchControlState('dashboardLoading');
            this.notificationController.showState(_default_1.getLocalizationById('DashboardWebStringId.Notification.DashboardLoading'));
            return this.remoteService.getFromServer(urls.DashboardAction + '/' + encodeURIComponent(dashboardId), null, { cache: false })
                .done(function (result) {
                _this._updateController.switchControlState('dashboardLoaded');
                if (_this.option('dashboardId') === dashboardId) {
                    _this.initializeDashboard(dashboardId, result.Dashboard, result.initialState);
                    _this._dashboardLoadingDeferred && _this._dashboardLoadingDeferred.resolve();
                }
            }).fail(function (val) {
                _this._updateController.switchControlState(prevDashboardState_1);
                _this._dashboardLoadingDeferred && _this._dashboardLoadingDeferred.reject();
                _this.notificationController.showError(_default_1.getLocalizationById('DashboardWebStringId.Notification.AttemptToLoadDashboard') + dashboardId, val);
            });
        }
        return _jquery_helpers_1.createJQueryDeferred().reject().promise();
    };
    DashboardControl.prototype.unloadDashboard = function () {
        this.option('dashboardId', null);
    };
    DashboardControl.prototype._unloadDashboardCore = function () {
        this._unloadDashboardServices();
        this.dashboardContainer(null);
    };
    DashboardControl.prototype.switchToViewer = function () {
        this.option('workingMode', 'Viewer');
    };
    DashboardControl.prototype._switchToViewer = function () {
        var _this = this;
        var actions = this.extensions
            .filter(function (extension) { return !!extension.designerToViewerAction; })
            .map(function (extension) { return _helpers_1.toCancelableSequenceAction(extension.designerToViewerAction); })
            .sort(function (a, b) { return a.orderNo - b.orderNo; });
        var groups = _utils_1.groupByProperty(actions, 'orderNo');
        this._workingModeChangeDeferred.reject();
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        return DashboardControl._recursiveAsyncEval(groups, new _helpers_1.CancellationToken(this._workingModeChangeDeferred), { surfaceLeft: this._surfaceLeft(), surfaceTop: this._surfaceTop() })
            .then(function (options) {
            _this.surfaceLeft(options.surfaceLeft);
            _this.surfaceTop(options.surfaceTop);
            _this.isDesignMode(false);
            _this._workingModeChangeDeferred.resolve();
        }, function () { return _this.switchToDesigner(); });
    };
    DashboardControl.prototype.switchToDesigner = function () {
        this.option('workingMode', 'Designer');
    };
    DashboardControl.prototype._switchToDesigner = function () {
        var _this = this;
        this._validateWorkingMode();
        var actions = this.extensions
            .filter(function (extension) { return !!extension.viewerToDesignerAction; })
            .map(function (extension) { return _helpers_1.toCancelableSequenceAction(extension.viewerToDesignerAction); })
            .sort(function (a, b) { return a.orderNo - b.orderNo; });
        var groups = _utils_1.groupByProperty(actions, 'orderNo');
        this._workingModeChangeDeferred.reject();
        this._workingModeChangeDeferred = _jquery_helpers_1.createJQueryDeferred();
        return DashboardControl._recursiveAsyncEval(groups, new _helpers_1.CancellationToken(this._workingModeChangeDeferred), { surfaceLeft: this._surfaceLeft(), surfaceTop: this._surfaceTop() })
            .then(function (options) {
            _this.surfaceLeft(options.surfaceLeft);
            _this.surfaceTop(options.surfaceTop);
            _this.isDesignMode(true);
            _this._workingModeChangeDeferred.resolve();
        }, function () { return _this.switchToViewer(); });
    };
    DashboardControl.prototype.reloadData = function () {
        var _this = this;
        if (this.dashboard()) {
            this._serviceClient().markDataSourcesForReload().done(function (result) {
                _this.refresh();
            });
        }
    };
    DashboardControl.prototype.refresh = function (args) {
        if (this.dashboard()) {
            var itemNames = [];
            if (!args) {
                itemNames = this.dashboard()._dataDashboardItems().map(function (item) { return item.componentName(); });
            }
            else if (typeof args === 'string') {
                itemNames = [args];
            }
            else if (Array.isArray(itemNames)) {
                itemNames = args;
            }
            else {
                throw Error('Invalid arguments');
            }
            this._updateHubPrivate.refreshItems(itemNames);
        }
    };
    DashboardControl.prototype.getDashboardState = function () {
        var dashboard = this.dashboard();
        if (dashboard)
            return dashboard.stateString;
        return null;
    };
    DashboardControl.prototype.setDashboardState = function (dashboardState) {
        var dashboard = this.dashboard();
        if (dashboard) {
            if (typeof dashboardState === 'string') {
                dashboard.stateString = dashboardState;
            }
            else {
                dashboard._state(dashboardState);
            }
        }
    };
    DashboardControl.prototype.getDashboardId = function () {
        var dashboardContainer = this.dashboardContainer();
        if (dashboardContainer)
            return dashboardContainer.id;
        return null;
    };
    DashboardControl.prototype.registerIcon = function (icon) {
        resource_manager_1.ResourceManager.registerIcon(icon);
    };
    DashboardControl.prototype.registerExtension = function () {
        var _this = this;
        var extensions = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensions[_i] = arguments[_i];
        }
        extensions.forEach(function (extension) {
            if (_this._canAddExtension(extension))
                _this._registerExtensionCore(extension);
        });
    };
    DashboardControl.prototype._registerExtensionCore = function (extension) {
        var optionsManager = extension._optionsManager;
        if (optionsManager) {
            if (typeof this._controlOptions.extensions !== 'object') {
                this._controlOptions.extensions = {};
            }
            this._controlOptions.extensions[control_options_1.extensionNameMap[extension.name]] = optionsManager.getInitialOptions();
            this._defaultControlOptions.extensions[control_options_1.extensionNameMap[extension.name]] = optionsManager.getDefaultOptions();
        }
        else {
            this._controlOptions.extensions = this._controlOptions.extensions || {};
            this._controlOptions.extensions[extension.name] = {};
        }
        this._addExtension(extension);
        this._startExtension(extension);
    };
    DashboardControl.prototype.findExtension = function (extensionName) {
        var cebabName = this._getCebabCaseExtensionName(extensionName);
        return this._extensions().filter(function (ext) { return ext.name === cebabName; })[0];
    };
    DashboardControl.prototype.unregisterExtension = function () {
        var _this = this;
        var extensionNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensionNames[_i] = arguments[_i];
        }
        extensionNames.forEach(function (name) {
            var camelName = _this._getCamelCaseExtensionName(name);
            _this.option("extensions." + camelName, false);
            _this._defaultControlOptions.extensions[camelName] = false;
        });
    };
    DashboardControl.prototype._unregisterExtensionCore = function () {
        var _this = this;
        var extensionNames = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            extensionNames[_i] = arguments[_i];
        }
        extensionNames.forEach(function (extensionName) {
            var extension = _this.findExtension(extensionName);
            if (!!extension) {
                var customItemExtension = extension;
                if (customItemExtension.createViewerItem) {
                    _this._dashboardContext.viewerItemCreator[extension.name] = undefined;
                }
                if (customItemExtension.metaData) {
                    delete serializable_model_1.itemTypesMap[extension.name];
                }
                extension.stop && extension.stop();
                _this._extensions.remove(extension);
            }
        });
    };
    DashboardControl.prototype.subscribeExtensionsChanged = function (handlers) {
        return _knockout_utils_1.subscribeArrayChange(this._extensions, handlers);
    };
    DashboardControl.prototype.dispose = function () {
        this._unloadDashboardCore();
        this._viewerApi.stop();
        this._dockingLayoutAdapter.dispose();
        $(document).off('.dx-dshd');
        ko.cleanNode(this._element);
        this._element.innerHTML = '';
        resource_manager_1.ResourceManager._removeEmbeddedResourcesCore(this._element);
    };
    DashboardControl.prototype._renderDashboardItem = function (element, dashboardItemName, isStandalone) {
        var _this = this;
        if (isStandalone === void 0) { isStandalone = true; }
        var openComment = document.createComment(" ko template: { name: 'dx-dashboard-standalone-item' } "), closingComment = document.createComment(' /ko ');
        element.appendChild(openComment);
        element.appendChild(closingComment);
        var dashboardItem = ko.computed(function () { return _this.dashboard() && _this.dashboard().items().filter(function (i) { return i.componentName.peek() === dashboardItemName; })[0]; });
        this._applyBindings(element, {
            dashboardItem: dashboardItem,
            context: this._dashboardContext,
            sizeController: new _interfaces_1.SingleItemSizeController(element, this._repaintRequest),
            isStandalone: isStandalone
        });
    };
    DashboardControl.prototype._getFullscreenItemProvider = function () {
        return this._actualLayoutController() && this._actualLayoutController().fullscreenItemProvider;
    };
    DashboardControl.prototype._registerKeyProcessing = function () {
        var _this = this;
        _staticInitialize();
        var _ignoreKeyProcessing = function () {
            if (!_this.isDesignMode() || !_this._actualLayoutController()) {
                return true;
            }
            var activeElement = $(document.activeElement);
            if (activeElement.is('textarea') || activeElement.is(':input') && (['password', 'text', 'number'].indexOf(activeElement.attr('type')) != -1)) {
                return true;
            }
            return false;
        };
        $(document).on('keyup.dx-dshd', function (e) {
            if (_ignoreKeyProcessing()) {
                return;
            }
            if (_this._dockingLayoutAdapter.processKeyEvent && _this._dockingLayoutAdapter.processKeyEvent('keyup', e)) {
                return false;
            }
            var i;
            for (i = 0; i < _this._extensions().length; i++) {
                var extension = _this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keyup', e)) {
                    return false;
                }
            }
        });
        $(document).on('keydown.dx-dshd', function (e) {
            if (_ignoreKeyProcessing()) {
                return;
            }
            var i;
            for (i = 0; i < _this._extensions().length; i++) {
                var extension = _this._extensions()[i];
                if (extension.processKeyEvent && extension.processKeyEvent('keydown', e)) {
                    return false;
                }
            }
        });
    };
    DashboardControl.prototype._registerDefaultExtensions = function (extensions, extensionOptions) {
        var _this = this;
        if (extensionOptions === void 0) { extensionOptions = {}; }
        if (extensionOptions !== false) {
            for (var extensionName in extensions) {
                var camelName = this._getCamelCaseExtensionName(extensionName);
                var options = extensionOptions[camelName];
                if (options !== false) {
                    if (!!options && typeof options !== 'object') {
                        throw Error('Extension options ');
                    }
                    var extension = extensions[extensionName](this, options);
                    this._canAddExtension(extension) && this._addExtension(extension);
                    var optionsManager = extension._optionsManager;
                    this._controlOptions.extensions[camelName] = _jquery_helpers_1.deepExtend({}, optionsManager && optionsManager.getInitialOptions(), options);
                    this._defaultControlOptions.extensions[camelName] = optionsManager && optionsManager.getDefaultOptions();
                }
            }
            if (typeof extensionOptions === 'object') {
                for (var extensionName in extensionOptions) {
                    var camelName = this._getCamelCaseExtensionName(extensionName);
                    var options = extensionOptions[camelName];
                    if (typeof options === 'function') {
                        var extensionCreator = options;
                        var extension = extensionCreator(this);
                        this._canAddExtension(extension) && this._addExtension(extension);
                        var optionsManager = extension._optionsManager;
                        this._controlOptions.extensions[camelName] = optionsManager && optionsManager.getInitialOptions();
                        this._defaultControlOptions.extensions[camelName] = optionsManager && optionsManager.getDefaultOptions();
                    }
                }
            }
        }
        this.extensions.forEach(function (extension) { return _this._startExtension(extension); });
    };
    DashboardControl.prototype._unrollEndpointCollection = function (options) {
        if (options['endpointCollection']) {
            return options['endpointCollection'];
        }
        else if (options.endpoint) {
            return {
                dashboardUrls: {
                    DashboardAction: options.endpoint + '/dashboards',
                    GetDashboardsAction: options.endpoint + '/dashboards'
                },
                dataSourceUrls: {
                    GetDataSourcesAction: options.endpoint + '/dataSources'
                },
                dataSourceWizardUrls: {
                    DataSourceWizardAction: options.endpoint + '/data/DataSourceWizardAction',
                    GetConnectionStringsAction: options.endpoint + '/data/GetConnectionStringsAction'
                },
                dataServiceUrls: {
                    ConvertItemAction: options.endpoint + '/data/ConvertItemAction',
                    DashboardItemGetAction: options.endpoint + '/data/DashboardItemGetAction',
                    DimensionFilterItemsAction: options.endpoint + '/data/DimensionFilterItemsAction',
                    DimensionFilterStringAction: options.endpoint + '/data/DimensionFilterStringAction',
                    DimensionUniqueValuesAction: options.endpoint + '/data/DimensionUniqueValuesAction',
                    FieldListAction: options.endpoint + '/data/FieldListAction',
                    GetColoringSchemeAction: options.endpoint + '/data/GetColoringSchemeAction',
                    GetDashboardPaletteAction: options.endpoint + '/data/GetDashboardPaletteAction',
                    GetMapShapeFileAction: options.endpoint + '/data/GetMapShapeFileAction',
                    GetUnderlyingDataAction: options.endpoint + '/data/GetUnderlyingDataAction',
                    MarkDataSourcesForReloadAction: options.endpoint + '/data/MarkDataSourcesForReloadAction',
                    ParameterValuesAction: options.endpoint + '/data/ParameterValuesAction',
                    PerformExportAction: options.endpoint + '/data/PerformExportAction',
                    DashboardItemBatchGetAction: options.endpoint + '/data/DashboardItemBatchGetAction'
                }
            };
        }
        else {
            return {};
        }
    };
    DashboardControl.prototype._loadInitialDashboard = function () {
        var _this = this;
        if (!!this.option('dashboardId')) {
            return this._loadDashboardCore(this.option('dashboardId'));
        }
        else if (!!this.option('initialDashboardId')) {
            return this.loadDashboard(this.option('initialDashboardId'));
        }
        else if (!!this.option('loadDefaultDashboard')) {
            var res = _jquery_helpers_1.createJQueryDeferred();
            this.requestDashboardList()
                .done(function (items) {
                if (items[0]) {
                    _this.loadDashboard(items[0].id)
                        .done(function () { return res.resolve(); })
                        .fail(function () { return res.reject(); });
                }
                else {
                    res.reject();
                }
            })
                .fail(function () {
                res.reject();
            });
            return res.promise();
        }
        else {
            return _jquery_helpers_1.createJQueryDeferred().resolve().promise();
        }
    };
    DashboardControl.prototype._initializeServiceClient = function (dashboardContainer) {
        var serviceClient = this.isDesignMode() ?
            !this._validateWorkingMode() && new _service_client_1.DesignerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService) || null :
            new _service_client_1.ViewerDataServiceClient(dashboardContainer, this.notificationController, this._endpointCollection.dataServiceUrls, this.remoteService);
        this._serviceClient(serviceClient);
    };
    DashboardControl.prototype._validateWorkingMode = function () {
        if (!this.allowSwitchToDesigner) {
            throw Error('Cannot switch to Designer from the ViewerOnly mode.');
        }
        return false;
    };
    DashboardControl.prototype._canAddExtension = function (extension) {
        if (!!this.findExtension(extension.name)) {
            console.error("The extension with the '" + extension.name + "' name is already registered.");
            return false;
        }
        return true;
    };
    DashboardControl.prototype._addExtension = function (extension) {
        this._extensions.push(extension);
        var customItemExtension = extension;
        if (customItemExtension.createViewerItem) {
            this._dashboardContext.viewerItemCreator[extension.name] = customItemExtension.createViewerItem;
        }
        if (customItemExtension.metaData) {
            serializable_model_1.itemTypesMap[extension.name] = _jquery_helpers_1.deepExtend({
                type: custom_item_1.CustomItem,
                customItemType: extension.name,
            }, customItemExtension.metaData);
        }
    };
    DashboardControl.prototype._startExtension = function (extension) {
        extension.start && extension.start();
    };
    DashboardControl.prototype._unloadDashboardServices = function () {
        var dashboard = this.dashboard();
        if (dashboard) {
            dashboard.dispose();
            if (this._updateHubPrivate) {
                this._updateHubPrivate.dispose();
                this._updateHubPrivate = null;
            }
            if (this._dataSourceBrowser) {
                this._dataSourceBrowser.dispose();
                this._dataSourceBrowser = null;
            }
        }
        this._perDashboardDisposables.forEach(function (d) { return d.dispose(); });
        this._perDashboardDisposables.splice(0, this._perDashboardDisposables.length);
    };
    DashboardControl.prototype._applyBindings = function (element, additionalProperties) {
        var _this = this;
        var viewModel = __assign({ getWidgetContainer: this.getWidgetContainer, surfaceLeft: this._surfaceLeft, surfaceTop: this._surfaceTop, colorSchemeCss: this._colorSchemeCss, isDashboardLoaded: ko.computed(function () { return !!_this.dashboard(); }), layoutTemplate: _knockout_utils_1.safeComputed({ info: this._layoutInfo }, function (_a) {
                var info = _a.info;
                return info.template;
            }), externalTemplates: this._externalTemplates, emptyControlTemplates: this._emptyControlTemplates, notificationController: this.notificationController, isLoading: this._isLoading, getLocalizationById: _default_1.getLocalizationById, extend: _jquery_helpers_1.extend, $unwrap: _jquery_helpers_1.$unwrap, $: $, ko: ko }, additionalProperties);
        analytics_internal_1.appendStaticContextToRootViewModel(viewModel);
        ko.applyBindings(viewModel, element);
    };
    return DashboardControl;
}());
exports.DashboardControl = DashboardControl;
ko.bindingHandlers['element-height-change-provider'] = {
    init: function (el, valueAccessor, allbindings, viewmodel, bindingcontext) {
        var data = ko.unwrap(valueAccessor());
        var recalculate = function () {
            setTimeout(function () {
                data.height(_jquery_helpers_1.getHeight(el));
            }, 0);
        };
        data.model.subscribe(function () {
            recalculate();
        });
        recalculate();
    }
};
ko.bindingHandlers['xlinkHref'] = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        element.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#' + valueAccessor());
    }
};
ko.bindingHandlers['dxAttach2Model'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var attachmentName = ko.unwrap(valueAccessor());
        if (['getLookupDefaultValuesSelectBoxOptions', 'getLookupDefaultValueSelectBoxOptions', 'dataSourceBrowser'].indexOf(attachmentName) === -1) {
            throw 'non supported';
        }
        var findAttachment = function (name) {
            var context = bindingContext.$parents.filter(function (item) { return item[name] !== undefined; })[0];
            if (context) {
                return context[name];
            }
            return null;
        }, attachment = findAttachment(attachmentName);
        if (attachment) {
            viewModel[attachmentName] = attachment;
        }
    }
};
function _staticInitialize() {
    popup_1.default.defaultOptions({
        options: {
            onInitialized: function (e) {
                var popup = e.component;
                popup.registerKeyHandler('escape', function (e) {
                    e.originalEvent.stopPropagation();
                    popup.hide();
                });
            }
        }
    });
}
function _defineDashboardControlObsoleteMethods(control) {
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbox',
        oldMemberDisplayName: 'DashboardControl.toolbox',
        newMemberDisplayName: 'ToolboxExtension.toolboxGroups',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolboxGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'toolbarItems',
        oldMemberDisplayName: 'DashboardControl.toolbarItems',
        newMemberDisplayName: 'ToolboxExtension.toolbarGroups',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.toolbarGroups;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuItems',
        oldMemberDisplayName: 'DashboardControl.menuItems',
        newMemberDisplayName: 'ToolboxExtension.menuItems',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuItems;
            }
            else {
                console.error('The ToolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'menuVisible',
        oldMemberDisplayName: 'DashboardControl.menuVisible',
        newMemberDisplayName: 'ToolboxExtension.menuVisible',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.menuVisible;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'selectMenuItem',
        oldMemberDisplayName: 'DashboardControl.selectMenuItem',
        newMemberDisplayName: 'ToolboxExtension.selectMenuItem',
        action: function () {
            var toolboxExtension = control.findExtension('toolbox');
            if (toolboxExtension) {
                return toolboxExtension.selectMenuItem;
            }
            else {
                console.error('The toolboxExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'undoEngine',
        oldMemberDisplayName: 'DashboardControl.undoEngine',
        newMemberDisplayName: 'UndoRedoExtension.undoEngine',
        action: function () {
            var undoEngineExtension = control.findExtension('undo-redo');
            if (undoEngineExtension) {
                return undoEngineExtension.undoEngine;
            }
            else {
                console.error('The UndoRedoExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteProperty({
        target: control,
        memberName: 'colorSchemeCss',
        warmMessage: 'The DashboardControl.colorSchemeCss is obsolete. Use the DevExpress.ui.themes.current method instead.',
        action: function () { return control._colorSchemeCss; }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'saveDashboard',
        oldMemberDisplayName: 'DashboardControl.saveDashboard',
        newMemberDisplayName: 'SaveDashboardExtension.saveDashboard',
        action: function () {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.saveDashboard();
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'ensureDashboardSaved',
        oldMemberDisplayName: 'DashboardControl.ensureDashboardSaved',
        newMemberDisplayName: 'SaveDashboardExtension.ensureDashboardSaved',
        action: function (action) {
            var saveDashboardExtension = control.findExtension('save-dashboard');
            if (saveDashboardExtension) {
                return saveDashboardExtension.ensureDashboardSaved(action);
            }
            else {
                console.error('The SaveDashboardExtension could not be found.');
            }
        }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'clearDesigner',
        oldMemberDisplayName: 'DashboardControl.clearDesigner',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: function () { return control.unloadDashboard(); }
    });
    _obsolete_helper_1.defineObsoleteMethod({
        target: control,
        memberName: 'close',
        oldMemberDisplayName: 'DashboardControl.close',
        newMemberDisplayName: 'DashboardControl.unloadDashboard',
        action: function () { return control.unloadDashboard(); }
    });
}
