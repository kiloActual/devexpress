/**
* DevExpress Dashboard (_floating-toolbar-base.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _caption_toolbar_arranger_1 = require("./_caption-toolbar-arranger");
var _caption_toolbar_base_1 = require("./_caption-toolbar-base");
var _caption_toolbar_css_classes_1 = require("./_caption-toolbar-css-classes");
var _floating_panel_1 = require("./_floating-panel");
var FloatingCaptionToolbarBase = (function (_super) {
    __extends(FloatingCaptionToolbarBase, _super);
    function FloatingCaptionToolbarBase(_container, _controlContainer, _popupContainer, encodeHtml, _isBottomPosition) {
        var _this = _super.call(this, _container, _controlContainer, _popupContainer, encodeHtml) || this;
        _this._isBottomPosition = _isBottomPosition;
        return _this;
    }
    Object.defineProperty(FloatingCaptionToolbarBase.prototype, "isBottomFloatingTypePosition", {
        set: function (isBottom) {
            this._isBottomPosition = isBottom;
        },
        enumerable: true,
        configurable: true
    });
    FloatingCaptionToolbarBase.prototype.update = function (options) {
        this._floatingPanel && this._floatingPanel.resetSizeCache();
        return _super.prototype.update.call(this, options);
    };
    FloatingCaptionToolbarBase.prototype.calcHeight = function () {
        return 0;
    };
    FloatingCaptionToolbarBase.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        if (this._initialized) {
            this._floatingPanel.repaint();
        }
    };
    FloatingCaptionToolbarBase.prototype.showFloatingPanel = function () {
        this._floatingPanel.show();
        this._toolbar.repaint();
    };
    FloatingCaptionToolbarBase.prototype.hideFloatingPanel = function () {
        this._floatingPanel.hide();
        this._toolbar.repaint();
    };
    FloatingCaptionToolbarBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this._floatingPanel && this._floatingPanel.dispose();
    };
    FloatingCaptionToolbarBase.prototype._appendToContainer = function (toolbarDiv) {
        var floatingPanelDiv = document.createElement('div');
        floatingPanelDiv.classList.add(_caption_toolbar_css_classes_1.cssClasses.floatingContainer);
        this._container.prepend(floatingPanelDiv);
        this._floatingPanel = this._createFloatingPanel(toolbarDiv, floatingPanelDiv, false);
        return floatingPanelDiv;
    };
    FloatingCaptionToolbarBase.prototype._updateToolbar = function () {
        _super.prototype._updateToolbar.call(this);
        this._repaintFloatingPanel();
    };
    FloatingCaptionToolbarBase.prototype._repaintFloatingPanel = function () {
        if (this._floatingPanel) {
            this._floatingPanel.repaint();
        }
    };
    FloatingCaptionToolbarBase.prototype._getVisibleItems = function () {
        return _caption_toolbar_arranger_1.arrangeFloatingToolbarItems(this._options);
    };
    FloatingCaptionToolbarBase.prototype._createInstance = function () {
        return new FloatingCaptionToolbarBase(undefined, undefined, undefined, this.encodeHtml, this._isBottomPosition);
    };
    FloatingCaptionToolbarBase.prototype._getToolbarItems = function (items) {
        var _this = this;
        return items.map(function (item) { return _this._adapter.createToolbarItem(item, _this._controlContainer, _this._popupContainer, function () { return _this.hideFloatingPanel(); }); }).filter(function (item) { return item !== undefined; });
    };
    FloatingCaptionToolbarBase.prototype._createFloatingPanel = function (toolbarDiv, floatingPanelDiv, preview) {
        return new _floating_panel_1.FloatingPanel({
            toolbarDiv: toolbarDiv,
            floatingPanelDiv: floatingPanelDiv,
            preview: preview,
            container: this._container,
            bottomPosition: this._isBottomPosition
        });
    };
    return FloatingCaptionToolbarBase;
}(_caption_toolbar_base_1.DashboardCaptionToolbarBase));
exports.FloatingCaptionToolbarBase = FloatingCaptionToolbarBase;
