/**
* DevExpress Dashboard (_floating-panel.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ui_overlay_1 = require("devextreme/ui/overlay/ui.overlay");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _z_index_1 = require("../../../data/_z-index");
var _caption_toolbar_css_classes_1 = require("./_caption-toolbar-css-classes");
var FloatingPanel = (function () {
    function FloatingPanel(options) {
        this.PREVIEW_TOOLBAR_WIDTH = 15;
        this._maxWidth = undefined;
        var position = options.bottomPosition ? 'bottom right' : 'top right';
        this._container = options.container;
        this._preview = options.preview;
        this._floatingPanelDiv = options.floatingPanelDiv;
        var overlayOptions = {
            shading: false,
            animation: false,
            width: 'auto',
            height: 'auto',
            contentTemplate: function (contentElement) {
                _jquery_helpers_1.$unwrap(contentElement).appendChild(options.toolbarDiv);
            },
            closeOnOutsideClick: false,
            position: {
                boundary: options.container,
                my: position,
                at: position,
                offset: options.bottomPosition ? '2 2' : '2 -2',
                of: options.container
            },
            onShowing: function (e) {
                var wrapper = _jquery_helpers_1.$unwrap(e.component._$wrapper);
                var baseZIndex = _z_index_1.zIndex.floatingToolbar;
                wrapper.style.zIndex = (options.preview ? baseZIndex : baseZIndex + 1).toString();
                var overlayContent = wrapper.querySelector('.dx-overlay-content');
                if (overlayContent) {
                    overlayContent.style.zIndex = wrapper.style.zIndex + 1;
                }
            },
            wrapperAttr: {
                class: _caption_toolbar_css_classes_1.cssClasses.floatingContainer
            }
        };
        overlayOptions = __assign({}, overlayOptions, { target: options.container, container: options.container, closeOnSwipe: false, propagateOutsideClick: true });
        this._overlay = new ui_overlay_1.default(options.floatingPanelDiv, overlayOptions);
    }
    FloatingPanel.prototype._getToolbarWidth = function () {
        return this._preview ? this.PREVIEW_TOOLBAR_WIDTH : this._calculateToolbarWidth(this._floatingPanelDiv);
    };
    FloatingPanel.prototype._calculateToolbarWidth = function (floatingPanelDiv) {
        if (!this._maxWidth) {
            var toolbarItemGroupsContainer = floatingPanelDiv.querySelector('.dx-toolbar-items-container');
            var toolbarItemGroups = toolbarItemGroupsContainer && Array.prototype.slice.call(toolbarItemGroupsContainer.childNodes) || [];
            this._maxWidth = Math.min(_jquery_helpers_1.getOuterWidth(this._container), toolbarItemGroups
                .filter(function (child) { return !!child.innerHTML; })
                .reduce(function (acc, child) { return acc + _jquery_helpers_1.getOuterWidth(child); }, 0));
        }
        return this._maxWidth;
    };
    FloatingPanel.prototype.show = function () {
        this._overlay.show();
        this._overlay.option('width', this._getToolbarWidth());
    };
    FloatingPanel.prototype.hide = function () {
        this._overlay.hide();
    };
    FloatingPanel.prototype.repaint = function () {
        var newWidth = this._getToolbarWidth();
        if (this._overlay.option('width') === newWidth) {
            this._overlay.repaint();
        }
        else {
            this._overlay.option('width', this._getToolbarWidth());
        }
    };
    FloatingPanel.prototype.isVisible = function () {
        return this._overlay.option('visible');
    };
    FloatingPanel.prototype.resetSizeCache = function () {
        this._maxWidth = undefined;
    };
    FloatingPanel.prototype.dispose = function () {
        this._overlay.dispose();
    };
    return FloatingPanel;
}());
exports.FloatingPanel = FloatingPanel;
