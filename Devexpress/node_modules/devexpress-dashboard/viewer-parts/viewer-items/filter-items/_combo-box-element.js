/**
* DevExpress Dashboard (_combo-box-element.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var select_box_1 = require("devextreme/ui/select_box");
var tag_box_1 = require("devextreme/ui/tag_box");
var _filter_element_data_controller_1 = require("../../../data/data-controllers/_filter-element-data-controller");
var _default_1 = require("../../../data/localization/_default");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _localization_ids_1 = require("../../../data/_localization-ids");
var _localizer_1 = require("../../../data/_localizer");
var _render_helper_1 = require("../../widgets/_render-helper");
var _base_element_1 = require("./_base-element");
var MULTITAG_COUNT = 9;
exports.cssComboBoxClassNames = {
    item: 'dx-dashboard-combobox-filter-item',
    multiText: 'dx-dashboard-filter-item-multitext',
    margins: 'dx-dashboard-combobox-margins'
};
var comboBoxFilterElement = (function (_super) {
    __extends(comboBoxFilterElement, _super);
    function comboBoxFilterElement(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this._isFixedHeight = true;
        return _this;
    }
    Object.defineProperty(comboBoxFilterElement.prototype, "dataController", {
        get: function () { return this._dataController; },
        set: function (dataController) { this._dataController = dataController; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(comboBoxFilterElement.prototype, "filterDataController", {
        get: function () { return this._dataController; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(comboBoxFilterElement.prototype, "_shouldApplySelectionOnInitialRender", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    comboBoxFilterElement.prototype._setSelectionUnsafe = function (values) {
        _super.prototype._setSelectionUnsafe.call(this, values);
        this._lock();
        try {
            this.widget.option('value', this._getSelectedKeys());
        }
        finally {
            this._unlock();
        }
    };
    comboBoxFilterElement.prototype._clearSelectionUnsafe = function () {
        if (!!this.options.useNeutralFilterMode) {
            this._lock();
            try {
                this.widget.option('value', null);
            }
            finally {
                this._unlock();
            }
        }
    };
    Object.defineProperty(comboBoxFilterElement.prototype, "_isBottomFloatingToolbarPosition", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(comboBoxFilterElement.prototype, "_allowPreview", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    comboBoxFilterElement.prototype._getWidgetName = function () {
        return this.isMultiSelectable ? 'dxTagBox' : 'dxSelectBox';
    };
    comboBoxFilterElement.prototype._createWidgetDiv = function () {
        var div = _super.prototype._createWidgetDiv.call(this);
        if (this.visualMode === 'content')
            div.classList.add(exports.cssComboBoxClassNames.margins);
        return div;
    };
    comboBoxFilterElement.prototype._createWidget = function (div, opts) {
        return this.isMultiSelectable ? new tag_box_1.default(div, opts) : new select_box_1.default(div, opts);
    };
    comboBoxFilterElement.prototype._getMinContentHeight = function () {
        var element = document.createElement('div');
        this._createWidget(element, this._getOptions(false));
        return _render_helper_1.RenderHelper.getElementBox(element).height;
    };
    comboBoxFilterElement.prototype._generateInnerBorderClassesUnsafe = function (element) {
        var classes = _super.prototype._generateInnerBorderClassesUnsafe.call(this, element);
        if (!this._isPaneEmpty()) {
            classes.push(exports.cssComboBoxClassNames.item);
        }
        if (element) {
            if (this._isPaneEmpty()) {
                element.classList.remove(exports.cssComboBoxClassNames.item);
            }
            else {
                element.classList.add(exports.cssComboBoxClassNames.item);
            }
        }
        return classes;
    };
    comboBoxFilterElement.prototype._getSelectedKeys = function () {
        var selection = this._dataController.selection;
        if (this.isMultiSelectable) {
            return selection.map(this._dataController.getDataSourceItemKey);
        }
        else {
            return selection && selection.length ? this._dataController.getDataSourceItemKey(selection[0]) : null;
        }
    };
    comboBoxFilterElement.prototype._getOptions = function (includeActions) {
        var _this = this;
        var itemTemplate = function (item, _, element) {
            var node = _jquery_helpers_1.$unwrap(element);
            var expr = _this._getDisplayExpr();
            if (expr === 'html') {
                node.innerHTML = item[expr];
            }
            else {
                node.innerText = item[expr];
            }
        };
        var multiTagPreparingHandler = function (args) {
            if (_this._dataController.dataSource.length === args.selectedItems.length)
                args.text = _localizer_1.ALL_ELEMENT.text;
            else if (args.selectedItems.length < MULTITAG_COUNT)
                args.cancel = true;
        };
        var tagBoxSelectionChangedHandler = function (e) {
            _this._raiseItemClick(e.removedItems.length > 0 ? e.removedItems : e.addedItems);
        };
        var selectBoxValueChangedHandler = function (e) {
            if (e.value != null) {
                var selectedItem = _this._dataController.getDataSourceItemByKey(e.value);
                _this._raiseItemClick([selectedItem]);
            }
        };
        var options = {
            dataSource: this.getDataSource(),
            displayExpr: this._getDisplayExpr(),
            valueExpr: _filter_element_data_controller_1.KEY_EXPR,
            value: this._getSelectedKeys(),
            placeholder: _localizer_1.localizer.getString(_localization_ids_1.localizationId.FilterElementRadioComboBoxNoDataCaption),
            noDataText: _default_1.getLocalizationById('DashboardStringId.FilterElementNoDataToDisplay'),
            itemTemplate: itemTemplate,
            onMultiTagPreparing: multiTagPreparingHandler,
            maxDisplayedTags: 1,
            selectAllMode: 'allPages',
            searchEnabled: this._enableSearch
        };
        var addtionalOptions = this.isMultiSelectable ?
            {
                onSelectionChanged: includeActions ? tagBoxSelectionChangedHandler : undefined,
                showSelectionControls: this.isMultiSelectable,
                showDropDownButton: true,
                multiline: false
            }
            : {
                onValueChanged: includeActions ? selectBoxValueChangedHandler : undefined
            };
        return __assign({}, options, addtionalOptions, { keyExpr: _filter_element_data_controller_1.KEY_EXPR, multiSelectEnabled: this.isMultiSelectable, selectAllText: _localizer_1.ALL_ELEMENT.text, pageLoadMode: 'scrollBottom', dropDownOptions: {
                container: this.controlContainer
            } });
    };
    comboBoxFilterElement.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this.widget.repaint();
    };
    return comboBoxFilterElement;
}(_base_element_1.filterElementBaseItem));
exports.comboBoxFilterElement = comboBoxFilterElement;
