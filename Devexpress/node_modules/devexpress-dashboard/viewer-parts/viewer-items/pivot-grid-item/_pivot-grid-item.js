/**
* DevExpress Dashboard (_pivot-grid-item.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var pivot_grid_1 = require("devextreme/ui/pivot_grid");
var data_source_1 = require("devextreme/ui/pivot_grid/data_source");
var item_data_axis_names_1 = require("../../../data/item-data/item-data-axis-names");
var special_values_1 = require("../../../data/special-values");
var _jquery_helpers_1 = require("../../../data/_jquery-helpers");
var _localization_ids_1 = require("../../../data/_localization-ids");
var _localizer_1 = require("../../../data/_localizer");
var _utils_1 = require("../../../data/_utils");
var _style_settings_provider_1 = require("../../conditional-formatting/_style-settings-provider");
var _base_item_1 = require("../_base-item");
var _pivot_grid_item_helper_1 = require("./_pivot-grid-item-helper");
var PIVOT_BAR_ID = 'pivotBar';
var pivotGridItem = (function (_super) {
    __extends(pivotGridItem, _super);
    function pivotGridItem(container, options) {
        var _this = _super.call(this, container, options) || this;
        _this._conditionalFormattingInfoCache = [];
        _this._pointsCache = { columns: {}, rows: {} };
        _this.expandStateChanged = _jquery_helpers_1.createJQueryCallbacks();
        _this._expandValueChangingHandler = function (args) {
            _this._resetPivotLoadingDeferred();
            _this._dataUpdateHook && _this._dataUpdateHook.reject();
            _this._dataUpdateHook = _jquery_helpers_1.createJQueryDeferred();
            var isColumn = args.area === 'column';
            var values = args.path;
            _this._onExpandValue({
                values: values,
                isColumn: isColumn,
                isExpand: args.expanded,
                isRequestData: !!args.needExpandData
            });
            _this.onCollapseStateChanged(isColumn, values, !args.expanded);
        };
        _this._collapseStateCache = {};
        _this._conditionalFormattingInfoCache = [];
        _this._styleSettingsProvider = new _style_settings_provider_1.styleSettingsProvider();
        _this._styleSettingsProvider.initialize(_this.options.ConditionalFormattingModel);
        return _this;
    }
    Object.defineProperty(pivotGridItem.prototype, "dataController", {
        get: function () { return this._dataController; },
        set: function (dataController) { this._dataController = dataController; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(pivotGridItem.prototype, "_captionToolbarSeparatorRequired", {
        get: function () {
            return !this.hasParentContainer() || (this.hasParentContainer() && this.visualMode === 'caption');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(pivotGridItem.prototype, "_multiData", {
        get: function () {
            return this.options.multiData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(pivotGridItem.prototype, "_viewModel", {
        get: function () {
            return this.options.ViewModel;
        },
        enumerable: true,
        configurable: true
    });
    pivotGridItem.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.pivotGridViewer && this.pivotGridViewer.dispose();
        this._styleSettingsProvider.dispose();
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.reject();
        this._dataUpdateHook.reject();
    };
    pivotGridItem.prototype.hideLoadingPanel = function () {
        var _this = this;
        if (this._pivotLoadingDeferred) {
            this._pivotLoadingDeferred.promise().then(function () {
                _super.prototype.hideLoadingPanel.call(_this);
            });
        }
        else {
            _super.prototype.hideLoadingPanel.call(this);
        }
    };
    pivotGridItem.prototype.renderContentUnsafe = function (element, changeExisting, afterRenderCallback) {
        var _this = this;
        this._resetPivotLoadingDeferred();
        if (this.options) {
            this._createAndLoadDataSource().then(function (result) {
                var pivotOptions = _this._getPivotGridOptions(result.dataSource, result.fields);
                _this._raiseItemWidgetOptionsPrepared(pivotOptions);
                if (changeExisting && _this.pivotGridViewer) {
                    _this.pivotGridViewer.option(pivotOptions);
                }
                else {
                    _this.pivotGridViewer = new pivot_grid_1.default(element, pivotOptions);
                }
                _this._conditionalFormattingInfoCache = [];
                afterRenderCallback();
            });
        }
        return true;
    };
    pivotGridItem.prototype.renderPartialContentUnsafe = function () {
        this._conditionalFormattingInfoCache = [];
    };
    pivotGridItem.prototype.getInfoUnsafe = function () {
        return _jquery_helpers_1.deepExtend(_super.prototype.getInfoUnsafe.call(this), {
            scroll: {
                topPath: this.pivotGridViewer.getScrollPath('row'),
                leftPath: this.pivotGridViewer.getScrollPath('column'),
                horizontal: this.pivotGridViewer.hasScroll('column'),
                vertical: this.pivotGridViewer.hasScroll('row')
            }
        });
    };
    pivotGridItem.prototype.getExpandingState = function (isRowsExpanding, isColumnsExpanding) {
        if (isRowsExpanding === void 0) { isRowsExpanding = true; }
        if (isColumnsExpanding === void 0) { isColumnsExpanding = true; }
        var ds = this.pivotGridViewer ? this.pivotGridViewer.getDataSource() : undefined;
        return {
            rows: isRowsExpanding ? this._getStatePaths(ds, false, true) : this._getStatePaths(ds, false, false),
            columns: isColumnsExpanding ? this._getStatePaths(ds, true, true) : this._getStatePaths(ds, true, false)
        };
    };
    pivotGridItem.prototype._onExpandStateChanged = function (dxPivotState) {
        this.expandStateChanged.fire(dxPivotState);
    };
    pivotGridItem.prototype._getStatePaths = function (ds, isColumn, getExpanded) {
        if (!ds)
            return [];
        var result = [], data = ds.getData() || [], area = isColumn ? 'column' : 'row', fields = ds.getAreaFields(area, false);
        var foreachTreeItem = function (items, members, callback) {
            members = members || [];
            items = items || [];
            var item;
            for (var i = 0; i < items.length; i++) {
                item = items[i];
                members.unshift(item);
                callback(members, i);
                if (item.children) {
                    foreachTreeItem(item.children, members, callback);
                }
                members.shift();
            }
        };
        var createPath = function (items) {
            var result = [];
            for (var i = items.length - 1; i >= 0; i--) {
                result.push(items[i].key || items[i].value);
            }
            return result;
        };
        foreachTreeItem(data[area + 's'], undefined, function (items) {
            var item = items[0], path = createPath(items);
            var expanded = !!item.children;
            if (getExpanded && expanded || !getExpanded && !expanded)
                (path.length < fields.length) && result.push(path.slice());
        });
        return result;
    };
    pivotGridItem.prototype._initializeData = function (newOptions) {
        _super.prototype._initializeData.call(this, newOptions);
        if (!this._dataUpdateHook) {
            this._dataUpdateHook = _jquery_helpers_1.createJQueryDeferred();
        }
        this._dataUpdateHook.resolve();
        this.options.PivotExpandViewState = newOptions.PivotExpandViewState;
        if (this._styleSettingsProvider) {
            this._styleSettingsProvider.initialize(this.options.ConditionalFormattingModel);
        }
    };
    pivotGridItem.prototype._loadState = function (fields) {
        var previousState = this.options.PivotExpandViewState;
        if (previousState) {
            var fieldsCopy = fields.map(function (field) { return (__assign({}, field)); });
            fieldsCopy.forEach(function (actualField) {
                var stateField = previousState.fields.filter(function (field) { return field.name == actualField.name; })[0];
                if (stateField) {
                    actualField.expanded = stateField.expanded;
                }
            });
            previousState.fields = fieldsCopy;
        }
        return previousState;
    };
    pivotGridItem.prototype._getPivotGridOptions = function (dataSource, fields) {
        var _this = this;
        var viewModel = this._viewModel;
        if (!viewModel) {
            return {};
        }
        var commonOptions = {};
        commonOptions.dataSource = dataSource;
        commonOptions.fieldChooser = { enabled: false };
        commonOptions.loadPanel = { enabled: false };
        commonOptions.contextMenuEnabled = false;
        commonOptions.showRowGrandTotals = this._showRowGrandTotals(fields);
        commonOptions.showColumnGrandTotals = this._getShowColumnGrandTotals(fields);
        commonOptions.showColumnTotals = viewModel.ShowColumnTotals;
        commonOptions.showRowTotals = viewModel.ShowRowTotals;
        commonOptions.dataFieldArea = viewModel.ValuesPosition == 'Rows' ? 'row' : 'column';
        if (viewModel.LayoutType == 'Compact') {
            commonOptions.rowHeaderLayout = 'tree';
            if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        else {
            commonOptions.rowHeaderLayout = 'standard';
            if (viewModel.RowTotalsPosition == 'Top' && viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'both';
            else if (viewModel.RowTotalsPosition == 'Top')
                commonOptions.showTotalsPrior = 'rows';
            else if (viewModel.ColumnTotalsPosition == 'Near')
                commonOptions.showTotalsPrior = 'columns';
            else
                commonOptions.showTotalsPrior = 'none';
        }
        var dataFields = fields.filter(function (field) { return field.area == 'data'; });
        for (var i = 0; i < viewModel.Values.length; i++) {
            dataFields[i].showValues = viewModel.Values[i].ShowValues;
            dataFields[i].showTotals = viewModel.Values[i].ShowTotals;
            dataFields[i].showGrandTotals = viewModel.Values[i].ShowGrandTotals;
        }
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        for (var i = 0; i < viewModel.Columns.length; i++) {
            columnFields[i].showTotals = viewModel.Columns[i].ShowTotals;
        }
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        for (var i = 0; i < viewModel.Rows.length; i++) {
            rowFields[i].showTotals = viewModel.Rows[i].ShowTotals;
        }
        commonOptions.encodeHtml = this._isEncodeHtml();
        commonOptions.scrolling = {
            mode: 'standard',
        };
        commonOptions.stateStoring = {
            enabled: true,
            type: 'custom',
            savingTimeout: 0,
            customLoad: function () {
                return _jquery_helpers_1.createJQueryDeferred().resolve(_this._loadState(fields)).promise();
            },
            customSave: function (dxPivotState) {
                _this._onExpandStateChanged(dxPivotState);
            }
        },
            commonOptions.onExpandValueChanging = this._expandValueChangingHandler;
        commonOptions.texts = {
            grandTotal: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridGrandTotal),
            total: _localizer_1.localizer.getString(_localization_ids_1.localizationId.PivotGridTotal),
            noData: _localizer_1.localizer.getString(_localization_ids_1.localizationId.MessagePivotHasNoData)
        };
        commonOptions.onCellClick = function (e) {
            if (e.area === 'data') {
                _this._raiseItemClick(e.cell);
            }
        };
        commonOptions.onCellPrepared = function (e) { return _this._onCellPrepared(e); };
        commonOptions.onContentReady = function (e) {
            _this._styleSettingsProvider.draw();
            _this._resolvePivotLoadingDeferred();
        };
        return commonOptions;
    };
    pivotGridItem.prototype._getShowColumnGrandTotals = function (fields) {
        var viewModel = this._viewModel;
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowColumnGrandTotals && (columnFields.length === 0 && rowFields.length !== 0)) {
            return true;
        }
        return viewModel.ShowColumnGrandTotals;
    };
    pivotGridItem.prototype._showRowGrandTotals = function (fields) {
        var viewModel = this._viewModel;
        var columnFields = fields.filter(function (field) { return field.area == 'column'; });
        var rowFields = fields.filter(function (field) { return field.area == 'row'; });
        if (!viewModel.ShowRowGrandTotals && (columnFields.length !== 0 && rowFields.length === 0)) {
            return true;
        }
        return viewModel.ShowRowGrandTotals;
    };
    pivotGridItem.prototype._resetPivotLoadingDeferred = function () {
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.reject();
        this._pivotLoadingDeferred = _jquery_helpers_1.createJQueryDeferred();
    };
    pivotGridItem.prototype._resolvePivotLoadingDeferred = function () {
        this._pivotLoadingDeferred && this._pivotLoadingDeferred.resolve();
        this._pivotLoadingDeferred = null;
    };
    pivotGridItem.prototype.onCollapseStateChanged = function (isColumn, values, collapse) {
        var that = this;
        var collapseStateKey = values.concat(isColumn ? 'column' : 'row').toString();
        that._conditionalFormattingInfoCache = [];
        if (collapse)
            that._collapseStateCache[collapseStateKey] = true;
        else
            delete that._collapseStateCache[collapseStateKey];
    };
    pivotGridItem.prototype._resizeUnsafe = function () {
        _super.prototype._resizeUnsafe.call(this);
        this.pivotGridViewer && this.pivotGridViewer.resize();
        this._styleSettingsProvider.updateBarWidth(PIVOT_BAR_ID);
    };
    pivotGridItem.prototype._getDataPoint = function (element) {
        var that = this, viewModel = that.options.ViewModel;
        return {
            getValues: function (name) {
                switch (name) {
                    case item_data_axis_names_1.itemDataAxisNames.pivotRowAxis:
                        return element.rowPath;
                    case item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis:
                        return element.columnPath;
                    default:
                        return null;
                }
            },
            getDeltaIds: function () {
                return [];
            },
            getMeasureIds: function () {
                var dataIndex = element.dataIndex;
                if (dataIndex != undefined) {
                    return [viewModel.Values[dataIndex].DataId];
                }
                return null;
            }
        };
    };
    pivotGridItem.prototype._getWidget = function () {
        return this.pivotGridViewer;
    };
    pivotGridItem.prototype._onCellPrepared = function (element) {
        var styleSettingsInfo, isMeasureHeader = (element.area === _utils_1.pivotArea.column || element.area === _utils_1.pivotArea.row) && element.cell.dataIndex !== undefined, cellItem = {
            area: element.area
        };
        if (!isMeasureHeader) {
            if (element.area === _utils_1.pivotArea.column) {
                cellItem.columnPath = element.cell.path;
                cellItem.columnType = element.cell.type;
            }
            else if (element.area === _utils_1.pivotArea.row) {
                cellItem.rowPath = element.cell.path;
                cellItem.rowType = element.cell.type;
            }
            else {
                cellItem.columnPath = element.cell.columnPath;
                cellItem.rowPath = element.cell.rowPath;
                cellItem.cellIndex = element.cell.dataIndex;
                cellItem.columnType = element.cell.columnType;
                cellItem.rowType = element.cell.rowType;
            }
            styleSettingsInfo = this._dataController.getStyleSettingsInfo(cellItem, this._collapseStateCache, this._conditionalFormattingInfoCache, this._pointsCache);
            this._styleSettingsProvider.applyStyleSettings(_jquery_helpers_1.$unwrap(element.cellElement), this.options.controlContainer, styleSettingsInfo, false, PIVOT_BAR_ID);
        }
    };
    pivotGridItem.prototype._getFields = function () {
        if (!this._viewModel) {
            return undefined;
        }
        return _pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Columns, 'column', this._viewModel.AutoExpandColumnGroups)
            .concat(_pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Rows, 'row', this._viewModel.AutoExpandRowGroups))
            .concat(_pivot_grid_item_helper_1.pivotHelper.createAreaFields(this._viewModel.Values, 'data'));
    };
    pivotGridItem.prototype._createAndLoadDataSource = function () {
        var _this = this;
        return new Promise(function (resolve) {
            var fields = _this._getFields();
            var firstRequest = true;
            var dataSource = new data_source_1.default({
                remoteOperations: true,
                fields: fields,
                retrieveFields: false,
                load: function (loadOptions) {
                    if (firstRequest) {
                        firstRequest = false;
                        return [_pivot_grid_item_helper_1.pivotHelper.getSchemaRow(fields)];
                    }
                    else {
                        return _this._dataUpdateHook ? _this._dataUpdateHook.then(function () { return _this._getLoadData(loadOptions); }) : _jquery_helpers_1.createJQueryDeferred().reject().promise();
                    }
                }
            });
            dataSource.state(_this._loadState(fields));
            dataSource.on('loadingChanged', function (args) {
                if (!dataSource.isLoading()) {
                    resolve({ dataSource: dataSource, fields: fields });
                }
            });
        });
    };
    pivotGridItem.prototype._getLoadData = function (loadOptions) {
        var _this = this;
        if (!this._multiData || this._multiData.isEmpty()) {
            return undefined;
        }
        var group = loadOptions.group;
        var groupSummary = loadOptions.groupSummary;
        var totalSummary = loadOptions.totalSummary;
        var filter = _pivot_grid_item_helper_1.OneElementFilterRemover.simplify(loadOptions.filter);
        var availableByArea = {
            columns: _pivot_grid_item_helper_1.pivotHelper.getColumnAxis(this._multiData).getDimensions().map(function (c) { return c.id; }),
            rows: _pivot_grid_item_helper_1.pivotHelper.getRowAxis(this._multiData).getDimensions().map(function (r) { return r.id; })
        };
        var filteredFields = _pivot_grid_item_helper_1.FieldsExtractor.extract(filter);
        var filteredByArea = {
            columns: filteredFields
                .filter(function (f) { return availableByArea.columns.filter(function (c) { return c === f; })[0] != undefined; })
                .sort(function (a, b) { return availableByArea.columns.indexOf(a) - availableByArea.columns.indexOf(b); }),
            rows: filteredFields
                .filter(function (f) { return availableByArea.rows.filter(function (c) { return c === f; })[0] != undefined; })
                .sort(function (a, b) { return availableByArea.rows.indexOf(a) - availableByArea.rows.indexOf(b); })
        };
        var groupedFields = group ? group.map(function (g) { return g.selector; }) : [];
        var groupedByArea = {
            columns: groupedFields.filter(function (f) { return availableByArea.columns.filter(function (c) { return c === f; })[0] != undefined; }),
            rows: groupedFields.filter(function (f) { return availableByArea.rows.filter(function (c) { return c === f; })[0] != undefined; })
        };
        var firstIndexInGroup = {
            column: _utils_1.findIndex(groupedFields, function (f) { return availableByArea.columns.filter(function (c) { return c === f; })[0] !== undefined; }),
            row: _utils_1.findIndex(groupedFields, function (f) { return availableByArea.rows.filter(function (c) { return c === f; })[0] !== undefined; })
        };
        var onlyFilteredByArea = {
            columns: _utils_1.distinct(_utils_1.minus(filteredByArea.columns, groupedByArea.columns)),
            rows: _utils_1.distinct(_utils_1.minus(filteredByArea.rows, groupedByArea.rows))
        };
        var fields;
        if (firstIndexInGroup.column === -1) {
            fields = onlyFilteredByArea.rows.concat(groupedFields).concat(onlyFilteredByArea.columns);
        }
        else if (firstIndexInGroup.row === -1) {
            fields = onlyFilteredByArea.columns.concat(groupedFields).concat(onlyFilteredByArea.rows);
        }
        else if (firstIndexInGroup.column < firstIndexInGroup.row) {
            fields = onlyFilteredByArea.columns
                .concat(groupedFields.slice(firstIndexInGroup.column, firstIndexInGroup.row))
                .concat(onlyFilteredByArea.rows)
                .concat(groupedFields.slice(firstIndexInGroup.row));
        }
        else {
            fields = onlyFilteredByArea.rows
                .concat(groupedFields.slice(firstIndexInGroup.row, firstIndexInGroup.column))
                .concat(onlyFilteredByArea.columns)
                .concat(groupedFields.slice(firstIndexInGroup.column));
        }
        var columnRoot = _pivot_grid_item_helper_1.pivotHelper.getColumnAxis(this._multiData).getRootPoint();
        var rowRoot = _pivot_grid_item_helper_1.pivotHelper.getRowAxis(this._multiData).getRootPoint();
        var getItems = function (index, isColumn, point, oppositePoint, dimensionValues) {
            var isLastGrouping = index + 1 >= fields.length;
            var items = [];
            var children = point.getChildren();
            var nextLevelIsColumn;
            var changeAreas;
            var name = fields[index];
            var onlyFiltered = isColumn ? onlyFilteredByArea.columns : onlyFilteredByArea.rows;
            var isOnlyFiltered = onlyFiltered.filter(function (f) { return f === name; })[0] !== undefined;
            if (!isLastGrouping) {
                nextLevelIsColumn = availableByArea.columns.filter(function (c) { return c === fields[index + 1]; })[0] !== undefined;
                changeAreas = isColumn && !nextLevelIsColumn || !isColumn && nextLevelIsColumn;
            }
            var areaCache = isColumn ? _this._pointsCache.columns : _this._pointsCache.rows;
            var _loop_1 = function (i) {
                var _a;
                var child = children[i];
                areaCache[child.getUniquePath().toString()] = child;
                var value = child.getUniqueValue();
                var dimVals = __assign({}, dimensionValues, (_a = {}, _a[name] = value, _a));
                if (filter && !_pivot_grid_item_helper_1.FilterChecker.fits(dimVals, filter))
                    return "continue";
                var subItems = void 0;
                if (!isLastGrouping) {
                    var nextLevelPoint = child;
                    var nextLevelOppositePoint = oppositePoint;
                    if (changeAreas) {
                        nextLevelPoint = oppositePoint;
                        nextLevelOppositePoint = child;
                    }
                    subItems = getItems(index + 1, nextLevelIsColumn, nextLevelPoint, nextLevelOppositePoint, dimVals);
                }
                else {
                    subItems = null;
                }
                if (isOnlyFiltered) {
                    if (subItems && subItems.length > 0)
                        items = items.concat(subItems);
                }
                else {
                    items.push({
                        key: value,
                        displayText: value === special_values_1.specialValues.olapNullValueGuid ? _localizer_1.localizer.getString(_localization_ids_1.localizationId.OlapRaggedHierarchyNoneItemCaption) : child.getDisplayText(),
                        items: subItems,
                        summary: groupSummary.map(function (s) {
                            return _this._multiData.getMeasureValueByAxisPoints(s.selector, [child, oppositePoint]).getDisplayText();
                        })
                    });
                }
            };
            for (var i = 0; i < children.length; i++) {
                _loop_1(i);
            }
            return items.length !== 0 ? items : null;
        };
        var res = {};
        if (groupedFields && groupedFields.length > 0) {
            var isColumn = !!availableByArea.columns.filter(function (c) { return c === fields[0]; })[0];
            res.data = getItems(0, isColumn, isColumn ? columnRoot : rowRoot, isColumn ? rowRoot : columnRoot, {}) || [];
        }
        else {
            res.data = [_pivot_grid_item_helper_1.pivotHelper.getSchemaRow(this._getFields())];
        }
        if (totalSummary)
            res.summary = totalSummary.map(function (s) {
                return _this._multiData.getMeasureValueByAxisPoints(s.selector, [columnRoot, rowRoot]).getDisplayText();
            });
        return res;
    };
    return pivotGridItem;
}(_base_item_1.baseItem));
exports.pivotGridItem = pivotGridItem;
