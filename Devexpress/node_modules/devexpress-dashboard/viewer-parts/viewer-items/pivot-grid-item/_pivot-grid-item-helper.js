/**
* DevExpress Dashboard (_pivot-grid-item-helper.js)
* Version:  21.2.3
* Build date: Oct 25, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var item_data_axis_names_1 = require("../../../data/item-data/item-data-axis-names");
var _utils_1 = require("../../../data/_utils");
exports.pivotHelper = {
    getSchemaRow: function (fields) {
        var row = {};
        fields && fields.forEach(function (f) {
            row[f.name] = undefined;
        });
        return row;
    },
    createAreaFields: function (fieldsViewModels, area, autoExpand) {
        return fieldsViewModels ? fieldsViewModels.map(function (viewModel) {
            return {
                name: viewModel.DataId,
                dataField: viewModel.DataId,
                caption: viewModel.Caption,
                area: area,
                expanded: autoExpand,
                sortBy: 'none'
            };
        }) : [];
    },
    getColumnAxis: function (multiData) {
        return multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.pivotColumnAxis);
    },
    getRowAxis: function (multiData) {
        return multiData.getAxis(item_data_axis_names_1.itemDataAxisNames.pivotRowAxis);
    }
};
var FilterValueVisitor = (function () {
    function FilterValueVisitor() {
        this._supportedLogicalOperation = ['and', 'or'];
    }
    FilterValueVisitor.prototype._visitComplexExpression = function (filter) {
        var currentResult = undefined;
        var currentOperator = null;
        for (var i = 0; i < filter.length; i++) {
            var currentElement = filter[i];
            if (i % 2 === 1) {
                if (typeof currentElement === 'string' && this._supportedLogicalOperation.indexOf(currentElement) !== -1) {
                    currentOperator = currentElement;
                }
                else {
                    new Error("Filter \"" + JSON.stringify(filter) + "\" has unsupported structure. Element \"" + JSON.stringify(currentElement) + "\" at " + i + " is not supported operator");
                }
            }
            else {
                if (Array.isArray(currentElement)) {
                    if (i === 0) {
                        currentResult = this._visit(currentElement);
                    }
                    else {
                        switch (currentOperator) {
                            case 'and':
                                currentResult = this._and(currentResult, this._visit(currentElement));
                                break;
                            case 'or':
                                currentResult = this._or(currentResult, this._visit(currentElement));
                                break;
                            default:
                                throw new Error("The operator \"" + currentOperator.toString() + "\" is not supported in filter expression");
                        }
                    }
                }
                else {
                    throw new Error("Filter \"" + JSON.stringify(filter) + "\" has unsupported structure. Element \"" + JSON.stringify(currentElement) + "\" at " + i + " should be array");
                }
            }
        }
        return currentResult;
    };
    FilterValueVisitor.prototype._visit = function (filter) {
        if (!filter || filter.length === 0)
            return this._visitEmpty(filter);
        if (filter.length === 1) {
            return this._visit(filter[0]);
        }
        if (filter.length === 2) {
            return this._negate(this._visit(filter[1]));
        }
        else {
            if (filter.length === 3 && filter[1] === '=') {
                var field = filter[0];
                var value = filter[2];
                return this._visitEquality(field, value);
            }
            else if (filter.length >= 3 && filter.length % 2 === 1) {
                return this._visitComplexExpression(filter);
            }
            else {
                throw new Error("Filter \"" + JSON.stringify(filter) + "\" has unsupported structure: must contain an odd number of elements");
            }
        }
    };
    return FilterValueVisitor;
}());
var FilterChecker = (function (_super) {
    __extends(FilterChecker, _super);
    function FilterChecker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilterChecker.fits = function (dimensionValues, filter) {
        FilterChecker._instance._dimensionValues = dimensionValues;
        return FilterChecker._instance._visit(filter);
    };
    FilterChecker.prototype._visitEmpty = function (filter) {
        return true;
    };
    FilterChecker.prototype._negate = function (value) {
        return !value;
    };
    FilterChecker.prototype._visitEquality = function (field, value) {
        return this._dimensionValues[field] === undefined || this._dimensionValues[field] === value;
    };
    FilterChecker.prototype._and = function (left, right) {
        return left && right;
    };
    FilterChecker.prototype._or = function (left, right) {
        return left || right;
    };
    FilterChecker._instance = new FilterChecker();
    return FilterChecker;
}(FilterValueVisitor));
exports.FilterChecker = FilterChecker;
var OneElementFilterRemover = (function (_super) {
    __extends(OneElementFilterRemover, _super);
    function OneElementFilterRemover() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OneElementFilterRemover.simplify = function (filter) {
        return OneElementFilterRemover._instance._visit(filter);
    };
    OneElementFilterRemover.prototype._visitEmpty = function (filter) {
        return filter;
    };
    OneElementFilterRemover.prototype._negate = function (value) {
        return ['!', value];
    };
    OneElementFilterRemover.prototype._visitEquality = function (field, value) {
        return [field, '=', value];
    };
    OneElementFilterRemover.prototype._and = function (left, right) {
        return [left, 'and', right];
    };
    OneElementFilterRemover.prototype._or = function (left, right) {
        return [left, 'or', right];
    };
    OneElementFilterRemover._instance = new OneElementFilterRemover();
    return OneElementFilterRemover;
}(FilterValueVisitor));
exports.OneElementFilterRemover = OneElementFilterRemover;
var FieldsExtractor = (function (_super) {
    __extends(FieldsExtractor, _super);
    function FieldsExtractor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldsExtractor.extract = function (filter) {
        return _utils_1.distinct(FieldsExtractor._instance._visit(filter));
    };
    FieldsExtractor.prototype._visitEmpty = function (filter) {
        return [];
    };
    FieldsExtractor.prototype._negate = function (value) {
        return value;
    };
    FieldsExtractor.prototype._visitEquality = function (field, value) {
        return [field];
    };
    FieldsExtractor.prototype._and = function (left, right) {
        return left.concat(right);
    };
    FieldsExtractor.prototype._or = function (left, right) {
        return left.concat(right);
    };
    FieldsExtractor._instance = new FieldsExtractor();
    return FieldsExtractor;
}(FilterValueVisitor));
exports.FieldsExtractor = FieldsExtractor;
