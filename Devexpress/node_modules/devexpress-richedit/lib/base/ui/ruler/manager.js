"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("../../../base-utils/unit-converter");
var paper_kind_1 = require("../../../core/model/section/paper-kind");
var unit_converter_2 = require("@devexpress/utils/lib/class/unit-converter");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var list_1 = require("@devexpress/utils/lib/utils/list");
var column_1 = require("./controls/column");
var divisions_1 = require("./controls/divisions");
var first_line_1 = require("./controls/indent/first-line");
var left_1 = require("./controls/indent/left");
var right_1 = require("./controls/indent/right");
var left_2 = require("./controls/margin/left");
var right_2 = require("./controls/margin/right");
var ruler_1 = require("./controls/ruler");
var tab_1 = require("./controls/tab/tab");
var tab_type_1 = require("./controls/tab/tab-type");
var table_1 = require("./controls/table");
var vertical_line_1 = require("./controls/vertical-line");
var wrapper_1 = require("./controls/wrapper");
var mouse_1 = require("./events/mouse");
var scroll_1 = require("./events/scroll");
var mouse_handler_1 = require("./mouse-handler");
var RulerControls = (function () {
    function RulerControls(canvas, modelData) {
        this.mouseEventsManager = new mouse_1.RulerMouseEventsManager();
        this.viewElementScrollManager = new scroll_1.RulerViewElementScrollManager();
        this.canvas = canvas;
        var divisionInfo = divisions_1.DivisionInfo.create(modelData.unitType);
        var maxPageWidth = unit_converter_2.UnitConverter.twipsToPixelsF(paper_kind_1.PaperSizeConverter.calculatePaperSize(paper_kind_1.PaperKind.PrcEnvelopeNumber10Rotated).width);
        this.moveStepSize = modelData.unitType == unit_converter_1.RichEditUnit.Inch ? divisionInfo.stepSize / 2 : divisionInfo.stepSize;
        this.wrapper = new wrapper_1.RulerWrapper(modelData, this);
        this.ruler = new ruler_1.RulerControl(modelData, this);
        this.tabTypeBox = new tab_type_1.RulerTabTypeControl(modelData, this);
        this.divisions = new divisions_1.RulerDivisionsControl(modelData, this, divisionInfo, maxPageWidth);
        this.leftMargin = new left_2.RulerLeftMarginDragHandle(modelData, this, maxPageWidth);
        this.rightMargin = new right_2.RulerRightMarginDragHandle(modelData, this, maxPageWidth);
        this.leftIndent = new left_1.RulerLeftIndentDragHandle(modelData, this);
        this.firstLineIndent = new first_line_1.RulerFirstLineIndentDragHandle(modelData, this);
        this.rightIndent = new right_1.RulerRightIndentDragHandle(modelData, this);
        this.columns = new column_1.RulerColumnsControl(modelData, this);
        this.tables = new table_1.RulerTablesControl(modelData, this);
        this.tabs = new tab_1.RulerTabsControl(modelData, this);
        this.ruler.init();
        this.tabTypeBox.init();
        this.lineControl = new vertical_line_1.RulerVerticalLineControl(this.canvas, modelData.settings, this.ruler.rootElement);
        this.mouseHandler = new mouse_handler_1.RulerMouseHandler(modelData, this);
        this.mouseEventsManager.addListener(this.mouseHandler);
        this.viewElementScrollManager.addListener(this.ruler, this.canvas);
    }
    Object.defineProperty(RulerControls.prototype, "paragraphLeftPosition", {
        get: function () {
            var pos = this.leftMargin.currModelState.modelValue + this.columns.currModelState.activeColumn.leftPos;
            if (this.tables.currModelState.columnSeparators.hasItems) {
                var item = this.tables.currModelState.columnSeparators.currItem;
                pos += this.tables.currModelState.columnSeparators.cellSpacing + item.leftMargin + item.position;
            }
            return pos;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerControls.prototype, "paragraphRightPosition", {
        get: function () {
            var colSeps = this.tables.currModelState.columnSeparators;
            if (colSeps.hasItems) {
                var nextSeparatorItem = colSeps.items[colSeps.index + 1];
                return this.leftMargin.currModelState.modelValue + this.columns.currModelState.activeColumn.leftPos +
                    (nextSeparatorItem.position - colSeps.cellSpacing - colSeps.currItem.rightMargin);
            }
            else
                return this.leftMargin.currModelState.modelValue + this.columns.currModelState.activeColumn.rightPos;
        },
        enumerable: true,
        configurable: true
    });
    RulerControls.prototype.dispose = function () {
        this.lineControl.dispose();
        this.wrapper.dispose();
        this.ruler.dispose();
        this.tabTypeBox.dispose();
        this.divisions.dispose();
        this.leftMargin.dispose();
        this.rightMargin.dispose();
        this.leftIndent.dispose();
        this.firstLineIndent.dispose();
        this.rightIndent.dispose();
        this.columns.dispose();
        this.tables.dispose();
        this.tabs.dispose();
        this.mouseEventsManager.dispose();
        this.viewElementScrollManager.dispose();
    };
    RulerControls.prototype.update = function () {
        this.updateModelState();
        this.updateView();
    };
    RulerControls.prototype.updateModelState = function () {
        this.ruler.updateModelState();
        this.leftMargin.updateModelState();
        this.rightMargin.updateModelState();
        this.divisions.updateModelState();
        this.columns.updateModelState();
        this.tables.updateModelState();
        this.rightIndent.updateModelState();
        this.leftIndent.updateModelState();
        this.firstLineIndent.updateModelState();
        this.tabs.updateModelState();
    };
    RulerControls.prototype.updateView = function () {
        this.ruler.updateView();
        this.leftMargin.updateView();
        this.rightMargin.updateView();
        this.divisions.updateView();
        this.columns.updateView();
        this.tables.updateView();
        this.rightIndent.updateView();
        this.leftIndent.updateView();
        this.firstLineIndent.updateView();
        this.tabs.updateView();
    };
    RulerControls.prototype.adjust = function () {
        this.ruler.adjust();
    };
    RulerControls.prototype.chooseClosestAnchorPosition = function (leftPos, additionalPositions, minMax) {
        var boundInterval = new boundary_1.BoundaryInterval(minMax.minElement, minMax.maxElement);
        var poss = list_1.ListUtils.addListOnTail(this.getClosestAnchorPositions(leftPos, 0), additionalPositions);
        poss.push(minMax.minElement);
        poss.push(minMax.maxElement);
        poss = list_1.ListUtils.reducedMap(poss, function (p) { return boundInterval.containsWithIntervalEnd(p) ? p : null; }).sort(function (a, b) { return a - b; });
        return poss.length ?
            list_1.ListUtils.min(poss, function (p) { return Math.abs(p - leftPos); }) :
            list_1.ListUtils.min([minMax.minElement, minMax.maxElement], function (p) { return Math.abs(p - leftPos); });
    };
    RulerControls.prototype.getClosestAnchorPositions = function (leftPos, relative) {
        var stepIndex = (leftPos - relative) / this.moveStepSize;
        return [this.moveStepSize * Math.floor(stepIndex), this.moveStepSize * Math.ceil(stepIndex)];
    };
    return RulerControls;
}());
exports.RulerControls = RulerControls;
