"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var list_1 = require("@devexpress/utils/lib/utils/list");
var RulerViewElementScrollManager = (function () {
    function RulerViewElementScrollManager() {
        this.controls = [];
        this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
    }
    RulerViewElementScrollManager.prototype.dispose = function () {
        this.evtHandlersHolder.removeAllListeners();
    };
    RulerViewElementScrollManager.prototype.addListener = function (owner, viewElement) {
        var _this = this;
        var listenerObj = list_1.ListUtils.elementBy(this.controls, function (control) { return control.view == viewElement; });
        if (!listenerObj) {
            listenerObj = new ListenerScrollStruct(viewElement);
            this.evtHandlersHolder.addListener(listenerObj.view, "scroll", function (_evt) { return _this.onScroll(_this.controls.length - 1); });
            this.controls.push(listenerObj);
        }
        listenerObj.listeners.push(owner);
    };
    RulerViewElementScrollManager.prototype.removeListener = function (owner, viewElement) {
        var indOfControl = list_1.ListUtils.indexBy(this.controls, function (control) { return control.view == viewElement; });
        if (indOfControl >= 0) {
            var control = this.controls[indOfControl];
            var indOfListner = control.listeners.indexOf(owner);
            if (indOfListner >= 0)
                control.listeners.splice(indOfListner, 1);
            if (control.listeners.length == 0)
                this.controls.splice(indOfControl, 1);
        }
        if (this.controls.length == 0)
            this.dispose();
    };
    RulerViewElementScrollManager.prototype.onScroll = function (index) {
        this.controls[index].listeners.forEach(function (listener) { return listener.onScroll(); });
    };
    return RulerViewElementScrollManager;
}());
exports.RulerViewElementScrollManager = RulerViewElementScrollManager;
var ListenerScrollStruct = (function () {
    function ListenerScrollStruct(view) {
        this.listeners = [];
        this.view = view;
    }
    return ListenerScrollStruct;
}());
