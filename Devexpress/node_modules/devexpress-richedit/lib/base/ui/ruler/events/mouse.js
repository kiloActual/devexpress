"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var browser_1 = require("@devexpress/utils/lib/browser");
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var key_1 = require("@devexpress/utils/lib/utils/key");
var touch_1 = require("@devexpress/utils/lib/utils/touch");
var RulerMouseEventsManager = (function () {
    function RulerMouseEventsManager() {
        this.canMouseMoveHandle = false;
        this.touchID = -1;
        this.listeners = [];
        this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
    }
    RulerMouseEventsManager.prototype.dispose = function () {
        this.evtHandlersHolder.removeAllListeners();
        this.listener = null;
    };
    RulerMouseEventsManager.prototype.addListener = function (rulerControl) {
        if (this.listeners.length == 0)
            this.init();
        this.listeners.push(rulerControl);
    };
    RulerMouseEventsManager.prototype.removeListener = function (rulerControl) {
        var ind = this.listeners.indexOf(rulerControl);
        if (ind >= 0)
            this.listeners.splice(ind, 1);
        if (this.listeners.length == 0)
            this.dispose();
    };
    RulerMouseEventsManager.prototype.init = function () {
        this.evtHandlersHolder.addListener(document.documentElement, touch_1.TouchUtils.touchMouseDownEventName, this.onMouseDown.bind(this));
        this.evtHandlersHolder.addListener(document.documentElement, touch_1.TouchUtils.touchMouseMoveEventName, this.onMouseMove.bind(this));
        this.evtHandlersHolder.addListener(document.documentElement, touch_1.TouchUtils.touchMouseUpEventName, this.onMouseUp.bind(this));
        this.evtHandlersHolder.addListener(document.documentElement, "dblclick", this.onDoubleClick.bind(this));
        if (!browser_1.Browser.TouchUI)
            this.evtHandlersHolder.addListener(document.documentElement, "keydown", this.onKeyBoardEvent.bind(this));
    };
    RulerMouseEventsManager.prototype.onDoubleClick = function (evt) {
        this.listener = this.getCurrentListener(evt);
        if (this.listener && this.listener.canHandle(evt_1.EvtUtils.getEventSource(evt)))
            this.listener.onDoubleClick(evt);
        this.listener = null;
    };
    RulerMouseEventsManager.prototype.onKeyBoardEvent = function (evt) {
        if (this.canMouseMoveHandle && key_1.KeyUtils.getEventKeyCode(evt) == key_1.KeyCode.Esc) {
            this.listener.onEscPress();
            this.reset();
        }
    };
    RulerMouseEventsManager.prototype.onMouseDown = function (evt) {
        if (browser_1.Browser.TouchUI)
            this.touchID = this.getChangedTouchesIdentifier(evt);
        this.startX = evt_1.EvtUtils.getEventX(evt);
        this.listener = this.getCurrentListener(evt);
        if (evt_1.EvtUtils.isLeftButtonPressed(evt) && this.listener) {
            this.canMouseMoveHandle = true;
            this.listener.onMouseDown(evt);
            evt_1.EvtUtils.preventEventAndBubble(evt);
        }
    };
    RulerMouseEventsManager.prototype.onMouseMove = function (evt) {
        if (!this.listener || browser_1.Browser.TouchUI && this.touchID != this.getChangedTouchesIdentifier(evt))
            return;
        if (this.canMouseMoveHandle) {
            this.listener.onMouseMove(evt_1.EvtUtils.getEventX(evt) - this.startX, evt_1.EvtUtils.getEventSource(evt));
            evt_1.EvtUtils.preventEventAndBubble(evt);
        }
    };
    RulerMouseEventsManager.prototype.onMouseUp = function (_evt) {
        if (this.listener) {
            this.listener.onMouseUp();
            this.reset();
        }
    };
    RulerMouseEventsManager.prototype.reset = function () {
        this.listener = null;
        this.canMouseMoveHandle = false;
        this.touchID = -1;
    };
    RulerMouseEventsManager.prototype.getCurrentListener = function (evt) {
        for (var _i = 0, _a = this.listeners; _i < _a.length; _i++) {
            var listener = _a[_i];
            if (listener.canHandle(evt_1.EvtUtils.getEventSource(evt)))
                return listener;
        }
        return null;
    };
    RulerMouseEventsManager.prototype.getChangedTouchesIdentifier = function (evt) {
        return !browser_1.Browser.MSTouchUI ? evt.changedTouches[0].identifier : this.touchID;
    };
    return RulerMouseEventsManager;
}());
exports.RulerMouseEventsManager = RulerMouseEventsManager;
