"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var client_command_1 = require("../../../../commands/client-command");
var settings_1 = require("../../settings");
var base_1 = require("../base");
var vertical_line_1 = require("../vertical-line");
var base_2 = require("./base");
var RulerMinDistanceBetweenIndentsOnView = 5;
var RulerRightIndentDragHandle = (function (_super) {
    tslib_1.__extends(RulerRightIndentDragHandle, _super);
    function RulerRightIndentDragHandle(modelData, controls) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.rootElement.title = _this.modelData.settings.titles.rightIndent;
        _this.controls.ruler.rootElement.appendChild(_this.rootElement);
        _this.adjustByTop();
        _this.leftCorrection = Math.round(_this.rootElement.offsetWidth / 2);
        return _this;
    }
    Object.defineProperty(RulerRightIndentDragHandle.prototype, "viewStateRelativeLeft", {
        get: function () { return this.controls.ruler.pageWidth - this.viewState; },
        enumerable: true,
        configurable: true
    });
    RulerRightIndentDragHandle.prototype.getRootClassName = function () {
        return this.modelData.settings.styles.rightIndentImage.spriteCssClass + " " +
            this.modelData.settings.styles.rightIndent.className;
    };
    RulerRightIndentDragHandle.prototype.adjustByTop = function () {
        var divisionsControlHeight = this.controls.divisions.height;
        this.rootElement.style.marginTop = divisionsControlHeight / 2 + "px";
    };
    RulerRightIndentDragHandle.prototype.getModelState = function () {
        var state = this.modelData.commandManager
            .getCommand(client_command_1.RichEditClientCommand.RulerParagraphRightIndent).getState();
        return new base_1.RulerModelState(state.value.hanging, state.enabled);
    };
    RulerRightIndentDragHandle.prototype.updateView = function () {
        var newViewState = this.correctRelativeLeftIndents(this.controls.ruler.pageWidth - this.controls.paragraphRightPosition + this.currModelState.modelValue);
        if (newViewState != this.viewState) {
            this.viewState = newViewState;
            if (this.modelData.settings.showRightIndent)
                this.rootElement.style.right = this.viewState + settings_1.RULLER_NUMBER_CORRECTION - this.leftCorrection + "px";
            else
                this.setVisible(false);
        }
    };
    RulerRightIndentDragHandle.prototype.correctRelativeLeftIndents = function (viewState) {
        var maxOfLeftIndents = Math.max(this.controls.leftIndent.viewState, this.controls.firstLineIndent.viewState);
        return Math.min(this.controls.ruler.pageWidth - (maxOfLeftIndents + RulerMinDistanceBetweenIndentsOnView), viewState);
    };
    RulerRightIndentDragHandle.prototype.canHandle = function (source) { return source == this.rootElement; };
    RulerRightIndentDragHandle.prototype.onMouseUp = function () {
        this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerParagraphRightIndent)
            .execute(this.modelData.commandManager.isPublicApiCall, this.currModelState.modelValue);
        this.finishHandle();
    };
    RulerRightIndentDragHandle.prototype.lineControlSetPosition = function () {
        this.controls.lineControl.setPosition(this.viewState, vertical_line_1.SnapTo.RightSide);
    };
    RulerRightIndentDragHandle.prototype.calculateNewModelState = function (distance) {
        var parRightPos = this.controls.paragraphRightPosition;
        var maxOfLeftIndent = Math.max(this.controls.leftIndent.viewState, this.controls.firstLineIndent.viewState);
        this.currModelState.modelValue = parRightPos -
            this.controls.chooseClosestAnchorPosition(parRightPos - this.prevModelState.modelValue + distance, [parRightPos - this.prevModelState.modelValue], new min_max_1.MinMaxNumber(Math.max(0, maxOfLeftIndent + base_2.RulerMinDistanceBetweenIndents), this.controls.ruler.pageWidth));
    };
    return RulerRightIndentDragHandle;
}(base_2.RulerBaseIndentControl));
exports.RulerRightIndentDragHandle = RulerRightIndentDragHandle;
