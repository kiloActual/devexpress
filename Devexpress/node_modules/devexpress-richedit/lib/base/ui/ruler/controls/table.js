"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var document_renderer_1 = require("../../../canvas/renderes/common/document-renderer");
var client_command_1 = require("../../../commands/client-command");
var ruler_table_column_separators_command_1 = require("../../../commands/ruler/ruler-table-column-separators-command");
var ruler_table_commands_1 = require("../../../commands/ruler/ruler-table-commands");
var settings_1 = require("../settings");
var owner_1 = require("./owner");
var vertical_line_1 = require("./vertical-line");
var TABLE_COLUMN_SEPARATOR_MARGIN = 15;
var TABLE_COLUMN_SEPARATOR_HANDLE_CLASS_NAME = settings_1.RICH_EDIT_CLASS_NAME_PREFIX + "rulerTableColumnSeparatorHandle";
var RulerTableModelState = (function () {
    function RulerTableModelState(columnSeparators, tableIndex, enabled) {
        this.columnSeparators = columnSeparators;
        this.tableIndex = tableIndex;
        this.enabled = enabled;
    }
    RulerTableModelState.prototype.clone = function () {
        return new RulerTableModelState(this.columnSeparators.clone(), this.tableIndex, this.enabled);
    };
    return RulerTableModelState;
}());
exports.RulerTableModelState = RulerTableModelState;
var RulerTableColumnViewState = (function () {
    function RulerTableColumnViewState(leftMargin, rightMarginOfPrevColumn, position) {
        this.leftMargin = leftMargin;
        this.rightMarginOfPrevColumn = rightMarginOfPrevColumn;
        this.position = position;
    }
    RulerTableColumnViewState.prototype.equals = function (obj) {
        return this.leftMargin == obj.leftMargin && this.rightMarginOfPrevColumn == obj.rightMarginOfPrevColumn && this.position == obj.position;
    };
    RulerTableColumnViewState.prototype.clone = function () {
        return new RulerTableColumnViewState(this.leftMargin, this.rightMarginOfPrevColumn, this.position);
    };
    return RulerTableColumnViewState;
}());
exports.RulerTableColumnViewState = RulerTableColumnViewState;
var RulerTablesControl = (function (_super) {
    tslib_1.__extends(RulerTablesControl, _super);
    function RulerTablesControl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerTablesControl.prototype.getModelState = function () {
        var state = this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerTableColumnSeparators).getState();
        return state.enabled ?
            new RulerTableModelState(state.value, state.value.tableIndex, state.enabled) :
            new RulerTableModelState(new ruler_table_column_separators_command_1.TableColumnSeparatorStruct(), -1, false);
    };
    RulerTablesControl.prototype.updateView = function () {
        var offset = this.controls.leftMargin.currModelState.modelValue + this.controls.columns.currModelState.activeColumn.leftPos;
        var rightMarginOfPrevColumn = 0;
        var cellSpacing = this.currModelState.columnSeparators.cellSpacing;
        this.viewState = list_1.ListUtils.map(this.currModelState.columnSeparators.items, function (item) {
            var viewState = new RulerTableColumnViewState(item.leftMargin + cellSpacing, rightMarginOfPrevColumn + cellSpacing, item.position + offset);
            rightMarginOfPrevColumn = item.rightMargin;
            return viewState;
        });
        this.setCount(this.viewState.length);
        list_1.ListUtils.forEach2(this.subControls, this.viewState, function (control, modelState) { return control.setValue(modelState); });
    };
    RulerTablesControl.prototype.createSubControl = function () {
        return new RulerTableColumnState(this.modelData, this.controls);
    };
    RulerTablesControl.prototype.onMouseDown = function (source, _evt) {
        var _this = this;
        if (!this.currModelState.enabled)
            return false;
        return list_1.ListUtils.unsafeAnyOf(this.subControls, function (subControl, index) {
            if (subControl.canHandle(source)) {
                _this.handleControlIndex = index;
                _this.controls.lineControl.show(vertical_line_1.RulerLineDisplayType.TableColumn);
                _this.activeSubControl.lineControlSetPosition();
                _this.activeSubControl.showShadow();
                return true;
            }
            return false;
        });
    };
    RulerTablesControl.prototype.onMouseUp = function () {
        var oldPos = this.prevModelState.columnSeparators.items[this.handleControlIndex].position;
        var newPos = this.currModelState.columnSeparators.items[this.handleControlIndex].position;
        var param = new ruler_table_commands_1.RulerChangeTableColumnWidthCommandParameters(this.currModelState.tableIndex, newPos - oldPos, null, oldPos, true);
        this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerChangeTableColumnWidth)
            .execute(this.modelData.commandManager.isPublicApiCall, param);
        this.finishHandle();
    };
    RulerTablesControl.prototype.calculateNewModelState = function (distance) {
        var leftOffset = this.controls.leftMargin.currModelState.modelValue + this.controls.columns.currModelState.activeColumn.leftPos;
        var prevItems = this.prevModelState.columnSeparators.items;
        var minVal = leftOffset + (this.handleControlIndex == 0 ? 0 : prevItems[this.handleControlIndex - 1].position + TABLE_COLUMN_SEPARATOR_MARGIN);
        var maxVal = leftOffset + (this.handleControlIndex == prevItems.length - 1 ?
            this.controls.columns.currModelState.activeColumn.width :
            prevItems[this.handleControlIndex + 1].position - TABLE_COLUMN_SEPARATOR_MARGIN);
        var oldPos = leftOffset + prevItems[this.handleControlIndex].position;
        var newPos = this.controls.chooseClosestAnchorPosition(oldPos + distance, [oldPos], new min_max_1.MinMaxNumber(minVal, maxVal));
        this.currModelState.columnSeparators.items[this.handleControlIndex].position =
            this.prevModelState.columnSeparators.items[this.handleControlIndex].position + newPos - oldPos;
    };
    return RulerTablesControl;
}(owner_1.RulerMultiControl));
exports.RulerTablesControl = RulerTablesControl;
var RulerTableColumnState = (function () {
    function RulerTableColumnState(modelData, controls) {
        this.controls = controls;
        this.rootElement = document_renderer_1.DocumentRenderer.renderContainer(TABLE_COLUMN_SEPARATOR_HANDLE_CLASS_NAME);
        this.separatorElement = document_renderer_1.DocumentRenderer.renderContainer(modelData.settings.styles.columnSeparatorImage.spriteCssClass);
        this.rootElement.appendChild(this.separatorElement);
        controls.ruler.rootElement.appendChild(this.rootElement);
        this.corectionValue = Math.floor(this.separatorElement.offsetWidth / 2);
    }
    RulerTableColumnState.prototype.dispose = function () {
        dom_1.DomUtils.hideNode(this.rootElement);
        this.rootElement = null;
        this.separatorElement = null;
    };
    RulerTableColumnState.prototype.showShadow = function () { };
    RulerTableColumnState.prototype.hideShadow = function () { };
    RulerTableColumnState.prototype.lineControlSetPosition = function () {
        this.controls.lineControl.setPosition(this.viewState.position, vertical_line_1.SnapTo.LeftSide);
    };
    RulerTableColumnState.prototype.canHandle = function (source) {
        return source == this.separatorElement;
    };
    RulerTableColumnState.prototype.setValue = function (viewState) {
        if (!this.viewState || !viewState.equals(this.viewState)) {
            this.viewState = viewState.clone();
            this.rootElement.style.width = viewState.leftMargin + viewState.rightMarginOfPrevColumn + "px";
            this.rootElement.style.left = viewState.position - viewState.rightMarginOfPrevColumn + settings_1.RULLER_NUMBER_CORRECTION + "px";
            this.separatorElement.style.left = viewState.rightMarginOfPrevColumn - this.corectionValue + "px";
        }
    };
    return RulerTableColumnState;
}());
