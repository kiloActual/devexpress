"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_1 = require("@devexpress/utils/lib/browser");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var touch_1 = require("@devexpress/utils/lib/utils/touch");
var document_renderer_1 = require("../../../canvas/renderes/common/document-renderer");
var settings_1 = require("../settings");
var base_1 = require("./base");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var RulerControl = (function (_super) {
    tslib_1.__extends(RulerControl, _super);
    function RulerControl(modelData, controls) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.canHandleScroll = false;
        _this.initialMarginLeftElement = 0;
        _this.currPageWidth = 0;
        _this.prevPageWidth = 0;
        _this.rootElement = document_renderer_1.DocumentRenderer.renderContainer(_this.modelData.settings.styles.control.className);
        if (browser_1.Browser.MSTouchUI)
            dom_1.DomUtils.addClassName(_this.rootElement, touch_1.TouchUtils.msTouchDraggableClassName);
        _this.controls.wrapper.rootElement.appendChild(_this.rootElement);
        return _this;
    }
    RulerControl.prototype.getRootClassName = function () { return this.modelData.settings.styles.control.className; };
    ;
    Object.defineProperty(RulerControl.prototype, "pageWidth", {
        get: function () { return this.currPageWidth; },
        enumerable: true,
        configurable: true
    });
    ;
    RulerControl.prototype.init = function () {
        this.rootElement.style.visibility = "visible";
        this.rootElement.style.height = this.controls.divisions.height + "px";
        this.setPaddings();
    };
    RulerControl.prototype.setPaddings = function () {
        this.rootElement.style.paddingBottom = this.controls.leftIndent.heightOfProtrudingPart + "px";
        this.rootElement.style.paddingTop = this.controls.firstLineIndent.heightOfProtrudingPart + "px";
    };
    RulerControl.prototype.updateModelState = function () {
        this.currPageWidth = unit_converter_1.UnitConverter.twipsToPixelsF(this.modelData.inputPosition.getMergedSectionPropertiesRaw().pageSize.width);
    };
    RulerControl.prototype.updateView = function () {
        if (this.prevPageWidth != this.currPageWidth) {
            this.prevPageWidth = this.currPageWidth;
            this.rootElement.style.width = this.pageWidth + settings_1.RULLER_NUMBER_CORRECTION * 2 + "px";
            this.adjust();
        }
    };
    RulerControl.prototype.adjust = function () {
        var viewWidth = this.controls.canvas.clientWidth;
        if (viewWidth > this.controls.ruler.pageWidth)
            this.initialMarginLeftElement = (viewWidth - this.pageWidth - settings_1.RULLER_NUMBER_CORRECTION * 2) / 2;
        else {
            var paddingLeft = dom_1.DomUtils.pxToInt(dom_1.DomUtils.getCurrentStyle(this.controls.canvas).paddingLeft);
            var pageAreaBorderWidth = (this.controls.canvas.scrollWidth - paddingLeft - this.pageWidth) / 2;
            this.initialMarginLeftElement = paddingLeft + pageAreaBorderWidth - settings_1.RULLER_NUMBER_CORRECTION;
        }
        this.rootElement.style.left = Math.round(this.initialMarginLeftElement) + "px";
        this.setPaddings();
        this.canHandleScroll = this.controls.canvas.scrollWidth > this.controls.canvas.offsetWidth;
    };
    RulerControl.prototype.onScroll = function () {
        if (this.canHandleScroll)
            this.rootElement.style.left = this.initialMarginLeftElement - this.controls.canvas.scrollLeft + "px";
    };
    return RulerControl;
}(base_1.RulerBase));
exports.RulerControl = RulerControl;
