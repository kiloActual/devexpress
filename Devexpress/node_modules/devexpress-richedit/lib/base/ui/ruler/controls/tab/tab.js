"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var layout_tab_space_box_1 = require("../../../../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var paragraph_1 = require("../../../../../core/model/paragraph/paragraph");
var paragraph_style_1 = require("../../../../../core/model/paragraph/paragraph-style");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var document_renderer_1 = require("../../../../canvas/renderes/common/document-renderer");
var client_command_1 = require("../../../../commands/client-command");
var settings_1 = require("../../settings");
var owner_1 = require("../owner");
var shadow_1 = require("../shadow");
var vertical_line_1 = require("../vertical-line");
var utils_1 = require("./utils");
var RULLER_TABMARK_Y_POSITION = 6;
var TabAction;
(function (TabAction) {
    TabAction[TabAction["None"] = 0] = "None";
    TabAction[TabAction["Insert"] = 1] = "Insert";
    TabAction[TabAction["Delete"] = 2] = "Delete";
    TabAction[TabAction["Move"] = 3] = "Move";
})(TabAction || (TabAction = {}));
var RulerTabsControlState = (function () {
    function RulerTabsControlState(tabs, enabled) {
        this.tabs = tabs;
        this.enabled = enabled;
    }
    RulerTabsControlState.prototype.clone = function () {
        return new RulerTabsControlState(list_1.ListUtils.deepCopy(this.tabs), this.enabled);
    };
    return RulerTabsControlState;
}());
exports.RulerTabsControlState = RulerTabsControlState;
var RulerTabViewState = (function () {
    function RulerTabViewState(position, align) {
        this.position = position;
        this.align = align;
    }
    RulerTabViewState.prototype.equals = function (obj) {
        return this.position == obj.position && this.align == obj.align;
    };
    RulerTabViewState.prototype.clone = function () {
        return new RulerTabViewState(this.position, this.align);
    };
    return RulerTabViewState;
}());
exports.RulerTabViewState = RulerTabViewState;
var RulerTabsControl = (function (_super) {
    tslib_1.__extends(RulerTabsControl, _super);
    function RulerTabsControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tabAction = TabAction.None;
        _this.newTab = null;
        _this.deleteTab = false;
        return _this;
    }
    RulerTabsControl.prototype.getModelState = function () {
        this.modelData.settings.showTabs = this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertTabRuler).getState().enabled;
        if (this.modelData.settings.showTabs) {
            var paragraph = this.modelData.selection.activeSubDocument.getParagraphByPosition(this.modelData.selection.intervalsInfo.interval.start);
            var tabs = list_1.ListUtils.map(paragraph.getTabs().positions, function (tab) {
                var newTab = tab.clone();
                newTab.position = unit_converter_1.UnitConverter.twipsToPixelsF(tab.position);
                return newTab;
            });
            return new RulerTabsControlState(tabs, true);
        }
        else
            return new RulerTabsControlState([], false);
    };
    RulerTabsControl.prototype.updateView = function () {
        var offset = this.controls.paragraphLeftPosition;
        this.viewState = list_1.ListUtils.map(this.currModelState.tabs, function (tab) { return new RulerTabViewState(offset + tab.position, tab.alignment); });
        this.setCount(this.viewState.length);
        list_1.ListUtils.forEach2(this.subControls, this.viewState, function (control, viewState) { return control.setValue(viewState); });
    };
    RulerTabsControl.prototype.createSubControl = function () {
        return new RulerTabControl(this.modelData, this.controls);
    };
    RulerTabsControl.prototype.isTabMarkZone = function (evt) {
        return evt_1.EvtUtils.getEventY(evt) - dom_1.DomUtils.getAbsolutePositionY(this.controls.ruler.rootElement) >= RULLER_TABMARK_Y_POSITION;
    };
    RulerTabsControl.prototype.onMouseDown = function (source, evt) {
        if (!this.currModelState.enabled || this.modelData.isReadOnly)
            return false;
        var exactHit = this.calculateExactHit(source);
        if (exactHit)
            return true;
        if (this.tryInsertNewTab(evt))
            return true;
        return false;
    };
    RulerTabsControl.prototype.calculateExactHit = function (source) {
        var _this = this;
        var exactHit = list_1.ListUtils.unsafeAnyOf(this.subControls, function (subControl, index) {
            if (subControl.canHandle(source)) {
                _this.handleControlIndex = index;
                _this.updatePresentation();
                return true;
            }
            return false;
        });
        return exactHit;
    };
    RulerTabsControl.prototype.updatePresentation = function () {
        this.controls.lineControl.show(vertical_line_1.RulerLineDisplayType.Normal);
        this.activeSubControl.lineControlSetPosition();
    };
    RulerTabsControl.prototype.tryInsertNewTab = function (evt) {
        var pos = evt_1.EvtUtils.getEventX(evt) - dom_1.DomUtils.getAbsolutePositionX(this.controls.ruler.rootElement) - settings_1.RULLER_NUMBER_CORRECTION
            - this.controls.paragraphLeftPosition;
        if (this.isTabMarkZone(evt) && pos >= this.minPosition() && pos <= this.maxPosition()) {
            this.tabAction = TabAction.Insert;
            this.handleControlIndex = this.currModelState.tabs.length;
            var tabPosition = this.controls.chooseClosestAnchorPosition(pos, [], new min_max_1.MinMaxNumber(this.minPosition(), this.maxPosition()));
            this.newTab = new paragraph_style_1.TabInfo(tabPosition, this.controls.tabTypeBox.align, layout_tab_space_box_1.TabLeaderType.None, false, false);
            this.currModelState.tabs.push(this.newTab.clone());
            this.updateView();
            this.updatePresentation();
            return true;
        }
        return false;
    };
    RulerTabsControl.prototype.onMouseMove = function (distance, source) {
        var deleteTab = !dom_1.DomUtils.isItParent(this.controls.ruler.rootElement, source);
        if (deleteTab != this.deleteTab) {
            this.deleteTab = deleteTab;
            this.activeSubControl.setVisible(!this.deleteTab);
        }
        _super.prototype.onMouseMove.call(this, distance, source);
        if (this.tabAction == TabAction.None) {
            this.tabAction = TabAction.Move;
            this.activeSubControl.showShadow();
        }
    };
    RulerTabsControl.prototype.onMouseUp = function () {
        this.activeSubControl.setVisible(!this.deleteTab);
        switch (this.tabAction) {
            case TabAction.Insert: {
                if (this.deleteTab) {
                    this.currModelState = this.prevModelState.clone();
                    this.updateView();
                }
                else {
                    var tab = this.currModelState.tabs[this.handleControlIndex];
                    this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertTabRuler)
                        .execute(this.modelData.commandManager.isPublicApiCall, { position: tab.position, align: tab.alignment });
                }
                break;
            }
            case TabAction.Move: {
                if (this.deleteTab) {
                    this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteTabRuler)
                        .execute(this.modelData.commandManager.isPublicApiCall, this.prevModelState.tabs[this.handleControlIndex].position);
                }
                else {
                    this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.MoveTabRuler)
                        .execute(this.modelData.commandManager.isPublicApiCall, {
                        start: this.prevModelState.tabs[this.handleControlIndex].position,
                        end: this.currModelState.tabs[this.handleControlIndex].position
                    });
                }
                break;
            }
        }
        this.finishHandle();
    };
    RulerTabsControl.prototype.finishHandle = function () {
        _super.prototype.finishHandle.call(this);
        this.tabAction = TabAction.None;
        this.newTab = null;
        this.deleteTab = false;
        this.subControls.forEach(function (control) { return control.setVisible(true); });
    };
    RulerTabsControl.prototype.minPosition = function () {
        return Math.min(this.controls.leftIndent.currModelState.modelValue, this.controls.firstLineIndent.currModelState.modelValue);
    };
    RulerTabsControl.prototype.maxPosition = function () {
        return this.controls.paragraphRightPosition - this.controls.rightIndent.currModelState.modelValue - this.controls.paragraphLeftPosition;
    };
    RulerTabsControl.prototype.calculateNewModelState = function (distance) {
        switch (this.tabAction) {
            case TabAction.Insert: {
                var startPos = this.newTab.position;
                var currTab = this.currModelState.tabs[this.handleControlIndex];
                currTab.position = this.controls.chooseClosestAnchorPosition(startPos + distance, [startPos], new min_max_1.MinMaxNumber(this.minPosition(), this.maxPosition()));
                break;
            }
            case TabAction.Move: {
                var startPos = this.prevModelState.tabs[this.handleControlIndex].position;
                var currTab = this.currModelState.tabs[this.handleControlIndex];
                currTab.position = this.controls.chooseClosestAnchorPosition(startPos + distance, [startPos], new min_max_1.MinMaxNumber(this.minPosition(), this.maxPosition()));
                break;
            }
        }
    };
    return RulerTabsControl;
}(owner_1.RulerMultiControl));
exports.RulerTabsControl = RulerTabsControl;
var RulerTabControl = (function () {
    function RulerTabControl(modelData, controls) {
        this.viewState = new RulerTabViewState(0, -1);
        this.shadow = null;
        this.controls = controls;
        this.modelData = modelData;
        this.rootElement = document_renderer_1.DocumentRenderer.renderContainer(modelData.settings.styles.tab.className + " " + utils_1.RulerTabUtils.getSpriteClassName(this.viewState.align, modelData.settings));
        controls.ruler.rootElement.appendChild(this.rootElement);
        this.rootElement.style.marginTop = (controls.divisions.height - this.rootElement.offsetHeight) + "px";
        this.setCorrection();
    }
    RulerTabControl.prototype.dispose = function () {
        this.hideShadow();
        dom_1.DomUtils.hideNode(this.rootElement);
        this.rootElement = null;
    };
    RulerTabControl.prototype.setVisible = function (visible) {
        this.rootElement.style.display = visible ? 'block' : 'none';
    };
    RulerTabControl.prototype.canHandle = function (source) { return source == this.rootElement && this.modelData.settings.showTabs; };
    RulerTabControl.prototype.showShadow = function () {
        this.shadow = new shadow_1.RulerShadow(this.rootElement);
    };
    RulerTabControl.prototype.hideShadow = function () {
        if (this.shadow) {
            this.shadow.dispose();
            this.shadow = null;
        }
    };
    RulerTabControl.prototype.lineControlSetPosition = function () {
        this.controls.lineControl.setPosition(this.viewState.position, vertical_line_1.SnapTo.LeftSide);
    };
    RulerTabControl.prototype.setValue = function (viewState) {
        if (!this.viewState || !viewState.equals(this.viewState)) {
            this.viewState = viewState.clone();
            this.changeAlign();
            this.rootElement.style.left = viewState.position - this.leftCorrection + settings_1.RULLER_NUMBER_CORRECTION + "px";
        }
    };
    RulerTabControl.prototype.setCorrection = function () {
        switch (this.viewState.align) {
            case paragraph_1.TabAlign.Left:
                this.leftCorrection = 0;
                break;
            case paragraph_1.TabAlign.Right:
                this.leftCorrection = this.rootElement.offsetWidth;
                break;
            case paragraph_1.TabAlign.Center:
            case paragraph_1.TabAlign.Decimal:
                this.leftCorrection = Math.round(this.rootElement.offsetWidth / 2);
                break;
        }
    };
    RulerTabControl.prototype.changeAlign = function () {
        this.rootElement.className = this.modelData.settings.styles.tab.className + " " +
            utils_1.RulerTabUtils.getSpriteClassName(this.viewState.align, this.modelData.settings);
        this.rootElement.title = this.modelData.settings.titles[utils_1.RulerTabUtils.getTabTitlePropertyName(this.viewState.align)];
        this.setCorrection();
    };
    return RulerTabControl;
}());
