"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RulerMultiControl = (function () {
    function RulerMultiControl(modelData, controls) {
        this.subControls = [];
        this.handleControlIndex = -1;
        this.viewState = [];
        this.modelData = modelData;
        this.controls = controls;
    }
    Object.defineProperty(RulerMultiControl.prototype, "activeSubControl", {
        get: function () { return this.subControls[this.handleControlIndex]; },
        enumerable: true,
        configurable: true
    });
    RulerMultiControl.prototype.dispose = function () {
        for (var _i = 0, _a = this.subControls; _i < _a.length; _i++) {
            var elem = _a[_i];
            elem.dispose();
        }
        this.subControls = [];
    };
    RulerMultiControl.prototype.update = function () {
        this.updateModelState();
        this.updateView();
    };
    RulerMultiControl.prototype.updateModelState = function () {
        this.currModelState = this.getModelState();
        this.prevModelState = this.currModelState.clone();
    };
    RulerMultiControl.prototype.onMouseMove = function (distance, _source) {
        this.calculateNewModelState(distance);
        this.updateView();
        this.activeSubControl.lineControlSetPosition();
    };
    RulerMultiControl.prototype.onEscPress = function () {
        this.currModelState = this.prevModelState.clone();
        this.finishHandle();
    };
    RulerMultiControl.prototype.finishHandle = function () {
        this.controls.lineControl.hide();
        var activeSubControl = this.activeSubControl;
        if (activeSubControl)
            activeSubControl.hideShadow();
    };
    RulerMultiControl.prototype.setCount = function (count) {
        var diff = this.subControls.length - count;
        if (diff > 0)
            while (diff--)
                this.subControls.pop().dispose();
        else {
            diff = Math.abs(diff);
            while (diff--)
                this.subControls.push(this.createSubControl());
        }
    };
    return RulerMultiControl;
}());
exports.RulerMultiControl = RulerMultiControl;
