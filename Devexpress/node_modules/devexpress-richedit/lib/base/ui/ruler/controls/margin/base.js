"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_1 = require("../base");
var vertical_line_1 = require("../vertical-line");
exports.RulerMinDistanceBetweenMargins = 50;
var RulerBaseMarginControl = (function (_super) {
    tslib_1.__extends(RulerBaseMarginControl, _super);
    function RulerBaseMarginControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.viewState = 0;
        return _this;
    }
    RulerBaseMarginControl.prototype.updateModelState = function () {
        this.currModelState = this.getModelState();
        this.prevModelState = this.currModelState.clone();
    };
    RulerBaseMarginControl.prototype.updateView = function () {
        var newViewState = this.getViewState();
        if (newViewState != this.viewState) {
            this.viewState = newViewState;
            for (var _i = 0, _a = [this.marginPanelElement, this.handlePanelElement]; _i < _a.length; _i++) {
                var element = _a[_i];
                this.setViewStateToElement(element);
            }
        }
    };
    RulerBaseMarginControl.prototype.canHandle = function (source) {
        return source == this.handlePanelElement && !this.controls.tables.currModelState.columnSeparators.hasItems &&
            (this.modelData.selection.activeSubDocument.isMain() || this.modelData.selection.activeSubDocument.isHeaderFooter());
    };
    RulerBaseMarginControl.prototype.onMouseDown = function (source, _evt) {
        if (!this.canHandle(source) || !this.currModelState.enabled)
            return false;
        this.controls.lineControl.show(vertical_line_1.RulerLineDisplayType.Normal);
        this.lineControlSetPosition();
        return true;
    };
    RulerBaseMarginControl.prototype.onMouseMove = function (distance, _source) {
        this.calculateNewModelState(distance);
        this.controls.columns.marginsChanged(this.currModelState.modelValue - this.prevModelState.modelValue);
        this.updateView();
        this.lineControlSetPosition();
    };
    RulerBaseMarginControl.prototype.onMouseUp = function () {
        this.modelData.commandManager.getCommand(this.commandType).execute(this.modelData.commandManager.isPublicApiCall, this.currModelState.modelValue);
        this.finishHandle();
    };
    RulerBaseMarginControl.prototype.onEscPress = function () {
        this.currModelState = this.prevModelState.clone();
        this.finishHandle();
    };
    RulerBaseMarginControl.prototype.getModelState = function () {
        var state = this.modelData.commandManager.getCommand(this.commandType).getState();
        return new base_1.RulerModelState(state.value, state.enabled);
    };
    RulerBaseMarginControl.prototype.finishHandle = function () {
        this.controls.lineControl.hide();
    };
    return RulerBaseMarginControl;
}(base_1.RulerBase));
exports.RulerBaseMarginControl = RulerBaseMarginControl;
