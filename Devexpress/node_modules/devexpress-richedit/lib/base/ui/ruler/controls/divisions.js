"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("../../../../base-utils/unit-converter");
var browser_1 = require("@devexpress/utils/lib/browser");
var unit_converter_2 = require("@devexpress/utils/lib/class/unit-converter");
var document_renderer_1 = require("../../../canvas/renderes/common/document-renderer");
var settings_1 = require("../settings");
var base_1 = require("./base");
exports.MINOR_TOP_AND_BOTTOM_MARGIN = 4;
exports.MAJOR_TOP_AND_BOTTOM_MARGIN = 2;
exports.DIVISION_CONTAINER_CLASS_NAME = settings_1.RULER_CLASS_NAME + "Divisions";
exports.DIVISION_CLASS_NAME = "Division";
exports.DIVISION_MINOR_CLASS_NAME = settings_1.RULER_CLASS_NAME + "Minor" + exports.DIVISION_CLASS_NAME;
exports.DIVISION_MAJOR_CLASS_NAME = settings_1.RULER_CLASS_NAME + "Major" + exports.DIVISION_CLASS_NAME;
exports.DIVISION_NUMBER_CLASS_NAME = settings_1.RULER_CLASS_NAME + "Number" + exports.DIVISION_CLASS_NAME;
var RulerDivisionsControl = (function (_super) {
    tslib_1.__extends(RulerDivisionsControl, _super);
    function RulerDivisionsControl(modelData, controls, divisionInfo, maxPageWidth) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.height = 0;
        var unitCount = Math.ceil(maxPageWidth / divisionInfo.unitSize);
        _this.rootElement.style.width = divisionInfo.unitSize * (unitCount * 2 + 1) + "px";
        _this.controls.ruler.rootElement.appendChild(_this.rootElement);
        if (browser_1.Browser.IE && browser_1.Browser.MajorVersion <= 9)
            _this.rootElement.offsetParent;
        _this.height = _this.rootElement.offsetHeight;
        createDivisionElements(_this.rootElement, unitCount, divisionInfo, _this.height);
        _this.initialLeft = -(unitCount * divisionInfo.unitSize - settings_1.RULLER_NUMBER_CORRECTION);
        return _this;
    }
    RulerDivisionsControl.prototype.getRootClassName = function () { return exports.DIVISION_CONTAINER_CLASS_NAME; };
    RulerDivisionsControl.prototype.update = function () {
        this.updateModelState();
        this.updateView();
    };
    RulerDivisionsControl.prototype.updateModelState = function () { };
    RulerDivisionsControl.prototype.updateView = function () {
        var newViewState = this.getViewValue();
        if (newViewState != this.viewState) {
            this.viewState = newViewState;
            this.rootElement.style.left = this.viewState + this.initialLeft + "px";
        }
    };
    RulerDivisionsControl.prototype.getViewValue = function () {
        var seps = this.controls.tables.currModelState.columnSeparators;
        if (!seps.hasItems)
            return this.controls.paragraphLeftPosition;
        var item = this.controls.tables.currModelState.columnSeparators.items[0];
        return this.controls.leftMargin.currModelState.modelValue + this.controls.columns.currModelState.activeColumn.leftPos +
            this.controls.tables.currModelState.columnSeparators.cellSpacing + item.leftMargin + item.position;
    };
    return RulerDivisionsControl;
}(base_1.RulerBase));
exports.RulerDivisionsControl = RulerDivisionsControl;
function createDivisionElements(rootElement, unitCount, divisionInfo, height) {
    var divisionLeftPosition = 0;
    var createSimpleDivision = function (className, topAndBottomMargin) {
        var stepSize = divisionInfo.stepSize;
        var element = document_renderer_1.DocumentRenderer.renderContainer("");
        element.style.left = divisionLeftPosition + "px";
        element.style.width = stepSize + "px";
        element.style.height = height - topAndBottomMargin * 2 + "px";
        element.style.marginTop = topAndBottomMargin + "px";
        element.style.marginBottom = topAndBottomMargin + "px";
        element.className = className;
        divisionLeftPosition += stepSize;
        return element;
    };
    var createNumberDivision = function (className, numb) {
        var element = createSimpleDivision(className, null);
        if (numb != 0) {
            var numberElement = document_renderer_1.DocumentRenderer.renderContainer("");
            numberElement.innerHTML = numb.toString();
            element.appendChild(numberElement);
        }
        return element;
    };
    var createDivision = function (numb) {
        var fragment = document.createDocumentFragment();
        for (var _i = 0, _a = divisionInfo.unitMap; _i < _a.length; _i++) {
            var type = _a[_i];
            switch (type) {
                case DivisionType.Number:
                    fragment.appendChild(createNumberDivision(exports.DIVISION_NUMBER_CLASS_NAME, numb));
                    break;
                case DivisionType.Major:
                    fragment.appendChild(createSimpleDivision(exports.DIVISION_MAJOR_CLASS_NAME, exports.MAJOR_TOP_AND_BOTTOM_MARGIN));
                    break;
                case DivisionType.Minor:
                    fragment.appendChild(createSimpleDivision(exports.DIVISION_MINOR_CLASS_NAME, exports.MINOR_TOP_AND_BOTTOM_MARGIN));
                    break;
            }
        }
        return fragment;
    };
    for (var i = unitCount; i > 0; i--)
        rootElement.appendChild(createDivision(i));
    for (var j = 0; j <= unitCount; j++)
        rootElement.appendChild(createDivision(j));
}
var DivisionType;
(function (DivisionType) {
    DivisionType[DivisionType["Number"] = 0] = "Number";
    DivisionType[DivisionType["Minor"] = 1] = "Minor";
    DivisionType[DivisionType["Major"] = 2] = "Major";
})(DivisionType = exports.DivisionType || (exports.DivisionType = {}));
var DivisionInfo = (function () {
    function DivisionInfo(map, unitSize) {
        this.unitMap = map;
        this.unitSize = unitSize;
        this.stepSize = this.unitSize / this.unitMap.length;
    }
    DivisionInfo.create = function (unitType) {
        return unitType == unit_converter_1.RichEditUnit.Inch ?
            new DivisionInfo([DivisionType.Number, DivisionType.Minor, DivisionType.Minor, DivisionType.Minor,
                DivisionType.Major, DivisionType.Minor, DivisionType.Minor, DivisionType.Minor], unit_converter_2.UnitConverter.inchesToPixels(1)) :
            new DivisionInfo([DivisionType.Number, DivisionType.Minor, DivisionType.Major, DivisionType.Minor], unit_converter_2.UnitConverter.centimeterToPixelF(1));
    };
    return DivisionInfo;
}());
exports.DivisionInfo = DivisionInfo;
