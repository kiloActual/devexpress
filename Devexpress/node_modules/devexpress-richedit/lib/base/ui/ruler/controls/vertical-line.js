"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var document_renderer_1 = require("../../../canvas/renderes/common/document-renderer");
var settings_1 = require("../settings");
exports.TABLE_COLUMN_SEPARATOR_RULER_LINE_CLASS_NAME = " table";
var SnapTo;
(function (SnapTo) {
    SnapTo[SnapTo["LeftSide"] = 0] = "LeftSide";
    SnapTo[SnapTo["RightSide"] = 1] = "RightSide";
})(SnapTo = exports.SnapTo || (exports.SnapTo = {}));
var RulerLineDisplayType;
(function (RulerLineDisplayType) {
    RulerLineDisplayType[RulerLineDisplayType["Normal"] = 0] = "Normal";
    RulerLineDisplayType[RulerLineDisplayType["TableColumn"] = 1] = "TableColumn";
})(RulerLineDisplayType = exports.RulerLineDisplayType || (exports.RulerLineDisplayType = {}));
var RulerVerticalLineControl = (function () {
    function RulerVerticalLineControl(canvas, settings, rulerControlElement) {
        this.borderWidth = 0;
        this.rulerControlLeft = 0;
        this.rulerControlWidth = 0;
        this.viewElementLeft = 0;
        this.canvas = canvas;
        this.rulerControlElement = rulerControlElement;
        this.rootElement = document_renderer_1.DocumentRenderer.renderContainer(settings.styles.line.className);
        this.rootElement.style.display = "block";
        this.borderWidth = dom_1.DomUtils.getHorizontalBordersWidth(this.rootElement);
    }
    RulerVerticalLineControl.prototype.dispose = function () {
        dom_1.DomUtils.hideNode(this.rootElement);
        this.rootElement = null;
    };
    RulerVerticalLineControl.prototype.show = function (type) {
        if (type == RulerLineDisplayType.TableColumn)
            dom_1.DomUtils.addClassName(this.rootElement, exports.TABLE_COLUMN_SEPARATOR_RULER_LINE_CLASS_NAME);
        else
            dom_1.DomUtils.removeClassName(this.rootElement, exports.TABLE_COLUMN_SEPARATOR_RULER_LINE_CLASS_NAME);
        this.rootElement.style.height = this.canvas.clientHeight + "px";
        this.rootElement.style.top = this.canvas.offsetTop + "px";
        this.rulerControlLeft = this.rulerControlElement.offsetLeft;
        this.rulerControlWidth = this.rulerControlElement.offsetWidth;
        this.viewElementLeft = this.canvas.offsetLeft;
        this.canvas.parentElement.insertBefore(this.rootElement, this.canvas);
    };
    RulerVerticalLineControl.prototype.hide = function () {
        dom_1.DomUtils.hideNode(this.rootElement);
    };
    RulerVerticalLineControl.prototype.setPosition = function (value, snapTo) {
        if (snapTo == SnapTo.RightSide)
            value = this.rulerControlLeft + this.rulerControlWidth - settings_1.RULLER_NUMBER_CORRECTION - value;
        else if (snapTo == SnapTo.LeftSide)
            value = this.rulerControlLeft + settings_1.RULLER_NUMBER_CORRECTION + value - this.borderWidth;
        this.rootElement.style.left = this.viewElementLeft + value + "px";
    };
    return RulerVerticalLineControl;
}());
exports.RulerVerticalLineControl = RulerVerticalLineControl;
