"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var paragraph_1 = require("../../../../../core/model/paragraph/paragraph");
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var touch_1 = require("@devexpress/utils/lib/utils/touch");
var document_renderer_1 = require("../../../../canvas/renderes/common/document-renderer");
var settings_1 = require("../../settings");
var base_1 = require("../base");
var utils_1 = require("./utils");
var TAB_ALIGN_BOX_PART_HANDLE_CLASS_NAME = settings_1.RICH_EDIT_CLASS_NAME_PREFIX + "rulertabAlignBox";
var RulerTabTypeControl = (function (_super) {
    tslib_1.__extends(RulerTabTypeControl, _super);
    function RulerTabTypeControl(modelData, controls) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
        _this.align = paragraph_1.TabAlign.Left;
        _this.innerSquareElement = document_renderer_1.DocumentRenderer.renderContainer("");
        _this.alignElement = document_renderer_1.DocumentRenderer.renderContainer(utils_1.RulerTabUtils.getSpriteClassName(_this.align, _this.modelData.settings));
        _this.innerSquareElement.appendChild(_this.alignElement);
        _this.rootElement.appendChild(_this.innerSquareElement);
        _this.controls.wrapper.rootElement.appendChild(_this.rootElement);
        _this.evtHandlersHolder.addListener(_this.innerSquareElement, touch_1.TouchUtils.touchMouseDownEventName, _this.onMouseDown.bind(_this));
        return _this;
    }
    RulerTabTypeControl.prototype.getRootClassName = function () { return TAB_ALIGN_BOX_PART_HANDLE_CLASS_NAME; };
    ;
    RulerTabTypeControl.prototype.init = function () {
        this.adjust();
    };
    RulerTabTypeControl.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.innerSquareElement = null;
        this.alignElement = null;
        this.evtHandlersHolder.removeAllListeners();
    };
    RulerTabTypeControl.prototype.adjust = function () {
        var divisionOffsetTop = this.controls.divisions.rootElement.offsetTop + this.controls.ruler.rootElement.offsetTop;
        var size = this.controls.divisions.height;
        this.innerSquareElement.style.width = size + "px";
        this.innerSquareElement.style.height = size + "px";
        this.innerSquareElement.style.top = divisionOffsetTop + "px";
        this.innerSquareElement.style.left = divisionOffsetTop + "px";
        this.rootElement.style.width = size + 2 * divisionOffsetTop + "px";
        this.rootElement.style.height = size + 2 * divisionOffsetTop + "px";
        this.adjustAlignElement();
    };
    RulerTabTypeControl.prototype.adjustAlignElement = function () {
        var size = this.innerSquareElement.offsetWidth;
        this.alignElement.style.top = (size - this.alignElement.offsetHeight) / 2 + "px";
        this.alignElement.style.left = (size - this.alignElement.offsetWidth) / 2 + "px";
        this.alignElement.title = this.modelData.settings.titles[utils_1.RulerTabUtils.getTabTitlePropertyName(this.align)];
    };
    RulerTabTypeControl.prototype.onMouseDown = function (evt) {
        if (!this.modelData.isReadOnly) {
            this.align++;
            if (this.align > paragraph_1.TabAlign.Decimal)
                this.align = paragraph_1.TabAlign.Left;
            this.alignElement.className = utils_1.RulerTabUtils.getSpriteClassName(this.align, this.modelData.settings);
            this.adjustAlignElement();
            evt_1.EvtUtils.preventEvent(evt);
        }
    };
    return RulerTabTypeControl;
}(base_1.RulerBase));
exports.RulerTabTypeControl = RulerTabTypeControl;
