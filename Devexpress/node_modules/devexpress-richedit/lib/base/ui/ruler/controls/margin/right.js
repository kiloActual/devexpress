"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var list_1 = require("@devexpress/utils/lib/utils/list");
var document_renderer_1 = require("../../../../canvas/renderes/common/document-renderer");
var client_command_1 = require("../../../../commands/client-command");
var settings_1 = require("../../settings");
var vertical_line_1 = require("../vertical-line");
var base_1 = require("./base");
var left_1 = require("./left");
var DIVISION_MARGIN_RIGHT_CLASS_NAME = settings_1.RULER_CLASS_NAME + "MarginRightPanel";
var DIVISION_MARGIN_RIGHT_CURSOR_CLASS_NAME = settings_1.RULER_CLASS_NAME + "MarginRightHandlePanel";
var RulerRightMarginDragHandle = (function (_super) {
    tslib_1.__extends(RulerRightMarginDragHandle, _super);
    function RulerRightMarginDragHandle(modelData, controls, maxPageWidth) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.marginPanelElement = document_renderer_1.DocumentRenderer.renderContainer(DIVISION_MARGIN_RIGHT_CLASS_NAME);
        _this.handlePanelElement = document_renderer_1.DocumentRenderer.renderContainer(DIVISION_MARGIN_RIGHT_CURSOR_CLASS_NAME);
        _this.marginPanelElement.style.width = maxPageWidth + "px";
        _this.handlePanelElement.style.width = maxPageWidth + "px";
        _this.handlePanelElement.title = _this.modelData.settings.titles.marginRight;
        _this.controls.ruler.rootElement.appendChild(_this.marginPanelElement);
        _this.controls.ruler.rootElement.appendChild(_this.handlePanelElement);
        return _this;
    }
    Object.defineProperty(RulerRightMarginDragHandle.prototype, "viewStateRelativeLeft", {
        get: function () { return this.controls.ruler.pageWidth - this.viewState; },
        enumerable: true,
        configurable: true
    });
    RulerRightMarginDragHandle.prototype.getRootClassName = function () { return ''; };
    ;
    Object.defineProperty(RulerRightMarginDragHandle.prototype, "commandType", {
        get: function () { return client_command_1.RichEditClientCommand.RulerSectionMarginRight; },
        enumerable: true,
        configurable: true
    });
    RulerRightMarginDragHandle.prototype.setViewStateToElement = function (element) {
        element.style.width = this.viewState + settings_1.RULLER_NUMBER_CORRECTION + "px";
    };
    RulerRightMarginDragHandle.prototype.getViewState = function () {
        var colSeps = this.controls.tables.currModelState.columnSeparators;
        if (colSeps.hasItems) {
            var rightTablePos = this.controls.leftMargin.currModelState.modelValue + this.controls.columns.currModelState.activeColumn.leftPos +
                list_1.ListUtils.last(colSeps.items).position;
            return this.controls.ruler.pageWidth - rightTablePos;
        }
        else
            return this.currModelState.modelValue;
    };
    RulerRightMarginDragHandle.prototype.lineControlSetPosition = function () {
        this.controls.lineControl.setPosition(this.viewState, vertical_line_1.SnapTo.RightSide);
    };
    RulerRightMarginDragHandle.prototype.calculateNewModelState = function (distance) {
        this.currModelState.modelValue = this.controls.ruler.pageWidth -
            this.controls.chooseClosestAnchorPosition(this.controls.ruler.pageWidth - this.prevModelState.modelValue + distance, [this.controls.ruler.pageWidth - this.prevModelState.modelValue], new min_max_1.MinMaxNumber(Math.max(0, this.controls.leftMargin.viewState + left_1.RulerMinDistanceBetweenMargins), this.controls.ruler.pageWidth));
    };
    return RulerRightMarginDragHandle;
}(base_1.RulerBaseMarginControl));
exports.RulerRightMarginDragHandle = RulerRightMarginDragHandle;
