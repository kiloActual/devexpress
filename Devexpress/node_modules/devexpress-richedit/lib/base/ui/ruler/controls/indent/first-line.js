"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var client_command_1 = require("../../../../commands/client-command");
var ruler_paragraph_indents_command_1 = require("../../../../commands/ruler/ruler-paragraph-indents-command");
var settings_1 = require("../../settings");
var base_1 = require("../base");
var base_2 = require("./base");
var RulerFirstLineIndentDragHandle = (function (_super) {
    tslib_1.__extends(RulerFirstLineIndentDragHandle, _super);
    function RulerFirstLineIndentDragHandle(modelData, controls) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.rootElement.title = _this.modelData.settings.titles.firstLineIndent;
        _this.controls.ruler.rootElement.appendChild(_this.rootElement);
        _this.adjustByTop();
        _this.leftCorrection = Math.round(_this.rootElement.offsetWidth / 2);
        _this._heightOfProtrudingPart = _this.rootElement.offsetHeight - _this.controls.divisions.height / 2;
        return _this;
    }
    Object.defineProperty(RulerFirstLineIndentDragHandle.prototype, "heightOfProtrudingPart", {
        get: function () { return this.modelData.settings.showLeftIndent ? this._heightOfProtrudingPart : 0; },
        enumerable: true,
        configurable: true
    });
    RulerFirstLineIndentDragHandle.prototype.getRootClassName = function () {
        return this.modelData.settings.styles.firstLineIndentImage.spriteCssClass + " " +
            this.modelData.settings.styles.firstLineIndent.className;
    };
    RulerFirstLineIndentDragHandle.prototype.adjustByTop = function () {
        var mainElementHeight = this.rootElement.offsetHeight;
        var divisionsControlHeight = this.controls.divisions.height;
        this.rootElement.style.marginTop = (mainElementHeight - divisionsControlHeight) / 2 + "px";
    };
    RulerFirstLineIndentDragHandle.prototype.getModelState = function () {
        var state = this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerParagraphLeftIndents).getState();
        return new base_1.RulerModelState(state.value.firstLine, state.enabled);
    };
    RulerFirstLineIndentDragHandle.prototype.updateView = function () {
        var newViewState = this.controls.paragraphLeftPosition + this.currModelState.modelValue;
        if (newViewState != this.viewState) {
            this.viewState = newViewState;
            if (this.modelData.settings.showLeftIndent)
                this.rootElement.style.left = this.viewState + settings_1.RULLER_NUMBER_CORRECTION - this.leftCorrection + "px";
            else
                this.setVisible(false);
        }
    };
    RulerFirstLineIndentDragHandle.prototype.canHandle = function (source) { return source == this.rootElement; };
    RulerFirstLineIndentDragHandle.prototype.onMouseUp = function () {
        var commandValue = new ruler_paragraph_indents_command_1.RulerParagraphLeftIndentsCommandValue(null, this.controls.leftIndent.currModelState.modelValue, this.currModelState.modelValue);
        commandValue.setIntervalsInfo(this.modelData.selection.intervalsInfo);
        this.modelData.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerParagraphLeftIndents)
            .execute(this.modelData.commandManager.isPublicApiCall, commandValue);
        this.finishHandle();
    };
    RulerFirstLineIndentDragHandle.prototype.calculateNewModelState = function (distance) {
        var parLeftPos = this.controls.paragraphLeftPosition;
        this.currModelState.modelValue =
            this.controls.chooseClosestAnchorPosition(parLeftPos + this.prevModelState.modelValue + distance, [parLeftPos + this.prevModelState.modelValue], new min_max_1.MinMaxNumber(0, Math.max(0, this.controls.rightIndent.viewStateRelativeLeft - base_2.RulerMinDistanceBetweenIndents))) - parLeftPos;
    };
    return RulerFirstLineIndentDragHandle;
}(base_2.RulerBaseIndentControl));
exports.RulerFirstLineIndentDragHandle = RulerFirstLineIndentDragHandle;
