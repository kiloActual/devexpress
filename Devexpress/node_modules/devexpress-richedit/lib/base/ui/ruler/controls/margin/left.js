"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var document_renderer_1 = require("../../../../canvas/renderes/common/document-renderer");
var client_command_1 = require("../../../../commands/client-command");
var settings_1 = require("../../settings");
var vertical_line_1 = require("../vertical-line");
var base_1 = require("./base");
exports.RulerMinDistanceBetweenMargins = 50;
var DIVISION_MARGIN_LEFT_CURSOR_CLASS_NAME = settings_1.RULER_CLASS_NAME + "MarginLeftHandlePanel";
var DIVISION_MARGIN_LEFT_CLASS_NAME = settings_1.RULER_CLASS_NAME + "MarginLeftPanel";
var RulerLeftMarginDragHandle = (function (_super) {
    tslib_1.__extends(RulerLeftMarginDragHandle, _super);
    function RulerLeftMarginDragHandle(modelData, controls, maxPageWidth) {
        var _this = _super.call(this, modelData, controls) || this;
        _this.initialLeft = -(Math.ceil(maxPageWidth) - settings_1.RULLER_NUMBER_CORRECTION);
        _this.marginPanelElement = document_renderer_1.DocumentRenderer.renderContainer(DIVISION_MARGIN_LEFT_CLASS_NAME);
        _this.handlePanelElement = document_renderer_1.DocumentRenderer.renderContainer(DIVISION_MARGIN_LEFT_CURSOR_CLASS_NAME);
        _this.marginPanelElement.style.width = maxPageWidth + "px";
        _this.handlePanelElement.style.width = maxPageWidth + "px";
        _this.handlePanelElement.title = _this.modelData.settings.titles.marginLeft;
        _this.controls.ruler.rootElement.appendChild(_this.marginPanelElement);
        _this.controls.ruler.rootElement.appendChild(_this.handlePanelElement);
        return _this;
    }
    RulerLeftMarginDragHandle.prototype.getRootClassName = function () { return ''; };
    ;
    Object.defineProperty(RulerLeftMarginDragHandle.prototype, "commandType", {
        get: function () { return client_command_1.RichEditClientCommand.RulerSectionMarginLeft; },
        enumerable: true,
        configurable: true
    });
    RulerLeftMarginDragHandle.prototype.setViewStateToElement = function (element) {
        element.style.left = this.viewState + this.initialLeft + "px";
    };
    RulerLeftMarginDragHandle.prototype.getViewState = function () {
        if (this.controls.tables.currModelState.columnSeparators.hasItems)
            return this.controls.leftMargin.currModelState.modelValue + this.controls.columns.currModelState.activeColumn.leftPos +
                this.controls.tables.currModelState.columnSeparators.items[0].position;
        else
            return this.controls.leftMargin.currModelState.modelValue;
    };
    RulerLeftMarginDragHandle.prototype.lineControlSetPosition = function () {
        this.controls.lineControl.setPosition(this.viewState, vertical_line_1.SnapTo.LeftSide);
    };
    RulerLeftMarginDragHandle.prototype.calculateNewModelState = function (distance) {
        this.currModelState.modelValue = this.controls.chooseClosestAnchorPosition(this.prevModelState.modelValue + distance, [this.prevModelState.modelValue], new min_max_1.MinMaxNumber(0, Math.max(0, this.controls.rightMargin.viewStateRelativeLeft - exports.RulerMinDistanceBetweenMargins)));
    };
    return RulerLeftMarginDragHandle;
}(base_1.RulerBaseMarginControl));
exports.RulerLeftMarginDragHandle = RulerLeftMarginDragHandle;
