"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var client_command_1 = require("../../commands/client-command");
var RulerMouseHandler = (function () {
    function RulerMouseHandler(modelData, controls) {
        this.listener = null;
        this._enable = true;
        this._visible = true;
        this.modelData = modelData;
        this.controls = controls;
        this.controlsList = [
            this.controls.firstLineIndent,
            this.controls.leftIndent,
            this.controls.rightIndent,
            this.controls.tables,
            this.controls.leftMargin,
            this.controls.rightMargin,
            this.controls.columns,
            this.controls.tabs,
        ];
    }
    RulerMouseHandler.prototype.setEnable = function (enable) {
        if (this._enable != enable) {
            if (!enable)
                this.onEscPress();
            this._enable = enable;
        }
    };
    RulerMouseHandler.prototype.setVisible = function (visible) {
        if (this._visible != visible) {
            if (!visible)
                this.onEscPress();
            this._visible = visible;
        }
    };
    RulerMouseHandler.prototype.canHandle = function (source) {
        return dom_1.DomUtils.isItParent(this.controls.ruler.rootElement, source);
    };
    RulerMouseHandler.prototype.notHandle = function () {
        return this.modelData.isReadOnly || !this._enable || !this._visible;
    };
    RulerMouseHandler.prototype.onDoubleClick = function (evt) {
        var source = evt_1.EvtUtils.getEventSource(evt);
        var command = this.controls.rightMargin.canHandle(source) || this.controls.leftMargin.canHandle(source) ?
            client_command_1.RichEditClientCommand.ShowPageSetupForm :
            client_command_1.RichEditClientCommand.ShowTabsForm;
        this.modelData.commandManager.getCommand(command).execute(this.modelData.commandManager.isPublicApiCall);
    };
    RulerMouseHandler.prototype.onMouseDown = function (evt) {
        if (this.notHandle())
            return;
        var source = evt_1.EvtUtils.getEventSource(evt);
        for (var _i = 0, _a = this.controlsList; _i < _a.length; _i++) {
            var listener = _a[_i];
            if (listener.onMouseDown(source, evt)) {
                this.listener = listener;
                break;
            }
        }
    };
    RulerMouseHandler.prototype.onMouseMove = function (distance, source) {
        if (this.notHandle() || !this.listener)
            return;
        this.listener.onMouseMove(distance, source);
        this.controls.updateView();
    };
    RulerMouseHandler.prototype.onMouseUp = function () {
        if (this.notHandle() || !this.listener)
            return;
        this.listener.onMouseUp();
        this.reset();
    };
    RulerMouseHandler.prototype.onEscPress = function () {
        if (this.notHandle() || !this.listener)
            return;
        this.listener.onEscPress();
        this.reset();
    };
    RulerMouseHandler.prototype.reset = function () {
        this.listener = null;
    };
    return RulerMouseHandler;
}());
exports.RulerMouseHandler = RulerMouseHandler;
