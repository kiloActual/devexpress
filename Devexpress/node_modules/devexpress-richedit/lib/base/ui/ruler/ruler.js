"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/changes/enums");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var manager_1 = require("./manager");
var model_data_1 = require("./model-data");
var settings_1 = require("./settings");
var HorizontalRulerEventType;
(function (HorizontalRulerEventType) {
    HorizontalRulerEventType[HorizontalRulerEventType["None"] = 0] = "None";
    HorizontalRulerEventType[HorizontalRulerEventType["FullReset"] = 1] = "FullReset";
    HorizontalRulerEventType[HorizontalRulerEventType["CheckSelectionChange"] = 2] = "CheckSelectionChange";
})(HorizontalRulerEventType || (HorizontalRulerEventType = {}));
var HorizontalRulerControl = (function (_super) {
    tslib_1.__extends(HorizontalRulerControl, _super);
    function HorizontalRulerControl(core, settings, canvas) {
        var _this = _super.call(this) || this;
        _this.controls = null;
        _this._innerVisible = true;
        _this._visible = true;
        _this.isTestMode = false;
        _this.selection = null;
        _this.updateEnabled = true;
        _this.modelData = new model_data_1.RulerModelData(core, settings);
        _this.canvas = canvas;
        return _this;
    }
    Object.defineProperty(HorizontalRulerControl.prototype, "initialized", {
        get: function () { return !!this.controls; },
        enumerable: true,
        configurable: true
    });
    ;
    HorizontalRulerControl.prototype.dispose = function () {
        if (this.initialized)
            this.controls.dispose();
    };
    HorizontalRulerControl.prototype.initialize = function (testMode) {
        this.isTestMode = testMode;
        this.initializeCore();
    };
    HorizontalRulerControl.prototype.onUpdateUnlocked = function (occurredEvents) {
        this.applyEvent(occurredEvents);
    };
    HorizontalRulerControl.prototype.modelChanged = function (change) {
        var occurredEvents = this.getModelChangeEvent(change);
        if (this.isUpdateLocked())
            this.registerOccurredEvent(occurredEvents);
        else
            this.applyEvent(occurredEvents);
    };
    HorizontalRulerControl.prototype.NotifySelectionChanged = function (selection) {
        this.selection = selection;
        if (this.isUpdateLocked())
            this.registerOccurredEvent(HorizontalRulerEventType.CheckSelectionChange);
        else
            this.applyEvent(this.getSelectionChangeEvent());
    };
    HorizontalRulerControl.prototype.applyEvent = function (occurredEvents) {
        var flag = new flag_1.Flag(occurredEvents);
        if (flag.get(HorizontalRulerEventType.CheckSelectionChange))
            flag.add(this.getSelectionChangeEvent());
        if (flag.get(HorizontalRulerEventType.FullReset))
            this.update();
    };
    HorizontalRulerControl.prototype.getSelectionChangeEvent = function () {
        return this.selection && !this.selection.shouldResetInputPosition() ?
            HorizontalRulerEventType.None :
            HorizontalRulerEventType.FullReset;
    };
    HorizontalRulerControl.prototype.getModelChangeEvent = function (change) {
        switch (change.type) {
            case enums_1.ModelChangeType.DifferentOddAndEvenPages:
            case enums_1.ModelChangeType.PageColor:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.DefaultTabWidth:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.HeaderFooterCreated:
            case enums_1.ModelChangeType.HeaderFooterIndexChanged:
            case enums_1.ModelChangeType.LoadFontInfo:
            case enums_1.ModelChangeType.SectionFormattingChanged:
            case enums_1.ModelChangeType.CreateStyleLink:
            case enums_1.ModelChangeType.DeleteStyleLink:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.AbstractNumberingListAdded:
            case enums_1.ModelChangeType.AbstractNumberingListDeleted:
            case enums_1.ModelChangeType.NumberingListAdded:
            case enums_1.ModelChangeType.NumberingListDeleted:
            case enums_1.ModelChangeType.ListLevelPropertyChanged:
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged:
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged:
            case enums_1.ModelChangeType.IOverrideListLevelChanged:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.BookmarkCreated:
            case enums_1.ModelChangeType.BookmarkDeleted:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.TabInserted:
            case enums_1.ModelChangeType.TabDeleted:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.LoadPicturesInfo:
            case enums_1.ModelChangeType.InlinePicturesUpdated:
            case enums_1.ModelChangeType.InlinePictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged:
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.FieldInserted:
            case enums_1.ModelChangeType.FieldDeleted:
            case enums_1.ModelChangeType.HyperlinkInfoChanged:
            case enums_1.ModelChangeType.FieldsShowCodeChanged:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.SimpleRunInserted:
            case enums_1.ModelChangeType.TextBufferChanged:
            case enums_1.ModelChangeType.ParagraphInserted:
            case enums_1.ModelChangeType.SectionInserted:
            case enums_1.ModelChangeType.AnchoredTextBoxInserted:
            case enums_1.ModelChangeType.AnchorObjectRemoved:
            case enums_1.ModelChangeType.IntervalRemoved:
            case enums_1.ModelChangeType.ParagraphMerged:
            case enums_1.ModelChangeType.SectionMerged:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.CharacterFormattingChanged:
            case enums_1.ModelChangeType.CharacterPropertiesChanged:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.ParagraphFormattingChanged:
            case enums_1.ModelChangeType.ParagraphPropertiesChanged:
            case enums_1.ModelChangeType.ParagraphAndCharacterMergedPropertiesReset:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged:
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged:
            case enums_1.ModelChangeType.ShapeChanged:
            case enums_1.ModelChangeType.ShapePropertyChanged:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.CharacterStyleApplied:
                return HorizontalRulerEventType.None;
            case enums_1.ModelChangeType.ParagraphStyleApplied:
            case enums_1.ModelChangeType.TableStyleChanged:
            case enums_1.ModelChangeType.ParagraphNumberingListChanged:
                return HorizontalRulerEventType.FullReset;
            case enums_1.ModelChangeType.TableCreated:
            case enums_1.ModelChangeType.TableRemoved:
            case enums_1.ModelChangeType.TableStartPositionShifted:
            case enums_1.ModelChangeType.TableCellPropertyChanged:
            case enums_1.ModelChangeType.TablePropertyChanged:
            case enums_1.ModelChangeType.TableRowPropertyChanged:
            case enums_1.ModelChangeType.TableCellSplittedHorizontally:
            case enums_1.ModelChangeType.TableCellMergedHorizontally:
            case enums_1.ModelChangeType.TableRowInserted:
            case enums_1.ModelChangeType.TableRowRemoved:
            case enums_1.ModelChangeType.TableCellRemoved:
            case enums_1.ModelChangeType.TableCellInserted:
                return HorizontalRulerEventType.FullReset;
            default:
                return HorizontalRulerEventType.None;
        }
    };
    HorizontalRulerControl.prototype.forceUpdate = function (_queryCommands) {
        if (this.isUpdateLocked())
            this.registerOccurredEvent(HorizontalRulerEventType.FullReset);
        else
            this.update();
    };
    HorizontalRulerControl.prototype.update = function () {
        if (this.initialized && this.updateEnabled && !this.isUpdateLocked() && !this.modelData.isClosed)
            this.controls.update();
    };
    HorizontalRulerControl.prototype.adjust = function () {
        if (!this.initialized && this.modelData.inputPosition) {
            this.initializeCore();
            if (this.initialized)
                this.update();
        }
        if (this.initialized)
            this.controls.adjust();
    };
    HorizontalRulerControl.prototype.setEnable = function (enable) {
        if (this.initialized)
            this.controls.mouseHandler.setEnable(enable);
    };
    HorizontalRulerControl.prototype.setVisible = function (visible) {
        if (visible != this._innerVisible || visible != this._visible) {
            this._visible = visible;
            this.innerSetVisible(visible);
        }
    };
    HorizontalRulerControl.prototype.innerSetVisible = function (visible) {
        visible = visible && !this.modelData.innerClientProperties.viewsSettings.isSimpleView;
        if (this.initialized && this._innerVisible != visible) {
            this._innerVisible = visible;
            this.controls.mouseHandler.setVisible(this._innerVisible);
            this.controls.wrapper.setVisible(this._innerVisible);
        }
    };
    HorizontalRulerControl.prototype.getVisible = function () {
        return this._visible;
    };
    HorizontalRulerControl.prototype.getHeight = function () {
        return this.initialized ? this.controls.wrapper.rootElement.offsetHeight : 0;
    };
    HorizontalRulerControl.prototype.onViewTypeChanged = function () {
        this.innerSetVisible(this._visible && !this.modelData.innerClientProperties.viewsSettings.isSimpleView);
    };
    HorizontalRulerControl.prototype.initializeCore = function () {
        if (this.isTestMode)
            return;
        if (!this.initialized && this.canvas.offsetWidth)
            this.controls = new manager_1.RulerControls(this.canvas, this.modelData);
        this.setVisible(this.modelData.settings.visibility != settings_1.RulerVisibility.Hidden);
        this.onViewTypeChanged();
    };
    return HorizontalRulerControl;
}(batch_updatable_1.BatchUpdatableObject));
exports.HorizontalRulerControl = HorizontalRulerControl;
