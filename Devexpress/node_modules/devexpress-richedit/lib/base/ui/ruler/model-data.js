"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var i_rich_edit_core_1 = require("../../interfaces/i-rich-edit-core");
var settings_1 = require("./settings");
var RulerModelData = (function () {
    function RulerModelData(core, settings) {
        this.core = core;
        this.settings = this.fixSettings(settings);
    }
    Object.defineProperty(RulerModelData.prototype, "inputPosition", {
        get: function () { return this.core.inputPosition; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RulerModelData.prototype, "commandManager", {
        get: function () { return this.core.commandManager; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerModelData.prototype, "isClosed", {
        get: function () { return this.core.isClosed(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerModelData.prototype, "innerClientProperties", {
        get: function () { return this.core.innerClientProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerModelData.prototype, "isReadOnly", {
        get: function () { return this.core.readOnly != i_rich_edit_core_1.ReadOnlyMode.None; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerModelData.prototype, "unitType", {
        get: function () { return this.core.uiUnitConverter.getUnits(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RulerModelData.prototype, "selection", {
        get: function () { return this.core.selection; },
        enumerable: true,
        configurable: true
    });
    RulerModelData.prototype.fixSettings = function (settings) {
        if (!settings.styles.firstLineIndent)
            settings.styles.firstLineIndent = this.getDefaultStyle('dxreFirstLineIndentDragHandle');
        if (!settings.styles.leftIndent)
            settings.styles.leftIndent = this.getDefaultStyle('dxreLeftIndentDragHandle');
        if (!settings.styles.tab)
            settings.styles.tab = this.getDefaultStyle('dxreTabDragHandle');
        if (!settings.styles.line)
            settings.styles.line = this.getDefaultStyle('dxreRulerLine');
        if (!settings.styles.control)
            settings.styles.control = this.getDefaultStyle('dxreRuler');
        if (!settings.styles.wrapper)
            settings.styles.wrapper = this.getDefaultStyle('dxreRulerWrapper');
        return settings;
    };
    RulerModelData.prototype.getDefaultStyle = function (className) {
        var style = new settings_1.RulerStyleInfo();
        style.className = className;
        style.style = '';
        return style;
    };
    return RulerModelData;
}());
exports.RulerModelData = RulerModelData;
