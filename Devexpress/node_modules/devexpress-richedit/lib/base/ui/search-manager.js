"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var event_dispatcher_1 = require("../../base-utils/event-dispatcher");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../commands/client-command");
var find_all_command_1 = require("../commands/find-replace/find-all-command");
var replace_all_command_1 = require("../commands/find-replace/replace-all-command");
var replace_next_command_1 = require("../commands/find-replace/replace-next-command");
var model_states_1 = require("../scroll/model-states");
var SearchManager = (function () {
    function SearchManager(control) {
        this.onChanged = new event_dispatcher_1.EventDispatcher();
        this.control = control;
        this.foundIntervals = [];
        this.whatFind = null;
    }
    SearchManager.prototype.dispose = function () {
        if (this.control) {
            this.control = null;
            this.onChanged.dispose();
        }
    };
    SearchManager.prototype.raiseSearchReset = function () {
        this.resetSearch();
        this.onChanged.listeners.forEach(function (listener) { return listener.NotifySearchReset(); });
    };
    SearchManager.prototype.NotifySelectionChanged = function (selection) {
        if (selection.prevState.intervalsInfo.subDocument != selection.currState.intervalsInfo.subDocument)
            this.raiseSearchReset();
    };
    SearchManager.prototype.findAll = function (text, matchCase) {
        this.whatFind = text;
        var command = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.FindAll);
        command.execute(this.control.commandManager.isPublicApiCall, new find_all_command_1.FindAllCommandOptions(this.control, text, matchCase, true, this.foundIntervals));
    };
    SearchManager.prototype.replaceAll = function (text, replaceText, matchCase) {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ReplaceAll)
            .execute(this.control.commandManager.isPublicApiCall, new replace_all_command_1.ReplaceAllCommandOptions(this.control, text, replaceText, matchCase));
    };
    SearchManager.prototype.replace = function (text, replaceText, matchCase) {
        if (this.findIntervalIndex(this.control.selection.intervals[0]) >= 0) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ReplaceNext)
                .execute(this.control.commandManager.isPublicApiCall, new replace_next_command_1.ReplaceNextCommandOptions(this.control, text, replaceText, matchCase));
            return true;
        }
        return false;
    };
    SearchManager.prototype.resetSearch = function () {
        this.foundIntervals = [];
        if (this.control.selection.searchIntervals.length)
            this.control.selection.resetSearchSelection();
    };
    SearchManager.prototype.findNextIntervalIndex = function () {
        for (var i = 0, interval = void 0; interval = this.foundIntervals[i]; i++)
            if (interval.start >= this.control.selection.intervals[0].end)
                return i;
        return this.foundIntervals.length ? 0 : null;
    };
    SearchManager.prototype.findPrevIntervalIndex = function () {
        for (var i = this.foundIntervals.length - 1, interval = void 0; interval = this.foundIntervals[i]; i--)
            if (interval.start < this.control.selection.intervals[0].start)
                return i;
        return this.foundIntervals.length ? this.foundIntervals.length - 1 : null;
    };
    SearchManager.prototype.findIntervalIndex = function (desiredInterval) {
        return list_1.ListUtils.indexBy(this.foundIntervals, function (interval) { return interval.start == desiredInterval.start && interval.end == desiredInterval.end; });
    };
    SearchManager.prototype.selectIntervalByIndex = function (intervalIndex) {
        var interval = this.foundIntervals[intervalIndex];
        this.control.selection.deprecatedSetSelection(interval.start, interval.end, false, -1, true);
    };
    SearchManager.prototype.scrollToIntervalByIndex = function (intervalIndex) {
        this.control.beginUpdate();
        var interval = this.foundIntervals[intervalIndex];
        this.control.selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(this.control.selection).setModelPosition(interval.start).useStdRelativePosition().useStdOffset());
        this.control.endUpdate();
    };
    return SearchManager;
}());
exports.SearchManager = SearchManager;
