import { Field } from '../../core/model/fields/field';
import { Point } from '@devexpress/utils/lib/geometry/point';
import { FixedInterval } from '@devexpress/utils/lib/intervals/fixed';
import { ContextMenuBarBase } from '../bars/context-menu';
import { DownloadRequestType } from '../commands/document/print-document-command';
import { FloatingObjectMovedArgumentInner } from '../commands/floating-objects/floating-object-drag-drop-change-position-command';
import { IInternalApi } from '../internal-api';
export interface IControlOwner {
    readonly name: string;
    syncSessionGuid(sessionGuid: string): any;
    sendRequest(content: string, viaInternalCallback: boolean): any;
    canCaptureFocus(): boolean;
    Focus(): void;
    isInitialized: boolean;
    adjustControl(): any;
    toggleFullScreenMode(): any;
    isInFullScreenMode: boolean;
    sendDownloadRequest(downloadRequestType: DownloadRequestType, parameters?: string): any;
    confirmOnLosingChanges(): boolean;
    readonly hasWorkDirectory: boolean;
    showDialog(name: string, parameters: any, callback: (params: any) => void, afterClosing: () => void, isModal: boolean): any;
    onCaptureFocus(): any;
    raiseBeginSynchronization(): any;
    raiseDocumentLoaded(): any;
    raiseDocumentFormatted(pageCount: number): any;
    raiseDocumentChanged(): any;
    raiseActiveSubDocumentChanged(): any;
    raiseGotFocus(): any;
    raiseLostFocus(): any;
    raiseHyperlinkClick(evt: MouseEvent, field: Field): boolean;
    raisePointerDown(evt: MouseEvent): boolean;
    raisePointerUp(evt: MouseEvent): boolean;
    raiseKeyDown(evt: KeyboardEvent): boolean;
    raiseKeyUp(evt: KeyboardEvent): any;
    raiseContentInserted(subDocumentId: number, interval: FixedInterval): any;
    raiseContentRemoved(subDocumentId: number, interval: FixedInterval, removedText: string): any;
    raiseCharacterPropertiesChanged(subDocumentId: number, interval: FixedInterval): any;
    raiseParagraphPropertiesChanged(subDocumentId: number, paragraphIndex: number): any;
    raiseAutoCorrect(text: string, interval: FixedInterval): boolean;
    raiseSelectionChanged(): any;
    raiseCustomCommandExecuted(command: any, parameter: any): any;
    raiseFloatingObjectMovedObject(args: FloatingObjectMovedArgumentInner): any;
    showPopupMenu(getPoint: (contextMenuBar: ContextMenuBarBase) => Point): any;
    hidePopupMenu(): any;
    isRibbon(element: HTMLElement): boolean;
    showQuickSearchPanel(): any;
    hideQuickSearchPanel(): any;
    getMainElement(): HTMLElement;
    getChildElement(postfix: string): HTMLElement;
    hasActiveDialog(): boolean;
    internalApi: IInternalApi;
}
//# sourceMappingURL=i-control-owner.d.ts.map
