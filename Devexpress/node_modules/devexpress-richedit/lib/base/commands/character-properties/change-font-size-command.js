"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_property_descriptor_1 = require("../../../core/model/character/character-property-descriptor");
var model_iterator_1 = require("../../../core/model/model-iterator");
var rich_utils_1 = require("../../../core/model/rich-utils");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var map_collector_1 = require("@devexpress/utils/lib/intervals/sparse/map-collector");
var common_1 = require("@devexpress/utils/lib/utils/common");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var client_command_1 = require("../client-command");
var change_character_properties_command_base_1 = require("./change-character-properties-command-base");
var ChangeFontSizeCommand = (function (_super) {
    tslib_1.__extends(ChangeFontSizeCommand, _super);
    function ChangeFontSizeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeFontSizeCommand.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.size;
    };
    ChangeFontSizeCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        var res = typeof parameter == "string" ? parseFloat(parameter) : parameter;
        return this.isFontSizeValueCorrect(res) ? res : this.getCurrentValue();
    };
    ChangeFontSizeCommand.prototype.isFontSizeValueCorrect = function (size) {
        if (common_1.isNumber(size) && !isNaN(size) && size >= rich_utils_1.RichUtils.minFontSize && size <= rich_utils_1.RichUtils.maxFontSize) {
            var decimal = size % 1;
            if (decimal === 0 || decimal === 0.5)
                return true;
        }
        return false;
    };
    return ChangeFontSizeCommand;
}(change_character_properties_command_base_1.ChangeCharacterPropertiesCommandBase));
exports.ChangeFontSizeCommand = ChangeFontSizeCommand;
var StepFontSizeCommand = (function (_super) {
    tslib_1.__extends(StepFontSizeCommand, _super);
    function StepFontSizeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StepFontSizeCommand.prototype.executeCore = function (_state, options) {
        var _a;
        var desc = this.getDescriptor();
        var modelIter = new model_iterator_1.ModelIterator(options.subDocument, false);
        var collector = new map_collector_1.SparseIntervalsMapCollector(comparers_1.Comparers.number, new fixed_1.FixedInterval(0, 0));
        for (var _i = 0, _b = this.getApplyToIntervals(options); _i < _b.length; _i++) {
            var interval = _b[_i];
            var endPos = interval.end;
            modelIter.setPosition(interval.start);
            do {
                var currPos = modelIter.getAbsolutePosition();
                if (currPos >= endPos)
                    break;
                collector.add(currPos, modelIter.run.getCharacterMergedProperties().fontSize);
            } while (modelIter.moveToNextChar());
        }
        if (options.intervalsInfo.isCollapsed) {
            var newValue = this.getCurrentValue();
            if (newValue === undefined) {
                modelIter.setPosition(options.intervalsInfo.interval.start);
                newValue = modelIter.run.getCharacterMergedProperties().fontSize;
            }
            this.applyToInputPosition(desc, this.step(newValue));
        }
        else {
            this.inputPosition.reset();
        }
        var history = this.history;
        history.beginTransaction();
        var intervalIter = collector.getIterator();
        while (intervalIter.moveToNextInterval()) {
            if (intervalIter.interval.length > 0)
                history.addAndRedo(new (desc.getHistoryItemConstructor())(this.modelManipulator, new sub_document_1.SubDocumentInterval(options.subDocument, intervalIter.interval), this.step(intervalIter.object), true));
        }
        history.endTransaction();
        this.control.barHolder.forceUpdate((_a = {}, _a[client_command_1.RichEditClientCommand.ChangeFontSize] = true, _a));
        return true;
    };
    return StepFontSizeCommand;
}(ChangeFontSizeCommand));
exports.StepFontSizeCommand = StepFontSizeCommand;
var DecreaseFontSizeCommand = (function (_super) {
    tslib_1.__extends(DecreaseFontSizeCommand, _super);
    function DecreaseFontSizeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DecreaseFontSizeCommand.prototype.step = function (currValue) {
        return rich_utils_1.RichUtils.getPreviousPredefinedFontSize(currValue);
    };
    return DecreaseFontSizeCommand;
}(StepFontSizeCommand));
exports.DecreaseFontSizeCommand = DecreaseFontSizeCommand;
var IncreaseFontSizeCommand = (function (_super) {
    tslib_1.__extends(IncreaseFontSizeCommand, _super);
    function IncreaseFontSizeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IncreaseFontSizeCommand.prototype.step = function (currValue) {
        return rich_utils_1.RichUtils.getNextPredefinedFontSize(currValue);
    };
    return IncreaseFontSizeCommand;
}(StepFontSizeCommand));
exports.IncreaseFontSizeCommand = IncreaseFontSizeCommand;
