"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_property_descriptor_1 = require("../../../core/model/character/character-property-descriptor");
var enums_1 = require("../../../core/model/character/enums");
var change_character_properties_command_base_1 = require("./change-character-properties-command-base");
var ChangeFontScriptCommand = (function (_super) {
    tslib_1.__extends(ChangeFontScriptCommand, _super);
    function ChangeFontScriptCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeFontScriptCommand.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.script;
    };
    return ChangeFontScriptCommand;
}(change_character_properties_command_base_1.ChangeCharacterPropertiesCommandBase));
exports.ChangeFontScriptCommand = ChangeFontScriptCommand;
var ToggleFontSubscriptCommand = (function (_super) {
    tslib_1.__extends(ToggleFontSubscriptCommand, _super);
    function ToggleFontSubscriptCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleFontSubscriptCommand.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.script;
    };
    ToggleFontSubscriptCommand.prototype.getValueForState = function (val) {
        return val == enums_1.CharacterFormattingScript.Subscript;
    };
    ToggleFontSubscriptCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return this.convertBooleanParameterToEnumType(parameter, enums_1.CharacterFormattingScript.Subscript, enums_1.CharacterFormattingScript.Normal);
    };
    return ToggleFontSubscriptCommand;
}(change_character_properties_command_base_1.ChangeCharacterPropertiesCommandBase));
exports.ToggleFontSubscriptCommand = ToggleFontSubscriptCommand;
var ToggleFontSuperscriptCommand = (function (_super) {
    tslib_1.__extends(ToggleFontSuperscriptCommand, _super);
    function ToggleFontSuperscriptCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleFontSuperscriptCommand.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.script;
    };
    ToggleFontSuperscriptCommand.prototype.getValueForState = function (val) {
        return val == enums_1.CharacterFormattingScript.Superscript;
    };
    ToggleFontSuperscriptCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return this.convertBooleanParameterToEnumType(parameter, enums_1.CharacterFormattingScript.Superscript, enums_1.CharacterFormattingScript.Normal);
    };
    return ToggleFontSuperscriptCommand;
}(change_character_properties_command_base_1.ChangeCharacterPropertiesCommandBase));
exports.ToggleFontSuperscriptCommand = ToggleFontSuperscriptCommand;
