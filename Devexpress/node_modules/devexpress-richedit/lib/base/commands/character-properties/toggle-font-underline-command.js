"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_property_descriptor_1 = require("../../../core/model/character/character-property-descriptor");
var enums_1 = require("../../../core/model/character/enums");
var change_character_properties_command_base_1 = require("./change-character-properties-command-base");
var ChangeFontUnderlineCommand = (function (_super) {
    tslib_1.__extends(ChangeFontUnderlineCommand, _super);
    function ChangeFontUnderlineCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeFontUnderlineCommand.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.underlineType;
    };
    return ChangeFontUnderlineCommand;
}(change_character_properties_command_base_1.ChangeCharacterPropertiesCommandBase));
exports.ChangeFontUnderlineCommand = ChangeFontUnderlineCommand;
var ToggleFontSingleUnderlineCommand = (function (_super) {
    tslib_1.__extends(ToggleFontSingleUnderlineCommand, _super);
    function ToggleFontSingleUnderlineCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleFontSingleUnderlineCommand.prototype.getActualValue = function (_parameter, currentValue) {
        return currentValue ? enums_1.UnderlineType.None : enums_1.UnderlineType.Single;
    };
    ToggleFontSingleUnderlineCommand.prototype.getValueForState = function (val) {
        return val == enums_1.UnderlineType.Single;
    };
    ToggleFontSingleUnderlineCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return this.convertBooleanParameterToEnumType(parameter, enums_1.UnderlineType.Single, enums_1.UnderlineType.None);
    };
    return ToggleFontSingleUnderlineCommand;
}(ChangeFontUnderlineCommand));
exports.ToggleFontSingleUnderlineCommand = ToggleFontSingleUnderlineCommand;
var ToggleFontDoubleUnderlineCommand = (function (_super) {
    tslib_1.__extends(ToggleFontDoubleUnderlineCommand, _super);
    function ToggleFontDoubleUnderlineCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleFontDoubleUnderlineCommand.prototype.getActualValue = function (_parameter, currentValue) {
        return currentValue ? enums_1.UnderlineType.None : enums_1.UnderlineType.Double;
    };
    ToggleFontDoubleUnderlineCommand.prototype.getValueForState = function (val) {
        return val == enums_1.UnderlineType.Double;
    };
    ToggleFontDoubleUnderlineCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return this.convertBooleanParameterToEnumType(parameter, enums_1.UnderlineType.Double, enums_1.UnderlineType.None);
    };
    return ToggleFontDoubleUnderlineCommand;
}(ChangeFontUnderlineCommand));
exports.ToggleFontDoubleUnderlineCommand = ToggleFontDoubleUnderlineCommand;
