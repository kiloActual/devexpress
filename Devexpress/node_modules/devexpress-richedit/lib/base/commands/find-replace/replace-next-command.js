"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var find_replace_helper_1 = require("../../../core/model/find-replace-helper");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var replace_all_command_1 = require("./replace-all-command");
var ReplaceNextCommandOptions = (function (_super) {
    tslib_1.__extends(ReplaceNextCommandOptions, _super);
    function ReplaceNextCommandOptions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ReplaceNextCommandOptions;
}(replace_all_command_1.ReplaceAllCommandOptions));
exports.ReplaceNextCommandOptions = ReplaceNextCommandOptions;
var ReplaceNextCommand = (function (_super) {
    tslib_1.__extends(ReplaceNextCommand, _super);
    function ReplaceNextCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ReplaceNextCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    ReplaceNextCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var searchSettings = options;
        var findReplaceHelper = new find_replace_helper_1.FindReplaceHelper(this.control.modelManager, this.control.layoutFormatterManager, this.control.selection.pageIndex, options.subDocument, this.control.layout, function (interval) {
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setIntervals([interval])));
        });
        findReplaceHelper.setSearchParams(searchSettings.text, searchSettings.replaceText, find_replace_helper_1.SearchDirection.All, searchSettings.matchCase, false, this.selection.intervals[0].start, false);
        if (findReplaceHelper.findNext() === find_replace_helper_1.FindReplaceState.Found) {
            findReplaceHelper.replaceLastFound();
            return true;
        }
        return false;
    };
    return ReplaceNextCommand;
}(command_base_1.CommandBase));
exports.ReplaceNextCommand = ReplaceNextCommand;
