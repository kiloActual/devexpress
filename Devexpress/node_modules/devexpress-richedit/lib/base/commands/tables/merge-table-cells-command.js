"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var MergeTableCellsCommand = (function (_super) {
    tslib_1.__extends(MergeTableCellsCommand, _super);
    function MergeTableCellsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MergeTableCellsCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.selection.tableInfo.extendedData.numRows > 0 && !this.selection.specialRunInfo.isPictureSelected();
        return state;
    };
    MergeTableCellsCommand.prototype.isEnabled = function () {
        var data = this.selection.tableInfo.extendedData;
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) &&
            data.isSquare && (data.numRows > 1 || data.rows[0].cells.length > 1);
    };
    MergeTableCellsCommand.prototype.executeCore = function (_state, options) {
        this.history.beginTransaction();
        var tblInfo = this.selection.tableInfo;
        var subDocument = options.subDocument;
        this.mergeCellsHorizontally(subDocument, tblInfo);
        this.mergeCellsVertically(subDocument, tblInfo);
        this.modelManipulator.table.normalizeRows(subDocument, tblInfo.table);
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(tblInfo.extendedData.firstCell.interval).setEndOfLine(false)));
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, tblInfo.table, options.subDocument);
        this.history.endTransaction();
        return true;
    };
    MergeTableCellsCommand.prototype.mergeCellsHorizontally = function (subDocument, tblInfo) {
        var _this = this;
        tblInfo.extendedData.foreach(function (rowInfo) {
            var modelCellInterval = new boundary_1.BoundaryInterval(rowInfo.cells[0].cellIndex, list_1.ListUtils.last(rowInfo.cells).cellIndex + 1);
            for (var modelCellInd = modelCellInterval.end - 2; modelCellInd >= modelCellInterval.start; modelCellInd--)
                _this.modelManipulator.table.mergeTwoTableCellsHorizontally(subDocument, new table_1.TablePosition(tblInfo.table, rowInfo.rowIndex, modelCellInd).init(), _this.inputPosition);
        }, function () { });
    };
    MergeTableCellsCommand.prototype.mergeCellsVertically = function (subDocument, tblInfo) {
        var _this = this;
        list_1.ListUtils.reverseForEach(tblInfo.extendedData.rows, function (rowInfo) {
            _this.modelManipulator.table.mergeTwoTableCellsVertically(subDocument, new table_1.TablePosition(tblInfo.table, rowInfo.rowIndex, rowInfo.cells[0].cellIndex).init(), _this.inputPosition);
        }, tblInfo.extendedData.numRows - 2);
    };
    return MergeTableCellsCommand;
}(command_base_1.CommandBase));
exports.MergeTableCellsCommand = MergeTableCellsCommand;
