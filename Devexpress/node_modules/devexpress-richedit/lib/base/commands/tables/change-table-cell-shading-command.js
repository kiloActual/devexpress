"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var table_cell_properties_1 = require("../../../core/model/tables/properties/table-cell-properties");
var color_2 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTableCellShadingCommand = (function (_super) {
    tslib_1.__extends(ChangeTableCellShadingCommand, _super);
    function ChangeTableCellShadingCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableCellShadingCommand.prototype.getState = function () {
        var _this = this;
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        if (state.enabled) {
            var tableInfo = this.selection.tableInfo;
            var templateColor_1;
            if (list_1.ListUtils.allOf(tableInfo.extendedData.rows, function (rowInfo) {
                return list_1.ListUtils.allOf(rowInfo.cells, function (cellInfo) {
                    if (cellInfo.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex)) {
                        var currCellColor = cellInfo.cell.properties.shadingInfo.getActualColor(_this.colorProvider);
                        if (templateColor_1 === undefined) {
                            templateColor_1 = currCellColor;
                            return true;
                        }
                        else
                            return currCellColor == templateColor_1;
                    }
                    else
                        return true;
                });
            })) {
                switch (templateColor_1) {
                    case undefined:
                        state.value = undefined;
                        break;
                    case color_1.ColorHelper.NO_COLOR:
                        state.value = null;
                        break;
                    default: color_2.ColorUtils.colorToHash(templateColor_1);
                }
            }
            else
                state.value = undefined;
        }
        state.denyUpdateValue = true;
        return state;
    };
    ChangeTableCellShadingCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) && this.selection.tableInfo.extendedData.numRows > 0;
    };
    ChangeTableCellShadingCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return color_1.ColorHelper.anyToColor(parameter, color_1.ColorHelper.NO_COLOR);
    };
    ChangeTableCellShadingCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var color = options.param;
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        tableInfo.extendedData.foreach(function () { }, function (cellInfo, rowInfo) {
            if (cellInfo.cell.properties.shadingInfo.getActualColor(_this.colorProvider) !== color ||
                !cellInfo.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex)) {
                _this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellShadingInfoHistoryItem(_this.modelManipulator, options.subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(color)), true));
            }
        });
        this.history.endTransaction();
        return true;
    };
    return ChangeTableCellShadingCommand;
}(command_base_1.CommandBase));
exports.ChangeTableCellShadingCommand = ChangeTableCellShadingCommand;
