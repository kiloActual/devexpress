"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var table_utils_ex_1 = require("../../rich-utils/table-utils-ex");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var DeleteTableColumnsCommand = (function (_super) {
    tslib_1.__extends(DeleteTableColumnsCommand, _super);
    function DeleteTableColumnsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTableColumnsCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DeleteTableColumnsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this)
            && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables)
            && this.selection.tableInfo.rawData.isSquare;
    };
    DeleteTableColumnsCommand.prototype.executeCore = function (_state, options) {
        this.history.beginTransaction();
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        var subDocument = options.subDocument;
        if (tableInfo.rawData.firstRowInfo.cells.length == table.rows[tableInfo.rawData.firstRowInfo.rowIndex].cells.length) {
            this.modelManipulator.table.removeTableWithContent(subDocument, table);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(table.getStartPosition()).setEndOfLine(false)));
        }
        else {
            var startPosition = tableInfo.rawData.firstCell.startParagraphPosition.value;
            var columnsRange = table_utils_ex_1.TableUtilsEx.getColumnsRangeBySelectedCells(tableInfo.rawData);
            for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
                var cellIndices = table_utils_1.TableCellUtils.getCellIndicesByColumnsRange(row, columnsRange);
                if (cellIndices.length === row.cells.length) {
                    this.modelManipulator.table.removeTableRowWithContent(subDocument, table, rowIndex);
                    rowIndex--;
                }
                else {
                    for (var i = cellIndices.length - 1; i >= 0; i--)
                        this.modelManipulator.table.removeTableCellWithContent(subDocument, table, rowIndex, cellIndices[i]);
                }
                this.modelManipulator.table.normalizeTableGrid(subDocument, table);
            }
            this.normalizeCellVerticalMerging(subDocument, table);
            this.modelManipulator.table.normalizeCellColumnSpans(subDocument, table, true);
            table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, options.subDocument);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(startPosition).setEndOfLine(false)));
        }
        this.history.endTransaction();
        return true;
    };
    DeleteTableColumnsCommand.prototype.normalizeCellVerticalMerging = function (subDocument, table) {
        for (var rowIndex = table.rows.length - 1, row = void 0; row = table.rows[rowIndex]; rowIndex--) {
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                if (cell.verticalMerging === table_base_structures_1.TableCellMergingState.None)
                    continue;
                var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(cell);
                var nextRow = table.rows[rowIndex + 1];
                if (cell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
                    if (rowIndex === table.rows.length - 1) {
                        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                        continue;
                    }
                    var nextRowCell = nextRow.cells[table_utils_1.TableCellUtils.getCellIndexByColumnIndex(nextRow, columnIndex)];
                    if (!nextRowCell || nextRowCell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                }
                else {
                    var prevRow = table.rows[rowIndex - 1];
                    var prevCell = prevRow ? prevRow.cells[table_utils_1.TableCellUtils.getCellIndexByColumnIndex(prevRow, columnIndex)] : null;
                    var nextRow_1 = table.rows[rowIndex + 1];
                    var nextCell = nextRow_1 ? nextRow_1.cells[table_utils_1.TableCellUtils.getCellIndexByColumnIndex(nextRow_1, columnIndex)] : null;
                    if (!prevCell || prevCell.verticalMerging === table_base_structures_1.TableCellMergingState.None) {
                        if (!nextCell || nextCell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                        else if (nextCell && nextCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.Restart));
                    }
                }
            }
        }
    };
    return DeleteTableColumnsCommand;
}(table_command_base_1.TableCommandBase));
exports.DeleteTableColumnsCommand = DeleteTableColumnsCommand;
