"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var insert_paragraph_history_item_1 = require("../../../core/model/history/items/insert-paragraph-history-item");
var split_table_cell_history_item_1 = require("../../../core/model/history/items/tables/split-table-cell-history-item");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var insert_paragraph_manipulator_params_1 = require("../../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var constants_1 = require("@devexpress/utils/lib/constants");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var InsertTableColumnCommandBase = (function (_super) {
    tslib_1.__extends(InsertTableColumnCommandBase, _super);
    function InsertTableColumnCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableColumnCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertTableColumnCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) && this.selection.tableInfo.extendedData.isSquare;
    };
    InsertTableColumnCommandBase.prototype.executeCore = function (_state, options) {
        this.history.beginTransaction();
        var patternCell = this.getPatternCell();
        var columnIndex = this.getColumnIndex(patternCell);
        var table = patternCell.parentRow.parentTable;
        var columnCellIndices = this.getColumnCellIndices(table, columnIndex);
        var columnCount = this.getInsertedColumnCount();
        var newCells = [];
        var subDocument = options.subDocument;
        for (var i = 0; i < columnCount; i++) {
            for (var rowIndex = columnCellIndices.length - 1; rowIndex >= 0; rowIndex--) {
                newCells.push(this.splitTableCellCore(subDocument, table, rowIndex, columnCellIndices[rowIndex], patternCell));
            }
        }
        this.modelManipulator.table.normalizeTableGrid(subDocument, table);
        this.modelManipulator.table.normalizeCellColumnSpans(subDocument, table, false);
        this.modelManipulator.table.normalizeTableCellWidth(subDocument, table);
        var newCellIntervals = [];
        for (var i = 0, newCell = void 0; newCell = newCells[i]; i++)
            newCellIntervals.push(newCell.interval);
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, subDocument);
        this.history.endTransaction();
        return true;
    };
    InsertTableColumnCommandBase.prototype.getInsertedColumnCount = function () {
        return list_1.ListUtils.accumulate(this.selection.tableInfo.extendedData.rows, constants_1.Constants.MAX_SAFE_INTEGER, function (acc, rowInfo) { return Math.min(acc, rowInfo.columnCountInSeries); });
    };
    InsertTableColumnCommandBase.prototype.getColumnCellIndices = function (table, columnIndex) {
        var _this = this;
        return list_1.ListUtils.map(table.rows, function (currentRow) { return _this.getCurrentCellIndex(columnIndex, currentRow); });
    };
    InsertTableColumnCommandBase.prototype.insertParagraphToTheLeft = function (subDocument, currentCell) {
        var sourceRun = subDocument.getRunByPosition(currentCell.startParagraphPosition.value);
        var sourceParagraph = subDocument.getParagraphByPosition(currentCell.startParagraphPosition.value);
        this.history.addAndRedo(new insert_paragraph_history_item_1.InsertParagraphHistoryItem(this.modelManipulator, new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, currentCell.startParagraphPosition.value), sourceRun.getCharPropsBundle(this.modelManipulator.model), sourceParagraph.getParagraphBundleFull(this.modelManipulator.model))));
    };
    InsertTableColumnCommandBase.prototype.insertParagraphToTheRight = function (subDocument, currentCell) {
        var sourceRun = subDocument.getRunByPosition(currentCell.endParagrapPosition.value - 1);
        var sourceParagraph = subDocument.getParagraphByPosition(currentCell.endParagrapPosition.value - 1);
        this.history.addAndRedo(new insert_paragraph_history_item_1.InsertParagraphHistoryItem(this.modelManipulator, new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, currentCell.endParagrapPosition.value - 1), sourceRun.getCharPropsBundle(this.modelManipulator.model), sourceParagraph.getParagraphBundleFull(this.modelManipulator.model))));
    };
    return InsertTableColumnCommandBase;
}(table_command_base_1.TableCommandBase));
exports.InsertTableColumnCommandBase = InsertTableColumnCommandBase;
var InsertTableColumnToTheLeftCommand = (function (_super) {
    tslib_1.__extends(InsertTableColumnToTheLeftCommand, _super);
    function InsertTableColumnToTheLeftCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableColumnToTheLeftCommand.prototype.splitTableCellCore = function (subDocument, table, rowIndex, cellIndex, patternCell) {
        if (cellIndex < 0)
            cellIndex = table.rows[rowIndex].cells.length - 1;
        this.insertParagraphToTheLeft(subDocument, table.rows[rowIndex].cells[cellIndex]);
        this.history.addAndRedo(new split_table_cell_history_item_1.SplitTableCellToTheLeftHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, true));
        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, patternCell.preferredWidth.clone()));
        return table.rows[rowIndex].cells[cellIndex];
    };
    InsertTableColumnToTheLeftCommand.prototype.getPatternCell = function () {
        return this.selection.tableInfo.extendedData.firstCell;
    };
    InsertTableColumnToTheLeftCommand.prototype.getColumnIndex = function (patternCell) {
        return table_utils_1.TableCellUtils.getStartColumnIndex(patternCell);
    };
    InsertTableColumnToTheLeftCommand.prototype.getCurrentCellIndex = function (relativeColumnIndex, currentRow) {
        return table_utils_1.TableCellUtils.getCellIndexByColumnIndex(currentRow, relativeColumnIndex);
    };
    return InsertTableColumnToTheLeftCommand;
}(InsertTableColumnCommandBase));
exports.InsertTableColumnToTheLeftCommand = InsertTableColumnToTheLeftCommand;
var InsertTableColumnToTheRightCommand = (function (_super) {
    tslib_1.__extends(InsertTableColumnToTheRightCommand, _super);
    function InsertTableColumnToTheRightCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableColumnToTheRightCommand.prototype.splitTableCellCore = function (subDocument, table, rowIndex, cellIndex, patternCell) {
        if (cellIndex < 0) {
            this.insertParagraphToTheLeft(subDocument, table.rows[rowIndex].cells[0]);
            this.history.addAndRedo(new split_table_cell_history_item_1.SplitTableCellToTheLeftHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, 0, true));
        }
        else {
            this.insertParagraphToTheRight(subDocument, table.rows[rowIndex].cells[cellIndex]);
            this.history.addAndRedo(new split_table_cell_history_item_1.SplitTableCellToTheRightHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, true));
        }
        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, Math.max(0, cellIndex), patternCell.preferredWidth.clone()));
        return table.rows[rowIndex].cells[cellIndex + 1];
    };
    InsertTableColumnToTheRightCommand.prototype.getPatternCell = function () {
        return list_1.ListUtils.last(list_1.ListUtils.last(this.selection.tableInfo.extendedData.rows).cells).cell;
    };
    InsertTableColumnToTheRightCommand.prototype.getColumnIndex = function (patternCell) {
        return table_utils_1.TableCellUtils.getStartColumnIndex(patternCell) + patternCell.columnSpan - 1;
    };
    InsertTableColumnToTheRightCommand.prototype.getCurrentCellIndex = function (relativeColumnIndex, currentRow) {
        return table_utils_1.TableCellUtils.getCellIndexByEndColumnIndex(currentRow, relativeColumnIndex);
    };
    return InsertTableColumnToTheRightCommand;
}(InsertTableColumnCommandBase));
exports.InsertTableColumnToTheRightCommand = InsertTableColumnToTheRightCommand;
