"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var table_row_properties_history_items_1 = require("../../../core/model/history/items/tables/table-row-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var client_command_1 = require("../client-command");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var SplitTableCellsCommand = (function (_super) {
    tslib_1.__extends(SplitTableCellsCommand, _super);
    function SplitTableCellsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitTableCellsCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    SplitTableCellsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) && this.selection.tableInfo.extendedData.areCellsSelectedInSeries;
    };
    SplitTableCellsCommand.prototype.executeCore = function (_state, options) {
        var parameters = options.param;
        this.history.beginTransaction();
        var tableInfo = this.selection.tableInfo;
        var selectedCells = list_1.ListUtils.map(tableInfo.rawData.rows, function (rowInfo) { return list_1.ListUtils.map(rowInfo.cells, function (cellInfo) { return cellInfo.cell; }); });
        var firstCell = tableInfo.extendedData.firstCell;
        if (parameters.isMergeBeforeSplit) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.MergeTableCells).execute(this.control.commandManager.isPublicApiCall);
            selectedCells = this.filterRemovedCells(selectedCells);
        }
        this.splitTableCellsHorizontally(this.selection.activeSubDocument, selectedCells, parameters);
        this.splitTableCellsVertically(this.selection.activeSubDocument, selectedCells, parameters);
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(selectedCells[0][0].startParagraphPosition.value).setEndOfLine(false)));
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, firstCell.parentRow.parentTable, this.selection.activeSubDocument);
        this.history.endTransaction();
        return true;
    };
    SplitTableCellsCommand.prototype.splitTableCellsHorizontally = function (subDocument, selectedCells, parameters) {
        var startCell = selectedCells[0][0];
        var table = startCell.parentRow.parentTable;
        if (parameters.isMergeBeforeSplit) {
            var rowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, startCell.startParagraphPosition.value);
            var cellIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows[rowIndex].cells, function (c) { return c.startParagraphPosition.value; }, startCell.startParagraphPosition.value);
            this.splitTableCellsHorizontallyCore(subDocument, table_1.TablePosition.createAndInit(table, rowIndex, cellIndex), parameters.columnCount);
            return;
        }
        var topRowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, startCell.startParagraphPosition.value);
        for (var i = selectedCells.length - 1; i >= 0; i--) {
            var rowIndex = i + topRowIndex;
            var row = table.rows[rowIndex];
            var startCellIndex = search_1.SearchUtils.normedInterpolationIndexOf(row.cells, function (c) { return c.startParagraphPosition.value; }, selectedCells[i][0].startParagraphPosition.value);
            for (var j = selectedCells[i].length - 1; j >= 0; j--) {
                var cellIndex = startCellIndex + j;
                var cell = row.cells[cellIndex];
                if (cell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                    continue;
                this.splitTableCellsHorizontallyCore(subDocument, table_1.TablePosition.createAndInit(table, rowIndex, cellIndex), parameters.columnCount);
            }
        }
    };
    SplitTableCellsCommand.prototype.splitTableCellsVertically = function (subDocument, selectedCells, parameters) {
        if (parameters.rowCount === 1)
            return;
        var columnCount = this.getColumnsCountForSplitVertically(selectedCells[0], parameters);
        var startCell = selectedCells[0][0];
        var topRowIndex = search_1.SearchUtils.normedInterpolationIndexOf(startCell.parentRow.parentTable.rows, function (r) { return r.getStartPosition(); }, startCell.startParagraphPosition.value);
        var startCellIndex = search_1.SearchUtils.normedInterpolationIndexOf(startCell.parentRow.cells, function (c) { return c.startParagraphPosition.value; }, startCell.startParagraphPosition.value);
        this.splitTableCellsVerticallyCore(subDocument, table_1.TablePosition.createAndInit(startCell.parentRow.parentTable, topRowIndex, startCellIndex), parameters.rowCount, columnCount);
    };
    SplitTableCellsCommand.prototype.splitTableCellsVerticallyCore = function (subDocument, position, rowsCount, columnsCount) {
        if (position.cell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
            this.splitMergedCellsVertically(subDocument, position, columnsCount, rowsCount);
            return;
        }
        var table = position.table;
        this.insertRows(subDocument, position, rowsCount);
        var startIndex = position.cellIndex;
        var endIndex = position.cellIndex + columnsCount - 1;
        for (var i = 0, cell = void 0; cell = position.row.cells[i]; i++) {
            if (i < startIndex || i > endIndex) {
                var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(cell);
                var mergeCellPosition = table_utils_1.TableCellUtils.getVerticalSpanCellPositions(table_1.TablePosition.createAndInit(table, position.rowIndex, i), columnIndex)[0];
                var restartRowIndex = mergeCellPosition.rowIndex;
                var continionRowIndex = rowsCount + position.rowIndex - 2;
                for (var i_1 = continionRowIndex; i_1 >= restartRowIndex; i_1--) {
                    var row = table.rows[i_1];
                    var mergeCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(row, columnIndex);
                    this.modelManipulator.table.mergeTwoTableCellsVertically(subDocument, table_1.TablePosition.createAndInit(table, i_1, mergeCellIndex), this.inputPosition);
                }
                this.modelManipulator.table.normalizeRows(subDocument, table);
            }
        }
    };
    SplitTableCellsCommand.prototype.insertRows = function (subDocument, position, rowsCount) {
        var rowHeight = position.row.height;
        this.history.addAndRedo(new table_row_properties_history_items_1.TableRowHeightHistoryItem(this.modelManipulator, subDocument, position.table.index, position.rowIndex, table_units_1.TableHeightUnit.create(rowHeight.value / rowsCount, rowHeight.type)));
        for (var i = 1; i < rowsCount; i++) {
            this.modelManipulator.table.insertRowBelow(subDocument, position.table, position.rowIndex, this.inputPosition);
        }
    };
    SplitTableCellsCommand.prototype.splitMergedCellsVertically = function (subDocument, position, columnsCount, rowsCount) {
        var endIndex = position.cellIndex + columnsCount - 1;
        for (var cellIndex = position.cellIndex; cellIndex <= endIndex; cellIndex++) {
            this.splitMergedCellsVerticallyCore(subDocument, table_1.TablePosition.createAndInit(position.table, position.rowIndex, cellIndex), rowsCount);
        }
    };
    SplitTableCellsCommand.prototype.splitMergedCellsVerticallyCore = function (subDocument, position, rowsCount) {
        var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(position.cell);
        var mergedCellsPositions = table_utils_1.TableCellUtils.getVerticalSpanCellPositions(position, columnIndex);
        if (mergedCellsPositions.length === rowsCount) {
            for (var i = 0, mergedCellsPosition = void 0; mergedCellsPosition = mergedCellsPositions[i]; i++) {
                this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, position.table.index, mergedCellsPosition.rowIndex, mergedCellsPosition.cellIndex, table_base_structures_1.TableCellMergingState.None));
            }
            return;
        }
        var totalRowsCount = mergedCellsPositions.length / rowsCount;
        for (var i = 0, mergedCellsPosition = void 0; mergedCellsPosition = mergedCellsPositions[i]; i++) {
            if (i % totalRowsCount == 0)
                this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, position.table.index, mergedCellsPosition.rowIndex, mergedCellsPosition.cellIndex, table_base_structures_1.TableCellMergingState.Restart));
        }
    };
    SplitTableCellsCommand.prototype.splitTableCellsHorizontallyCore = function (subDocument, position, columnsCount) {
        var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(position.cell);
        var verticalSpanPositions = table_utils_1.TableCellUtils.getVerticalSpanCellPositions(position, columnIndex);
        var spanDelta = columnsCount - position.cell.columnSpan;
        var oldPatternCellWidth = position.cell.preferredWidth;
        if (oldPatternCellWidth.type !== table_units_1.TableWidthUnitType.Nil && oldPatternCellWidth.type !== table_units_1.TableWidthUnitType.Auto) {
            for (var i = verticalSpanPositions.length - 1; i >= 0; i--) {
                var cellPosition = verticalSpanPositions[i];
                var cellWidth = cellPosition.cell.preferredWidth;
                if (cellWidth.type !== table_units_1.TableWidthUnitType.Nil && cellWidth.type !== table_units_1.TableWidthUnitType.Auto)
                    this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManipulator, subDocument, cellPosition.table.index, cellPosition.rowIndex, cellPosition.cellIndex, table_units_1.TableWidthUnit.create(cellWidth.value / columnsCount, cellWidth.type)));
                if (cellPosition.cell.columnSpan > 1)
                    this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellColumnSpanHistoryItem(this.modelManipulator, subDocument, cellPosition.table.index, cellPosition.rowIndex, cellPosition.cellIndex, Math.max(1, cellPosition.cell.columnSpan - (columnsCount - 1))));
            }
        }
        for (var i = 1; i < columnsCount; i++)
            this.modelManipulator.table.insertCellToTheRight(subDocument, position.table, position.rowIndex, position.cellIndex, this.inputPosition, false, false);
        if (spanDelta > 0)
            this.normalizeColumnSpansAfterSplitHorizontally(subDocument, verticalSpanPositions, columnIndex, spanDelta);
    };
    SplitTableCellsCommand.prototype.normalizeColumnSpansAfterSplitHorizontally = function (subDocument, verticalSpanPositions, columnIndex, newColumnsCount) {
        var table = verticalSpanPositions[0].table;
        var startRowIndex = verticalSpanPositions[0].rowIndex;
        var endRowIndex = startRowIndex + verticalSpanPositions.length - 1;
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            if (rowIndex >= startRowIndex && rowIndex <= endRowIndex)
                continue;
            var cellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(row, columnIndex);
            var cell = row.cells[cellIndex];
            if (!cell) {
                if (row.gridBefore >= columnIndex)
                    this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridBeforeHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, row.gridBefore + newColumnsCount));
                else
                    this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridAfterHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, row.gridAfter + newColumnsCount));
            }
            else
                this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellColumnSpanHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, cell.columnSpan + newColumnsCount));
        }
    };
    SplitTableCellsCommand.prototype.getColumnsCountForSplitVertically = function (selectedCells, parameters) {
        if (parameters.isMergeBeforeSplit)
            return parameters.columnCount;
        return selectedCells.length * parameters.columnCount;
    };
    SplitTableCellsCommand.prototype.filterRemovedCells = function (selectedCells) {
        var result = [];
        var table = selectedCells[0][0].parentRow.parentTable;
        for (var i = 0, horCells = void 0; horCells = selectedCells[i]; i++) {
            var row = horCells[0].parentRow;
            if (table.rows.indexOf(row) < 0)
                continue;
            result.push([horCells[0]]);
        }
        return result;
    };
    return SplitTableCellsCommand;
}(table_command_base_1.TableCommandBase));
exports.SplitTableCellsCommand = SplitTableCellsCommand;
