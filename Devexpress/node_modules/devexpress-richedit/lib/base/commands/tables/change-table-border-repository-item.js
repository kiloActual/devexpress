"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var control_1 = require("../../../core/model/options/control");
var color_2 = require("@devexpress/utils/lib/utils/color");
var common_1 = require("@devexpress/utils/lib/utils/common");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTableBorderColorRepositoryItemCommand = (function (_super) {
    tslib_1.__extends(ChangeTableBorderColorRepositoryItemCommand, _super);
    function ChangeTableBorderColorRepositoryItemCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableBorderColorRepositoryItemCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(true, false);
        var tableInfo = this.selection.tableInfo;
        state.enabled = this.isEnabled() && tableInfo.extendedData.numRows > 0;
        state.denyUpdateValue = true;
        return state;
    };
    ChangeTableBorderColorRepositoryItemCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableBorderColorRepositoryItemCommand.prototype.executeCore = function (_state, options) {
        this.control.modelManager.model.repositoryBorderItem.color = this.control.modelManager.model.colorProvider.getModelColorFromRgba(options.param);
        return true;
    };
    ChangeTableBorderColorRepositoryItemCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return common_1.isNumber(parameter) ? parameter :
            (!parameter || parameter == color_1.ColorHelper.AUTOMATIC_COLOR.toString() ?
                color_1.ColorHelper.AUTOMATIC_COLOR : color_2.ColorUtils.fromString(parameter));
    };
    return ChangeTableBorderColorRepositoryItemCommand;
}(command_base_1.CommandBase));
exports.ChangeTableBorderColorRepositoryItemCommand = ChangeTableBorderColorRepositoryItemCommand;
var ChangeTableBorderWidthRepositoryItemCommand = (function (_super) {
    tslib_1.__extends(ChangeTableBorderWidthRepositoryItemCommand, _super);
    function ChangeTableBorderWidthRepositoryItemCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableBorderWidthRepositoryItemCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(true, false);
        state.enabled = this.isEnabled() && this.selection.tableInfo.extendedData.numRows > 0;
        state.value = this.control.modelManager.model.repositoryBorderItem.width;
        return state;
    };
    ChangeTableBorderWidthRepositoryItemCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableBorderWidthRepositoryItemCommand.prototype.executeCore = function (_state, options) {
        this.control.modelManager.model.repositoryBorderItem.width = options.param;
        return true;
    };
    return ChangeTableBorderWidthRepositoryItemCommand;
}(command_base_1.CommandBase));
exports.ChangeTableBorderWidthRepositoryItemCommand = ChangeTableBorderWidthRepositoryItemCommand;
var ChangeTableBorderStyleRepositoryItemCommand = (function (_super) {
    tslib_1.__extends(ChangeTableBorderStyleRepositoryItemCommand, _super);
    function ChangeTableBorderStyleRepositoryItemCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableBorderStyleRepositoryItemCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(true, false);
        state.enabled = this.isEnabled() && this.selection.tableInfo.extendedData.numRows > 0;
        state.value = this.control.modelManager.model.repositoryBorderItem.style;
        return state;
    };
    ChangeTableBorderStyleRepositoryItemCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableBorderStyleRepositoryItemCommand.prototype.executeCore = function (_state, options) {
        this.control.modelManager.model.repositoryBorderItem.style = options.param;
        return true;
    };
    return ChangeTableBorderStyleRepositoryItemCommand;
}(command_base_1.CommandBase));
exports.ChangeTableBorderStyleRepositoryItemCommand = ChangeTableBorderStyleRepositoryItemCommand;
