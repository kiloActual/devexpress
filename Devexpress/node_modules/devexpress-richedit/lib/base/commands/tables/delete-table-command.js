"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var DeleteTableCommand = (function (_super) {
    tslib_1.__extends(DeleteTableCommand, _super);
    function DeleteTableCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTableCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DeleteTableCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this)
            && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables)
            && this.selection.tableInfo.extendedData.isSquare;
    };
    DeleteTableCommand.prototype.executeCore = function (_state, options) {
        this.history.beginTransaction();
        var tableInfo = this.selection.tableInfo;
        this.modelManipulator.table.removeTableWithContent(options.subDocument, tableInfo.table);
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(tableInfo.table.getStartPosition()).setEndOfLine(false)));
        this.history.endTransaction();
        return true;
    };
    return DeleteTableCommand;
}(table_command_base_1.TableCommandBase));
exports.DeleteTableCommand = DeleteTableCommand;
