"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTableCellWidthCommand = (function (_super) {
    tslib_1.__extends(ChangeTableCellWidthCommand, _super);
    function ChangeTableCellWidthCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableCellWidthCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(true);
        var tableInfo = this.selection.tableInfo;
        state.enabled = this.isEnabled() && tableInfo.extendedData.numRows > 0;
        if (state.enabled) {
            var template_1 = tableInfo.table ? tableInfo.extendedData.firstCell.preferredWidth : null;
            if (tableInfo.extendedData.allOfCells(function (cellInfo) { return cellInfo.cell.preferredWidth.equals(template_1); }))
                state.value = template_1;
        }
        return state;
    };
    ChangeTableCellWidthCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableCellWidthCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var tableInfo = this.selection.tableInfo;
        var changed = false;
        tableInfo.extendedData.foreach(function () { }, function (cellInfo, rowInfo) {
            if (!cellInfo.cell.preferredWidth.equals(options.param)) {
                _this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(_this.modelManipulator, options.subDocument, tableInfo.table.index, rowInfo.rowIndex, cellInfo.cellIndex, options.param.clone()));
                changed = true;
            }
        });
        return changed;
    };
    return ChangeTableCellWidthCommand;
}(command_base_1.CommandBase));
exports.ChangeTableCellWidthCommand = ChangeTableCellWidthCommand;
