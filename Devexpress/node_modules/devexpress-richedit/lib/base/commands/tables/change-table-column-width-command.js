"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var table_utils_ex_1 = require("../../rich-utils/table-utils-ex");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTableColumnWidthCommand = (function (_super) {
    tslib_1.__extends(ChangeTableColumnWidthCommand, _super);
    function ChangeTableColumnWidthCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableColumnWidthCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(true);
        var tableInfo = this.selection.tableInfo;
        state.enabled = this.isEnabled() && tableInfo.extendedData.numRows > 0;
        var width;
        if (state.enabled) {
            var table = tableInfo.table;
            var columnsRange = table_utils_ex_1.TableUtilsEx.getColumnsRangeBySelectedCells(tableInfo.extendedData);
            for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
                var cellIndices = table_utils_1.TableCellUtils.getCellIndicesByColumnsRange(row, columnsRange);
                for (var i = cellIndices.length - 1; i >= 0; i--) {
                    var cell = table.rows[rowIndex].cells[cellIndices[i]];
                    if (width === undefined)
                        width = cell.preferredWidth.clone();
                    else if (width && width.equals(cell.preferredWidth))
                        continue;
                    else
                        width = null;
                }
            }
        }
        state.value = width;
        return state;
    };
    ChangeTableColumnWidthCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableColumnWidthCommand.prototype.executeCore = function (_state, options) {
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        var changed = false;
        var columnsRange = table_utils_ex_1.TableUtilsEx.getColumnsRangeBySelectedCells(tableInfo.extendedData);
        var subDocument = options.subDocument;
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            var cellIndices = table_utils_1.TableCellUtils.getCellIndicesByColumnsRange(row, columnsRange);
            for (var i = cellIndices.length - 1; i >= 0; i--) {
                var cell = table.rows[rowIndex].cells[cellIndices[i]];
                if (!cell.preferredWidth.equals(options.param)) {
                    this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndices[i], options.param.clone()));
                    changed = true;
                }
            }
        }
        return changed;
    };
    return ChangeTableColumnWidthCommand;
}(command_base_1.CommandBase));
exports.ChangeTableColumnWidthCommand = ChangeTableColumnWidthCommand;
