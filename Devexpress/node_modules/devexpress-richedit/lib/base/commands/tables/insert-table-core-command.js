"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_position_1 = require("../../../core/layout/layout-position");
var layout_column_1 = require("../../../core/layout/main-structures/layout-column");
var control_1 = require("../../../core/model/options/control");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertTableCoreCommand = (function (_super) {
    tslib_1.__extends(InsertTableCoreCommand, _super);
    function InsertTableCoreCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableCoreCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertTableCoreCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    InsertTableCoreCommand.prototype.executeCore = function (_state, options) {
        var parameter = options.param;
        var subDocument = this.selection.activeSubDocument;
        var position = this.selection.intervals[0].start;
        var lp = layout_position_1.LayoutPosition.ensure(this.control.layoutFormatterManager, this.control.selection, subDocument, position, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        var currentTable = table_1.Table.getTableByPosition(subDocument.tables, position, true);
        var availableWidth = currentTable ? lp.row.tableCellInfo.avaliableContentWidth :
            layout_column_1.LayoutColumn.findSectionColumnWithMinimumWidth(lp.pageArea.columns);
        this.history.beginTransaction();
        var table = this.modelManipulator.table.insertTable(subDocument, parameter.rowCount, parameter.cellCount, position, unit_converter_1.UnitConverter.pixelsToTwipsF(availableWidth), this.inputPosition, true);
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(table.getStartPosition()).setEndOfLine(false)));
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, subDocument);
        this.history.endTransaction();
        return true;
    };
    return InsertTableCoreCommand;
}(command_base_1.CommandBase));
exports.InsertTableCoreCommand = InsertTableCoreCommand;
