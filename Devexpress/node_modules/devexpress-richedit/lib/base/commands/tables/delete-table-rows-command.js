"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var DeleteTableRowsCommand = (function (_super) {
    tslib_1.__extends(DeleteTableRowsCommand, _super);
    function DeleteTableRowsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTableRowsCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DeleteTableRowsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this)
            && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables)
            && this.selection.tableInfo.rawData.isSquare;
    };
    DeleteTableRowsCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var tableInfo = this.selection.tableInfo;
        var subDocument = options.subDocument;
        var table = tableInfo.table;
        if (tableInfo.rawData.numRows === table.rows.length) {
            this.modelManipulator.table.removeTableWithContent(subDocument, table);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(table.getStartPosition()).setEndOfLine(false)));
        }
        else {
            var startPosition = tableInfo.rawData.firstCell.startParagraphPosition.value;
            list_1.ListUtils.reverseForEach(tableInfo.rawData.rows, function (rowInfo) {
                return _this.modelManipulator.table.removeTableRowWithContent(subDocument, table, rowInfo.rowIndex);
            });
            this.modelManipulator.table.normalizeCellColumnSpans(subDocument, table, true);
            table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, options.subDocument);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(startPosition).setEndOfLine(false)));
        }
        this.history.endTransaction();
        return true;
    };
    return DeleteTableRowsCommand;
}(table_command_base_1.TableCommandBase));
exports.DeleteTableRowsCommand = DeleteTableRowsCommand;
