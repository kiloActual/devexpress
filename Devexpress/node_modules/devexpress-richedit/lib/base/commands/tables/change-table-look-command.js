"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_properties_history_items_1 = require("../../../core/model/history/items/tables/table-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTableLookCommandBase = (function (_super) {
    tslib_1.__extends(ChangeTableLookCommandBase, _super);
    function ChangeTableLookCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableLookCommandBase.prototype.getState = function () {
        var tableInfo = this.selection.tableInfo;
        var state = new command_states_1.SimpleCommandState(this.isEnabled() && tableInfo.extendedData.numRows > 0, false);
        if (state.enabled)
            state.value = this.getValue(tableInfo.table);
        return state;
    };
    ChangeTableLookCommandBase.prototype.getValue = function (table) {
        var value = !!(table.lookTypes & this.option);
        return this.isInvertedTableLookType() ? !value : value;
    };
    ChangeTableLookCommandBase.prototype.isInvertedTableLookType = function () {
        return false;
    };
    ChangeTableLookCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ChangeTableLookCommandBase.prototype.executeCore = function (_state, options) {
        var table = this.selection.tableInfo.table;
        if (options.param === undefined || options.param === null)
            options.param = !this.getValue(table);
        this.history.beginTransaction();
        this.history.addAndRedo(new table_properties_history_items_1.TableLookTypesHistoryItem(this.modelManipulator, options.subDocument, table.index, this.getNewValue(table, options.param)));
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, options.subDocument);
        this.history.endTransaction();
        return true;
    };
    ChangeTableLookCommandBase.prototype.getNewValue = function (table, parameter) {
        parameter = this.isInvertedTableLookType() ? !parameter : parameter;
        var value = table.lookTypes;
        if (parameter)
            value |= this.option;
        else
            value &= ~this.option;
        return value;
    };
    ChangeTableLookCommandBase.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.ToggleFirstRow] = true,
            _a[client_command_1.RichEditClientCommand.ToggleLastRow] = true,
            _a[client_command_1.RichEditClientCommand.ToggleFirstColumn] = true,
            _a[client_command_1.RichEditClientCommand.ToggleLastColumn] = true,
            _a[client_command_1.RichEditClientCommand.ToggleBandedRows] = true,
            _a[client_command_1.RichEditClientCommand.ToggleBandedColumn] = true,
            _a[client_command_1.RichEditClientCommand.ChangeTableLook] = true,
            _a;
    };
    return ChangeTableLookCommandBase;
}(command_base_1.CommandBase));
exports.ChangeTableLookCommandBase = ChangeTableLookCommandBase;
var ChangeTableLookCommand = (function (_super) {
    tslib_1.__extends(ChangeTableLookCommand, _super);
    function ChangeTableLookCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTableLookCommand.prototype.getValue = function (table) {
        return table.lookTypes;
    };
    ChangeTableLookCommand.prototype.getNewValue = function (_table, parameter) {
        return parameter;
    };
    return ChangeTableLookCommand;
}(ChangeTableLookCommandBase));
exports.ChangeTableLookCommand = ChangeTableLookCommand;
var ToggleFirstRowCommand = (function (_super) {
    tslib_1.__extends(ToggleFirstRowCommand, _super);
    function ToggleFirstRowCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.ApplyFirstRow;
        return _this;
    }
    return ToggleFirstRowCommand;
}(ChangeTableLookCommandBase));
exports.ToggleFirstRowCommand = ToggleFirstRowCommand;
var ToggleLastRowCommand = (function (_super) {
    tslib_1.__extends(ToggleLastRowCommand, _super);
    function ToggleLastRowCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.ApplyLastRow;
        return _this;
    }
    return ToggleLastRowCommand;
}(ChangeTableLookCommandBase));
exports.ToggleLastRowCommand = ToggleLastRowCommand;
var ToggleFirstColumnCommand = (function (_super) {
    tslib_1.__extends(ToggleFirstColumnCommand, _super);
    function ToggleFirstColumnCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.ApplyFirstColumn;
        return _this;
    }
    return ToggleFirstColumnCommand;
}(ChangeTableLookCommandBase));
exports.ToggleFirstColumnCommand = ToggleFirstColumnCommand;
var ToggleLastColumnCommand = (function (_super) {
    tslib_1.__extends(ToggleLastColumnCommand, _super);
    function ToggleLastColumnCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.ApplyLastColumn;
        return _this;
    }
    return ToggleLastColumnCommand;
}(ChangeTableLookCommandBase));
exports.ToggleLastColumnCommand = ToggleLastColumnCommand;
var ToggleBandedRowsCommand = (function (_super) {
    tslib_1.__extends(ToggleBandedRowsCommand, _super);
    function ToggleBandedRowsCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.DoNotApplyRowBanding;
        return _this;
    }
    ToggleBandedRowsCommand.prototype.isInvertedTableLookType = function () {
        return true;
    };
    return ToggleBandedRowsCommand;
}(ChangeTableLookCommandBase));
exports.ToggleBandedRowsCommand = ToggleBandedRowsCommand;
var ToggleBandedColumnCommand = (function (_super) {
    tslib_1.__extends(ToggleBandedColumnCommand, _super);
    function ToggleBandedColumnCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.option = table_base_structures_1.TableLookTypes.DoNotApplyColumnBanding;
        return _this;
    }
    ToggleBandedColumnCommand.prototype.isInvertedTableLookType = function () {
        return true;
    };
    return ToggleBandedColumnCommand;
}(ChangeTableLookCommandBase));
exports.ToggleBandedColumnCommand = ToggleBandedColumnCommand;
