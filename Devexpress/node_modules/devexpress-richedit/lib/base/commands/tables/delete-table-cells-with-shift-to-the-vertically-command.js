"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var merge_table_cells_operation_1 = require("../../../core/model/manipulators/tables/merge-table-cells-operation");
var control_1 = require("../../../core/model/options/control");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var DeleteTableCellsWithShiftToTheVerticallyCommand = (function (_super) {
    tslib_1.__extends(DeleteTableCellsWithShiftToTheVerticallyCommand, _super);
    function DeleteTableCellsWithShiftToTheVerticallyCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTableCellsWithShiftToTheVerticallyCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DeleteTableCellsWithShiftToTheVerticallyCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this)
            && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables)
            && this.selection.tableInfo.rawData.isSquare;
    };
    DeleteTableCellsWithShiftToTheVerticallyCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var subDocument = options.subDocument;
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        if (tableInfo.extendedData.isSelectedEntireTable) {
            this.modelManipulator.table.removeTableWithContent(subDocument, table);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(table.getStartPosition()).setEndOfLine(false)));
        }
        else {
            var startPosition = tableInfo.rawData.firstCell.startParagraphPosition.value;
            list_1.ListUtils.reverseForEach(tableInfo.rawData.rows, function (rowInfo) {
                for (var _i = 0, _a = rowInfo.cells; _i < _a.length; _i++) {
                    var cellInfo = _a[_i];
                    _this.removeTableCell(subDocument, table, rowInfo.rowIndex, cellInfo.cellIndex);
                }
            });
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(startPosition).setEndOfLine(false)));
            table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, options.subDocument);
        }
        this.history.endTransaction();
        return true;
    };
    DeleteTableCellsWithShiftToTheVerticallyCommand.prototype.removeTableCell = function (subDocument, table, rowIndex, cellIndex) {
        var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(table.rows[rowIndex].cells[cellIndex]);
        var rowsCount = table.rows.length;
        for (var i = rowIndex; i < rowsCount; i++) {
            var cellIndex_1 = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(table.rows[rowIndex], columnIndex);
            if (table.rows[i].cells[cellIndex_1])
                new merge_table_cells_operation_1.DeleteOneTableCellWithShiftToTheUpOperation(this.control.modelManager, subDocument)
                    .execute(table_1.TablePosition.createAndInit(table, i, cellIndex_1), false, this.inputPosition);
        }
    };
    return DeleteTableCellsWithShiftToTheVerticallyCommand;
}(table_command_base_1.TableCommandBase));
exports.DeleteTableCellsWithShiftToTheVerticallyCommand = DeleteTableCellsWithShiftToTheVerticallyCommand;
