"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_position_1 = require("../../../core/layout/layout-position");
var layout_column_1 = require("../../../core/layout/main-structures/layout-column");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var table_properties_history_items_1 = require("../../../core/model/history/items/tables/table-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var AutoFitCommandBase = (function (_super) {
    tslib_1.__extends(AutoFitCommandBase, _super);
    function AutoFitCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoFitCommandBase.prototype.getState = function () {
        if (this.isEnabled()) {
            var tbl = this.selection.tableInfo.table;
            if (tbl)
                return new command_states_1.SimpleCommandState(true, tbl);
        }
        return new command_states_1.SimpleCommandState(false);
    };
    AutoFitCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    return AutoFitCommandBase;
}(table_command_base_1.TableCommandBase));
exports.AutoFitCommandBase = AutoFitCommandBase;
var AutoFitContentsCommand = (function (_super) {
    tslib_1.__extends(AutoFitContentsCommand, _super);
    function AutoFitContentsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoFitContentsCommand.prototype.executeCore = function (state, parameter) {
        var _this = this;
        var table = state.value;
        var history = this.history;
        var subDocument = parameter.subDocument;
        history.beginTransaction();
        history.addAndRedo(new table_properties_history_items_1.TableLayoutTypeHistoryItem(this.modelManipulator, subDocument, table.index, table_base_structures_1.TableLayoutType.Autofit, true));
        history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, table_units_1.TableWidthUnit.create(0, table_units_1.TableWidthUnitType.Auto)));
        this.modelManipulator.table.forEachCell(table, function (pos, _cellSpan) {
            history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(_this.modelManipulator, subDocument, table.index, pos.rowIndex, pos.cellIndex, table_units_1.TableWidthUnit.create(0, table_units_1.TableWidthUnitType.Auto)));
        });
        history.endTransaction();
        return true;
    };
    return AutoFitContentsCommand;
}(AutoFitCommandBase));
exports.AutoFitContentsCommand = AutoFitContentsCommand;
var AutoFitWindowCommand = (function (_super) {
    tslib_1.__extends(AutoFitWindowCommand, _super);
    function AutoFitWindowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoFitWindowCommand.prototype.executeCore = function (state, parameter) {
        var _this = this;
        var table = state.value;
        var history = this.history;
        var subDocument = parameter.subDocument;
        history.beginTransaction();
        history.addAndRedo(new table_properties_history_items_1.TableLayoutTypeHistoryItem(this.modelManipulator, subDocument, table.index, table_base_structures_1.TableLayoutType.Autofit, true));
        history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, table_units_1.TableWidthUnit.create(table_units_1.TableWidthUnit.MAX_PERCENT_WIDTH, table_units_1.TableWidthUnitType.FiftiethsOfPercent)));
        var widths = this.modelManipulator.table.distributeWidthsToAllColumns(table, table_units_1.TableWidthUnit.MAX_PERCENT_WIDTH);
        this.modelManipulator.table.forEachCell(table, function (pos, cellSpan) {
            history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(_this.modelManipulator, subDocument, table.index, pos.rowIndex, pos.cellIndex, table_units_1.TableWidthUnit.create(_this.modelManipulator.table.fullCellWidth(widths, cellSpan, pos.cell.columnSpan), table_units_1.TableWidthUnitType.FiftiethsOfPercent)));
        });
        history.endTransaction();
        return true;
    };
    return AutoFitWindowCommand;
}(AutoFitCommandBase));
exports.AutoFitWindowCommand = AutoFitWindowCommand;
var FixedColumnWidthCommand = (function (_super) {
    tslib_1.__extends(FixedColumnWidthCommand, _super);
    function FixedColumnWidthCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FixedColumnWidthCommand.prototype.executeCore = function (state, parameter) {
        var _this = this;
        var table = state.value;
        var history = this.history;
        var subDocument = parameter.subDocument;
        var lp = layout_position_1.LayoutPosition.ensure(this.control.layoutFormatterManager, this.selection, subDocument, table.getStartPosition(), document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        var grid = this.getGrid(table, lp);
        history.beginTransaction();
        history.addAndRedo(new table_properties_history_items_1.TableLayoutTypeHistoryItem(this.modelManipulator, subDocument, table.index, table_base_structures_1.TableLayoutType.Fixed, true));
        history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, table_units_1.TableWidthUnit.create(0, table_units_1.TableWidthUnitType.Auto)));
        var widths = grid ?
            list_1.ListUtils.reducedMap(grid.columns.width, function (width) {
                var w = unit_converter_1.UnitConverter.pixelsToTwipsF(width);
                return w === 0 ? null : w;
            }) :
            this.modelManipulator.table.distributeWidthsToAllColumns(table, unit_converter_1.UnitConverter.pixelsToTwipsF((this.getAvaliableWidth_px(table, lp))));
        this.modelManipulator.table.forEachCell(table, function (pos, cellSpan) {
            history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(_this.modelManipulator, subDocument, table.index, pos.rowIndex, pos.cellIndex, table_units_1.TableWidthUnit.create(_this.modelManipulator.table.fullCellWidth(widths, cellSpan, pos.cell.columnSpan), table_units_1.TableWidthUnitType.ModelUnits)));
        });
        history.endTransaction();
        return true;
    };
    FixedColumnWidthCommand.prototype.getGrid = function (table, lp) {
        var tableInfo = lp.column.tablesInfo ? list_1.ListUtils.elementBy(lp.column.tablesInfo, function (info) { return info.logicInfo.grid.table.index == table.index; }) : null;
        return tableInfo ? tableInfo.logicInfo.grid : null;
    };
    FixedColumnWidthCommand.prototype.getAvaliableWidth_px = function (table, lp) {
        if (table.nestedLevel == 0)
            return layout_column_1.LayoutColumn.findSectionColumnWithMinimumWidth(lp.pageArea.columns);
        var cell = lp.row.tableCellInfo;
        while (cell.parentRow.parentTable.logicInfo.grid.table.nestedLevel != table.nestedLevel - 1)
            cell = cell.parentRow.parentTable.parentCell;
        return cell.avaliableContentWidth;
    };
    return FixedColumnWidthCommand;
}(AutoFitCommandBase));
exports.FixedColumnWidthCommand = FixedColumnWidthCommand;
