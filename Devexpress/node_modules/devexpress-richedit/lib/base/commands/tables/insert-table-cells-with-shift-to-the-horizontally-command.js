"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertTableCellWithShiftToTheHorizontallyCommandBase = (function (_super) {
    tslib_1.__extends(InsertTableCellWithShiftToTheHorizontallyCommandBase, _super);
    function InsertTableCellWithShiftToTheHorizontallyCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableCellWithShiftToTheHorizontallyCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertTableCellWithShiftToTheHorizontallyCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) && this.selection.tableInfo.extendedData.numRows > 0;
    };
    InsertTableCellWithShiftToTheHorizontallyCommandBase.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var tblInfo = this.selection.tableInfo;
        var table = tblInfo.table;
        var subDocument = options.subDocument;
        var newCells = [];
        tblInfo.extendedData.foreach(function () { }, function (cellInfo, rowInfo) {
            if (cellInfo.cell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                newCells.push(_this.insertTableCell(subDocument, table, rowInfo.rowIndex, cellInfo.cellIndex));
        });
        this.modelManipulator.table.normalizeVerticalSpans(subDocument, table);
        var newCellIntervals = [];
        for (var i = 0, newCell = void 0; newCell = newCells[i]; i++)
            newCellIntervals.push(newCell.interval);
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, subDocument);
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setIntervals(newCellIntervals).setEndOfLine(false)));
        this.history.endTransaction();
        return true;
    };
    return InsertTableCellWithShiftToTheHorizontallyCommandBase;
}(command_base_1.CommandBase));
exports.InsertTableCellWithShiftToTheHorizontallyCommandBase = InsertTableCellWithShiftToTheHorizontallyCommandBase;
var InsertTableCellWithShiftToTheLeftCommand = (function (_super) {
    tslib_1.__extends(InsertTableCellWithShiftToTheLeftCommand, _super);
    function InsertTableCellWithShiftToTheLeftCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableCellWithShiftToTheLeftCommand.prototype.insertTableCell = function (subDocument, table, rowIndex, cellIndex) {
        this.modelManipulator.table.insertCellToTheLeft(subDocument, table, rowIndex, cellIndex, this.inputPosition);
        return table.rows[rowIndex].cells[cellIndex];
    };
    return InsertTableCellWithShiftToTheLeftCommand;
}(InsertTableCellWithShiftToTheHorizontallyCommandBase));
exports.InsertTableCellWithShiftToTheLeftCommand = InsertTableCellWithShiftToTheLeftCommand;
