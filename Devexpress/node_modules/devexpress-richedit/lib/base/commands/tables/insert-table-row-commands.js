"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var InsertTableRowCommandBase = (function (_super) {
    tslib_1.__extends(InsertTableRowCommandBase, _super);
    function InsertTableRowCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableRowCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertTableRowCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) &&
            this.selection.tableInfo.isSelected && this.selection.tableInfo.rawData.withoutGapByRows;
    };
    InsertTableRowCommandBase.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var subDocument = options.subDocument;
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        var rowCount = tableInfo.rawData.numRows;
        var patternRowIndex = this.getPatternRowIndex(tableInfo);
        var newRows = list_1.ListUtils.initByCallback(rowCount, function (rowOffset) { return _this.insertTableRowCore(subDocument, table, patternRowIndex + rowOffset); });
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(fixed_1.FixedInterval.fromPositions(newRows[0].getStartPosition(), list_1.ListUtils.last(newRows).getEndPosition())).setEndOfLine(false)));
        table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, subDocument);
        this.history.endTransaction();
        return true;
    };
    return InsertTableRowCommandBase;
}(table_command_base_1.TableCommandBase));
exports.InsertTableRowCommandBase = InsertTableRowCommandBase;
var InsertTableRowAboveCommand = (function (_super) {
    tslib_1.__extends(InsertTableRowAboveCommand, _super);
    function InsertTableRowAboveCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableRowAboveCommand.prototype.insertTableRowCore = function (subDocument, table, patternRowIndex) {
        this.modelManipulator.table.insertRowAbove(subDocument, table, patternRowIndex, this.inputPosition);
        return table.rows[patternRowIndex];
    };
    InsertTableRowAboveCommand.prototype.getPatternRowIndex = function (tableInfo) {
        return tableInfo.rawData.rows[0].rowIndex;
    };
    return InsertTableRowAboveCommand;
}(InsertTableRowCommandBase));
exports.InsertTableRowAboveCommand = InsertTableRowAboveCommand;
var InsertTableRowBelowCommand = (function (_super) {
    tslib_1.__extends(InsertTableRowBelowCommand, _super);
    function InsertTableRowBelowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableRowBelowCommand.prototype.insertTableRowCore = function (subDocument, table, patternRowIndex) {
        this.modelManipulator.table.insertRowBelow(subDocument, table, patternRowIndex, this.inputPosition);
        return table.rows[patternRowIndex + 1];
    };
    InsertTableRowBelowCommand.prototype.getPatternRowIndex = function (tableInfo) {
        return tableInfo.rawData.lastRowInfo.rowIndex;
    };
    return InsertTableRowBelowCommand;
}(InsertTableRowCommandBase));
exports.InsertTableRowBelowCommand = InsertTableRowBelowCommand;
