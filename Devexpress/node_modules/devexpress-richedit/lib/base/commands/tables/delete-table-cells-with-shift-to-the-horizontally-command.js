"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var table_command_base_1 = require("./table-command-base");
var DeleteTableCellsWithShiftToTheHorizontallyCommand = (function (_super) {
    tslib_1.__extends(DeleteTableCellsWithShiftToTheHorizontallyCommand, _super);
    function DeleteTableCellsWithShiftToTheHorizontallyCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTableCellsWithShiftToTheHorizontallyCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DeleteTableCellsWithShiftToTheHorizontallyCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this)
            && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables)
            && this.selection.tableInfo.extendedData.isSquare;
    };
    DeleteTableCellsWithShiftToTheHorizontallyCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.beginTransaction();
        var tableInfo = this.selection.tableInfo;
        var subDocument = options.subDocument;
        var table = tableInfo.table;
        if (tableInfo.extendedData.isSelectedEntireTable) {
            this.modelManipulator.table.removeTableWithContent(subDocument, table);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(table.getStartPosition()).setEndOfLine(false)));
        }
        else {
            var startPosition = tableInfo.extendedData.firstCell.startParagraphPosition.value;
            list_1.ListUtils.reverseForEach(tableInfo.extendedData.rows, function (rowInfo) {
                var row = table.rows[rowInfo.rowIndex];
                if (row.cells.length === rowInfo.cells.length)
                    _this.deleteEntireRow(subDocument, table, rowInfo.rowIndex);
                else {
                    list_1.ListUtils.reverseForEach(rowInfo.cells, function (cellInfo) {
                        if (cellInfo.cell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue)
                            _this.deleteTableCell(subDocument, table, rowInfo.rowIndex, cellInfo.cellIndex);
                    });
                }
            });
            this.modelManipulator.table.normalizeVerticalSpans(subDocument, table);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(startPosition).setEndOfLine(false)));
            table_utils_1.TableConditionalFormattingCalculator.updateTable(this.control.modelManager, table, options.subDocument);
        }
        this.history.endTransaction();
        return true;
    };
    DeleteTableCellsWithShiftToTheHorizontallyCommand.prototype.deleteEntireRow = function (subDocument, table, rowIndex) {
        this.modelManipulator.table.removeTableRowWithContent(subDocument, table, rowIndex);
        this.modelManipulator.table.normalizeCellColumnSpans(subDocument, table, true);
    };
    DeleteTableCellsWithShiftToTheHorizontallyCommand.prototype.deleteTableCell = function (subDocument, table, rowIndex, cellIndex) {
        this.modelManipulator.table.removeTableCellWithContent(subDocument, table, rowIndex, cellIndex);
        this.modelManipulator.table.normalizeTableGrid(subDocument, table);
        this.modelManipulator.table.normalizeCellColumnSpans(subDocument, table, false);
    };
    return DeleteTableCellsWithShiftToTheHorizontallyCommand;
}(table_command_base_1.TableCommandBase));
exports.DeleteTableCellsWithShiftToTheHorizontallyCommand = DeleteTableCellsWithShiftToTheHorizontallyCommand;
