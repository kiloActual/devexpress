"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_1 = require("@devexpress/utils/lib/browser");
var errors_1 = require("@devexpress/utils/lib/errors");
var key_1 = require("@devexpress/utils/lib/utils/key");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("./client-command");
var clipboard_commands_1 = require("./text/clipboard-commands");
var ShortcutManager = (function () {
    function ShortcutManager(commandManager, control) {
        this.knownNonCommandShortcuts = {};
        this.control = control;
        this.init(commandManager);
    }
    ShortcutManager.prototype.init = function (commandManager) {
        this.knownNonCommandShortcuts = {};
        this.knownNonCommandShortcuts[key_1.KeyCode.Esc] = true;
        this.shortcuts = {};
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ClearFormatting, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Space], [key_1.ModifierKey.Ctrl | key_1.KeyCode.Space]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CopySelection, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_c], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_c, key_1.KeyCode.F3]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CreateField, [key_1.ModifierKey.Ctrl | key_1.KeyCode.F9], [key_1.ModifierKey.Meta | key_1.KeyCode.F9]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CutSelection, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_x], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_x, key_1.KeyCode.F2]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.DecreaseIndent, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Key_m], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Key_m]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.DocumentEnd, [key_1.ModifierKey.Ctrl | key_1.KeyCode.End], [key_1.ModifierKey.Meta | key_1.KeyCode.End]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.DocumentStart, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Home], [key_1.ModifierKey.Meta | key_1.KeyCode.Home]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendDocumentEnd, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.End], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.End]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendDocumentStart, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Home], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Home]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToEndParagraph, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Down], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Down]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToNextWord, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Right], [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Right]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToPrevWord, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Left], [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Left]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToStartParagraph, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Up], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Up]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendLineDown, [key_1.ModifierKey.Shift | key_1.KeyCode.Down], [key_1.ModifierKey.Shift | key_1.KeyCode.Down]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendLineEnd, [key_1.ModifierKey.Shift | key_1.KeyCode.End], [key_1.ModifierKey.Shift | key_1.KeyCode.End]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendLineStart, [key_1.ModifierKey.Shift | key_1.KeyCode.Home], [key_1.ModifierKey.Shift | key_1.KeyCode.Home]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendLineUp, [key_1.ModifierKey.Shift | key_1.KeyCode.Up], [key_1.ModifierKey.Shift | key_1.KeyCode.Up]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendNextCharacter, [key_1.ModifierKey.Shift | key_1.KeyCode.Right], [key_1.ModifierKey.Shift | key_1.KeyCode.Right]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendNextPage, [key_1.ModifierKey.Shift | key_1.KeyCode.PageDown], [key_1.ModifierKey.Shift | key_1.KeyCode.PageDown]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendPreviousCharacter, [key_1.ModifierKey.Shift | key_1.KeyCode.Left], [key_1.ModifierKey.Shift | key_1.KeyCode.Left]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendPreviousPage, [key_1.ModifierKey.Shift | key_1.KeyCode.PageUp], [key_1.ModifierKey.Shift | key_1.KeyCode.PageUp]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.FullScreen, [key_1.KeyCode.F11, key_1.ModifierKey.Ctrl | key_1.KeyCode.F10], [key_1.KeyCode.F11]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToEndParagraph, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Down], [key_1.ModifierKey.Meta | key_1.KeyCode.Down]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToNextWord, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Right], [key_1.ModifierKey.Meta | key_1.KeyCode.Right]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToPrevWord, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Left], [key_1.ModifierKey.Meta | key_1.KeyCode.Left]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToStartParagraph, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Up], [key_1.ModifierKey.Meta | key_1.KeyCode.Up]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.IncreaseIndent, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_m], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_m]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertColumnBreak, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Enter], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Enter]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertLineBreak, [key_1.ModifierKey.Shift | key_1.KeyCode.Enter], [key_1.ModifierKey.Shift | key_1.KeyCode.Enter]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertPageBreak, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Enter], [key_1.ModifierKey.Meta | key_1.KeyCode.Enter]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertParagraph, [key_1.KeyCode.Enter], [key_1.KeyCode.Enter]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertShiftTabMark, [key_1.ModifierKey.Shift | key_1.KeyCode.Tab], [key_1.ModifierKey.Shift | key_1.KeyCode.Tab]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertSpace, [key_1.KeyCode.Space], [key_1.KeyCode.Space, key_1.ModifierKey.Shift | key_1.KeyCode.Space]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertTabMark, [key_1.KeyCode.Tab], [key_1.KeyCode.Tab]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.LineDown, [key_1.KeyCode.Down], [key_1.KeyCode.Down]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.LineEnd, [key_1.KeyCode.End], [key_1.KeyCode.End]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.LineStart, [key_1.KeyCode.Home], [key_1.KeyCode.Home]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.LineUp, [key_1.KeyCode.Up], [key_1.KeyCode.Up]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.NextCharacter, [key_1.KeyCode.Right], [key_1.KeyCode.Right]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.NextPage, [key_1.KeyCode.PageDown], [key_1.KeyCode.PageDown]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.PasteSelection, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_v, key_1.ModifierKey.Shift | key_1.KeyCode.Insert], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_v, key_1.KeyCode.F4]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.PreviousCharacter, [key_1.KeyCode.Left], [key_1.KeyCode.Left]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.PreviousPage, [key_1.KeyCode.PageUp], [key_1.KeyCode.PageUp]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.Redo, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_y], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_y]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.SelectAll, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_a], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_a]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.SetDoubleParagraphSpacing, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_2], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_2]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.SetSesquialteralParagraphSpacing, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_5], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_5]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.SetSingleParagraphSpacing, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_1], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_1]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ShowFontForm, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_d], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_d]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ShowHyperlinkForm, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_k], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_k]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.Find, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_f], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_f]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.Replace, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_h], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_h]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleAllFields, [key_1.ModifierKey.Alt | key_1.KeyCode.F9], [key_1.ModifierKey.Alt | key_1.KeyCode.F9]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleBackspaceKey, [key_1.KeyCode.Backspace], [key_1.KeyCode.Backspace]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleDeleteKey, [key_1.KeyCode.Delete], [key_1.KeyCode.Delete]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFieldCodes, [key_1.ModifierKey.Shift | key_1.KeyCode.F9], [key_1.ModifierKey.Shift | key_1.KeyCode.F9]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFontItalic, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_i], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_i]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFontSubscript, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Equals], [key_1.ModifierKey.Meta | key_1.KeyCode.Equals]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFontSuperscript, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Equals], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.Equals]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFontUnderline, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_u], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_u]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleParagraphAlignmentCenter, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_e], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_e]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleParagraphAlignmentJustify, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_j], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_j]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleParagraphAlignmentLeft, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_l], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_l]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleParagraphAlignmentRight, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_r], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_r]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleShowWhitespace, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Key_8], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_8]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.Undo, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_z], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_z, key_1.KeyCode.F1]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.UpdateField, [key_1.KeyCode.F9], [key_1.KeyCode.F9]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ToggleFontBold, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Key_b], [key_1.ModifierKey.Meta | key_1.KeyCode.Key_b]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.InsertNonBreakingSpace, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Space], [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Space]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.RemoveHyperlinks, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.F9], [key_1.ModifierKey.Meta | key_1.ModifierKey.Shift | key_1.KeyCode.F9]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CreateDateField, [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Key_d], [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Key_d]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CreatePageField, [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Key_p], [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Key_p]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.CreateTimeField, [key_1.ModifierKey.Alt | key_1.ModifierKey.Shift | key_1.KeyCode.Key_t], [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.Key_t]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.SwitchTextCase, [key_1.ModifierKey.Shift | key_1.KeyCode.F3], [key_1.ModifierKey.Shift | key_1.KeyCode.F3]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ShowSpellCheckerForm, [key_1.KeyCode.F7], [key_1.KeyCode.F7]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.RemoveNextWord, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Delete], [key_1.ModifierKey.Ctrl | key_1.KeyCode.Delete]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.RemovePrevWord, [key_1.ModifierKey.Ctrl | key_1.KeyCode.Backspace], [key_1.ModifierKey.Ctrl | key_1.KeyCode.Backspace]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToStartNextPage, [key_1.ModifierKey.Ctrl | key_1.KeyCode.PageDown], [key_1.ModifierKey.Ctrl | key_1.KeyCode.PageDown]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.GoToStartPrevPage, [key_1.ModifierKey.Ctrl | key_1.KeyCode.PageUp], [key_1.ModifierKey.Ctrl | key_1.KeyCode.PageUp]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToStartNextPage, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.PageDown], [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.PageDown]);
        this.createShortcut(commandManager, client_command_1.RichEditClientCommand.ExtendGoToStartPrevPage, [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.PageUp], [key_1.ModifierKey.Ctrl | key_1.ModifierKey.Shift | key_1.KeyCode.PageUp]);
    };
    ShortcutManager.prototype.createShortcut = function (commandManager, commandId, winShortcuts, macOSShortcuts) {
        var _this = this;
        list_1.ListUtils.forEach(browser_1.Browser.MacOSPlatform ? (macOSShortcuts ? macOSShortcuts : []) : (winShortcuts ? winShortcuts : []), function (keyCode) { return _this.shortcuts[keyCode] = new CommandHolder(commandManager.getCommand(commandId)); });
    };
    ShortcutManager.prototype.processShortcut = function (keyCode) {
        var commandHolder = this.shortcuts[keyCode];
        if (!commandHolder || this.denyThisTabKeyCode(keyCode))
            return false;
        commandHolder.executeCommand(this);
        return true;
    };
    ShortcutManager.prototype.isKnownShortcut = function (keyCode) {
        return (!!this.shortcuts[keyCode] || this.knownNonCommandShortcuts[keyCode]) && !this.denyThisTabKeyCode(keyCode);
    };
    ShortcutManager.prototype.isClipboardCommandShortcut = function (keyCode) {
        var commandHolder = this.shortcuts[keyCode];
        return commandHolder ? commandHolder.isClipboardCommand() : false;
    };
    ShortcutManager.prototype.assignShortcut = function (keyCode, callback) {
        this.shortcuts[keyCode] = new UserDefinedFunctionHolder(callback);
    };
    ShortcutManager.prototype.denyThisTabKeyCode = function (keyCode) {
        return !this.control.modelManager.richOptions.control.acceptsTab && ShortcutManager.pressTabKeyCode(keyCode);
    };
    ShortcutManager.pressTabKeyCode = function (keyCode) {
        return keyCode === key_1.KeyCode.Tab || keyCode === (key_1.ModifierKey.Shift | key_1.KeyCode.Tab);
    };
    return ShortcutManager;
}());
exports.ShortcutManager = ShortcutManager;
var CommandHolderBase = (function () {
    function CommandHolderBase() {
    }
    CommandHolderBase.prototype.executeCommand = function (shortcutManager) {
        shortcutManager.lastCommandExecutedByShortcut = true;
        this.callExecuteCommand();
        shortcutManager.lastCommandExecutedByShortcut = false;
    };
    CommandHolderBase.prototype.callExecuteCommand = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    CommandHolderBase.prototype.isClipboardCommand = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    return CommandHolderBase;
}());
exports.CommandHolderBase = CommandHolderBase;
var CommandHolder = (function (_super) {
    tslib_1.__extends(CommandHolder, _super);
    function CommandHolder(command) {
        var _this = _super.call(this) || this;
        _this.command = command;
        return _this;
    }
    CommandHolder.prototype.callExecuteCommand = function () {
        this.command.execute(false);
    };
    CommandHolder.prototype.isClipboardCommand = function () {
        return this.command instanceof clipboard_commands_1.ClipboardCommand;
    };
    return CommandHolder;
}(CommandHolderBase));
exports.CommandHolder = CommandHolder;
var UserDefinedFunctionHolder = (function (_super) {
    tslib_1.__extends(UserDefinedFunctionHolder, _super);
    function UserDefinedFunctionHolder(userCommandCallback) {
        var _this = _super.call(this) || this;
        _this.userCommandCallback = userCommandCallback;
        return _this;
    }
    UserDefinedFunctionHolder.prototype.callExecuteCommand = function () {
        this.userCommandCallback();
    };
    UserDefinedFunctionHolder.prototype.isClipboardCommand = function () {
        return false;
    };
    return UserDefinedFunctionHolder;
}(CommandHolderBase));
exports.UserDefinedFunctionHolder = UserDefinedFunctionHolder;
