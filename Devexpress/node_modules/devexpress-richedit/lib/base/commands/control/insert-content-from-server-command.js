"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var json_general_enums_1 = require("../../../core/model/json/enums/json-general-enums");
var server_model_inserter_1 = require("../../../core/model/json/importers/server-model-inserter");
var rich_utils_1 = require("../../../core/model/rich-utils");
var selection_intervals_info_1 = require("../../../core/selection/selection-intervals-info");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertContentFromServerCommand = (function (_super) {
    tslib_1.__extends(InsertContentFromServerCommand, _super);
    function InsertContentFromServerCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertContentFromServerCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(_super.prototype.isEnabled.call(this));
    };
    InsertContentFromServerCommand.prototype.executeCore = function (_state, options) {
        this.control.commandManager.insertContentFromServerRequestManager.addCallback(this.control, options.param);
        return true;
    };
    return InsertContentFromServerCommand;
}(command_base_1.CommandBase));
exports.InsertContentFromServerCommand = InsertContentFromServerCommand;
var InsertContentFromServerCommandOptions = (function () {
    function InsertContentFromServerCommandOptions(requestId, subDocPos, callback) {
        this.requestId = requestId;
        this.subDocPos = subDocPos;
        this.callback = callback;
    }
    return InsertContentFromServerCommandOptions;
}());
exports.InsertContentFromServerCommandOptions = InsertContentFromServerCommandOptions;
var InsertContentFromServerRequestManager = (function () {
    function InsertContentFromServerRequestManager() {
        this.reset();
    }
    InsertContentFromServerRequestManager.prototype.reset = function () {
        this.map = {};
    };
    InsertContentFromServerRequestManager.prototype.addCallback = function (control, options) {
        var _a;
        var id = InsertContentFromServerRequestManager.id++;
        var request = new command_request_1.LoadCommandRequest(command_type_1.CommandType.InsertContentFromServer, control.modelManager.model.mainSubDocument.id, (_a = {},
            _a[json_general_enums_1.JSONInsertContentFromServerCommand.Id] = id,
            _a[json_general_enums_1.JSONInsertContentFromServerCommand.UserRequestId] = options.requestId,
            _a));
        control.serverDispatcher.pushRequest(request, new command_request_1.RequestParams(false, true, true));
        this.map[id] = options;
    };
    InsertContentFromServerRequestManager.prototype.handleResponce = function (control, responce) {
        var id = responce[json_general_enums_1.JSONInsertContentFromServerCommand.Id];
        var data = this.map[id];
        if (data === undefined)
            return;
        delete this.map[id];
        var userModel = responce[json_general_enums_1.JSONInsertContentFromServerCommand.Model];
        if (userModel === undefined) {
            var simpleText = responce[json_general_enums_1.JSONInsertContentFromServerCommand.SimpleText];
            if (common_1.isString(simpleText) && simpleText.length != 0) {
                simpleText = simpleText.replace(/\r\n/g, rich_utils_1.RichUtils.specialCharacters.LineBreak);
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText)
                    .execute(control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(control, simpleText)
                    .setIntervalsInfo(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(data.subDocPos.subDocument, data.subDocPos.position)));
                data.callback(new fixed_1.FixedInterval(data.subDocPos.position, simpleText.length));
            }
        }
        else {
            var interval = server_model_inserter_1.ServerModelInserter.insertDocumentModelFromServer(control.modelManager, userModel, data.subDocPos.position, data.subDocPos.subDocument.id);
            data.callback(interval);
        }
    };
    InsertContentFromServerRequestManager.id = 0;
    return InsertContentFromServerRequestManager;
}());
exports.InsertContentFromServerRequestManager = InsertContentFromServerRequestManager;
