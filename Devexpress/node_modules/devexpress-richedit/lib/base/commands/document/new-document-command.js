"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var control_1 = require("../../../core/model/options/control");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var NewDocumentCommand = (function (_super) {
    tslib_1.__extends(NewDocumentCommand, _super);
    function NewDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.createNew !== control_1.DocumentCapability.Hidden;
        return state;
    };
    NewDocumentCommand.prototype.executeCore = function (_state) {
        if (this.control.getModifiedState() && !this.control.owner.confirmOnLosingChanges())
            return false;
        this.control.closeDocument();
        this.control.serverDispatcher.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.NewDocument, -1, {}), new command_request_1.RequestParams(true, true, true));
        return true;
    };
    NewDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.createNew) &&
            this.control.modelManager.model.isLoaded();
    };
    NewDocumentCommand.prototype.isEnabledInClosedDocument = function () {
        return true;
    };
    NewDocumentCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return NewDocumentCommand;
}(command_base_1.CommandBase));
exports.NewDocumentCommand = NewDocumentCommand;
