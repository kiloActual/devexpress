"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tree_creator_1 = require("../../../core/model/fields/tree-creator");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var control_1 = require("../../../core/model/options/control");
var printing_1 = require("../../../core/model/options/printing");
var sub_document_1 = require("../../../core/model/sub-document");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var update_field_command_base_1 = require("../fields/update-field-command-base");
var PrintDocumentCommand = (function (_super) {
    tslib_1.__extends(PrintDocumentCommand, _super);
    function PrintDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PrintDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.printing !== control_1.DocumentCapability.Hidden;
        return state;
    };
    PrintDocumentCommand.prototype.executeCore = function (_state) {
        var _this = this;
        if (this.control.modelManager.richOptions.printing.mode !== printing_1.PrintMode.ServerPdf)
            return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.PrintDocumentOnClient).execute(this.control.commandManager.isPublicApiCall);
        var updateAllFieldsCommand = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.UpdateAllFields);
        if (this.control.modelManager.richOptions.fields.updateFieldsBeforePrint && updateAllFieldsCommand.getState().enabled) {
            var subDocsInfo = number_1.NumberMapUtils.toListBy(this.modelManipulator.model.subDocuments, function (sd) { return new sub_document_1.SubDocumentIntervals(sd, [sd.interval]); });
            return update_field_command_base_1.UpdateFieldCommandBase.updateFields(this, subDocsInfo, function () { return _this.sendPrintRequest(); }, new tree_creator_1.UpdateFieldsOptions(false, false));
        }
        else
            this.sendPrintRequest();
        return true;
    };
    PrintDocumentCommand.prototype.sendPrintRequest = function () {
        if (this.control.serverDispatcher.hasQueue()) {
            this.control.serverDispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DelayedPrint, -1, {}), new command_request_1.RequestParams(false, true, false));
        }
        else
            this.control.owner.sendDownloadRequest(DownloadRequestType.PrintCurrentDocument);
    };
    PrintDocumentCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    PrintDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.printing) &&
            this.control.modelManager.model.isLoaded();
    };
    return PrintDocumentCommand;
}(command_base_1.CommandBase));
exports.PrintDocumentCommand = PrintDocumentCommand;
var DownloadRequestType;
(function (DownloadRequestType) {
    DownloadRequestType[DownloadRequestType["PrintCurrentDocument"] = 0] = "PrintCurrentDocument";
    DownloadRequestType[DownloadRequestType["DownloadCurrentDocument"] = 1] = "DownloadCurrentDocument";
})(DownloadRequestType = exports.DownloadRequestType || (exports.DownloadRequestType = {}));
