"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var json_top_level_enums_1 = require("../../../core/model/json/enums/json-top-level-enums");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var SaveDocumentCommand = (function (_super) {
    tslib_1.__extends(SaveDocumentCommand, _super);
    function SaveDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.save !== control_1.DocumentCapability.Hidden;
        return state;
    };
    SaveDocumentCommand.prototype.executeCore = function () {
        if (this.needShowSaveAsDialog())
            return this.executeSaveAsCommand();
        var params = {};
        params[json_top_level_enums_1.JSONInitSessionProperty.HistoryId] = this.history.getCurrentItemId();
        this.control.serverDispatcher.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.SaveDocument, -1, params), new command_request_1.RequestParams(false, true, true));
        return true;
    };
    SaveDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.save) &&
            (this.control.getModifiedState() === json_top_level_enums_1.IsModified.True || !this.control.documentInfo.documentHasSource) &&
            this.control.modelManager.model.isLoaded();
    };
    SaveDocumentCommand.prototype.needShowSaveAsDialog = function () {
        var documentInfo = this.control.documentInfo;
        return this.control.owner.hasWorkDirectory && !documentInfo.fileName && !documentInfo.documentHasSource &&
            control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.saveAs);
    };
    SaveDocumentCommand.prototype.executeSaveAsCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.FileSaveAs).execute(this.control.commandManager.isPublicApiCall);
    };
    SaveDocumentCommand.prototype.canModify = function () {
        return true;
    };
    return SaveDocumentCommand;
}(command_base_1.CommandBase));
exports.SaveDocumentCommand = SaveDocumentCommand;
