"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var renderer_class_names_1 = require("../../../core/canvas/renderer-class-names");
var tree_creator_1 = require("../../../core/model/fields/tree-creator");
var control_1 = require("../../../core/model/options/control");
var printing_1 = require("../../../core/model/options/printing");
var paper_kind_1 = require("../../../core/model/section/paper-kind");
var sub_document_1 = require("../../../core/model/sub-document");
var views_settings_1 = require("../../../core/view-settings/views-settings");
var browser_1 = require("@devexpress/utils/lib/browser");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var pdf_1 = require("../../../pdf/api/pdf");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var update_field_command_base_1 = require("../fields/update-field-command-base");
var PrintDocumentOnClient = (function (_super) {
    tslib_1.__extends(PrintDocumentOnClient, _super);
    function PrintDocumentOnClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PrintDocumentOnClient.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.printing) &&
            this.control.modelManager.model.isLoaded();
    };
    PrintDocumentOnClient.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    PrintDocumentOnClient.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    PrintDocumentOnClient.prototype.getMode = function (param) {
        return param !== null && param !== undefined ? param : this.control.modelManager.richOptions.printing.mode;
    };
    PrintDocumentOnClient.prototype.getclosePrintDialogWithHtmlPreview = function (param) {
        return param !== null && param !== undefined ? param : this.control.modelManager.richOptions.printing.closePrintDialogWithHtmlPreview;
    };
    PrintDocumentOnClient.prototype.executeCore = function (_state, options) {
        var _this = this;
        if (this.control.commandManager.isPrintingProcessing)
            return false;
        this.control.commandManager.isPrintingProcessing = true;
        var mode;
        var closePrintDialogWithHtmlPreview;
        if (typeof options.param === 'object' && options.param != null) {
            mode = this.getMode(options.param.mode);
            closePrintDialogWithHtmlPreview = this.getclosePrintDialogWithHtmlPreview(options.param.closePrintDialogWithHtmlPreview);
        }
        else {
            mode = this.getMode(options.param);
            closePrintDialogWithHtmlPreview = this.control.modelManager.richOptions.printing.closePrintDialogWithHtmlPreview;
        }
        var htmlPrinting = mode == printing_1.PrintMode.ClientHtml;
        var printWindow;
        if (htmlPrinting)
            printWindow = window.open('', 'print', "height=" + window.innerHeight + ",width=" + window.innerWidth + ",tabbar=no");
        var needSwitchViewType = false;
        if (this.control.innerClientProperties.viewsSettings.viewType == views_settings_1.ViewType.Simple) {
            needSwitchViewType = true;
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SwitchToPrintLayoutView).execute(this.control.commandManager.isPublicApiCall);
        }
        var needToggleHiddenSymbols = false;
        if (this.control.innerClientProperties.showHiddenSymbols) {
            needToggleHiddenSymbols = true;
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleShowWhitespace).execute(this.control.commandManager.isPublicApiCall);
        }
        this.control.commandManager.printTimerId = setTimeout(function () {
            while (!_this.control.layout.isFullyFormatted)
                _this.control.layoutFormatterManager.forceFormatPage(_this.control.layout.validPageCount + 1);
            var subDocsInfo = number_1.NumberMapUtils.toListBy(_this.modelManipulator.model.subDocuments, function (sd) { return new sub_document_1.SubDocumentIntervals(sd, [sd.interval]); });
            update_field_command_base_1.UpdateFieldCommandBase.updateFields(_this, subDocsInfo, function () {
                if (htmlPrinting)
                    _this.generatePrintDocument(printWindow, closePrintDialogWithHtmlPreview);
                else {
                    pdf_1.pdfExport(_this.control, function (blob, _stream) {
                        if (window.navigator.msSaveOrOpenBlob && !browser_1.Browser.Edge)
                            window.navigator.msSaveOrOpenBlob(blob, _this.control.documentInfo.getFileNameForDownload() + ".pdf");
                        else
                            _this.control.pdfHelperFrame.showPrintDialog(URL.createObjectURL(blob));
                    }, function () { });
                }
                if (needSwitchViewType)
                    _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SwitchToSimpleView).execute(_this.control.commandManager.isPublicApiCall);
                if (needToggleHiddenSymbols)
                    _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleShowWhitespace).execute(_this.control.commandManager.isPublicApiCall);
                _this.control.commandManager.isPrintingProcessing = false;
            }, new tree_creator_1.UpdateFieldsOptions(false, false));
        }, 100);
        return true;
    };
    PrintDocumentOnClient.prototype.generatePrintDocument = function (printWindow, closePrintDialogWithHtmlPreview) {
        var printElement = this.createPrintElement();
        printElement.innerHTML = this.generatePrintContent();
        var height = this.control.layout.pages[0].height;
        var width = this.control.layout.pages[0].width;
        var printWindowContent = "<!DOCTYPE html>\n                <html moznomarginboxes mozdisallowselectionprint>\n                <head>\n                    <style>\n                        html, body {\n                            margin: 0;\n                            width: " + width + "px;\n                            height: " + height + "px;\n                        }\n                        .dxrePageArea, .dxreColumn, .dxreRow, .dxreBox, .dxreBoxBg, .dxreParFrame, .dxreBoxSpace, .dxreAncPic,\n                        .dxreTable, .dxreTableCellBg, .dxreTableBrd, .dxreTextBoxBg {\n                            position:absolute;\n                        }\n                        .dxreTableRowCursor, .dxreTableColumnCursor { display: none; }\n                        " + this.createZIndexStyles() + "\n                        br { display: none; }\n                        @page{ margin: 0; size:" + width + "px " + height + "px; }\n                        @media print { body { margin: 0; } }\n                    </style>\n                </head>\n                <body>\n                    " + printElement.innerHTML + "\n                    <script>(function() { window.ready = true; })();</script>\n                </body>\n                </html>";
        printWindow.document.write(printWindowContent);
        printElement = undefined;
        printWindow.document.close();
        printWindow.focus();
        var interval = setInterval(function () {
            if (printWindow.document.readyState == 'complete') {
                printWindow.print();
                if (closePrintDialogWithHtmlPreview)
                    printWindow.close();
                clearInterval(interval);
            }
        }, 100);
    };
    PrintDocumentOnClient.prototype.createPrintElement = function () {
        var element = document.createElement('div');
        element.style.width = '100%';
        element.style.height = '100%';
        element.style.overflow = 'scroll';
        return element;
    };
    PrintDocumentOnClient.prototype.generatePrintContent = function () {
        var layout = this.control.layout;
        var htmlString = [];
        for (var i = 0, layoutPage = void 0; layoutPage = layout.pages[i]; i++) {
            var pageSize = PrintPageSizesCalculator.getPrintPageSize(layoutPage);
            var pageWidth = pageSize.width;
            var pageHeight = pageSize.height;
            var page = this.control.viewManager.printLayoutRenderer.getPageRender(i, layoutPage);
            var main = page.getElementsByClassName(renderer_class_names_1.RendererClassNames.MAIN_PAGE_AREA_CONTAINER)[0];
            var fo = page.getElementsByClassName(renderer_class_names_1.RendererClassNames.FLOATING_OBJECTS_CONTAINER)[0];
            var other = page.getElementsByClassName(renderer_class_names_1.RendererClassNames.OTHER_PAGE_AREA_CONTAINER)[0];
            var shapeBg = page.getElementsByClassName(renderer_class_names_1.RendererClassNames.SHAPE_BG_CONTAINER)[0];
            var pagesContent = "" + main.outerHTML + fo.outerHTML + other.outerHTML + shapeBg.outerHTML;
            if (browser_1.Browser.IE) {
                htmlString.push("<div style=\"position: relative; margin:0px; display:block; width:" + pageWidth + "px; height:" + pageHeight + "px;\">\n                        " + pagesContent + "\n                    </div>\n                    <br/>");
            }
            else {
                htmlString.push("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"" + pageWidth + "\" height=\"" + pageHeight + "\">\n                        <foreignObject x=\"0\" y=\"0\" width=\"" + pageWidth + "\" height=\"" + pageHeight + "\">\n                            <div xmlns=\"http://www.w3.org/1999/xhtml\">\n                                " + pagesContent + "\n                            </div>\n                        </foreignObject>\n                    </svg>");
            }
        }
        return htmlString.join('');
    };
    PrintDocumentOnClient.prototype.createZIndexStyles = function () {
        var result = '';
        var ind = 0;
        var names = ['TextBoxBg', 'TblRowBg', 'TblCellBg', 'ParBg', 'BoxBg', 'BoxSpace', 'Box', 'TableBorder', 'AnchoredPicture', 'TextBox'];
        for (var level = 0; level <= 8; level++) {
            for (var i = 0, name_1; name_1 = names[i]; i++) {
                result += ".dxre" + name_1 + "ZL" + level + " { z-index: " + ind + "; }\r\n";
                ind++;
            }
        }
        return result;
    };
    return PrintDocumentOnClient;
}(command_base_1.CommandBase));
exports.PrintDocumentOnClient = PrintDocumentOnClient;
var PrintPageSize = (function () {
    function PrintPageSize(paperKind, vertical, horizontal, accuracy, converterToPixels) {
        if (horizontal === void 0) { horizontal = vertical; }
        if (accuracy === void 0) { accuracy = 5; }
        if (converterToPixels === void 0) { converterToPixels = unit_converter_1.UnitConverter.millimetersToPixel; }
        this.paperKind = paperKind;
        this.vertical = vertical;
        this.horizontal = horizontal;
        this.accuracy = accuracy;
        this.converterToPixels = converterToPixels;
        vertical.applyConverter(converterToPixels);
        horizontal.applyConverter(converterToPixels);
    }
    PrintPageSize.prototype.getDifference = function (landscape, currSize) {
        var size = landscape ? this.horizontal : this.vertical;
        return new size_1.Size(Math.abs(size.width - currSize.width), Math.abs(size.height - currSize.height));
    };
    PrintPageSize.prototype.isAccuracyAchieved = function (diff) {
        return diff.width < this.accuracy && diff.height < this.accuracy;
    };
    return PrintPageSize;
}());
var Diff = (function () {
    function Diff(pageSizeInfo, diff) {
        this.pageSizeInfo = pageSizeInfo;
        this.diff = diff;
        this.maxDiff = Math.max(diff.width, diff.height);
    }
    return Diff;
}());
var PrintPageSizesCalculator = (function () {
    function PrintPageSizesCalculator() {
    }
    PrintPageSizesCalculator.getPrintPageSize = function (layoutSize) {
        var landscape = layoutSize.width > layoutSize.height;
        var list = list_1.ListUtils.reducedMap(PrintPageSizesCalculator.sizesList, function (info) {
            var diff = info.getDifference(landscape, layoutSize);
            return info.isAccuracyAchieved(diff) ? new Diff(info, diff) : null;
        });
        if (!list.length)
            return new size_1.Size(layoutSize.width, layoutSize.height);
        var finalPageInfo = list_1.ListUtils.minByCmp(list, function (a, b) { return a.maxDiff - b.maxDiff; }).pageSizeInfo;
        return landscape ? finalPageInfo.horizontal : finalPageInfo.vertical;
    };
    PrintPageSizesCalculator.sizesList = [
        new PrintPageSize(paper_kind_1.PaperKind.A4, new size_1.Size(210, 296), new size_1.Size(297, 209)),
        new PrintPageSize(paper_kind_1.PaperKind.Letter, new size_1.Size(unit_converter_1.UnitConverter.millimetersToPixel(216), unit_converter_1.UnitConverter.millimetersToPixel(278) - 1), new size_1.Size(unit_converter_1.UnitConverter.millimetersToPixel(280), (215)), 7, function (v) { return v; }),
    ];
    return PrintPageSizesCalculator;
}());
