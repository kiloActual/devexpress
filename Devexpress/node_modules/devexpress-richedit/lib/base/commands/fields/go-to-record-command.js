"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var GoToRecordCommandBase = (function (_super) {
    tslib_1.__extends(GoToRecordCommandBase, _super);
    function GoToRecordCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToRecordCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    GoToRecordCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            this.control.modelManager.richOptions.mailMerge.isEnabled &&
            this.control.modelManager.richOptions.mailMerge.viewMergedData &&
            this.canNavigate() && this.selection.activeSubDocument.fieldsWaitingForUpdate == null;
    };
    GoToRecordCommandBase.prototype.canModify = function () {
        return true;
    };
    GoToRecordCommandBase.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return typeof (parameter) === 'number' ? parameter : this.control.modelManager.richOptions.mailMerge.activeRecordIndex;
    };
    GoToRecordCommandBase.prototype.executeCore = function (_state, options) {
        var recordIndex = this.calculateNextRecordIndex(options.param);
        this.control.modelManager.richOptions.mailMerge.activeRecordIndex = recordIndex;
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.UpdateAllFields).execute(this.control.commandManager.isPublicApiCall);
        return true;
    };
    GoToRecordCommandBase.prototype.canNavigate = function () {
        return true;
    };
    GoToRecordCommandBase.prototype.calculateNextRecordIndex = function (recordIndex) {
        return Math.min(recordIndex, this.control.modelManager.richOptions.mailMerge.recordCount - 1);
    };
    return GoToRecordCommandBase;
}(command_base_1.CommandBase));
exports.GoToRecordCommandBase = GoToRecordCommandBase;
var GoToFirstDataRecordCommand = (function (_super) {
    tslib_1.__extends(GoToFirstDataRecordCommand, _super);
    function GoToFirstDataRecordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToFirstDataRecordCommand.prototype.canNavigate = function () {
        return this.control.modelManager.richOptions.mailMerge.activeRecordIndex > 0;
    };
    GoToFirstDataRecordCommand.prototype.calculateNextRecordIndex = function (_recordIndex) {
        return 0;
    };
    return GoToFirstDataRecordCommand;
}(GoToRecordCommandBase));
exports.GoToFirstDataRecordCommand = GoToFirstDataRecordCommand;
var GoToPreviousDataRecordCommand = (function (_super) {
    tslib_1.__extends(GoToPreviousDataRecordCommand, _super);
    function GoToPreviousDataRecordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPreviousDataRecordCommand.prototype.canNavigate = function () {
        return this.control.modelManager.richOptions.mailMerge.activeRecordIndex > 0;
    };
    GoToPreviousDataRecordCommand.prototype.calculateNextRecordIndex = function (recordIndex) {
        return recordIndex - 1;
    };
    return GoToPreviousDataRecordCommand;
}(GoToRecordCommandBase));
exports.GoToPreviousDataRecordCommand = GoToPreviousDataRecordCommand;
var GoToNextDataRecordCommand = (function (_super) {
    tslib_1.__extends(GoToNextDataRecordCommand, _super);
    function GoToNextDataRecordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToNextDataRecordCommand.prototype.canNavigate = function () {
        return this.control.modelManager.richOptions.mailMerge.activeRecordIndex < this.control.modelManager.richOptions.mailMerge.recordCount - 1;
    };
    GoToNextDataRecordCommand.prototype.calculateNextRecordIndex = function (recordIndex) {
        return recordIndex + 1;
    };
    return GoToNextDataRecordCommand;
}(GoToRecordCommandBase));
exports.GoToNextDataRecordCommand = GoToNextDataRecordCommand;
var GoToLastDataRecordCommand = (function (_super) {
    tslib_1.__extends(GoToLastDataRecordCommand, _super);
    function GoToLastDataRecordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToLastDataRecordCommand.prototype.canNavigate = function () {
        return this.control.modelManager.richOptions.mailMerge.activeRecordIndex < this.control.modelManager.richOptions.mailMerge.recordCount - 1;
    };
    GoToLastDataRecordCommand.prototype.calculateNextRecordIndex = function (_recordIndex) {
        return this.control.modelManager.richOptions.mailMerge.recordCount - 1;
    };
    return GoToLastDataRecordCommand;
}(GoToRecordCommandBase));
exports.GoToLastDataRecordCommand = GoToLastDataRecordCommand;
