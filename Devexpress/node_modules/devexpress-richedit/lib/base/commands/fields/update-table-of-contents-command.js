"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var field_command_helper_1 = require("./field-command-helper");
var update_field_command_1 = require("./update-field-command");
var UpdateTableOfContentsCommand = (function (_super) {
    tslib_1.__extends(UpdateTableOfContentsCommand, _super);
    function UpdateTableOfContentsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UpdateTableOfContentsCommand.prototype.getState = function () {
        return new command_states_1.IntervalCommandState(this.isEnabled(), this.selection.lastSelectedInterval);
    };
    UpdateTableOfContentsCommand.prototype.isEnabled = function () {
        var tocField = field_command_helper_1.FieldCommandHelper.findTocFieldBySelection(this.selection.activeSubDocument, this.selection);
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) && tocField != null;
    };
    UpdateTableOfContentsCommand.prototype.executeCore = function (_state, _options) {
        var _this = this;
        var subDocument = this.selection.activeSubDocument;
        var tocField = field_command_helper_1.FieldCommandHelper.findTocFieldBySelection(subDocument, this.selection);
        if (!tocField)
            return false;
        this.history.beginTransaction();
        var updateParams = new update_field_command_1.UpdateFieldCommandParameters(subDocument, [tocField.getAllFieldInterval()], function () {
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setPosition(tocField.getFieldStartPosition()).setEndOfLine(false)));
        });
        updateParams.options.updateFillIn = false;
        var result = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.UpdateField)
            .execute(this.control.commandManager.isPublicApiCall, updateParams);
        this.history.endTransaction();
        return result;
    };
    return UpdateTableOfContentsCommand;
}(command_base_1.CommandBase));
exports.UpdateTableOfContentsCommand = UpdateTableOfContentsCommand;
