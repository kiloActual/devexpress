"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var tree_creator_1 = require("../../../core/model/fields/tree-creator");
var field_insert_history_item_1 = require("../../../core/model/history/items/field-insert-history-item");
var insert_text_history_item_1 = require("../../../core/model/history/items/insert-text-history-item");
var remove_interval_history_item_1 = require("../../../core/model/history/items/remove-interval-history-item");
var insert_paragraph_manipulator_params_1 = require("../../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_text_manipulator_params_1 = require("../../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var control_1 = require("../../../core/model/options/control");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var table_1 = require("../../../core/model/tables/main-structures/table");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var field_command_helper_1 = require("./field-command-helper");
var update_field_command_base_1 = require("./update-field-command-base");
var CreateFieldCommandBase = (function (_super) {
    tslib_1.__extends(CreateFieldCommandBase, _super);
    function CreateFieldCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateFieldCommandBase.prototype.getState = function () {
        return new command_states_1.IntervalCommandState(this.isEnabled(), this.selection.lastSelectedInterval);
    };
    CreateFieldCommandBase.isTableProtectionOk = function (subDocumentInreval) {
        var subDoc = subDocumentInreval.subDocument;
        var interval = CreateFieldCommandBase.getIntervalWithoutLastParagraphMark(subDocumentInreval.interval, subDoc);
        if (interval.length == 0)
            return true;
        var tables = subDocumentInreval.subDocument.tables;
        for (var tblIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(tables, function (t) { return t.getStartPosition(); }, interval.start)), table = void 0; table = tables[tblIndex]; tblIndex++) {
            if (table.getStartPosition() >= interval.end)
                break;
            if (algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(table.interval, interval)) {
                var startCell = table_1.Table.getTableCellByPosition(tables, interval.start);
                var endCell = table_1.Table.getTableCellByPosition(tables, interval.end);
                return startCell && endCell && startCell === endCell &&
                    interval.end < subDoc.getParagraphByPosition(endCell.endParagrapPosition.value).getEndPosition();
            }
        }
        return true;
    };
    CreateFieldCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            CreateFieldCommandBase.isTableProtectionOk(this.selection.subDocumentInterval);
    };
    CreateFieldCommandBase.getIntervalWithoutLastParagraphMark = function (interval, subDocument) {
        interval = interval.clone();
        var lastDocPos = subDocument.getDocumentEndPosition();
        if (interval.end == lastDocPos) {
            interval.length--;
            if (interval.length < 0)
                interval = new fixed_1.FixedInterval(lastDocPos - 1, 0);
        }
        return interval;
    };
    return CreateFieldCommandBase;
}(command_base_1.CommandBase));
exports.CreateFieldCommandBase = CreateFieldCommandBase;
var CreateFieldCommand = (function (_super) {
    tslib_1.__extends(CreateFieldCommand, _super);
    function CreateFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateFieldCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.intervals = [CreateFieldCommandBase.getIntervalWithoutLastParagraphMark(this.selection.lastSelectedInterval, options.subDocument)];
    };
    CreateFieldCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var subDocument = options.subDocument;
        var interval = options.intervalsInfo.interval;
        this.history.addTransaction(function () {
            _this.history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(_this.modelManipulator, subDocument, interval.start, interval.length, 0, true, _this.inputPosition.charPropsBundle));
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setPosition(interval.start + 1)));
        });
        return true;
    };
    return CreateFieldCommand;
}(CreateFieldCommandBase));
exports.CreateFieldCommand = CreateFieldCommand;
var CreatePredefinedFieldCommand = (function (_super) {
    tslib_1.__extends(CreatePredefinedFieldCommand, _super);
    function CreatePredefinedFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreatePredefinedFieldCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.interval = CreateFieldCommandBase.getIntervalWithoutLastParagraphMark(this.selection.lastSelectedInterval, options.subDocument);
    };
    CreatePredefinedFieldCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var subDocument = options.subDocument;
        var interval = options.intervalsInfo.interval;
        var history = this.history;
        history.beginTransaction();
        var startPosition = interval.start;
        history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(startPosition)));
        if (interval.length > 0)
            history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), false));
        var run = subDocument.getRunByPosition(startPosition);
        var prefix = this.getPrefix();
        if (prefix.length > 0) {
            history.addAndRedo(new insert_text_history_item_1.InsertTextHistoryItem(this.modelManipulator, new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, startPosition), run.getCharPropsBundle(this.modelManipulator.model), run_type_1.RunType.TextRun, prefix + " ")));
            startPosition += prefix.length + 1;
        }
        if (this.needNewParagraph()) {
            var currentParagraph = subDocument.getParagraphByPosition(startPosition);
            if (startPosition > currentParagraph.startLogPosition.value) {
                this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(subDocument, startPosition), this.inputPosition));
                startPosition++;
            }
            this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(subDocument, startPosition), this.inputPosition));
        }
        history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(this.modelManipulator, subDocument, startPosition, 0, 0, !this.needUpdate(), this.inputPosition.charPropsBundle));
        var insertedText = this.getInsertedText(options.param);
        history.addAndRedo(new insert_text_history_item_1.InsertTextHistoryItem(this.modelManipulator, new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, startPosition + 1), run.getCharPropsBundle(this.modelManipulator.model), run_type_1.RunType.TextRun, insertedText)));
        var fieldInterval = this.needUpdate() ?
            new fixed_1.FixedInterval(startPosition, insertedText.length + 3) :
            new fixed_1.FixedInterval(startPosition + insertedText.length, 0);
        if (this.needUpdate()) {
            update_field_command_base_1.UpdateFieldCommandBase.updateFields(this, [new sub_document_1.SubDocumentIntervals(subDocument, [fieldInterval])], function () {
                var fieldEndPos = subDocument.fields[field_1.Field.normedBinaryIndexOf(subDocument.fields, startPosition + 1)].getFieldEndPosition();
                history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setPosition(fieldEndPos)));
                history.endTransaction();
            }, new tree_creator_1.UpdateFieldsOptions());
        }
        else {
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(fieldInterval)));
            history.endTransaction();
        }
        return true;
    };
    CreatePredefinedFieldCommand.prototype.needUpdate = function () {
        return true;
    };
    CreatePredefinedFieldCommand.prototype.needNewParagraph = function () {
        return false;
    };
    CreatePredefinedFieldCommand.prototype.getPrefix = function () {
        return "";
    };
    return CreatePredefinedFieldCommand;
}(CreateFieldCommandBase));
exports.CreatePredefinedFieldCommand = CreatePredefinedFieldCommand;
var CreateFieldWithCodeCommand = (function (_super) {
    tslib_1.__extends(CreateFieldWithCodeCommand, _super);
    function CreateFieldWithCodeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateFieldWithCodeCommand.prototype.getInsertedText = function (code) {
        return code;
    };
    return CreateFieldWithCodeCommand;
}(CreatePredefinedFieldCommand));
exports.CreateFieldWithCodeCommand = CreateFieldWithCodeCommand;
var CreatePageFieldCommand = (function (_super) {
    tslib_1.__extends(CreatePageFieldCommand, _super);
    function CreatePageFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreatePageFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "PAGE";
    };
    return CreatePageFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreatePageFieldCommand = CreatePageFieldCommand;
var CreatePageCountFieldCommand = (function (_super) {
    tslib_1.__extends(CreatePageCountFieldCommand, _super);
    function CreatePageCountFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreatePageCountFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "NUMPAGES";
    };
    return CreatePageCountFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreatePageCountFieldCommand = CreatePageCountFieldCommand;
var CreateDateFieldCommand = (function (_super) {
    tslib_1.__extends(CreateDateFieldCommand, _super);
    function CreateDateFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateDateFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "DATE \\@ \"" + this.control.modelManager.richOptions.fields.defaultDateFormat + "\"";
    };
    return CreateDateFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateDateFieldCommand = CreateDateFieldCommand;
var CreateTimeFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTimeFieldCommand, _super);
    function CreateTimeFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTimeFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "TIME \\@ \"" + this.control.modelManager.richOptions.fields.defaultTimeFormat + "\"";
    };
    return CreateTimeFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateTimeFieldCommand = CreateTimeFieldCommand;
var CreateMergeFieldCommand = (function (_super) {
    tslib_1.__extends(CreateMergeFieldCommand, _super);
    function CreateMergeFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateMergeFieldCommand.prototype.getInsertedText = function (parameter) {
        return parameter.indexOf(" ") !== -1 ? "MERGEFIELD \"" + parameter + "\"" : "MERGEFIELD " + parameter;
    };
    return CreateMergeFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateMergeFieldCommand = CreateMergeFieldCommand;
var CreateEmptyMergeFieldCommand = (function (_super) {
    tslib_1.__extends(CreateEmptyMergeFieldCommand, _super);
    function CreateEmptyMergeFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateEmptyMergeFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "MERGEFIELD \"\"";
    };
    CreateEmptyMergeFieldCommand.prototype.needUpdate = function () {
        return false;
    };
    return CreateEmptyMergeFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateEmptyMergeFieldCommand = CreateEmptyMergeFieldCommand;
var CreateEmptyDocVariableFieldCommand = (function (_super) {
    tslib_1.__extends(CreateEmptyDocVariableFieldCommand, _super);
    function CreateEmptyDocVariableFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateEmptyDocVariableFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "DOCVARIABLE \"\"";
    };
    CreateEmptyDocVariableFieldCommand.prototype.needUpdate = function () {
        return false;
    };
    return CreateEmptyDocVariableFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateEmptyDocVariableFieldCommand = CreateEmptyDocVariableFieldCommand;
var CreateTableOfContentCommandBase = (function (_super) {
    tslib_1.__extends(CreateTableOfContentCommandBase, _super);
    function CreateTableOfContentCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTableOfContentCommandBase.prototype.isEnabled = function () {
        var currentTocField = field_command_helper_1.FieldCommandHelper.findTocFieldBySelection(this.selection.activeSubDocument, this.selection);
        return _super.prototype.isEnabled.call(this) && currentTocField == null;
    };
    CreateTableOfContentCommandBase.prototype.getInsertedText = function (_parameter) {
        return "TOC \\h \\c \"Table\"";
    };
    CreateTableOfContentCommandBase.prototype.needNewParagraph = function () {
        return true;
    };
    return CreateTableOfContentCommandBase;
}(CreatePredefinedFieldCommand));
exports.CreateTableOfContentCommandBase = CreateTableOfContentCommandBase;
var CreateTocFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTocFieldCommand, _super);
    function CreateTocFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTocFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "TOC \\h \\u";
    };
    return CreateTocFieldCommand;
}(CreateTableOfContentCommandBase));
exports.CreateTocFieldCommand = CreateTocFieldCommand;
var CreateTableOfEquationsFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTableOfEquationsFieldCommand, _super);
    function CreateTableOfEquationsFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTableOfEquationsFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "TOC \\h \\c \"Equation\"";
    };
    return CreateTableOfEquationsFieldCommand;
}(CreateTableOfContentCommandBase));
exports.CreateTableOfEquationsFieldCommand = CreateTableOfEquationsFieldCommand;
var CreateTableOfFiguresFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTableOfFiguresFieldCommand, _super);
    function CreateTableOfFiguresFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTableOfFiguresFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "TOC \\h \\c \"Figure\"";
    };
    return CreateTableOfFiguresFieldCommand;
}(CreateTableOfContentCommandBase));
exports.CreateTableOfFiguresFieldCommand = CreateTableOfFiguresFieldCommand;
var CreateTableOfTablesFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTableOfTablesFieldCommand, _super);
    function CreateTableOfTablesFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTableOfTablesFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "TOC \\h \\c \"Table\"";
    };
    return CreateTableOfTablesFieldCommand;
}(CreateTableOfContentCommandBase));
exports.CreateTableOfTablesFieldCommand = CreateTableOfTablesFieldCommand;
var CreateEquationCaptionFieldCommand = (function (_super) {
    tslib_1.__extends(CreateEquationCaptionFieldCommand, _super);
    function CreateEquationCaptionFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateEquationCaptionFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "SEQ Equation \\* ARABIC";
    };
    CreateEquationCaptionFieldCommand.prototype.getPrefix = function () {
        return this.control.stringResources.seqCaptionPrefixes.equationPrefix;
    };
    return CreateEquationCaptionFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateEquationCaptionFieldCommand = CreateEquationCaptionFieldCommand;
var CreateFigureCaptionFieldCommand = (function (_super) {
    tslib_1.__extends(CreateFigureCaptionFieldCommand, _super);
    function CreateFigureCaptionFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateFigureCaptionFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "SEQ Figure \\* ARABIC";
    };
    CreateFigureCaptionFieldCommand.prototype.getPrefix = function () {
        return this.control.stringResources.seqCaptionPrefixes.figurePrefix;
    };
    return CreateFigureCaptionFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateFigureCaptionFieldCommand = CreateFigureCaptionFieldCommand;
var CreateTableCaptionFieldCommand = (function (_super) {
    tslib_1.__extends(CreateTableCaptionFieldCommand, _super);
    function CreateTableCaptionFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateTableCaptionFieldCommand.prototype.getInsertedText = function (_parameter) {
        return "SEQ Table \\* ARABIC";
    };
    CreateTableCaptionFieldCommand.prototype.getPrefix = function () {
        return this.control.stringResources.seqCaptionPrefixes.tablePrefix;
    };
    return CreateTableCaptionFieldCommand;
}(CreatePredefinedFieldCommand));
exports.CreateTableCaptionFieldCommand = CreateTableCaptionFieldCommand;
