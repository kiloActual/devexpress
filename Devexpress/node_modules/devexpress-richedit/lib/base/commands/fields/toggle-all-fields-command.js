"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ToggleAllFieldsCommand = (function (_super) {
    tslib_1.__extends(ToggleAllFieldsCommand, _super);
    function ToggleAllFieldsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleAllFieldsCommand.prototype.getState = function () {
        return new command_states_1.IntervalCommandState(this.isEnabled(), this.selection.lastSelectedInterval);
    };
    ToggleAllFieldsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields);
    };
    ToggleAllFieldsCommand.prototype.executeCore = function (_state, options) {
        var subDocument = options.subDocument;
        var subDocumentsList = [subDocument];
        var atLeastExistOneField = false;
        for (var subDocumentIndex = 0, currSubDoc; currSubDoc = subDocumentsList[subDocumentIndex]; subDocumentIndex++) {
            var fields = currSubDoc.fields;
            if (fields.length > 0)
                atLeastExistOneField = true;
            for (var fieldIndex = 0, field; field = fields[fieldIndex]; fieldIndex++)
                if (field.showCode) {
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowAllFieldResults)
                        .execute(this.control.commandManager.isPublicApiCall, options);
                    return true;
                }
        }
        if (atLeastExistOneField) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowAllFieldCodes)
                .execute(this.control.commandManager.isPublicApiCall, options);
            return true;
        }
        return false;
    };
    ToggleAllFieldsCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return ToggleAllFieldsCommand;
}(command_base_1.CommandBase));
exports.ToggleAllFieldsCommand = ToggleAllFieldsCommand;
