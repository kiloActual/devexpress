"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var remove_hyperlink_history_item_1 = require("../../../core/model/history/items/remove-hyperlink-history-item");
var control_1 = require("../../../core/model/options/control");
var linked_interval_1 = require("../../../core/model/position/linked-interval");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var RemoveHyperlinksCommand = (function (_super) {
    tslib_1.__extends(RemoveHyperlinksCommand, _super);
    function RemoveHyperlinksCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoveHyperlinksCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    RemoveHyperlinksCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.hyperlinks);
    };
    RemoveHyperlinksCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var subDocument = options.subDocument;
        var fields = subDocument.fields;
        if (fields.length < 1)
            return false;
        var history = this.history;
        var interval = options.intervalsInfo.interval;
        var fieldIndex = Math.max(0, field_1.Field.normedBinaryIndexOf(fields, interval.start));
        var field = fields[fieldIndex].getAbsolutelyTopLevelField();
        var linkedInterval = new linked_interval_1.LinkedInterval(subDocument.positionManager, interval);
        history.addTransaction(function () {
            for (fieldIndex = field.index; (field = fields[fieldIndex]) && field.getFieldStartPosition() < linkedInterval.end;) {
                if (field.getHyperlinkInfo() && algorithms_1.IntervalAlgorithms.getIntersection(fixed_1.FixedInterval.fromPositions(field.getCodeStartPosition(), field.getResultEndPosition()), interval))
                    history.addAndRedo(new remove_hyperlink_history_item_1.RemoveHyperlinkHistoryItem(_this.modelManipulator, subDocument, field));
                else
                    fieldIndex++;
            }
        });
        this.selection.correctAfterTextBufferChanged();
        linkedInterval.destructor(subDocument.positionManager);
        return true;
    };
    RemoveHyperlinksCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.interval = this.selection.lastSelectedInterval;
    };
    return RemoveHyperlinksCommand;
}(command_base_1.CommandBase));
exports.RemoveHyperlinksCommand = RemoveHyperlinksCommand;
