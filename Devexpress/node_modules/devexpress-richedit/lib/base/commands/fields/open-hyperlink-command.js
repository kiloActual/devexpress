"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var change_field_hyperlink_info_history_item_1 = require("../../../core/model/history/items/change-field-hyperlink-info-history-item");
var selection_intervals_info_1 = require("../../../core/selection/selection-intervals-info");
var color_1 = require("@devexpress/utils/lib/utils/color");
var url_1 = require("@devexpress/utils/lib/utils/url");
var i_rich_edit_core_1 = require("../../interfaces/i-rich-edit-core");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var hyperlink_command_base_1 = require("./hyperlink-command-base");
var OpenHyperlinkCommand = (function (_super) {
    tslib_1.__extends(OpenHyperlinkCommand, _super);
    function OpenHyperlinkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenHyperlinkCommand.prototype.executeCore = function (state, options) {
        var field;
        if (options.param)
            field = options.param;
        else {
            if (!state.visible)
                return false;
            field = state.value;
        }
        var hyperlinkInfo = field.getHyperlinkInfo();
        var fieldIsEditable = this.selection.activeSubDocument.isEditable([field.getAllFieldInterval()]);
        if (!hyperlinkInfo.visited && this.control.readOnly != i_rich_edit_core_1.ReadOnlyMode.Persistent && fieldIsEditable) {
            var newHyperlinkInfo = hyperlinkInfo.clone();
            newHyperlinkInfo.visited = true;
            var resultInterval = field.getResultInterval();
            this.history.beginTransaction();
            this.history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(this.modelManipulator, this.selection.activeSubDocument, field.index, newHyperlinkInfo));
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeFontForeColor).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, color_model_info_1.ColorModelInfo.makeByColor(color_1.ColorUtils.fromHashString("#483D8B")))
                .setChangeSelection(false)
                .setIntervalsInfo(selection_intervals_info_1.SelectionIntervalsInfo.fromInterval(options.subDocument, resultInterval)));
            this.history.endTransaction();
            this.control.serverDispatcher.forceSendingRequest();
        }
        if (hyperlinkInfo.anchor)
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.GoToBookmark)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, hyperlinkInfo.anchor));
        else if (!(url_1.Url.containsClientScript(hyperlinkInfo.uri) || /^\s*data\s*\:\s*/gi.test(hyperlinkInfo.uri)))
            url_1.Url.navigate(hyperlinkInfo.uri, "_blank");
        return true;
    };
    OpenHyperlinkCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return OpenHyperlinkCommand;
}(hyperlink_command_base_1.HyperlinkCommandBase));
exports.OpenHyperlinkCommand = OpenHyperlinkCommand;
