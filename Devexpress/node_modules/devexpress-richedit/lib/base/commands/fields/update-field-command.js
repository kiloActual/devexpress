"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_context_menu_helper_1 = require("../../../core/model/fields/field-context-menu-helper");
var tree_creator_1 = require("../../../core/model/fields/tree-creator");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_states_1 = require("../command-states");
var field_command_helper_1 = require("./field-command-helper");
var update_field_command_base_1 = require("./update-field-command-base");
var UpdateFieldCommandParameters = (function () {
    function UpdateFieldCommandParameters(subDocument, intervals, callbackFunc) {
        this.options = new tree_creator_1.UpdateFieldsOptions();
        this.subDocument = subDocument;
        this.intervals = intervals;
        this.callbackFunc = callbackFunc;
    }
    return UpdateFieldCommandParameters;
}());
exports.UpdateFieldCommandParameters = UpdateFieldCommandParameters;
var UpdateFieldCommand = (function (_super) {
    tslib_1.__extends(UpdateFieldCommand, _super);
    function UpdateFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UpdateFieldCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = field_context_menu_helper_1.FieldContextMenuHelper.showUpdateAndToogleCodeItems(this.selection.activeSubDocument.fields, this.selection.intervals);
        return state;
    };
    UpdateFieldCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields);
    };
    UpdateFieldCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var param = options.param;
        if (!param) {
            var intervalsForUpdate = this.selection.intervals;
            var callback = null;
            var tocField_1 = field_command_helper_1.FieldCommandHelper.findTocFieldBySelection(this.selection.activeSubDocument, this.selection);
            if (tocField_1) {
                intervalsForUpdate = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervalsForUpdate.concat(tocField_1.getAllFieldInterval()), true);
                callback = function () {
                    _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setPosition(tocField_1.getFieldStartPosition())));
                };
            }
            param = new UpdateFieldCommandParameters(this.selection.activeSubDocument, intervalsForUpdate, callback);
        }
        var floatingState = this.selection.getFloatingState();
        return update_field_command_base_1.UpdateFieldCommandBase.updateFields(this, [new sub_document_1.SubDocumentIntervals(param.subDocument, param.intervals)], function () {
            var selState = floatingState.finalize();
            _this.selection.setState(selState);
            if (param.callbackFunc)
                param.callbackFunc();
        }, param.options);
    };
    return UpdateFieldCommand;
}(update_field_command_base_1.UpdateFieldCommandBase));
exports.UpdateFieldCommand = UpdateFieldCommand;
