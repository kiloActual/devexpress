"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var field_1 = require("../../../core/model/fields/field");
var tree_creator_1 = require("../../../core/model/fields/tree-creator");
var model_iterator_1 = require("../../../core/model/model-iterator");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var FieldCommandHelper = (function () {
    function FieldCommandHelper() {
    }
    FieldCommandHelper.findTocFieldBySelection = function (subDocument, selection) {
        var fields = subDocument.fields;
        if (!fields.length)
            return null;
        var field;
        var isToc = false;
        var currentInterval = selection.intervals[0].clone();
        if (selection.isCollapsed()) {
            currentInterval.length++;
            var fieldIndex = field_1.Field.normedBinaryIndexOf(fields, currentInterval.start);
            if (fieldIndex < 0)
                return null;
            field = fields[fieldIndex];
            do
                isToc = this.isTocField(subDocument, field);
            while (!isToc && (field = field.parent));
        }
        else {
            var fieldIndex = Math.max(0, field_1.Field.normedBinaryIndexOf(fields, currentInterval.start));
            field = fields[fieldIndex].getAbsolutelyTopLevelField();
            for (fieldIndex = field.index; field = fields[fieldIndex]; fieldIndex++)
                if (isToc = this.isTocField(subDocument, field) || field.getFieldStartPosition() >= currentInterval.end)
                    break;
        }
        if (!isToc || !algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(field.getAllFieldInterval(), currentInterval))
            return null;
        return field;
    };
    FieldCommandHelper.isTocField = function (subDocument, field) {
        var iterator = new model_iterator_1.ModelIterator(subDocument, true);
        iterator.setPosition(field.getCodeStartPosition());
        return tree_creator_1.FieldsWaitingForUpdate.findName(iterator).fieldName == tree_creator_1.FieldsWaitingForUpdate.TOC_NAME;
    };
    return FieldCommandHelper;
}());
exports.FieldCommandHelper = FieldCommandHelper;
