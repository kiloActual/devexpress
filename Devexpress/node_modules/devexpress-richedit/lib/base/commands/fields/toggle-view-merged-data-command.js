"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ToggleViewMergedDataCommand = (function (_super) {
    tslib_1.__extends(ToggleViewMergedDataCommand, _super);
    function ToggleViewMergedDataCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleViewMergedDataCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.value = this.control.modelManager.richOptions.mailMerge.viewMergedData;
        return state;
    };
    ToggleViewMergedDataCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            this.control.modelManager.richOptions.mailMerge.isEnabled;
    };
    ToggleViewMergedDataCommand.prototype.canModify = function () {
        return true;
    };
    ToggleViewMergedDataCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        var mailMergeOptions = this.control.modelManager.richOptions.mailMerge;
        return typeof parameter === 'boolean' ? parameter : !mailMergeOptions.viewMergedData;
    };
    ToggleViewMergedDataCommand.prototype.executeCore = function (_state, options) {
        var mailMergeOptions = this.control.modelManager.richOptions.mailMerge;
        var viewMergedData = options.param;
        if (mailMergeOptions.viewMergedData !== viewMergedData) {
            mailMergeOptions.viewMergedData = viewMergedData;
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.UpdateAllFields).execute(this.control.commandManager.isPublicApiCall);
            return true;
        }
        return false;
    };
    return ToggleViewMergedDataCommand;
}(command_base_1.CommandBase));
exports.ToggleViewMergedDataCommand = ToggleViewMergedDataCommand;
