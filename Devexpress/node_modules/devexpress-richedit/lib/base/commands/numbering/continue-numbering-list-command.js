"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_states_1 = require("../command-states");
var numbering_list_command_base_1 = require("./numbering-list-command-base");
var ContinueNumberingListCommand = (function (_super) {
    tslib_1.__extends(ContinueNumberingListCommand, _super);
    function ContinueNumberingListCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ContinueNumberingListCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var subDocument = options.subDocument;
        var state = new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals));
        state.visible = false;
        if (state.enabled) {
            var startParagraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, state.intervals[0].start);
            var paragraph = subDocument.paragraphs[startParagraphIndex];
            if (paragraph.isInList() && this.getTargetNumberingListIndex(startParagraphIndex, paragraph.getAbstractNumberingListIndex(), subDocument) >= 0)
                state.visible = true;
            state.enabled = state.visible;
        }
        return state;
    };
    ContinueNumberingListCommand.prototype.executeCore = function (state, options) {
        var subDocument = options.subDocument;
        var startParagraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(options.subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, state.intervals[0].start);
        var startParagraphAbstractNumberingListIndex = subDocument.paragraphs[startParagraphIndex].getAbstractNumberingListIndex();
        var targetNumberingListIndex = this.getTargetNumberingListIndex(startParagraphIndex, startParagraphAbstractNumberingListIndex, subDocument);
        this.history.beginTransaction();
        for (var i = startParagraphIndex, paragraph; paragraph = subDocument.paragraphs[i]; i++) {
            if (paragraph.getAbstractNumberingListIndex() === startParagraphAbstractNumberingListIndex)
                this.history.addAndRedo(new numbering_list_history_items_1.AddParagraphToListHistoryItem(this.modelManipulator, subDocument, i, targetNumberingListIndex, paragraph.getListLevelIndex()));
        }
        this.history.endTransaction();
        return true;
    };
    ContinueNumberingListCommand.prototype.getTargetNumberingListIndex = function (startParagraphIndex, currentAbstractNumberingListIndex, subDocument) {
        for (var i = startParagraphIndex - 1, prevParagraph; prevParagraph = subDocument.paragraphs[i]; i--) {
            var prevParagraphAbstractNumberingListIndex = prevParagraph.getAbstractNumberingListIndex();
            if (prevParagraphAbstractNumberingListIndex === currentAbstractNumberingListIndex)
                return -1;
            if (prevParagraphAbstractNumberingListIndex >= 0)
                return prevParagraph.getNumberingListIndex();
        }
        return -1;
    };
    return ContinueNumberingListCommand;
}(numbering_list_command_base_1.NumberingListCommandBase));
exports.ContinueNumberingListCommand = ContinueNumberingListCommand;
