"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_paragraph_properties_history_items_1 = require("../../../core/model/history/items/list-level-paragraph-properties-history-items");
var list_level_properties_history_items_1 = require("../../../core/model/history/items/list-level-properties-history-items");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var control_1 = require("../../../core/model/options/control");
var list_1 = require("@devexpress/utils/lib/utils/list");
var numbering_list_command_base_1 = require("./numbering-list-command-base");
var ToggleNumberingListCommand = (function (_super) {
    tslib_1.__extends(ToggleNumberingListCommand, _super);
    function ToggleNumberingListCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleNumberingListCommand.prototype.getNumberingListType = function () {
        return numbering_list_1.NumberingType.Simple;
    };
    ToggleNumberingListCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.numberingSimple);
    };
    ToggleNumberingListCommand.prototype.getParagraphsLevelIndices = function (paragraphIndices, layoutPositions, continueNumberingList, listIndex, listLevelIndex, subDocument) {
        if (listLevelIndex >= 0 || !this.equalLeftIndent(paragraphIndices, layoutPositions, listIndex))
            return _super.prototype.getParagraphsLevelIndices.call(this, paragraphIndices, layoutPositions, continueNumberingList, listIndex, listLevelIndex, subDocument);
        else {
            var result = [];
            for (var i = 0; i < paragraphIndices.length; i++) {
                var paragraph = subDocument.paragraphs[paragraphIndices[i]];
                result.push(paragraph.isInList() ? paragraph.getListLevelIndex() : 0);
            }
            if (!continueNumberingList)
                this.assignLevelsIndents(paragraphIndices[0], listIndex, subDocument);
            return result;
        }
    };
    ToggleNumberingListCommand.prototype.equalLeftIndent = function (paragraphIndices, layoutPositions, listIndex) {
        if (paragraphIndices.length === 1)
            return true;
        var minLeftIndent = Number.MAX_VALUE;
        var maxLeftIndent = -Number.MAX_VALUE;
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 0; i < paragraphIndicesLength; i++) {
            var layoutPosition = layoutPositions[i];
            var startBoxPosX = layoutPosition.row.numberingListBox ? layoutPosition.row.numberingListBox.textBox.x : this.getStartBox(layoutPosition.row.boxes).x;
            var boxLeft = layoutPosition.row.x + startBoxPosX;
            minLeftIndent = Math.min(boxLeft, minLeftIndent);
            maxLeftIndent = Math.max(boxLeft, maxLeftIndent);
        }
        var numberingList = this.control.modelManager.model.numberingLists[listIndex];
        var leftIndent = numberingList.levels[1].getParagraphMergedProperties().leftIndent -
            numberingList.levels[0].getParagraphMergedProperties().leftIndent;
        return maxLeftIndent - minLeftIndent < leftIndent;
    };
    ToggleNumberingListCommand.prototype.assignLevelsIndentsCore = function (paragraphIndex, listIndex, listLevels, subDocument) {
        _super.prototype.assignLevelsIndentsCore.call(this, paragraphIndex, listIndex, listLevels, subDocument);
        var isEmptyList = list_1.ListUtils.unsafeAnyOf(subDocument.paragraphs, function (p) { return p.numberingListIndex == listIndex; }) == null;
        if (isEmptyList) {
            var paragraph = subDocument.paragraphs[paragraphIndex];
            if (paragraph.isInList())
                return;
            for (var i = 0, listLevel; listLevel = listLevels[i]; i++) {
                var listLevelMergedParagraphProperties = listLevel.getParagraphMergedProperties();
                this.history.addAndRedo(new list_level_properties_history_items_1.ListLevelOriginalLeftIndentHistoryItem(this.modelManipulator, false, listIndex, i, listLevelMergedParagraphProperties.leftIndent));
                this.history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphLeftIndentHistoryItem(this.modelManipulator, false, listIndex, i, listLevelMergedParagraphProperties.leftIndent + paragraph.getParagraphMergedProperties().leftIndent, true));
            }
        }
    };
    return ToggleNumberingListCommand;
}(numbering_list_command_base_1.NumberingListCommandBase));
exports.ToggleNumberingListCommand = ToggleNumberingListCommand;
