"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_numbering_list_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-numbering-list-box");
var layout_paragraph_mark_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-paragraph-mark-box");
var field_1 = require("../../../core/model/fields/field");
var list_level_character_properties_history_items_1 = require("../../../core/model/history/items/list-level-character-properties-history-items");
var list_level_properties_history_items_1 = require("../../../core/model/history/items/list-level-properties-history-items");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var remove_interval_history_item_1 = require("../../../core/model/history/items/remove-interval-history-item");
var numbering_helper_1 = require("../../../core/model/numbering-lists/numbering-helper");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var numbering_list_index_calculator_1 = require("../../../core/model/numbering-lists/numbering-list-index-calculator");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var rich_utils_1 = require("../../../core/model/rich-utils");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var NumberingListCommandBaseBase = (function (_super) {
    tslib_1.__extends(NumberingListCommandBaseBase, _super);
    function NumberingListCommandBaseBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberingListCommandBaseBase.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var intervals = list_1.ListUtils.deepCopy(options.intervalsInfo.intervals);
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), intervals, this.getValue(intervals, options.subDocument));
    };
    NumberingListCommandBaseBase.prototype.getValue = function (intervals, subDocument) {
        return this.areAllParagraphsHasValidNumberingListType(intervals, subDocument);
    };
    NumberingListCommandBaseBase.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    NumberingListCommandBaseBase.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return common_1.isNumber(parameter) ? parameter : -1;
    };
    NumberingListCommandBaseBase.prototype.deleteNumberingList = function (paragraphIndices, subDocument) {
        numbering_helper_1.NumberingHelper.deleteNumberingList(this.control.modelManager, subDocument, paragraphIndices);
    };
    NumberingListCommandBaseBase.prototype.insertNumberingList = function (paragraphIndices, startIndex, subDocument) {
        var calculator = new numbering_list_index_calculator_1.NumberingListIndexCalculator(subDocument, this.getNumberingListType(), startIndex === undefined ? -1 : startIndex);
        var targetListInfo = calculator.getTargetListInfo(paragraphIndices);
        var targetListIndex = targetListInfo ? targetListInfo.listIndex : this.createNewList(this.getAbstractNumberingList());
        var targetListLevelIndex = targetListInfo ? targetListInfo.listlevelIndex : -1;
        var paragraphsLayoutPositions = this.getParagraphsLayoutPositions(paragraphIndices, subDocument);
        var paragraphsLevelIndices = this.getParagraphsLevelIndices(paragraphIndices, paragraphsLayoutPositions, !!targetListInfo, targetListIndex, targetListLevelIndex, subDocument);
        this.insertNumberingListCore(paragraphIndices, targetListIndex, paragraphsLevelIndices, paragraphsLayoutPositions, subDocument);
    };
    NumberingListCommandBaseBase.prototype.changeNumberingList = function (paragraphIndices, subDocument) {
        var paragraph = subDocument.paragraphs[paragraphIndices[0]];
        var numberingListIndex = paragraph.getNumberingListIndex();
        var targetListIndex = this.createNewList(this.getAbstractNumberingList());
        this.assignLevelsIndents(paragraphIndices[0], targetListIndex, subDocument);
        for (var i = 0, paragraph_1; paragraph_1 = subDocument.paragraphs[i]; i++) {
            if (paragraph_1.getNumberingListIndex() === numberingListIndex)
                this.history.addAndRedo(new numbering_list_history_items_1.AddParagraphToListHistoryItem(this.modelManipulator, subDocument, i, targetListIndex, paragraph_1.getListLevelIndex()));
        }
    };
    NumberingListCommandBaseBase.prototype.modifyLevels = function (paragraphIndices, subDocument) {
        var _this = this;
        var paragraph = subDocument.paragraphs[paragraphIndices[0]];
        var numberingListIndex = paragraph.getNumberingListIndex();
        var targetListIndex = this.createNewList(this.getAbstractNumberingList());
        var targetList = this.control.modelManager.model.numberingLists[targetListIndex];
        var abstractNumberingListIndex = this.control.modelManager.model.numberingLists[numberingListIndex].abstractNumberingListIndex;
        list_1.ListUtils.forEach(paragraphIndices, function (index) {
            var paragraph = subDocument.paragraphs[index];
            if (paragraph.getNumberingListIndex() === numberingListIndex) {
                var levelIndex = paragraph.getListLevelIndex();
                var targetListLevel = targetList.levels[levelIndex];
                _this.history.addAndRedo(new list_level_properties_history_items_1.ListLevelDisplayFormatStringHistoryItem(_this.modelManipulator, true, abstractNumberingListIndex, levelIndex, targetListLevel.getListLevelProperties().displayFormatString));
                _this.history.addAndRedo(new list_level_properties_history_items_1.ListLevelFormatHistoryItem(_this.modelManipulator, true, abstractNumberingListIndex, levelIndex, targetListLevel.getListLevelProperties().format));
                _this.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontNameHistoryItem(_this.modelManipulator, true, abstractNumberingListIndex, levelIndex, targetListLevel.getCharacterMergedProperties().fontInfo, true));
                _this.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontSizeHistoryItem(_this.modelManipulator, true, abstractNumberingListIndex, levelIndex, targetListLevel.getCharacterMergedProperties().fontSize, true));
            }
        });
    };
    NumberingListCommandBaseBase.prototype.getAbstractNumberingList = function () {
        return this.control.modelManager.model.abstractNumberingListTemplates[this.getNumberingListTemplateIndex(this.getNumberingListType())];
    };
    NumberingListCommandBaseBase.prototype.insertNumberingListCore = function (paragraphIndices, targetListIndex, paragraphsLevelIndices, paragraphsLayoutPositions, subDocument) {
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 0; i < paragraphIndicesLength; i++) {
            var paragraphIndex = paragraphIndices[i];
            var paragraph = subDocument.paragraphs[paragraphIndex];
            this.processOldNumberingList(paragraph, subDocument);
            var targetListLevel = paragraphsLevelIndices[i];
            if (!paragraph.isInList())
                this.deleteLeadingWhiteSpaces(paragraph, paragraphsLayoutPositions[i].row.boxes, targetListLevel < 0, subDocument);
            if (targetListLevel >= 0) {
                this.history.addAndRedo(new numbering_list_history_items_1.AddParagraphToListHistoryItem(this.modelManipulator, subDocument, paragraphIndex, targetListIndex, targetListLevel));
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(paragraph.startLogPosition.value, 1)), paragraph.maskedParagraphProperties.leftIndent, false));
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(paragraph.startLogPosition.value, 1)), paragraph.maskedParagraphProperties.firstLineIndent, false));
            }
        }
    };
    NumberingListCommandBaseBase.prototype.processOldNumberingList = function (paragraph, subDocument) {
        if (paragraph.isInList()) {
            if (paragraph.numberingListIndex == numbering_list_1.NumberingList.NumberingListNotSettedIndex) {
                var leftIndent = paragraph.getParagraphMergedProperties().leftIndent;
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(paragraph.startLogPosition.value, 1)), leftIndent, true));
            }
        }
    };
    NumberingListCommandBaseBase.prototype.deleteLeadingWhiteSpaces = function (paragraph, boxes, replaceOnIndent, subDocument) {
        var length = 0;
        var leftIndent = 0;
        var manipulator = this.modelManipulator;
        for (var i = 0, box; box = boxes[i]; i++) {
            if (box.isWhitespace() && this.notInsideField(paragraph.startLogPosition.value + length + box.getLength(), subDocument)) {
                length += box.getLength();
                leftIndent += box.width;
            }
            else
                break;
        }
        if (length > 0) {
            this.correctSelectionIntervals(new fixed_1.FixedInterval(paragraph.startLogPosition.value, length));
            this.history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(paragraph.startLogPosition.value, length)), false));
        }
        if (replaceOnIndent && leftIndent > 0) {
            leftIndent = unit_converter_1.UnitConverter.pixelsToTwips(leftIndent);
            var properties = paragraph.getParagraphMergedProperties();
            var interval = paragraph.interval;
            if (properties.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Hanging) {
                if (leftIndent < properties.firstLineIndent)
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), properties.firstLineIndent - leftIndent, true));
                else if (properties.firstLineIndent === leftIndent) {
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), 0, true));
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), paragraph_properties_1.ParagraphFirstLineIndent.None, true));
                }
                else {
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), leftIndent - properties.firstLineIndent, true));
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), paragraph_properties_1.ParagraphFirstLineIndent.Indented, true));
                }
            }
            else {
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), properties.firstLineIndent + leftIndent, true));
                if (properties.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.None)
                    this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(manipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), paragraph_properties_1.ParagraphFirstLineIndent.Indented, true));
            }
        }
    };
    NumberingListCommandBaseBase.prototype.notInsideField = function (position, subDocument) {
        return field_1.Field.binaryIndexOf(subDocument.fields, position) < 0;
    };
    NumberingListCommandBaseBase.prototype.correctSelectionIntervals = function (removingInterval) {
        var intervals = list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals);
        for (var i = 0, interval = void 0; interval = intervals[i]; i++) {
            if (interval.start > removingInterval.start) {
                var newSelectionEnd = Math.max(removingInterval.start, interval.end - removingInterval.length);
                var newSelectionStart = Math.max(removingInterval.start, interval.start - removingInterval.length);
                intervals[i] = fixed_1.FixedInterval.fromPositions(newSelectionStart, newSelectionEnd);
            }
        }
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setIntervals(intervals)));
    };
    NumberingListCommandBaseBase.prototype.getParagraphsLayoutPositions = function (paragraphIndices, subDocument) {
        var result = [];
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 0; i < paragraphIndicesLength; i++) {
            var paragraphIndex = paragraphIndices[i];
            var paragraph = subDocument.paragraphs[paragraphIndex];
            var logPosition = paragraph.startLogPosition.value;
            var endRowConflictTags = new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false);
            var middleRowConflictTags = new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false);
            result.push(subDocument.isMain()
                ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, logPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box, endRowConflictTags, middleRowConflictTags)
                : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, logPosition, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box).create(endRowConflictTags, middleRowConflictTags));
        }
        return result;
    };
    NumberingListCommandBaseBase.prototype.getParagraphsLevelIndices = function (paragraphIndices, layoutPositions, _continueNumberingList, listIndex, listLevelIndex, subDocument) {
        var result = [];
        var numberingList = this.control.modelManager.model.numberingLists[listIndex];
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 0; i < paragraphIndicesLength; i++) {
            var paragraphIndex = paragraphIndices[i];
            if (listLevelIndex < 0) {
                var paragraph = subDocument.paragraphs[paragraphIndex];
                var layoutPosition = layoutPositions[i];
                var offsetLeft = layoutPosition.row.x;
                var cellInfo = layoutPosition.row.tableCellInfo;
                if (cellInfo)
                    offsetLeft -= cellInfo.x;
                var box = layoutPosition.row.numberingListBox ? layoutPosition.row.numberingListBox :
                    this.getStartBox(layoutPosition.row.boxes);
                offsetLeft += box instanceof layout_numbering_list_box_1.LayoutNumberingListBox ? box.textBox.x : box.x;
                if (box instanceof layout_paragraph_mark_box_1.LayoutParagraphMarkBox && (paragraphIndicesLength > 1 && (paragraph.length <= 1 || i !== 0)))
                    result.push(-1);
                else
                    result.push(this.calculateParagraphListLevel(offsetLeft, paragraph, numberingList));
            }
            else
                result.push(listLevelIndex);
        }
        this.assignLevelsIndents(paragraphIndices[0], listIndex, subDocument);
        return result;
    };
    NumberingListCommandBaseBase.prototype.calculateParagraphListLevel = function (layoutLeftIndent, _paragraph, numberingList) {
        var modelLeftIndent = unit_converter_1.UnitConverter.pixelsToTwips(layoutLeftIndent);
        for (var i = 0, level; level = numberingList.levels[i]; i++) {
            var levelParagraphProperties = level.getParagraphMergedProperties();
            var actualNumberingPosition = levelParagraphProperties.firstLineIndentType == paragraph_properties_1.ParagraphFirstLineIndent.Hanging ?
                (levelParagraphProperties.leftIndent - levelParagraphProperties.firstLineIndent) : levelParagraphProperties.leftIndent;
            if (modelLeftIndent <= actualNumberingPosition)
                return i;
        }
        return numberingList.levels.length - 1;
    };
    NumberingListCommandBaseBase.prototype.getStartBox = function (boxes) {
        for (var i = 0, box; box = boxes[i]; i++) {
            if (!box.isWhitespace())
                return box;
        }
        return boxes[0];
    };
    NumberingListCommandBaseBase.prototype.createNewList = function (template) {
        var abstractNumberingList = new numbering_list_1.AbstractNumberingList(this.control.modelManager.model);
        abstractNumberingList.copyFrom(template);
        abstractNumberingList.resetId();
        this.history.addAndRedo(new numbering_list_history_items_1.AddAbstractNumberingListHistoryItem(this.modelManipulator, abstractNumberingList));
        var abstractNumberingListIndex = this.control.modelManager.model.abstractNumberingLists.length - 1;
        var numberingList = new numbering_list_1.NumberingList(this.control.modelManager.model, abstractNumberingListIndex);
        this.history.addAndRedo(new numbering_list_history_items_1.AddNumberingListHistoryItem(this.modelManipulator, numberingList));
        return this.control.modelManager.model.numberingLists.length - 1;
    };
    NumberingListCommandBaseBase.prototype.processParagraphByIndex = function (_paragraphIndex) {
        return true;
    };
    NumberingListCommandBaseBase.prototype.getNumberingListTemplateIndex = function (type) {
        return numbering_helper_1.NumberingHelper.getNumberingListTemplateIndex(this.control.modelManager.model, type);
    };
    NumberingListCommandBaseBase.prototype.areAllParagraphsHasValidNumberingListType = function (intervals, subDocument) {
        var levelType = this.getNumberingListType();
        var paragraphIndices = subDocument.getParagraphIndicesByIntervals(intervals);
        for (var i = paragraphIndices.length - 1; i >= 0; i--) {
            var paragraphIndex = paragraphIndices[i];
            var paragraph = subDocument.paragraphs[paragraphIndex];
            if (!paragraph.isInList() || paragraph.getNumberingList().getLevelType(paragraph.getListLevelIndex()) !== levelType)
                return false;
        }
        return true;
    };
    NumberingListCommandBaseBase.prototype.getNumberingListType = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    NumberingListCommandBaseBase.prototype.assignLevelsIndents = function (paragraphIndex, listIndex, subDocument) {
        var numberingList = this.control.modelManager.model.numberingLists[listIndex];
        this.assignLevelsIndentsCore(paragraphIndex, listIndex, numberingList.levels, subDocument);
    };
    NumberingListCommandBaseBase.prototype.assignLevelsIndentsCore = function (paragraphIndex, listIndex, listLevels, subDocument) {
        var paragraph = subDocument.paragraphs[paragraphIndex];
        if (!paragraph.isInList())
            return;
        var originNumberingList = paragraph.getNumberingList();
        for (var i = 0, listLevel; listLevel = listLevels[i]; i++) {
            var originListLevelProperties = originNumberingList.levels[0].getListLevelProperties();
            var listLevelProperties = listLevel.getListLevelProperties();
            if (originListLevelProperties.originalLeftIndent !== listLevelProperties.originalLeftIndent)
                this.history.addAndRedo(new list_level_properties_history_items_1.ListLevelOriginalLeftIndentHistoryItem(this.modelManipulator, false, listIndex, i, originListLevelProperties.originalLeftIndent));
        }
    };
    return NumberingListCommandBaseBase;
}(command_base_1.CommandBase));
exports.NumberingListCommandBaseBase = NumberingListCommandBaseBase;
var NumberingListCommandBase = (function (_super) {
    tslib_1.__extends(NumberingListCommandBase, _super);
    function NumberingListCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberingListCommandBase.prototype.executeCore = function (state, options) {
        var _this = this;
        this.history.beginTransaction();
        var subDocument = options.subDocument;
        var paragraphIndices = subDocument.getParagraphIndicesByIntervals(state.intervals);
        var targetStartIndex = options.param;
        if (state.value)
            this.deleteNumberingList(paragraphIndices, subDocument);
        else if (this.selection.isCollapsed() && options.subDocument.paragraphs[paragraphIndices[0]].isInList() && targetStartIndex < 0) {
            var firstLevelSelected = list_1.ListUtils.unsafeAnyOf(paragraphIndices, function (index) {
                var paragraph = _this.selection.activeSubDocument.paragraphs[index];
                return paragraph.getListLevelIndex() == 0;
            });
            if (firstLevelSelected)
                this.changeNumberingList(paragraphIndices, subDocument);
            else
                this.modifyLevels(paragraphIndices, subDocument);
        }
        else
            this.insertNumberingList(paragraphIndices, targetStartIndex, subDocument);
        this.history.endTransaction();
        this.selection.changeState(function (newState) { return newState.setEndOfLine(false); });
        return true;
    };
    return NumberingListCommandBase;
}(NumberingListCommandBaseBase));
exports.NumberingListCommandBase = NumberingListCommandBase;
