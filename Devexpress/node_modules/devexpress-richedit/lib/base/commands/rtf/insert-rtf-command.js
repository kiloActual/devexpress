"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var json_field_enums_1 = require("../../../core/model/json/enums/json-field-enums");
var json_top_level_enums_1 = require("../../../core/model/json/enums/json-top-level-enums");
var server_model_inserter_1 = require("../../../core/model/json/importers/server-model-inserter");
var selection_intervals_info_1 = require("../../../core/selection/selection-intervals-info");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertRtfCommandOptions = (function (_super) {
    tslib_1.__extends(InsertRtfCommandOptions, _super);
    function InsertRtfCommandOptions(rtfText, position, subDocument, callback) {
        var _this = _super.call(this, null) || this;
        _this.rtfText = rtfText;
        if (!_this.intervalsInfo)
            _this.intervalsInfo = selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(subDocument, position);
        _this.callback = callback;
        return _this;
    }
    Object.defineProperty(InsertRtfCommandOptions.prototype, "position", {
        get: function () { return this.intervalsInfo.position; },
        enumerable: true,
        configurable: true
    });
    return InsertRtfCommandOptions;
}(command_base_1.CommandOptions));
exports.InsertRtfCommandOptions = InsertRtfCommandOptions;
var InsertRtfCommand = (function (_super) {
    tslib_1.__extends(InsertRtfCommand, _super);
    function InsertRtfCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertRtfCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertRtfCommand.prototype.executeCore = function (_state, options) {
        var reqParams = {};
        reqParams[json_top_level_enums_1.JSONInsertRtfCommand.RtfText] = options.rtfText;
        var request = new command_request_1.LoadCommandRequest(command_type_1.CommandType.InsertRtf, options.subDocument.id, reqParams);
        this.control.serverDispatcher.pushRequest(request, new command_request_1.RequestParams(false, true, true));
        this.control.commandManager.rtfCommandsOptions[request.id] = options;
        return true;
    };
    InsertRtfCommand.prototype.handleResponce = function (response) {
        var _a;
        var id = response[json_top_level_enums_1.JSONInsertRtfCommand.Id];
        var options = this.control.commandManager.rtfCommandsOptions[response[json_top_level_enums_1.JSONInsertRtfCommand.Id]];
        var result = response[json_top_level_enums_1.JSONInsertRtfCommand.Result];
        var isRtfValid = result != null;
        delete this.control.commandManager.rtfCommandsOptions[id];
        if (isRtfValid) {
            this.control.beginUpdate();
            server_model_inserter_1.ServerModelInserter.insertDocumentModelFromServer(this.control.modelManager, result, options.position, options.subDocument.id);
            this.control.endUpdate();
            this.control.barHolder.updateItemsState((_a = {}, _a[client_command_1.RichEditClientCommand.Undo] = true, _a));
        }
        options.callback(new fixed_1.FixedInterval(options.position, isRtfValid ? result[json_field_enums_1.JSONUpdateFieldCommandResult.DocumentLength] : 0), isRtfValid);
    };
    return InsertRtfCommand;
}(command_base_1.CommandBase));
exports.InsertRtfCommand = InsertRtfCommand;
