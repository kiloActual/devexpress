"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bookmarks_1 = require("../../core/model/bookmarks");
var bookmark_history_items_1 = require("../../core/model/history/items/bookmark-history-items");
var bookmarks_manipulator_1 = require("../../core/model/manipulators/bookmarks-manipulator");
var control_1 = require("../../core/model/options/control");
var model_states_1 = require("../scroll/model-states");
var set_selection_params_1 = require("../selection/set-selection-params");
var client_command_1 = require("./client-command");
var command_base_1 = require("./command-base");
var command_states_1 = require("./command-states");
var CreateBookmarkCommandParameter = (function (_super) {
    tslib_1.__extends(CreateBookmarkCommandParameter, _super);
    function CreateBookmarkCommandParameter(control, bkmTemplate) {
        var _this = _super.call(this, control) || this;
        _this.bkmTemplate = bkmTemplate;
        return _this;
    }
    return CreateBookmarkCommandParameter;
}(command_base_1.CommandOptions));
exports.CreateBookmarkCommandParameter = CreateBookmarkCommandParameter;
var BookmarkCommandBase = (function (_super) {
    tslib_1.__extends(BookmarkCommandBase, _super);
    function BookmarkCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BookmarkCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.bookmarks);
    };
    BookmarkCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    return BookmarkCommandBase;
}(command_base_1.CommandBase));
exports.BookmarkCommandBase = BookmarkCommandBase;
var CreateBookmarkCommand = (function (_super) {
    tslib_1.__extends(CreateBookmarkCommand, _super);
    function CreateBookmarkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CreateBookmarkCommand.prototype.executeCore = function (_state, parameter) {
        var bkmTemplate = parameter.param;
        var subDocument = parameter.subDocument;
        if (!bookmarks_1.Bookmark.isValidName(bkmTemplate.name, true))
            return false;
        this.history.beginTransaction();
        var bkmInfo = bookmarks_manipulator_1.BookmarksManipulator.findBookmark(this.control.modelManager.model.subDocuments, bkmTemplate.name);
        if (bkmInfo)
            this.history.addAndRedo(new bookmark_history_items_1.DeleteBookmarkHistoryItem(this.modelManipulator, bkmInfo.subDocument, bkmInfo.bookmark.constBookmark));
        this.history.addAndRedo(new bookmark_history_items_1.CreateBookmarkHistoryItem(this.modelManipulator, subDocument, bkmTemplate));
        this.history.endTransaction();
        return true;
    };
    return CreateBookmarkCommand;
}(BookmarkCommandBase));
exports.CreateBookmarkCommand = CreateBookmarkCommand;
var DeleteBookmarksCommand = (function (_super) {
    tslib_1.__extends(DeleteBookmarksCommand, _super);
    function DeleteBookmarksCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteBookmarksCommand.prototype.executeCore = function (_state, parameter) {
        var bookmarkNames = parameter.param;
        this.history.beginTransaction();
        var changed = false;
        for (var _i = 0, bookmarkNames_1 = bookmarkNames; _i < bookmarkNames_1.length; _i++) {
            var name_1 = bookmarkNames_1[_i];
            var bookmarkInfo = bookmarks_manipulator_1.BookmarksManipulator.findBookmark(this.control.modelManager.model.subDocuments, name_1);
            if (!bookmarkInfo)
                continue;
            this.history.addAndRedo(new bookmark_history_items_1.DeleteBookmarkHistoryItem(this.modelManipulator, bookmarkInfo.subDocument, bookmarkInfo.bookmark.constBookmark));
            changed = true;
        }
        this.history.endTransaction();
        return changed;
    };
    return DeleteBookmarksCommand;
}(BookmarkCommandBase));
exports.DeleteBookmarksCommand = DeleteBookmarksCommand;
var GoToBookmarkCommand = (function (_super) {
    tslib_1.__extends(GoToBookmarkCommand, _super);
    function GoToBookmarkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToBookmarkCommand.prototype.executeCore = function (_state, parameter) {
        var obj = bookmarks_manipulator_1.BookmarksManipulator.findBookmark(this.control.modelManager.model.subDocuments, parameter.param);
        if (!obj)
            return false;
        var selection = this.selection;
        var subDocument = obj.subDocument;
        var bookmark = obj.bookmark;
        this.changeSubDocument(subDocument);
        selection.setSelection(new set_selection_params_1.SetSelectionParams()
            .setInterval(bookmark.interval)
            .setEndOfLine(false)
            .setCorrectIntervalDueToFields(true)
            .setCorrectIntervalDueToTables(true));
        selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(selection)
            .setModelPosition(bookmark.start)
            .setRelativePosition(model_states_1.RelativePosition.Top)
            .setVerticalOffset(function (sizes) { return -Math.ceil(sizes.getVisibleAreaHeight(false) / 4); }));
        return true;
    };
    GoToBookmarkCommand.prototype.changeSubDocument = function (subDocument) {
        if (this.selection.activeSubDocument == subDocument)
            return;
        if (subDocument.isMain())
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain)
                .execute(this.control.commandManager.isPublicApiCall);
        else
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterBySubDocument)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, subDocument));
    };
    GoToBookmarkCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return GoToBookmarkCommand;
}(BookmarkCommandBase));
exports.GoToBookmarkCommand = GoToBookmarkCommand;
