"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var styles_manager_1 = require("../../../core/model/styles-manager");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var SetParagraphLevelCommandBase = (function (_super) {
    tslib_1.__extends(SetParagraphLevelCommandBase, _super);
    function SetParagraphLevelCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphLevelCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphFormatting);
    };
    SetParagraphLevelCommandBase.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.value = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeHeadingLevel).getState().value == this.getLevel(null);
        return state;
    };
    SetParagraphLevelCommandBase.prototype.executeCore = function (_state, options) {
        var level = this.getLevel(options.param);
        var styleName = level > 0 ? paragraph_style_1.ParagraphStyle.headingStyleName + " " + level : paragraph_style_1.ParagraphStyle.normalStyleName;
        var paragraphStyle = this.control.modelManager.model.getParagraphStyleByName(styleName);
        if (!paragraphStyle)
            paragraphStyle = styles_manager_1.StylesManager.getPresetParagraphStyleByName(styleName);
        if (paragraphStyle)
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeStyle).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, styles_manager_1.StylesManager.paragraphPrefix + styleName));
        else
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeHeadingLevel).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, level));
        return true;
    };
    SetParagraphLevelCommandBase.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.SetParagraphBodyTextLevel] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading1Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading2Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading3Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading4Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading5Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading6Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading7Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading8Level] = true,
            _a[client_command_1.RichEditClientCommand.SetParagraphHeading9Level] = true,
            _a;
    };
    return SetParagraphLevelCommandBase;
}(command_base_1.CommandBase));
exports.SetParagraphLevelCommandBase = SetParagraphLevelCommandBase;
var SetParagraphLevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphLevelCommand, _super);
    function SetParagraphLevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphLevelCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.value = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeHeadingLevel).getState().value;
        return state;
    };
    SetParagraphLevelCommand.prototype.getLevel = function (parameter) {
        return parameter;
    };
    return SetParagraphLevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphLevelCommand = SetParagraphLevelCommand;
var SetParagraphBodyTextLevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphBodyTextLevelCommand, _super);
    function SetParagraphBodyTextLevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphBodyTextLevelCommand.prototype.getLevel = function (_parameter) { return 0; };
    return SetParagraphBodyTextLevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphBodyTextLevelCommand = SetParagraphBodyTextLevelCommand;
var SetParagraphHeading1LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading1LevelCommand, _super);
    function SetParagraphHeading1LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading1LevelCommand.prototype.getLevel = function (_parameter) { return 1; };
    return SetParagraphHeading1LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading1LevelCommand = SetParagraphHeading1LevelCommand;
var SetParagraphHeading2LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading2LevelCommand, _super);
    function SetParagraphHeading2LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading2LevelCommand.prototype.getLevel = function (_parameter) { return 2; };
    return SetParagraphHeading2LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading2LevelCommand = SetParagraphHeading2LevelCommand;
var SetParagraphHeading3LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading3LevelCommand, _super);
    function SetParagraphHeading3LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading3LevelCommand.prototype.getLevel = function (_parameter) { return 3; };
    return SetParagraphHeading3LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading3LevelCommand = SetParagraphHeading3LevelCommand;
var SetParagraphHeading4LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading4LevelCommand, _super);
    function SetParagraphHeading4LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading4LevelCommand.prototype.getLevel = function (_parameter) { return 4; };
    return SetParagraphHeading4LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading4LevelCommand = SetParagraphHeading4LevelCommand;
var SetParagraphHeading5LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading5LevelCommand, _super);
    function SetParagraphHeading5LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading5LevelCommand.prototype.getLevel = function (_parameter) { return 5; };
    return SetParagraphHeading5LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading5LevelCommand = SetParagraphHeading5LevelCommand;
var SetParagraphHeading6LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading6LevelCommand, _super);
    function SetParagraphHeading6LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading6LevelCommand.prototype.getLevel = function (_parameter) { return 6; };
    return SetParagraphHeading6LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading6LevelCommand = SetParagraphHeading6LevelCommand;
var SetParagraphHeading7LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading7LevelCommand, _super);
    function SetParagraphHeading7LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading7LevelCommand.prototype.getLevel = function (_parameter) { return 7; };
    return SetParagraphHeading7LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading7LevelCommand = SetParagraphHeading7LevelCommand;
var SetParagraphHeading8LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading8LevelCommand, _super);
    function SetParagraphHeading8LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading8LevelCommand.prototype.getLevel = function (_parameter) { return 8; };
    return SetParagraphHeading8LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading8LevelCommand = SetParagraphHeading8LevelCommand;
var SetParagraphHeading9LevelCommand = (function (_super) {
    tslib_1.__extends(SetParagraphHeading9LevelCommand, _super);
    function SetParagraphHeading9LevelCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetParagraphHeading9LevelCommand.prototype.getLevel = function (_parameter) { return 9; };
    return SetParagraphHeading9LevelCommand;
}(SetParagraphLevelCommandBase));
exports.SetParagraphHeading9LevelCommand = SetParagraphHeading9LevelCommand;
