"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var section_properties_history_items_1 = require("../../../core/model/history/items/section-properties-history-items");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var section_properties_command_base_1 = require("../section-properties/section-properties-command-base");
var RulerSectionMarginCommandBase = (function (_super) {
    tslib_1.__extends(RulerSectionMarginCommandBase, _super);
    function RulerSectionMarginCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerSectionMarginCommandBase.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.interval = this.selection.lastSelectedInterval;
    };
    RulerSectionMarginCommandBase.prototype.getLayoutTextBox = function () {
        var subDocId = this.selection.specialRunInfo.getParentSubDocument().id;
        var pos = this.selection.specialRunInfo.getPosition();
        var page = this.control.layout.pages[this.selection.pageIndex];
        return page ? page.anchoredObjectHolder.getObjectByModelPosition(this.control.layout, pos, subDocId) : null;
    };
    RulerSectionMarginCommandBase.prototype.isEnabled = function (_options) {
        return _super.prototype.isEnabled.call(this) && !this.selection.activeSubDocument.isTextBox() &&
            (!this.control.modelManager.model.isDocumentProtectionEnabled ||
                section_properties_command_base_1.SectionPropertiesCommandBase.rangePermissionIncludeFullSection(this.control, this.selection.activeSubDocument, this.selection.intervals));
    };
    return RulerSectionMarginCommandBase;
}(command_base_1.CommandBase));
exports.RulerSectionMarginCommandBase = RulerSectionMarginCommandBase;
var RulerSectionMarginLeftCommand = (function (_super) {
    tslib_1.__extends(RulerSectionMarginLeftCommand, _super);
    function RulerSectionMarginLeftCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerSectionMarginLeftCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var value = 0;
        if (options.subDocument.isTextBox()) {
            var layoutTextBox = this.getLayoutTextBox();
            if (layoutTextBox)
                value = layoutTextBox.x + layoutTextBox.textBoxProperties.leftMargin;
        }
        else
            value = unit_converter_1.UnitConverter.twipsToPixelsF(this.inputPosition.getMergedSectionPropertiesRaw().marginLeft);
        return new command_states_1.IntervalCommandState(this.isEnabled(options), options.intervalsInfo.interval, value);
    };
    RulerSectionMarginLeftCommand.prototype.executeCore = function (_state, options) {
        var interval = options.intervalsInfo.interval;
        var value = unit_converter_1.UnitConverter.pixelsToTwips(options.param);
        this.history.addAndRedo(new section_properties_history_items_1.SectionMarginLeftHistoryItem(this.modelManipulator, interval, value));
        return true;
    };
    return RulerSectionMarginLeftCommand;
}(RulerSectionMarginCommandBase));
exports.RulerSectionMarginLeftCommand = RulerSectionMarginLeftCommand;
var RulerSectionMarginRightCommand = (function (_super) {
    tslib_1.__extends(RulerSectionMarginRightCommand, _super);
    function RulerSectionMarginRightCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerSectionMarginRightCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var value = 0;
        if (options.subDocument.isTextBox()) {
            var layoutTextBox = this.getLayoutTextBox();
            if (layoutTextBox) {
                var pageWidth = unit_converter_1.UnitConverter.twipsToPixelsF(this.inputPosition.getMergedSectionPropertiesRaw().pageWidth);
                value = pageWidth - layoutTextBox.x - layoutTextBox.width + layoutTextBox.textBoxProperties.rightMargin;
            }
        }
        else
            value = unit_converter_1.UnitConverter.twipsToPixelsF(this.inputPosition.getMergedSectionPropertiesRaw().marginRight);
        return new command_states_1.IntervalCommandState(this.isEnabled(options), options.intervalsInfo.interval, value);
    };
    RulerSectionMarginRightCommand.prototype.executeCore = function (state, options) {
        var interval = state.interval;
        var value = unit_converter_1.UnitConverter.pixelsToTwips(options.param);
        this.history.addAndRedo(new section_properties_history_items_1.SectionMarginRightHistoryItem(this.modelManipulator, interval, value));
        return true;
    };
    return RulerSectionMarginRightCommand;
}(RulerSectionMarginCommandBase));
exports.RulerSectionMarginRightCommand = RulerSectionMarginRightCommand;
