"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var columns_calculator_1 = require("../../../core/layout-formatter/formatter/utils/columns-calculator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var section_properties_history_items_1 = require("../../../core/model/history/items/section-properties-history-items");
var section_column_properties_1 = require("../../../core/model/section/section-column-properties");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var RulerSectionColumnsSettingsCommand = (function (_super) {
    tslib_1.__extends(RulerSectionColumnsSettingsCommand, _super);
    function RulerSectionColumnsSettingsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerSectionColumnsSettingsCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        var lastSelectedInterval = this.selection.lastSelectedInterval;
        options.intervalsInfo.intervals = [new fixed_1.FixedInterval(this.selection.forwardDirection ? lastSelectedInterval.end : lastSelectedInterval.start, 0)];
    };
    RulerSectionColumnsSettingsCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var interval = options.intervalsInfo.interval;
        var position = interval.start;
        var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.control.modelManager.model.sections, function (s) { return s.startLogPosition.value; }, position);
        var section = this.control.modelManager.model.sections[sectionIndex];
        var columnsBounds = columns_calculator_1.ColumnCalculator.generateSectionColumns(section.sectionProperties);
        var columns = [];
        for (var i = 0, columnBound; columnBound = columnsBounds[i]; i++) {
            columns.push(new section_column_properties_1.SectionColumnProperties(columnBound.width, 0));
            if (i > 0) {
                var prevBound = columnsBounds[i - 1];
                columns[i - 1].space = columnBound.x - (prevBound.x + prevBound.width);
            }
        }
        var layoutPosition = options.subDocument.isMain() ?
            new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, options.subDocument, position, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)) : null;
        return new RulerSectionColumnsSettingsState(this.isEnabled(), interval, columns, section.sectionProperties.equalWidthColumns, layoutPosition ? layoutPosition.columnIndex : 0);
    };
    RulerSectionColumnsSettingsCommand.prototype.executeCore = function (state, options) {
        var rulerState = state;
        var changed = false;
        var modelManipulator = this.modelManipulator;
        if (rulerState.equalWidth) {
            var stateColumn = rulerState.value[0];
            if (options.param[0].space !== stateColumn.space) {
                this.history.addAndRedo(new section_properties_history_items_1.SectionSpaceHistoryItem(modelManipulator, rulerState.interval, unit_converter_1.UnitConverter.pixelsToTwips(options.param[0].space)));
                changed = true;
            }
        }
        else {
            var newColumnsInfo = [];
            var oldColumnsInfo = rulerState.value;
            list_1.ListUtils.forEach(options.param, function (p, i) {
                changed = changed || p.width !== oldColumnsInfo[i].width || p.space !== oldColumnsInfo[i].space;
                newColumnsInfo.push(new section_column_properties_1.SectionColumnProperties(unit_converter_1.UnitConverter.pixelsToTwips(p.width), unit_converter_1.UnitConverter.pixelsToTwips(p.space || 0)));
            });
            if (changed)
                this.history.addAndRedo(new section_properties_history_items_1.SectionColumnsInfoHistoryItem(modelManipulator, rulerState.interval, newColumnsInfo));
        }
        return changed;
    };
    return RulerSectionColumnsSettingsCommand;
}(command_base_1.CommandBase));
exports.RulerSectionColumnsSettingsCommand = RulerSectionColumnsSettingsCommand;
var RulerSectionColumnsSettingsState = (function (_super) {
    tslib_1.__extends(RulerSectionColumnsSettingsState, _super);
    function RulerSectionColumnsSettingsState(enabled, interval, columns, equalWidth, activeIndex) {
        var _this = _super.call(this, enabled, interval, columns) || this;
        _this.equalWidth = equalWidth;
        _this.activeIndex = activeIndex;
        return _this;
    }
    return RulerSectionColumnsSettingsState;
}(command_states_1.IntervalCommandState));
exports.RulerSectionColumnsSettingsState = RulerSectionColumnsSettingsState;
