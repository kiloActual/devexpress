"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var table_cell_iterator_1 = require("../../../core/layout/table/table-cell-iterator");
var table_cell_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-cell-properties-merger");
var table_row_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-row-properties-merger");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var TableColumnSeparatorStruct = (function () {
    function TableColumnSeparatorStruct() {
        this.index = 0;
        this.tableIndex = 0;
        this.cellSpacing = 0;
        this.minValue = -1;
        this.maxValue = -1;
        this.items = [];
    }
    Object.defineProperty(TableColumnSeparatorStruct.prototype, "currItem", {
        get: function () {
            return this.items[this.index];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableColumnSeparatorStruct.prototype, "hasItems", {
        get: function () {
            return this.items.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    TableColumnSeparatorStruct.prototype.createItem = function (position, marginLeft, marginRight) {
        this.items.push(new TableColumnSeparatorItem(position, marginLeft, marginRight));
    };
    TableColumnSeparatorStruct.prototype.clone = function () {
        var result = new TableColumnSeparatorStruct();
        result.index = this.index;
        result.tableIndex = this.tableIndex;
        result.minValue = this.minValue;
        result.maxValue = this.maxValue;
        result.items = list_1.ListUtils.deepCopy(this.items);
        return result;
    };
    return TableColumnSeparatorStruct;
}());
exports.TableColumnSeparatorStruct = TableColumnSeparatorStruct;
var TableColumnSeparatorItem = (function () {
    function TableColumnSeparatorItem(position, leftMargin, rightMargin) {
        this.position = position;
        this.leftMargin = leftMargin;
        this.rightMargin = rightMargin;
    }
    TableColumnSeparatorItem.prototype.clone = function () {
        return new TableColumnSeparatorItem(this.position, this.leftMargin, this.rightMargin);
    };
    return TableColumnSeparatorItem;
}());
exports.TableColumnSeparatorItem = TableColumnSeparatorItem;
var RulerTableColumnSeparatorsCommand = (function (_super) {
    tslib_1.__extends(RulerTableColumnSeparatorsCommand, _super);
    function RulerTableColumnSeparatorsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerTableColumnSeparatorsCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.interval = this.selection.lastSelectedInterval;
    };
    RulerTableColumnSeparatorsCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.getColumnSeparatorsInfo(options.intervalsInfo.position, options.subDocument));
    };
    RulerTableColumnSeparatorsCommand.prototype.executeCore = function (_state, _parameter) {
        return true;
    };
    RulerTableColumnSeparatorsCommand.prototype.getLogicCell = function (grid, rowIndex, cellIndex) {
        return grid.table.rows[rowIndex].cells[grid.tableCellGridInfos[rowIndex][cellIndex].getCellIndex(0)];
    };
    RulerTableColumnSeparatorsCommand.prototype.getMergedCell = function (layoutGrids, gridCell, startRowIndex) {
        var currLayoutGrid = layoutGrids[0];
        if (layoutGrids.length > 1) {
            for (var table = void 0, i = 0; table = layoutGrids[i]; i++) {
                if (table.tableRows[startRowIndex]) {
                    currLayoutGrid = table;
                    break;
                }
                startRowIndex = startRowIndex - table.tableRows.length;
            }
        }
        return this.findLayoutCellByCellGridIndex(currLayoutGrid.tableRows[startRowIndex].rowCells, gridCell.getGridCellIndex());
    };
    RulerTableColumnSeparatorsCommand.prototype.getColumnSeparatorsInfo = function (position, subDocument) {
        var _this = this;
        var sellSpacing = null;
        var setCellSpacing = function (cell) {
            if (sellSpacing == null) {
                var table = cell.parentRow.parentTable;
                var val = new table_row_properties_merger_1.TableRowPropertiesMergerCellSpacing(_this.control.modelManager.model, table, cell.parentRow.tablePropertiesException)
                    .getProperty(cell.parentRow.properties, table.style, cell.conditionalFormatting, _this.control.modelManager.model.defaultTableRowProperties);
                sellSpacing = unit_converter_1.UnitConverter.twipsToPixelsF(val.value);
            }
            return sellSpacing;
        };
        var struct = new TableColumnSeparatorStruct();
        if (this.selection.tableInfo.extendedData.numRows) {
            var layoutPosition = (subDocument.isMain()
                ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, position, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, position, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character))
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
            if (layoutPosition) {
                var iterator = new table_cell_iterator_1.TableCellIterator(layoutPosition, this.control.layout, this.control.measurer);
                var layoutCell = iterator.tableCellInfo;
                if (layoutCell) {
                    var layoutGrids = iterator.getLayoutTablesAssociatedWithLogicGrid();
                    var currLayoutGrid = layoutCell.parentRow.parentTable;
                    var currLogicGrid = currLayoutGrid.logicInfo.grid;
                    var logicGridRowIndex = layoutCell.parentRow.rowIndex;
                    var gridCells = currLogicGrid.tableCellInfos[logicGridRowIndex];
                    var isCreatedLastItem = false;
                    for (var gridCell = void 0, i = 0; gridCell = gridCells[i]; i++) {
                        var startRowIndex = gridCell.getStartRowIndex();
                        if (startRowIndex != logicGridRowIndex) {
                            var mergedCell = this.getMergedCell(layoutGrids, gridCell, startRowIndex);
                            if (mergedCell) {
                                var logicCell = this.getLogicCell(currLogicGrid, startRowIndex, mergedCell.cellGridIndex);
                                var xPos = mergedCell.x;
                                if (i == gridCells.length - 1) {
                                    isCreatedLastItem = true;
                                    struct.createItem(xPos + mergedCell.width, 0, 0);
                                    setCellSpacing(logicCell);
                                }
                                struct.createItem(xPos, this.getMarginLeft(logicCell), this.getMarginRight(logicCell));
                                setCellSpacing(logicCell);
                            }
                        }
                    }
                    for (var i = 0, cell = void 0; cell = layoutCell.parentRow.rowCells[i]; i++) {
                        var logicCell = this.getLogicCell(currLogicGrid, logicGridRowIndex, cell.cellGridIndex);
                        struct.createItem(cell.x, this.getMarginLeft(logicCell), this.getMarginRight(logicCell));
                        setCellSpacing(logicCell);
                    }
                    if (!isCreatedLastItem) {
                        var lastLayoutCell = list_1.ListUtils.last(layoutCell.parentRow.rowCells);
                        struct.createItem(lastLayoutCell.right, 0, 0);
                    }
                    struct.tableIndex = currLogicGrid.table.index;
                    struct.items = struct.items.sort(function (a, b) { return a.position - b.position; });
                    struct.index = search_1.SearchUtils.normedInterpolationIndexOf(struct.items, function (item) { return item.position; }, layoutCell.x);
                    if (currLayoutGrid.parentCell) {
                        struct.minValue = currLayoutGrid.parentCell.x;
                        struct.maxValue = currLayoutGrid.parentCell.right;
                    }
                }
            }
        }
        struct.cellSpacing = sellSpacing == null ? 0 : sellSpacing;
        return struct;
    };
    RulerTableColumnSeparatorsCommand.prototype.getMarginLeft = function (cell) {
        var table = cell.parentRow.parentTable;
        var val = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginLeft(table, this.control.modelManager.model, cell.parentRow.tablePropertiesException)
            .getProperty(cell.properties, table.style, cell.conditionalFormatting, this.control.modelManager.model.defaultTableCellProperties);
        return unit_converter_1.UnitConverter.twipsToPixelsF(val.value);
    };
    RulerTableColumnSeparatorsCommand.prototype.getMarginRight = function (cell) {
        var table = cell.parentRow.parentTable;
        var val = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginRight(table, this.control.modelManager.model, cell.parentRow.tablePropertiesException)
            .getProperty(cell.properties, table.style, cell.conditionalFormatting, this.control.modelManager.model.defaultTableCellProperties);
        return unit_converter_1.UnitConverter.twipsToPixelsF(val.value);
    };
    RulerTableColumnSeparatorsCommand.prototype.findLayoutCellByCellGridIndex = function (cells, cellGridIndex) {
        return cells[search_1.SearchUtils.normedInterpolationIndexOf(cells, function (c) { return c.cellGridIndex; }, cellGridIndex)];
    };
    return RulerTableColumnSeparatorsCommand;
}(command_base_1.CommandBase));
exports.RulerTableColumnSeparatorsCommand = RulerTableColumnSeparatorsCommand;
