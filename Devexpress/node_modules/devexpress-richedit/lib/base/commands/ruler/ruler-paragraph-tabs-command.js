"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_tab_space_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var rich_utils_1 = require("../../../core/model/rich-utils");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var RulerTabAction;
(function (RulerTabAction) {
    RulerTabAction[RulerTabAction["None"] = 0] = "None";
    RulerTabAction[RulerTabAction["Insert"] = 1] = "Insert";
    RulerTabAction[RulerTabAction["Delete"] = 2] = "Delete";
})(RulerTabAction = exports.RulerTabAction || (exports.RulerTabAction = {}));
var TabRulerCommandBase = (function (_super) {
    tslib_1.__extends(TabRulerCommandBase, _super);
    function TabRulerCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabRulerCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    TabRulerCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphTabs);
    };
    TabRulerCommandBase.prototype.executeCore = function (_state, options) {
        var info = rich_utils_1.RichUtils.getSelectedParagraphs(options.intervalsInfo.intervals, options.subDocument);
        this.history.beginTransaction();
        this.executeHistoryItems(this.modelManipulator, options.subDocument, info.intervals[0], info.paragraphs[0], options.param);
        this.history.endTransaction();
        return true;
    };
    TabRulerCommandBase.prototype.findTabByPosition = function (paragraph, position) {
        var index = search_1.SearchUtils.binaryIndexOf(paragraph.tabs.tabsInfo, function (a) { return a.position - position; });
        return index > -1 ? paragraph.tabs.tabsInfo[index] : null;
    };
    TabRulerCommandBase.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    return TabRulerCommandBase;
}(command_base_1.CommandBase));
exports.TabRulerCommandBase = TabRulerCommandBase;
var InsertTabToParagraphCommand = (function (_super) {
    tslib_1.__extends(InsertTabToParagraphCommand, _super);
    function InsertTabToParagraphCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTabToParagraphCommand.prototype.executeHistoryItems = function (modelManipulator, subDocument, interval, _firstParagraph, params) {
        var tabInfo = new paragraph_style_1.TabInfo(unit_converter_1.UnitConverter.pixelsToTwips(params.position), params.align, layout_tab_space_box_1.TabLeaderType.None, false, false);
        this.history.addAndRedo(new paragraph_properties_history_items_1.InsertTabToParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), tabInfo));
    };
    return InsertTabToParagraphCommand;
}(TabRulerCommandBase));
exports.InsertTabToParagraphCommand = InsertTabToParagraphCommand;
var DeleteTabAtParagraphCommand = (function (_super) {
    tslib_1.__extends(DeleteTabAtParagraphCommand, _super);
    function DeleteTabAtParagraphCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteTabAtParagraphCommand.prototype.executeHistoryItems = function (modelManipulator, subDocument, interval, firstParagraph, params) {
        var tabInfo = this.findTabByPosition(firstParagraph, unit_converter_1.UnitConverter.pixelsToTwips(params));
        this.history.addAndRedo(new paragraph_properties_history_items_1.DeleteTabAtParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), tabInfo));
    };
    return DeleteTabAtParagraphCommand;
}(TabRulerCommandBase));
exports.DeleteTabAtParagraphCommand = DeleteTabAtParagraphCommand;
var MoveTabRulerInParagraphCommand = (function (_super) {
    tslib_1.__extends(MoveTabRulerInParagraphCommand, _super);
    function MoveTabRulerInParagraphCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MoveTabRulerInParagraphCommand.prototype.executeHistoryItems = function (modelManipulator, subDocument, interval, firstParagraph, params) {
        var oldTabInfo = this.findTabByPosition(firstParagraph, unit_converter_1.UnitConverter.pixelsToTwips(params.start));
        var newTabInfo = oldTabInfo.clone();
        newTabInfo.position = unit_converter_1.UnitConverter.pixelsToTwips(params.end);
        this.history.addAndRedo(new paragraph_properties_history_items_1.DeleteTabAtParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), oldTabInfo));
        this.history.addAndRedo(new paragraph_properties_history_items_1.InsertTabToParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), newTabInfo));
    };
    return MoveTabRulerInParagraphCommand;
}(TabRulerCommandBase));
exports.MoveTabRulerInParagraphCommand = MoveTabRulerInParagraphCommand;
