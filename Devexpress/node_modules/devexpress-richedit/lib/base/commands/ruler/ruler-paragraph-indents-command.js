"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var rich_utils_1 = require("../../../core/model/rich-utils");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var RulerParagraphLeftIndentsCommandValue = (function (_super) {
    tslib_1.__extends(RulerParagraphLeftIndentsCommandValue, _super);
    function RulerParagraphLeftIndentsCommandValue(control, hanging, firstLine) {
        var _this = _super.call(this, control) || this;
        _this.hanging = hanging;
        _this.firstLine = firstLine;
        return _this;
    }
    return RulerParagraphLeftIndentsCommandValue;
}(command_base_1.CommandOptions));
exports.RulerParagraphLeftIndentsCommandValue = RulerParagraphLeftIndentsCommandValue;
var RulerParagraphLeftIndentsCommand = (function (_super) {
    tslib_1.__extends(RulerParagraphLeftIndentsCommand, _super);
    function RulerParagraphLeftIndentsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerParagraphLeftIndentsCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.subDocument = this.selection.activeSubDocument;
        options.intervalsInfo.intervals = this.selection.intervals;
    };
    RulerParagraphLeftIndentsCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        if (!options.subDocument)
            this.DEPRECATEDCorrectlMainCommandOptions(options);
        var info = rich_utils_1.RichUtils.getSelectedParagraphs(options.intervalsInfo.intervals, options.subDocument);
        var parProps = info.paragraphs[0].getParagraphMergedProperties();
        var leftIndent = unit_converter_1.UnitConverter.twipsToPixelsF(parProps.leftIndent);
        var fstLineIndent = unit_converter_1.UnitConverter.twipsToPixelsF(parProps.firstLineIndent);
        switch (parProps.firstLineIndentType) {
            case paragraph_properties_1.ParagraphFirstLineIndent.Indented:
                return new command_states_1.SimpleCommandState(this.isEnabled(), new RulerParagraphLeftIndentsCommandValue(this.control, leftIndent, leftIndent + fstLineIndent));
            case paragraph_properties_1.ParagraphFirstLineIndent.None:
                return new command_states_1.SimpleCommandState(this.isEnabled(), new RulerParagraphLeftIndentsCommandValue(this.control, leftIndent, leftIndent));
            case paragraph_properties_1.ParagraphFirstLineIndent.Hanging:
                return new command_states_1.SimpleCommandState(this.isEnabled(), new RulerParagraphLeftIndentsCommandValue(this.control, leftIndent, leftIndent - fstLineIndent));
        }
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    RulerParagraphLeftIndentsCommand.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    RulerParagraphLeftIndentsCommand.prototype.executeCore = function (_state, options) {
        var indents = options;
        var subDocument = options.subDocument;
        var hanging = unit_converter_1.UnitConverter.pixelsToTwips(indents.hanging);
        var fstLine = unit_converter_1.UnitConverter.pixelsToTwips(indents.firstLine);
        var firstLineIndent = Math.abs(hanging - fstLine);
        var firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.None;
        if (hanging < fstLine)
            firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Indented;
        else if (hanging > fstLine)
            firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
        var modelManipulator = this.modelManipulator;
        this.history.beginTransaction();
        for (var _i = 0, _a = options.intervalsInfo.intervals; _i < _a.length; _i++) {
            var interval = _a[_i];
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), firstLineIndent, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), firstLineIndentType, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), hanging, true));
        }
        this.history.endTransaction();
        return true;
    };
    return RulerParagraphLeftIndentsCommand;
}(command_base_1.CommandBase));
exports.RulerParagraphLeftIndentsCommand = RulerParagraphLeftIndentsCommand;
var RulerParagraphRightIndentCommand = (function (_super) {
    tslib_1.__extends(RulerParagraphRightIndentCommand, _super);
    function RulerParagraphRightIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerParagraphRightIndentCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var info = rich_utils_1.RichUtils.getSelectedParagraphs(options.intervalsInfo.intervals, options.subDocument);
        var parWithMaxRightIndent = info.paragraphs[0];
        for (var i = 1, paragraph; paragraph = info.paragraphs[i]; i++)
            if (paragraph.getParagraphMergedProperties().rightIndent > parWithMaxRightIndent.getParagraphMergedProperties().rightIndent)
                parWithMaxRightIndent = paragraph;
        var rightIndent = unit_converter_1.UnitConverter.twipsToPixelsF(parWithMaxRightIndent.getParagraphMergedProperties().rightIndent);
        return new command_states_1.SimpleCommandState(this.isEnabled(), new RulerParagraphLeftIndentsCommandValue(this.control, rightIndent, undefined));
    };
    RulerParagraphRightIndentCommand.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    RulerParagraphRightIndentCommand.prototype.executeCore = function (state, options) {
        this.history.beginTransaction();
        for (var i = 0, interval; interval = state.value.intervalsInfo.intervals[i]; i++)
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphRightIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(options.subDocument, interval), unit_converter_1.UnitConverter.pixelsToTwips(options.param), true));
        this.history.endTransaction();
        return true;
    };
    return RulerParagraphRightIndentCommand;
}(command_base_1.CommandBase));
exports.RulerParagraphRightIndentCommand = RulerParagraphRightIndentCommand;
