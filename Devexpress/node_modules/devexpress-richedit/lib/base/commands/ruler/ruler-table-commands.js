"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var table_properties_history_items_1 = require("../../../core/model/history/items/tables/table-properties-history-items");
var table_row_properties_history_items_1 = require("../../../core/model/history/items/tables/table-row-properties-history-items");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var resize_table_helper_1 = require("../../mouse-handler/resize-table-helper");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var RulerChangeTableSizeCommandParametersBase = (function () {
    function RulerChangeTableSizeCommandParametersBase(modelTableIndex, offset, layoutTable) {
        this.modelTableIndex = modelTableIndex;
        this.offset = offset;
        this.layoutTable = layoutTable;
    }
    return RulerChangeTableSizeCommandParametersBase;
}());
exports.RulerChangeTableSizeCommandParametersBase = RulerChangeTableSizeCommandParametersBase;
var RulerChangeTableRowHeightCommandParameters = (function (_super) {
    tslib_1.__extends(RulerChangeTableRowHeightCommandParameters, _super);
    function RulerChangeTableRowHeightCommandParameters(modelTableIndex, offset, layoutTable, layoutRowIndex) {
        var _this = _super.call(this, modelTableIndex, offset, layoutTable) || this;
        _this.layoutRowIndex = layoutRowIndex;
        return _this;
    }
    return RulerChangeTableRowHeightCommandParameters;
}(RulerChangeTableSizeCommandParametersBase));
exports.RulerChangeTableRowHeightCommandParameters = RulerChangeTableRowHeightCommandParameters;
var RulerChangeTableColumnWidthCommandParameters = (function (_super) {
    tslib_1.__extends(RulerChangeTableColumnWidthCommandParameters, _super);
    function RulerChangeTableColumnWidthCommandParameters(modelTableIndex, offset, layoutTable, oldBorderPosition, callFromRuler) {
        var _this = _super.call(this, modelTableIndex, offset, layoutTable) || this;
        _this.oldBorderPosition = oldBorderPosition;
        _this.callFromRuler = callFromRuler;
        return _this;
    }
    return RulerChangeTableColumnWidthCommandParameters;
}(RulerChangeTableSizeCommandParametersBase));
exports.RulerChangeTableColumnWidthCommandParameters = RulerChangeTableColumnWidthCommandParameters;
var RulerChangeTableSizeCommnandBase = (function (_super) {
    tslib_1.__extends(RulerChangeTableSizeCommnandBase, _super);
    function RulerChangeTableSizeCommnandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerChangeTableSizeCommnandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    RulerChangeTableSizeCommnandBase.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.position = this.selection.reversedAnchorPostion;
    };
    RulerChangeTableSizeCommnandBase.prototype.getLayoutTableBySelection = function (subDocument, position) {
        var selection = this.selection;
        var layoutPos = layout_position_creator_1.LayoutPositionCreator.createLightLayoutPosition(this.control.layout, subDocument, position, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell, true, false);
        if (layoutPos.row.tableCellInfo)
            return layoutPos.row.tableCellInfo.parentRow.parentTable;
        return layout_position_creator_1.LayoutPositionCreator.createLightLayoutPosition(this.control.layout, subDocument, position, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell, false, false).row.tableCellInfo.parentRow.parentTable;
    };
    RulerChangeTableSizeCommnandBase.prototype.tableIsEditable = function (modelTableIndex) {
        var table = this.selection.activeSubDocument.tables[modelTableIndex];
        var tableInterval = fixed_1.FixedInterval.fromPositions(table.getStartPosition(), table.getEndPosition());
        return this.selection.activeSubDocument.isEditable([tableInterval]);
    };
    return RulerChangeTableSizeCommnandBase;
}(command_base_1.CommandBase));
exports.RulerChangeTableSizeCommnandBase = RulerChangeTableSizeCommnandBase;
var RulerChangeTableRowHeightCommand = (function (_super) {
    tslib_1.__extends(RulerChangeTableRowHeightCommand, _super);
    function RulerChangeTableRowHeightCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerChangeTableRowHeightCommand.prototype.executeCore = function (_state, options) {
        if (!this.tableIsEditable(options.param.modelTableIndex))
            return false;
        var modelManipulator = this.modelManipulator;
        var subDocument = options.subDocument;
        var layoutTable = options.param.layoutTable ||
            this.getLayoutTableBySelection(subDocument, options.intervalsInfo.intervals[0].start);
        var rowIndex = layoutTable.tableRows[options.param.layoutRowIndex].rowIndex;
        var modelRow = layoutTable.logicInfo.grid.table.rows[rowIndex];
        var layoutRow = layoutTable.tableRows[options.param.layoutRowIndex];
        var height = new table_units_1.TableHeightUnit().init(unit_converter_1.UnitConverter.pixelsToTwips(layoutRow.height + options.param.offset), modelRow.height.type == table_units_1.TableHeightUnitType.Exact ? table_units_1.TableHeightUnitType.Exact : table_units_1.TableHeightUnitType.Minimum);
        this.history.addAndRedo(new table_row_properties_history_items_1.TableRowHeightHistoryItem(modelManipulator, subDocument, options.param.modelTableIndex, rowIndex, height));
        return true;
    };
    return RulerChangeTableRowHeightCommand;
}(RulerChangeTableSizeCommnandBase));
exports.RulerChangeTableRowHeightCommand = RulerChangeTableRowHeightCommand;
var RulerChangeTableColumnWidthCommand = (function (_super) {
    tslib_1.__extends(RulerChangeTableColumnWidthCommand, _super);
    function RulerChangeTableColumnWidthCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RulerChangeTableColumnWidthCommand.prototype.executeCore = function (_state, options) {
        var parameters = options.param;
        if (!this.tableIsEditable(parameters.modelTableIndex))
            return false;
        if (parameters.oldBorderPosition + parameters.offset < 0)
            parameters.offset = -parameters.oldBorderPosition;
        var modelManipulator = this.modelManipulator;
        var subDocument = options.subDocument;
        var layoutTable = parameters.layoutTable ||
            this.getLayoutTableBySelection(subDocument, options.intervalsInfo.intervals[0].start);
        var grid = layoutTable.logicInfo.grid;
        var oldPosRelativeTable = parameters.oldBorderPosition - layoutTable.x;
        var columnIndex = resize_table_helper_1.ResizeColumnTableHelper.findNearestColumnIndex(grid.columns.positions, oldPosRelativeTable);
        var newTableSizes = this.getNewTableSizes(grid, columnIndex, parameters.offset, parameters.callFromRuler);
        var history = this.history;
        history.beginTransaction();
        var newTableWidth = list_1.ListUtils.last(newTableSizes.newColumnsXPositions);
        if (!(grid.table.preferredWidth.type == table_units_1.TableWidthUnitType.ModelUnits && grid.table.preferredWidth.value == newTableWidth))
            history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(modelManipulator, subDocument, parameters.modelTableIndex, this.toTableWidthUnit(newTableWidth)));
        if (grid.table.properties.layoutType != table_base_structures_1.TableLayoutType.Fixed)
            history.addAndRedo(new table_properties_history_items_1.TableLayoutTypeHistoryItem(modelManipulator, subDocument, parameters.modelTableIndex, table_base_structures_1.TableLayoutType.Fixed, true));
        if (newTableSizes.tableIndentOffset != 0) {
            var oldIndent = grid.table.getActualTableIndent(modelManipulator.model.defaultTableProperties).value;
            history.addAndRedo(new table_properties_history_items_1.TableIndentHistoryItem(modelManipulator, subDocument, parameters.modelTableIndex, this.toTableWidthUnit(unit_converter_1.UnitConverter.twipsToPixelsF(oldIndent) + newTableSizes.tableIndentOffset), true));
        }
        for (var rowIndex = 0, row = void 0; row = grid.table.rows[rowIndex]; rowIndex++) {
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                var cellStartSpan = grid.tableCellInfos[rowIndex][cellIndex].getGridCellIndex();
                var cellEndSpan = cellStartSpan + cell.columnSpan;
                var newCellWidthValue = newTableSizes.newColumnsXPositions[cellEndSpan] - newTableSizes.newColumnsXPositions[cellStartSpan];
                var newCellWidth = this.toTableWidthUnit(newCellWidthValue);
                if (!cell.preferredWidth.equals(newCellWidth))
                    history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(modelManipulator, subDocument, parameters.modelTableIndex, rowIndex, cellIndex, newCellWidth));
            }
        }
        history.endTransaction();
        return true;
    };
    RulerChangeTableColumnWidthCommand.prototype.toTableWidthUnit = function (val) {
        return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.pixelsToTwips(val), table_units_1.TableWidthUnitType.ModelUnits);
    };
    RulerChangeTableColumnWidthCommand.prototype.getNewTableSizes = function (grid, columnBoundIndex, offset, callFromRuler) {
        var newColumnsXPositions = list_1.ListUtils.shallowCopy(grid.columns.positions);
        if (columnBoundIndex == 0) {
            if (!callFromRuler) {
                for (var ind = 1; ind < newColumnsXPositions.length; ind++)
                    newColumnsXPositions[ind] -= offset;
            }
            return new NewTableSizes(newColumnsXPositions, offset);
        }
        newColumnsXPositions[columnBoundIndex] += offset;
        if (callFromRuler)
            for (var ind = columnBoundIndex + 1; ind < newColumnsXPositions.length; ind++)
                newColumnsXPositions[ind] += offset;
        return new NewTableSizes(newColumnsXPositions, 0);
    };
    return RulerChangeTableColumnWidthCommand;
}(RulerChangeTableSizeCommnandBase));
exports.RulerChangeTableColumnWidthCommand = RulerChangeTableColumnWidthCommand;
var NewTableSizes = (function () {
    function NewTableSizes(newColumnsXPositions, tableIndentOffset) {
        this.newColumnsXPositions = newColumnsXPositions;
        this.tableIndentOffset = tableIndentOffset;
    }
    return NewTableSizes;
}());
