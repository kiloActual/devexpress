"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../base-utils/map-creator");
var header_footer_invalidator_helper_1 = require("../../../core/layout-formatter/invalidator/header-footer-invalidator-helper");
var layout_page_1 = require("../../../core/layout/main-structures/layout-page");
var enums_1 = require("../../../core/model/enums");
var enums_2 = require("../../../core/model/floating-objects/enums");
var header_footer_history_items_1 = require("../../../core/model/history/items/header-footer-history-items");
var model_iterator_1 = require("../../../core/model/model-iterator");
var anchored_picture_run_1 = require("../../../core/model/runs/anchored-picture-run");
var anchored_text_box_run_1 = require("../../../core/model/runs/anchored-text-box-run");
var run_type_1 = require("../../../core/model/runs/run-type");
var header_footer_1 = require("../../../core/model/section/header-footer");
var section_1 = require("../../../core/model/section/section");
var sub_document_1 = require("../../../core/model/sub-document");
var selection_intervals_info_1 = require("../../../core/selection/selection-intervals-info");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var i_rich_edit_core_1 = require("../../interfaces/i-rich-edit-core");
var model_states_1 = require("../../scroll/model-states");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var header_footer_command_base_1 = require("../header-footer/header-footer-command-base");
var FindPageIndexHelper = (function () {
    function FindPageIndexHelper() {
    }
    FindPageIndexHelper.prototype.getPageIndex = function (control, subDoc) {
        var pageIndex = 0;
        for (var page = void 0; page = control.layoutFormatterManager.forceFormatPage(pageIndex); pageIndex++)
            if (list_1.ListUtils.elementBy(this.getPageAreas(page.getLayoutOtherPageAreasInfo()), function (pa) { return pa && pa.subDocument.id == subDoc.id; }))
                break;
        return math_1.MathUtils.restrictValue(pageIndex, 0, control.selection.layout.pages.length - 1);
    };
    return FindPageIndexHelper;
}());
var FindHeaderPageIndexHelper = (function (_super) {
    tslib_1.__extends(FindHeaderPageIndexHelper, _super);
    function FindHeaderPageIndexHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindHeaderPageIndexHelper.prototype.getPageAreas = function (layoutPageHeaderFooterPageAreas) {
        return [layoutPageHeaderFooterPageAreas.headerPageArea];
    };
    return FindHeaderPageIndexHelper;
}(FindPageIndexHelper));
var FindFooterPageIndexHelper = (function (_super) {
    tslib_1.__extends(FindFooterPageIndexHelper, _super);
    function FindFooterPageIndexHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindFooterPageIndexHelper.prototype.getPageAreas = function (layoutPageHeaderFooterPageAreas) {
        return [layoutPageHeaderFooterPageAreas.footerPageArea];
    };
    return FindFooterPageIndexHelper;
}(FindPageIndexHelper));
var FindTextBoxPageIndexHelper = (function (_super) {
    tslib_1.__extends(FindTextBoxPageIndexHelper, _super);
    function FindTextBoxPageIndexHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindTextBoxPageIndexHelper.prototype.getPageAreas = function (layoutPageHeaderFooterPageAreas) {
        return layoutPageHeaderFooterPageAreas.textBoxesPageAreas;
    };
    return FindTextBoxPageIndexHelper;
}(FindPageIndexHelper));
var ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters, _super);
    function ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(control, pageIndex, isHeader) {
        var _this = _super.call(this, control) || this;
        _this.pageIndex = pageIndex;
        _this.isHeader = isHeader;
        return _this;
    }
    return ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters;
}(command_base_1.CommandOptions));
exports.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters = ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters;
var ChangeActiveSubDocumentCommandBase = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentCommandBase, _super);
    function ChangeActiveSubDocumentCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    ChangeActiveSubDocumentCommandBase.prototype.finishChanges = function (newPageIndex, newActiveSubDoc, startSelection) {
        var selection = this.selection;
        if (!this.setNewSelectionProps(selection, this.control.modelManager.model, newPageIndex, newActiveSubDoc))
            return false;
        startSelection = this.validateSelectionPosition(newActiveSubDoc, startSelection);
        selection.changeState(function (newState) { return newState.setPosition(startSelection).resetKeepX().setEndOfLine(false).setSubDocument(newActiveSubDoc).setPageIndex(newPageIndex); });
        if (this.isNeedScrollAfter())
            selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(selection).setModelPosition(startSelection).useStdRelativePosition().useStdOffset());
        return true;
    };
    ChangeActiveSubDocumentCommandBase.prototype.canSetSelectionBeforeRun = function (run) {
        return !((run instanceof anchored_picture_run_1.AnchoredPictureRun || run instanceof anchored_text_box_run_1.AnchoredTextBoxRun) &&
            run.anchorInfo.horizontalPositionType != enums_2.AnchorObjectHorizontalPositionType.Character);
    };
    ChangeActiveSubDocumentCommandBase.prototype.validateSelectionPosition = function (subDocument, position) {
        var iterator = new model_iterator_1.ModelIterator(subDocument, true);
        iterator.setPosition(position);
        do
            if (iterator.charOffset > 0 || this.canSetSelectionBeforeRun(iterator.run))
                break;
        while (iterator.moveToNextRun());
        return iterator.getAbsolutePosition();
    };
    ChangeActiveSubDocumentCommandBase.prototype.invalidatePages = function (targetPageIndex, currActiveSubDocInfo) {
        if (currActiveSubDocInfo.isHeaderFooter) {
            var headerFooterInvalidatorHelper = new header_footer_invalidator_helper_1.HeaderFooterInvalidatorHelper(this.control.modelManager.model, this.control.layout, currActiveSubDocInfo.headerFooterType);
            headerFooterInvalidatorHelper.initByPageIndex(targetPageIndex);
            this.control.layoutFormatterManager.invalidator.onPagesChanged(headerFooterInvalidatorHelper.startPageIndex, headerFooterInvalidatorHelper.endPageIndex);
        }
        else
            this.control.layoutFormatterManager.invalidator.onPagesChanged(targetPageIndex, targetPageIndex + 1);
    };
    ChangeActiveSubDocumentCommandBase.prototype.setNewSelectionProps = function (selection, model, newPageIndex, newSubDocument) {
        if (selection.pageIndex == newPageIndex && newSubDocument == selection.activeSubDocument)
            return false;
        if (newSubDocument.isTextBox() && (!selection.specialRunInfo.isSelectedAnchorObject ||
            selection.specialRunInfo.getTextBoxInnerSubDocumentId() != newSubDocument.id)) {
            var parentSubDoc = model.subDocuments[newSubDocument.info.parentSubDocumentId];
            var iterator = new model_iterator_1.ModelIterator(parentSubDoc, true);
            iterator.setPosition(0);
            do
                if (iterator.run.getType() == run_type_1.RunType.AnchoredTextBoxRun && iterator.run.subDocId == newSubDocument.id)
                    break;
            while (iterator.moveToNextRun());
            selection.specialRunInfo.init(selection_intervals_info_1.SelectionIntervalsInfo.fromInterval(parentSubDoc, new fixed_1.FixedInterval(iterator.getAbsolutePosition(), 1)));
        }
        return true;
    };
    ChangeActiveSubDocumentCommandBase.prototype.isNeedScrollAfter = function () {
        return false;
    };
    ChangeActiveSubDocumentCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return ChangeActiveSubDocumentCommandBase;
}(command_base_1.CommandBase));
exports.ChangeActiveSubDocumentCommandBase = ChangeActiveSubDocumentCommandBase;
var ChangeActiveSubDocumentToMainCommand = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToMainCommand, _super);
    function ChangeActiveSubDocumentToMainCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentToMainCommand.prototype.executeCore = function (_state, options) {
        var selection = this.selection;
        var targetPageIndex = selection.pageIndex;
        if (targetPageIndex < 0)
            return false;
        this.invalidatePages(targetPageIndex, options.subDocument.info);
        var targetLayoutPage = this.control.layoutFormatterManager.forceFormatPage(targetPageIndex);
        if (!targetLayoutPage)
            targetLayoutPage = selection.layout.getLastValidPage();
        return this.finishChanges(-1, this.control.modelManager.model.mainSubDocument, targetLayoutPage ? targetLayoutPage.getPosition() : 0);
    };
    return ChangeActiveSubDocumentToMainCommand;
}(ChangeActiveSubDocumentCommandBase));
exports.ChangeActiveSubDocumentToMainCommand = ChangeActiveSubDocumentToMainCommand;
var ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand, _super);
    function ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.executeCore = function (_state, params) {
        var targetPageIndex = params.pageIndex;
        if (targetPageIndex >= this.control.layout.pages.length)
            return false;
        this.invalidatePages(targetPageIndex, this.selection.activeSubDocument.info);
        var targetLayoutPage = this.control.layoutFormatterManager.forceFormatPage(targetPageIndex);
        if (!targetLayoutPage)
            return false;
        this.history.beginTransaction();
        var newSubDocument = this.getNewSubDocument(targetLayoutPage, params.isHeader);
        if (!newSubDocument)
            return false;
        var res = this.finishChanges(targetPageIndex, newSubDocument, 0);
        this.history.endTransaction();
        return res;
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.getNewSubDocument = function (layoutPage, isHeader) {
        var pageAreas = layoutPage.getLayoutOtherPageAreasInfo();
        var pageArea = isHeader ? pageAreas.headerPageArea : pageAreas.footerPageArea;
        if (pageArea)
            return pageArea.subDocument;
        if (this.control.modelManager.model.isDocumentProtectionEnabled || this.control.readOnly == i_rich_edit_core_1.ReadOnlyMode.Persistent)
            return null;
        var sections = this.control.modelManager.model.sections;
        var sectionIndex = section_1.Section.getPageSectionIndex(this.control.layoutFormatterManager.forceFormatPage(layoutPage.index), sections);
        var headerFooterType = header_footer_1.SectionHeadersFooters.getActualObjectType(sections[sectionIndex], layoutPage.flags.get(layout_page_1.LayoutPageFlags.IsFirstPageOfSection), common_1.isEven(layoutPage.layoutPageIndex));
        return this.insertSubDocument(isHeader, sectionIndex, headerFooterType);
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.insertSubDocument = function (isHeader, sectionIndex, headerFooterType) {
        var newObjectIndex = this.createHeaderFooter(isHeader, sectionIndex, headerFooterType);
        return header_footer_command_base_1.HeaderFooterCommandBase.getObjectsCache(isHeader, this.control)[newObjectIndex].getSubDocument(this.control.modelManager.model);
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.createHeaderFooter = function (isHeader, sectionIndex, type) {
        var objectIndex = this.control.modelManager.modelManipulator.header.getHeaderFooterManipulator(isHeader).createObject(type);
        this.changeHeaderFooterObjectIndex(isHeader, sectionIndex, type, objectIndex);
        return objectIndex;
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.changeHeaderFooterObjectIndex = function (isHeader, sectionIndex, headerFooterType, newIndex) {
        var _this = this;
        this.history.addAndRedo(new (isHeader ? header_footer_history_items_1.ChangeHeaderIndexHistoryItem : header_footer_history_items_1.ChangeFooterIndexHistoryItem)(this.modelManipulator, sectionIndex, headerFooterType, newIndex, function (oldIndex) {
            if (_this.control.selection.activeSubDocument.isHeaderFooter() && oldIndex == -1)
                _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain)
                    .execute(_this.control.commandManager.isPublicApiCall);
        }));
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.isNeedScrollAfter = function () {
        return true;
    };
    ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.control.innerClientProperties.viewsSettings.isPrintLayoutView;
    };
    return ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand;
}(ChangeActiveSubDocumentCommandBase));
exports.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand = ChangeActiveSubDocumentToHeaderFooterByPageIndexCommand;
var ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand, _super);
    function ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand.prototype.executeCore = function (_state, options) {
        var newActiveSubDoc = options.param;
        var targetPageIndex;
        if (this.selection.specialRunInfo.isTextBoxSelected() &&
            this.selection.specialRunInfo.getTextBoxInnerSubDocumentId() == newActiveSubDoc.id &&
            this.selection.pageIndex >= 0)
            targetPageIndex = this.selection.pageIndex;
        else
            targetPageIndex = newActiveSubDoc.info.getType() != enums_1.SubDocumentInfoType.Main ? ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand.MapTypeToPageIndexHelper[newActiveSubDoc.info.getType()]
                .getPageIndex(this.control, newActiveSubDoc) : this.selection.pageIndex;
        this.invalidatePages(targetPageIndex, this.selection.activeSubDocument.info);
        return this.control.layoutFormatterManager.forceFormatPage(targetPageIndex) && this.finishChanges(targetPageIndex, newActiveSubDoc, 0);
    };
    ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand.prototype.isNeedScrollAfter = function () {
        return true;
    };
    ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand.MapTypeToPageIndexHelper = new map_creator_1.MapCreator()
        .add(enums_1.SubDocumentInfoType.Header, new FindHeaderPageIndexHelper())
        .add(enums_1.SubDocumentInfoType.Footer, new FindFooterPageIndexHelper())
        .add(enums_1.SubDocumentInfoType.TextBox, new FindTextBoxPageIndexHelper())
        .get();
    return ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand;
}(ChangeActiveSubDocumentCommandBase));
exports.ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand = ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand;
var ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand, _super);
    function ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.control.innerClientProperties.viewsSettings.isPrintLayoutView;
    };
    return ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand;
}(ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand));
exports.ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand = ChangeActiveSubDocumentToHeaderFooterBySubDocumentCommand;
var ChangeActiveSubDocumentToTextBoxCommand = (function (_super) {
    tslib_1.__extends(ChangeActiveSubDocumentToTextBoxCommand, _super);
    function ChangeActiveSubDocumentToTextBoxCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeActiveSubDocumentToTextBoxCommand.prototype.getState = function () {
        if (!this.isEnabled())
            return new command_states_1.SimpleCommandState(false);
        var specInfo = this.selection.specialRunInfo;
        if (!specInfo.isTextBoxSelected())
            return new command_states_1.SimpleCommandState(false);
        var run = this.selection.activeSubDocument.getRunByPosition(specInfo.getTextBoxPosition());
        return new command_states_1.SimpleCommandState(run.getType() == run_type_1.RunType.AnchoredTextBoxRun, this.control.modelManager.model.subDocuments[run.subDocId]);
    };
    ChangeActiveSubDocumentToTextBoxCommand.prototype.executeCore = function (state, _options) {
        if (state.value instanceof sub_document_1.SubDocument)
            return _super.prototype.executeCore.call(this, state, new command_base_1.CommandSimpleOptions(this.control, state.value));
        throw new Error(errors_1.Errors.InternalException);
    };
    return ChangeActiveSubDocumentToTextBoxCommand;
}(ChangeActiveSubDocumentToHeaderFooterOrTextBoxBySubDocumentCommand));
exports.ChangeActiveSubDocumentToTextBoxCommand = ChangeActiveSubDocumentToTextBoxCommand;
