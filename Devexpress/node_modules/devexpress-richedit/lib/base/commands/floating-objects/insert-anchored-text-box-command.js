"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var anchor_info_1 = require("../../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../../core/model/floating-objects/enums");
var sizes_1 = require("../../../core/model/floating-objects/sizes");
var text_box_properties_1 = require("../../../core/model/floating-objects/text-box-properties");
var non_visual_drawing_object_info_1 = require("../../../core/model/manipulators/picture-manipulator/non-visual-drawing-object-info");
var text_box_manipulator_1 = require("../../../core/model/manipulators/text-box-manipulator");
var control_1 = require("../../../core/model/options/control");
var shape_1 = require("../../../core/model/shapes/shape");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var color_2 = require("@devexpress/utils/lib/utils/color");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertAnchoredTextBoxCommand = (function (_super) {
    tslib_1.__extends(InsertAnchoredTextBoxCommand, _super);
    function InsertAnchoredTextBoxCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertAnchoredTextBoxCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertAnchoredTextBoxCommand.prototype.canModify = function () {
        return !this.control.modelManager.model.isDocumentProtectionEnabled;
    };
    InsertAnchoredTextBoxCommand.prototype.isEnabled = function () {
        var subDoc = this.selection.activeSubDocument;
        return _super.prototype.isEnabled.call(this) &&
            control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.floatingObjects) &&
            (subDoc.isMain() || subDoc.isHeaderFooter()) &&
            !this.selection.specialRunInfo.isTextBoxSelected();
    };
    InsertAnchoredTextBoxCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var history = this.history;
        var topBottomMargin = unit_converter_1.UnitConverter.inchesToTwips(0.05);
        var leftRightMargin = unit_converter_1.UnitConverter.inchesToTwips(0.1);
        var absoluteSize = new size_1.Size(unit_converter_1.UnitConverter.inchesToTwips(2), unit_converter_1.UnitConverter.inchesToTwips(0.3));
        var relativeSize = new size_1.Size(sizes_1.AnchorTextBoxSize.RELATIVE_COEFF * 0.40, sizes_1.AnchorTextBoxSize.RELATIVE_COEFF * 0.20);
        var size = new sizes_1.AnchorTextBoxSize(false, 0, absoluteSize, relativeSize, enums_1.RelativeWidthType.Margin, enums_1.RelativeHeightType.Margin, false, false);
        var contentMargins = new margins_1.Margins(leftRightMargin, leftRightMargin, topBottomMargin, topBottomMargin);
        var textBoxProperties = new text_box_properties_1.TextBoxProperties(contentMargins);
        var anchorInfo = new anchor_info_1.AnchorInfo();
        anchorInfo.zOrder = this.modelManipulator.floatingObject.zOrder.getNewZOrder(options.subDocument);
        history.addTransaction(function () {
            _this.modelManipulator.textBox.insertAnchoredTextBoxViaHistoty(new sub_document_1.SubDocumentPosition(_this.selection.activeSubDocument, _this.selection.lastSelectedInterval.start), _this.inputPosition.charPropsBundle, new text_box_manipulator_1.BaseTextBoxInfo(null, size, new shape_1.Shape(color_2.ColorUtils.fromString(color_2.ColorUtils.colorNames.white), color_1.ColorHelper.BLACK_COLOR, unit_converter_1.UnitConverter.pointsToTwips(3.0 / 4)), anchorInfo, textBoxProperties, new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo()));
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setInterval(new fixed_1.FixedInterval(_this.selection.lastSelectedInterval.start, 1))));
            _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToTextBox)
                .execute(_this.control.commandManager.isPublicApiCall, options);
        });
        return true;
    };
    return InsertAnchoredTextBoxCommand;
}(command_base_1.CommandBase));
exports.InsertAnchoredTextBoxCommand = InsertAnchoredTextBoxCommand;
