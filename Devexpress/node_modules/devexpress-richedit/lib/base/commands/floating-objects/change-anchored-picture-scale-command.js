"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var change_anchored_picture_size_history_item_1 = require("../../../core/model/history/items/floating-objects/change-anchored-picture-size-history-item");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeAnchoredPictureSizeCommand = (function (_super) {
    tslib_1.__extends(ChangeAnchoredPictureSizeCommand, _super);
    function ChangeAnchoredPictureSizeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeAnchoredPictureSizeCommand.prototype.getState = function () {
        var isEnabled = this.isEnabled();
        var value;
        if (isEnabled) {
            var run = this.selection.activeSubDocument.getRunByPosition(this.selection.specialRunInfo.getPicturePosition());
            value = run.size;
        }
        return new command_states_1.SimpleCommandState(this.isEnabled(), value);
    };
    ChangeAnchoredPictureSizeCommand.prototype.canModify = function () {
        return true;
    };
    ChangeAnchoredPictureSizeCommand.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isPictureSelected() && specialRunInfo.isSelectedAnchorObject &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(specialRunInfo.getPicturePosition(), 1)]);
    };
    ChangeAnchoredPictureSizeCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.interval = new fixed_1.FixedInterval(this.selection.lastSelectedInterval.start, 1);
    };
    ChangeAnchoredPictureSizeCommand.prototype.executeCore = function (_state, options) {
        this.history.addAndRedo(new change_anchored_picture_size_history_item_1.ChangeAnchoredPictureSizeHistoryItem(this.modelManipulator, options.intervalsInfo.subDocInterval, options.param));
        return true;
    };
    return ChangeAnchoredPictureSizeCommand;
}(command_base_1.CommandBase));
exports.ChangeAnchoredPictureSizeCommand = ChangeAnchoredPictureSizeCommand;
