"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var shape_property_history_item_1 = require("../../../core/model/history/items/floating-objects/shape-property-history-item");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeFloatingObjectShapeCommand = (function (_super) {
    tslib_1.__extends(ChangeFloatingObjectShapeCommand, _super);
    function ChangeFloatingObjectShapeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeFloatingObjectShapeCommand.prototype.getState = function () {
        var isEnabled = this.isEnabled();
        var value;
        if (isEnabled) {
            value = this.getValue();
        }
        return new command_states_1.SimpleCommandState(this.isEnabled(), value);
    };
    ChangeFloatingObjectShapeCommand.prototype.canModify = function () {
        return true;
    };
    ChangeFloatingObjectShapeCommand.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isSelected() && specialRunInfo.isSelectedAnchorObject &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(specialRunInfo.getPosition(), 1)]);
    };
    ChangeFloatingObjectShapeCommand.prototype.executeCore = function (_state, options) {
        var modelManipulator = this.modelManipulator;
        var specialRunInfo = this.selection.specialRunInfo;
        this.history.addAndRedo(new shape_property_history_item_1.ShapeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(specialRunInfo.getParentSubDocument(), new fixed_1.FixedInterval(specialRunInfo.getPosition(), 1)), options.param));
        return true;
    };
    ChangeFloatingObjectShapeCommand.prototype.getValue = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        var run = specialRunInfo.getParentSubDocument().getRunByPosition(specialRunInfo.getPosition());
        var anchoredRun = run;
        return anchoredRun.shape.clone();
    };
    return ChangeFloatingObjectShapeCommand;
}(command_base_1.CommandBase));
exports.ChangeFloatingObjectShapeCommand = ChangeFloatingObjectShapeCommand;
var ChangeShapePropertyCommandBase = (function (_super) {
    tslib_1.__extends(ChangeShapePropertyCommandBase, _super);
    function ChangeShapePropertyCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeShapePropertyCommandBase.prototype.getState = function () {
        var isEnabled = this.isEnabled();
        var value;
        if (isEnabled) {
            var specialRunInfo = this.selection.specialRunInfo;
            var run = specialRunInfo.getParentSubDocument().getRunByPosition(specialRunInfo.getPosition());
            var anchoredRun = run;
            value = this.getValue(anchoredRun.shape);
        }
        return new command_states_1.SimpleCommandState(this.isEnabled(), value);
    };
    ChangeShapePropertyCommandBase.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isSelected() && specialRunInfo.isSelectedAnchorObject;
    };
    return ChangeShapePropertyCommandBase;
}(command_base_1.CommandBase));
exports.ChangeShapePropertyCommandBase = ChangeShapePropertyCommandBase;
var ChangeShapeFillColorCommand = (function (_super) {
    tslib_1.__extends(ChangeShapeFillColorCommand, _super);
    function ChangeShapeFillColorCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeShapeFillColorCommand.prototype.getState = function () {
        var state = _super.prototype.getState.call(this);
        state.denyUpdateValue = true;
        return state;
    };
    ChangeShapeFillColorCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return color_1.ColorHelper.anyToColor(parameter, color_1.ColorHelper.NO_COLOR);
    };
    ChangeShapeFillColorCommand.prototype.executeCore = function (_state, options) {
        var specialRunInfo = this.selection.specialRunInfo;
        this.modelManipulator.picture.changeShapeFillColor(specialRunInfo.getParentSubDocument(), specialRunInfo.getPosition(), options.param);
        return true;
    };
    ChangeShapeFillColorCommand.prototype.getValue = function (shape) {
        return shape.fillColor;
    };
    return ChangeShapeFillColorCommand;
}(ChangeShapePropertyCommandBase));
exports.ChangeShapeFillColorCommand = ChangeShapeFillColorCommand;
var ChangeShapeOutlineColorCommand = (function (_super) {
    tslib_1.__extends(ChangeShapeOutlineColorCommand, _super);
    function ChangeShapeOutlineColorCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeShapeOutlineColorCommand.prototype.getState = function () {
        var state = _super.prototype.getState.call(this);
        state.denyUpdateValue = true;
        return state;
    };
    ChangeShapeOutlineColorCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return color_1.ColorHelper.anyToColor(parameter, color_1.ColorHelper.NO_COLOR);
    };
    ChangeShapeOutlineColorCommand.prototype.executeCore = function (_state, options) {
        var specialRunInfo = this.selection.specialRunInfo;
        this.modelManipulator.picture.changeShapeOutlineColor(specialRunInfo.getParentSubDocument(), specialRunInfo.getPosition(), options.param);
        return true;
    };
    ChangeShapeOutlineColorCommand.prototype.getValue = function (shape) {
        return shape.outlineColor;
    };
    return ChangeShapeOutlineColorCommand;
}(ChangeShapePropertyCommandBase));
exports.ChangeShapeOutlineColorCommand = ChangeShapeOutlineColorCommand;
var ChangeShapeOutlineWidthCommand = (function (_super) {
    tslib_1.__extends(ChangeShapeOutlineWidthCommand, _super);
    function ChangeShapeOutlineWidthCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeShapeOutlineWidthCommand.prototype.executeCore = function (_state, options) {
        var specialRunInfo = this.selection.specialRunInfo;
        this.modelManipulator.picture.changeShapeOutlineWidth(specialRunInfo.getParentSubDocument(), specialRunInfo.getPosition(), options.param);
        return true;
    };
    ChangeShapeOutlineWidthCommand.prototype.getValue = function (shape) {
        return shape.outlineWidth;
    };
    return ChangeShapeOutlineWidthCommand;
}(ChangeShapePropertyCommandBase));
exports.ChangeShapeOutlineWidthCommand = ChangeShapeOutlineWidthCommand;
