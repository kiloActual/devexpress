"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_point_1 = require("../../../core/layout/layout-point");
var field_1 = require("../../../core/model/fields/field");
var enums_1 = require("../../../core/model/floating-objects/enums");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var text_box_manipulator_1 = require("../../../core/model/manipulators/text-box-manipulator");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var model_states_1 = require("../../scroll/model-states");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var change_active_sub_document_command_1 = require("../sub-document/change-active-sub-document-command");
var FloatingObjectMovedArgumentInner = (function () {
    function FloatingObjectMovedArgumentInner(subDocumentId, newPosition, pageIntervals, pageIndex, objectX, objectY) {
        this.newPosition = newPosition;
        this.subDocumentId = subDocumentId;
        this.pageIntervals = pageIntervals;
        this.pageIndex = pageIndex;
        this.objectX = objectX;
        this.objectY = objectY;
        if (this.pageIndex == 0 && this.pageIntervals[0].start != 0)
            this.pageIntervals.splice(0, 1, new fixed_1.FixedInterval(0, this.pageIntervals[0].end));
    }
    return FloatingObjectMovedArgumentInner;
}());
exports.FloatingObjectMovedArgumentInner = FloatingObjectMovedArgumentInner;
var FloatingObjectDragDropChangePositionCommand = (function (_super) {
    tslib_1.__extends(FloatingObjectDragDropChangePositionCommand, _super);
    function FloatingObjectDragDropChangePositionCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FloatingObjectDragDropChangePositionCommand.prototype, "activeSubDocument", {
        get: function () {
            return this.selection.activeSubDocument;
        },
        enumerable: true,
        configurable: true
    });
    FloatingObjectDragDropChangePositionCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    FloatingObjectDragDropChangePositionCommand.prototype.canModify = function () {
        return true;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isSelected() && specialRunInfo.isSelectedAnchorObject &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(specialRunInfo.getPosition(), 1)]);
    };
    FloatingObjectDragDropChangePositionCommand.prototype.executeCore = function (_state, options) {
        var topInfo = this.control.viewManager.canvasManager.getScrollTopInfo();
        var runInfo = this.activeSubDocument.getRunAndIndexesByPosition(this.selection.specialRunInfo.getPosition());
        var oldRun = runInfo.run.clone();
        var oldRunPos = runInfo.getAbsoluteRunPosition();
        var finalClickPoint = options.finalClickPoint;
        var layoutPoint = new layout_point_1.LayoutPoint(options.endPageIndex, finalClickPoint.x, finalClickPoint.y);
        var initialHtr = this.control.hitTestManager.calculate(layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, null, true);
        if (!initialHtr.pageArea)
            return;
        initialHtr.correctAsVisibleBox();
        this.history.beginTransaction();
        if (initialHtr.pageArea.subDocument.id !== this.activeSubDocument.id)
            this.changeActiveSubDocument(initialHtr, finalClickPoint);
        this.move(oldRun, oldRunPos, initialHtr, options.endPageIndex, options.finalPoint);
        this.history.endTransaction();
        this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byScrollInfo.setPageInfo(topInfo));
        return true;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.changeActiveSubDocument = function (htr, point) {
        var activeSubDocument = this.selection.activeSubDocument;
        if (!activeSubDocument.isHeaderFooter())
            return false;
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return false;
        if (htr.pageArea.subDocument.isHeaderFooter()) {
            if (htr.pageArea.subDocument.id != activeSubDocument.id || this.selection.pageIndex != htr.pageIndex) {
                this.changeActiveSubDocumentToHeaderFooter(htr.pageIndex, htr.pageArea.subDocument.isHeader());
                return true;
            }
        }
        else if (htr.pageArea.subDocument.isMain()) {
            var bounds = this.getPageClientBounds(htr.page);
            var center = bounds.center;
            var rect = new rectangle_1.Rectangle(center.x, center.y, 0, 0);
            var deviation = new rectangle_1.RectangleDeviation(rect, point).calcDeviation().deviation.getValue();
            if (deviation & rectangle_1.HitTestDeviation.Top) {
                this.changeActiveSubDocumentToHeaderFooter(htr.pageIndex, true);
                return true;
            }
            if (deviation & rectangle_1.HitTestDeviation.Bottom) {
                this.changeActiveSubDocumentToHeaderFooter(htr.pageIndex, false);
                return true;
            }
        }
        return false;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.changeActiveSubDocumentToHeaderFooter = function (pageIndex, isHeader) {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
            .execute(this.control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(this.control, pageIndex, isHeader));
    };
    FloatingObjectDragDropChangePositionCommand.prototype.getPageClientBounds = function (page) {
        var areas = page.mainSubDocumentPageAreas;
        var result = areas[0];
        for (var i = 1; i < areas.length; i++)
            result = rectangle_1.Rectangle.union(areas[i], result);
        return result;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.move = function (oldRun, oldRunPos, initialHtr, endPageIndex, finalPoint) {
        if (initialHtr.row.tableCellInfo) {
            var paragraphStartHTR = this.findParagraphStartOnThisPage(initialHtr);
            var newLogPos = this.getNewLogPosition(this.activeSubDocument, paragraphStartHTR);
            var arg = new FloatingObjectMovedArgumentInner(this.activeSubDocument.id, newLogPos, paragraphStartHTR.page.getContentIntervals(), paragraphStartHTR.pageIndex, finalPoint.x, finalPoint.y);
            this.control.owner.raiseFloatingObjectMovedObject(arg);
            if (newLogPos != arg.newPosition || finalPoint.x != arg.objectX || finalPoint.y != arg.objectY) {
                this.handleEvent(arg, oldRun, oldRunPos, false);
            }
            else {
                this.moveInsideTable(oldRun, oldRunPos, newLogPos, paragraphStartHTR, finalPoint, false);
            }
        }
        else {
            this.moveOutsideTable(oldRun, oldRunPos, endPageIndex, finalPoint);
        }
    };
    FloatingObjectDragDropChangePositionCommand.prototype.handleEvent = function (arg, oldRun, oldRunPos, oldIntervalRemoved) {
        var lp = this.activeSubDocument.isMain() ?
            layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, this.activeSubDocument, arg.newPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false)) :
            new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, this.activeSubDocument, arg.newPosition, this.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        var finalPos = new point_1.Point(arg.objectX, arg.objectY);
        if (lp.row.tableCellInfo)
            this.moveInsideTable(oldRun, oldRunPos, arg.newPosition, lp, finalPos, oldIntervalRemoved);
        else {
            var newPoint = new point_1.Point(finalPos.x - lp.getLayoutX(null, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column), finalPos.y);
            var newAnchorInfo = this.getNewAnchorInfo(oldRun.anchorInfo, newPoint);
            if (!oldIntervalRemoved)
                this.removeOldRun(oldRun, oldRunPos);
            this.addRun(oldRun, arg.newPosition, newAnchorInfo);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(new fixed_1.FixedInterval(arg.newPosition, 1))));
        }
    };
    FloatingObjectDragDropChangePositionCommand.prototype.moveInsideTable = function (oldRun, oldRunPos, newLogPos, finalPosHTR, finalPoint, oldIntervalRemoved) {
        var offset = finalPosHTR.row.tableCellInfo ?
            new point_1.Point(finalPosHTR.row.tableCellInfo.x, finalPosHTR.row.tableCellInfo.y) :
            new point_1.Point(0, 0);
        var newPoint = new point_1.Point(finalPoint.x - finalPosHTR.getLayoutX(null, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column) - offset.x, finalPoint.y - finalPosHTR.getLayoutY(document_layout_details_level_1.DocumentLayoutDetailsLevel.Column) - offset.y);
        if (!oldIntervalRemoved)
            this.removeOldRun(oldRun, oldRunPos);
        this.control.layoutFormatterManager.forceFormatPage(finalPosHTR.pageIndex);
        var newRunPos = newLogPos + (oldRunPos < newLogPos ? -1 : 0);
        this.addRun(oldRun, newRunPos, this.getNewAnchorInfo(oldRun.anchorInfo, newPoint));
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(new fixed_1.FixedInterval(newRunPos, 1))));
    };
    FloatingObjectDragDropChangePositionCommand.prototype.moveOutsideTable = function (oldRun, oldRunPos, endPageIndex, pagePosition) {
        this.removeOldRun(oldRun, oldRunPos);
        this.control.layoutFormatterManager.forceFormatPage(endPageIndex);
        var layoutPoint = new layout_point_1.LayoutPoint(Math.min(endPageIndex, this.control.layout.pages.length), pagePosition.x, pagePosition.y);
        var htr = this.control.hitTestManager.calculate(layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, this.activeSubDocument);
        var paragraphStartHTR = this.findParagraphStartOnThisPage(htr);
        var newLogPos = this.getNewLogPosition(this.activeSubDocument, paragraphStartHTR);
        var arg = new FloatingObjectMovedArgumentInner(this.activeSubDocument.id, newLogPos, paragraphStartHTR.page.getContentIntervals(), paragraphStartHTR.pageIndex, pagePosition.x, pagePosition.y);
        this.control.owner.raiseFloatingObjectMovedObject(arg);
        if (newLogPos != arg.newPosition || pagePosition.x != arg.objectX || pagePosition.y != arg.objectY) {
            this.handleEvent(arg, oldRun, oldRunPos, true);
        }
        else {
            var newPoint = new point_1.Point(pagePosition.x - htr.getLayoutX(null, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column), pagePosition.y);
            var newAnchorInfo = this.getNewAnchorInfo(oldRun.anchorInfo, newPoint);
            this.addRun(oldRun, newLogPos, newAnchorInfo);
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(new fixed_1.FixedInterval(newLogPos, 1))));
        }
    };
    FloatingObjectDragDropChangePositionCommand.prototype.removeOldRun = function (oldRun, oldRunPos) {
        var interval = new sub_document_1.SubDocumentInterval(oldRun.paragraph.subDocument, new fixed_1.FixedInterval(oldRunPos, 1));
        this.modelManipulator.range.removeInterval(interval, false, false);
    };
    FloatingObjectDragDropChangePositionCommand.prototype.findParagraphStartOnThisPage = function (htr) {
        var paragraph = this.selection.activeSubDocument.getParagraphByPosition(htr.getLogPosition());
        while (htr.stepBackRow()) {
            if (!paragraph.interval.contains(htr.getLogPosition())) {
                htr.stepForwardRow();
                break;
            }
        }
        return htr;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.addRun = function (oldRun, position, anchorInfo) {
        if (oldRun.getType() == run_type_1.RunType.AnchoredPictureRun) {
            var pictureRun = oldRun;
            this.modelManipulator.picture.insertAnchoredPictureViaHistory(new sub_document_1.SubDocumentPosition(this.activeSubDocument, position), this.inputPosition.charPropsBundle, new insert_picture_manipulator_params_1.AnchorPictureInfo(pictureRun.size.clone(), pictureRun.shape.clone(), anchorInfo, pictureRun.info.containerProperties.clone(), pictureRun.info.nonVisualDrawingProperties.clone()), new image_loading_options_1.ImageLoadingOptions(false));
        }
        else {
            var textBoxRun = oldRun;
            var originalSubDocument = this.control.modelManager.model.subDocuments[textBoxRun.subDocId];
            this.modelManipulator.textBox.insertAnchoredTextBoxViaHistoty(new sub_document_1.SubDocumentPosition(this.activeSubDocument, position), this.inputPosition.charPropsBundle, new text_box_manipulator_1.BaseTextBoxInfo(null, textBoxRun.size.clone(), textBoxRun.shape.clone(), anchorInfo, textBoxRun.textBoxProperties.clone(), textBoxRun.containerProperties.clone()));
            var newTextBoxRun = this.activeSubDocument.getRunAndIndexesByPosition(position).run;
            var newSubDocument = this.control.modelManager.model.subDocuments[newTextBoxRun.subDocId];
            if (originalSubDocument.getDocumentEndPosition() > 1) {
                this.control.modelManager.modelManipulator.subDocument.insertSubDocument(new sub_document_1.SubDocumentPosition(newSubDocument, 0), new sub_document_1.SubDocumentInterval(originalSubDocument, new fixed_1.FixedInterval(0, originalSubDocument.getDocumentEndPosition() - 1)));
            }
            this.copyPropertiesToLastParagraph(originalSubDocument, newSubDocument);
        }
    };
    FloatingObjectDragDropChangePositionCommand.prototype.copyPropertiesToLastParagraph = function (sourceSubDocument, targetSubDocument) {
        var newParagraph = targetSubDocument.paragraphs[targetSubDocument.paragraphs.length - 1];
        var oldParagraph = sourceSubDocument.paragraphs[targetSubDocument.paragraphs.length - 1];
        this.control.modelManager.modelManipulator.paragraph.applyParagraphProperties(newParagraph, oldParagraph, false, oldParagraph.getParagraphBundleFull(sourceSubDocument.documentModel));
    };
    FloatingObjectDragDropChangePositionCommand.prototype.getNewAnchorInfo = function (anchorInfo, newPoint) {
        anchorInfo = anchorInfo.clone();
        anchorInfo.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.None;
        anchorInfo.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        anchorInfo.horizontalPositionType = enums_1.AnchorObjectHorizontalPositionType.Column;
        anchorInfo.verticalPositionType = enums_1.AnchorObjectVerticalPositionType.Page;
        anchorInfo.percentOffset.x = 0;
        anchorInfo.percentOffset.y = 0;
        anchorInfo.offset.x = unit_converter_1.UnitConverter.pixelsToTwips(newPoint.x);
        anchorInfo.offset.y = unit_converter_1.UnitConverter.pixelsToTwips(newPoint.y);
        return anchorInfo;
    };
    FloatingObjectDragDropChangePositionCommand.prototype.getNewLogPosition = function (subDocument, htr) {
        var pos = htr.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row);
        if (!subDocument.fields.length)
            return pos;
        var index = Math.max(0, field_1.Field.normedBinaryIndexOf(subDocument.fields, pos));
        var topLevelField = subDocument.fields[index].getAbsolutelyTopLevelField();
        var startFieldPos = topLevelField.getFieldStartPosition();
        for (var ind = topLevelField.index, field = void 0; field = subDocument.fields[ind]; ind++) {
            if (field.getFieldStartPosition() >= topLevelField.getFieldEndPosition())
                break;
            if (pos == field.getResultStartPosition()) {
                var lp = subDocument.isMain() ?
                    layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, pos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)) :
                    new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, pos, this.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                        .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
                if (startFieldPos >= lp.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row) + lp.row.getLastBox().getEndPosition())
                    return startFieldPos;
                else
                    break;
            }
        }
        return pos;
    };
    return FloatingObjectDragDropChangePositionCommand;
}(command_base_1.CommandBase));
exports.FloatingObjectDragDropChangePositionCommand = FloatingObjectDragDropChangePositionCommand;
var FloatingObjectDragDropChangePositionCommandParameters = (function (_super) {
    tslib_1.__extends(FloatingObjectDragDropChangePositionCommandParameters, _super);
    function FloatingObjectDragDropChangePositionCommandParameters(control, startPageIndex, endPageIndex, finalPoint, finalClickPoint) {
        var _this = _super.call(this, control) || this;
        _this.startPageIndex = startPageIndex;
        _this.endPageIndex = endPageIndex;
        _this.finalPoint = finalPoint;
        _this.finalClickPoint = finalClickPoint;
        return _this;
    }
    return FloatingObjectDragDropChangePositionCommandParameters;
}(command_base_1.CommandOptions));
exports.FloatingObjectDragDropChangePositionCommandParameters = FloatingObjectDragDropChangePositionCommandParameters;
