"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var change_text_box_properties_history_item_1 = require("../../../core/model/history/items/floating-objects/change-text-box-properties-history-item");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTextBoxPropertiesCommand = (function (_super) {
    tslib_1.__extends(ChangeTextBoxPropertiesCommand, _super);
    function ChangeTextBoxPropertiesCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTextBoxPropertiesCommand.prototype.getState = function () {
        var isEnabled = this.isEnabled();
        var value;
        if (isEnabled)
            value = this.getValue();
        return new command_states_1.SimpleCommandState(this.isEnabled(), value);
    };
    ChangeTextBoxPropertiesCommand.prototype.canModify = function () {
        return true;
    };
    ChangeTextBoxPropertiesCommand.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isTextBoxSelected() &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(specialRunInfo.getPosition(), 1)]);
    };
    ChangeTextBoxPropertiesCommand.prototype.executeCore = function (_state, options) {
        var modelManipulator = this.modelManipulator;
        var subDocument = this.selection.specialRunInfo.getParentSubDocument();
        this.history.addAndRedo(new change_text_box_properties_history_item_1.ChangeTextBoxPropertiesHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(this.selection.specialRunInfo.getTextBoxPosition(), 1)), options.param));
        return true;
    };
    ChangeTextBoxPropertiesCommand.prototype.getValue = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        var run = specialRunInfo.getParentSubDocument().getRunByPosition(specialRunInfo.getTextBoxPosition());
        var textBoxRun = run;
        return textBoxRun.textBoxProperties.clone();
    };
    return ChangeTextBoxPropertiesCommand;
}(command_base_1.CommandBase));
exports.ChangeTextBoxPropertiesCommand = ChangeTextBoxPropertiesCommand;
