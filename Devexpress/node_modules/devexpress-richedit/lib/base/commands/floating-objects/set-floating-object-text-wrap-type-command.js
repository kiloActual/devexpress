"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/floating-objects/enums");
var run_type_1 = require("../../../core/model/runs/run-type");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var SetFloatingObjectTextWrapTypeCommandBase = (function (_super) {
    tslib_1.__extends(SetFloatingObjectTextWrapTypeCommandBase, _super);
    function SetFloatingObjectTextWrapTypeCommandBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isBehindDoc = false;
        return _this;
    }
    SetFloatingObjectTextWrapTypeCommandBase.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectSquareTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectTightTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectThroughTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectTopAndBottomTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectBehindTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectInFrontOfTextWrapType] = true,
            _a[client_command_1.RichEditClientCommand.SetFloatingObjectInlineTextWrapType] = true,
            _a;
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.getStateValue());
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.getStateValue = function () {
        var value = false;
        if (this.isEnabled()) {
            var specialRunInfo = this.selection.specialRunInfo;
            var anchoredRun = specialRunInfo.getParentSubDocument()
                .getRunByPosition(specialRunInfo.getPosition());
            if (anchoredRun && anchoredRun.anchorInfo && anchoredRun.anchorInfo.wrapType === this.anchorObjectTextWrapType &&
                anchoredRun.anchorInfo.isBehindDoc === this.isBehindDoc)
                value = true;
        }
        return value;
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.canModify = function () {
        return true;
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.isEnabledCore() &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(this.selection.specialRunInfo.getPosition(), 1)]);
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.isEnabledCore = function () {
        return this.selection.specialRunInfo.isSelected();
    };
    SetFloatingObjectTextWrapTypeCommandBase.prototype.executeCore = function (_state, _parameter) {
        var specialRunInfo = this.selection.specialRunInfo;
        var subDocument = specialRunInfo.getParentSubDocument();
        var position = specialRunInfo.getPosition();
        this.modelManipulator.picture.setFloatingObjectTextWrapType(subDocument, position, this.inputPosition.charPropsBundle, this.isBehindDoc, this.anchorObjectTextWrapType);
        return true;
    };
    return SetFloatingObjectTextWrapTypeCommandBase;
}(command_base_1.CommandBase));
exports.SetFloatingObjectTextWrapTypeCommandBase = SetFloatingObjectTextWrapTypeCommandBase;
var SetFloatingObjectSquareTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectSquareTextWrapTypeCommand, _super);
    function SetFloatingObjectSquareTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.Square;
        return _this;
    }
    return SetFloatingObjectSquareTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectSquareTextWrapTypeCommand = SetFloatingObjectSquareTextWrapTypeCommand;
var SetFloatingObjectTightTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectTightTextWrapTypeCommand, _super);
    function SetFloatingObjectTightTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.Tight;
        return _this;
    }
    return SetFloatingObjectTightTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectTightTextWrapTypeCommand = SetFloatingObjectTightTextWrapTypeCommand;
var SetFloatingObjectThroughTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectThroughTextWrapTypeCommand, _super);
    function SetFloatingObjectThroughTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.Through;
        return _this;
    }
    return SetFloatingObjectThroughTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectThroughTextWrapTypeCommand = SetFloatingObjectThroughTextWrapTypeCommand;
var SetFloatingObjectTopAndBottomTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectTopAndBottomTextWrapTypeCommand, _super);
    function SetFloatingObjectTopAndBottomTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.TopAndBottom;
        return _this;
    }
    return SetFloatingObjectTopAndBottomTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectTopAndBottomTextWrapTypeCommand = SetFloatingObjectTopAndBottomTextWrapTypeCommand;
var SetFloatingObjectInFrontOfTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectInFrontOfTextWrapTypeCommand, _super);
    function SetFloatingObjectInFrontOfTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.None;
        return _this;
    }
    return SetFloatingObjectInFrontOfTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectInFrontOfTextWrapTypeCommand = SetFloatingObjectInFrontOfTextWrapTypeCommand;
var SetFloatingObjectBehindTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectBehindTextWrapTypeCommand, _super);
    function SetFloatingObjectBehindTextWrapTypeCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.anchorObjectTextWrapType = enums_1.AnchorObjectTextWrapType.None;
        _this.isBehindDoc = true;
        return _this;
    }
    return SetFloatingObjectBehindTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectBehindTextWrapTypeCommand = SetFloatingObjectBehindTextWrapTypeCommand;
var SetFloatingObjectInlineTextWrapTypeCommand = (function (_super) {
    tslib_1.__extends(SetFloatingObjectInlineTextWrapTypeCommand, _super);
    function SetFloatingObjectInlineTextWrapTypeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetFloatingObjectInlineTextWrapTypeCommand.prototype.getStateValue = function () {
        var value = false;
        if (this.isEnabled()) {
            var run = this.selection.activeSubDocument.getRunByPosition(this.selection.specialRunInfo.getPicturePosition());
            if (run.getType() === run_type_1.RunType.InlinePictureRun)
                value = true;
        }
        return value;
    };
    SetFloatingObjectInlineTextWrapTypeCommand.prototype.isEnabledCore = function () {
        return this.selection.specialRunInfo.isPictureSelected();
    };
    SetFloatingObjectInlineTextWrapTypeCommand.prototype.executeCore = function (_state, _options) {
        this.modelManipulator.picture.setFloatingObjectInlineTextWrapType(this.selection.activeSubDocument, this.selection.specialRunInfo.getPicturePosition(), this.inputPosition.charPropsBundle);
        return true;
    };
    return SetFloatingObjectInlineTextWrapTypeCommand;
}(SetFloatingObjectTextWrapTypeCommandBase));
exports.SetFloatingObjectInlineTextWrapTypeCommand = SetFloatingObjectInlineTextWrapTypeCommand;
