"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var insert_text_manipulator_params_1 = require("../../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../../../core/model/runs/run-type");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var spelling_command_base_1 = require("./spelling-command-base");
var ChangeSpellingErrorCommandBase = (function (_super) {
    tslib_1.__extends(ChangeSpellingErrorCommandBase, _super);
    function ChangeSpellingErrorCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeSpellingErrorCommandBase.prototype.changeSpellingError = function (options, firstPosition, length) {
        var expandedInterval = new fixed_1.FixedInterval(firstPosition, length);
        field_1.Field.correctIntervalDueToFieldsWithoutUiChecks(options.intervalsInfo.subDocInterval.subDocument, expandedInterval);
        options.intervalsInfo.interval = expandedInterval;
        this.history.beginTransaction();
        this.modelManipulator.range.removeInterval(options.intervalsInfo.subDocInterval, true, false);
        var insertResult = this.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(options.intervalsInfo.subDocPosition, this.inputPosition.charPropsBundle, run_type_1.RunType.TextRun, options.param));
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(insertResult.insertedInterval.end).setEndOfLine(true)));
        this.history.endTransaction();
    };
    return ChangeSpellingErrorCommandBase;
}(spelling_command_base_1.SpellingCommandBase));
exports.ChangeSpellingErrorCommandBase = ChangeSpellingErrorCommandBase;
