"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sub_document_1 = require("../../../core/model/sub-document");
var spell_checker_1 = require("../../../core/spelling/spell-checker");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var spelling_command_base_1 = require("./spelling-command-base");
var DeleteRepeatedWordCommand = (function (_super) {
    tslib_1.__extends(DeleteRepeatedWordCommand, _super);
    function DeleteRepeatedWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteRepeatedWordCommand.prototype.isVisible = function (selectedMisspelledInterval) {
        return _super.prototype.isVisible.call(this, selectedMisspelledInterval) && selectedMisspelledInterval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Repeating;
    };
    DeleteRepeatedWordCommand.prototype.executeCore = function (state, _options) {
        var selectedMisspelledInterval = state.value;
        var deletingInterval = fixed_1.FixedInterval.fromPositions(selectedMisspelledInterval.start - 1, selectedMisspelledInterval.end);
        this.history.beginTransaction();
        this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setPosition(deletingInterval.start)));
        this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, deletingInterval), false, false);
        this.history.endTransaction();
        return true;
    };
    return DeleteRepeatedWordCommand;
}(spelling_command_base_1.SpellingCommandBase));
exports.DeleteRepeatedWordCommand = DeleteRepeatedWordCommand;
