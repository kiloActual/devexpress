"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var spell_checker_1 = require("../../../core/spelling/spell-checker");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var change_spelling_error_command_base_1 = require("./change-spelling-error-command-base");
var ChangeSpellingErrorCommand = (function (_super) {
    tslib_1.__extends(ChangeSpellingErrorCommand, _super);
    function ChangeSpellingErrorCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeSpellingErrorCommand.prototype.isEnabled = function () {
        var selectedMisspelledInterval = this.control.spellChecker.getSelectedMisspelledInterval(this.selection.intervals);
        var suggestions = selectedMisspelledInterval ? selectedMisspelledInterval.errorInfo.suggestions : null;
        return _super.prototype.isEnabled.call(this) && suggestions && suggestions.length > 0;
    };
    ChangeSpellingErrorCommand.prototype.isVisible = function (selectedMisspelledInterval) {
        return _super.prototype.isVisible.call(this, selectedMisspelledInterval) && selectedMisspelledInterval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Misspelling;
    };
    ChangeSpellingErrorCommand.prototype.executeCore = function (state, options) {
        var misspelledInterval = state.value;
        this.changeSpellingError(options, misspelledInterval.start, misspelledInterval.length);
        return true;
    };
    return ChangeSpellingErrorCommand;
}(change_spelling_error_command_base_1.ChangeSpellingErrorCommandBase));
exports.ChangeSpellingErrorCommand = ChangeSpellingErrorCommand;
var NoSpellingSuggestionsCommand = (function (_super) {
    tslib_1.__extends(NoSpellingSuggestionsCommand, _super);
    function NoSpellingSuggestionsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NoSpellingSuggestionsCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    NoSpellingSuggestionsCommand.prototype.executeCore = function (_state, _options) {
        return true;
    };
    return NoSpellingSuggestionsCommand;
}(command_base_1.CommandBase));
exports.NoSpellingSuggestionsCommand = NoSpellingSuggestionsCommand;
