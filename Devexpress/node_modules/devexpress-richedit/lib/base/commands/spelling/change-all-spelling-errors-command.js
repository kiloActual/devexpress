"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var spell_checker_1 = require("../../../core/spelling/spell-checker");
var change_spelling_error_command_base_1 = require("./change-spelling-error-command-base");
var ChangeAllSpellingErrorsCommand = (function (_super) {
    tslib_1.__extends(ChangeAllSpellingErrorsCommand, _super);
    function ChangeAllSpellingErrorsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeAllSpellingErrorsCommand.prototype.isEnabled = function () {
        var selectedMisspelledInterval = this.control.spellChecker.getSelectedMisspelledInterval(this.selection.intervals);
        var suggestions = selectedMisspelledInterval ? selectedMisspelledInterval.errorInfo.suggestions : null;
        return _super.prototype.isEnabled.call(this) && suggestions && suggestions.length > 0;
    };
    ChangeAllSpellingErrorsCommand.prototype.isVisible = function (selectedMisspelledInterval) {
        return _super.prototype.isVisible.call(this, selectedMisspelledInterval) && selectedMisspelledInterval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Misspelling;
    };
    ChangeAllSpellingErrorsCommand.prototype.executeCore = function (state, options) {
        var selectedMisspelledInterval = state.value;
        var intervalsWithErrorByWord = this.control.spellChecker.getIntervalsWithErrorByWord(selectedMisspelledInterval.errorInfo.word);
        this.history.beginTransaction();
        for (var i = 0, interval; interval = intervalsWithErrorByWord[i]; i++) {
            this.changeSpellingError(options, interval.start, interval.length);
        }
        this.history.endTransaction();
        return true;
    };
    return ChangeAllSpellingErrorsCommand;
}(change_spelling_error_command_base_1.ChangeSpellingErrorCommandBase));
exports.ChangeAllSpellingErrorsCommand = ChangeAllSpellingErrorsCommand;
