"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var views_settings_1 = require("../../../core/view-settings/views-settings");
var model_states_1 = require("../../scroll/model-states");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeViewTypeCommand = (function (_super) {
    tslib_1.__extends(ChangeViewTypeCommand, _super);
    function ChangeViewTypeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeViewTypeCommand.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.SwitchToSimpleView] = true,
            _a[client_command_1.RichEditClientCommand.SwitchToPrintLayoutView] = true,
            _a[client_command_1.RichEditClientCommand.ChangeViewType] = true,
            _a[client_command_1.RichEditClientCommand.ToggleShowHorizontalRuler] = true,
            _a;
    };
    ChangeViewTypeCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    ChangeViewTypeCommand.prototype.executeCore = function (_state, options) {
        if (this.control.innerClientProperties.viewsSettings.viewType != options.param) {
            if (this.selection.activeSubDocument.isHeaderFooter())
                this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain)
                    .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandOptions(this.control));
            this.control.innerClientProperties.viewsSettings.viewType = options.param;
            this.control.onViewTypeChanged();
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(this.selection)
                .setModelPosition(this.selection.lastSelectedInterval.start).useStdRelativePosition().useStdOffset());
            this.control.barHolder.forceUpdate({});
            return true;
        }
        return false;
    };
    ChangeViewTypeCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.control.innerClientProperties.viewsSettings.viewType);
    };
    ChangeViewTypeCommand.prototype.updateControlState = function () {
        this.control.viewManager.adjust(true);
        _super.prototype.updateControlState.call(this);
    };
    return ChangeViewTypeCommand;
}(command_base_1.CommandBase));
exports.ChangeViewTypeCommand = ChangeViewTypeCommand;
var SwitchToPrintLayoutViewCommand = (function (_super) {
    tslib_1.__extends(SwitchToPrintLayoutViewCommand, _super);
    function SwitchToPrintLayoutViewCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchToPrintLayoutViewCommand.prototype.DEPRECATEDConvertOptionsParameter = function (_parameter) {
        return views_settings_1.ViewType.PrintLayout;
    };
    SwitchToPrintLayoutViewCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.control.innerClientProperties.viewsSettings.isPrintLayoutView);
    };
    return SwitchToPrintLayoutViewCommand;
}(ChangeViewTypeCommand));
exports.SwitchToPrintLayoutViewCommand = SwitchToPrintLayoutViewCommand;
var SwitchToSimpleViewCommand = (function (_super) {
    tslib_1.__extends(SwitchToSimpleViewCommand, _super);
    function SwitchToSimpleViewCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchToSimpleViewCommand.prototype.DEPRECATEDConvertOptionsParameter = function (_parameter) {
        return views_settings_1.ViewType.Simple;
    };
    SwitchToSimpleViewCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.control.innerClientProperties.viewsSettings.isSimpleView);
    };
    return SwitchToSimpleViewCommand;
}(ChangeViewTypeCommand));
exports.SwitchToSimpleViewCommand = SwitchToSimpleViewCommand;
