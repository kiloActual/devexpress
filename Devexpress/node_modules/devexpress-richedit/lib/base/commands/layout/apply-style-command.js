"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_style_1 = require("../../../core/model/character/character-style");
var apply_style_history_items_1 = require("../../../core/model/history/items/apply-style-history-items");
var character_properties_history_items_1 = require("../../../core/model/history/items/character-properties-history-items");
var create_style_link_history_item_1 = require("../../../core/model/history/items/create-style-link-history-item");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var control_1 = require("../../../core/model/options/control");
var rich_utils_1 = require("../../../core/model/rich-utils");
var styles_manager_1 = require("../../../core/model/styles-manager");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var string_1 = require("@devexpress/utils/lib/utils/string");
var ApplyStyleCommand = (function (_super) {
    tslib_1.__extends(ApplyStyleCommand, _super);
    function ApplyStyleCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ApplyStyleCommand.prototype.getState = function () {
        var interval = this.selection.lastSelectedInterval.clone();
        var commonParagraphStyle;
        var commonCharacterStyle;
        if (interval.length === 0)
            commonCharacterStyle = this.inputPosition.getCharacterStyle();
        if (!commonCharacterStyle || commonCharacterStyle.isDefault) {
            var runs = this.selection.activeSubDocument.getRunsByInterval(interval);
            var commonParagraphStyle = runs[0].paragraph.paragraphStyle;
            var commonCharacterStyle = runs[0].characterStyle;
            for (var i = 1, run; run = runs[i]; i++) {
                if (commonCharacterStyle && run.characterStyle !== commonCharacterStyle)
                    commonCharacterStyle = null;
                if (commonParagraphStyle && run.paragraph.paragraphStyle !== commonParagraphStyle)
                    commonParagraphStyle = null;
                if (!commonParagraphStyle && !commonCharacterStyle)
                    break;
            }
        }
        var styleNameWithPrefix = "";
        if (commonCharacterStyle && commonCharacterStyle.linkedStyle)
            styleNameWithPrefix = styles_manager_1.StylesManager.paragraphPrefix + this.getStyleName(commonCharacterStyle.linkedStyle);
        else if (commonCharacterStyle && !commonCharacterStyle.isDefault)
            styleNameWithPrefix = styles_manager_1.StylesManager.characterPrefix + this.getStyleName(commonCharacterStyle);
        else if (commonParagraphStyle && !commonParagraphStyle.isDefault)
            styleNameWithPrefix = styles_manager_1.StylesManager.paragraphPrefix + this.getStyleName(commonParagraphStyle);
        else
            styleNameWithPrefix = styles_manager_1.StylesManager.paragraphPrefix + this.getStyleName(this.control.modelManager.model.getDefaultParagraphStyle());
        var state = new command_states_1.IntervalCommandState(this.isEnabled(), interval, styleNameWithPrefix);
        state.items = this.control.modelManager.model.stylesManager.characterAndParagraphStyleGalleryItems;
        return state;
    };
    ApplyStyleCommand.prototype.getStyleName = function (style) {
        return style.styleName;
    };
    ApplyStyleCommand.prototype.executeCore = function (state, options) {
        var parameter = options.param;
        if (string_1.StringUtils.isNullOrEmpty(parameter))
            return false;
        var interval = state.interval.clone();
        var executed = true;
        var isPresetStyle = false;
        this.history.beginTransaction();
        if (styles_manager_1.StylesManager.isParagraphStyle(parameter)) {
            var styleName = styles_manager_1.StylesManager.getStyleNameWithoutPrefix(parameter);
            var paragraphStyle = this.control.modelManager.model.getParagraphStyleByName(styleName);
            if (!paragraphStyle) {
                var presetStyle = styles_manager_1.StylesManager.getPresetParagraphStyleByName(styleName);
                if (!presetStyle)
                    return false;
                paragraphStyle = styles_manager_1.StylesManager.getPresetParagraphStyleByName(styleName).clone();
                isPresetStyle = true;
            }
            this.applyParagraphStyle(interval, paragraphStyle, isPresetStyle, options.subDocument);
        }
        else {
            var styleName = styles_manager_1.StylesManager.getStyleNameWithoutPrefix(parameter);
            if (interval.length == 0)
                interval = options.subDocument.getWholeWordInterval(interval.start);
            var characterStyle = this.control.modelManager.model.getCharacterStyleByName(styleName);
            if (!characterStyle) {
                var presetStyle = styles_manager_1.StylesManager.getPresetCharacterStyleByName(styleName);
                if (!presetStyle)
                    return false;
                characterStyle = presetStyle.clone();
                isPresetStyle = true;
            }
            if (interval.length == 0) {
                if (isPresetStyle) {
                    var fontInfo = characterStyle.maskedCharacterProperties.fontInfo;
                    if (fontInfo && fontInfo.measurer === undefined)
                        characterStyle.maskedCharacterProperties.fontInfo = this.control.modelManager.model.cache.fontInfoCache.getItemByName(fontInfo.name);
                }
                this.inputPosition.setCharacterStyle(characterStyle);
                executed = false;
            }
            else
                this.applyCharacterStyle(interval, characterStyle, isPresetStyle, options.subDocument);
        }
        this.history.endTransaction();
        return executed;
    };
    ApplyStyleCommand.prototype.applyCharacterStyle = function (interval, style, isPresetStyle, subDocument) {
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterStyle)) {
            this.modelManipulator.style.applyCharacterStyle(new sub_document_1.SubDocumentInterval(subDocument, interval), isPresetStyle ? this.control.modelManager.model.stylesManager.addCharacterStyle(style) : style, false);
        }
    };
    ApplyStyleCommand.prototype.applyParagraphStyle = function (interval, style, isPresetStyle, subDocument) {
        var count = this.calculateAffectedParagraphCount(interval, subDocument);
        if (count > 0 && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphStyle)) {
            var paragraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, interval.start);
            for (var i = 0; i < count; i++) {
                var paragraph = subDocument.paragraphs[paragraphIndex + i];
                var paragraphInterval = new fixed_1.FixedInterval(paragraph.startLogPosition.value, paragraph.length);
                var modelManipulator = this.modelManipulator;
                this.history.addAndRedo(new apply_style_history_items_1.ApplyParagraphStyleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraphInterval), isPresetStyle ? modelManipulator.model.stylesManager.addParagraphStyle(style) : style));
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphUseValueHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraphInterval), 0));
                this.history.addAndRedo(new character_properties_history_items_1.FontUseValueHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraphInterval), 0));
                this.history.addAndRedo(new numbering_list_history_items_1.AddParagraphToListHistoryItem(this.modelManipulator, subDocument, paragraphIndex, numbering_list_1.NumberingList.NumberingListNotSettedIndex, -1));
            }
        }
        else
            this.applyParagraphLinkedStyle(interval, style, isPresetStyle, subDocument);
    };
    ApplyStyleCommand.prototype.applyParagraphLinkedStyle = function (interval, style, isPresetStyle, subDocument) {
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterStyle)) {
            if (!style.linkedStyle)
                this.createCharacterStyle(style);
            this.applyCharacterStyle(interval, style.linkedStyle, isPresetStyle, subDocument);
        }
    };
    ApplyStyleCommand.prototype.createCharacterStyle = function (paragraphStyle) {
        var style = new character_style_1.CharacterStyle(paragraphStyle.styleName + " Char", paragraphStyle.localizedName + " Char", false, false, false, false, paragraphStyle.maskedCharacterProperties);
        this.history.addAndRedo(new create_style_link_history_item_1.CreateStyleLinkHistoryItem(this.modelManipulator, style, paragraphStyle));
    };
    ApplyStyleCommand.prototype.calculateAffectedParagraphCount = function (interval, subDocument) {
        var paragraphs = subDocument.getParagraphsByInterval(interval);
        if (paragraphs.length > 1)
            return paragraphs.length;
        var paragraph = paragraphs[0];
        var lastParagraphCharSelected = interval.length >= paragraph.length - 1;
        if (interval.start === paragraph.startLogPosition.value && lastParagraphCharSelected || interval.length === 0)
            return 1;
        return 0;
    };
    ApplyStyleCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterStyle) || control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphStyle));
    };
    ApplyStyleCommand.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    return ApplyStyleCommand;
}(command_base_1.CommandBase));
exports.ApplyStyleCommand = ApplyStyleCommand;
