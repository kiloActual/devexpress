"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var apply_style_history_items_1 = require("../../../core/model/history/items/apply-style-history-items");
var character_properties_history_items_1 = require("../../../core/model/history/items/character-properties-history-items");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ClearFormattingCommand = (function (_super) {
    tslib_1.__extends(ClearFormattingCommand, _super);
    function ClearFormattingCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClearFormattingCommand.prototype.getActualIntervals = function () {
        if (this.selection.isCollapsed())
            return [this.selection.activeSubDocument.getWholeWordInterval(this.selection.intervals[0].start)];
        return list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals);
    };
    ClearFormattingCommand.prototype.getState = function () {
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), this.getActualIntervals());
    };
    ClearFormattingCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.intervals = this.getActualIntervals();
    };
    ClearFormattingCommand.prototype.executeCore = function (_state, options) {
        var modelManipulator = this.modelManipulator;
        var model = modelManipulator.model;
        var subDocument = options.subDocument;
        this.history.beginTransaction();
        var defaultCharProperties = model.defaultCharacterProperties;
        if (options.intervalsInfo.intervals.length > 0) {
            for (var i = 0, interval = void 0; interval = options.intervalsInfo.intervals[i]; i++) {
                if (interval.length > 0) {
                    this.history.addAndRedo(new apply_style_history_items_1.ApplyCharacterStyleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), model.getDefaultCharacterStyle(), true));
                    this.history.addAndRedo(new character_properties_history_items_1.FontBoldHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontBold, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontCapsHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.allCaps, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontUnderlineTypeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontUnderlineType, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontTextColorHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.textColor, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontShadingInfoHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.shadingInfo, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontHighlightColorHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.highlightColor, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontHiddenHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.hidden, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontItalicHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontItalic, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontNameHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontInfo, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontScriptHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.script, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontSizeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontSize, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontStrikeoutTypeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.fontStrikeoutType, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontUnderlineColorHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.underlineColor, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontUnderlineWordsOnlyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.underlineWordsOnly, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontStrikeoutWordsOnlyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.strikeoutWordsOnly, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontStrikeoutColorHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.strikeoutColor, false));
                    this.history.addAndRedo(new character_properties_history_items_1.FontNoProofHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultCharProperties.noProof, false));
                }
            }
        }
        var paragraphIndices = this.control.selection.activeSubDocument.getParagraphIndicesByIntervals(options.intervalsInfo.intervals);
        for (var i = paragraphIndices.length - 1; i >= 0; i--) {
            var paragraph = subDocument.paragraphs[paragraphIndices[i]];
            var interval = paragraph.interval;
            paragraph.onParagraphPropertiesChanged();
            this.history.addAndRedo(new apply_style_history_items_1.ApplyParagraphStyleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), model.getDefaultParagraphStyle()));
            var defaultParProperties = model.defaultParagraphProperties;
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphAlignmentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.alignment, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphContextualSpacingHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.contextualSpacing, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphAfterAutoSpacingHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.afterAutoSpacing, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphShadingInfoIndexHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.shadingInfo, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphBeforeAutoSpacingHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.beforeAutoSpacing, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.firstLineIndent, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.firstLineIndentType, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphKeepLinesTogetherHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.keepLinesTogether, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.leftIndent, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLineSpacingHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.lineSpacing, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLineSpacingTypeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.lineSpacingType, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphOutlineLevelHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.outlineLevel, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphPageBreakBeforeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.pageBreakBefore, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphRightIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.rightIndent, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphSpacingAfterHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.spacingAfter, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphSpacingBeforeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.spacingBefore, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphSuppressHyphenationHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.suppressHyphenation, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphSuppressLineNumbersHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.suppressLineNumbers, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphWidowOrphanControlHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.widowOrphanControl, false));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphDivIdHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), defaultParProperties.divId, false));
        }
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteNumerationFromParagraphs).execute(this.control.commandManager.isPublicApiCall);
        this.history.endTransaction();
        return true;
    };
    ClearFormattingCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterFormatting);
    };
    return ClearFormattingCommand;
}(command_base_1.CommandBase));
exports.ClearFormattingCommand = ClearFormattingCommand;
