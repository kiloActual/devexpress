"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var model_states_1 = require("../../scroll/model-states");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ToggleShowHiddenSymbolsCommand = (function (_super) {
    tslib_1.__extends(ToggleShowHiddenSymbolsCommand, _super);
    function ToggleShowHiddenSymbolsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleShowHiddenSymbolsCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.control.innerClientProperties.showHiddenSymbols);
    };
    ToggleShowHiddenSymbolsCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return typeof parameter === 'boolean' ? parameter : !this.control.innerClientProperties.showHiddenSymbols;
    };
    ToggleShowHiddenSymbolsCommand.prototype.executeCore = function (_state, options) {
        var newValue = options.param;
        if (newValue !== this.control.innerClientProperties.showHiddenSymbols) {
            this.control.innerClientProperties.showHiddenSymbols = newValue;
            var topInfo = this.control.viewManager.canvasManager.getScrollTopInfo();
            this.control.layoutFormatterManager.invalidator.onChangedAllLayout();
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byScrollInfo.setPageInfo(topInfo));
            return true;
        }
        return false;
    };
    ToggleShowHiddenSymbolsCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return ToggleShowHiddenSymbolsCommand;
}(command_base_1.CommandBase));
exports.ToggleShowHiddenSymbolsCommand = ToggleShowHiddenSymbolsCommand;
