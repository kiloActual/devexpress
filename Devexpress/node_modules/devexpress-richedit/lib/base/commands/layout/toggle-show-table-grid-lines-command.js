"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ToggleShowTableGridLinesCommand = (function (_super) {
    tslib_1.__extends(ToggleShowTableGridLinesCommand, _super);
    function ToggleShowTableGridLinesCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleShowTableGridLinesCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled(), this.control.innerClientProperties.showTableGridLines);
    };
    ToggleShowTableGridLinesCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    ToggleShowTableGridLinesCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return typeof parameter === 'boolean' ? parameter : !this.control.innerClientProperties.showTableGridLines;
    };
    ToggleShowTableGridLinesCommand.prototype.executeCore = function (_state, options) {
        if (options.param !== this.control.innerClientProperties.showTableGridLines) {
            this.control.innerClientProperties.showTableGridLines = options.param;
            this.control.layoutFormatterManager.invalidator.onChangedAllLayout();
            return true;
        }
        return false;
    };
    ToggleShowTableGridLinesCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return ToggleShowTableGridLinesCommand;
}(command_base_1.CommandBase));
exports.ToggleShowTableGridLinesCommand = ToggleShowTableGridLinesCommand;
