"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var apply_style_history_items_1 = require("../../core/model/history/items/apply-style-history-items");
var insert_paragraph_manipulator_params_1 = require("../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_text_manipulator_params_1 = require("../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var rich_utils_1 = require("../../core/model/rich-utils");
var run_type_1 = require("../../core/model/runs/run-type");
var sub_document_1 = require("../../core/model/sub-document");
var properties_bundle_1 = require("../../core/rich-utils/properties-bundle");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var i_rich_edit_core_1 = require("../interfaces/i-rich-edit-core");
var history_item_direction_1 = require("../model/history/selection/history-item-direction");
var scroll_history_item_1 = require("../model/history/selection/scroll-history-item");
var selection_history_item_1 = require("../model/history/selection/selection-history-item");
var model_states_1 = require("../scroll/model-states");
var CommandOptions = (function () {
    function CommandOptions(control) {
        this.control = control;
        this.changeSelection = true;
        this.isSetManually = true;
        if (control)
            this.intervalsInfo = this.control.selection.intervalsInfo.clone();
    }
    Object.defineProperty(CommandOptions.prototype, "subDocument", {
        get: function () { return this.intervalsInfo.subDocument; },
        enumerable: true,
        configurable: true
    });
    CommandOptions.prototype.setChangeSelection = function (changeSelection) {
        this.changeSelection = changeSelection;
        return this;
    };
    CommandOptions.prototype.setIntervalsInfo = function (intervalsInfo) {
        this.intervalsInfo = intervalsInfo;
        return this;
    };
    return CommandOptions;
}());
exports.CommandOptions = CommandOptions;
var CommandSimpleOptions = (function (_super) {
    tslib_1.__extends(CommandSimpleOptions, _super);
    function CommandSimpleOptions(control, parameter) {
        var _this = _super.call(this, control) || this;
        _this.param = parameter;
        return _this;
    }
    return CommandSimpleOptions;
}(CommandOptions));
exports.CommandSimpleOptions = CommandSimpleOptions;
var CommandBase = (function () {
    function CommandBase(control) {
        this.control = control;
    }
    Object.defineProperty(CommandBase.prototype, "modelManipulator", {
        get: function () { return this.control.modelManager.modelManipulator; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommandBase.prototype, "selection", {
        get: function () { return this.control.selection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommandBase.prototype, "history", {
        get: function () { return this.control.modelManager.history; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommandBase.prototype, "inputPosition", {
        get: function () { return this.control.inputPosition; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommandBase.prototype, "colorProvider", {
        get: function () { return this.control.modelManager.model.colorProvider; },
        enumerable: true,
        configurable: true
    });
    CommandBase.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {}, _a[this.commandId] = true, _a;
    };
    CommandBase.prototype.execute = function (isPublicApiCall, parameter) {
        var isPublicApiCallPrevValue = this.control.commandManager.isPublicApiCall;
        this.control.commandManager.isPublicApiCall = isPublicApiCall;
        if (this.control.isClosed() && !this.isEnabledInClosedDocument()) {
            this.control.commandManager.isPublicApiCall = isPublicApiCallPrevValue;
            return false;
        }
        var options = this.convertToCommandOptions(parameter);
        var state = this.getState(options);
        var modifiedState = this.control.getModifiedState();
        if (!state.enabled) {
            this.control.commandManager.isPublicApiCall = isPublicApiCallPrevValue;
            return false;
        }
        this.control.beginUpdate();
        this.control.commandManager.beforeExecuting(this);
        var executed = this.executeCore(state, options);
        this.control.commandManager.afterExecuting();
        var lockBarHolderUpdate = this.lockBarHolderUpdate(modifiedState);
        var lockInputPositionUpdating = this.lockInputPositionUpdating(modifiedState);
        if (lockBarHolderUpdate)
            this.control.barHolder.enableUpdate(false);
        if (lockInputPositionUpdating)
            this.control.inputPositionModelChangesListener.updateEnabled = false;
        this.control.endUpdate();
        this.control.barHolder.forceUpdate(this.getRelatedCommands());
        if (lockBarHolderUpdate)
            this.control.barHolder.enableUpdate(true);
        if (lockInputPositionUpdating)
            this.control.inputPositionModelChangesListener.updateEnabled = true;
        if (executed)
            this.updateControlState();
        this.control.commandManager.isPublicApiCall = isPublicApiCallPrevValue;
        return executed;
    };
    CommandBase.prototype.convertToCommandOptions = function (parameter) {
        if (parameter instanceof CommandOptions)
            return parameter;
        var options = new CommandSimpleOptions(this.control, this.DEPRECATEDConvertOptionsParameter(parameter));
        this.DEPRECATEDCorrectlMainCommandOptions(options);
        options.isSetManually = false;
        return options;
    };
    CommandBase.prototype.updateControlState = function () { };
    CommandBase.prototype.executeCore = function (_state, _options) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    CommandBase.prototype.isEnabled = function (_options) {
        return this.control.commandManager.commandIsEnabled(this.commandId) && (this.isEnabledInReadOnlyMode() || this.control.readOnly != i_rich_edit_core_1.ReadOnlyMode.Persistent && this.canModify());
    };
    CommandBase.prototype.lockBarHolderUpdate = function (_prevModifiedState) {
        return false;
    };
    CommandBase.prototype.lockInputPositionUpdating = function (_prevModifiedState) {
        return false;
    };
    CommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return false;
    };
    CommandBase.prototype.isEnabledInClosedDocument = function () {
        return false;
    };
    CommandBase.prototype.canModify = function () {
        return this.selection.activeSubDocument.isEditable(this.getIntervalsForModifying());
    };
    CommandBase.prototype.getIntervalsForModifying = function () {
        return this.selection.intervals;
    };
    CommandBase.prototype.getFloatingObjectParentSubDocument = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return specialRunInfo.isPictureSelected() ?
            this.selection.activeSubDocument :
            specialRunInfo.getParentSubDocument();
    };
    CommandBase.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return parameter;
    };
    CommandBase.prototype.DEPRECATEDCorrectlMainCommandOptions = function (_options) {
    };
    CommandBase.addSelectionBefore = function (control) {
        control.modelManager.history.addAndRedo(new scroll_history_item_1.ScrollHistoryItem(control.modelManager.modelManipulator, control.selection, new model_states_1.ScrollState().byScrollInfo.setPageInfo(control.viewManager.canvasManager.getScrollTopInfo()), null, history_item_direction_1.HistoryItemDirection.OnUndo));
        control.modelManager.history.add(new selection_history_item_1.SelectionHistoryItem(control.modelManager.modelManipulator, control.selection, control.selection.getState(), null, history_item_direction_1.HistoryItemDirection.OnUndo));
    };
    CommandBase.addSelectionAfter = function (control, endPos, customSelection) {
        if (customSelection === void 0) { customSelection = function () { }; }
        var state = control.selection.getState().setPosition(endPos);
        customSelection(state);
        control.modelManager.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(control.modelManager.modelManipulator, control.selection, null, state, history_item_direction_1.HistoryItemDirection.OnRedo));
        control.modelManager.history.addAndRedo(new scroll_history_item_1.ScrollHistoryItem(control.modelManager.modelManipulator, control.selection, null, new model_states_1.ScrollState().byModelPosition(control.selection).setModelPosition(endPos).useStdRelativePosition().useStdOffset(), history_item_direction_1.HistoryItemDirection.OnRedo));
    };
    CommandBase.prototype.addSelectionBefore = function () {
        CommandBase.addSelectionBefore(this.control);
    };
    CommandBase.prototype.addSelectionAfter = function (endPos, customSelection) {
        if (customSelection === void 0) { customSelection = function () { }; }
        CommandBase.addSelectionAfter(this.control, endPos, customSelection);
    };
    CommandBase.prototype.insertText = function (subDocInterval, text) {
        var charBundle = this.inputPosition.charPropsBundle;
        this.history.beginTransaction();
        this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocInterval.subDocument, subDocInterval.interval), true, false);
        var params = new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocInterval.subDocument, subDocInterval.interval.start), charBundle, run_type_1.RunType.TextRun, text);
        var insertedResult = this.modelManipulator.text.insertTextViaHistory(params);
        this.history.endTransaction();
        return insertedResult;
    };
    CommandBase.prototype.insertTextWithSelection = function (subDocInterval, text) {
        var _this = this;
        var charPropsBundle = this.inputPosition.charPropsBundle;
        this.insertSomeWithSelection(subDocInterval, function (subDocPosition) {
            var params = new insert_text_manipulator_params_1.InsertTextManipulatorParams(subDocPosition, charPropsBundle, run_type_1.RunType.TextRun, text);
            return _this.modelManipulator.text.insertTextViaHistory(params).insertedInterval.end;
        });
    };
    CommandBase.prototype.insertSomeWithSelection = function (subDocInterval, insertAction) {
        this.history.beginTransaction();
        this.addSelectionBefore();
        this.modelManipulator.range.removeInterval(subDocInterval, true, false);
        var nextSelectionPosition = insertAction(new sub_document_1.SubDocumentPosition(subDocInterval.subDocument, subDocInterval.interval.start));
        this.addSelectionAfter(nextSelectionPosition);
        this.history.endTransaction();
    };
    CommandBase.replaceTextByParagraph = function (modelManager, inputPosition, subDocInterval) {
        subDocInterval.validateInterval();
        var interval = subDocInterval.interval;
        var subDocument = subDocInterval.subDocument;
        var characterStyle = inputPosition.getCharacterStyle();
        var maskedCharacterProperties = inputPosition.getMaskedCharacterProperties().clone();
        var currentParagraph = subDocument.getRunByPosition(interval.start).paragraph;
        var nextParagraphStyle = currentParagraph.paragraphStyle ? currentParagraph.paragraphStyle.nextParagraphStyle : null;
        var needToSetNextStyle = nextParagraphStyle && (currentParagraph.getEndPosition() - 1 == interval.end);
        var needToUseCurrentParagraphLastRunAsSource = currentParagraph.isInList() && !needToSetNextStyle &&
            !interval.containsInterval(currentParagraph.interval);
        modelManager.history.beginTransaction();
        if (interval.length > 0)
            modelManager.modelManipulator.range.removeInterval(subDocInterval, true, false);
        var newInterval = new fixed_1.FixedInterval(interval.start + rich_utils_1.RichUtils.specialCharacters.ParagraphMark.length, 0);
        var actionAfter = function () { };
        if (needToUseCurrentParagraphLastRunAsSource) {
            if (interval.length > 0)
                currentParagraph = subDocument.getRunByPosition(interval.start).paragraph;
            var paragraphLastRun = subDocument.getRunByPosition(currentParagraph.getEndPosition() - 1);
            characterStyle = paragraphLastRun.characterStyle;
            maskedCharacterProperties = paragraphLastRun.maskedCharacterProperties.clone();
        }
        else {
            if (needToSetNextStyle && subDocument.isEditable([new fixed_1.FixedInterval(newInterval.start, 1)]))
                actionAfter = function (modelManager) {
                    modelManager.history.addAndRedo(new apply_style_history_items_1.ApplyParagraphStyleHistoryItem(modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, newInterval), modelManager.model.stylesManager.addParagraphStyle(nextParagraphStyle)));
                };
        }
        modelManager.modelManipulator.paragraph.insertParagraphViaHistory(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, subDocInterval.interval.start), new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle), new properties_bundle_1.MaskedParagraphPropertiesBundleFull(undefined, undefined, undefined, undefined), false, actionAfter));
        modelManager.history.endTransaction();
        return new fixed_1.FixedInterval(interval.start, 1);
    };
    return CommandBase;
}());
exports.CommandBase = CommandBase;
