"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var rich_utils_1 = require("../../../core/model/rich-utils");
var sub_document_1 = require("../../../core/model/sub-document");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeParagraphPropertiesCommandBase = (function (_super) {
    tslib_1.__extends(ChangeParagraphPropertiesCommandBase, _super);
    function ChangeParagraphPropertiesCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeParagraphPropertiesCommandBase.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        var state = new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(options.intervalsInfo.intervals), this.getValueForState(this.getCurrentValue()));
        state.denyUpdateValue = this.isLockUpdateValue();
        return state;
    };
    ChangeParagraphPropertiesCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphFormatting);
    };
    ChangeParagraphPropertiesCommandBase.prototype.executeCore = function (_state, options) {
        var desc = this.getDescriptor();
        var newValue = this.convertValue(options.param);
        if (this.getActualValue() !== newValue) {
            var history_1 = this.history;
            history_1.beginTransaction();
            desc.setProp(this.inputPosition.getMergedParagraphPropertiesFull(), newValue);
            desc.setProp(this.inputPosition.getMergedParagraphPropertiesRaw(), newValue);
            for (var _i = 0, _a = options.intervalsInfo.intervals; _i < _a.length; _i++) {
                var interval = _a[_i];
                history_1.addAndRedo(new (desc.getHistoryItemConstructor())(this.modelManipulator, new sub_document_1.SubDocumentInterval(options.subDocument, interval), newValue, true));
            }
            history_1.endTransaction();
        }
        return true;
    };
    ChangeParagraphPropertiesCommandBase.prototype.isLockUpdateValue = function () {
        return false;
    };
    ChangeParagraphPropertiesCommandBase.prototype.getCurrentValue = function () {
        return this.getDescriptor().getProp(this.inputPosition.getMergedParagraphPropertiesRaw());
    };
    ChangeParagraphPropertiesCommandBase.prototype.getValueForState = function (val) {
        return val;
    };
    ChangeParagraphPropertiesCommandBase.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    ChangeParagraphPropertiesCommandBase.prototype.convertValue = function (val) {
        return val;
    };
    ChangeParagraphPropertiesCommandBase.prototype.getActualValue = function () {
        return this.getCurrentValue();
    };
    ChangeParagraphPropertiesCommandBase.prototype.convertBooleanParameterToEnumType = function (parameter, ifTrue, ifFalse) {
        if (typeof parameter === 'boolean')
            return parameter ? ifTrue : ifFalse;
        return this.getCurrentValue() == ifTrue ? ifFalse : ifTrue;
    };
    return ChangeParagraphPropertiesCommandBase;
}(command_base_1.CommandBase));
exports.ChangeParagraphPropertiesCommandBase = ChangeParagraphPropertiesCommandBase;
