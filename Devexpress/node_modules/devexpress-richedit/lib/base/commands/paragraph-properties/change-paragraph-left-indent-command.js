"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var columns_calculator_1 = require("../../../core/layout-formatter/formatter/utils/columns-calculator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var paragraph_indent_command_base_1 = require("./paragraph-indent-command-base");
var ChangeParagraphLeftIndentCommand = (function (_super) {
    tslib_1.__extends(ChangeParagraphLeftIndentCommand, _super);
    function ChangeParagraphLeftIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeParagraphLeftIndentCommand.prototype.executeCore = function (_state, options) {
        var subDocument = options.subDocument;
        var paragraphIndices = subDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        var result = false;
        this.history.beginTransaction();
        var tabs = this.getTabs(paragraphIndices, subDocument);
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 0; i < paragraphIndicesLength; i++) {
            var paragraphIndex = paragraphIndices[i];
            result = this.applyLeftIndentToParagraph(subDocument.paragraphs[paragraphIndex], tabs) || result;
        }
        this.history.endTransaction();
        return result;
    };
    ChangeParagraphLeftIndentCommand.prototype.applyLeftIndentToParagraph = function (paragraph, tabs) {
        var newLeftIndent = this.getNewLeftIndent(paragraph, tabs);
        var maxLeftIndent = this.getMaxLeftIndent(paragraph);
        var parInterval = paragraph.interval;
        if (newLeftIndent === paragraph.getParagraphMergedProperties().leftIndent)
            return false;
        if (newLeftIndent >= 0) {
            if (paragraph.getParagraphMergedProperties().firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Hanging) {
                var firstLineLeftIndent = newLeftIndent - paragraph.getParagraphMergedProperties().firstLineIndent;
                if (firstLineLeftIndent < 0)
                    newLeftIndent -= firstLineLeftIndent;
            }
        }
        var modelManipulator = this.modelManipulator;
        this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, parInterval), newLeftIndent, true));
        if (paragraph.getParagraphMergedProperties().firstLineIndentType == paragraph_properties_1.ParagraphFirstLineIndent.Indented) {
            var distanceToRight = maxLeftIndent - (paragraph.getParagraphMergedProperties().leftIndent + paragraph.getParagraphMergedProperties().firstLineIndent);
            if (distanceToRight < 0) {
                this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, parInterval), paragraph.getParagraphMergedProperties().firstLineIndent + distanceToRight, true));
            }
        }
        return true;
    };
    return ChangeParagraphLeftIndentCommand;
}(paragraph_indent_command_base_1.ParagraphIndentCommandBase));
exports.ChangeParagraphLeftIndentCommand = ChangeParagraphLeftIndentCommand;
var IncrementParagraphLeftIndentCommand = (function (_super) {
    tslib_1.__extends(IncrementParagraphLeftIndentCommand, _super);
    function IncrementParagraphLeftIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IncrementParagraphLeftIndentCommand.prototype.getNewLeftIndent = function (paragraph, tabs) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        var nearRightDefaultTab = this.getNearRightDefaultTab(paragraphProperties.leftIndent);
        var nearRightTab = this.getNearRightTab(paragraphProperties.leftIndent, tabs);
        var result = (nearRightDefaultTab < nearRightTab || nearRightTab === paragraphProperties.leftIndent) ? nearRightDefaultTab : nearRightTab;
        var position = this.getPosition(paragraph);
        if (!position) {
            var section = this.control.modelManager.model.getSectionByPosition(paragraph.startLogPosition.value);
            var minimalColumnSize = columns_calculator_1.ColumnCalculator.findMinimalColumnSize(section.sectionProperties);
            return Math.min(result, unit_converter_1.UnitConverter.pixelsToTwips(minimalColumnSize.width));
        }
        return Math.min(result, unit_converter_1.UnitConverter.pixelsToTwips(position.column.width));
    };
    IncrementParagraphLeftIndentCommand.prototype.getMaxLeftIndent = function (paragraph) {
        var position = this.getPosition(paragraph);
        if (position)
            return unit_converter_1.UnitConverter.pixelsToTwips(position.column.width);
        else {
            var section = this.control.modelManager.model.getSectionByPosition(paragraph.startLogPosition.value);
            return unit_converter_1.UnitConverter.pixelsToTwips(columns_calculator_1.ColumnCalculator.findMinimalColumnSize(section.sectionProperties).width);
        }
    };
    IncrementParagraphLeftIndentCommand.prototype.getPosition = function (paragraph) {
        var subDocument = this.selection.activeSubDocument;
        return (subDocument.isMain() ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, paragraph.startLogPosition.value, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, paragraph.startLogPosition.value, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
    };
    return IncrementParagraphLeftIndentCommand;
}(ChangeParagraphLeftIndentCommand));
exports.IncrementParagraphLeftIndentCommand = IncrementParagraphLeftIndentCommand;
var DecrementParagraphLeftIndentCommand = (function (_super) {
    tslib_1.__extends(DecrementParagraphLeftIndentCommand, _super);
    function DecrementParagraphLeftIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DecrementParagraphLeftIndentCommand.prototype.getNewLeftIndent = function (paragraph, tabs) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        var nearLeftDefaultTab = this.getNearLeftDefaultTab(paragraphProperties.leftIndent);
        var nearLeftTab = this.getNearLeftTab(paragraphProperties.leftIndent, tabs);
        return (nearLeftDefaultTab > nearLeftTab || nearLeftTab == paragraphProperties.leftIndent) ? nearLeftDefaultTab : nearLeftTab;
    };
    DecrementParagraphLeftIndentCommand.prototype.getMaxLeftIndent = function (_paragraph) {
        return Number.MAX_VALUE;
    };
    return DecrementParagraphLeftIndentCommand;
}(ChangeParagraphLeftIndentCommand));
exports.DecrementParagraphLeftIndentCommand = DecrementParagraphLeftIndentCommand;
