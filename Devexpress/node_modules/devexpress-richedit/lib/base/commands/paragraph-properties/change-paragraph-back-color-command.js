"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var list_1 = require("@devexpress/utils/lib/utils/list");
var change_font_back_color_command_1 = require("../character-properties/change-font-back-color-command");
var change_paragraph_properties_command_base_1 = require("./change-paragraph-properties-command-base");
var ChangeParagraphBackColorCommand = (function (_super) {
    tslib_1.__extends(ChangeParagraphBackColorCommand, _super);
    function ChangeParagraphBackColorCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeParagraphBackColorCommand.prototype.executeCore = function (_state, options) {
        var subDocument = options.subDocument;
        var intervals = this.selection.intervals;
        var isParagraphBackColorChanged = this.control.commandManager.isPublicApiCall || this.selection.isCollapsed() || list_1.ListUtils.unsafeAnyOf(intervals, function (interval) {
            var paragraphs = subDocument.getParagraphsByInterval(interval);
            return paragraphs.length > 1 || interval.contains(paragraphs[0].getEndPosition() - 1);
        });
        if (isParagraphBackColorChanged)
            return _super.prototype.executeCore.call(this, _state, options);
        else {
            var fontShadingInfoCommand = new change_font_back_color_command_1.ChangeFontShadingInfoCommand(this.control);
            fontShadingInfoCommand.execute(this.control.commandManager.isPublicApiCall, options);
        }
    };
    ChangeParagraphBackColorCommand.prototype.getDescriptor = function () {
        return paragraph_properties_1.ParagraphPropertyDescriptor.shadingInfo;
    };
    ChangeParagraphBackColorCommand.prototype.getValueForState = function (val) {
        return val ? val.getActualColor(this.colorProvider) : undefined;
    };
    ChangeParagraphBackColorCommand.prototype.isLockUpdateValue = function () {
        return true;
    };
    ChangeParagraphBackColorCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(color_1.ColorHelper.anyToColor(parameter, color_1.ColorHelper.NO_COLOR)));
    };
    return ChangeParagraphBackColorCommand;
}(change_paragraph_properties_command_base_1.ChangeParagraphPropertiesCommandBase));
exports.ChangeParagraphBackColorCommand = ChangeParagraphBackColorCommand;
