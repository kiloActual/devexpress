"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var rich_utils_1 = require("../../../core/model/rich-utils");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeIndentCommandBase = (function (_super) {
    tslib_1.__extends(ChangeIndentCommandBase, _super);
    function ChangeIndentCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeIndentCommandBase.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.paragraphFormatting) && !this.selection.specialRunInfo.isPictureSelected();
        return state;
    };
    ChangeIndentCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphFormatting);
    };
    ChangeIndentCommandBase.prototype.executeCore = function (_state, options) {
        var paragraphIndices = options.subDocument.getParagraphIndicesByIntervals(options.intervalsInfo.intervals);
        var commandId = this.shouldProcessAsNumberingParagraphs(paragraphIndices, options.subDocument) ?
            this.processNumberingIndentsCommandId() :
            this.processParagraphIndentsCommandId();
        return this.control.commandManager.getCommand(commandId).execute(this.control.commandManager.isPublicApiCall, options);
    };
    ChangeIndentCommandBase.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    ChangeIndentCommandBase.prototype.shouldProcessAsNumberingParagraphs = function (paragraphIndices, subDocument) {
        var abstractNumberingListIndex = subDocument.paragraphs[paragraphIndices[0]].getAbstractNumberingListIndex();
        if (abstractNumberingListIndex < 0)
            return false;
        var paragraphIndicesLength = paragraphIndices.length;
        for (var i = 1; i < paragraphIndicesLength; i++) {
            var paragraphIndex = paragraphIndices[i];
            if (subDocument.paragraphs[paragraphIndex].getAbstractNumberingListIndex() !== abstractNumberingListIndex)
                return false;
        }
        return true;
    };
    return ChangeIndentCommandBase;
}(command_base_1.CommandBase));
exports.ChangeIndentCommandBase = ChangeIndentCommandBase;
var DecrementIndentCommand = (function (_super) {
    tslib_1.__extends(DecrementIndentCommand, _super);
    function DecrementIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DecrementIndentCommand.prototype.processParagraphIndentsCommandId = function () {
        return client_command_1.RichEditClientCommand.DecrementParagraphLeftIndent;
    };
    DecrementIndentCommand.prototype.processNumberingIndentsCommandId = function () {
        return client_command_1.RichEditClientCommand.DecrementNumberingIndent;
    };
    return DecrementIndentCommand;
}(ChangeIndentCommandBase));
exports.DecrementIndentCommand = DecrementIndentCommand;
var IncrementIndentCommand = (function (_super) {
    tslib_1.__extends(IncrementIndentCommand, _super);
    function IncrementIndentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IncrementIndentCommand.prototype.processParagraphIndentsCommandId = function () {
        return client_command_1.RichEditClientCommand.IncrementParagraphLeftIndent;
    };
    IncrementIndentCommand.prototype.processNumberingIndentsCommandId = function () {
        return client_command_1.RichEditClientCommand.IncrementNumberingIndent;
    };
    return IncrementIndentCommand;
}(ChangeIndentCommandBase));
exports.IncrementIndentCommand = IncrementIndentCommand;
