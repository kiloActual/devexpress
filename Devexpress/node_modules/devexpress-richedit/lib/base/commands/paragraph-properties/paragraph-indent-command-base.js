"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var rich_utils_1 = require("../../../core/model/rich-utils");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ParagraphIndentCommandBase = (function (_super) {
    tslib_1.__extends(ParagraphIndentCommandBase, _super);
    function ParagraphIndentCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphIndentCommandBase.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        return new command_states_1.SimpleCommandState(this.isEnabled(options));
    };
    ParagraphIndentCommandBase.prototype.isEnabled = function (_options) {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphFormatting);
    };
    ParagraphIndentCommandBase.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    ParagraphIndentCommandBase.prototype.getTabs = function (paragraphIndices, subDocument) {
        var endParagraphIndex = paragraphIndices[paragraphIndices.length - 1];
        var startParagraphIndex = paragraphIndices[0];
        var firstParagraph = subDocument.paragraphs[startParagraphIndex];
        var tabInfos = firstParagraph.getTabs();
        var result = [];
        for (var i = 0, tabInfo; tabInfo = tabInfos[i]; i++) {
            result.push(tabInfo.position);
        }
        if (paragraphIndices[0] === 0 && paragraphIndices.length === 1)
            result = result.concat(this.getParagraphTabs(firstParagraph));
        else {
            if (paragraphIndices[0] > 0)
                result = result.concat(this.getParagraphTabs(subDocument.paragraphs[startParagraphIndex - 1]));
            if (endParagraphIndex < subDocument.paragraphs.length - 1)
                result = result.concat(this.getParagraphTabs(subDocument.paragraphs[endParagraphIndex + 1]));
        }
        result.sort(comparers_1.Comparers.number);
        return result;
    };
    ParagraphIndentCommandBase.prototype.getNearRightDefaultTab = function (leftIndent) {
        var defTabWidth = this.control.modelManager.model.defaultTabWidth;
        return Math.floor((leftIndent / defTabWidth) + 1) * defTabWidth;
    };
    ParagraphIndentCommandBase.prototype.getNearLeftDefaultTab = function (leftIndent) {
        var defTabWidth = this.control.modelManager.model.defaultTabWidth;
        var nearestLeftDefaultTab = Math.floor(leftIndent / defTabWidth);
        if (nearestLeftDefaultTab > 0) {
            if (leftIndent % defTabWidth != 0)
                return nearestLeftDefaultTab * defTabWidth;
            else
                return (nearestLeftDefaultTab - 1) * defTabWidth;
        }
        return nearestLeftDefaultTab;
    };
    ParagraphIndentCommandBase.prototype.getNearRightTab = function (leftIndent, tabs) {
        for (var i = 0; i < tabs.length; i++) {
            if (leftIndent < tabs[i])
                return tabs[i];
        }
        return leftIndent;
    };
    ParagraphIndentCommandBase.prototype.getNearLeftTab = function (leftIndent, tabs) {
        for (var i = tabs.length - 1; i >= 0; i--) {
            if (leftIndent > tabs[i])
                return tabs[i];
        }
        return leftIndent;
    };
    ParagraphIndentCommandBase.prototype.getParagraphTabs = function (paragraph) {
        var result = [];
        var mergedProperties = paragraph.getParagraphMergedProperties();
        result.push(mergedProperties.leftIndent);
        if (mergedProperties.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Hanging)
            result.push(mergedProperties.leftIndent - mergedProperties.firstLineIndent);
        else if (mergedProperties.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Indented)
            result.push(mergedProperties.leftIndent + mergedProperties.firstLineIndent);
        return result;
    };
    return ParagraphIndentCommandBase;
}(command_base_1.CommandBase));
exports.ParagraphIndentCommandBase = ParagraphIndentCommandBase;
