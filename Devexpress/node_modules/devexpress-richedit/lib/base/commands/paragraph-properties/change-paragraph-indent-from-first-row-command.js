"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var columns_calculator_1 = require("../../../core/layout-formatter/formatter/utils/columns-calculator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var client_command_1 = require("../client-command");
var paragraph_indent_command_base_1 = require("./paragraph-indent-command-base");
var ChangeParagraphIndentFromFirstRowCommandBase = (function (_super) {
    tslib_1.__extends(ChangeParagraphIndentFromFirstRowCommandBase, _super);
    function ChangeParagraphIndentFromFirstRowCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeParagraphIndentFromFirstRowCommandBase.prototype.executeCore = function (_state, options) {
        var subDocument = options.subDocument;
        var paragraphIndices = subDocument.getParagraphIndicesByIntervals(options.intervalsInfo.intervals);
        var firstParagraph = subDocument.paragraphs[paragraphIndices[0]];
        if (this.needUpdateFirstLineIndent(firstParagraph)) {
            this.history.beginTransaction();
            var maxFirstLineIndent = this.getMaxFirstLineIndent(firstParagraph, subDocument);
            var tabs = this.getTabs(paragraphIndices, subDocument);
            var firstLineIndent = this.getFirstLineIndent(firstParagraph, tabs);
            this.assignParagraphFirstLineIndent(firstParagraph, firstLineIndent, maxFirstLineIndent, subDocument);
            this.history.endTransaction();
            return true;
        }
        else
            return this.getParagraphLeftIndentCommand().execute(this.control.commandManager.isPublicApiCall);
    };
    ChangeParagraphIndentFromFirstRowCommandBase.prototype.assignParagraphFirstLineIndent = function (paragraph, firstLineIndent, maxValue, subDocument) {
        if (firstLineIndent > 0) {
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), paragraph_properties_1.ParagraphFirstLineIndent.Indented, true));
            var distanceToRight = maxValue - (paragraph.getParagraphMergedProperties().leftIndent + firstLineIndent);
            if (distanceToRight < 0)
                firstLineIndent += distanceToRight;
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), firstLineIndent, true));
        }
        else if (firstLineIndent < 0) {
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), paragraph_properties_1.ParagraphFirstLineIndent.Hanging, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), Math.abs(firstLineIndent), true));
        }
        else {
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), paragraph_properties_1.ParagraphFirstLineIndent.None, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), 0, true));
        }
    };
    ChangeParagraphIndentFromFirstRowCommandBase.prototype.getFirstLineIndentAbsPosition = function (paragraphProperties) {
        switch (paragraphProperties.firstLineIndentType) {
            case paragraph_properties_1.ParagraphFirstLineIndent.Indented:
                return paragraphProperties.leftIndent + paragraphProperties.firstLineIndent;
            case paragraph_properties_1.ParagraphFirstLineIndent.Hanging:
                return paragraphProperties.leftIndent - paragraphProperties.firstLineIndent;
            default:
                return paragraphProperties.leftIndent;
        }
    };
    return ChangeParagraphIndentFromFirstRowCommandBase;
}(paragraph_indent_command_base_1.ParagraphIndentCommandBase));
exports.ChangeParagraphIndentFromFirstRowCommandBase = ChangeParagraphIndentFromFirstRowCommandBase;
var IncrementParagraphIndentFromFirstRowCommand = (function (_super) {
    tslib_1.__extends(IncrementParagraphIndentFromFirstRowCommand, _super);
    function IncrementParagraphIndentFromFirstRowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IncrementParagraphIndentFromFirstRowCommand.prototype.getParagraphLeftIndentCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IncrementParagraphLeftIndent);
    };
    IncrementParagraphIndentFromFirstRowCommand.prototype.getMaxFirstLineIndent = function (paragraph, subDocument) {
        var logPosition = paragraph.startLogPosition.value;
        var layoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, logPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, logPosition, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        if (layoutPosition)
            return unit_converter_1.UnitConverter.pixelsToTwips(layoutPosition.column.width);
        else {
            var section = this.control.modelManager.model.getSectionByPosition(paragraph.startLogPosition.value);
            return unit_converter_1.UnitConverter.pixelsToTwips(columns_calculator_1.ColumnCalculator.findMinimalColumnSize(section.sectionProperties).width);
        }
    };
    IncrementParagraphIndentFromFirstRowCommand.prototype.getFirstLineIndent = function (paragraph, tabs) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        var firstLineIndentAbsPosition = this.getFirstLineIndentAbsPosition(paragraphProperties);
        var nearestRightTab = this.getNearRightTab(firstLineIndentAbsPosition, tabs);
        var nearestDefaultTab = this.getNearRightDefaultTab(firstLineIndentAbsPosition);
        if (nearestRightTab > firstLineIndentAbsPosition)
            return Math.min(nearestRightTab, nearestDefaultTab) - paragraphProperties.leftIndent;
        return nearestDefaultTab - paragraphProperties.leftIndent;
    };
    IncrementParagraphIndentFromFirstRowCommand.prototype.needUpdateFirstLineIndent = function (paragraph) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        var currentIndent = paragraphProperties.leftIndent;
        var rightDefaultTab = this.getNearRightDefaultTab(paragraphProperties.leftIndent + paragraphProperties.firstLineIndentType);
        switch (paragraphProperties.firstLineIndentType) {
            case paragraph_properties_1.ParagraphFirstLineIndent.Indented:
                currentIndent += paragraphProperties.firstLineIndent;
                break;
            case paragraph_properties_1.ParagraphFirstLineIndent.Hanging:
                currentIndent -= paragraphProperties.firstLineIndent;
        }
        return currentIndent < rightDefaultTab;
    };
    return IncrementParagraphIndentFromFirstRowCommand;
}(ChangeParagraphIndentFromFirstRowCommandBase));
exports.IncrementParagraphIndentFromFirstRowCommand = IncrementParagraphIndentFromFirstRowCommand;
var DecrementParagraphIndentFromFirstRowCommand = (function (_super) {
    tslib_1.__extends(DecrementParagraphIndentFromFirstRowCommand, _super);
    function DecrementParagraphIndentFromFirstRowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DecrementParagraphIndentFromFirstRowCommand.prototype.getMaxFirstLineIndent = function (_paragraph, _subDocument) {
        return Number.MAX_VALUE;
    };
    DecrementParagraphIndentFromFirstRowCommand.prototype.getFirstLineIndent = function (paragraph, tabs) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        var firstLineIndentAbsPosition = this.getFirstLineIndentAbsPosition(paragraphProperties);
        var nearestLeftTab = this.getNearLeftTab(firstLineIndentAbsPosition, tabs);
        var nearestDefaultTab = this.getNearLeftDefaultTab(firstLineIndentAbsPosition);
        return Math.max(0, Math.max(nearestLeftTab, nearestDefaultTab) - paragraphProperties.leftIndent);
    };
    DecrementParagraphIndentFromFirstRowCommand.prototype.needUpdateFirstLineIndent = function (paragraph) {
        var paragraphProperties = paragraph.getParagraphMergedProperties();
        return paragraphProperties.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Indented;
    };
    DecrementParagraphIndentFromFirstRowCommand.prototype.getParagraphLeftIndentCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DecrementParagraphLeftIndent);
    };
    return DecrementParagraphIndentFromFirstRowCommand;
}(ChangeParagraphIndentFromFirstRowCommandBase));
exports.DecrementParagraphIndentFromFirstRowCommand = DecrementParagraphIndentFromFirstRowCommand;
