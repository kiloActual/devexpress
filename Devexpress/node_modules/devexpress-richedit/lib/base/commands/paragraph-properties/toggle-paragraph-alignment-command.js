"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var client_command_1 = require("../client-command");
var change_paragraph_properties_command_base_1 = require("./change-paragraph-properties-command-base");
var ToggleParagraphAlignmentCommand = (function (_super) {
    tslib_1.__extends(ToggleParagraphAlignmentCommand, _super);
    function ToggleParagraphAlignmentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleParagraphAlignmentCommand.prototype.getDescriptor = function () {
        return paragraph_properties_1.ParagraphPropertyDescriptor.alignment;
    };
    ToggleParagraphAlignmentCommand.prototype.getValueForState = function (val) {
        return val == this.getParagraphAlignment();
    };
    ToggleParagraphAlignmentCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return this.convertBooleanParameterToEnumType(parameter, this.getParagraphAlignment(), this.getOppositeAlignment());
    };
    ToggleParagraphAlignmentCommand.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.ToggleParagraphAlignmentCenter] = true,
            _a[client_command_1.RichEditClientCommand.ToggleParagraphAlignmentJustify] = true,
            _a[client_command_1.RichEditClientCommand.ToggleParagraphAlignmentLeft] = true,
            _a[client_command_1.RichEditClientCommand.ToggleParagraphAlignmentRight] = true,
            _a;
    };
    ToggleParagraphAlignmentCommand.prototype.getOppositeAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Left;
    };
    return ToggleParagraphAlignmentCommand;
}(change_paragraph_properties_command_base_1.ChangeParagraphPropertiesCommandBase));
exports.ToggleParagraphAlignmentCommand = ToggleParagraphAlignmentCommand;
var ToggleParagraphAlignmentLeftCommand = (function (_super) {
    tslib_1.__extends(ToggleParagraphAlignmentLeftCommand, _super);
    function ToggleParagraphAlignmentLeftCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleParagraphAlignmentLeftCommand.prototype.getParagraphAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Left;
    };
    ToggleParagraphAlignmentLeftCommand.prototype.getOppositeAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Justify;
    };
    return ToggleParagraphAlignmentLeftCommand;
}(ToggleParagraphAlignmentCommand));
exports.ToggleParagraphAlignmentLeftCommand = ToggleParagraphAlignmentLeftCommand;
var ToggleParagraphAlignmentCenterCommand = (function (_super) {
    tslib_1.__extends(ToggleParagraphAlignmentCenterCommand, _super);
    function ToggleParagraphAlignmentCenterCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleParagraphAlignmentCenterCommand.prototype.getParagraphAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Center;
    };
    return ToggleParagraphAlignmentCenterCommand;
}(ToggleParagraphAlignmentCommand));
exports.ToggleParagraphAlignmentCenterCommand = ToggleParagraphAlignmentCenterCommand;
var ToggleParagraphAlignmentRightCommand = (function (_super) {
    tslib_1.__extends(ToggleParagraphAlignmentRightCommand, _super);
    function ToggleParagraphAlignmentRightCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleParagraphAlignmentRightCommand.prototype.getParagraphAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Right;
    };
    return ToggleParagraphAlignmentRightCommand;
}(ToggleParagraphAlignmentCommand));
exports.ToggleParagraphAlignmentRightCommand = ToggleParagraphAlignmentRightCommand;
var ToggleParagraphAlignmentJustifyCommand = (function (_super) {
    tslib_1.__extends(ToggleParagraphAlignmentJustifyCommand, _super);
    function ToggleParagraphAlignmentJustifyCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleParagraphAlignmentJustifyCommand.prototype.getParagraphAlignment = function () {
        return paragraph_properties_1.ParagraphAlignment.Justify;
    };
    return ToggleParagraphAlignmentJustifyCommand;
}(ToggleParagraphAlignmentCommand));
exports.ToggleParagraphAlignmentJustifyCommand = ToggleParagraphAlignmentJustifyCommand;
