"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var client_command_1 = require("../client-command");
var change_active_sub_document_command_1 = require("../sub-document/change-active-sub-document-command");
var header_footer_command_base_1 = require("./header-footer-command-base");
var GoToHeaderFooterCommandBase = (function (_super) {
    tslib_1.__extends(GoToHeaderFooterCommandBase, _super);
    function GoToHeaderFooterCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToHeaderFooterCommandBase.prototype.executeCore = function (_state, _options) {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
            .execute(this.control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(this.control, this.selection.pageIndex, this.selection.activeSubDocument.isFooter()));
    };
    GoToHeaderFooterCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return GoToHeaderFooterCommandBase;
}(header_footer_command_base_1.HeaderFooterCommandBase));
exports.GoToHeaderFooterCommandBase = GoToHeaderFooterCommandBase;
var GoToHeaderCommand = (function (_super) {
    tslib_1.__extends(GoToHeaderCommand, _super);
    function GoToHeaderCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToHeaderCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.selection.activeSubDocument.isFooter();
    };
    return GoToHeaderCommand;
}(GoToHeaderFooterCommandBase));
exports.GoToHeaderCommand = GoToHeaderCommand;
var GoToFooterCommand = (function (_super) {
    tslib_1.__extends(GoToFooterCommand, _super);
    function GoToFooterCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToFooterCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.selection.activeSubDocument.isHeader();
    };
    return GoToFooterCommand;
}(GoToHeaderFooterCommandBase));
exports.GoToFooterCommand = GoToFooterCommand;
