"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var section_1 = require("../../../core/model/section/section");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var HeaderFooterCommandBase = (function (_super) {
    tslib_1.__extends(HeaderFooterCommandBase, _super);
    function HeaderFooterCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderFooterCommandBase.prototype.getState = function () {
        var isEnabled = this.isEnabled();
        return new command_states_1.SimpleCommandState(isEnabled, isEnabled ? this.getValue() : false);
    };
    HeaderFooterCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) &&
            control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.sections) &&
            control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.headersFooters) &&
            this.control.innerClientProperties.viewsSettings.isPrintLayoutView &&
            this.selection.activeSubDocument.isHeaderFooter();
    };
    HeaderFooterCommandBase.prototype.getValue = function () {
        return null;
    };
    HeaderFooterCommandBase.prototype.getSectionIndex = function (pageIndex) {
        var layoutPage = this.control.layoutFormatterManager.forceFormatPage(pageIndex);
        var lp = layoutPage ? layoutPage : this.control.layout.getLastValidPage();
        return lp ? section_1.Section.getPageSectionIndex(lp, this.control.modelManager.model.sections) : 0;
    };
    HeaderFooterCommandBase.getObjectsCache = function (isHeader, control) {
        return isHeader ? control.modelManager.model.headers : control.modelManager.model.footers;
    };
    HeaderFooterCommandBase.getSectionHeadersFooters = function (isHeader, section) {
        return isHeader ? section.headers : section.footers;
    };
    return HeaderFooterCommandBase;
}(command_base_1.CommandBase));
exports.HeaderFooterCommandBase = HeaderFooterCommandBase;
