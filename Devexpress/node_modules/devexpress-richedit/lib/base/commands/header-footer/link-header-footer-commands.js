"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_page_1 = require("../../../core/layout/main-structures/layout-page");
var header_footer_history_items_1 = require("../../../core/model/history/items/header-footer-history-items");
var create_range_copy_operation_1 = require("../../../core/model/manipulators/range/create-range-copy-operation");
var header_footer_1 = require("../../../core/model/section/header-footer");
var section_1 = require("../../../core/model/section/section");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var client_command_1 = require("../client-command");
var change_active_sub_document_command_1 = require("../sub-document/change-active-sub-document-command");
var header_footer_command_base_1 = require("./header-footer-command-base");
var LinkHeaderFooterToPreviousCommand = (function (_super) {
    tslib_1.__extends(LinkHeaderFooterToPreviousCommand, _super);
    function LinkHeaderFooterToPreviousCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LinkHeaderFooterToPreviousCommand.prototype.isEnabled = function () {
        if (!_super.prototype.isEnabled.call(this))
            return false;
        var page = this.control.layoutFormatterManager.forceFormatPage(this.selection.pageIndex);
        return page && section_1.Section.getPageSectionIndex(page, this.control.modelManager.model.sections) > 0;
    };
    LinkHeaderFooterToPreviousCommand.prototype.getValue = function () {
        if (!this.isEnabled())
            return null;
        this.isHeader = this.selection.activeSubDocument.isHeader();
        var pageIndex = this.selection.pageIndex;
        var layoutPage = this.control.layoutFormatterManager.forceFormatPage(pageIndex);
        var sections = this.control.modelManager.model.sections;
        var sectionIndex = section_1.Section.getPageSectionIndex(layoutPage, sections);
        var headerFooterType = header_footer_1.SectionHeadersFooters.getActualObjectType(sections[sectionIndex], layoutPage.flags.get(layout_page_1.LayoutPageFlags.IsFirstPageOfSection), common_1.isEven(layoutPage.layoutPageIndex));
        return header_footer_command_base_1.HeaderFooterCommandBase.getSectionHeadersFooters(this.isHeader, sections[sectionIndex]).isLinkedToPrevious(headerFooterType);
    };
    LinkHeaderFooterToPreviousCommand.prototype.executeCore = function (state, _options) {
        var layoutPage = this.control.layoutFormatterManager.forceFormatPage(this.selection.pageIndex);
        var sectionIndex = section_1.Section.getPageSectionIndex(layoutPage, this.control.modelManager.model.sections);
        var type = this.selection.activeSubDocument.info.headerFooterType;
        this.history.beginTransaction();
        if (state.value)
            this.unlinkFromPrevious(sectionIndex, type);
        else
            this.linkToPrevious(sectionIndex, type);
        this.history.endTransaction();
        return true;
    };
    LinkHeaderFooterToPreviousCommand.prototype.linkToPrevious = function (sectionIndex, type) {
        var _this = this;
        var section = this.control.modelManager.model.sections[sectionIndex];
        this.performLinkSectionToPrevious(sectionIndex, type, function (previousSectionIndex) {
            var previousSection = section.documentModel.sections[previousSectionIndex];
            var prevObjectIndex = header_footer_command_base_1.HeaderFooterCommandBase.getSectionHeadersFooters(_this.isHeader, previousSection).getObjectIndex(type);
            if (prevObjectIndex === -1) {
                prevObjectIndex = _this.control.modelManager.modelManipulator.header.getHeaderFooterManipulator(_this.isHeader).createObject(type);
                _this.history.addAndRedo(_this.createChangeObjectIndexHistoryItem(previousSectionIndex, type, prevObjectIndex));
            }
            _this.history.addAndRedo(_this.createChangeObjectIndexHistoryItem(sectionIndex, type, prevObjectIndex));
            if (!_this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
                .execute(_this.control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(_this.control, _this.selection.pageIndex, _this.isHeader)))
                _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterBySubDocument)
                    .execute(_this.control.commandManager.isPublicApiCall, header_footer_command_base_1.HeaderFooterCommandBase.getObjectsCache(_this.isHeader, _this.control)[prevObjectIndex].getSubDocument(_this.control.modelManager.model));
        });
    };
    LinkHeaderFooterToPreviousCommand.prototype.unlinkFromPrevious = function (sectionIndex, type) {
        var _this = this;
        var section = this.control.modelManager.model.sections[sectionIndex];
        this.performLinkSectionToPrevious(sectionIndex, type, function (previousSectionIndex) {
            var previousSection = section.documentModel.sections[previousSectionIndex];
            var previousObject = header_footer_command_base_1.HeaderFooterCommandBase.getSectionHeadersFooters(_this.isHeader, previousSection).getObject(type);
            var endPosition = previousObject.getEndPosition(section.documentModel);
            var previousObjectCopyInfo = endPosition > 1 ?
                create_range_copy_operation_1.RangeCopy.create(new sub_document_1.SubDocumentIntervals(previousObject.getSubDocument(section.documentModel), [new fixed_1.FixedInterval(0, endPosition - 1)])) :
                null;
            var newObjectIndex = _this.control.modelManager.modelManipulator.header.getHeaderFooterManipulator(_this.isHeader).createObject(type);
            var newObject = header_footer_command_base_1.HeaderFooterCommandBase.getObjectsCache(_this.isHeader, _this.control)[newObjectIndex];
            var newObjectSubDocument = newObject.getSubDocument(_this.control.modelManager.model);
            _this.history.addAndRedo(_this.createChangeObjectIndexHistoryItem(sectionIndex, type, newObjectIndex));
            if (previousObjectCopyInfo) {
                _this.history.beginTransaction();
                _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(newObjectSubDocument, fixed_1.FixedInterval.fromPositions(0, newObjectSubDocument.getDocumentEndPosition())), true, true);
                previousObjectCopyInfo.insertTo(_this.modelManipulator, new sub_document_1.SubDocumentPosition(newObjectSubDocument, 0));
                _this.history.endTransaction();
            }
            if (!_this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex).execute(_this.control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(_this.control, _this.selection.pageIndex, _this.isHeader)))
                _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterBySubDocument).execute(_this.control.commandManager.isPublicApiCall, newObject.getSubDocument(_this.control.modelManager.model));
        });
    };
    LinkHeaderFooterToPreviousCommand.prototype.performLinkSectionToPrevious = function (sectionIndex, type, linkAction) {
        var nextSection = this.control.modelManager.model.sections[sectionIndex + 1];
        var section = this.control.modelManager.model.sections[sectionIndex];
        var shouldRelinkNextSection = nextSection && this.areSectionsLinked(section, nextSection, type);
        linkAction(sectionIndex - 1);
        if (shouldRelinkNextSection)
            this.linkToPrevious(sectionIndex + 1, type);
    };
    LinkHeaderFooterToPreviousCommand.prototype.areSectionsLinked = function (section1, section2, type) {
        return header_footer_command_base_1.HeaderFooterCommandBase.getSectionHeadersFooters(this.isHeader, section2).getObject(type) ===
            header_footer_command_base_1.HeaderFooterCommandBase.getSectionHeadersFooters(this.isHeader, section1).getObject(type);
    };
    LinkHeaderFooterToPreviousCommand.prototype.createChangeObjectIndexHistoryItem = function (sectionIndex, type, newIndex) {
        var _this = this;
        return new (this.isHeader ? header_footer_history_items_1.ChangeHeaderIndexHistoryItem : header_footer_history_items_1.ChangeFooterIndexHistoryItem)(this.modelManipulator, sectionIndex, type, newIndex, function (oldIndex) {
            if (_this.control.selection.activeSubDocument.isHeaderFooter() && oldIndex == -1)
                _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain)
                    .execute(_this.control.commandManager.isPublicApiCall);
        });
    };
    return LinkHeaderFooterToPreviousCommand;
}(header_footer_command_base_1.HeaderFooterCommandBase));
exports.LinkHeaderFooterToPreviousCommand = LinkHeaderFooterToPreviousCommand;
