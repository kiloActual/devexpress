"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var list_1 = require("@devexpress/utils/lib/utils/list");
var model_scroll_manager_1 = require("../../scroll/model-scroll-manager");
var model_states_1 = require("../../scroll/model-states");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var GoToStartPageCommandBase = (function (_super) {
    tslib_1.__extends(GoToStartPageCommandBase, _super);
    function GoToStartPageCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToStartPageCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    GoToStartPageCommandBase.prototype.executeCore = function (_state, _options) {
        var selection = this.selection;
        var subDocument = this.selection.activeSubDocument;
        var layout = this.control.layout;
        var position = selection.lastSelectedInterval.start;
        var pageIndex = subDocument.isMain() ?
            layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, position, document_layout_details_level_1.DocumentLayoutDetailsLevel.Page, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)).pageIndex :
            selection.pageIndex;
        var newPageIndex = this.getNewPageIndex(pageIndex);
        var page = this.control.layoutFormatterManager.forceFormatPage(newPageIndex);
        var newPosition = (page ? page : list_1.ListUtils.last(layout.pages)).getPosition();
        if (selection.isCollapsed() && position == newPosition)
            return false;
        this.setNewSelection(newPosition);
        selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(selection)
            .setModelPosition(newPosition)
            .useStdRelativePosition()
            .useStdOffset());
        return true;
    };
    return GoToStartPageCommandBase;
}(command_base_1.CommandBase));
exports.GoToStartPageCommandBase = GoToStartPageCommandBase;
var GoToStartNextPageCommand = (function (_super) {
    tslib_1.__extends(GoToStartNextPageCommand, _super);
    function GoToStartNextPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToStartNextPageCommand.prototype.getNewPageIndex = function (pageIndex) {
        return pageIndex + 1;
    };
    GoToStartNextPageCommand.prototype.setNewSelection = function (newPosition) {
        this.selection.deprecatedSetSelection(newPosition, newPosition, false, -1, true, true, true, model_scroll_manager_1.ModelScrollManager.DontChangeScrollPosition);
    };
    return GoToStartNextPageCommand;
}(GoToStartPageCommandBase));
exports.GoToStartNextPageCommand = GoToStartNextPageCommand;
var GoToStartPrevPageCommand = (function (_super) {
    tslib_1.__extends(GoToStartPrevPageCommand, _super);
    function GoToStartPrevPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToStartPrevPageCommand.prototype.getNewPageIndex = function (pageIndex) {
        return Math.max(0, pageIndex - 1);
    };
    GoToStartPrevPageCommand.prototype.setNewSelection = function (newPosition) {
        this.selection.deprecatedSetSelection(newPosition, newPosition, false, -1, true, true, true, model_scroll_manager_1.ModelScrollManager.DontChangeScrollPosition);
    };
    return GoToStartPrevPageCommand;
}(GoToStartPageCommandBase));
exports.GoToStartPrevPageCommand = GoToStartPrevPageCommand;
var ExtendGoToStartNextPageCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToStartNextPageCommand, _super);
    function ExtendGoToStartNextPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToStartNextPageCommand.prototype.setNewSelection = function (position) {
        this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); });
    };
    return ExtendGoToStartNextPageCommand;
}(GoToStartNextPageCommand));
exports.ExtendGoToStartNextPageCommand = ExtendGoToStartNextPageCommand;
var ExtendGoToStartPrevPageCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToStartPrevPageCommand, _super);
    function ExtendGoToStartPrevPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToStartPrevPageCommand.prototype.setNewSelection = function (position) {
        this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); });
    };
    return ExtendGoToStartPrevPageCommand;
}(GoToStartPrevPageCommand));
exports.ExtendGoToStartPrevPageCommand = ExtendGoToStartPrevPageCommand;
