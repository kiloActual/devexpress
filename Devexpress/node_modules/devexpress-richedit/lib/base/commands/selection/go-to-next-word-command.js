"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var go_to_next_character_command_1 = require("./go-to-next-character-command");
var GoToNextWordCommandBase = (function (_super) {
    tslib_1.__extends(GoToNextWordCommandBase, _super);
    function GoToNextWordCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToNextWordCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    GoToNextWordCommandBase.prototype.getStartPosition = function () {
        var selection = this.selection;
        return selection.forwardDirection ? selection.lastSelectedInterval.end : selection.lastSelectedInterval.start;
    };
    GoToNextWordCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return GoToNextWordCommandBase;
}(command_base_1.CommandBase));
exports.GoToNextWordCommandBase = GoToNextWordCommandBase;
var GoToNextWordCommand = (function (_super) {
    tslib_1.__extends(GoToNextWordCommand, _super);
    function GoToNextWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToNextWordCommand.prototype.executeCore = function (_state, _options) {
        var selection = this.selection;
        var subDocument = this.selection.activeSubDocument;
        var position = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(this.control.layout, subDocument, selection, this.getStartPosition(), true);
        if (position == subDocument.getDocumentEndPosition())
            position--;
        selection.deprecatedSetSelection(position, position, false, selection.keepX, true);
        return true;
    };
    return GoToNextWordCommand;
}(GoToNextWordCommandBase));
exports.GoToNextWordCommand = GoToNextWordCommand;
var ExtendGoToNextWordCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToNextWordCommand, _super);
    function ExtendGoToNextWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToNextWordCommand.prototype.executeCore = function (_state, _options) {
        var position = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(this.control.layout, this.selection.activeSubDocument, this.selection, this.getStartPosition(), true);
        if (!this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); }))
            go_to_next_character_command_1.ExtendGoToNextCharacterCommand.jumpThroughFieldToRight(this.selection);
        return true;
    };
    return ExtendGoToNextWordCommand;
}(GoToNextWordCommandBase));
exports.ExtendGoToNextWordCommand = ExtendGoToNextWordCommand;
