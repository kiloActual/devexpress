"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_point_1 = require("../../../core/layout/layout-point");
var selection_command_base_1 = require("./selection-command-base");
var GoToPrevPageCommandBase = (function (_super) {
    tslib_1.__extends(GoToPrevPageCommandBase, _super);
    function GoToPrevPageCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevPageCommandBase.prototype.getPosition = function () {
        var selection = this.selection;
        var initPosition = selection.forwardDirection ? selection.lastSelectedInterval.end : selection.lastSelectedInterval.start;
        var layoutPosition = new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, this.selection.activeSubDocument, initPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        if (!layoutPosition)
            return -1;
        var charOffset = initPosition - layoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Box);
        var x = layoutPosition.pageArea.x + layoutPosition.column.x + layoutPosition.row.x + layoutPosition.box.x + layoutPosition.box.getCharOffsetXInPixels(this.control.measurer, charOffset);
        var y = layoutPosition.pageArea.y + layoutPosition.column.y + layoutPosition.row.y + layoutPosition.box.y;
        var siblingPageIndex = layoutPosition.pageIndex - 1;
        var siblingPage = this.control.layout.pages[siblingPageIndex];
        var position = initPosition;
        if (siblingPage) {
            var point = new layout_point_1.LayoutPoint(siblingPageIndex, x, y);
            var htr = this.control.hitTestManager.calculate(point, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.selection.activeSubDocument);
            if (!this.extendSelection())
                htr.correctAsVisibleBox();
            position = htr.getPosition();
        }
        else
            position = 0;
        return position;
    };
    GoToPrevPageCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.selection.activeSubDocument.isMain();
    };
    return GoToPrevPageCommandBase;
}(selection_command_base_1.SelectionCommandBase));
exports.GoToPrevPageCommandBase = GoToPrevPageCommandBase;
var GoToPrevPageCommand = (function (_super) {
    tslib_1.__extends(GoToPrevPageCommand, _super);
    function GoToPrevPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevPageCommand.prototype.executeCore = function (_state, _options) {
        var selection = this.selection;
        var position = this.getPosition();
        if (position < 0)
            return false;
        selection.deprecatedSetSelection(position, position, selection.endOfLine, selection.keepX, true);
        return true;
    };
    GoToPrevPageCommand.prototype.extendSelection = function () {
        return false;
    };
    return GoToPrevPageCommand;
}(GoToPrevPageCommandBase));
exports.GoToPrevPageCommand = GoToPrevPageCommand;
var ExtendGoToPrevPageCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToPrevPageCommand, _super);
    function ExtendGoToPrevPageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToPrevPageCommand.prototype.executeCore = function (_state, _options) {
        var position = this.getPosition();
        if (position < 0)
            return false;
        this.selection.changeState(function (newState) { return newState.extendLastInterval(position); });
        return true;
    };
    ExtendGoToPrevPageCommand.prototype.extendSelection = function () {
        return true;
    };
    return ExtendGoToPrevPageCommand;
}(GoToPrevPageCommandBase));
exports.ExtendGoToPrevPageCommand = ExtendGoToPrevPageCommand;
