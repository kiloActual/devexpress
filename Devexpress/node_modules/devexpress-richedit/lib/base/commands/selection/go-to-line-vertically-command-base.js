"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var table_cell_iterator_1 = require("../../../core/layout/table/table-cell-iterator");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var model_states_1 = require("../../scroll/model-states");
var client_command_1 = require("../client-command");
var selection_command_base_1 = require("./selection-command-base");
var GoToLineVerticallyCommandBase = (function (_super) {
    tslib_1.__extends(GoToLineVerticallyCommandBase, _super);
    function GoToLineVerticallyCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToLineVerticallyCommandBase.prototype.extendTableCellsSelection = function () {
        var selectedCells = this.getSelectedCells();
        var isForward = this.selection.forwardDirection;
        var isOneSelectedCell = selectedCells.length == 1 && selectedCells[0].length == 1;
        if (isOneSelectedCell && !selectedCells[0][0].interval.equals(this.selection.lastSelectedInterval))
            return false;
        if (this.selection.tableInfo.extendedData.areCellsSelectedInSeries) {
            var table = selectedCells[0][0].parentRow.parentTable;
            var currentRow_1 = this.getCurrentTableRow(selectedCells);
            var currentRowIndex = search_1.SearchUtils.binaryIndexOf(table.rows, function (row) { return row.getStartPosition() - currentRow_1.getStartPosition(); });
            if (this.checkTableRowIndex(currentRowIndex, table.rows.length)) {
                var nextRow = this.getNextTableRow(table, currentRowIndex);
                var firstSelectedCell = selectedCells[0][0];
                var lastSelectedCell = selectedCells[selectedCells.length - 1][selectedCells[selectedCells.length - 1].length - 1];
                return this.performTableCellsSelection(isForward, selectedCells, nextRow, firstSelectedCell, lastSelectedCell);
            }
            this.performSelectionOnTheLastTableRow(isForward, selectedCells);
        }
        return false;
    };
    GoToLineVerticallyCommandBase.prototype.getSelectedCells = function () {
        var selectedCells = list_1.ListUtils.map(this.selection.tableInfo.rawData.rows, function (rowInfo) { return list_1.ListUtils.map(rowInfo.cells, function (cellInfo) { return cellInfo.cell; }); });
        var position = layout_position_creator_1.LayoutPositionMainSubDocumentCreator.createLightLayoutPosition(this.control.layout, this.selection.activeSubDocument, this.getInitialSelectionEndPosition(), this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, true, false);
        if (!selectedCells.length && position.row.tableCellInfo) {
            var modelTable = position.row.tableCellInfo.parentRow.parentTable.logicInfo.grid.table;
            var modelRowIndex = position.row.tableCellInfo.parentRow.rowIndex;
            selectedCells = [];
            for (var i = 0; i <= modelRowIndex; i++)
                selectedCells.push(modelTable.rows[i].cells);
        }
        return selectedCells;
    };
    GoToLineVerticallyCommandBase.prototype.getLogPositionByX = function (layoutPosition, x) {
        var newLayoutPosition = layoutPosition.clone();
        var xOffsetBoxLevel = Math.max(0, x - (newLayoutPosition.page.x + newLayoutPosition.pageArea.x + newLayoutPosition.column.x + newLayoutPosition.row.x));
        var boxIndex = search_1.SearchUtils.normedInterpolationIndexOf(newLayoutPosition.row.boxes, function (b) { return b.x; }, xOffsetBoxLevel);
        if (boxIndex < 0)
            boxIndex = 0;
        newLayoutPosition.box = newLayoutPosition.row.boxes[boxIndex];
        var isNoVisibleBoxesInRow = false;
        if (!newLayoutPosition.box.isVisible()) {
            var lastVisibleBoxIndexInRow = newLayoutPosition.row.getLastVisibleBoxIndex();
            if (lastVisibleBoxIndexInRow < 0) {
                lastVisibleBoxIndexInRow = 0;
                isNoVisibleBoxesInRow = true;
            }
            newLayoutPosition.boxIndex = lastVisibleBoxIndexInRow;
            newLayoutPosition.box = newLayoutPosition.row.boxes[lastVisibleBoxIndexInRow];
        }
        var xOffsetCharLevel = isNoVisibleBoxesInRow ? 0 : xOffsetBoxLevel - newLayoutPosition.box.x;
        return newLayoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Box) + newLayoutPosition.box.calculateCharOffsetByPointX(this.control.measurer, xOffsetCharLevel);
    };
    GoToLineVerticallyCommandBase.prototype.isEndOfLine = function (layoutPosition, position) {
        return position === layoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row) + layoutPosition.row.getLastBoxEndPositionInRow();
    };
    GoToLineVerticallyCommandBase.prototype.selectTableCellsRange = function (parameters) {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectTableCellsRange).execute(this.control.commandManager.isPublicApiCall, parameters);
    };
    GoToLineVerticallyCommandBase.prototype.executeCore = function (_state, _options) {
        var _this = this;
        if (this.canGoToNextTableRow() && this.extendTableCellsSelection())
            return true;
        var selection = this.selection;
        var layout = this.control.layout;
        var initialSelectionEndPosition = this.getInitialSelectionEndPosition();
        var subDocument = this.selection.activeSubDocument;
        var initialLayoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, initialSelectionEndPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, initialSelectionEndPosition, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.isCollapsed() ? selection.endOfLine : !this.selection.forwardDirection), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        if (!initialLayoutPosition)
            return false;
        var keepX = selection.keepX;
        if (keepX < 0)
            keepX = initialLayoutPosition.page.x + initialLayoutPosition.pageArea.x + initialLayoutPosition.column.x + initialLayoutPosition.row.x + initialLayoutPosition.box.x +
                initialLayoutPosition.box.getCharOffsetXInPixels(this.control.measurer, initialLayoutPosition.charOffset);
        var newLayoutPosition;
        var cellIterator = new table_cell_iterator_1.TableCellIterator(initialLayoutPosition, layout, this.control.measurer);
        if (this.canAdvanceToNextRow(cellIterator))
            newLayoutPosition = cellIterator.getModifyPosition();
        else {
            var currentPosition = initialLayoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Character);
            newLayoutPosition = this.getNewLayoutPositionRowLevel(initialLayoutPosition);
            if (newLayoutPosition && this.extendSelection()) {
                var isEdgeDocumentPosition = currentPosition == 0 || currentPosition == subDocument.getDocumentEndPosition();
                var needKeepCurrentLine = isEdgeDocumentPosition && currentPosition != this.getLogPositionByX(initialLayoutPosition, keepX);
                if (needKeepCurrentLine)
                    newLayoutPosition = initialLayoutPosition.clone();
            }
            else if (!newLayoutPosition) {
                var edgeLinePosition = this.getPositionForEdgeLine(initialLayoutPosition);
                if (this.extendSelection() && currentPosition != edgeLinePosition) {
                    this.selection.changeState(function (newState) { return newState.extendLastInterval(edgeLinePosition).setKeepX(keepX)
                        .setEndOfLine(_this.isEndOfLine(initialLayoutPosition, edgeLinePosition)); });
                    return true;
                }
                else if (!this.extendSelection()) {
                    var lastInterval = selection.lastSelectedInterval;
                    if (lastInterval && lastInterval.length > 0)
                        selection.deprecatedSetSelection(edgeLinePosition, edgeLinePosition, this.isEndOfLine(initialLayoutPosition, edgeLinePosition), keepX, true);
                }
                return false;
            }
        }
        var newLogPosition = this.getLogPositionByX(newLayoutPosition, keepX);
        if (newLogPosition == initialLayoutPosition.getLogPosition())
            return false;
        var endOfLine = this.isEndOfLine(newLayoutPosition, newLogPosition);
        if (this.extendSelection()) {
            this.selection.changeState(function (newState) { return newState.extendLastInterval(newLogPosition).setKeepX(keepX).setEndOfLine(endOfLine); });
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState()
                .byModelPosition(this.selection)
                .setModelPosition(newLogPosition)
                .useStdRelativePosition()
                .useStdOffset());
        }
        else
            selection.deprecatedSetSelection(newLogPosition, newLogPosition, endOfLine, keepX, true);
        return true;
    };
    GoToLineVerticallyCommandBase.prototype.canGoToNextTableRow = function () {
        return false;
    };
    GoToLineVerticallyCommandBase.prototype.checkTableRowIndex = function (_rowIndex, _length) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    GoToLineVerticallyCommandBase.prototype.getCurrentTableRow = function (_selectedCells) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    GoToLineVerticallyCommandBase.prototype.getNextTableRow = function (_table, _rowIndex) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    GoToLineVerticallyCommandBase.prototype.performTableCellsSelection = function (_isForward, _selectedCells, _nextRow, _firstCell, _lastCell) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    GoToLineVerticallyCommandBase.prototype.performSelectionOnTheLastTableRow = function (_isForward, _selectedCells) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    return GoToLineVerticallyCommandBase;
}(selection_command_base_1.SelectionCommandBase));
exports.GoToLineVerticallyCommandBase = GoToLineVerticallyCommandBase;
