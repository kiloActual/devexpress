"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var model_scroll_manager_1 = require("../../scroll/model-scroll-manager");
var control_1 = require("../../../core/model/options/control");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var model_states_1 = require("../../scroll/model-states");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var SelectTableCommandBase = (function (_super) {
    tslib_1.__extends(SelectTableCommandBase, _super);
    function SelectTableCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableCommandBase.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.selection.tableInfo.extendedData.numRows > 0;
        return state;
    };
    SelectTableCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables);
    };
    SelectTableCommandBase.prototype.addSelection = function (firstPos, lastPos, isFirstSelection, visibleModelPosition) {
        if (visibleModelPosition === void 0) { visibleModelPosition = model_scroll_manager_1.ModelScrollManager.StandartScrollPosition; }
        if (isFirstSelection)
            this.selection.deprecatedSetSelection(firstPos, lastPos, false, -1, true, true, false, visibleModelPosition);
        else {
            this.selection.changeState(function (newState) { return newState.addInterval(fixed_1.FixedInterval.fromPositions(firstPos, lastPos))
                .resetKeepX().setEndOfLine(false); });
            if (visibleModelPosition !== model_scroll_manager_1.ModelScrollManager.DontChangeScrollPosition) {
                this.selection.scrollManager.setScroll(new model_states_1.ScrollState()
                    .byModelPosition(this.selection)
                    .setModelPosition(lastPos)
                    .useStdRelativePosition()
                    .useStdOffset());
            }
        }
    };
    SelectTableCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return SelectTableCommandBase;
}(command_base_1.CommandBase));
exports.SelectTableCommandBase = SelectTableCommandBase;
var SelectTableCellCommand = (function (_super) {
    tslib_1.__extends(SelectTableCellCommand, _super);
    function SelectTableCellCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableCellCommand.prototype.executeCore = function (_state, _options) {
        var _this = this;
        var tableInfo = this.selection.tableInfo;
        var isFirstCell = true;
        tableInfo.extendedData.foreach(function () { }, function (cellInfo) {
            var firstPos = cellInfo.cell.startParagraphPosition.value;
            var lastPos = cellInfo.cell.endParagrapPosition.value;
            _this.addSelection(firstPos, lastPos, isFirstCell);
            isFirstCell = false;
        });
        return true;
    };
    return SelectTableCellCommand;
}(SelectTableCommandBase));
exports.SelectTableCellCommand = SelectTableCellCommand;
var ExtendSelectTableCellCommand = (function (_super) {
    tslib_1.__extends(ExtendSelectTableCellCommand, _super);
    function ExtendSelectTableCellCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendSelectTableCellCommand.prototype.addSelection = function (firstPos, lastPos, _isFirstSelection) {
        this.selection.changeState(function (newState) { return newState.addInterval(fixed_1.FixedInterval.fromPositions(firstPos, lastPos))
            .resetKeepX().setEndOfLine(false); });
    };
    return ExtendSelectTableCellCommand;
}(SelectTableCellCommand));
exports.ExtendSelectTableCellCommand = ExtendSelectTableCellCommand;
var SelectTableColumnCommand = (function (_super) {
    tslib_1.__extends(SelectTableColumnCommand, _super);
    function SelectTableColumnCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableColumnCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        if (parameter)
            return parameter;
        var columnIndices = [];
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        var columnIndicesMap = {};
        tableInfo.extendedData.foreach(function () { }, function (cellInfo, rowInfo) {
            var startColumnIndex = tableInfo.gridInfoManager.tableCellInfos[rowInfo.rowIndex][cellInfo.cellIndex].getGridCellIndex();
            for (var span = 0; span < cellInfo.cell.columnSpan; span++) {
                var columnIndex = startColumnIndex + span;
                if (!columnIndicesMap[columnIndex]) {
                    columnIndices.push(columnIndex);
                    columnIndicesMap[columnIndex] = true;
                }
            }
        });
        return { table: table, columnIndices: columnIndices };
    };
    SelectTableColumnCommand.prototype.executeCore = function (_state, options) {
        var table = options.param.table;
        var columnIndices = options.param.columnIndices;
        var isFirstItem = true;
        var prevAddedCell = null;
        for (var i = 0, columnIndex = void 0; (columnIndex = columnIndices[i]) !== undefined; i++) {
            for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
                var cellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(row, columnIndex);
                var cell = row.cells[cellIndex];
                if (cell && prevAddedCell !== cell) {
                    var firstPos = cell.startParagraphPosition.value;
                    var lastPos = cell.endParagrapPosition.value;
                    this.addSelection(firstPos, lastPos, isFirstItem, model_scroll_manager_1.ModelScrollManager.DontChangeScrollPosition);
                    isFirstItem = false;
                }
                prevAddedCell = cell;
            }
        }
        return true;
    };
    return SelectTableColumnCommand;
}(SelectTableCommandBase));
exports.SelectTableColumnCommand = SelectTableColumnCommand;
var ExtendSelectTableColumnCommand = (function (_super) {
    tslib_1.__extends(ExtendSelectTableColumnCommand, _super);
    function ExtendSelectTableColumnCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendSelectTableColumnCommand.prototype.addSelection = function (firstPos, lastPos, _isFirstSelection) {
        this.selection.changeState(function (newState) { return newState.addInterval(fixed_1.FixedInterval.fromPositions(firstPos, lastPos))
            .resetKeepX().setEndOfLine(false); });
    };
    return ExtendSelectTableColumnCommand;
}(SelectTableColumnCommand));
exports.ExtendSelectTableColumnCommand = ExtendSelectTableColumnCommand;
var SelectTableRowCommandOptions = (function (_super) {
    tslib_1.__extends(SelectTableRowCommandOptions, _super);
    function SelectTableRowCommandOptions(control, table, rowIndices, forwardDirection) {
        var _this = _super.call(this, control) || this;
        if (table) {
            _this.forwardDirection = forwardDirection;
            _this.rows = list_1.ListUtils.map(rowIndices, function (rowIndex) { return table.rows[rowIndex]; });
        }
        else {
            _this.forwardDirection = control.selection.forwardDirection;
            _this.rows = list_1.ListUtils.map(control.selection.tableInfo.extendedData.rows, function (rowInfo) { return rowInfo.row; });
        }
        return _this;
    }
    return SelectTableRowCommandOptions;
}(command_base_1.CommandOptions));
exports.SelectTableRowCommandOptions = SelectTableRowCommandOptions;
var SelectTableRowCommand = (function (_super) {
    tslib_1.__extends(SelectTableRowCommand, _super);
    function SelectTableRowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableRowCommand.prototype.executeCore = function (_state, options) {
        if (!options.isSetManually) {
            options = new SelectTableRowCommandOptions(this.control, null, [], false);
        }
        for (var i = 0, row = void 0; row = options.rows[i]; i++)
            this.addSelection(options.forwardDirection ? row.getStartPosition() : row.getEndPosition(), options.forwardDirection ? row.getEndPosition() : row.getStartPosition(), i === 0);
        return true;
    };
    return SelectTableRowCommand;
}(SelectTableCommandBase));
exports.SelectTableRowCommand = SelectTableRowCommand;
var ExtendSelectTableRowCommand = (function (_super) {
    tslib_1.__extends(ExtendSelectTableRowCommand, _super);
    function ExtendSelectTableRowCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendSelectTableRowCommand.prototype.addSelection = function (firstPos, lastPos, _isFirstSelection) {
        this.selection.changeState(function (newState) { return newState.addInterval(fixed_1.FixedInterval.fromPositions(firstPos, lastPos))
            .resetKeepX().setEndOfLine(false); });
    };
    return ExtendSelectTableRowCommand;
}(SelectTableRowCommand));
exports.ExtendSelectTableRowCommand = ExtendSelectTableRowCommand;
var SelectTableCommand = (function (_super) {
    tslib_1.__extends(SelectTableCommand, _super);
    function SelectTableCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableCommand.prototype.executeCore = function (_state) {
        var table = table_1.Table.getTableByPosition(this.selection.activeSubDocument.tables, this.selection.intervals[0].start, true);
        var firstPos = table.getFirstCell().startParagraphPosition.value;
        var lastPos = table.getLastCell().endParagrapPosition.value;
        this.addSelection(firstPos, lastPos, true);
        return true;
    };
    return SelectTableCommand;
}(SelectTableCommandBase));
exports.SelectTableCommand = SelectTableCommand;
var ExtendSelectTableCommand = (function (_super) {
    tslib_1.__extends(ExtendSelectTableCommand, _super);
    function ExtendSelectTableCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendSelectTableCommand.prototype.addSelection = function (firstPos, lastPos, _isFirstSelection) {
        this.selection.changeState(function (newState) { return newState.addInterval(fixed_1.FixedInterval.fromPositions(firstPos, lastPos))
            .resetKeepX().setEndOfLine(false); });
    };
    return ExtendSelectTableCommand;
}(SelectTableCommand));
exports.ExtendSelectTableCommand = ExtendSelectTableCommand;
var SelectTableCellsRangeCommand = (function (_super) {
    tslib_1.__extends(SelectTableCellsRangeCommand, _super);
    function SelectTableCellsRangeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectTableCellsRangeCommand.prototype.executeCore = function (_state, options) {
        var parameter = options.param;
        var forwardDirection = parameter.firstCell.startParagraphPosition.value <= parameter.lastCell.startParagraphPosition.value;
        if (parameter.lastCell.parentRow.parentTable !== parameter.firstCell.parentRow.parentTable)
            throw new Error("cells should be from the same table");
        var table = parameter.firstCell.parentRow.parentTable;
        var startColumnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(parameter.firstCell);
        var endColumnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(parameter.lastCell);
        var minColumnIndex = Math.min(startColumnIndex, endColumnIndex);
        var maxColumnIndex = Math.max(startColumnIndex + parameter.firstCell.columnSpan - 1, endColumnIndex + parameter.lastCell.columnSpan - 1);
        var startRowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, parameter.firstCell.startParagraphPosition.value);
        var endRowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, parameter.lastCell.startParagraphPosition.value);
        var minRowIndex = Math.min(startRowIndex, endRowIndex);
        var maxRowIndex = Math.max(startRowIndex, endRowIndex);
        var isFirstSelection = true;
        for (var rowIndex = minRowIndex; rowIndex <= maxRowIndex; rowIndex++) {
            var row = table.rows[rowIndex];
            var columnIndex = Math.max(row.gridBefore, minColumnIndex);
            if (columnIndex > maxColumnIndex)
                continue;
            var cellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(row, columnIndex);
            while (columnIndex <= maxColumnIndex) {
                var cell = row.cells[cellIndex];
                if (!cell)
                    break;
                this.addSelection(forwardDirection ? cell.startParagraphPosition.value : cell.endParagrapPosition.value, forwardDirection ? cell.endParagrapPosition.value : cell.startParagraphPosition.value, isFirstSelection && !parameter.extendSelection);
                isFirstSelection = false;
                columnIndex += cell.columnSpan;
                cellIndex++;
            }
        }
        return true;
    };
    return SelectTableCellsRangeCommand;
}(SelectTableCommandBase));
exports.SelectTableCellsRangeCommand = SelectTableCellsRangeCommand;
