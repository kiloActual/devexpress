"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var field_1 = require("../../../core/model/fields/field");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var selection_command_base_1 = require("./selection-command-base");
var GoToPrevCharacterCommandBase = (function (_super) {
    tslib_1.__extends(GoToPrevCharacterCommandBase, _super);
    function GoToPrevCharacterCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevCharacterCommandBase.prototype.executeCore = function (_state, _options) {
        var position = this.getPosition();
        if (position == -1)
            return false;
        this.setSelection(position);
        return true;
    };
    GoToPrevCharacterCommandBase.prototype.getPosition = function () {
        var selection = this.selection;
        var subDocument = this.selection.activeSubDocument;
        var initialModelPosition = selection.forwardDirection ? selection.lastSelectedInterval.end : selection.lastSelectedInterval.start;
        var initialLayoutPosition = subDocument.isMain()
            ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, initialModelPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false))
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, initialModelPosition, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        var prevCharLayoutPosition;
        if (this.extendSelection()) {
            prevCharLayoutPosition = this.getPrevCharacterPosition(initialLayoutPosition);
        }
        else {
            if (!selection.isCollapsed()) {
                if (selection.forwardDirection) {
                    var selectionEndPosition = selection.lastSelectedInterval.start;
                    return (subDocument.isMain()
                        ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, selectionEndPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true))
                        : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, selectionEndPosition, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true))).getLogPosition();
                }
                else
                    return initialLayoutPosition.getLogPosition();
            }
            prevCharLayoutPosition = this.getPrevCharacterPosition(initialLayoutPosition);
            if (!prevCharLayoutPosition.box.isVisible() && !prevCharLayoutPosition.isPositionBeforeFirstBoxInRow()) {
                do {
                    var prevLP = prevCharLayoutPosition;
                    prevCharLayoutPosition = this.getPrevCharacterPosition(prevCharLayoutPosition);
                } while (!prevCharLayoutPosition.box.isVisible() && prevLP !== prevCharLayoutPosition);
                prevCharLayoutPosition = prevLP;
            }
        }
        var prevCharModelPosition = Math.min(initialModelPosition, prevCharLayoutPosition.getLogPosition());
        return prevCharModelPosition == initialModelPosition ? -1 : prevCharModelPosition;
    };
    GoToPrevCharacterCommandBase.prototype.getPrevCharacterPosition = function (layoutPosition) {
        var prevLayoutPosition = layoutPosition.clone();
        if (prevLayoutPosition.charOffset > 0) {
            prevLayoutPosition.charOffset--;
            return prevLayoutPosition;
        }
        if (prevLayoutPosition.boxIndex - 1 >= 0) {
            prevLayoutPosition.boxIndex--;
            prevLayoutPosition.box = prevLayoutPosition.row.boxes[prevLayoutPosition.boxIndex];
            prevLayoutPosition.charOffset = prevLayoutPosition.box.getLength() - 1;
            return prevLayoutPosition;
        }
        if (prevLayoutPosition.advanceToPrevRow(this.control.layout)) {
            prevLayoutPosition.boxIndex = prevLayoutPosition.row.boxes.length - 1;
            prevLayoutPosition.box = prevLayoutPosition.row.boxes[prevLayoutPosition.boxIndex];
            prevLayoutPosition.charOffset = prevLayoutPosition.box.getLength() - 1;
            return prevLayoutPosition;
        }
        else
            return layoutPosition;
    };
    return GoToPrevCharacterCommandBase;
}(selection_command_base_1.SelectionCommandBase));
exports.GoToPrevCharacterCommandBase = GoToPrevCharacterCommandBase;
var GoToPrevCharacterCommand = (function (_super) {
    tslib_1.__extends(GoToPrevCharacterCommand, _super);
    function GoToPrevCharacterCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevCharacterCommand.prototype.setSelection = function (position) {
        this.selection.deprecatedSetSelection(position, position, false, -1, true);
    };
    GoToPrevCharacterCommand.prototype.extendSelection = function () {
        return false;
    };
    return GoToPrevCharacterCommand;
}(GoToPrevCharacterCommandBase));
exports.GoToPrevCharacterCommand = GoToPrevCharacterCommand;
var ExtendGoToPrevCharacterCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToPrevCharacterCommand, _super);
    function ExtendGoToPrevCharacterCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToPrevCharacterCommand.prototype.setSelection = function (position) {
        if (!this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); }))
            ExtendGoToPrevCharacterCommand.jumpThroughFieldToLeft(this.selection);
    };
    ExtendGoToPrevCharacterCommand.prototype.extendSelection = function () {
        return true;
    };
    ExtendGoToPrevCharacterCommand.prototype.executeCore = function (state, options) {
        var selection = this.selection;
        var tableInfo = selection.tableInfo;
        var rawTblInfo = tableInfo.rawData;
        var canSelectCell = tableInfo.isSelected && rawTblInfo.areCellsSelectedInSeries &&
            rawTblInfo.atLeastOneCellFullySelected(selection.intervals);
        if (!canSelectCell)
            return _super.prototype.executeCore.call(this, state, options);
        var forward = selection.forwardDirection || rawTblInfo.firstRowInfo.cells.length == 1;
        var lastRow = forward ? rawTblInfo.lastRowInfo : rawTblInfo.firstRowInfo;
        var cell = lastRow.row[(forward ? list_1.ListUtils.last(lastRow.cells) : lastRow.cells[0]).cellIndex - 1];
        if (cell) {
            return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectTableCellsRange).execute(this.control.commandManager.isPublicApiCall, forward ? {
                firstCell: rawTblInfo.firstCell,
                lastCell: cell
            } : {
                firstCell: rawTblInfo.lastCell,
                lastCell: cell
            });
        }
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ExtendLineUp).execute(this.control.commandManager.isPublicApiCall);
    };
    ExtendGoToPrevCharacterCommand.jumpThroughFieldToLeft = function (selection) {
        var fields = selection.activeSubDocument.fields;
        if (fields.length == 0 || !selection.forwardDirection)
            return;
        var interval = selection.lastSelectedInterval;
        var position = interval.end;
        var field = fields[Math.max(0, field_1.Field.normedBinaryIndexOf(fields, position))];
        if (field.getFieldEndPosition() == position)
            selection.changeState(function (newState) { return newState.extendLastInterval(field.getFieldStartPosition()).resetKeepX().setEndOfLine(false); });
    };
    return ExtendGoToPrevCharacterCommand;
}(GoToPrevCharacterCommandBase));
exports.ExtendGoToPrevCharacterCommand = ExtendGoToPrevCharacterCommand;
