"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var search_1 = require("@devexpress/utils/lib/utils/search");
var go_to_line_vertically_command_base_1 = require("./go-to-line-vertically-command-base");
var LineDownCommand = (function (_super) {
    tslib_1.__extends(LineDownCommand, _super);
    function LineDownCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineDownCommand.prototype.extendSelection = function () {
        return false;
    };
    LineDownCommand.prototype.getPositionForEdgeLine = function (_layoutPosition) {
        var lastIntervalEnd = this.selection.lastSelectedInterval.end;
        if (this.selection.activeSubDocument.getDocumentEndPosition() == lastIntervalEnd)
            lastIntervalEnd--;
        return lastIntervalEnd;
    };
    LineDownCommand.prototype.canAdvanceToNextRow = function (cellIterator) {
        return cellIterator.tryAdvanceToBelowRow();
    };
    LineDownCommand.prototype.getNewLayoutPositionRowLevel = function (oldLayoutPosition) {
        var newLayoutPosition = oldLayoutPosition.clone();
        if (newLayoutPosition.advanceToNextRow(this.control.layout))
            return newLayoutPosition;
        return null;
    };
    LineDownCommand.prototype.getInitialSelectionEndPosition = function () {
        if (this.extendSelection() && !this.selection.forwardDirection)
            return this.selection.lastSelectedInterval.start;
        else
            return this.selection.lastSelectedInterval.end;
    };
    return LineDownCommand;
}(go_to_line_vertically_command_base_1.GoToLineVerticallyCommandBase));
exports.LineDownCommand = LineDownCommand;
var ExtendLineDownCommand = (function (_super) {
    tslib_1.__extends(ExtendLineDownCommand, _super);
    function ExtendLineDownCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendLineDownCommand.prototype.extendSelection = function () {
        return true;
    };
    ExtendLineDownCommand.prototype.getPositionForEdgeLine = function (layoutPosition) {
        return layoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row) + layoutPosition.row.getLastBoxEndPositionInRow();
    };
    ExtendLineDownCommand.prototype.canAdvanceToNextRow = function (_cellIterator) {
        return false;
    };
    ExtendLineDownCommand.prototype.canGoToNextTableRow = function () {
        return true;
    };
    ExtendLineDownCommand.prototype.getCurrentTableRow = function (selectedCells) {
        return this.selection.forwardDirection ? selectedCells[selectedCells.length - 1][0].parentRow : selectedCells[0][0].parentRow;
    };
    ExtendLineDownCommand.prototype.checkTableRowIndex = function (rowIndex, length) {
        if (length === void 0) { length = 0; }
        return rowIndex > -1 && rowIndex < length - 1;
    };
    ExtendLineDownCommand.prototype.getNextTableRow = function (table, rowIndex) {
        return table.rows[rowIndex + 1];
    };
    ExtendLineDownCommand.prototype.performTableCellsSelection = function (isForward, selectedCells, nextRow, firstCell, lastCell) {
        var lastSelectedCell = isForward ? lastCell : firstCell;
        var lastSelectedCellcolumnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(lastSelectedCell);
        var lastCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(nextRow, lastSelectedCellcolumnIndex);
        var parameter = {};
        parameter.firstCell = isForward ? selectedCells[0][0] : selectedCells[selectedCells.length - 1][selectedCells[selectedCells.length - 1].length - 1];
        parameter.lastCell = nextRow.cells[lastCellIndex];
        return this.selectTableCellsRange(parameter);
    };
    ExtendLineDownCommand.prototype.performSelectionOnTheLastTableRow = function (isForward, selectedCells) {
        if (isForward) {
            var table = selectedCells[0][0].parentRow.parentTable;
            var currentIndexRow = search_1.SearchUtils.binaryIndexOf(table.rows, function (row) { return row.getStartPosition() - selectedCells[0][0].parentRow.getStartPosition(); });
            this.selectTableCellsRange({
                firstCell: table.rows[currentIndexRow].cells[0],
                lastCell: table.rows[table.rows.length - 1].cells[table.rows[table.rows.length - 1].cells.length - 1]
            });
        }
    };
    return ExtendLineDownCommand;
}(LineDownCommand));
exports.ExtendLineDownCommand = ExtendLineDownCommand;
