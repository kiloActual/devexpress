"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var GoToDocumentEndCommandBase = (function (_super) {
    tslib_1.__extends(GoToDocumentEndCommandBase, _super);
    function GoToDocumentEndCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToDocumentEndCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    GoToDocumentEndCommandBase.prototype.executeCore = function (_state, _options) {
        this.control.layoutFormatterManager.formatSyncAllDocument();
        var subDocument = this.selection.activeSubDocument;
        var layout = this.control.layout;
        var lastPage = subDocument.isMain() ? layout.getLastValidPage() : layout.pages[this.selection.pageIndex];
        if (!this.extendSelection()) {
            var pageAreas = lastPage.mainSubDocumentPageAreas;
            var lastPageArea = pageAreas[pageAreas.length - 1];
            var lastColumn = lastPageArea.columns[lastPageArea.columns.length - 1];
            var lastRow = lastColumn.rows[lastColumn.rows.length - 1];
            var boxIndex = lastRow.getLastVisibleBoxIndex();
            if (boxIndex >= 0) {
                var box = lastRow.boxes[boxIndex];
                this.setSelection((subDocument.isMain() ? lastPage.getPosition() : 0) + lastPageArea.pageOffset + lastColumn.pageAreaOffset + lastRow.columnOffset + box.getEndPosition());
            }
            else {
                var box = lastRow.boxes[0];
                this.setSelection((subDocument.isMain() ? lastPage.getPosition() : 0) + lastPageArea.pageOffset + lastColumn.pageAreaOffset + lastRow.columnOffset + box.rowOffset);
            }
        }
        else
            this.setSelection(subDocument.isMain() ? lastPage.getEndPosition() : lastPage.otherPageAreas[subDocument.id].getEndPosition());
        return true;
    };
    GoToDocumentEndCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return GoToDocumentEndCommandBase;
}(command_base_1.CommandBase));
exports.GoToDocumentEndCommandBase = GoToDocumentEndCommandBase;
var GoToDocumentEndCommand = (function (_super) {
    tslib_1.__extends(GoToDocumentEndCommand, _super);
    function GoToDocumentEndCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToDocumentEndCommand.prototype.setSelection = function (position) {
        this.selection.deprecatedSetSelection(position, position, false, -1, true);
    };
    GoToDocumentEndCommand.prototype.extendSelection = function () {
        return false;
    };
    return GoToDocumentEndCommand;
}(GoToDocumentEndCommandBase));
exports.GoToDocumentEndCommand = GoToDocumentEndCommand;
var ExtendGoToDocumentEndCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToDocumentEndCommand, _super);
    function ExtendGoToDocumentEndCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToDocumentEndCommand.prototype.setSelection = function (position) {
        this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); });
    };
    ExtendGoToDocumentEndCommand.prototype.extendSelection = function () {
        return true;
    };
    return ExtendGoToDocumentEndCommand;
}(GoToDocumentEndCommandBase));
exports.ExtendGoToDocumentEndCommand = ExtendGoToDocumentEndCommand;
