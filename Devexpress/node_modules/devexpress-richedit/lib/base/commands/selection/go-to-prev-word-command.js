"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var go_to_prev_character_command_1 = require("./go-to-prev-character-command");
var GoToPrevWordCommandBase = (function (_super) {
    tslib_1.__extends(GoToPrevWordCommandBase, _super);
    function GoToPrevWordCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevWordCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    GoToPrevWordCommandBase.prototype.getStartPosition = function () {
        var selection = this.selection;
        return (selection.forwardDirection ? selection.lastSelectedInterval.end : selection.lastSelectedInterval.start);
    };
    GoToPrevWordCommandBase.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    GoToPrevWordCommandBase.prototype.executeCore = function (_state, _options) {
        var selection = this.selection;
        var startPos = this.getStartPosition();
        var subDocument = this.selection.activeSubDocument;
        var layout = this.control.layout;
        var position = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(layout, subDocument, selection, startPos);
        if (position == startPos) {
            position = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(layout, subDocument, selection, position - 1);
        }
        else {
            var leftPosLp = (subDocument.isMain()
                ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(layout, subDocument, startPos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(layout, subDocument, startPos, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Column))
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
            var leftPos = leftPosLp.getLogPosition();
            if (position == leftPos) {
                position = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(layout, subDocument, selection, leftPos - 1);
            }
        }
        this.setSelection(position);
        return true;
    };
    return GoToPrevWordCommandBase;
}(command_base_1.CommandBase));
exports.GoToPrevWordCommandBase = GoToPrevWordCommandBase;
var GoToPrevWordCommand = (function (_super) {
    tslib_1.__extends(GoToPrevWordCommand, _super);
    function GoToPrevWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GoToPrevWordCommand.prototype.setSelection = function (position) {
        var selection = this.selection;
        selection.deprecatedSetSelection(position, position, selection.endOfLine, selection.keepX, true);
    };
    return GoToPrevWordCommand;
}(GoToPrevWordCommandBase));
exports.GoToPrevWordCommand = GoToPrevWordCommand;
var ExtendGoToPrevWordCommand = (function (_super) {
    tslib_1.__extends(ExtendGoToPrevWordCommand, _super);
    function ExtendGoToPrevWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExtendGoToPrevWordCommand.prototype.setSelection = function (position) {
        if (!this.selection.changeState(function (newState) { return newState.extendLastInterval(position).resetKeepX().setEndOfLine(false); }))
            go_to_prev_character_command_1.ExtendGoToPrevCharacterCommand.jumpThroughFieldToLeft(this.selection);
    };
    return ExtendGoToPrevWordCommand;
}(GoToPrevWordCommandBase));
exports.ExtendGoToPrevWordCommand = ExtendGoToPrevWordCommand;
