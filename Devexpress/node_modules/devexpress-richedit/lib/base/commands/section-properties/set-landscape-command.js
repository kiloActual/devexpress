"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var section_property_descriptor_1 = require("../../../core/model/section/section-property-descriptor");
var client_command_1 = require("../client-command");
var change_section_properties_command_base_1 = require("./change-section-properties-command-base");
var SetLandscapePageOrientationCommand = (function (_super) {
    tslib_1.__extends(SetLandscapePageOrientationCommand, _super);
    function SetLandscapePageOrientationCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetLandscapePageOrientationCommand.prototype.getDescriptor = function () {
        return section_property_descriptor_1.SectionPropertyDescriptor.landscape;
    };
    SetLandscapePageOrientationCommand.prototype.DEPRECATEDConvertOptionsParameter = function (_parameter) {
        return this.isLandscape();
    };
    SetLandscapePageOrientationCommand.prototype.getStateValue = function () {
        return this.getCurrentValue() == this.isLandscape();
    };
    SetLandscapePageOrientationCommand.prototype.getRelatedCommands = function () {
        var _a;
        return _a = {},
            _a[client_command_1.RichEditClientCommand.SetLandscapePageOrientation] = true,
            _a[client_command_1.RichEditClientCommand.SetPortraitPageOrientation] = true,
            _a;
    };
    SetLandscapePageOrientationCommand.prototype.executeCore = function (state, options) {
        var history = this.history;
        history.beginTransaction();
        var isExecuted = _super.prototype.executeCore.call(this, state, options);
        if (isExecuted) {
            var props = this.inputPosition.getMergedSectionPropertiesFull();
            var oldPageSize = props.pageSize;
            var iter = this.getAffectedSectionsIterator(options.intervalsInfo.intervals);
            while (iter.moveNext()) {
                history.addAndRedo(new (section_property_descriptor_1.SectionPropertyDescriptor.pageWidth.getHistoryItemConstructor())(this.modelManipulator, iter.obj.interval, oldPageSize.height));
                history.addAndRedo(new (section_property_descriptor_1.SectionPropertyDescriptor.pageHeight.getHistoryItemConstructor())(this.modelManipulator, iter.obj.interval, oldPageSize.width));
            }
        }
        history.endTransaction();
        return isExecuted;
    };
    SetLandscapePageOrientationCommand.prototype.isLandscape = function () {
        return true;
    };
    return SetLandscapePageOrientationCommand;
}(change_section_properties_command_base_1.ChangeSectionPropertiesCommandBase));
exports.SetLandscapePageOrientationCommand = SetLandscapePageOrientationCommand;
var SetPortraitPageOrientationCommand = (function (_super) {
    tslib_1.__extends(SetPortraitPageOrientationCommand, _super);
    function SetPortraitPageOrientationCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SetPortraitPageOrientationCommand.prototype.isLandscape = function () {
        return false;
    };
    return SetPortraitPageOrientationCommand;
}(SetLandscapePageOrientationCommand));
exports.SetPortraitPageOrientationCommand = SetPortraitPageOrientationCommand;
