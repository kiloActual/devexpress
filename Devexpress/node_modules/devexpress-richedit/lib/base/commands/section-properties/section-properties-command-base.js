"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var section_1 = require("../../../core/model/section/section");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var SectionPropertiesCommandBase = (function (_super) {
    tslib_1.__extends(SectionPropertiesCommandBase, _super);
    function SectionPropertiesCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SectionPropertiesCommandBase.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo.intervals = SectionPropertiesCommandBase.getIntervals(this.control, options.subDocument);
    };
    SectionPropertiesCommandBase.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(null); }
        return this.getStateCore(this.isEnabled(options), options.intervalsInfo.intervals, this.getStateValue(options));
    };
    SectionPropertiesCommandBase.prototype.getStateCore = function (enabled, intervals, value) {
        return new command_states_1.IntervalCommandStateEx(enabled, intervals, value);
    };
    SectionPropertiesCommandBase.prototype.isEnabled = function (options) {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.sections) &&
            (!this.control.modelManager.model.isDocumentProtectionEnabled ||
                SectionPropertiesCommandBase.rangePermissionIncludeFullSection(this.control, options.subDocument, options.intervalsInfo.intervals));
    };
    SectionPropertiesCommandBase.prototype.getAffectedSectionsIterator = function (intervals) {
        var sections = this.control.modelManager.model.sections;
        return algorithms_1.IntervalAlgorithms.getAffectedObjects(sections, intervals, undefined, function (objectInterval, touchingIntervalLength, touchPoint) {
            return touchingIntervalLength == 0 && objectInterval.contains(touchPoint);
        })
            .getObjectsIterator(sections);
    };
    SectionPropertiesCommandBase.rangePermissionIncludeFullSection = function (control, subDoc, intervals) {
        if (subDoc.isMain()) {
            var secIndexes_1 = [];
            var currInts = list_1.ListUtils.map(intervals, function (curr) {
                var c = curr.clone();
                if (!c.length)
                    c.length++;
                return c;
            });
            list_1.ListUtils.forEach(currInts, function (currInt) {
                list_1.ListUtils.forEach(control.modelManager.model.sections, function (sec, secInd) {
                    if (algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(sec.interval, currInt))
                        secIndexes_1.push(secInd);
                });
            });
            return control.modelManager.model.mainSubDocument.isEditable(list_1.ListUtils.map(list_1.ListUtils.uniqueNumber(secIndexes_1), function (ind) { return control.modelManager.model.sections[ind].interval; }));
        }
        if (subDoc.isHeaderFooter()) {
            var section = control.modelManager.model.mainSubDocument.getSectionByPosition(control.layoutFormatterManager.forceFormatPage(control.selection.pageIndex).getPosition());
            return control.modelManager.model.mainSubDocument.isEditable([section.interval]);
        }
        if (subDoc.isTextBox()) {
            var selection = control.selection;
            return SectionPropertiesCommandBase.rangePermissionIncludeFullSection(control, selection.specialRunInfo.getParentSubDocument(), [new fixed_1.FixedInterval(selection.specialRunInfo.getPosition(), 1)]);
        }
    };
    SectionPropertiesCommandBase.getIntervals = function (control, subDocument) {
        if (subDocument.isMain() || subDocument.isTextBox())
            return list_1.ListUtils.deepCopy(control.selection.intervalsInfo.intervals);
        else if (subDocument.isHeaderFooter()) {
            var layoutPage = control.layoutFormatterManager.forceFormatPage(control.selection.pageIndex);
            var sectionIndex = section_1.Section.getPageSectionIndex(layoutPage, control.modelManager.model.sections);
            var section = control.modelManager.model.sections[sectionIndex];
            return [new fixed_1.FixedInterval(section.startLogPosition.value, section.getLength())];
        }
        else
            throw new Error("Unknown subDocument type");
    };
    return SectionPropertiesCommandBase;
}(command_base_1.CommandBase));
exports.SectionPropertiesCommandBase = SectionPropertiesCommandBase;
