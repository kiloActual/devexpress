"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var character_properties_history_items_1 = require("../../../core/model/history/items/character-properties-history-items");
var text_run_change_case_history_item_1 = require("../../../core/model/history/items/text-run-change-case-history-item");
var control_1 = require("../../../core/model/options/control");
var sentence_model_builder_1 = require("../../../core/model/sentence-model-builder");
var sub_document_1 = require("../../../core/model/sub-document");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ChangeTextCaseCommandBaseBase = (function (_super) {
    tslib_1.__extends(ChangeTextCaseCommandBaseBase, _super);
    function ChangeTextCaseCommandBaseBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTextCaseCommandBaseBase.prototype.getActualIntervals = function () {
        if (this.selection.isCollapsed())
            return [this.selection.activeSubDocument.getWholeWordInterval(this.selection.intervals[0].start, false, true)];
        return list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals);
    };
    ChangeTextCaseCommandBaseBase.prototype.getState = function () {
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), this.getActualIntervals());
    };
    ChangeTextCaseCommandBaseBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterFormatting);
    };
    return ChangeTextCaseCommandBaseBase;
}(command_base_1.CommandBase));
exports.ChangeTextCaseCommandBaseBase = ChangeTextCaseCommandBaseBase;
var ChangeTextCaseCommandBase = (function (_super) {
    tslib_1.__extends(ChangeTextCaseCommandBase, _super);
    function ChangeTextCaseCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ChangeTextCaseCommandBase.prototype.getActualInterval = function () {
        if (this.selection.isCollapsed())
            return this.selection.activeSubDocument.getWholeWordInterval(this.selection.intervals[0].start, false, true);
        return this.selection.lastSelectedInterval.clone();
    };
    ChangeTextCaseCommandBase.prototype.getState = function () {
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), this.getActualIntervals());
    };
    ChangeTextCaseCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterFormatting);
    };
    ChangeTextCaseCommandBase.prototype.executeCore = function (state, _options) {
        var _this = this;
        if (state.intervals.length === 0 || state.intervals[0].length === 0)
            return false;
        var modelManipulator = this.modelManipulator;
        var subDocument = this.selection.activeSubDocument;
        this.history.addTransaction(function () {
            for (var i = 0, interval = void 0; interval = state.intervals[i]; i++) {
                _this.history.addAndRedo(new (_this.getHistoryItemName())(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), _this.selection, _this.control.layoutFormatterManager));
                _this.history.addAndRedo(new character_properties_history_items_1.FontCapsHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), false, true));
            }
        });
        return true;
    };
    return ChangeTextCaseCommandBase;
}(ChangeTextCaseCommandBaseBase));
exports.ChangeTextCaseCommandBase = ChangeTextCaseCommandBase;
var CapitalizeEachWordCaseCommand = (function (_super) {
    tslib_1.__extends(CapitalizeEachWordCaseCommand, _super);
    function CapitalizeEachWordCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CapitalizeEachWordCaseCommand.prototype.getHistoryItemName = function () {
        return text_run_change_case_history_item_1.CapitalizeEachWordCaseHistoryItem;
    };
    return CapitalizeEachWordCaseCommand;
}(ChangeTextCaseCommandBase));
exports.CapitalizeEachWordCaseCommand = CapitalizeEachWordCaseCommand;
var MakeTextLowerCaseCommand = (function (_super) {
    tslib_1.__extends(MakeTextLowerCaseCommand, _super);
    function MakeTextLowerCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MakeTextLowerCaseCommand.prototype.getHistoryItemName = function () {
        return text_run_change_case_history_item_1.LowerCaseHistoryItem;
    };
    return MakeTextLowerCaseCommand;
}(ChangeTextCaseCommandBase));
exports.MakeTextLowerCaseCommand = MakeTextLowerCaseCommand;
var MakeTextUpperCaseCommand = (function (_super) {
    tslib_1.__extends(MakeTextUpperCaseCommand, _super);
    function MakeTextUpperCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MakeTextUpperCaseCommand.prototype.getHistoryItemName = function () {
        return text_run_change_case_history_item_1.UpperCaseHistoryItem;
    };
    return MakeTextUpperCaseCommand;
}(ChangeTextCaseCommandBase));
exports.MakeTextUpperCaseCommand = MakeTextUpperCaseCommand;
var ToggleTextCaseCommand = (function (_super) {
    tslib_1.__extends(ToggleTextCaseCommand, _super);
    function ToggleTextCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleTextCaseCommand.prototype.getHistoryItemName = function () {
        return text_run_change_case_history_item_1.ToggleCaseHistoryItem;
    };
    return ToggleTextCaseCommand;
}(ChangeTextCaseCommandBase));
exports.ToggleTextCaseCommand = ToggleTextCaseCommand;
var SentenceCaseCommand = (function (_super) {
    tslib_1.__extends(SentenceCaseCommand, _super);
    function SentenceCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SentenceCaseCommand.prototype.getHistoryItemName = function () {
        return text_run_change_case_history_item_1.SentenceCaseHistoryItem;
    };
    return SentenceCaseCommand;
}(ChangeTextCaseCommandBase));
exports.SentenceCaseCommand = SentenceCaseCommand;
var SwitchTextCaseCommand = (function (_super) {
    tslib_1.__extends(SwitchTextCaseCommand, _super);
    function SwitchTextCaseCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SwitchTextCaseCommand.prototype.executeCore = function (state, options) {
        var executed = false;
        this.history.beginTransaction();
        for (var i = 0, interval = void 0; interval = state.intervals[i]; i++) {
            var commandId = this.getCommand(interval);
            var command = (this.control.commandManager.getCommand(commandId));
            executed = command.executeCore(state, options);
        }
        this.history.endTransaction();
        return executed;
    };
    SwitchTextCaseCommand.prototype.getCommand = function (interval) {
        var sentences = sentence_model_builder_1.SentenceStructureBuilder.getBuilder(this.control.layoutFormatterManager, this.selection, this.selection.activeSubDocument, interval, true).sentences;
        var atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase = false;
        var atLeastOneSentenceFullSelected = false;
        var atLeastOneFirstCharInSentenceInLowerCase = false;
        var atLeastOneFirstCharInWordInLowerCase = false;
        var allNotFirstCharsInWordsIsLowerCase = true;
        var allCharsInUpperCase = true;
        var allFirstCharsInWordsInUpperCase = true;
        externalLoop: for (var sentenceIndex = 0, sentence; sentence = sentences[sentenceIndex]; sentenceIndex++) {
            if (sentence.words[0].parts[0].position >= interval.start && sentence.getLastWord().getLastWordPart().getEndPosition() <= interval.end)
                atLeastOneSentenceFullSelected = true;
            for (var wordIndex = 0, wordInfo; wordInfo = sentence.words[wordIndex]; wordIndex++) {
                for (var wordPartIndex = 0, wordPart; wordPart = wordInfo.parts[wordPartIndex]; wordPartIndex++) {
                    if (wordPart.position < interval.start)
                        continue;
                    if (wordPart.position >= interval.end)
                        break externalLoop;
                    if (wordPart.type == layout_box_1.LayoutBoxType.Text) {
                        var firstWordChar = wordPart.text[0];
                        var otherWordChars = wordPart.text.substr(1);
                        if (wordIndex == 0 && wordPartIndex == 0) {
                            atLeastOneFirstCharInSentenceInLowerCase = atLeastOneFirstCharInSentenceInLowerCase || (string_1.StringUtils.stringInLowerCase(firstWordChar) && !string_1.StringUtils.stringInUpperCase(firstWordChar));
                            atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase = atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase || string_1.StringUtils.atLeastOneSymbolInUpperCase(otherWordChars);
                        }
                        else
                            atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase = atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase || string_1.StringUtils.atLeastOneSymbolInUpperCase(wordPart.text);
                        if (wordPartIndex == 0) {
                            atLeastOneFirstCharInWordInLowerCase = atLeastOneFirstCharInWordInLowerCase || (string_1.StringUtils.stringInLowerCase(firstWordChar) && !string_1.StringUtils.stringInUpperCase(firstWordChar));
                            allFirstCharsInWordsInUpperCase = allFirstCharsInWordsInUpperCase && string_1.StringUtils.stringInUpperCase(firstWordChar);
                        }
                        allNotFirstCharsInWordsIsLowerCase = allNotFirstCharsInWordsIsLowerCase && string_1.StringUtils.stringInLowerCase(otherWordChars);
                        allCharsInUpperCase = allCharsInUpperCase && string_1.StringUtils.stringInUpperCase(wordPart.text);
                    }
                }
            }
        }
        if (allCharsInUpperCase)
            return client_command_1.RichEditClientCommand.MakeTextLowerCase;
        if (allFirstCharsInWordsInUpperCase && allNotFirstCharsInWordsIsLowerCase)
            return client_command_1.RichEditClientCommand.MakeTextUpperCase;
        if (atLeastOneSentenceFullSelected && (atLeastOneFirstCharInSentenceInLowerCase || atLeastOneCharInNotInFirstPositionOnSentenceInUpperCase))
            return client_command_1.RichEditClientCommand.SentenceCase;
        if (atLeastOneFirstCharInWordInLowerCase && allNotFirstCharsInWordsIsLowerCase)
            return client_command_1.RichEditClientCommand.CapitalizeEachWordTextCase;
        return client_command_1.RichEditClientCommand.MakeTextUpperCase;
    };
    return SwitchTextCaseCommand;
}(ChangeTextCaseCommandBaseBase));
exports.SwitchTextCaseCommand = SwitchTextCaseCommand;
