"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var create_range_copy_operation_1 = require("../../../core/model/manipulators/range/create-range-copy-operation");
var text_manipulator_1 = require("../../../core/model/manipulators/text-manipulator/text-manipulator");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var browser_1 = require("@devexpress/utils/lib/browser");
var errors_1 = require("@devexpress/utils/lib/errors");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var html_importer_1 = require("../../../html/import/html-importer");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var ClipboardCommand = (function (_super) {
    tslib_1.__extends(ClipboardCommand, _super);
    function ClipboardCommand(control, queryCommandId) {
        var _this = _super.call(this, control) || this;
        _this.queryCommandId = queryCommandId;
        if (_this.canUseBuiltInClipboard())
            ClipboardCommand.builtInClipboard = new BuiltInClipboard(_this.control);
        return _this;
    }
    ClipboardCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.isVisible();
        return state;
    };
    ClipboardCommand.prototype.canUseBuiltInClipboard = function () {
        return this.control.isTouchMode();
    };
    ClipboardCommand.prototype.isCommandSupported = function () {
        var editableDocument = this.control.inputController.getEditableDocument();
        return !!editableDocument.queryCommandSupported && editableDocument.queryCommandSupported(this.queryCommandId);
    };
    ClipboardCommand.prototype.execute = function (isPublicApiCall, parameter) {
        if (parameter === void 0) { parameter = this.control.shortcutManager.lastCommandExecutedByShortcut; }
        var isPublicApiCallPrevValue = this.control.commandManager.isPublicApiCall;
        this.control.commandManager.isPublicApiCall = isPublicApiCall;
        if (!this.canUseBuiltInClipboard() && !parameter && !this.isCommandSupported()) {
            this.control.commandManager.isPublicApiCall = isPublicApiCallPrevValue;
            return this.executeShowErrorMessageCommand();
        }
        var options = this.convertToCommandOptions(parameter);
        this.beforeExecute();
        this.executeCore(this.getState(), options);
        this.control.commandManager.isPublicApiCall = isPublicApiCallPrevValue;
        return true;
    };
    ClipboardCommand.prototype.executeCore = function (state, options) {
        var _this = this;
        if (!state.enabled || this.control.commandManager.clipboardTimerId != null)
            return false;
        if (!this.canUseBuiltInClipboard()) {
            if (!options.param)
                this.control.inputController.getEditableDocument().execCommand(this.queryCommandId, false, null);
            this.control.commandManager.clipboardTimerId = setTimeout(function () {
                _this.executeFinalAction();
            }, this.getTimeout());
        }
        else
            this.executeBuiltInClipboardAction(this.getBuiltInClipboardActionType());
        return true;
    };
    ClipboardCommand.prototype.getTimeout = function () {
        return ClipboardCommand.timeout;
    };
    ClipboardCommand.prototype.executeFinalAction = function () {
        if (this.control.isClosed() || this.control.commandManager.clipboardTimerId === null)
            return;
        this.control.beginUpdate();
        this.changeModel();
        var editableDocument = this.control.inputController.getEditableDocument();
        if (browser_1.Browser.TouchUI) {
            getSelection().removeAllRanges();
            dom_1.DomUtils.clearInnerHtml(browser_1.Browser.MSTouchUI ? editableDocument.body : editableDocument);
        }
        else {
            var selection = editableDocument.getSelection ?
                editableDocument.getSelection() :
                editableDocument.selection;
            if (selection.removeAllRanges)
                selection.removeAllRanges();
            else if (selection.empty)
                selection.empty();
            dom_1.DomUtils.clearInnerHtml(editableDocument.body);
        }
        if (!browser_1.Browser.TouchUI || browser_1.Browser.IE && browser_1.Browser.MSTouchUI)
            this.control.inputController.selectEditableDocumentContent();
        else
            getSelection().selectAllChildren(editableDocument);
        this.control.endUpdate();
        this.control.commandManager.clipboardTimerId = null;
    };
    ClipboardCommand.prototype.executeShowErrorMessageCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorClipboardAccessDeniedMessageCommand).execute(this.control.commandManager.isPublicApiCall);
    };
    ClipboardCommand.prototype.executeBuiltInClipboardAction = function (action) {
        this.control.beginUpdate();
        ClipboardCommand.builtInClipboard.execute(action);
        this.control.endUpdate();
    };
    ClipboardCommand.prototype.isVisible = function () {
        return true;
    };
    ClipboardCommand.prototype.getBuiltInClipboardActionType = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    ClipboardCommand.prototype.changeModel = function () {
    };
    ClipboardCommand.prototype.beforeExecute = function () {
        if (!browser_1.Browser.TouchUI)
            this.control.focusManager.captureFocus();
    };
    ClipboardCommand.additionalWaitingTimeForMac = 10;
    ClipboardCommand.timeout = browser_1.Browser.Firefox ? 10 :
        (browser_1.Browser.MacOSPlatform && (browser_1.Browser.WebKitFamily || browser_1.Browser.Opera) ? 10 : 0);
    return ClipboardCommand;
}(command_base_1.CommandBase));
exports.ClipboardCommand = ClipboardCommand;
var CopySelectionCommand = (function (_super) {
    tslib_1.__extends(CopySelectionCommand, _super);
    function CopySelectionCommand(control) {
        return _super.call(this, control, "copy") || this;
    }
    CopySelectionCommand.prototype.copyEventRaised = function () {
        var _this = this;
        if (browser_1.Browser.MacOSPlatform && this.control.commandManager.clipboardTimerId !== null) {
            setTimeout(function () {
                clearTimeout(_this.control.commandManager.clipboardTimerId);
                _this.executeFinalAction();
            }, ClipboardCommand.additionalWaitingTimeForMac);
        }
    };
    CopySelectionCommand.prototype.getTimeout = function () {
        return browser_1.Browser.MacOSPlatform ? 300 : _super.prototype.getTimeout.call(this);
    };
    CopySelectionCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.copy) && !this.selection.isCollapsed();
    };
    CopySelectionCommand.prototype.isVisible = function () {
        return control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.copy);
    };
    CopySelectionCommand.prototype.getBuiltInClipboardActionType = function () {
        return BuiltInClipboardAction.Copy;
    };
    CopySelectionCommand.prototype.beforeExecute = function () {
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.copy)) {
            _super.prototype.beforeExecute.call(this);
            if (!this.canUseBuiltInClipboard())
                this.control.inputController.renderSelectionToEditableDocument();
        }
    };
    CopySelectionCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return CopySelectionCommand;
}(ClipboardCommand));
exports.CopySelectionCommand = CopySelectionCommand;
var CutSelectionCommand = (function (_super) {
    tslib_1.__extends(CutSelectionCommand, _super);
    function CutSelectionCommand(control) {
        return _super.call(this, control, "cut") || this;
    }
    CutSelectionCommand.prototype.changeModel = function () {
        var _this = this;
        this.history.addTransaction(function () {
            var intervals = list_1.ListUtils.deepCopy(_this.selection.intervalsInfo.intervals);
            list_1.ListUtils.reverseForEach(intervals, function (interval) {
                return _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(_this.selection.activeSubDocument, interval), true, true);
            });
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setPosition(intervals[0].start)));
        });
    };
    CutSelectionCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.cut) && !this.selection.isCollapsed();
    };
    CutSelectionCommand.prototype.isVisible = function () {
        return control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.cut);
    };
    CutSelectionCommand.prototype.getBuiltInClipboardActionType = function () {
        return BuiltInClipboardAction.Cut;
    };
    CutSelectionCommand.prototype.beforeExecute = function () {
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.cut)) {
            _super.prototype.beforeExecute.call(this);
            if (!this.canUseBuiltInClipboard())
                this.control.inputController.renderSelectionToEditableDocument();
        }
    };
    return CutSelectionCommand;
}(ClipboardCommand));
exports.CutSelectionCommand = CutSelectionCommand;
var PasteSelectionCommand = (function (_super) {
    tslib_1.__extends(PasteSelectionCommand, _super);
    function PasteSelectionCommand(control) {
        return _super.call(this, control, "paste") || this;
    }
    PasteSelectionCommand.prototype.getTimeout = function () {
        return browser_1.Browser.MacOSPlatform ? 300 : _super.prototype.getTimeout.call(this);
    };
    PasteSelectionCommand.prototype.pasteEventRaised = function () {
        var _this = this;
        if (browser_1.Browser.MacOSPlatform && this.control.commandManager.clipboardTimerId !== null) {
            setTimeout(function () {
                clearTimeout(_this.control.commandManager.clipboardTimerId);
                _this.executeFinalAction();
            }, ClipboardCommand.additionalWaitingTimeForMac);
        }
    };
    PasteSelectionCommand.prototype.changeModel = function () {
        this.control.inputController.setEditableDocumentContent(html_importer_1.HtmlImporter.convertHtml(this.control.inputController.getEditableDocumentContent()));
        var editableElement = this.control.inputController.getEditableDocument();
        var elementsContainer = editableElement.body || editableElement;
        var elements = elementsContainer.childNodes;
        if (!this.control.isLoadingPictureFromClipboard)
            this.control.importHtml(elements);
    };
    PasteSelectionCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paste);
    };
    PasteSelectionCommand.prototype.isVisible = function () {
        return control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.paste) || this.canUseBuiltInClipboard();
    };
    PasteSelectionCommand.prototype.getBuiltInClipboardActionType = function () {
        return BuiltInClipboardAction.Paste;
    };
    PasteSelectionCommand.prototype.beforeExecute = function () {
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paste)) {
            _super.prototype.beforeExecute.call(this);
            if (!this.canUseBuiltInClipboard()) {
                var selection = browser_1.Browser.TouchUI ? window.getSelection() : this.control.inputController.getEditableDocument().getSelection();
                selection.removeAllRanges();
                var editableElement = this.control.inputController.getEditableDocument();
                selection.selectAllChildren(editableElement.body || editableElement);
            }
        }
    };
    PasteSelectionCommand.prototype.isCommandSupported = function () {
        return browser_1.Browser.IE;
    };
    return PasteSelectionCommand;
}(ClipboardCommand));
exports.PasteSelectionCommand = PasteSelectionCommand;
var BuiltInClipboard = (function () {
    function BuiltInClipboard(control) {
        this.control = control;
    }
    BuiltInClipboard.prototype.executeCopy = function () {
        this.clipboard = create_range_copy_operation_1.RangeCopy.create(this.control.selection.subDocumentIntervals);
    };
    BuiltInClipboard.prototype.executePaste = function () {
        if (this.clipboard) {
            this.control.modelManager.modelManipulator.range.removeInterval(this.control.selection.subDocumentInterval, true, false);
            this.clipboard.insertTo(this.control.modelManager.modelManipulator, this.control.selection.intervalsInfo.subDocPosition);
        }
    };
    BuiltInClipboard.prototype.executeCut = function () {
        var _this = this;
        this.control.modelManager.history.addTransaction(function () {
            _this.clipboard = create_range_copy_operation_1.RangeCopy.create(_this.control.selection.subDocumentIntervals);
            list_1.ListUtils.reverseForEach(_this.control.selection.intervalsInfo.intervals, function (interval) {
                return _this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(_this.control.selection.activeSubDocument, interval), true, true);
            });
            _this.control.modelManager.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.control.modelManager.modelManipulator, _this.control.selection, _this.control.selection.getState(), _this.control.selection.getState()
                .setPosition(_this.control.selection.intervalsInfo.intervals[0].start)));
        });
    };
    BuiltInClipboard.prototype.createTextManipulatorIfNeeded = function () {
        if (!this.textManipulator)
            this.textManipulator = new text_manipulator_1.TextManipulator(this.control.modelManager.modelManipulator);
    };
    BuiltInClipboard.prototype.execute = function (action) {
        this.createTextManipulatorIfNeeded();
        switch (action) {
            case BuiltInClipboardAction.Copy:
                this.executeCopy();
                break;
            case BuiltInClipboardAction.Paste:
                this.executePaste();
                break;
            case BuiltInClipboardAction.Cut:
                this.executeCut();
                break;
        }
    };
    return BuiltInClipboard;
}());
exports.BuiltInClipboard = BuiltInClipboard;
var InsertHtmlCommand = (function (_super) {
    tslib_1.__extends(InsertHtmlCommand, _super);
    function InsertHtmlCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertHtmlCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertHtmlCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.control.inputController.setEditableDocumentContent(html_importer_1.HtmlImporter.convertHtml(options.param));
        var editableElement = this.control.inputController.getEditableDocument();
        var elementsContainer = editableElement.body || editableElement;
        var elements = elementsContainer.childNodes;
        this.history.addTransaction(function () {
            var charPropsBundle = _this.inputPosition.charPropsBundle;
            _this.modelManipulator.range.removeInterval(_this.selection.subDocumentInterval, true, false);
            new html_importer_1.HtmlImporter(_this.control.modelManager, _this.control.measurer, _this.selection.intervalsInfo.subDocPosition, elements, charPropsBundle).import();
        });
        this.control.inputController.setEditableDocumentContent("");
        return true;
    };
    return InsertHtmlCommand;
}(command_base_1.CommandBase));
exports.InsertHtmlCommand = InsertHtmlCommand;
var BuiltInClipboardAction;
(function (BuiltInClipboardAction) {
    BuiltInClipboardAction[BuiltInClipboardAction["Copy"] = 0] = "Copy";
    BuiltInClipboardAction[BuiltInClipboardAction["Paste"] = 1] = "Paste";
    BuiltInClipboardAction[BuiltInClipboardAction["Cut"] = 2] = "Cut";
})(BuiltInClipboardAction = exports.BuiltInClipboardAction || (exports.BuiltInClipboardAction = {}));
