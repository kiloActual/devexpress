"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var change_table_cell_history_items_1 = require("../../../core/model/history/items/tables/change-table-cell-history-items");
var control_1 = require("../../../core/model/options/control");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertParagraphCommand = (function (_super) {
    tslib_1.__extends(InsertParagraphCommand, _super);
    function InsertParagraphCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertParagraphCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertParagraphCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphs);
    };
    InsertParagraphCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var subDocument = options.subDocument;
        var interval = options.intervalsInfo.interval;
        this.lock = interval.length == 0;
        if (this.tryInsertParagraphBeforeTable(interval, subDocument))
            return true;
        var paragraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, interval.start);
        var paragraph = subDocument.paragraphs[paragraphIndex];
        if (interval.length === 0 || interval.start === 1) {
            if (paragraph.startLogPosition.value === interval.start && paragraph.isInList() && paragraph.length === 1 &&
                subDocument.isEditable([paragraph.interval])) {
                this.history.addAndRedo(new numbering_list_history_items_1.RemoveParagraphFromListHistoryItem(this.modelManipulator, subDocument, paragraphIndex));
                return true;
            }
        }
        var inpPosCharProps = this.lock && interval.start == paragraph.getEndPosition() - 1 ?
            this.inputPosition.getAllCharacterProperties() :
            null;
        this.history.addTransaction(function () {
            _this.addSelectionBefore();
            var resutInterval = command_base_1.CommandBase.replaceTextByParagraph(_this.control.modelManager, _this.inputPosition, options.intervalsInfo.subDocInterval);
            _this.addSelectionAfter(resutInterval.end, function (newState) { return newState.setEndOfLine(false); });
        });
        if (inpPosCharProps) {
            this.inputPosition.applyAllCharacterProperties(inpPosCharProps);
            this.control.selectionModelChangesListener.resetOccurredEvents();
        }
        if (this.lock)
            this.control.inputPositionModelChangesListener.resetOccurredEvents();
        return true;
    };
    InsertParagraphCommand.prototype.lockBarHolderUpdate = function (_prevModifiedState) {
        return this.lock;
    };
    InsertParagraphCommand.prototype.lockInputPositionUpdating = function () {
        return this.lock;
    };
    InsertParagraphCommand.prototype.tryInsertParagraphBeforeTable = function (interval, subDocument) {
        var _this = this;
        if (interval.start > 0 || interval.length > 0)
            return false;
        var firstTable = subDocument.tables[0];
        if (firstTable && firstTable.getStartPosition() === 0) {
            this.history.addTransaction(function () {
                _this.modelManipulator.table.insertParagraphToTheCellStartAndShiftContent(subDocument, firstTable.rows[0].cells[0], _this.inputPosition);
                _this.history.addAndRedo(new change_table_cell_history_items_1.ShiftTableStartPositionToTheRightHistoryItem(_this.modelManipulator, subDocument, firstTable.index));
            });
            return true;
        }
    };
    return InsertParagraphCommand;
}(command_base_1.CommandBase));
exports.InsertParagraphCommand = InsertParagraphCommand;
