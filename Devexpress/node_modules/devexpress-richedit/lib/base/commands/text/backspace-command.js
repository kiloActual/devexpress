"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var field_1 = require("../../../core/model/fields/field");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var search_1 = require("@devexpress/utils/lib/utils/search");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var BackspaceCommand = (function (_super) {
    tslib_1.__extends(BackspaceCommand, _super);
    function BackspaceCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BackspaceCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    BackspaceCommand.prototype.executeCore = function (_state, _options) {
        var selection = this.selection;
        var interval = selection.lastSelectedInterval.clone();
        var rawData = this.selection.tableInfo.rawData;
        if (rawData.areCellsSelectedInSeries && rawData.atLeastOneCellFullySelected(selection.intervals)) {
            var command = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteTableCellsByBackspace);
            if (command.getState().enabled)
                return command.execute(this.control.commandManager.isPublicApiCall);
        }
        var isIntervalCollapsed = interval.length == 0;
        var subDocument = this.selection.activeSubDocument;
        if (isIntervalCollapsed) {
            if (this.tryChangeParagraphAlignOrIndent(interval))
                return true;
            var layoutPosition = subDocument.isMain()
                ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, interval.start, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true))
                : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, interval.start, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                    .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
            interval.start = layoutPosition.getLogPosition() - 1;
            var firstPagePosition = subDocument.isMain() ?
                this.control.layout.pages[0].getPosition() :
                layoutPosition.pageArea.pageOffset;
            if (interval.start < firstPagePosition)
                return false;
            if (interval.start === firstPagePosition &&
                enum_1.EnumUtils.isAnyOf(subDocument.getRunByPosition(interval.start).getType(), run_type_1.RunType.AnchoredPictureRun, run_type_1.RunType.AnchoredTextBoxRun))
                return false;
            interval.length = 1;
        }
        if (interval.end == this.selection.activeSubDocument.getDocumentEndPosition() && interval.length === 1)
            return false;
        if (isIntervalCollapsed &&
            BackspaceCommand.getIntervalAccordingFields(this.selection.activeSubDocument, this.selection, interval, true))
            return true;
        if (this.selection.activeSubDocument.isEditable([interval])) {
            this.history.beginTransaction();
            this.addSelectionBefore();
            this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, interval), false, true);
            this.addSelectionAfter(interval.start);
            this.history.endTransaction();
            return true;
        }
        else
            return false;
    };
    BackspaceCommand.prototype.tryChangeParagraphAlignOrIndent = function (interval) {
        var pars = this.selection.activeSubDocument.paragraphs;
        var parIndex = search_1.SearchUtils.normedInterpolationIndexOf(pars, function (p) { return p.startLogPosition.value; }, interval.start);
        var par = pars[parIndex];
        return interval.start === par.startLogPosition.value && this.selection.activeSubDocument.isEditable([par.interval]) &&
            (this.tryChangeParagraphAlign(par) || this.tryDeleteList(par, parIndex) || this.tryChangeParagraphIndent(par));
    };
    BackspaceCommand.prototype.tryChangeParagraphAlign = function (par) {
        var parProps = par.getParagraphMergedProperties();
        var alignIsRight = parProps.alignment == paragraph_properties_1.ParagraphAlignment.Right;
        if (!alignIsRight && parProps.alignment != paragraph_properties_1.ParagraphAlignment.Center)
            return false;
        this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphAlignmentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, par.interval), alignIsRight ? paragraph_properties_1.ParagraphAlignment.Center : paragraph_properties_1.ParagraphAlignment.Left, true));
        return true;
    };
    BackspaceCommand.prototype.tryDeleteList = function (par, parIndex) {
        if (!par.isInList())
            return false;
        var oldLeftIndent = par.getParagraphMergedProperties().leftIndent;
        this.history.beginTransaction();
        this.history.addAndRedo(new numbering_list_history_items_1.RemoveParagraphFromListHistoryItem(this.modelManipulator, this.selection.activeSubDocument, parIndex));
        if (oldLeftIndent != par.getParagraphMergedProperties().leftIndent) {
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, par.interval), oldLeftIndent, true));
        }
        this.history.endTransaction();
        return true;
    };
    BackspaceCommand.prototype.tryChangeParagraphIndent = function (par) {
        var history = this.history;
        var parInterval = par.interval;
        var parProps = par.getParagraphMergedProperties();
        var subDocument = this.selection.activeSubDocument;
        var indentsChanged = false;
        history.beginTransaction();
        if (parProps.leftIndent > 0) {
            history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, parInterval), 0, true));
            indentsChanged = true;
        }
        if (parProps.firstLineIndent > 0) {
            history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, parInterval), 0, true));
            indentsChanged = true;
        }
        if (parProps.firstLineIndentType !== paragraph_properties_1.ParagraphFirstLineIndent.None) {
            history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, parInterval), paragraph_properties_1.ParagraphFirstLineIndent.None, true));
            indentsChanged = true;
        }
        history.endTransaction();
        return indentsChanged;
    };
    BackspaceCommand.getIntervalAccordingFields = function (subDocument, selection, removingInterval, selectInterval) {
        var newRemovingInterval = removingInterval.clone();
        field_1.Field.correctIntervalDueToFields(subDocument, newRemovingInterval);
        if (removingInterval.equals(newRemovingInterval))
            return null;
        if (selectInterval)
            selection.deprecatedSetSelection(newRemovingInterval.start, newRemovingInterval.end, selection.endOfLine, selection.keepX, true);
        return newRemovingInterval;
    };
    return BackspaceCommand;
}(command_base_1.CommandBase));
exports.BackspaceCommand = BackspaceCommand;
