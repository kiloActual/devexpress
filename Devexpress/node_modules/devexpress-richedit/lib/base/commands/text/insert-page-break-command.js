"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var insert_paragraph_manipulator_params_1 = require("../../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_text_manipulator_params_1 = require("../../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var control_1 = require("../../../core/model/options/control");
var rich_utils_1 = require("../../../core/model/rich-utils");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertPageBreakCommand = (function (_super) {
    tslib_1.__extends(InsertPageBreakCommand, _super);
    function InsertPageBreakCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertPageBreakCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        return new command_states_1.SimpleCommandState(this.isEnabled(options));
    };
    InsertPageBreakCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        this.history.addTransaction(function () {
            _this.addSelectionBefore();
            var pos = options.intervalsInfo.position;
            if (_this.control.modelManager.richOptions.control.pageBreakInsertMode === control_1.PageBreakInsertMode.NewLine)
                pos = command_base_1.CommandBase.replaceTextByParagraph(_this.control.modelManager, _this.inputPosition, options.intervalsInfo.subDocInterval).end;
            pos = _this.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(options.subDocument, pos), _this.inputPosition.charPropsBundle, run_type_1.RunType.TextRun, rich_utils_1.RichUtils.specialCharacters.PageBreak)).insertedInterval.end;
            pos = _this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(options.subDocument, pos), _this.inputPosition)).end;
            _this.addSelectionAfter(pos);
        });
        return true;
    };
    InsertPageBreakCommand.prototype.isEnabled = function (options) {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphs) &&
            this.selection.tableInfo.extendedData.numRows == 0 && options.subDocument.isMain();
    };
    return InsertPageBreakCommand;
}(command_base_1.CommandBase));
exports.InsertPageBreakCommand = InsertPageBreakCommand;
