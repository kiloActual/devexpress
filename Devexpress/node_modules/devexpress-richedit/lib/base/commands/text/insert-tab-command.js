"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_box_iterator_main_sub_document_1 = require("../../../core/layout-engine/layout-box-iterator/layout-box-iterator-main-sub-document");
var layout_box_iterator_other_sub_document_1 = require("../../../core/layout-engine/layout-box-iterator/layout-box-iterator-other-sub-document");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var model_iterator_1 = require("../../../core/model/model-iterator");
var control_1 = require("../../../core/model/options/control");
var run_type_1 = require("../../../core/model/runs/run-type");
var table_1 = require("../../../core/model/tables/main-structures/table");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var set_selection_params_1 = require("../../selection/set-selection-params");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var change_indent_command_1 = require("../paragraph-properties/change-indent-command");
var change_paragraph_indent_from_first_row_command_1 = require("../paragraph-properties/change-paragraph-indent-from-first-row-command");
var InsertTabCommandBase = (function (_super) {
    tslib_1.__extends(InsertTabCommandBase, _super);
    function InsertTabCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTabCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertTabCommandBase.prototype.setNextObj = function (iter) {
        do {
            if (enum_1.EnumUtils.isAnyOf(iter.run.getType(), run_type_1.RunType.InlinePictureRun, run_type_1.RunType.AnchoredPictureRun, run_type_1.RunType.AnchoredTextBoxRun))
                return true;
        } while (iter.moveToNextRun());
        return false;
    };
    InsertTabCommandBase.prototype.executeCore = function (_state, options) {
        var specInfo = this.selection.specialRunInfo;
        if (specInfo.isSelected() && (!specInfo.isTextBoxSelected() ||
            this.selection.activeSubDocument.id == specInfo.getParentSubDocument().id)) {
            var iter = new model_iterator_1.ModelIterator(this.selection.activeSubDocument, true);
            iter.setPosition(specInfo.getPosition() + 1);
            if (!this.setNextObj(iter)) {
                iter.setPosition(0);
                this.setNextObj(iter);
            }
            this.selection.setSelection(new set_selection_params_1.SetSelectionParams().setInterval(new fixed_1.FixedInterval(iter.getAbsolutePosition(), 1)));
            return true;
        }
        var interval = this.selection.lastSelectedInterval.clone();
        var startParagraph = this.selection.activeSubDocument.getParagraphByPosition(interval.start);
        var documentEndPosition = this.selection.activeSubDocument.getDocumentEndPosition();
        if (interval.start >= documentEndPosition)
            throw new Error("InsertTabCommandBase interval.start >= documentEndPosition");
        if (interval.length > 0 && interval.end > documentEndPosition)
            throw new Error("InsertTabCommandBase interval.end > documentEndPosition");
        var subDocument = this.selection.activeSubDocument;
        var startLayoutPosition = subDocument.isMain()
            ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.control.layoutFormatterManager, subDocument, interval.start, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false))
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, interval.start, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        if (this.addTableRowIfRequired(startLayoutPosition))
            return true;
        if (this.performCellIteratorActionIfRequired(startLayoutPosition, interval.start))
            return true;
        if (!this.control.commandManager.assertLastExecutedCommandsChain(true, InsertTabCommandBase)) {
            if (startParagraph.getTabs().positions.length === 0) {
                if (this.needProcessFirstParagraphRow(interval, startParagraph, startLayoutPosition)) {
                    if (startParagraph.isInList())
                        return this.createIndentNumberingParagraphCommand().execute(this.control.commandManager.isPublicApiCall);
                    return this.createChangeParagraphIndentFromFirstRowCommand().execute(this.control.commandManager.isPublicApiCall);
                }
                if (this.needProcessParagraphLeftIndent(interval, startLayoutPosition))
                    return this.createChangeIndentCommand().execute(this.control.commandManager.isPublicApiCall);
            }
        }
        if (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tabSymbol))
            this.insertTextWithSelection(options.intervalsInfo.subDocInterval, this.control.modelManager.richOptions.control.tabMarker);
        return true;
    };
    InsertTabCommandBase.prototype.addTableRowIfRequired = function (lp) {
        var cellInfo = lp.row.tableCellInfo;
        if (!cellInfo)
            return false;
        var rowInfo = cellInfo.parentRow;
        var grid = rowInfo.parentTable.logicInfo.grid;
        var info = grid.tableCellGridInfos[rowInfo.rowIndex][cellInfo.cellGridIndex];
        var rowInd = info.getEndRowIndex();
        var cellInd = info.getCellIndex(info.getNumRowsInCell() - 1);
        var lastRow = list_1.ListUtils.last(grid.table.rows);
        if (rowInd == grid.table.rows.length && cellInd == lastRow.cells.length - 1) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertTableRowBelow)
                .execute(this.control.commandManager.isPublicApiCall);
            this.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                .setPosition(this.selection.intervals[0].start)
                .setEndOfLine(false));
            return true;
        }
        return false;
    };
    InsertTabCommandBase.prototype.needProcessFirstParagraphRow = function (interval, startParagraph, startLayoutPosition) {
        if (this.control.commandManager.assertLastExecutedCommandsChain(false, InsertTabCommandBase, change_paragraph_indent_from_first_row_command_1.ChangeParagraphIndentFromFirstRowCommandBase) && this.isIntervalStartInParagraphStart(interval, startParagraph))
            return true;
        return this.isIntervalStartInParagraphStart(interval, startParagraph) && (interval.length === 0 || this.isIntervalEndOnRowEnd(interval, startLayoutPosition));
    };
    InsertTabCommandBase.prototype.needProcessParagraphLeftIndent = function (interval, startLayoutPosition) {
        if (this.control.commandManager.assertLastExecutedCommandsChain(false, InsertTabCommandBase, change_indent_command_1.ChangeIndentCommandBase))
            return true;
        var subDocument = this.selection.activeSubDocument;
        var endLayoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, interval.end, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, interval.end, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        return startLayoutPosition && startLayoutPosition.isPositionBeforeFirstBoxInRow() && this.isIntervalIncludesWholeRow(startLayoutPosition, endLayoutPosition);
    };
    InsertTabCommandBase.prototype.performCellIteratorActionIfRequired = function (startLayoutPosition, pos) {
        var startCellInfo = startLayoutPosition.row.tableCellInfo;
        if (!startCellInfo)
            return false;
        var boxIterator;
        var startCellIndexes = this.getTablePos(startCellInfo);
        while (true) {
            boxIterator = this.getBoxIterator(pos, startCellInfo.parentRow.parentTable.getTopLevelColumn().logicInfo.grid.table.getEndPosition() + 1);
            if (boxIterator && boxIterator.isInitialized())
                break;
            this.control.layoutFormatterManager.forceFormatPage(this.control.layout.validPageCount);
        }
        while (this.performCellIteratorAction(boxIterator)) {
            var currIndexes = this.getTablePos(boxIterator.position.row.tableCellInfo);
            if (!startCellIndexes.equals(currIndexes)) {
                if (currIndexes &&
                    (startCellIndexes.table.index == currIndexes.table.index ||
                        currIndexes.table.nestedLevel > startCellIndexes.table.nestedLevel)) {
                    var grid = boxIterator.position.row.tableCellInfo.parentRow.parentTable.logicInfo.grid;
                    var cellStartPos = grid.table.rows[currIndexes.rowIndex].cells[currIndexes.cellIndex].startParagraphPosition.value;
                    this.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                        .setInterval(new fixed_1.FixedInterval(cellStartPos, 0))
                        .setEndOfLine(false));
                }
                break;
            }
        }
        return true;
    };
    InsertTabCommandBase.prototype.getTablePos = function (cellInfo) {
        if (!cellInfo)
            return null;
        var rowInfo = cellInfo.parentRow;
        var grid = rowInfo.parentTable.logicInfo.grid;
        var info = grid.tableCellGridInfos[rowInfo.rowIndex][cellInfo.cellGridIndex];
        return new table_1.TablePosition(grid.table, info.getStartRowIndex(), info.getCellIndex(0));
    };
    InsertTabCommandBase.prototype.isIntervalStartInParagraphStart = function (interval, paragraph) {
        return interval.start === paragraph.startLogPosition.value;
    };
    InsertTabCommandBase.prototype.isIntervalEndOnRowEnd = function (interval, layoutPosition) {
        if (!layoutPosition)
            return false;
        return layoutPosition.getRelatedSubDocumentPagePosition() + layoutPosition.pageArea.pageOffset + layoutPosition.column.pageAreaOffset + layoutPosition.row.getEndPosition() === interval.end;
    };
    InsertTabCommandBase.prototype.isIntervalIncludesWholeRow = function (startLayoutPosition, endLayoutPosition) {
        return !endLayoutPosition || endLayoutPosition.row !== startLayoutPosition.row || endLayoutPosition.isPositionAfterLastBoxInRow();
    };
    return InsertTabCommandBase;
}(command_base_1.CommandBase));
exports.InsertTabCommandBase = InsertTabCommandBase;
var InsertTabCommand = (function (_super) {
    tslib_1.__extends(InsertTabCommand, _super);
    function InsertTabCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTabCommand.prototype.createIndentNumberingParagraphCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IncrementNumberingIndent);
    };
    InsertTabCommand.prototype.createChangeParagraphIndentFromFirstRowCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IncrementParagraphIndentFromFirstRow);
    };
    InsertTabCommand.prototype.createChangeIndentCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IncreaseIndent);
    };
    InsertTabCommand.prototype.performCellIteratorAction = function (boxIterator) {
        return boxIterator.moveNext(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
    };
    InsertTabCommand.prototype.getBoxIterator = function (pos, endPos) {
        var subDocument = this.selection.activeSubDocument;
        var layout = this.control.layout;
        return subDocument.isMain() ?
            new layout_box_iterator_main_sub_document_1.LayoutBoxIteratorMainSubDocument(subDocument, layout, pos, endPos) :
            new layout_box_iterator_other_sub_document_1.LayoutBoxIteratorOtherSubDocument(subDocument, layout, pos, endPos, this.selection.pageIndex);
    };
    return InsertTabCommand;
}(InsertTabCommandBase));
exports.InsertTabCommand = InsertTabCommand;
var InsertShiftTabCommand = (function (_super) {
    tslib_1.__extends(InsertShiftTabCommand, _super);
    function InsertShiftTabCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertShiftTabCommand.prototype.createIndentNumberingParagraphCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DecrementNumberingIndent);
    };
    InsertShiftTabCommand.prototype.createChangeParagraphIndentFromFirstRowCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DecrementParagraphIndentFromFirstRow);
    };
    InsertShiftTabCommand.prototype.createChangeIndentCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DecreaseIndent);
    };
    InsertShiftTabCommand.prototype.performCellIteratorAction = function (boxIterator) {
        return boxIterator.movePrev(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
    };
    InsertShiftTabCommand.prototype.getBoxIterator = function (pos, _endPos) {
        var subDocument = this.selection.activeSubDocument;
        var layout = this.control.layout;
        return subDocument.isMain() ?
            new layout_box_iterator_main_sub_document_1.LayoutBoxIteratorMainSubDocument(subDocument, layout, 0, pos) :
            new layout_box_iterator_other_sub_document_1.LayoutBoxIteratorOtherSubDocument(subDocument, layout, 0, pos, this.selection.pageIndex);
    };
    return InsertShiftTabCommand;
}(InsertTabCommandBase));
exports.InsertShiftTabCommand = InsertShiftTabCommand;
