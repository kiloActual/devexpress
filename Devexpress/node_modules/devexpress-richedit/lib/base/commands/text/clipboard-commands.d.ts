import { IRichEditControl } from '../../interfaces/i-rich-edit-core';
import { CommandBase, CommandSimpleOptions } from '../command-base';
import { SimpleCommandState } from '../command-states';
export declare class ClipboardCommand extends CommandBase<SimpleCommandState> {
    protected static additionalWaitingTimeForMac: number;
    queryCommandId: string;
    static builtInClipboard: BuiltInClipboard;
    static timeout: number;
    constructor(control: IRichEditControl, queryCommandId: string);
    getState(): SimpleCommandState;
    canUseBuiltInClipboard(): boolean;
    isCommandSupported(): boolean;
    execute(isPublicApiCall: boolean, parameter?: boolean): boolean;
    executeCore(state: SimpleCommandState, options: CommandSimpleOptions<boolean>): boolean;
    protected getTimeout(): number;
    protected executeFinalAction(): void;
    executeShowErrorMessageCommand(): boolean;
    executeBuiltInClipboardAction(action: BuiltInClipboardAction): void;
    isVisible(): boolean;
    getBuiltInClipboardActionType(): BuiltInClipboardAction;
    changeModel(): void;
    beforeExecute(): void;
}
export declare class CopySelectionCommand extends ClipboardCommand {
    constructor(control: IRichEditControl);
    copyEventRaised(): void;
    protected getTimeout(): number;
    isEnabled(): boolean;
    isVisible(): boolean;
    getBuiltInClipboardActionType(): BuiltInClipboardAction;
    beforeExecute(): void;
    isEnabledInReadOnlyMode(): boolean;
}
export declare class CutSelectionCommand extends ClipboardCommand {
    constructor(control: IRichEditControl);
    changeModel(): void;
    isEnabled(): boolean;
    isVisible(): boolean;
    getBuiltInClipboardActionType(): BuiltInClipboardAction;
    beforeExecute(): void;
}
export declare class PasteSelectionCommand extends ClipboardCommand {
    constructor(control: IRichEditControl);
    protected getTimeout(): number;
    pasteEventRaised(): void;
    changeModel(): void;
    isEnabled(): boolean;
    isVisible(): boolean;
    getBuiltInClipboardActionType(): BuiltInClipboardAction;
    beforeExecute(): void;
    isCommandSupported(): boolean;
}
export declare class BuiltInClipboard {
    private clipboard;
    private control;
    private textManipulator;
    constructor(control: IRichEditControl);
    private executeCopy;
    private executePaste;
    private executeCut;
    private createTextManipulatorIfNeeded;
    execute(action: BuiltInClipboardAction): void;
}
export declare class InsertHtmlCommand extends CommandBase<SimpleCommandState> {
    getState(): SimpleCommandState;
    executeCore(_state: SimpleCommandState, options: CommandSimpleOptions<string>): boolean;
}
export declare enum BuiltInClipboardAction {
    Copy = 0,
    Paste = 1,
    Cut = 2
}
//# sourceMappingURL=clipboard-commands.d.ts.map
