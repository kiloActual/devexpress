"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var sentence_model_builder_1 = require("../../../core/model/sentence-model-builder");
var sub_document_1 = require("../../../core/model/sub-document");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var backspace_command_1 = require("./backspace-command");
var RemoveWordCommandBase = (function (_super) {
    tslib_1.__extends(RemoveWordCommandBase, _super);
    function RemoveWordCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoveWordCommandBase.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    RemoveWordCommandBase.prototype.executeCore = function (_state, _options) {
        var _this = this;
        var selection = this.selection;
        var position = selection.lastSelectedInterval.start;
        var subDocument = this.selection.activeSubDocument;
        var parIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, position);
        var delInterval = this.getDeleteInterval(subDocument, position, parIndex);
        if (!delInterval || delInterval.length == 0)
            return false;
        var fieldsAccordingInterval = backspace_command_1.BackspaceCommand.getIntervalAccordingFields(subDocument, selection, delInterval, false);
        if (fieldsAccordingInterval)
            delInterval.copyFrom(fieldsAccordingInterval);
        this.history.addTransaction(function () {
            _this.addSelectionBefore();
            _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, delInterval), true, false);
            _this.addSelectionAfter(delInterval.start);
        });
        return true;
    };
    return RemoveWordCommandBase;
}(command_base_1.CommandBase));
exports.RemoveWordCommandBase = RemoveWordCommandBase;
var RemovePrevWordCommand = (function (_super) {
    tslib_1.__extends(RemovePrevWordCommand, _super);
    function RemovePrevWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemovePrevWordCommand.prototype.getDeleteInterval = function (subDocument, position, parIndex) {
        return RemovePrevWordCommand.getPrevWordInterval(this.control, subDocument, position, parIndex);
    };
    RemovePrevWordCommand.getPrevWordInterval = function (control, subDocument, position, parIndex) {
        var paragraph = subDocument.paragraphs[parIndex];
        if (paragraph.startLogPosition.value == position) {
            if (parIndex == 0)
                return null;
            paragraph = subDocument.paragraphs[parIndex - 1];
        }
        var sentenceFindInterval = fixed_1.FixedInterval.fromPositions(paragraph.startLogPosition.value, position);
        var sentenceStructureBuilder = sentence_model_builder_1.SentenceStructureBuilder.getBuilder(control.layoutFormatterManager, control.selection, subDocument, sentenceFindInterval, true);
        var part = list_1.ListUtils.unsafeReverseAnyOf(sentenceStructureBuilder.sentences, function (sentence) {
            return list_1.ListUtils.unsafeReverseAnyOf(sentence.words, function (word) { return word.parts[0].position < position ? word.parts[0] : null; });
        });
        return part ? fixed_1.FixedInterval.fromPositions(part.position, position) : null;
    };
    return RemovePrevWordCommand;
}(RemoveWordCommandBase));
exports.RemovePrevWordCommand = RemovePrevWordCommand;
var RemoveNextWordCommand = (function (_super) {
    tslib_1.__extends(RemoveNextWordCommand, _super);
    function RemoveNextWordCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RemoveNextWordCommand.prototype.getDeleteInterval = function (subDocument, position, parIndex) {
        return RemoveNextWordCommand.getNextWordInterval(this.control, subDocument, position, parIndex);
    };
    RemoveNextWordCommand.getNextWordInterval = function (control, subDocument, position, parIndex) {
        parIndex = Math.min(subDocument.paragraphs.length - 1, parIndex + 1);
        var paragraph = subDocument.paragraphs[parIndex];
        var sentenceFindInterval = fixed_1.FixedInterval.fromPositions(position, paragraph.getEndPosition());
        var sentenceStructureBuilder = sentence_model_builder_1.SentenceStructureBuilder.getBuilder(control.layoutFormatterManager, control.selection, subDocument, sentenceFindInterval, true);
        var part = list_1.ListUtils.unsafeAnyOf(sentenceStructureBuilder.sentences, function (sentence) {
            return list_1.ListUtils.unsafeAnyOf(sentence.words, function (word) {
                if (word.parts[0].position > position)
                    return word.parts[0];
                return list_1.ListUtils.unsafeAnyOf(word.parts, function (part) { return part.position > position &&
                    (part.type == layout_box_1.LayoutBoxType.ParagraphMark || part.type == layout_box_1.LayoutBoxType.SectionMark) ? part : null; }, 1);
            });
        });
        return fixed_1.FixedInterval.fromPositions(position, part ? part.position : paragraph.getEndPosition());
    };
    return RemoveNextWordCommand;
}(RemoveWordCommandBase));
exports.RemoveNextWordCommand = RemoveNextWordCommand;
