"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rich_utils_1 = require("../../../core/model/rich-utils");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var InsertSpaceCommand = (function (_super) {
    tslib_1.__extends(InsertSpaceCommand, _super);
    function InsertSpaceCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertSpaceCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertSpaceCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo = this.selection.intervalsInfo.clone();
    };
    InsertSpaceCommand.prototype.executeCore = function (_state, options) {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, rich_utils_1.RichUtils.specialCharacters.Space).setIntervalsInfo(options.intervalsInfo));
    };
    return InsertSpaceCommand;
}(command_base_1.CommandBase));
exports.InsertSpaceCommand = InsertSpaceCommand;
var InsertNonBreakingSpaceCommand = (function (_super) {
    tslib_1.__extends(InsertNonBreakingSpaceCommand, _super);
    function InsertNonBreakingSpaceCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertNonBreakingSpaceCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    InsertNonBreakingSpaceCommand.prototype.DEPRECATEDCorrectlMainCommandOptions = function (options) {
        options.intervalsInfo = this.selection.intervalsInfo.clone();
    };
    InsertNonBreakingSpaceCommand.prototype.executeCore = function (_state, options) {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, rich_utils_1.RichUtils.specialCharacters.NonBreakingSpace).setIntervalsInfo(options.intervalsInfo));
    };
    return InsertNonBreakingSpaceCommand;
}(command_base_1.CommandBase));
exports.InsertNonBreakingSpaceCommand = InsertNonBreakingSpaceCommand;
