"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var create_range_copy_operation_1 = require("../../../core/model/manipulators/range/create-range-copy-operation");
var control_1 = require("../../../core/model/options/control");
var linked_interval_1 = require("../../../core/model/position/linked-interval");
var sub_document_1 = require("../../../core/model/sub-document");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var DragCopyContentCommand = (function (_super) {
    tslib_1.__extends(DragCopyContentCommand, _super);
    function DragCopyContentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DragCopyContentCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        if (!options.intervalsInfo.intervals.length)
            return false;
        var positionTo = options.param;
        var subDocument = options.subDocument;
        if (!subDocument.isEditable([new fixed_1.FixedInterval(positionTo, 0)]))
            return false;
        if (this.tryCopyIntervalInsideTable(options.intervalsInfo, positionTo))
            return true;
        var intervals = list_1.ListUtils.map(options.intervalsInfo.intervals, function (curr) { return new linked_interval_1.LinkedInterval(subDocument.positionManager, curr); });
        var selectionIntervals = [];
        this.history.addTransaction(function () {
            for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {
                var interval = intervals_1[_i];
                var fixedInterval = interval.getFixedInterval();
                _this.modelManipulator.range.copyIntervalTo(subDocument, fixedInterval, positionTo);
                selectionIntervals.push(new fixed_1.FixedInterval(positionTo, fixedInterval.length));
                positionTo += fixedInterval.length;
            }
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setIntervals(selectionIntervals)));
        });
        list_1.ListUtils.forEach(intervals, function (curr) { return curr.destructor(subDocument.positionManager); });
        return true;
    };
    DragCopyContentCommand.prototype.canModify = function () {
        return true;
    };
    DragCopyContentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.drag !== control_1.DocumentCapability.Hidden && this.control.modelManager.richOptions.control.drop !== control_1.DocumentCapability.Hidden;
        return state;
    };
    DragCopyContentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.drag) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.drop) &&
            !this.selection.isCollapsed();
    };
    DragCopyContentCommand.prototype.tryCopyIntervalInsideTable = function (intervalsInfo, positionTo) {
        var _this = this;
        if (!intervalsInfo.tableInfo.extendedData.numRows)
            return false;
        this.history.addTransaction(function () {
            var newInterval = create_range_copy_operation_1.RangeCopy.create(intervalsInfo.subDocIntervals)
                .insertTo(_this.modelManipulator, new sub_document_1.SubDocumentPosition(intervalsInfo.subDocument, positionTo));
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setInterval(newInterval)));
        });
        return true;
    };
    return DragCopyContentCommand;
}(command_base_1.CommandBase));
exports.DragCopyContentCommand = DragCopyContentCommand;
var DragMoveContentCommand = (function (_super) {
    tslib_1.__extends(DragMoveContentCommand, _super);
    function DragMoveContentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DragMoveContentCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        if (!options.intervalsInfo.intervals.length)
            return false;
        var positionTo = options.param;
        if (!this.selection.activeSubDocument.isEditable([new fixed_1.FixedInterval(positionTo, 0)]))
            return false;
        if (this.selection.intervals.length == 1 &&
            this.selection.activeSubDocument.getDocumentEndPosition() - 1 == this.selection.intervals[0].start ||
            !this.selection.activeSubDocument.isEditable(this.selection.intervals))
            return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DragCopyContent)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, positionTo));
        var subDocument = this.selection.activeSubDocument;
        var tableInfo = this.selection.tableInfo;
        if (tableInfo.extendedData.numRows && list_1.ListUtils.unsafeAnyOf(tableInfo.extendedData.rows, function (rowInfo) {
            return list_1.ListUtils.unsafeAnyOf(rowInfo.cells, function (cellInfo) {
                return cellInfo.cell.interval.containsWithIntervalEnd(positionTo);
            });
        }))
            return false;
        if (this.tryMoveIntervalInsideTable(options.intervalsInfo, positionTo))
            return true;
        var intervals = list_1.ListUtils.map(options.intervalsInfo.intervals, function (curr) { return new linked_interval_1.LinkedInterval(subDocument.positionManager, curr); });
        var skipIntervalIndex;
        this.history.addTransaction(function () {
            var selectionLinkedIntervals = [];
            skipIntervalIndex = list_1.ListUtils.indexBy(intervals, function (interval) { return interval.start <= positionTo && interval.end >= positionTo; });
            if (skipIntervalIndex >= 0)
                positionTo = intervals[skipIntervalIndex].start;
            var skipInterval = intervals[skipIntervalIndex];
            var skipIntervalLength = skipInterval ? skipInterval.length : 0;
            for (var i = 0, interval = void 0; interval = intervals[i]; i++) {
                if (i === skipIntervalIndex) {
                    if (intervals.length > 1)
                        selectionLinkedIntervals.push(new linked_interval_1.LinkedInterval(subDocument.positionManager, new fixed_1.FixedInterval(positionTo, skipIntervalLength)));
                    positionTo += skipIntervalLength;
                    continue;
                }
                var fixedInterval = interval.getFixedInterval();
                _this.modelManipulator.range.moveIntervalTo(new sub_document_1.SubDocumentInterval(subDocument, fixedInterval), positionTo);
                var selectionStartPosition = fixedInterval.start < positionTo ? positionTo - fixedInterval.length : positionTo;
                var selectionEndPosition = selectionStartPosition + fixedInterval.length;
                selectionLinkedIntervals.push(new linked_interval_1.LinkedInterval(subDocument.positionManager, new boundary_1.BoundaryInterval(selectionStartPosition, selectionEndPosition)));
                if (positionTo <= fixedInterval.start)
                    positionTo += fixedInterval.length;
            }
            if (selectionLinkedIntervals.length) {
                _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setIntervals(list_1.ListUtils.map(selectionLinkedIntervals, function (curr) { return curr.getFixedInterval(); }))));
                list_1.ListUtils.forEach(selectionLinkedIntervals, function (curr) { return curr.destructor(subDocument.positionManager); });
            }
        });
        list_1.ListUtils.forEach(intervals, function (curr) { return curr.destructor(subDocument.positionManager); });
        return intervals.length > 1 || skipIntervalIndex === -1;
    };
    DragMoveContentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.drag !== control_1.DocumentCapability.Hidden && this.control.modelManager.richOptions.control.drop !== control_1.DocumentCapability.Hidden;
        return state;
    };
    DragMoveContentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.drag) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.drop) && !this.selection.isCollapsed();
    };
    DragMoveContentCommand.prototype.tryMoveIntervalInsideTable = function (intervalsInfo, positionTo) {
        var _this = this;
        if (!intervalsInfo.tableInfo.extendedData.numRows)
            return false;
        var subDocument = intervalsInfo.subDocument;
        var linkedIntervals = list_1.ListUtils.map(intervalsInfo.intervals, function (curr) { return new linked_interval_1.LinkedInterval(intervalsInfo.subDocument.positionManager, curr); });
        this.history.addTransaction(function () {
            var newInterval = new linked_interval_1.LinkedInterval(subDocument.positionManager, create_range_copy_operation_1.RangeCopy.create(intervalsInfo.subDocIntervals)
                .insertTo(_this.modelManipulator, new sub_document_1.SubDocumentPosition(subDocument, positionTo)));
            list_1.ListUtils.forEach(linkedIntervals, function (curr) {
                _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, curr.getFixedInterval()), true, false);
                curr.destructor(subDocument.positionManager);
            });
            _this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(_this.modelManipulator, _this.selection, _this.selection.getState(), _this.selection.getState().setInterval(newInterval.getFixedInterval()).setEndOfLine(true)));
            newInterval.destructor(subDocument.positionManager);
        });
        return true;
    };
    DragMoveContentCommand.prototype.canModify = function () {
        return true;
    };
    return DragMoveContentCommand;
}(command_base_1.CommandBase));
exports.DragMoveContentCommand = DragMoveContentCommand;
