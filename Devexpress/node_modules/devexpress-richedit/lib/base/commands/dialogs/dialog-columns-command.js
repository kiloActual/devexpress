"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var section_properties_history_items_1 = require("../../../core/model/history/items/section-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var section_column_properties_1 = require("../../../core/model/section/section-column-properties");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var section_properties_command_base_1 = require("../section-properties/section-properties-command-base");
var dialog_page_setup_command_1 = require("./dialog-page-setup-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogColumnsCommand = (function (_super) {
    tslib_1.__extends(DialogColumnsCommand, _super);
    function DialogColumnsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogColumnsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.sections) && this.selection.activeSubDocument.isMain() &&
            section_properties_command_base_1.SectionPropertiesCommandBase.rangePermissionIncludeFullSection(this.control, this.selection.activeSubDocument, this.selection.intervals);
    };
    DialogColumnsCommand.prototype.createParameters = function (_options) {
        var columnsInfo = new ColumnsInfoUI();
        var secProps = this.inputPosition.getMergedSectionPropertiesRaw();
        columnsInfo.equalColumnWidth = secProps.equalWidthColumns;
        if (secProps.pageWidth != undefined && secProps.marginLeft != undefined && secProps.marginRight != undefined)
            columnsInfo.pageWidth = secProps.pageWidth - secProps.marginLeft - secProps.marginRight;
        else
            columnsInfo.pageWidth = ColumnsInfoUI.minColumnWidth;
        var columnCount = secProps.columnCount == undefined ? 0 : secProps.columnCount;
        columnsInfo.changeColumnCount(columnCount);
        for (var i = 0, info; info = secProps.columnsInfo[i]; i++) {
            columnsInfo.columns[i].width = info.width;
            columnsInfo.columns[i].spacing = info.space;
        }
        return new ColumnsDialogParameters().init(columnsInfo, this.control.uiUnitConverter);
    };
    DialogColumnsCommand.prototype.applyParameters = function (_state, newParams) {
        var interval = this.getInterval(newParams.columnsInfo.applyType);
        var modelManipulator = this.modelManipulator;
        var columnsInfo = newParams.columnsInfo;
        this.history.beginTransaction();
        var columns = [];
        for (var i = 0, columnInfo; columnInfo = columnsInfo.columns[i]; i++) {
            var column = new section_column_properties_1.SectionColumnProperties(columnInfo.width, columnInfo.spacing);
            columns.push(column);
        }
        this.history.addAndRedo(new section_properties_history_items_1.SectionColumnsInfoHistoryItem(modelManipulator, interval, columns));
        this.history.addAndRedo(new section_properties_history_items_1.SectionColumnCountHistoryItem(modelManipulator, interval, columnsInfo.columnCount));
        this.history.addAndRedo(new section_properties_history_items_1.SectionEqualWidthColumnsHistoryItem(modelManipulator, interval, columnsInfo.equalColumnWidth));
        this.history.endTransaction();
        return true;
    };
    DialogColumnsCommand.prototype.getInterval = function (applyTo) {
        if (applyTo == dialog_page_setup_command_1.SectionPropertiesApplyType.WholeDocument)
            return new fixed_1.FixedInterval(0, this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() - 1);
        var selectedSections = this.control.modelManager.model.getSectionsByInterval(this.selection.lastSelectedInterval);
        if (applyTo == dialog_page_setup_command_1.SectionPropertiesApplyType.SelectedSections) {
            var lastSection = selectedSections[selectedSections.length - 1];
            return fixed_1.FixedInterval.fromPositions(selectedSections[0].startLogPosition.value, lastSection.startLogPosition.value + lastSection.getLength() - 1);
        }
        if (applyTo == dialog_page_setup_command_1.SectionPropertiesApplyType.ThisPointForward)
            return fixed_1.FixedInterval.fromPositions(selectedSections[0].startLogPosition.value, this.control.modelManager.model.mainSubDocument.getDocumentEndPosition());
        return new fixed_1.FixedInterval(selectedSections[0].startLogPosition.value, selectedSections[0].getLength() - 1);
    };
    DialogColumnsCommand.prototype.getDialogName = function () {
        return "Columns";
    };
    return DialogColumnsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogColumnsCommand = DialogColumnsCommand;
var ColumnsDialogParameters = (function (_super) {
    tslib_1.__extends(ColumnsDialogParameters, _super);
    function ColumnsDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnsDialogParameters.prototype.init = function (columnsInfo, unitConverter) {
        this.columnsInfo = columnsInfo;
        this.unitConverter = unitConverter;
        return this;
    };
    ColumnsDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        var columnsInfo = new ColumnsInfoUI();
        columnsInfo.copyFrom(obj.columnsInfo);
        this.columnsInfo = columnsInfo;
        this.unitConverter = obj.unitConverter;
    };
    ColumnsDialogParameters.prototype.clone = function () {
        var newInstance = new ColumnsDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    ColumnsDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return ColumnsDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.ColumnsDialogParameters = ColumnsDialogParameters;
var ColumnsInfoUI = (function () {
    function ColumnsInfoUI() {
        this.columns = [];
        this.equalColumnWidth = false;
        this.applyType = dialog_page_setup_command_1.SectionPropertiesApplyType.WholeDocument;
    }
    ColumnsInfoUI.prototype.getMaxColumnCount = function () {
        return Math.ceil(this.pageWidth / (ColumnsInfoUI.minColumnWidth + ColumnsInfoUI.minSpacingWidth));
    };
    ColumnsInfoUI.prototype.hasColumnsNull = function () {
        if (this.columnCount > this.columns.length)
            return true;
        for (var i = 0; i < this.columnCount; i++) {
            if (!this.columns[i].width)
                return true;
            if (!this.columns[i].spacing && this.columns[i].spacing != 0)
                return true;
        }
        return false;
    };
    ColumnsInfoUI.prototype.hasColumnsInfoUINull = function () {
        if (!this.columnCount)
            return true;
        return this.hasColumnsNull();
    };
    ColumnsInfoUI.prototype.changeColumnCount = function (count) {
        if (count < 0)
            return;
        count = Math.min(count, this.getMaxColumnCount());
        var previousCount = this.columns.length;
        var hasColumnInfoUINull = this.hasColumnsInfoUINull();
        for (var i = this.columns.length; i < count; i++)
            this.columns[i] = new ColumnInfoUI(i + 1);
        this.columns.splice(count);
        this.columnCount = count;
        if (hasColumnInfoUINull) {
            this.calculateEqualColumnsOnChangeCount();
            return;
        }
        if (!this.equalColumnWidth && previousCount > 0)
            this.calculateNotEqualColumnsOnChangeCount(previousCount);
        else
            this.calculateEqualColumnsOnChangeCount();
    };
    ColumnsInfoUI.prototype.calculateEqualColumnsOnChangeCount = function () {
        if (this.columns.length <= 0)
            return;
        var spacingValue;
        if (this.columns[0].spacing && this.columns[0].spacing != 0)
            spacingValue = this.columns[0].spacing;
        else
            spacingValue = ColumnsInfoUI.minColumnWidth;
        this.calculateUniformColumnsByColumnSpacing(spacingValue);
    };
    ColumnsInfoUI.prototype.calculateNotEqualColumnsOnChangeCount = function (previousCount) {
        if (this.columns.length <= 0)
            return;
        if (this.columns.length == 1)
            this.columns[0].width = this.pageWidth;
        var calculateCount = Math.min(previousCount, this.columns.length);
        for (var i = 0; i < calculateCount; i++)
            this.columns[i].width = Math.max(ColumnsInfoUI.minColumnWidth, this.columns[i].width * previousCount / this.columns.length);
        for (var i = 0; i < calculateCount - 1; i++)
            this.columns[i].spacing = Math.max(ColumnsInfoUI.minSpacingWidth, this.columns[i].spacing * (previousCount - 1) / (this.columns.length - 1));
        if (calculateCount > 0)
            for (var i = calculateCount; i < this.columns.length; i++)
                this.columns[i].width = this.columns[calculateCount - 1].width;
        if (calculateCount > 1)
            for (var i = calculateCount - 1; i < this.columns.length - 1; i++)
                this.columns[i].spacing = this.columns[calculateCount - 2].spacing;
        this.disableTheLastSpacing();
        this.correctColumns();
    };
    ColumnsInfoUI.prototype.correctColumns = function () {
        if (!this.columnCount || this.columnCount <= 0)
            return;
        var difference = -this.calculateAvailableSpace();
        var calculatorWidth = new ColumnsDistributionWidthPriorityCalculator(this.columns);
        var calculatorSpacing = new ColumnsDistributionSpacingPriorityCalculator(this.columns);
        var sumWidth = calculatorWidth.calculateTotal(0, this.columns.length - 1);
        var sumSpacing = calculatorSpacing.calculateTotal(0, this.columns.length - 1);
        var partWidth = sumWidth / (sumWidth + sumSpacing);
        var differenceWidth = Math.ceil(difference * partWidth);
        var differenceSpacing = difference - differenceWidth;
        calculatorWidth.distributeSpace(0, this.columns.length - 1, differenceWidth);
        calculatorSpacing.distributeSpace(0, this.columns.length - 2, differenceSpacing);
    };
    ColumnsInfoUI.prototype.disableTheLastSpacing = function () {
        this.columns[this.columns.length - 1].spacing = 0;
    };
    ColumnsInfoUI.prototype.recalculateColumnsByWidthAfterIndex = function (index) {
        if (this.hasColumnsInfoUINull())
            return;
        if (this.equalColumnWidth)
            this.calculateColumnWidthForUniformColumns();
        else
            this.changeColumnsNotEqualByWidthAfterIndex(index);
    };
    ColumnsInfoUI.prototype.recalculateColumnsBySpacingAfterIndex = function (index) {
        if (this.hasColumnsInfoUINull())
            return;
        if (this.equalColumnWidth)
            this.calculateColumnSpacingForUniformColumns();
        else
            this.changeColumnsNotEqualBySpacingAfterIndex(index);
    };
    ColumnsInfoUI.prototype.calculateUniformColumnsCore = function (columnWidth, columnSpacing, restWidth, restSpacing) {
        var calculatorWidth = new ColumnsDistributionWidthPriorityCalculator(this.columns);
        var calculatorSpacing = new ColumnsDistributionSpacingPriorityCalculator(this.columns);
        calculatorWidth.setAllValues(columnWidth, restWidth);
        calculatorSpacing.setAllValues(columnSpacing, restSpacing);
        this.disableTheLastSpacing();
    };
    ColumnsInfoUI.prototype.calculateColumnWidthForUniformColumns = function () {
        var columnWidth = (this.columns[0].width) ? this.columns[0].width : ColumnsInfoUI.minColumnWidth;
        this.calculateUniformColumnsByColumnWidth(columnWidth);
    };
    ColumnsInfoUI.prototype.calculateUniformColumnsByColumnWidth = function (columnWidth) {
        if (!this.columnCount || this.columnCount <= 0)
            return;
        if (this.columnCount <= 1)
            columnWidth = this.pageWidth;
        if (columnWidth * this.columnCount > this.pageWidth)
            columnWidth = this.pageWidth / this.columnCount;
        columnWidth = Math.max(columnWidth, ColumnsInfoUI.minColumnWidth);
        var dividend = this.pageWidth - columnWidth * this.columnCount;
        var divider = Math.max(1, this.columnCount - 1);
        var restSpacing = dividend % divider;
        var columnSpacing = dividend / divider;
        this.calculateUniformColumnsCore(columnWidth, columnSpacing, 0, restSpacing);
    };
    ColumnsInfoUI.prototype.calculateColumnSpacingForUniformColumns = function () {
        if (this.hasColumnsInfoUINull())
            return;
        var columnSpacing = (this.columns[0].spacing) ? this.columns[0].spacing : ColumnsInfoUI.minSpacingWidth;
        this.calculateUniformColumnsByColumnSpacing(columnSpacing);
    };
    ColumnsInfoUI.prototype.calculateUniformColumnsByColumnSpacing = function (columnSpacing) {
        if (!this.columnCount || this.columnCount <= 0)
            return;
        columnSpacing = Math.max(columnSpacing, ColumnsInfoUI.minSpacingWidth);
        if (columnSpacing * (this.columnCount - 1) > this.pageWidth - ColumnsInfoUI.minColumnWidth * this.columnCount)
            columnSpacing = Math.ceil((this.pageWidth - ColumnsInfoUI.minColumnWidth * this.columnCount) / (this.columnCount - 1));
        if (this.columnCount == 1)
            columnSpacing = 0;
        var dividend = Math.ceil(this.pageWidth - columnSpacing * (this.columnCount - 1));
        var restWidth = Math.ceil(dividend % this.columnCount);
        var columnWidth = Math.ceil(dividend / this.columnCount);
        this.calculateUniformColumnsCore(columnWidth, columnSpacing, restWidth, 0);
    };
    ColumnsInfoUI.prototype.calculateAvailableSpace = function () {
        var usedSpace = 0;
        for (var i = 0; i < this.columnCount; i++)
            usedSpace += ((this.columns[i].width) ? this.columns[i].width : 0) + ((this.columns[i].spacing) ? this.columns[i].spacing : 0);
        return this.pageWidth - usedSpace;
    };
    ColumnsInfoUI.prototype.changeColumnsNotEqualByWidthAfterIndex = function (index) {
        if (!this.columnCount || this.columnCount <= 0 || index >= this.columnCount)
            return;
        var calculatorWidth = new ColumnsDistributionWidthPriorityCalculator(this.columns);
        var calculatorSpacing = new ColumnsDistributionSpacingPriorityCalculator(this.columns);
        calculatorWidth.correctValue(index);
        var difference = -this.calculateAvailableSpace();
        difference = calculatorWidth.distributeSpace(index + 1, this.columnCount - 1, difference);
        difference = calculatorWidth.distributeSpace(0, index - 1, difference);
        difference = calculatorSpacing.distributeSpace(0, this.columnCount - 2, difference);
        this.columns[index].width -= difference;
        this.disableTheLastSpacing();
    };
    ColumnsInfoUI.prototype.changeColumnsNotEqualBySpacingAfterIndex = function (index) {
        if (!this.columnCount || this.columnCount <= 0 || index >= this.columnCount)
            return;
        var calculatorWidth = new ColumnsDistributionWidthPriorityCalculator(this.columns);
        var calculatorSpacing = new ColumnsDistributionSpacingPriorityCalculator(this.columns);
        calculatorSpacing.correctValue(index);
        var difference = -this.calculateAvailableSpace();
        difference = calculatorWidth.distributeSpace(index + 1, this.columnCount - 1, difference);
        difference = calculatorWidth.distributeSpace(0, index, difference);
        difference = calculatorSpacing.distributeSpace(0, index - 1, difference);
        difference = calculatorSpacing.distributeSpace(index + 1, this.columnCount - 2, difference);
        this.columns[index].spacing -= difference;
        this.disableTheLastSpacing();
    };
    ColumnsInfoUI.prototype.clone = function () {
        var obj = new ColumnsInfoUI();
        obj.copyFrom(this);
        return obj;
    };
    ColumnsInfoUI.prototype.copyFrom = function (info) {
        this.applyType = info.applyType;
        this.equalColumnWidth = info.equalColumnWidth;
        this.pageWidth = info.pageWidth;
        this.changeColumnCount(info.columns.length);
        for (var i = 0; i < this.columns.length; i++) {
            this.columns[i].width = info.columns[i].width;
            this.columns[i].spacing = info.columns[i].spacing;
        }
    };
    ColumnsInfoUI.minColumnWidth = 720;
    ColumnsInfoUI.minSpacingWidth = 0;
    return ColumnsInfoUI;
}());
exports.ColumnsInfoUI = ColumnsInfoUI;
var ColumnInfoUI = (function () {
    function ColumnInfoUI(num) {
        this.num = num;
    }
    return ColumnInfoUI;
}());
exports.ColumnInfoUI = ColumnInfoUI;
var ColumnsDistributionCalculator = (function () {
    function ColumnsDistributionCalculator(columns) {
        this.columns = [];
        this.columns = columns;
    }
    ColumnsDistributionCalculator.prototype.calculateTotal = function (from, to) {
        var result = 0;
        for (var i = from; i <= to; i++)
            result += this.getValue(this.columns[i]);
        return result;
    };
    ColumnsDistributionCalculator.prototype.hasEnoughSpaceForDistribution = function (from, to, space) {
        var total = this.calculateTotal(from, to);
        return space < total - this.getMinValue() * (to - from + 1);
    };
    ColumnsDistributionCalculator.prototype.setMinValues = function (from, to, space) {
        for (var i = from; i <= to; i++) {
            space -= this.getValue(this.columns[i]) - this.getMinValue();
            this.setValue(this.columns[i], this.getMinValue());
        }
        return space;
    };
    ColumnsDistributionCalculator.prototype.correctValue = function (index) {
        if (index >= this.columns.length)
            return;
        if (this.getValue(this.columns[index]) < this.getMinValue())
            this.setValue(this.columns[index], this.getMinValue());
    };
    ColumnsDistributionCalculator.prototype.distributeRemainder = function (from, to, remainder) {
        var correction = (remainder > 0) ? 1 : -1;
        while (remainder != 0) {
            for (var i = from; i <= to && (remainder != 0); i++) {
                var newValue = this.getValue(this.columns[i]) - correction;
                if (newValue > this.getMinValue()) {
                    this.setValue(this.columns[i], newValue);
                    remainder -= correction;
                }
            }
        }
        return 0;
    };
    ColumnsDistributionCalculator.prototype.distributeSpaceCore = function (from, to, space) {
        var remainder = Math.round(space % (to - from + 1));
        var difference = Math.round(space / (to - from + 1));
        for (var i = from; i <= to; i++) {
            var newValue = this.getValue(this.columns[i]) - difference;
            if (newValue >= this.getMinValue())
                this.setValue(this.columns[i], newValue);
            else {
                this.setValue(this.columns[i], this.getMinValue());
                remainder += (this.getMinValue() - newValue);
            }
        }
        this.distributeRemainder(from, to, remainder);
        return 0;
    };
    ColumnsDistributionCalculator.prototype.distributeSpace = function (from, to, space) {
        if (from > to)
            return space;
        if (this.hasEnoughSpaceForDistribution(from, to, space))
            return this.distributeSpaceCore(from, to, space);
        else
            return this.setMinValues(from, to, space);
    };
    ColumnsDistributionCalculator.prototype.setAllValues = function (value, rest) {
        var count = this.columns.length;
        for (var i = 0; i < count; i++)
            this.setValue(this.columns[i], value);
        this.distributeSpace(0, count - 1, -rest);
    };
    ColumnsDistributionCalculator.prototype.getMinValue = function () { return null; };
    ColumnsDistributionCalculator.prototype.getValue = function (_column) { return null; };
    ColumnsDistributionCalculator.prototype.setValue = function (_column, _value) { };
    return ColumnsDistributionCalculator;
}());
exports.ColumnsDistributionCalculator = ColumnsDistributionCalculator;
var ColumnsDistributionWidthPriorityCalculator = (function (_super) {
    tslib_1.__extends(ColumnsDistributionWidthPriorityCalculator, _super);
    function ColumnsDistributionWidthPriorityCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnsDistributionWidthPriorityCalculator.prototype.getMinValue = function () {
        return 720;
    };
    ColumnsDistributionWidthPriorityCalculator.prototype.getValue = function (column) {
        return (column.width) ? column.width : 0;
    };
    ColumnsDistributionWidthPriorityCalculator.prototype.setValue = function (column, value) {
        column.width = value;
    };
    return ColumnsDistributionWidthPriorityCalculator;
}(ColumnsDistributionCalculator));
exports.ColumnsDistributionWidthPriorityCalculator = ColumnsDistributionWidthPriorityCalculator;
var ColumnsDistributionSpacingPriorityCalculator = (function (_super) {
    tslib_1.__extends(ColumnsDistributionSpacingPriorityCalculator, _super);
    function ColumnsDistributionSpacingPriorityCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ColumnsDistributionSpacingPriorityCalculator.prototype.getMinValue = function () {
        return 0;
    };
    ColumnsDistributionSpacingPriorityCalculator.prototype.getValue = function (column) {
        return (column.spacing) ? column.spacing : 0;
    };
    ColumnsDistributionSpacingPriorityCalculator.prototype.setValue = function (column, value) {
        column.spacing = value;
    };
    return ColumnsDistributionSpacingPriorityCalculator;
}(ColumnsDistributionCalculator));
exports.ColumnsDistributionSpacingPriorityCalculator = ColumnsDistributionSpacingPriorityCalculator;
var ColumnsEditorController = (function () {
    function ColumnsEditorController(parameters) {
        this.presets = [];
        this.columnsInfo = parameters.columnsInfo;
        this.unitConverter = parameters.unitConverter;
        this.presets.push(new SingleColumnsInfoPreset());
        this.presets.push(new TwoColumnsInfoPreset());
        this.presets.push(new ThreeColumnsInfoPreset());
        this.presets.push(new LeftNarrowColumnsInfoPreset());
        this.presets.push(new RightNarrowColumnsInfoPreset());
    }
    ColumnsEditorController.prototype.changeColumnCount = function (count) {
        this.columnsInfo.changeColumnCount(count);
    };
    ColumnsEditorController.prototype.setEqualColumnWidth = function (value) {
        this.columnsInfo.equalColumnWidth = value;
        if (value)
            this.columnsInfo.calculateColumnSpacingForUniformColumns();
    };
    ColumnsEditorController.prototype.applyPreset = function (index) {
        this.presets[index].applyTo(this.columnsInfo);
    };
    ColumnsEditorController.prototype.matchPreset = function (index) {
        return this.presets[index].matchTo(this.columnsInfo);
    };
    ColumnsEditorController.prototype.getWidth = function (index) {
        var width = this.columnsInfo.columns[index].width;
        return this.unitConverter.twipsToUI(width);
    };
    ColumnsEditorController.prototype.getSpacing = function (index) {
        var spacing = this.columnsInfo.columns[index].spacing;
        return this.unitConverter.twipsToUI(spacing);
    };
    ColumnsEditorController.prototype.setWidth = function (index, value) {
        var width = this.unitConverter.UIToTwips(value);
        this.columnsInfo.columns[index].width = width;
        this.columnsInfo.recalculateColumnsByWidthAfterIndex(index);
    };
    ColumnsEditorController.prototype.setSpacing = function (index, value) {
        var spacing = this.unitConverter.UIToTwips(value);
        this.columnsInfo.columns[index].spacing = spacing;
        this.columnsInfo.recalculateColumnsBySpacingAfterIndex(index);
    };
    return ColumnsEditorController;
}());
exports.ColumnsEditorController = ColumnsEditorController;
var ColumnsInfoPreset = (function () {
    function ColumnsInfoPreset() {
    }
    ColumnsInfoPreset.prototype.getSpacing = function () { return 1800; };
    ColumnsInfoPreset.prototype.matchTo = function (_columnsInfo) { return false; };
    return ColumnsInfoPreset;
}());
exports.ColumnsInfoPreset = ColumnsInfoPreset;
var UniformColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(UniformColumnsInfoPreset, _super);
    function UniformColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UniformColumnsInfoPreset.prototype.getColumnCount = function () { return null; };
    UniformColumnsInfoPreset.prototype.matchTo = function (columnsInfo) {
        if (!columnsInfo.equalColumnWidth)
            return false;
        if (!columnsInfo.columnCount)
            return false;
        return columnsInfo.columnCount == this.getColumnCount();
    };
    UniformColumnsInfoPreset.prototype.applyTo = function (columnsInfo) {
        columnsInfo.equalColumnWidth = true;
        if (columnsInfo.columns.length > 0)
            columnsInfo.columns[0].spacing = this.getSpacing();
        columnsInfo.changeColumnCount(this.getColumnCount());
    };
    return UniformColumnsInfoPreset;
}(ColumnsInfoPreset));
exports.UniformColumnsInfoPreset = UniformColumnsInfoPreset;
var SingleColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(SingleColumnsInfoPreset, _super);
    function SingleColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingleColumnsInfoPreset.prototype.getColumnCount = function () { return 1; };
    return SingleColumnsInfoPreset;
}(UniformColumnsInfoPreset));
exports.SingleColumnsInfoPreset = SingleColumnsInfoPreset;
var TwoColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(TwoColumnsInfoPreset, _super);
    function TwoColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TwoColumnsInfoPreset.prototype.getColumnCount = function () { return 2; };
    return TwoColumnsInfoPreset;
}(UniformColumnsInfoPreset));
exports.TwoColumnsInfoPreset = TwoColumnsInfoPreset;
var ThreeColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(ThreeColumnsInfoPreset, _super);
    function ThreeColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ThreeColumnsInfoPreset.prototype.getColumnCount = function () { return 3; };
    return ThreeColumnsInfoPreset;
}(UniformColumnsInfoPreset));
exports.ThreeColumnsInfoPreset = ThreeColumnsInfoPreset;
var TwoNonUniformColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(TwoNonUniformColumnsInfoPreset, _super);
    function TwoNonUniformColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TwoNonUniformColumnsInfoPreset.prototype.getFirstColumnRelativeWidth = function () { return null; };
    TwoNonUniformColumnsInfoPreset.prototype.matchTo = function (columnsInfo) {
        if (columnsInfo.equalColumnWidth)
            return false;
        if (columnsInfo.columnCount != 2)
            return false;
        if (columnsInfo.columns.length != 2)
            return false;
        if (!columnsInfo.columns[0].width)
            return false;
        if (!columnsInfo.columns[0].spacing && columnsInfo.columns[1].spacing != 0)
            return false;
        if (!columnsInfo.columns[1].width)
            return false;
        if (!columnsInfo.columns[1].spacing && columnsInfo.columns[1].spacing != 0)
            return false;
        var totalWidth = columnsInfo.pageWidth - this.getSpacing();
        if (columnsInfo.columns[0].width != Math.round(totalWidth * this.getFirstColumnRelativeWidth()))
            return false;
        if (columnsInfo.columns[0].spacing != this.getSpacing())
            return false;
        if (columnsInfo.columns[1].width != Math.round(totalWidth - columnsInfo.columns[0].width))
            return false;
        return columnsInfo.columns[1].spacing == 0;
    };
    TwoNonUniformColumnsInfoPreset.prototype.applyTo = function (columnsInfo) {
        columnsInfo.equalColumnWidth = false;
        columnsInfo.changeColumnCount(2);
        var totalWidth = columnsInfo.pageWidth - this.getSpacing();
        columnsInfo.columns[0].width = Math.round(totalWidth * this.getFirstColumnRelativeWidth());
        columnsInfo.columns[0].spacing = this.getSpacing();
        columnsInfo.columns[1].width = Math.round(totalWidth - columnsInfo.columns[0].width);
        columnsInfo.columns[1].spacing = 0;
    };
    return TwoNonUniformColumnsInfoPreset;
}(ColumnsInfoPreset));
exports.TwoNonUniformColumnsInfoPreset = TwoNonUniformColumnsInfoPreset;
var LeftNarrowColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(LeftNarrowColumnsInfoPreset, _super);
    function LeftNarrowColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LeftNarrowColumnsInfoPreset.prototype.getFirstColumnRelativeWidth = function () { return 0.292; };
    return LeftNarrowColumnsInfoPreset;
}(TwoNonUniformColumnsInfoPreset));
exports.LeftNarrowColumnsInfoPreset = LeftNarrowColumnsInfoPreset;
var RightNarrowColumnsInfoPreset = (function (_super) {
    tslib_1.__extends(RightNarrowColumnsInfoPreset, _super);
    function RightNarrowColumnsInfoPreset() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RightNarrowColumnsInfoPreset.prototype.getFirstColumnRelativeWidth = function () { return 0.708; };
    return RightNarrowColumnsInfoPreset;
}(TwoNonUniformColumnsInfoPreset));
exports.RightNarrowColumnsInfoPreset = RightNarrowColumnsInfoPreset;
