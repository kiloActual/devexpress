"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_properties_history_items_1 = require("../../../core/model/history/items/document-properties-history-items");
var paragraph_properties_history_items_1 = require("../../../core/model/history/items/paragraph-properties-history-items");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var sub_document_1 = require("../../../core/model/sub-document");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogTabsCommand = (function (_super) {
    tslib_1.__extends(DialogTabsCommand, _super);
    function DialogTabsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogTabsCommand.prototype.createParameters = function (_options) {
        var parameters = new DialogTabsParameters();
        parameters.defaultTabStop = this.control.modelManager.model.defaultTabWidth;
        var paragraphIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        if (this.paragraphsHasEqualTabProperties(paragraphIndices))
            parameters.tabProperties = this.selection.activeSubDocument.paragraphs[paragraphIndices[0]].tabs.clone();
        else
            parameters.tabProperties = new paragraph_style_1.TabProperties();
        return parameters;
    };
    DialogTabsCommand.prototype.applyParameters = function (_state, newParams, initParams) {
        var modelManipulator = this.modelManipulator;
        this.history.beginTransaction();
        if (newParams.defaultTabStop && newParams.defaultTabStop !== initParams.defaultTabStop)
            this.history.addAndRedo(new document_properties_history_items_1.DocumentDefaultTabWidthHistoryItem(modelManipulator, newParams.defaultTabStop));
        this.deleteAllTabs();
        var paragraphIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        for (var i = 0, tabInfo = void 0; tabInfo = newParams.tabProperties.tabsInfo[i]; i++) {
            for (var j = paragraphIndices.length - 1; j >= 0; j--) {
                var paragraphIndex = paragraphIndices[j];
                var paragraph = this.selection.activeSubDocument.paragraphs[paragraphIndex];
                this.history.addAndRedo(new paragraph_properties_history_items_1.InsertTabToParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, paragraph.interval), tabInfo));
            }
        }
        this.history.endTransaction();
        return true;
    };
    DialogTabsCommand.prototype.deleteAllTabs = function () {
        var modelManipulator = this.modelManipulator;
        var paragraphIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        for (var i = paragraphIndices.length - 1; i >= 0; i--) {
            var paragraph = this.selection.activeSubDocument.paragraphs[paragraphIndices[i]];
            var interval = paragraph.interval;
            var tabs = paragraph.getTabs();
            var tab = void 0;
            while (tab = tabs.positions.pop())
                this.history.addAndRedo(new paragraph_properties_history_items_1.DeleteTabAtParagraphHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, interval), tab));
        }
    };
    DialogTabsCommand.prototype.paragraphsHasEqualTabProperties = function (paragraphIndices) {
        var firstParagraph = this.selection.activeSubDocument.paragraphs[paragraphIndices[0]];
        for (var i = paragraphIndices.length - 1; i > 0; i--) {
            var paragraph = this.selection.activeSubDocument.paragraphs[paragraphIndices[i]];
            if (!firstParagraph.tabs.equals(paragraph.tabs))
                return false;
        }
        return true;
    };
    DialogTabsCommand.prototype.getDialogName = function () {
        return "Tabs";
    };
    return DialogTabsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogTabsCommand = DialogTabsCommand;
var DialogTabsParameters = (function (_super) {
    tslib_1.__extends(DialogTabsParameters, _super);
    function DialogTabsParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogTabsParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.defaultTabStop = obj.defaultTabStop;
        this.tabProperties = obj.tabProperties.clone();
    };
    DialogTabsParameters.prototype.clone = function () {
        var newInstance = new DialogTabsParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    DialogTabsParameters.prototype.applyConverter = function (converter) {
        if (this.defaultTabStop)
            this.defaultTabStop = converter(this.defaultTabStop);
        return this;
    };
    return DialogTabsParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.DialogTabsParameters = DialogTabsParameters;
