"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/character/enums");
var character_properties_history_items_1 = require("../../../core/model/history/items/character-properties-history-items");
var sub_document_1 = require("../../../core/model/sub-document");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogSymbolsCommandBase = (function (_super) {
    tslib_1.__extends(DialogSymbolsCommandBase, _super);
    function DialogSymbolsCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSymbolsCommandBase.prototype.getDialogName = function () {
        return "Symbols";
    };
    return DialogSymbolsCommandBase;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogSymbolsCommandBase = DialogSymbolsCommandBase;
var DialogSymbolsCommand = (function (_super) {
    tslib_1.__extends(DialogSymbolsCommand, _super);
    function DialogSymbolsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSymbolsCommand.prototype.getState = function () {
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals));
    };
    DialogSymbolsCommand.prototype.createParameters = function (_options) {
        var charProps = this.inputPosition.getMergedCharacterPropertiesRaw();
        var parameters = new DialogSymbolsParameters();
        parameters.fontName = charProps.fontInfo ? charProps.fontInfo.name : this.control.modelManager.model.defaultCharacterProperties.fontInfo.name;
        return parameters;
    };
    DialogSymbolsCommand.prototype.applyParameters = function (state, newParams) {
        this.history.beginTransaction();
        var modelManipulator = this.modelManipulator;
        var maskedCharacterProperties = this.inputPosition.getMaskedCharacterProperties();
        var fontInfo = this.control.modelManager.model.cache.fontInfoCache.getItemByName(newParams.fontName) || null;
        maskedCharacterProperties.fontInfo = fontInfo;
        maskedCharacterProperties.setUseValue(enums_1.CharacterPropertiesMask.UseFontName, true);
        for (var i = 0, interval = void 0; interval = state.intervals[i]; i++) {
            if (interval.length > 0)
                this.history.addAndRedo(new character_properties_history_items_1.FontNameHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, interval), fontInfo, true));
        }
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText)
            .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, newParams.symbol));
        this.history.endTransaction();
        return true;
    };
    return DialogSymbolsCommand;
}(DialogSymbolsCommandBase));
exports.DialogSymbolsCommand = DialogSymbolsCommand;
var DialogServiceSymbolsCommand = (function (_super) {
    tslib_1.__extends(DialogServiceSymbolsCommand, _super);
    function DialogServiceSymbolsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogServiceSymbolsCommand.prototype.createParameters = function (options) {
        this.dialogCustomNumberingListParameters = options.param;
        var parameters = new DialogSymbolsParameters();
        parameters.fontName = options.param.levels[options.param.currentLevel].fontName;
        return parameters;
    };
    DialogServiceSymbolsCommand.prototype.applyParameters = function (_state, newParams) {
        var level = this.dialogCustomNumberingListParameters.levels[this.dialogCustomNumberingListParameters.currentLevel];
        level.fontName = newParams.fontName;
        level.displayFormatString = newParams.symbol;
        return false;
    };
    DialogServiceSymbolsCommand.prototype.afterClosing = function () {
        var clientCommand = client_command_1.RichEditClientCommand.ShowCustomNumberingListForm;
        this.control.commandManager.getCommand(clientCommand).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, this.dialogCustomNumberingListParameters));
    };
    return DialogServiceSymbolsCommand;
}(DialogSymbolsCommandBase));
exports.DialogServiceSymbolsCommand = DialogServiceSymbolsCommand;
var DialogSymbolsParameters = (function (_super) {
    tslib_1.__extends(DialogSymbolsParameters, _super);
    function DialogSymbolsParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSymbolsParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.symbol = obj.symbol;
        this.fontName = obj.fontName;
    };
    DialogSymbolsParameters.prototype.clone = function () {
        var newInstance = new DialogSymbolsParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    DialogSymbolsParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return DialogSymbolsParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.DialogSymbolsParameters = DialogSymbolsParameters;
