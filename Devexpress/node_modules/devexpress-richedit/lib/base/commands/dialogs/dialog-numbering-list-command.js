"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var dialog_custom_numbering_list_command_1 = require("./dialog-custom-numbering-list-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogNumberingListCommand = (function (_super) {
    tslib_1.__extends(DialogNumberingListCommand, _super);
    function DialogNumberingListCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogNumberingListCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = (control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.numberingBulleted) ||
            control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.numberingMultiLevel) ||
            control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.numberingSimple)) &&
            !this.selection.specialRunInfo.isPictureSelected();
        return state;
    };
    DialogNumberingListCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && (control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.numberingBulleted) || control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.numberingMultiLevel) || control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.numberingSimple));
    };
    DialogNumberingListCommand.prototype.createParameters = function (options) {
        var dialogParameters = new DialogNumberingListParameters();
        if (options.param instanceof numbering_list_1.AbstractNumberingList)
            dialogParameters.selectedAbstractNumberingList = options.param;
        else if (!this.areThereParagraphsInDifferentLists())
            dialogParameters.selectedAbstractNumberingList = this.getSelectedAbstractNumberingList();
        var paragraphsIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        var levelIndex = -1;
        for (var i = 0; i < paragraphsIndices.length; i++) {
            var paragraph = this.selection.activeSubDocument.paragraphs[paragraphsIndices[i]];
            if (paragraph.isInList())
                levelIndex = levelIndex < 0 ? paragraph.getListLevelIndex() : Math.min(levelIndex, paragraph.getListLevelIndex());
            else {
                levelIndex = 0;
                break;
            }
        }
        dialogParameters.currentLevel = levelIndex;
        return dialogParameters;
    };
    DialogNumberingListCommand.prototype.areThereParagraphsInDifferentLists = function () {
        var prevNumbListIndex = -1;
        var paragraphsIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        var paragraphsIndicesLength = paragraphsIndices.length;
        for (var i = 0; i < paragraphsIndicesLength; i++) {
            var paragraphIndex = paragraphsIndices[i];
            var paragraph = this.selection.activeSubDocument.paragraphs[paragraphIndex];
            if (!paragraph.isInList())
                continue;
            if (prevNumbListIndex == -1) {
                prevNumbListIndex = paragraph.numberingListIndex;
                continue;
            }
            if (prevNumbListIndex != paragraph.numberingListIndex)
                return true;
        }
        return false;
    };
    DialogNumberingListCommand.prototype.getSelectedAbstractNumberingList = function () {
        var listIndex = this.getFirstNumberingListIndex();
        if (listIndex == -1)
            return null;
        var list = this.control.modelManager.model.numberingLists[listIndex];
        return list.getAbstractNumberingList();
    };
    DialogNumberingListCommand.prototype.getFirstNumberingListIndex = function () {
        var paragraphsIndices = this.selection.activeSubDocument.getParagraphIndicesByIntervals(this.selection.intervals);
        var paragraphsIndicesLength = paragraphsIndices.length;
        for (var i = 0; i < paragraphsIndicesLength; i++) {
            var paragraphIndex = paragraphsIndices[i];
            var paragraph = this.selection.activeSubDocument.paragraphs[paragraphIndex];
            if (paragraph.isInList())
                return paragraph.numberingListIndex;
        }
        return -1;
    };
    DialogNumberingListCommand.prototype.applyParameters = function (_state, params) {
        var firstParagraph = this.selection.activeSubDocument.getParagraphByPosition(this.selection.intervals[0].start);
        if (params.selectedAbstractNumberingList) {
            if (this.selection.isCollapsed() && firstParagraph.isInList()) {
                var abstractNumberingList = firstParagraph.getAbstractNumberingList();
                var levelIndex = firstParagraph.getListLevelIndex();
                var newParams = new dialog_custom_numbering_list_command_1.DialogCustomNumberingListParameters();
                newParams.init(this.colorProvider, abstractNumberingList);
                newParams.levels[levelIndex].copyFrom(newParams.initLevel(this.colorProvider, params.selectedAbstractNumberingList.levels[levelIndex]));
                var dialogCustomNumberingListCommand = new dialog_custom_numbering_list_command_1.DialogCustomNumberingListCommand(this.control);
                dialogCustomNumberingListCommand.applyParameters(_state, newParams);
            }
            else
                this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertNumerationToParagraphs)
                    .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, params.selectedAbstractNumberingList));
            return true;
        }
        else if (params.selectedAbstractNumberingList === null) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteNumerationFromParagraphs).execute(this.control.commandManager.isPublicApiCall);
            return true;
        }
        return false;
    };
    DialogNumberingListCommand.prototype.getDialogName = function () {
        return "NumberingList";
    };
    return DialogNumberingListCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogNumberingListCommand = DialogNumberingListCommand;
var DialogNumberingListParameters = (function (_super) {
    tslib_1.__extends(DialogNumberingListParameters, _super);
    function DialogNumberingListParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentLevel = 0;
        return _this;
    }
    DialogNumberingListParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.selectedAbstractNumberingList = obj.selectedAbstractNumberingList;
    };
    DialogNumberingListParameters.prototype.clone = function () {
        var newInstance = new DialogNumberingListParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    DialogNumberingListParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return DialogNumberingListParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.DialogNumberingListParameters = DialogNumberingListParameters;
