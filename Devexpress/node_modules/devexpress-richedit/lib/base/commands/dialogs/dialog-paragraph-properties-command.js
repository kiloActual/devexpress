"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("../../../core/model/color/color");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var control_1 = require("../../../core/model/options/control");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var paragraph_properties_helper_1 = require("../../../core/model/paragraph/paragraph-properties-helper");
var rich_utils_1 = require("../../../core/model/rich-utils");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var color_2 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var common_1 = require("@devexpress/utils/lib/utils/common");
var DialogParagraphPropertiesCommand = (function (_super) {
    tslib_1.__extends(DialogParagraphPropertiesCommand, _super);
    function DialogParagraphPropertiesCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogParagraphPropertiesCommand.prototype.getState = function () {
        var state = new command_states_1.IntervalCommandStateEx(this.isEnabled(), list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals));
        state.visible = control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.paragraphFormatting);
        return state;
    };
    DialogParagraphPropertiesCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.paragraphFormatting);
    };
    DialogParagraphPropertiesCommand.prototype.getIntervalsForModifying = function () {
        return rich_utils_1.RichUtils.getIntervalsOfSelectedParagraphs(this.selection.intervals, this.selection.activeSubDocument);
    };
    DialogParagraphPropertiesCommand.prototype.createParameters = function (_options) {
        var parameters = new ParagraphDialogParameters();
        parameters.init(this.colorProvider, this.inputPosition.getMergedParagraphPropertiesRaw(), this.inputPosition.getMergedSectionPropertiesRaw());
        return parameters;
    };
    DialogParagraphPropertiesCommand.prototype.applyParameters = function (_state, newParams, initParams) {
        var newProps = new paragraph_properties_1.ParagraphProperties();
        if (newParams.leftIndent != null) {
            var leftIndent = newParams.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Hanging ?
                newParams.leftIndent + newParams.firstLineIndent :
                newParams.leftIndent;
            newProps.leftIndent = leftIndent !== initParams.leftIndent || newParams.firstLineIndentType !== initParams.firstLineIndentType ?
                leftIndent : undefined;
        }
        else
            newProps.leftIndent = undefined;
        newProps.alignment = newParams.alignment != null && newParams.alignment !== initParams.alignment ? newParams.alignment : undefined;
        newProps.contextualSpacing = newParams.contextualSpacing != null && newParams.contextualSpacing !== initParams.contextualSpacing ?
            newParams.contextualSpacing : undefined;
        newProps.firstLineIndent = newParams.firstLineIndent != null && newParams.firstLineIndent !== initParams.firstLineIndent ?
            newParams.firstLineIndent : undefined;
        newProps.firstLineIndentType = newParams.firstLineIndentType != null && newParams.firstLineIndentType !== initParams.firstLineIndentType ?
            newParams.firstLineIndentType : undefined;
        newProps.keepLinesTogether = newParams.keepLinesTogether !== initParams.keepLinesTogether ?
            newParams.keepLinesTogether : undefined;
        newProps.spacingAfter = newParams.spacingAfter != null && newParams.spacingAfter !== initParams.spacingAfter ?
            newParams.spacingAfter : undefined;
        newProps.spacingBefore = newParams.spacingBefore != null && newParams.spacingBefore !== initParams.spacingBefore ?
            newParams.spacingBefore : undefined;
        newProps.pageBreakBefore = newParams.pageBreakBefore !== initParams.pageBreakBefore ?
            newParams.pageBreakBefore : undefined;
        newProps.rightIndent = newParams.rightIndent != null && newParams.rightIndent !== initParams.rightIndent ?
            newParams.rightIndent : undefined;
        newProps.outlineLevel = newParams.outlineLevel !== initParams.outlineLevel ?
            newParams.outlineLevel : undefined;
        newProps.lineSpacingType = newParams.lineSpacingType != null && newParams.lineSpacingType !== initParams.lineSpacingType ?
            newParams.lineSpacingType : undefined;
        newProps.widowOrphanControl = newParams.widowOrphanControl !== initParams.widowOrphanControl ?
            newParams.widowOrphanControl : undefined;
        newProps.shadingInfo = newParams.backColor !== initParams.backColor ?
            shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(newParams.backColor == null ? color_1.ColorHelper.AUTOMATIC_COLOR : color_2.ColorUtils.fromString(newParams.backColor))) : undefined;
        if ((newParams.lineSpacingType === paragraph_properties_1.ParagraphLineSpacingType.AtLeast || newParams.lineSpacingType === paragraph_properties_1.ParagraphLineSpacingType.Exactly) &&
            (newParams.lineSpacing != null && (newProps.lineSpacingType !== undefined || newParams.lineSpacing !== initParams.lineSpacing)))
            newProps.lineSpacing = newParams.lineSpacing;
        else if (newParams.lineSpacingType === paragraph_properties_1.ParagraphLineSpacingType.Multiple && (newParams.lineSpacingMultiple != null &&
            (newProps.lineSpacingType !== undefined || newParams.lineSpacingMultiple !== initParams.lineSpacingMultiple)))
            newProps.lineSpacing = newParams.lineSpacingMultiple;
        else
            newProps.lineSpacing = undefined;
        return new paragraph_properties_helper_1.ParagraphPropertiesApplier(this.control.modelManager, this.inputPosition, newProps, this.control.selection.activeSubDocument, this.control.selection.intervals).apply();
    };
    DialogParagraphPropertiesCommand.prototype.getDialogName = function () {
        return "EditParagraph";
    };
    return DialogParagraphPropertiesCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogParagraphPropertiesCommand = DialogParagraphPropertiesCommand;
var ParagraphDialogParameters = (function (_super) {
    tslib_1.__extends(ParagraphDialogParameters, _super);
    function ParagraphDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphDialogParameters.prototype.init = function (colorProvider, parProps, secProps) {
        this.alignment = parProps.alignment;
        this.outlineLevel = parProps.outlineLevel;
        this.rightIndent = parProps.rightIndent;
        this.spacingAfter = parProps.spacingAfter;
        this.spacingBefore = parProps.spacingBefore;
        this.lineSpacingType = parProps.lineSpacingType;
        this.firstLineIndentType = parProps.firstLineIndentType;
        this.firstLineIndent = parProps.firstLineIndent;
        this.contextualSpacing = parProps.contextualSpacing;
        this.keepLinesTogether = parProps.keepLinesTogether;
        this.pageBreakBefore = parProps.pageBreakBefore;
        this.pageWidth = secProps.pageWidth - secProps.marginLeft - secProps.marginRight;
        this.leftIndent = parProps.firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.Hanging ? parProps.leftIndent - parProps.firstLineIndent : parProps.leftIndent;
        this.backColor = common_1.isDefined(parProps.shadingInfo) ? this.getColor(parProps.shadingInfo.getActualColor(colorProvider)) : undefined;
        this.widowOrphanControl = parProps.widowOrphanControl;
        switch (parProps.lineSpacingType) {
            case paragraph_properties_1.ParagraphLineSpacingType.AtLeast:
            case paragraph_properties_1.ParagraphLineSpacingType.Exactly:
                this.lineSpacing = parProps.lineSpacing;
                this.lineSpacingMultiple = 3;
                break;
            case paragraph_properties_1.ParagraphLineSpacingType.Multiple:
                this.lineSpacing = 240;
                this.lineSpacingMultiple = parProps.lineSpacing;
                break;
            default:
                this.lineSpacing = 240;
                this.lineSpacingMultiple = 3;
                break;
        }
    };
    ParagraphDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.alignment = obj.alignment;
        this.outlineLevel = obj.outlineLevel;
        this.rightIndent = obj.rightIndent;
        this.spacingBefore = obj.spacingBefore;
        this.spacingAfter = obj.spacingAfter;
        this.lineSpacingType = obj.lineSpacingType;
        this.firstLineIndentType = obj.firstLineIndentType;
        this.firstLineIndent = obj.firstLineIndent;
        this.contextualSpacing = obj.contextualSpacing;
        this.keepLinesTogether = obj.keepLinesTogether;
        this.pageBreakBefore = obj.pageBreakBefore;
        this.pageWidth = obj.pageWidth;
        this.leftIndent = obj.leftIndent;
        this.lineSpacing = obj.lineSpacing;
        this.lineSpacingMultiple = obj.lineSpacingMultiple;
        this.backColor = obj.backColor;
        this.widowOrphanControl = obj.widowOrphanControl;
    };
    ParagraphDialogParameters.prototype.clone = function () {
        var newInstance = new ParagraphDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    ParagraphDialogParameters.prototype.applyConverter = function (converter) {
        if (this.pageWidth)
            this.pageWidth = converter(this.pageWidth);
        if (this.firstLineIndent)
            this.firstLineIndent = converter(this.firstLineIndent);
        if (this.leftIndent)
            this.leftIndent = converter(this.leftIndent);
        if (this.lineSpacing)
            this.lineSpacing = converter(this.lineSpacing);
        if (this.rightIndent)
            this.rightIndent = converter(this.rightIndent);
        if (this.spacingAfter)
            this.spacingAfter = converter(this.spacingAfter);
        if (this.spacingBefore)
            this.spacingBefore = converter(this.spacingBefore);
        return this;
    };
    ParagraphDialogParameters.prototype.getColor = function (color) {
        if (color === color_1.ColorHelper.AUTOMATIC_COLOR)
            return null;
        if (color != undefined)
            return color_2.ColorUtils.colorToHash(color).toUpperCase();
        else
            return undefined;
    };
    return ParagraphDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.ParagraphDialogParameters = ParagraphDialogParameters;
