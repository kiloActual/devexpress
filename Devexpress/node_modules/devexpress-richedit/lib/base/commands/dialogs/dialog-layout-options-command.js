"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bounds_calculator_1 = require("../../../core/layout-formatter/formatter/utils/bounds-calculator");
var anchor_info_1 = require("../../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../../core/model/floating-objects/enums");
var sizes_1 = require("../../../core/model/floating-objects/sizes");
var text_box_properties_1 = require("../../../core/model/floating-objects/text-box-properties");
var change_rectangular_object_history_item_1 = require("../../../core/model/history/items/change-rectangular-object-history-item");
var anchor_info_property_history_item_1 = require("../../../core/model/history/items/floating-objects/anchor-info-property-history-item");
var change_anchored_picture_size_history_item_1 = require("../../../core/model/history/items/floating-objects/change-anchored-picture-size-history-item");
var change_anchored_text_box_size_history_item_1 = require("../../../core/model/history/items/floating-objects/change-anchored-text-box-size-history-item");
var change_text_box_properties_history_item_1 = require("../../../core/model/history/items/floating-objects/change-text-box-properties-history-item");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var run_type_1 = require("../../../core/model/runs/run-type");
var shape_1 = require("../../../core/model/shapes/shape");
var sub_document_1 = require("../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var model_states_1 = require("../../scroll/model-states");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogLayoutOptionsCommand = (function (_super) {
    tslib_1.__extends(DialogLayoutOptionsCommand, _super);
    function DialogLayoutOptionsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogLayoutOptionsCommand.prototype.getState = function () {
        var enabled = this.isEnabled();
        var state = new command_states_1.SimpleCommandState(enabled);
        state.visible = enabled;
        return state;
    };
    DialogLayoutOptionsCommand.prototype.isEnabled = function () {
        var specialRunInfo = this.selection.specialRunInfo;
        return _super.prototype.isEnabled.call(this) && specialRunInfo.isSelected() &&
            this.getFloatingObjectParentSubDocument().isEditable([new fixed_1.FixedInterval(specialRunInfo.getPosition(), 1)]);
    };
    DialogLayoutOptionsCommand.prototype.createParameters = function (_options) {
        var dialogParameters = new LayoutOptionsDialogParameters();
        var specialRunInfo = this.selection.specialRunInfo;
        var run = specialRunInfo.getParentSubDocument().getRunByPosition(specialRunInfo.getPosition());
        if (run.getType() === run_type_1.RunType.InlinePictureRun)
            dialogParameters.init(null, run.size, null, this.control);
        else {
            if (run.getType() === run_type_1.RunType.AnchoredPictureRun) {
                var anchoredRun = run;
                dialogParameters.init(anchoredRun.anchorInfo, anchoredRun.size, null, this.control);
            }
            else {
                var anchoredRun = run;
                dialogParameters.init(anchoredRun.anchorInfo, anchoredRun.size, anchoredRun.textBoxProperties, this.control);
            }
        }
        return dialogParameters;
    };
    DialogLayoutOptionsCommand.prototype.applyParameters = function (_state, params, initParams) {
        var specialRunInfo = this.selection.specialRunInfo;
        var position = specialRunInfo.getPosition();
        var interval = new fixed_1.FixedInterval(position, 1);
        var subDocument = specialRunInfo.getParentSubDocument();
        var run = subDocument.getRunByPosition(position);
        var modelManipulator = this.modelManipulator;
        var anchorInfoManipulator = modelManipulator.floatingObject.anchorInfo;
        var topInfo = this.control.viewManager.canvasManager.getScrollTopInfo();
        var history = this.history;
        history.beginTransaction();
        var changed = false;
        var sizeChanged = false;
        if (initParams.wrapType !== null && params.wrapType === null && run.getType() === run_type_1.RunType.AnchoredPictureRun) {
            var pictureRun = run;
            this.history.beginTransaction();
            var charPropsBundle = this.inputPosition.charPropsBundle;
            this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, interval), true, false);
            var insertedResult = this.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(this.selection.activeSubDocument, interval.start), charPropsBundle, new insert_picture_manipulator_params_1.InlinePictureInfo(pictureRun.size, pictureRun.shape, -1, pictureRun.info.containerProperties, pictureRun.info.nonVisualDrawingProperties));
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(insertedResult.insertedInterval)));
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(this.selection).setModelPosition(insertedResult.insertedInterval.end).useStdRelativePosition().useStdOffset());
            this.history.endTransaction();
            run = subDocument.getRunByPosition(interval.start);
            changed = true;
        }
        if (initParams.wrapType === null && params.wrapType !== null && run.getType() === run_type_1.RunType.InlinePictureRun) {
            var pictureRun = run;
            var newAnchorInfo = new anchor_info_1.AnchorInfo();
            newAnchorInfo.zOrder = this.modelManipulator.floatingObject.zOrder.getNewZOrder(this.selection.activeSubDocument);
            this.history.beginTransaction();
            var charPropsBundle = this.inputPosition.charPropsBundle;
            this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, interval), true, false);
            var insertedResult = this.modelManipulator.picture.insertAnchoredPictureViaHistory(new sub_document_1.SubDocumentPosition(this.selection.activeSubDocument, interval.start), charPropsBundle, new insert_picture_manipulator_params_1.AnchorPictureInfo(pictureRun.size, new shape_1.Shape(), newAnchorInfo, pictureRun.info.containerProperties, pictureRun.info.nonVisualDrawingProperties), new image_loading_options_1.ImageLoadingOptions(true));
            this.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.modelManipulator, this.selection, this.selection.getState(), this.selection.getState().setInterval(insertedResult.insertedInterval)));
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(this.selection).setModelPosition(insertedResult.insertedInterval.end).useStdRelativePosition().useStdOffset());
            this.history.endTransaction();
            run = subDocument.getRunByPosition(interval.start);
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.horizontalPositionAlignment !== undefined && params.horizontalPositionAlignment != initParams.horizontalPositionAlignment) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.horizontalPositionAlignment, anchorInfoManipulator.horizontalPositionAlignment));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.horizontalPositionType !== undefined && params.horizontalPositionType != initParams.horizontalPositionType) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.horizontalPositionType, anchorInfoManipulator.horizontalPositionType));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.offsetX !== undefined && params.offsetX != initParams.offsetX) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.offsetX, anchorInfoManipulator.offsetX));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.percentOffsetX !== undefined && params.percentOffsetX != initParams.percentOffsetX) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.percentOffsetX, anchorInfoManipulator.percentOffsetX));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.verticalPositionAlignment !== undefined && params.verticalPositionAlignment != initParams.verticalPositionAlignment) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.verticalPositionAlignment, anchorInfoManipulator.verticalPositionAlignment));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.verticalPositionType !== undefined && params.verticalPositionType != initParams.verticalPositionType) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.verticalPositionType, anchorInfoManipulator.verticalPositionType));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.offsetY !== undefined && params.offsetY != initParams.offsetY) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.offsetY, anchorInfoManipulator.offsetY));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.percentOffsetY !== undefined && params.percentOffsetY != initParams.percentOffsetY) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.percentOffsetY, anchorInfoManipulator.percentOffsetY));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.locked !== undefined && params.locked != initParams.locked) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.locked, anchorInfoManipulator.locked));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.wrapType !== undefined && params.wrapType !== null && params.wrapType != initParams.wrapType) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.wrapType, anchorInfoManipulator.wrapType));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.wrapSide !== undefined && params.wrapSide != initParams.wrapSide) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.wrapSide, anchorInfoManipulator.wrapSide));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.topDistance !== undefined && params.topDistance != initParams.topDistance) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.topDistance, anchorInfoManipulator.topDistance));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.bottomDistance !== undefined && params.bottomDistance != initParams.bottomDistance) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.bottomDistance, anchorInfoManipulator.bottomDistance));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.leftDistance !== undefined && params.leftDistance != initParams.leftDistance) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.leftDistance, anchorInfoManipulator.leftDistance));
            changed = true;
        }
        if (run.getType() != run_type_1.RunType.InlinePictureRun && params.rightDistance !== undefined && params.rightDistance != initParams.rightDistance) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.rightDistance, anchorInfoManipulator.rightDistance));
            changed = true;
        }
        var size = run.size.clone();
        if (params.absoluteHeight !== undefined && params.absoluteHeight != initParams.absoluteHeight || params.absoluteWidth !== undefined && params.absoluteWidth != initParams.absoluteWidth) {
            if (size instanceof sizes_1.PictureSize) {
                var pictureRun = run;
                var scaleX = (params.absoluteWidth / pictureRun.size.originalSize.width) * 100;
                var scaleY = (params.absoluteHeight / pictureRun.size.originalSize.height) * 100;
                var scale = new size_1.Size(scaleX, scaleY);
                size.scale = scale;
            }
            else {
                size.absoluteSize.width = params.absoluteWidth;
                size.absoluteSize.height = params.absoluteHeight;
            }
            sizeChanged = true;
        }
        if (initParams.useAbsoluteHeight !== undefined && params.useAbsoluteHeight !== initParams.useAbsoluteHeight && size instanceof sizes_1.AnchorTextBoxSize) {
            if (params.useAbsoluteHeight) {
                size.absoluteSize.height = params.absoluteHeight;
                params.textBoxProperties.resizeShapeToFitText = false;
            }
            size.setUseAbsoluteHeight(params.useAbsoluteHeight);
            sizeChanged = true;
        }
        if (initParams.useAbsoluteWidth !== undefined && params.useAbsoluteWidth !== initParams.useAbsoluteWidth && size instanceof sizes_1.AnchorTextBoxSize) {
            if (params.useAbsoluteWidth)
                size.absoluteSize.width = params.absoluteWidth;
            size.setUseAbsoluteWidth(params.useAbsoluteWidth);
            sizeChanged = true;
        }
        if (initParams.relativeHeight !== undefined && params.relativeHeight !== initParams.relativeHeight && size instanceof sizes_1.AnchorTextBoxSize) {
            size.relativeSize.height = params.relativeHeight;
            sizeChanged = true;
        }
        if (initParams.relativeWidth !== undefined && params.relativeWidth !== initParams.relativeWidth && size instanceof sizes_1.AnchorTextBoxSize) {
            size.relativeSize.width = params.relativeWidth;
            sizeChanged = true;
        }
        if (initParams.relativeHeightType !== undefined && params.relativeHeightType !== initParams.relativeHeightType && size instanceof sizes_1.AnchorTextBoxSize) {
            size.relativeHeightType = params.relativeHeightType;
            sizeChanged = true;
        }
        if (initParams.relativeWidthType !== undefined && params.relativeWidthType !== initParams.relativeWidthType && size instanceof sizes_1.AnchorTextBoxSize) {
            size.relativeWidthType = params.relativeWidthType;
            sizeChanged = true;
        }
        if (params.rotation !== undefined && params.rotation != initParams.rotation) {
            size.rotation = unit_converter_1.UnitConverter.degreesToTwips(params.rotation);
            sizeChanged = true;
        }
        if (params.lockAspectRatio !== undefined && params.lockAspectRatio != initParams.lockAspectRatio) {
            size.lockAspectRatio = params.lockAspectRatio;
            sizeChanged = true;
        }
        if (params.isBehindDoc !== undefined && params.isBehindDoc != initParams.isBehindDoc) {
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.isBehindDoc, anchorInfoManipulator.isBehindDoc));
            changed = true;
        }
        if (sizeChanged) {
            if (size instanceof sizes_1.PictureSize)
                if (run.getType() === run_type_1.RunType.InlinePictureRun) {
                    history.addAndRedo(new change_rectangular_object_history_item_1.ChangeRectangularObjectScaleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), size.scale));
                    if (params.lockAspectRatio != initParams.lockAspectRatio)
                        history.addAndRedo(new change_rectangular_object_history_item_1.ChangeRectangularObjectLockAspectRatioHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), size.lockAspectRatio));
                }
                else
                    history.addAndRedo(new change_anchored_picture_size_history_item_1.ChangeAnchoredPictureSizeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), size));
            else
                history.addAndRedo(new change_anchored_text_box_size_history_item_1.ChangeAnchoredTextBoxSizeHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), size));
            changed = true;
        }
        if (initParams.textBoxProperties !== undefined && !params.textBoxProperties.equals(initParams.textBoxProperties)) {
            history.addAndRedo(new change_text_box_properties_history_item_1.ChangeTextBoxPropertiesHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), params.textBoxProperties));
            changed = true;
        }
        history.endTransaction();
        if (topInfo)
            this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byScrollInfo.setPageInfo(topInfo));
        return changed;
    };
    DialogLayoutOptionsCommand.prototype.getDialogName = function () {
        return "LayoutOptions";
    };
    return DialogLayoutOptionsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogLayoutOptionsCommand = DialogLayoutOptionsCommand;
var LayoutOptionsDialogParameters = (function (_super) {
    tslib_1.__extends(LayoutOptionsDialogParameters, _super);
    function LayoutOptionsDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutOptionsDialogParameters.prototype.init = function (anchorInfo, size, textBoxProperties, control) {
        var isAnchoredObject = anchorInfo !== null;
        this.horizontalPositionType = isAnchoredObject ? anchorInfo.horizontalPositionType : enums_1.AnchorObjectHorizontalPositionType.Column;
        this.horizontalPositionAlignment = isAnchoredObject ? anchorInfo.horizontalPositionAlignment : enums_1.AnchorObjectHorizontalPositionAlignment.Center;
        this.verticalPositionType = isAnchoredObject ? anchorInfo.verticalPositionType : enums_1.AnchorObjectVerticalPositionType.Paragraph;
        this.verticalPositionAlignment = isAnchoredObject ? anchorInfo.verticalPositionAlignment : enums_1.AnchorObjectVerticalPositionAlignment.Top;
        this.offsetX = isAnchoredObject ? anchorInfo.offset.x : null;
        this.offsetY = isAnchoredObject ? anchorInfo.offset.y : null;
        this.percentOffsetX = isAnchoredObject ? anchorInfo.percentOffset.x : null;
        this.percentOffsetY = isAnchoredObject ? anchorInfo.percentOffset.y : null;
        this.locked = isAnchoredObject ? anchorInfo.locked : null;
        this.wrapType = isAnchoredObject ? anchorInfo.wrapType : null;
        this.wrapSide = isAnchoredObject ? anchorInfo.wrapSide : null;
        this.isBehindDoc = isAnchoredObject ? anchorInfo.isBehindDoc : null;
        this.leftDistance = isAnchoredObject ? anchorInfo.leftDistance : null;
        this.rightDistance = isAnchoredObject ? anchorInfo.rightDistance : null;
        this.topDistance = isAnchoredObject ? anchorInfo.topDistance : null;
        this.bottomDistance = isAnchoredObject ? anchorInfo.bottomDistance : null;
        this.rotation = unit_converter_1.UnitConverter.twipsToDegrees(size.rotation);
        this.lockAspectRatio = size.lockAspectRatio;
        if (size instanceof sizes_1.PictureSize) {
            var pictureSize = size;
            this.originalWidth = pictureSize.originalSize.width;
            this.originalHeight = pictureSize.originalSize.height;
            this.absoluteWidth = (pictureSize.originalSize.width * pictureSize.scale.width) / 100;
            this.absoluteHeight = (pictureSize.originalSize.height * pictureSize.scale.height) / 100;
        }
        else {
            var section = control.modelManager.model.getSectionByPosition(control.selection.intervals[0].start);
            var boundsCalculator = new bounds_calculator_1.BoundsCalculator();
            boundsCalculator.init(section);
            var textBoxSize = size;
            this.useAbsoluteHeight = textBoxSize.useAbsoluteHeight();
            this.useAbsoluteWidth = textBoxSize.useAbsoluteWidth();
            this.absoluteWidth = this.useAbsoluteWidth ?
                textBoxSize.absoluteSize.width :
                unit_converter_1.UnitConverter.pixelsToTwips(textBoxSize.getActualRelativeWidth(boundsCalculator));
            this.absoluteHeight = this.useAbsoluteHeight ?
                textBoxSize.absoluteSize.height :
                unit_converter_1.UnitConverter.pixelsToTwips(textBoxSize.getActualRelativeHeight(boundsCalculator));
            this.relativeWidth = textBoxSize.relativeSize.width;
            this.relativeHeight = textBoxSize.relativeSize.height;
            this.relativeWidthType = textBoxSize.relativeWidthType;
            this.relativeHeightType = textBoxSize.relativeHeightType;
            this.originalWidth = this.absoluteWidth;
            this.originalHeight = this.absoluteHeight;
        }
        if (isAnchoredObject) {
            if (anchorInfo.isUsedHorizontalAlignment())
                this.horizontalAligmentType = LayoutDialogAlignmentType.Alignment;
            else if (anchorInfo.isUsedHorizontalBookLayout())
                this.horizontalAligmentType = LayoutDialogAlignmentType.BookLayout;
            else
                this.horizontalAligmentType = anchorInfo.isUsedHorizontalRelativePosition() ? LayoutDialogAlignmentType.Relative : LayoutDialogAlignmentType.Absolute;
            if (anchorInfo.isUsedVerticalAlignment())
                this.verticalAligmentType = LayoutDialogAlignmentType.Alignment;
            else
                this.verticalAligmentType = anchorInfo.isUsedVerticalRelativePosition() ? LayoutDialogAlignmentType.Relative : LayoutDialogAlignmentType.Absolute;
        }
        else {
            this.horizontalAligmentType = LayoutDialogAlignmentType.Absolute;
            this.verticalAligmentType = LayoutDialogAlignmentType.Absolute;
        }
        if (textBoxProperties)
            this.textBoxProperties = new text_box_properties_1.TextBoxProperties(textBoxProperties.getContentMargins());
    };
    LayoutOptionsDialogParameters.prototype.copyFrom = function (obj) {
        this.horizontalPositionType = obj.horizontalPositionType;
        this.horizontalPositionAlignment = obj.horizontalPositionAlignment;
        this.verticalPositionType = obj.verticalPositionType;
        this.verticalPositionAlignment = obj.verticalPositionAlignment;
        this.offsetX = obj.offsetX;
        this.offsetY = obj.offsetY;
        this.percentOffsetX = obj.percentOffsetX;
        this.percentOffsetY = obj.percentOffsetY;
        this.locked = obj.locked;
        this.wrapType = obj.wrapType;
        this.wrapSide = obj.wrapSide;
        this.isBehindDoc = obj.isBehindDoc;
        this.leftDistance = obj.leftDistance;
        this.rightDistance = obj.rightDistance;
        this.topDistance = obj.topDistance;
        this.bottomDistance = obj.bottomDistance;
        this.originalWidth = obj.originalWidth;
        this.originalHeight = obj.originalHeight;
        this.absoluteHeight = obj.absoluteHeight;
        this.absoluteWidth = obj.absoluteWidth;
        this.useAbsoluteHeight = obj.useAbsoluteHeight;
        this.useAbsoluteWidth = obj.useAbsoluteWidth;
        this.relativeHeight = obj.relativeHeight;
        this.relativeWidth = obj.relativeWidth;
        this.relativeHeightType = obj.relativeHeightType;
        this.relativeWidthType = obj.relativeWidthType;
        this.rotation = obj.rotation;
        this.lockAspectRatio = obj.lockAspectRatio;
        this.horizontalAligmentType = obj.horizontalAligmentType;
        this.verticalAligmentType = obj.verticalAligmentType;
        this.textBoxProperties = obj.textBoxProperties ? obj.textBoxProperties.clone() : obj.textBoxProperties;
    };
    LayoutOptionsDialogParameters.prototype.clone = function () {
        var newInstance = new LayoutOptionsDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    LayoutOptionsDialogParameters.prototype.applyConverter = function (converterFunc) {
        if (this.offsetX)
            this.offsetX = converterFunc(this.offsetX);
        if (this.offsetY)
            this.offsetY = converterFunc(this.offsetY);
        if (this.leftDistance)
            this.leftDistance = converterFunc(this.leftDistance);
        if (this.rightDistance)
            this.rightDistance = converterFunc(this.rightDistance);
        if (this.topDistance)
            this.topDistance = converterFunc(this.topDistance);
        if (this.bottomDistance)
            this.bottomDistance = converterFunc(this.bottomDistance);
        if (this.absoluteHeight)
            this.absoluteHeight = converterFunc(this.absoluteHeight);
        if (this.absoluteWidth)
            this.absoluteWidth = converterFunc(this.absoluteWidth);
        if (this.originalWidth)
            this.originalWidth = converterFunc(this.originalWidth);
        if (this.originalHeight)
            this.originalHeight = converterFunc(this.originalHeight);
        if (this.textBoxProperties)
            this.textBoxProperties.setMarginsToAnotherMeasuringSystem(converterFunc);
        return this;
    };
    return LayoutOptionsDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.LayoutOptionsDialogParameters = LayoutOptionsDialogParameters;
var LayoutDialogAlignmentType;
(function (LayoutDialogAlignmentType) {
    LayoutDialogAlignmentType[LayoutDialogAlignmentType["Alignment"] = 0] = "Alignment";
    LayoutDialogAlignmentType[LayoutDialogAlignmentType["BookLayout"] = 1] = "BookLayout";
    LayoutDialogAlignmentType[LayoutDialogAlignmentType["Absolute"] = 2] = "Absolute";
    LayoutDialogAlignmentType[LayoutDialogAlignmentType["Relative"] = 3] = "Relative";
})(LayoutDialogAlignmentType = exports.LayoutDialogAlignmentType || (exports.LayoutDialogAlignmentType = {}));
