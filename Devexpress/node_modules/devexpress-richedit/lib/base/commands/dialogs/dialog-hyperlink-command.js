"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var field_context_menu_helper_1 = require("../../../core/model/fields/field-context-menu-helper");
var apply_field_hyperlink_style_history_item_1 = require("../../../core/model/history/items/apply-field-hyperlink-style-history-item");
var change_field_hyperlink_info_history_item_1 = require("../../../core/model/history/items/change-field-hyperlink-info-history-item");
var field_insert_history_item_1 = require("../../../core/model/history/items/field-insert-history-item");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var create_field_command_1 = require("../fields/create-field-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogHyperlinkCommandBase = (function (_super) {
    tslib_1.__extends(DialogHyperlinkCommandBase, _super);
    function DialogHyperlinkCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogHyperlinkCommandBase.prototype.getState = function (options) {
        var state = new command_states_1.SimpleCommandState(this.isEnabled(options));
        state.value = this.getStateValue();
        state.visible = this.isVisible();
        return state;
    };
    DialogHyperlinkCommandBase.prototype.getStateValue = function () {
        return this.getSelectedField();
    };
    DialogHyperlinkCommandBase.prototype.isEnabled = function (options) {
        var sdInterval = options ? options.intervalsInfo.subDocInterval : this.selection.subDocumentInterval;
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.hyperlinks) &&
            !(options ? options.intervalsInfo.multiselection : this.selection.multiselection) &&
            create_field_command_1.CreateFieldCommandBase.isTableProtectionOk(sdInterval);
    };
    DialogHyperlinkCommandBase.prototype.isVisible = function () {
        return control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.hyperlinks);
    };
    DialogHyperlinkCommandBase.prototype.createParameters = function (options) {
        var parameters = new DialogHyperlinkParameters();
        parameters.canChangeDisplayText = field_context_menu_helper_1.FieldContextMenuHelper.canChangeHyperlinkDisplayText(options.intervalsInfo.subDocInterval);
        var field = this.getState().value;
        if (field) {
            var hyperlinkInfo = field.getHyperlinkInfo();
            parameters.url = hyperlinkInfo.uri;
            parameters.anchor = hyperlinkInfo.anchor;
            parameters.tooltip = hyperlinkInfo.tip;
            parameters.text = field_context_menu_helper_1.FieldContextMenuHelper.getHyperlinkResultText(options.subDocument, field);
        }
        else
            parameters.text = parameters.canChangeDisplayText ? options.subDocument.getText(options.intervalsInfo.interval) : "";
        parameters.bookmarkNames = list_1.ListUtils.map(this.control.modelManager.model.getAllBookmarks(false), function (bm) { return bm.name; });
        return parameters;
    };
    DialogHyperlinkCommandBase.prototype.applyParameters = function (state, newParams, initParams) {
        if (newParams.tooltip == initParams.tooltip && newParams.url == initParams.url && newParams.anchor == initParams.anchor && newParams.text == initParams.text)
            return;
        var hyperlinkInfo = new field_1.HyperlinkInfo(newParams.url, newParams.anchor, newParams.tooltip, false);
        if (hyperlinkInfo.anchor == "" && hyperlinkInfo.uri == "")
            return;
        var modelManipulator = this.modelManipulator;
        var selection = this.selection;
        var subDocument = this.selection.activeSubDocument;
        var history = this.history;
        var oldSelection = selection.lastSelectedInterval;
        if (oldSelection.end == subDocument.getDocumentEndPosition()) {
            oldSelection.length--;
            if (oldSelection.length < 0)
                return;
        }
        history.beginTransaction();
        this.control.beginUpdate();
        var field = this.getField(state.value);
        history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(modelManipulator, subDocument, field.index, hyperlinkInfo));
        if (newParams.tooltip != initParams.tooltip || newParams.url != initParams.url || newParams.anchor != initParams.anchor) {
            selection.deprecatedSetSelection(field.getCodeStartPosition(), field.getSeparatorPosition(), false, selection.keepX, false, false);
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, field_1.HyperlinkInfo.getNewCodeText(hyperlinkInfo)));
        }
        if (initParams.canChangeDisplayText && newParams.text != initParams.text || field.getResultInterval().length == 0) {
            selection.deprecatedSetSelection(field.getResultStartPosition(), field.getResultEndPosition(), false, selection.keepX, false, false);
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, !newParams.text || newParams.text == "" ? hyperlinkInfo.getUriPlusAnchor() : newParams.text));
        }
        history.addAndRedo(new apply_field_hyperlink_style_history_item_1.ApplyFieldHyperlinkStyleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.selection.activeSubDocument, field.getResultInterval())));
        selection.deprecatedSetSelection(field.getFieldEndPosition(), field.getFieldEndPosition(), false, selection.keepX, false, false);
        this.control.endUpdate();
        history.endTransaction();
        return true;
    };
    DialogHyperlinkCommandBase.prototype.getField = function (stateValue) {
        var field;
        if (stateValue) {
            field = stateValue;
            field.showCode = false;
        }
        else {
            var selection = this.selection;
            var subDocument = this.selection.activeSubDocument;
            var initSelectionInterval = selection.lastSelectedInterval;
            this.history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(this.modelManipulator, subDocument, initSelectionInterval.start, 0, initSelectionInterval.length, false, this.inputPosition.charPropsBundle));
            var fieldIndex = field_1.Field.normedBinaryIndexOf(subDocument.fields, initSelectionInterval.start + 1);
            field = subDocument.fields[fieldIndex];
        }
        return field;
    };
    DialogHyperlinkCommandBase.prototype.showCreateHyperlinkItem = function () {
        return field_context_menu_helper_1.FieldContextMenuHelper.showCreateHyperlinkItem(this.selection.activeSubDocument.fields, this.selection.lastSelectedInterval);
    };
    DialogHyperlinkCommandBase.prototype.getSelectedField = function () {
        return field_context_menu_helper_1.FieldContextMenuHelper.showHyperlinkItems(this.selection.activeSubDocument.fields, this.selection.lastSelectedInterval);
    };
    DialogHyperlinkCommandBase.prototype.hasOneSelectedHyperlink = function () {
        return !!this.getSelectedField();
    };
    DialogHyperlinkCommandBase.prototype.getDialogName = function () {
        return "Hyperlink";
    };
    return DialogHyperlinkCommandBase;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogHyperlinkCommandBase = DialogHyperlinkCommandBase;
var DialogCreateOrEditHyperlinkCommand = (function (_super) {
    tslib_1.__extends(DialogCreateOrEditHyperlinkCommand, _super);
    function DialogCreateOrEditHyperlinkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogCreateOrEditHyperlinkCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && (this.showCreateHyperlinkItem() || this.hasOneSelectedHyperlink());
    };
    return DialogCreateOrEditHyperlinkCommand;
}(DialogHyperlinkCommandBase));
exports.DialogCreateOrEditHyperlinkCommand = DialogCreateOrEditHyperlinkCommand;
var DialogCreateHyperlinkCommand = (function (_super) {
    tslib_1.__extends(DialogCreateHyperlinkCommand, _super);
    function DialogCreateHyperlinkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogCreateHyperlinkCommand.prototype.isVisible = function () {
        return _super.prototype.isVisible.call(this) && this.showCreateHyperlinkItem();
    };
    return DialogCreateHyperlinkCommand;
}(DialogHyperlinkCommandBase));
exports.DialogCreateHyperlinkCommand = DialogCreateHyperlinkCommand;
var DialogEditHyperlinkCommand = (function (_super) {
    tslib_1.__extends(DialogEditHyperlinkCommand, _super);
    function DialogEditHyperlinkCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogEditHyperlinkCommand.prototype.isVisible = function () {
        return _super.prototype.isVisible.call(this) && this.hasOneSelectedHyperlink();
    };
    return DialogEditHyperlinkCommand;
}(DialogHyperlinkCommandBase));
exports.DialogEditHyperlinkCommand = DialogEditHyperlinkCommand;
var DialogHyperlinkParameters = (function (_super) {
    tslib_1.__extends(DialogHyperlinkParameters, _super);
    function DialogHyperlinkParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.url = "";
        _this.text = "";
        _this.tooltip = "";
        _this.anchor = "";
        _this.bookmarkNames = [];
        _this.canChangeDisplayText = true;
        return _this;
    }
    DialogHyperlinkParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.anchor = obj.anchor;
        this.url = obj.url;
        this.text = obj.text;
        this.tooltip = obj.tooltip;
        this.canChangeDisplayText = obj.canChangeDisplayText;
        this.bookmarkNames = obj.bookmarkNames;
    };
    DialogHyperlinkParameters.prototype.clone = function () {
        var newInstance = new DialogHyperlinkParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    DialogHyperlinkParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return DialogHyperlinkParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.DialogHyperlinkParameters = DialogHyperlinkParameters;
