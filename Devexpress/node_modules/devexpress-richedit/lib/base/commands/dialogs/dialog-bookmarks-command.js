"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var bookmarks_1 = require("../../../core/model/bookmarks");
var control_1 = require("../../../core/model/options/control");
var list_1 = require("@devexpress/utils/lib/utils/list");
var i_rich_edit_core_1 = require("../../interfaces/i-rich-edit-core");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogBookmarksCommand = (function (_super) {
    tslib_1.__extends(DialogBookmarksCommand, _super);
    function DialogBookmarksCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogBookmarksCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.bookmarks);
        return state;
    };
    DialogBookmarksCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.bookmarks) && this.selection.intervals.length === 1;
    };
    DialogBookmarksCommand.prototype.createParameters = function (_options) {
        var parameters = new BookmarksDialogParameters();
        parameters.bookmarks = list_1.ListUtils.map(this.control.modelManager.model.getAllBookmarks(false), function (bm) { return new BookmarkDialogInfo(bm.name, bm.start); });
        parameters.allowedEditBookmarks = this.control.readOnly != i_rich_edit_core_1.ReadOnlyMode.Persistent;
        var selectedBookmarks = this.control.selection.activeSubDocument.findBookmarkByInterval(this.control.selection.intervals, false);
        parameters.selectedBookmarkName = selectedBookmarks.length ? selectedBookmarks[selectedBookmarks.length - 1].name : null;
        return parameters;
    };
    DialogBookmarksCommand.prototype.applyParameters = function (_state, newParams) {
        if (newParams.newBookmarkName) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.CreateBookmark)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, new bookmarks_1.ConstBookmark(this.selection.intervals[0], newParams.newBookmarkName)));
        }
        else if (newParams.deletedBookmarkNames.length > 0)
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteBookmarks).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, newParams.deletedBookmarkNames));
        return true;
    };
    DialogBookmarksCommand.prototype.getDialogName = function () {
        return "Bookmarks";
    };
    DialogBookmarksCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return DialogBookmarksCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogBookmarksCommand = DialogBookmarksCommand;
var BookmarkDialogInfo = (function () {
    function BookmarkDialogInfo(name, start) {
        this.name = name;
        this.start = start;
    }
    return BookmarkDialogInfo;
}());
exports.BookmarkDialogInfo = BookmarkDialogInfo;
var BookmarksDialogParameters = (function (_super) {
    tslib_1.__extends(BookmarksDialogParameters, _super);
    function BookmarksDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BookmarksDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.bookmarks = obj.bookmarks;
        this.deletedBookmarkNames = obj.deletedBookmarkNames;
        this.newBookmarkName = obj.newBookmarkName;
        this.allowedEditBookmarks = obj.allowedEditBookmarks;
    };
    BookmarksDialogParameters.prototype.clone = function () {
        var newInstance = new BookmarksDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    BookmarksDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return BookmarksDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.BookmarksDialogParameters = BookmarksDialogParameters;
