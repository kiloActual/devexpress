"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_properties_history_items_1 = require("../../../core/model/history/items/document-properties-history-items");
var section_properties_history_items_1 = require("../../../core/model/history/items/section-properties-history-items");
var control_1 = require("../../../core/model/options/control");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var command_states_1 = require("../command-states");
var section_properties_command_base_1 = require("../section-properties/section-properties-command-base");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogPageSetupCommand = (function (_super) {
    tslib_1.__extends(DialogPageSetupCommand, _super);
    function DialogPageSetupCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogPageSetupCommand.prototype.getState = function (options) {
        if (options === void 0) { options = this.convertToCommandOptions(undefined); }
        return new command_states_1.IntervalCommandStateEx(this.isEnabled(), section_properties_command_base_1.SectionPropertiesCommandBase.getIntervals(this.control, options.subDocument));
    };
    DialogPageSetupCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.sections) &&
            section_properties_command_base_1.SectionPropertiesCommandBase.rangePermissionIncludeFullSection(this.control, this.selection.activeSubDocument, this.selection.intervals);
    };
    DialogPageSetupCommand.prototype.createParameters = function (_options) {
        var dialogParams = new PageSetupDialogParameters();
        dialogParams.init(this.inputPosition.getMergedSectionPropertiesRaw(), this.getInitialTab(), this.control.modelManager.model.differentOddAndEvenPages);
        return dialogParams;
    };
    DialogPageSetupCommand.prototype.applyParameters = function (_state, newParams, initParams) {
        var interval = this.getInterval(newParams.applyTo);
        var isEqualIntervals = this.getInitInterval().equals(interval);
        var modelManipulator = this.modelManipulator;
        var history = this.history;
        this.inputPosition.resetSectionMergedProperties();
        history.beginTransaction();
        var changed = false;
        if (newParams.marginBottom !== undefined && (newParams.marginBottom !== initParams.marginBottom || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionMarginBottomHistoryItem(modelManipulator, interval, newParams.marginBottom));
            changed = true;
        }
        if (newParams.marginLeft !== undefined && (newParams.marginLeft !== initParams.marginLeft || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionMarginLeftHistoryItem(modelManipulator, interval, newParams.marginLeft));
            changed = true;
        }
        if (newParams.marginRight !== undefined && (newParams.marginRight !== initParams.marginRight || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionMarginRightHistoryItem(modelManipulator, interval, newParams.marginRight));
            changed = true;
        }
        if (newParams.marginTop !== undefined && (newParams.marginTop !== initParams.marginTop || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionMarginTopHistoryItem(modelManipulator, interval, newParams.marginTop));
            changed = true;
        }
        if ((newParams.pageWidth !== undefined && newParams.pageHeight !== undefined) &&
            (newParams.pageWidth !== initParams.pageWidth || newParams.pageHeight !== initParams.pageHeight || !isEqualIntervals)) {
            var sections = this.control.modelManager.model.getSectionsByInterval(interval);
            for (var i = 0, section; section = sections[i]; i++) {
                var sectionInterval = new fixed_1.FixedInterval(section.startLogPosition.value, section.getLength() - 1);
                if (section.sectionProperties.landscape !== (newParams.pageWidth > newParams.pageHeight))
                    history.addAndRedo(new section_properties_history_items_1.SectionLandscapeHistoryItem(modelManipulator, sectionInterval, newParams.pageWidth > newParams.pageHeight));
                history.addAndRedo(new section_properties_history_items_1.SectionPageWidthHistoryItem(modelManipulator, sectionInterval, newParams.pageWidth));
                history.addAndRedo(new section_properties_history_items_1.SectionPageHeightHistoryItem(modelManipulator, sectionInterval, newParams.pageHeight));
            }
            changed = true;
        }
        if (newParams.paperKind !== undefined && newParams.paperKind !== initParams.paperKind) {
            history.addAndRedo(new section_properties_history_items_1.SectionPaperKindHistoryItem(modelManipulator, interval, newParams.paperKind));
            changed = true;
        }
        if (newParams.startType !== undefined && newParams.startType !== initParams.startType) {
            history.addAndRedo(new section_properties_history_items_1.SectionStartTypeHistoryItem(modelManipulator, interval, newParams.startType));
            changed = true;
        }
        if (newParams.headerDifferentFirstPage !== undefined && (newParams.headerDifferentFirstPage !== initParams.headerDifferentFirstPage || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionDifferentFirstPageHistoryItem(modelManipulator, interval, newParams.headerDifferentFirstPage));
            changed = true;
        }
        if (newParams.headerDifferentOddAndEven !== undefined && (newParams.headerDifferentOddAndEven !== initParams.headerDifferentOddAndEven || !isEqualIntervals)) {
            history.addAndRedo(new document_properties_history_items_1.DifferentOddAndEvenPagesHistoryItem(modelManipulator, newParams.headerDifferentOddAndEven));
            changed = true;
        }
        if (newParams.headerOffset !== undefined && (newParams.headerOffset !== initParams.headerOffset || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionHeaderOffsetHistoryItem(modelManipulator, interval, newParams.headerOffset));
            changed = true;
        }
        if (newParams.footerOffset !== undefined && (newParams.footerOffset !== initParams.footerOffset || !isEqualIntervals)) {
            history.addAndRedo(new section_properties_history_items_1.SectionFooterOffsetHistoryItem(modelManipulator, interval, newParams.footerOffset));
            changed = true;
        }
        history.endTransaction();
        return changed;
    };
    DialogPageSetupCommand.prototype.getInterval = function (applyTo) {
        if (applyTo == SectionPropertiesApplyType.WholeDocument)
            return new fixed_1.FixedInterval(0, this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() - 1);
        if (this.selection.activeSubDocument.isMain()) {
            var sectionIndices = this.control.modelManager.model.getSectionIndicesByIntervals(this.selection.intervals);
            var firstSection = this.control.modelManager.model.sections[sectionIndices[0]];
            if (applyTo == SectionPropertiesApplyType.SelectedSections) {
                var lastSection = this.control.modelManager.model.sections[sectionIndices[sectionIndices.length - 1]];
                return fixed_1.FixedInterval.fromPositions(firstSection.startLogPosition.value, lastSection.startLogPosition.value + lastSection.getLength() - 1);
            }
            if (applyTo == SectionPropertiesApplyType.ThisPointForward)
                return fixed_1.FixedInterval.fromPositions(firstSection.startLogPosition.value, this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() - 1);
            return new fixed_1.FixedInterval(firstSection.startLogPosition.value, firstSection.getLength() - 1);
        }
        else if (this.selection.activeSubDocument.isHeaderFooter()) {
            var layoutPage = this.control.layout.pages[this.selection.pageIndex];
            if (layoutPage) {
                var position = layoutPage.getPosition();
                var section = this.control.modelManager.model.getSectionByPosition(position);
                if (applyTo === SectionPropertiesApplyType.CurrentSection || applyTo == SectionPropertiesApplyType.SelectedSections)
                    return new fixed_1.FixedInterval(section.startLogPosition.value, section.getLength());
                else if (applyTo === SectionPropertiesApplyType.ThisPointForward)
                    return fixed_1.FixedInterval.fromPositions(section.startLogPosition.value, this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() - 1);
            }
        }
    };
    DialogPageSetupCommand.prototype.getInitInterval = function () {
        if (this.selection.activeSubDocument.isMain()) {
            var sectionIndices = this.control.modelManager.model.getSectionIndicesByIntervals(this.selection.intervals);
            var firstSection = this.control.modelManager.model.sections[sectionIndices[0]];
            var lastSection = this.control.modelManager.model.sections[sectionIndices[sectionIndices.length - 1]];
            return fixed_1.FixedInterval.fromPositions(firstSection.startLogPosition.value, lastSection.startLogPosition.value + lastSection.getLength() - 1);
        }
        else {
            var layoutPage = this.control.layout.pages[this.selection.pageIndex];
            var section = this.control.modelManager.model.getSectionByPosition(layoutPage.getPosition());
            return new fixed_1.FixedInterval(section.startLogPosition.value, section.getLength());
        }
    };
    DialogPageSetupCommand.prototype.getInitialTab = function () {
        return PageSetupDialogTab.Margins;
    };
    DialogPageSetupCommand.prototype.getDialogName = function () {
        return "PageSetup";
    };
    return DialogPageSetupCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogPageSetupCommand = DialogPageSetupCommand;
var ShowPagePaperSetupFormCommand = (function (_super) {
    tslib_1.__extends(ShowPagePaperSetupFormCommand, _super);
    function ShowPagePaperSetupFormCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowPagePaperSetupFormCommand.prototype.getInitialTab = function () {
        return PageSetupDialogTab.Paper;
    };
    return ShowPagePaperSetupFormCommand;
}(DialogPageSetupCommand));
exports.ShowPagePaperSetupFormCommand = ShowPagePaperSetupFormCommand;
var PageSetupDialogParameters = (function (_super) {
    tslib_1.__extends(PageSetupDialogParameters, _super);
    function PageSetupDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageSetupDialogParameters.prototype.init = function (initSecProps, tabs, differentOddAndEvenPages) {
        this.applyTo = SectionPropertiesApplyType.WholeDocument;
        this.marginBottom = initSecProps.marginBottom;
        this.marginLeft = initSecProps.marginLeft;
        this.marginRight = initSecProps.marginRight;
        this.marginTop = initSecProps.marginTop;
        this.landscape = initSecProps.landscape;
        this.pageHeight = initSecProps.pageHeight;
        this.pageWidth = initSecProps.pageWidth;
        this.startType = initSecProps.startType;
        this.headerDifferentOddAndEven = differentOddAndEvenPages;
        this.headerDifferentFirstPage = initSecProps.differentFirstPage;
        this.headerOffset = initSecProps.headerOffset;
        this.footerOffset = initSecProps.footerOffset;
        this.paperKind = initSecProps.paperKind;
        this.initialTab = tabs;
    };
    PageSetupDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.marginBottom = obj.marginBottom;
        this.marginLeft = obj.marginLeft;
        this.marginRight = obj.marginRight;
        this.marginTop = obj.marginTop;
        this.landscape = obj.landscape;
        this.applyTo = obj.applyTo;
        this.pageHeight = obj.pageHeight;
        this.pageWidth = obj.pageWidth;
        this.startType = obj.startType;
        this.headerDifferentFirstPage = obj.headerDifferentFirstPage;
        this.headerDifferentOddAndEven = obj.headerDifferentOddAndEven;
        this.headerOffset = obj.headerOffset;
        this.footerOffset = obj.footerOffset;
        this.paperKind = obj.paperKind;
        this.initialTab = obj.initialTab;
    };
    PageSetupDialogParameters.prototype.clone = function () {
        var newInstance = new PageSetupDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    PageSetupDialogParameters.prototype.applyConverter = function (converter) {
        if (this.marginBottom)
            this.marginBottom = converter(this.marginBottom);
        if (this.marginLeft)
            this.marginLeft = converter(this.marginLeft);
        if (this.marginRight)
            this.marginRight = converter(this.marginRight);
        if (this.marginTop)
            this.marginTop = converter(this.marginTop);
        if (this.pageWidth)
            this.pageWidth = converter(this.pageWidth);
        if (this.pageHeight)
            this.pageHeight = converter(this.pageHeight);
        if (this.headerOffset)
            this.headerOffset = converter(this.headerOffset);
        if (this.footerOffset)
            this.footerOffset = converter(this.footerOffset);
        return this;
    };
    return PageSetupDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.PageSetupDialogParameters = PageSetupDialogParameters;
var SectionPropertiesApplyType;
(function (SectionPropertiesApplyType) {
    SectionPropertiesApplyType[SectionPropertiesApplyType["WholeDocument"] = 0] = "WholeDocument";
    SectionPropertiesApplyType[SectionPropertiesApplyType["CurrentSection"] = 1] = "CurrentSection";
    SectionPropertiesApplyType[SectionPropertiesApplyType["SelectedSections"] = 2] = "SelectedSections";
    SectionPropertiesApplyType[SectionPropertiesApplyType["ThisPointForward"] = 4] = "ThisPointForward";
})(SectionPropertiesApplyType = exports.SectionPropertiesApplyType || (exports.SectionPropertiesApplyType = {}));
var PageSetupDialogTab;
(function (PageSetupDialogTab) {
    PageSetupDialogTab[PageSetupDialogTab["Margins"] = 0] = "Margins";
    PageSetupDialogTab[PageSetupDialogTab["Paper"] = 1] = "Paper";
    PageSetupDialogTab[PageSetupDialogTab["Layout"] = 2] = "Layout";
})(PageSetupDialogTab = exports.PageSetupDialogTab || (exports.PageSetupDialogTab = {}));
