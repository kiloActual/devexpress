"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_1 = require("../../../core/model/character/character-properties");
var character_properties_helper_1 = require("../../../core/model/character/character-properties-helper");
var color_1 = require("../../../core/model/color/color");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var control_1 = require("../../../core/model/options/control");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var color_2 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogFontCommandBase = (function (_super) {
    tslib_1.__extends(DialogFontCommandBase, _super);
    function DialogFontCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogFontCommandBase.prototype.getDialogName = function () {
        return "EditFont";
    };
    DialogFontCommandBase.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.characterFormatting);
    };
    return DialogFontCommandBase;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogFontCommandBase = DialogFontCommandBase;
var DialogFontCommand = (function (_super) {
    tslib_1.__extends(DialogFontCommand, _super);
    function DialogFontCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogFontCommand.prototype.getState = function () {
        var state = new command_states_1.IntervalCommandStateEx(this.isEnabled(), this.getActualIntervals());
        state.visible = control_1.ControlOptions.isVisible(this.control.modelManager.richOptions.control.characterFormatting);
        return state;
    };
    DialogFontCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && (!this.selection.specialRunInfo.isPictureSelected() || !this.selection.specialRunInfo.isSelectedAnchorObject);
    };
    DialogFontCommand.prototype.getActualIntervals = function () {
        if (this.selection.isCollapsed())
            return [this.selection.activeSubDocument.getWholeWordInterval(this.selection.intervals[0].start)];
        return list_1.ListUtils.deepCopy(this.selection.intervalsInfo.intervals);
    };
    DialogFontCommand.prototype.createParameters = function (_options) {
        var parameters = new FontDialogParameters();
        parameters.init(this.colorProvider, this.inputPosition.getMergedCharacterPropertiesRaw());
        return parameters;
    };
    DialogFontCommand.prototype.applyParameters = function (_state, newParams, initParams) {
        var newProps = new character_properties_1.CharacterProperties();
        newProps.allCaps = newParams.allCaps !== initParams.allCaps ? newParams.allCaps : undefined;
        newProps.fontInfo = newParams.fontName !== null && newParams.fontName !== initParams.fontName ?
            (this.control.modelManager.model.cache.fontInfoCache.getItemByName(newParams.fontName) || undefined) : undefined;
        newProps.fontSize = newParams.fontSize !== null && newParams.fontSize !== initParams.fontSize ?
            newParams.fontSize : undefined;
        newProps.fontStrikeoutType = newParams.fontStrikeoutType !== null && newParams.fontStrikeoutType !== initParams.fontStrikeoutType ?
            newParams.fontStrikeoutType : undefined;
        newProps.fontBold = newParams.fontStyle !== null && newParams.fontStyle !== initParams.fontStyle && (newParams.fontStyle & 1) !== (initParams.fontStyle & 1) ?
            !!(newParams.fontStyle & 1) : undefined;
        newProps.fontItalic = newParams.fontStyle !== null && newParams.fontStyle !== initParams.fontStyle && (newParams.fontStyle & 2) !== (initParams.fontStyle & 2) ?
            !!(newParams.fontStyle & 2) : undefined;
        newProps.fontUnderlineType = newParams.fontUnderlineType !== null && newParams.fontUnderlineType !== initParams.fontUnderlineType ?
            newParams.fontUnderlineType : undefined;
        newProps.hidden = newParams.hidden !== initParams.hidden ? newParams.hidden : undefined;
        newProps.script = newParams.script !== null && newParams.script !== initParams.script ? newParams.script : undefined;
        newProps.underlineWordsOnly = newParams.underlineWordsOnly !== initParams.underlineWordsOnly ? newParams.underlineWordsOnly : undefined;
        newProps.textColor = newParams.fontColor !== null && newParams.fontColor !== initParams.fontColor ?
            color_model_info_1.ColorModelInfo.makeByColor(newParams.fontColor == "Auto" ? color_1.ColorHelper.AUTOMATIC_COLOR : color_2.ColorUtils.fromString(newParams.fontColor)) : undefined;
        newProps.underlineColor = newParams.fontUnderlineColor !== null && newParams.fontUnderlineColor !== initParams.fontUnderlineColor ?
            color_model_info_1.ColorModelInfo.makeByColor(newParams.fontUnderlineColor == "Auto" ? color_1.ColorHelper.AUTOMATIC_COLOR : color_2.ColorUtils.fromString(newParams.fontUnderlineColor))
            : undefined;
        var isResetBackColor = newParams.backColor !== initParams.backColor;
        newProps.shadingInfo = isResetBackColor ?
            shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(newParams.backColor === null ? color_1.ColorHelper.NO_COLOR : color_2.ColorUtils.fromString(newParams.backColor)))
            : undefined;
        newProps.highlightColor = isResetBackColor ? color_model_info_1.ColorModelInfo.noColor : undefined;
        newProps.strikeoutWordsOnly = undefined;
        newProps.noProof = undefined;
        newProps.strikeoutColor = undefined;
        newProps.langInfo = undefined;
        newProps.compositeFontInfo = undefined;
        return new character_properties_helper_1.CharacterPropertiesApplier(this.control.modelManager, this.inputPosition, newProps, this.control.selection.activeSubDocument, this.control.selection.intervals).apply();
    };
    return DialogFontCommand;
}(DialogFontCommandBase));
exports.DialogFontCommand = DialogFontCommand;
var DialogServiceFontCommand = (function (_super) {
    tslib_1.__extends(DialogServiceFontCommand, _super);
    function DialogServiceFontCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogServiceFontCommand.prototype.createParameters = function (options) {
        this.dialogCustomNumberingListParameters = options.param;
        var level = this.dialogCustomNumberingListParameters.levels[this.dialogCustomNumberingListParameters.currentLevel];
        var parameters = new FontDialogParameters();
        parameters.initServicePart(level);
        return parameters;
    };
    DialogServiceFontCommand.prototype.applyParameters = function (_state, params) {
        var level = this.dialogCustomNumberingListParameters.levels[this.dialogCustomNumberingListParameters.currentLevel];
        level.fontColor = params.fontColor;
        level.fontName = params.fontName;
        level.fontSize = params.fontSize;
        level.fontStyle = params.fontStyle;
        return false;
    };
    DialogServiceFontCommand.prototype.afterClosing = function () {
        var clientCommand = client_command_1.RichEditClientCommand.ShowCustomNumberingListForm;
        this.control.commandManager.getCommand(clientCommand).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, this.dialogCustomNumberingListParameters));
    };
    return DialogServiceFontCommand;
}(DialogFontCommandBase));
exports.DialogServiceFontCommand = DialogServiceFontCommand;
var FontDialogParameters = (function (_super) {
    tslib_1.__extends(FontDialogParameters, _super);
    function FontDialogParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fontName = null;
        _this.fontStyle = null;
        _this.fontSize = null;
        _this.fontColor = null;
        _this.backColor = null;
        _this.fontUnderlineType = null;
        _this.fontUnderlineColor = null;
        _this.fontStrikeoutType = null;
        _this.underlineWordsOnly = null;
        _this.script = null;
        _this.allCaps = null;
        _this.hidden = null;
        return _this;
    }
    FontDialogParameters.prototype.init = function (colorProvider, rawCharProps) {
        this.allCaps = rawCharProps.allCaps;
        this.fontColor = rawCharProps.textColor ? FontDialogParameters.getColor(rawCharProps.textColor.toRgb(colorProvider)) : undefined;
        this.backColor = rawCharProps.shadingInfo && rawCharProps.highlightColor ?
            FontDialogParameters.getColor(character_properties_1.CharacterProperties.getActualBackgroundColor(rawCharProps, colorProvider)) : undefined;
        this.fontName = rawCharProps.fontInfo ? rawCharProps.fontInfo.name : null;
        this.fontSize = rawCharProps.fontSize;
        this.fontStrikeoutType = rawCharProps.fontStrikeoutType;
        this.fontStyle = (rawCharProps.fontBold ? 1 : 0) | (rawCharProps.fontItalic ? 2 : 0);
        this.fontUnderlineColor = rawCharProps.underlineColor ? FontDialogParameters.getColor(rawCharProps.underlineColor.toRgb(colorProvider)) : undefined;
        this.fontUnderlineType = rawCharProps.fontUnderlineType;
        this.hidden = rawCharProps.hidden;
        this.script = rawCharProps.script;
        this.underlineWordsOnly = rawCharProps.underlineWordsOnly;
    };
    FontDialogParameters.getColor = function (color) {
        if (color === color_1.ColorHelper.AUTOMATIC_COLOR)
            return "Auto";
        if (color === color_1.ColorHelper.NO_COLOR)
            return null;
        return color !== undefined ? color_2.ColorUtils.colorToHash(color).toUpperCase() : undefined;
    };
    FontDialogParameters.prototype.initServicePart = function (level) {
        this.fontColor = level.fontColor;
        this.fontName = level.fontName;
        this.fontSize = level.fontSize;
        this.fontStyle = level.fontStyle;
    };
    FontDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.allCaps = obj.allCaps;
        this.fontColor = obj.fontColor;
        this.fontName = obj.fontName;
        this.fontSize = obj.fontSize;
        this.fontStrikeoutType = obj.fontStrikeoutType;
        this.fontStyle = obj.fontStyle;
        this.fontUnderlineColor = obj.fontUnderlineColor;
        this.fontUnderlineType = obj.fontUnderlineType;
        this.hidden = obj.hidden;
        this.script = obj.script;
        this.underlineWordsOnly = obj.underlineWordsOnly;
        this.backColor = obj.backColor;
    };
    FontDialogParameters.prototype.clone = function () {
        var newInstance = new FontDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    FontDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return FontDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.FontDialogParameters = FontDialogParameters;
