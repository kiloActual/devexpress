"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var spell_checker_1 = require("../../../core/spelling/spell-checker");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogSpellCheckerCommand = (function (_super) {
    tslib_1.__extends(DialogSpellCheckerCommand, _super);
    function DialogSpellCheckerCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSpellCheckerCommand.prototype.getState = function () {
        var selectedMisspelledInterval = this.control.spellChecker.getSelectedMisspelledInterval(this.selection.intervals);
        var state = new command_states_1.SimpleCommandState(this.isEnabled(), selectedMisspelledInterval);
        state.visible = selectedMisspelledInterval !== null;
        return state;
    };
    DialogSpellCheckerCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && this.control.spellChecker.settings.isEnabled;
    };
    DialogSpellCheckerCommand.prototype.createParameters = function (_options) {
        var parameters = new SpellCheckerDialogParameters();
        parameters.controller = new SpellCheckerDialogController(this.control, this.control.spellChecker);
        return parameters;
    };
    DialogSpellCheckerCommand.prototype.applyParameters = function (_state, _newParameters) {
        return true;
    };
    DialogSpellCheckerCommand.prototype.getDialogName = function () {
        return "Spelling";
    };
    return DialogSpellCheckerCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogSpellCheckerCommand = DialogSpellCheckerCommand;
var SpellCheckerDialogParameters = (function (_super) {
    tslib_1.__extends(SpellCheckerDialogParameters, _super);
    function SpellCheckerDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpellCheckerDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.controller = obj.controller;
    };
    SpellCheckerDialogParameters.prototype.clone = function () {
        var newInstance = new SpellCheckerDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    SpellCheckerDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return SpellCheckerDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.SpellCheckerDialogParameters = SpellCheckerDialogParameters;
var SpellCheckerDialogController = (function () {
    function SpellCheckerDialogController(control, spellChecker) {
        this.control = control;
        this.spellChecker = spellChecker;
    }
    Object.defineProperty(SpellCheckerDialogController.prototype, "isRepeatingError", {
        get: function () { return this.misspelledInterval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Repeating; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpellCheckerDialogController.prototype, "canAddToDictionary", {
        get: function () { return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.AddWordToDictionary).getState().enabled; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpellCheckerDialogController.prototype, "suggestions", {
        get: function () { return this.misspelledInterval.errorInfo.suggestions; },
        enumerable: true,
        configurable: true
    });
    SpellCheckerDialogController.prototype.tryFindNextError = function () {
        this.misspelledInterval = this.spellChecker.findNextMisspelledInterval(this.control.selection.intervals[0].start);
        if (this.misspelledInterval) {
            this.control.selection.deprecatedSetSelection(this.misspelledInterval.start, this.misspelledInterval.end, false, -1, true);
            return true;
        }
        else {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowSpellingCheckCompletedMessage).execute(this.control.commandManager.isPublicApiCall);
            return false;
        }
    };
    SpellCheckerDialogController.prototype.getContext = function () {
        return this.misspelledInterval.errorInfo.word;
    };
    SpellCheckerDialogController.prototype.ignoreOnce = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IgnoreSpellingError).execute(this.control.commandManager.isPublicApiCall);
    };
    SpellCheckerDialogController.prototype.ignoreAll = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.IgnoreAllSpellingErrors).execute(this.control.commandManager.isPublicApiCall);
    };
    SpellCheckerDialogController.prototype.addToDictionary = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.AddWordToDictionary).execute(this.control.commandManager.isPublicApiCall);
    };
    SpellCheckerDialogController.prototype.delete = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DeleteRepeatedWord).execute(this.control.commandManager.isPublicApiCall);
    };
    SpellCheckerDialogController.prototype.change = function (text) {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeSpellingError).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, text));
    };
    SpellCheckerDialogController.prototype.changeAll = function (text) {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeAllSpellingErrors).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, text));
    };
    return SpellCheckerDialogController;
}());
exports.SpellCheckerDialogController = SpellCheckerDialogController;
