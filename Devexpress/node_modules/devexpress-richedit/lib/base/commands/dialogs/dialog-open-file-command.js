"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var file_name_helper_1 = require("../../../core/formats/file-name-helper");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var json_top_level_enums_1 = require("../../../core/model/json/enums/json-top-level-enums");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogOpenFileCommand = (function (_super) {
    tslib_1.__extends(DialogOpenFileCommand, _super);
    function DialogOpenFileCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogOpenFileCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.open !== control_1.DocumentCapability.Hidden;
        return state;
    };
    DialogOpenFileCommand.prototype.createParameters = function (_options) {
        var parameters = new OpenFileDialogParameters();
        parameters.src = null;
        return parameters;
    };
    DialogOpenFileCommand.prototype.executeCore = function (state) {
        if (this.control.owner.hasWorkDirectory)
            return _super.prototype.executeCore.call(this, state, null);
        else
            return this.executeShowErrorMessageCommand();
    };
    DialogOpenFileCommand.prototype.applyParameters = function (_state, params) {
        if (this.control.getModifiedState() && !this.control.owner.confirmOnLosingChanges())
            return false;
        this.control.closeDocument();
        var reqParams = {};
        reqParams[json_top_level_enums_1.JSONInitSessionProperty.Src] = new file_name_helper_1.FileNameHelper(params.src, false).getFullPath();
        this.control.serverDispatcher.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.OpenDocument, -1, reqParams), new command_request_1.RequestParams(true, true, true));
    };
    DialogOpenFileCommand.prototype.getDialogName = function () {
        return "FileOpen";
    };
    DialogOpenFileCommand.prototype.executeShowErrorMessageCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorOpeningAndOverstoreImpossibleMessageCommand)
            .execute(this.control.commandManager.isPublicApiCall);
    };
    DialogOpenFileCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    DialogOpenFileCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.open) &&
            this.control.modelManager.model.isLoaded();
    };
    return DialogOpenFileCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogOpenFileCommand = DialogOpenFileCommand;
var OpenFileDialogParameters = (function (_super) {
    tslib_1.__extends(OpenFileDialogParameters, _super);
    function OpenFileDialogParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.src = null;
        return _this;
    }
    OpenFileDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.src = obj.src;
    };
    OpenFileDialogParameters.prototype.clone = function () {
        var newInstance = new OpenFileDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    OpenFileDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return OpenFileDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.OpenFileDialogParameters = OpenFileDialogParameters;
