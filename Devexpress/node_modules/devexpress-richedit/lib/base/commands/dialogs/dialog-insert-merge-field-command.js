"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogInsertMergeFieldCommand = (function (_super) {
    tslib_1.__extends(DialogInsertMergeFieldCommand, _super);
    function DialogInsertMergeFieldCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogInsertMergeFieldCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DialogInsertMergeFieldCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            this.control.modelManager.richOptions.mailMerge.allowInsertFields;
    };
    DialogInsertMergeFieldCommand.prototype.createParameters = function (_options) {
        return new InsertMergeFieldDialogParameters();
    };
    DialogInsertMergeFieldCommand.prototype.applyParameters = function (_state, params) {
        if (params.fieldName != null) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.CreateMergeField).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, params.fieldName));
            return true;
        }
        return false;
    };
    DialogInsertMergeFieldCommand.prototype.getDialogName = function () {
        return "InsertMergeField";
    };
    DialogInsertMergeFieldCommand.prototype.isModal = function () {
        return false;
    };
    return DialogInsertMergeFieldCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogInsertMergeFieldCommand = DialogInsertMergeFieldCommand;
var InsertMergeFieldDialogParameters = (function (_super) {
    tslib_1.__extends(InsertMergeFieldDialogParameters, _super);
    function InsertMergeFieldDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertMergeFieldDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.fieldName = obj.fieldName;
    };
    InsertMergeFieldDialogParameters.prototype.clone = function () {
        var newInstance = new InsertMergeFieldDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    InsertMergeFieldDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return InsertMergeFieldDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.InsertMergeFieldDialogParameters = InsertMergeFieldDialogParameters;
