"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var box_wrap_1 = require("../../../core/layout-formatter/box/box-wrap");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var layout_numbering_list_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-numbering-list-box");
var layout_text_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-text-box");
var layout_row_1 = require("../../../core/layout/main-structures/layout-row");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var list_level_character_properties_history_items_1 = require("../../../core/model/history/items/list-level-character-properties-history-items");
var list_level_paragraph_properties_history_items_1 = require("../../../core/model/history/items/list-level-paragraph-properties-history-items");
var list_level_properties_history_items_1 = require("../../../core/model/history/items/list-level-properties-history-items");
var numbering_list_history_items_1 = require("../../../core/model/history/items/numbering-list-history-items");
var number_converter_creator_1 = require("../../../core/model/number-converters/number-converter-creator");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var color_1 = require("@devexpress/utils/lib/utils/color");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogCustomNumberingListCommand = (function (_super) {
    tslib_1.__extends(DialogCustomNumberingListCommand, _super);
    function DialogCustomNumberingListCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogCustomNumberingListCommand.prototype.createParameters = function (options) {
        this.listType = options.param.listType;
        return options.param;
    };
    DialogCustomNumberingListCommand.prototype.applyParameters = function (_state, newParams) {
        var modelManipulator = this.modelManipulator;
        var activeSubDocument = this.selection.activeSubDocument;
        var history = this.history;
        var initParams = new DialogCustomNumberingListParameters();
        initParams.init(this.colorProvider, newParams.initAbstractNumberingList);
        if (initParams.equals(newParams)) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertNumerationToParagraphs)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, newParams.initAbstractNumberingList));
            return;
        }
        history.beginTransaction();
        var firstParagraph = activeSubDocument.getParagraphByPosition(this.selection.intervals[0].start);
        var abstractNumberingList = null;
        var abstractNumberingListIndex = -1;
        if (this.selection.isCollapsed() && firstParagraph.isInList()) {
            abstractNumberingList = newParams.initAbstractNumberingList;
            abstractNumberingListIndex = firstParagraph.getNumberingList().abstractNumberingListIndex;
            newParams.applyToParagraph = false;
        }
        else {
            abstractNumberingList = new numbering_list_1.AbstractNumberingList(this.control.modelManager.model);
            abstractNumberingList.copyFrom(newParams.initAbstractNumberingList);
            history.addAndRedo(new numbering_list_history_items_1.AddAbstractNumberingListHistoryItem(this.modelManipulator, abstractNumberingList));
            abstractNumberingListIndex = this.control.modelManager.model.abstractNumberingLists.length - 1;
        }
        for (var i = 0, length = newParams.levels.length; i < length; i++) {
            var level = newParams.levels[i];
            var initLevel = initParams.levels[i];
            if (level.displayFormatString != initLevel.displayFormatString)
                history.addAndRedo(new list_level_properties_history_items_1.ListLevelDisplayFormatStringHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.displayFormatString));
            if (level.format != initLevel.format)
                history.addAndRedo(new list_level_properties_history_items_1.ListLevelFormatHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.format));
            if (level.start != initLevel.start)
                history.addAndRedo(new list_level_properties_history_items_1.ListLevelStartHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.start));
            if (level.alignment != initLevel.alignment)
                history.addAndRedo(new list_level_properties_history_items_1.ListLevelAlignmentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.alignment));
            if (level.separator != initLevel.separator)
                history.addAndRedo(new list_level_properties_history_items_1.ListLevelSeparatorHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.separator));
            if (level.leftIndent != initLevel.leftIndent)
                history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphLeftIndentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.leftIndent, true));
            if (level.firstLineIndent != initLevel.firstLineIndent)
                history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphFirstLineIndentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.firstLineIndent, true));
            if (level.firstLineIndentType != initLevel.firstLineIndentType)
                history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphFirstLineIndentTypeHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.firstLineIndentType, true));
            var fontName = this.control.modelManager.model.cache.fontInfoCache.getItemByName(level.fontName);
            var initFontName = this.control.modelManager.model.cache.fontInfoCache.getItemByName(initLevel.fontName);
            if (fontName != initFontName)
                history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontNameHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, fontName, true));
            if (color_1.ColorUtils.fromHashString(level.fontColor) != color_1.ColorUtils.fromHashString(initLevel.fontColor))
                history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontTextColorHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, color_model_info_1.ColorModelInfo.makeByColor(color_1.ColorUtils.fromHashString(level.fontColor)), true));
            if (level.fontSize != initLevel.fontSize)
                history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontSizeHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, level.fontSize, true));
            var bold = !!(level.fontStyle & 1);
            var initBold = !!(initLevel.fontStyle & 1);
            if (bold != initBold)
                history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontBoldHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, bold, true));
            var italic = !!(level.fontStyle & 2);
            var initItalic = !!(initLevel.fontStyle & 2);
            if (italic != initItalic)
                history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontItalicHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, italic, true));
        }
        if (newParams.applyToParagraph)
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertNumerationToParagraphs)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, abstractNumberingList));
        history.endTransaction();
        return true;
    };
    DialogCustomNumberingListCommand.prototype.getDialogName = function () {
        switch (this.listType) {
            case numbering_list_1.NumberingType.Bullet:
                return "BulletedList";
            case numbering_list_1.NumberingType.Simple:
                return "SimpleNumberingList";
            case numbering_list_1.NumberingType.MultiLevel:
                return "MultiLevelNumberingList";
        }
        return null;
    };
    return DialogCustomNumberingListCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogCustomNumberingListCommand = DialogCustomNumberingListCommand;
var DialogCustomNumberingListParameters = (function (_super) {
    tslib_1.__extends(DialogCustomNumberingListParameters, _super);
    function DialogCustomNumberingListParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentLevel = 0;
        _this.levels = [];
        _this.coreInitialFontColors = [];
        _this.applyToParagraph = true;
        return _this;
    }
    DialogCustomNumberingListParameters.prototype.init = function (colorProvider, abstractNumberingList, currentLevel) {
        if (currentLevel != null)
            this.currentLevel = currentLevel;
        if (abstractNumberingList != null) {
            this.listType = abstractNumberingList.getListType();
            this.initAbstractNumberingList = abstractNumberingList;
            for (var i = 0; i < abstractNumberingList.levels.length; i++) {
                var level = this.initLevel(colorProvider, abstractNumberingList.levels[i]);
                this.levels.push(level);
            }
        }
    };
    DialogCustomNumberingListParameters.prototype.initLevel = function (colorProvider, listLevel) {
        var level = new CustomListlevel();
        var listLevelProperties = listLevel.getListLevelProperties();
        level.displayFormatString = listLevelProperties.displayFormatString;
        level.format = listLevelProperties.format;
        level.start = listLevelProperties.start;
        level.alignment = listLevelProperties.alignment;
        level.separator = listLevelProperties.separator;
        var paragraphProperties = listLevel.getParagraphProperties();
        level.leftIndent = paragraphProperties.leftIndent;
        level.firstLineIndent = paragraphProperties.firstLineIndent;
        level.firstLineIndentType = paragraphProperties.firstLineIndentType;
        var characterProperties = listLevel.getCharacterProperties();
        level.fontName = characterProperties.fontInfo.name;
        var foreColor = characterProperties.textColor.toRgb(colorProvider);
        level.fontColor = color_1.ColorUtils.colorToHash(foreColor);
        this.coreInitialFontColors.push(foreColor);
        level.fontSize = characterProperties.fontSize;
        level.fontStyle = (characterProperties.fontBold ? 1 : 0) | (characterProperties.fontItalic ? 2 : 0);
        return level;
    };
    DialogCustomNumberingListParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.currentLevel = obj.currentLevel;
        this.listType = obj.listType;
        this.applyToParagraph = obj.applyToParagraph;
        this.copyLevelsFrom(obj.levels);
    };
    DialogCustomNumberingListParameters.prototype.clone = function () {
        var newInstance = new DialogCustomNumberingListParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    DialogCustomNumberingListParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    DialogCustomNumberingListParameters.prototype.copyLevelsFrom = function (levels) {
        this.levels = [];
        for (var i = 0, length = levels.length; i < length; i++) {
            var level = new CustomListlevel();
            level.copyFrom(levels[i]);
            this.levels.push(level);
        }
    };
    DialogCustomNumberingListParameters.prototype.equals = function (obj) {
        for (var i = 0, level; level = obj.levels[i]; i++) {
            if (!level.equals(this.levels[i]))
                return false;
        }
        return true;
    };
    return DialogCustomNumberingListParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.DialogCustomNumberingListParameters = DialogCustomNumberingListParameters;
var CustomListlevel = (function () {
    function CustomListlevel() {
    }
    CustomListlevel.prototype.copyFrom = function (obj) {
        this.displayFormatString = obj.displayFormatString;
        this.format = obj.format;
        this.start = obj.start;
        this.alignment = obj.alignment;
        this.separator = obj.separator;
        this.leftIndent = obj.leftIndent;
        this.firstLineIndent = obj.firstLineIndent;
        this.firstLineIndentType = obj.firstLineIndentType;
        this.fontName = obj.fontName;
        this.fontColor = obj.fontColor;
        this.fontSize = obj.fontSize;
        this.fontStyle = obj.fontStyle;
    };
    CustomListlevel.prototype.equals = function (obj) {
        return this.displayFormatString == obj.displayFormatString &&
            this.format == obj.format &&
            this.start == obj.start &&
            this.alignment == obj.alignment &&
            this.separator == obj.separator &&
            this.leftIndent == obj.leftIndent &&
            this.firstLineIndent == obj.firstLineIndent &&
            this.firstLineIndentType == obj.firstLineIndentType &&
            this.fontName == obj.fontName &&
            this.fontColor == obj.fontColor &&
            this.fontSize == obj.fontSize &&
            this.fontStyle == obj.fontStyle;
    };
    return CustomListlevel;
}());
exports.CustomListlevel = CustomListlevel;
var NumberingListFormPreviewHelper = (function () {
    function NumberingListFormPreviewHelper(richEdit, abstractNumberingList, currentLevel) {
        this.richEdit = richEdit;
        this.abstractNumberingList = abstractNumberingList;
        this.currentLevel = currentLevel;
    }
    NumberingListFormPreviewHelper.prototype.createPreview = function () {
        var preview = document.createElement("div");
        for (var i = 0; i < 4; i++)
            preview.appendChild(this.createRowElement(i));
        return preview;
    };
    NumberingListFormPreviewHelper.prototype.createRowElement = function (index) {
        var separatorWidth = 7;
        var rowHeight = 25;
        var margin = 10;
        var foreColor = 0xbbbbbbbb;
        var fakeString = "▬▬▬▬▬▬▬▬▬";
        var isMultiLevel = this.abstractNumberingList.getListType() == numbering_list_1.NumberingType.MultiLevel;
        var currentLevelIndex = isMultiLevel ? index % numbering_list_1.NumberingListBase.depth : this.currentLevel;
        var currentMajorIndex = isMultiLevel ? Math.floor(index / numbering_list_1.NumberingListBase.depth) : index;
        var paragraphProperties = this.abstractNumberingList.levels[currentLevelIndex].getParagraphProperties();
        var characterProperties = this.abstractNumberingList.levels[currentLevelIndex].getCharacterProperties();
        var listBoxText = this.getNumberingListBoxText(currentLevelIndex, currentMajorIndex);
        var layoutNumberingListBox = new layout_numbering_list_box_1.LayoutNumberingListBox(characterProperties, characterProperties.getLayoutColorInfo(this.richEdit.modelManager.model.colorProvider), listBoxText, "");
        layout_box_1.LayoutBox.initializeWithMeasurer([new box_wrap_1.BoxWrap(layoutNumberingListBox.textBox, null)], this.richEdit.measurer, false);
        var textBoxCharacterProperties = this.richEdit.modelManager.model.defaultCharacterProperties.clone();
        textBoxCharacterProperties.textColor = color_model_info_1.ColorModelInfo.makeByColor(foreColor);
        var layoutTextBox = new layout_text_box_1.LayoutTextBox(textBoxCharacterProperties, textBoxCharacterProperties.getLayoutColorInfo(this.richEdit.modelManager.model.colorProvider), fakeString);
        layout_box_1.LayoutBox.initializeWithMeasurer([new box_wrap_1.BoxWrap(layoutTextBox, null)], this.richEdit.measurer, false);
        layoutTextBox.x = layoutNumberingListBox.textBox.width + separatorWidth;
        var layoutRow = new layout_row_1.LayoutRow();
        layoutRow.numberingListBox = layoutNumberingListBox;
        layoutRow.boxes.push(layoutTextBox);
        layoutRow.height = Math.max(layoutNumberingListBox.textBox.height, rowHeight);
        layoutRow.width = layoutNumberingListBox.textBox.width + layoutTextBox.width;
        layoutRow.x = isMultiLevel ? unit_converter_1.UnitConverter.twipsToPixels(paragraphProperties.leftIndent - paragraphProperties.firstLineIndent) + margin : margin;
        layoutRow.y = index * layoutRow.height + margin;
        return this.richEdit.viewManager.renderer.renderRow(layoutRow, 0);
    };
    NumberingListFormPreviewHelper.prototype.getNumberingListBoxText = function (levelIndex, majorIndex) {
        var _a;
        var items = [];
        for (var j = 0; j <= levelIndex; j++) {
            var listLevelProperties = this.abstractNumberingList.levels[j].getListLevelProperties();
            var converter = number_converter_creator_1.NumberConverterCreator.createConverter(listLevelProperties.format, this.richEdit.modelManager.model.simpleFormattersManager);
            items.push(converter.convertNumber(listLevelProperties.start + majorIndex));
        }
        var displayFormatString = this.abstractNumberingList.levels[levelIndex].getListLevelProperties().displayFormatString;
        return (_a = this.richEdit.modelManager.model.simpleFormattersManager).formatString.apply(_a, tslib_1.__spreadArrays([displayFormatString], items));
    };
    return NumberingListFormPreviewHelper;
}());
exports.NumberingListFormPreviewHelper = NumberingListFormPreviewHelper;
