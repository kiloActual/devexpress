"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var control_1 = require("../../../core/model/options/control");
var sub_document_1 = require("../../../core/model/sub-document");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogInsertImageCommand = (function (_super) {
    tslib_1.__extends(DialogInsertImageCommand, _super);
    function DialogInsertImageCommand(control) {
        return _super.call(this, control) || this;
    }
    DialogInsertImageCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.inlinePictures) && this.selection.intervals.length === 1;
    };
    DialogInsertImageCommand.prototype.createParameters = function (_options) {
        return new InsertImageDialogParameters();
    };
    DialogInsertImageCommand.prototype.applyParameters = function (_state, newParams) {
        var _this = this;
        var interval = this.selection.intervalsInfo.interval.clone();
        var cacheInfo = this.control.modelManager.model.cache.imageCache.createLoadedInfo(newParams.base64EncodedImage, newParams.originalSize, newParams.id);
        this.history.addTransaction(function () {
            _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(_this.selection.activeSubDocument, interval), true, false);
            _this.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(_this.selection.activeSubDocument, interval.start), _this.inputPosition.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo), new image_loading_options_1.ImageLoadingOptions(true));
        });
        return true;
    };
    DialogInsertImageCommand.prototype.getDialogName = function () {
        return "InsertImage";
    };
    return DialogInsertImageCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogInsertImageCommand = DialogInsertImageCommand;
var InsertImageDialogParameters = (function (_super) {
    tslib_1.__extends(InsertImageDialogParameters, _super);
    function InsertImageDialogParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = 0;
        _this.base64EncodedImage = null;
        _this.originalSize = new size_1.Size(100, 100);
        return _this;
    }
    InsertImageDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.id = obj.id;
        this.originalSize = obj.originalSize.clone();
        this.base64EncodedImage = obj.base64EncodedImage;
    };
    InsertImageDialogParameters.prototype.clone = function () {
        var newInstance = new InsertImageDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    InsertImageDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return InsertImageDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.InsertImageDialogParameters = InsertImageDialogParameters;
