"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_1 = require("@devexpress/utils/lib/browser");
var client_command_1 = require("../client-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogAlertMessageCommand = (function (_super) {
    tslib_1.__extends(DialogAlertMessageCommand, _super);
    function DialogAlertMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogAlertMessageCommand.prototype.createParameters = function (_options) {
        var parameters = new AlertMessageDialogParameters();
        parameters.messageTextId = this.getMessageTextId();
        return parameters;
    };
    DialogAlertMessageCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return DialogAlertMessageCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogAlertMessageCommand = DialogAlertMessageCommand;
var DialogErrorMessageCommand = (function (_super) {
    tslib_1.__extends(DialogErrorMessageCommand, _super);
    function DialogErrorMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogErrorMessageCommand.prototype.getDialogName = function () {
        return "ErrorMessage";
    };
    return DialogErrorMessageCommand;
}(DialogAlertMessageCommand));
exports.DialogErrorMessageCommand = DialogErrorMessageCommand;
var DialogInformationMessageCommand = (function (_super) {
    tslib_1.__extends(DialogInformationMessageCommand, _super);
    function DialogInformationMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogInformationMessageCommand.prototype.getDialogName = function () {
        return "InformationMessage";
    };
    return DialogInformationMessageCommand;
}(DialogAlertMessageCommand));
exports.DialogInformationMessageCommand = DialogInformationMessageCommand;
var DialogWarningMessageCommand = (function (_super) {
    tslib_1.__extends(DialogWarningMessageCommand, _super);
    function DialogWarningMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogWarningMessageCommand.prototype.getDialogName = function () {
        return "WarningMessage";
    };
    return DialogWarningMessageCommand;
}(DialogAlertMessageCommand));
exports.DialogWarningMessageCommand = DialogWarningMessageCommand;
var ShowErrorModelIsChangedMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorModelIsChangedMessageCommand, _super);
    function ShowErrorModelIsChangedMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorModelIsChangedMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.ModelIsChanged;
    };
    ShowErrorModelIsChangedMessageCommand.prototype.afterClosing = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ReloadDocument).execute(this.control.commandManager.isPublicApiCall);
    };
    return ShowErrorModelIsChangedMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorModelIsChangedMessageCommand = ShowErrorModelIsChangedMessageCommand;
var ShowErrorSessionHasExpiredMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorSessionHasExpiredMessageCommand, _super);
    function ShowErrorSessionHasExpiredMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorSessionHasExpiredMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.SessionHasExpired;
    };
    return ShowErrorSessionHasExpiredMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorSessionHasExpiredMessageCommand = ShowErrorSessionHasExpiredMessageCommand;
var ShowErrorOpeningAndOverstoreImpossibleMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorOpeningAndOverstoreImpossibleMessageCommand, _super);
    function ShowErrorOpeningAndOverstoreImpossibleMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorOpeningAndOverstoreImpossibleMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.OpeningAndOverstoreImpossible;
    };
    return ShowErrorOpeningAndOverstoreImpossibleMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorOpeningAndOverstoreImpossibleMessageCommand = ShowErrorOpeningAndOverstoreImpossibleMessageCommand;
var ShowErrorCantSaveToEmptyPathMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorCantSaveToEmptyPathMessageCommand, _super);
    function ShowErrorCantSaveToEmptyPathMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorCantSaveToEmptyPathMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.CantSaveToEmptyPath;
    };
    return ShowErrorCantSaveToEmptyPathMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorCantSaveToEmptyPathMessageCommand = ShowErrorCantSaveToEmptyPathMessageCommand;
var ShowWarningClipboardAccessDeniedMessageCommand = (function (_super) {
    tslib_1.__extends(ShowWarningClipboardAccessDeniedMessageCommand, _super);
    function ShowWarningClipboardAccessDeniedMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowWarningClipboardAccessDeniedMessageCommand.prototype.getMessageTextId = function () {
        return browser_1.Browser.TouchUI ? AlertMessageText.ClipboardAccessDeniedTouch : AlertMessageText.ClipboardAccessDenied;
    };
    return ShowWarningClipboardAccessDeniedMessageCommand;
}(DialogWarningMessageCommand));
exports.ShowWarningClipboardAccessDeniedMessageCommand = ShowWarningClipboardAccessDeniedMessageCommand;
var ShowErrorInnerExceptionMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorInnerExceptionMessageCommand, _super);
    function ShowErrorInnerExceptionMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorInnerExceptionMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.InnerException;
    };
    ShowErrorInnerExceptionMessageCommand.prototype.afterClosing = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ReloadDocument).execute(false);
    };
    return ShowErrorInnerExceptionMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorInnerExceptionMessageCommand = ShowErrorInnerExceptionMessageCommand;
var ShowErrorInvalidDocumentMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorInvalidDocumentMessageCommand, _super);
    function ShowErrorInvalidDocumentMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorInvalidDocumentMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.InvalidDocumentFormat;
    };
    return ShowErrorInvalidDocumentMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorInvalidDocumentMessageCommand = ShowErrorInvalidDocumentMessageCommand;
var ShowErrorAuthExceptionMessageCommand = (function (_super) {
    tslib_1.__extends(ShowErrorAuthExceptionMessageCommand, _super);
    function ShowErrorAuthExceptionMessageCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorAuthExceptionMessageCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.AuthException;
    };
    ShowErrorAuthExceptionMessageCommand.prototype.afterClosing = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ReloadDocument).execute(this.control.commandManager.isPublicApiCall);
    };
    return ShowErrorAuthExceptionMessageCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorAuthExceptionMessageCommand = ShowErrorAuthExceptionMessageCommand;
var ShowErrorCantOpenDocument = (function (_super) {
    tslib_1.__extends(ShowErrorCantOpenDocument, _super);
    function ShowErrorCantOpenDocument() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorCantOpenDocument.prototype.getMessageTextId = function () {
        return AlertMessageText.CantOpenFile;
    };
    ShowErrorCantOpenDocument.prototype.isEnabledInClosedDocument = function () {
        return true;
    };
    return ShowErrorCantOpenDocument;
}(DialogErrorMessageCommand));
exports.ShowErrorCantOpenDocument = ShowErrorCantOpenDocument;
var ShowErrorCantSaveDocument = (function (_super) {
    tslib_1.__extends(ShowErrorCantSaveDocument, _super);
    function ShowErrorCantSaveDocument() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorCantSaveDocument.prototype.getMessageTextId = function () {
        return AlertMessageText.CantSaveFile;
    };
    return ShowErrorCantSaveDocument;
}(DialogErrorMessageCommand));
exports.ShowErrorCantSaveDocument = ShowErrorCantSaveDocument;
var ShowErrorPathTooLong = (function (_super) {
    tslib_1.__extends(ShowErrorPathTooLong, _super);
    function ShowErrorPathTooLong() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorPathTooLong.prototype.getMessageTextId = function () {
        return AlertMessageText.PathTooLongException;
    };
    return ShowErrorPathTooLong;
}(DialogErrorMessageCommand));
exports.ShowErrorPathTooLong = ShowErrorPathTooLong;
var ShowErrorDocVariableExceptionCommand = (function (_super) {
    tslib_1.__extends(ShowErrorDocVariableExceptionCommand, _super);
    function ShowErrorDocVariableExceptionCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowErrorDocVariableExceptionCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.DocVariableException;
    };
    return ShowErrorDocVariableExceptionCommand;
}(DialogErrorMessageCommand));
exports.ShowErrorDocVariableExceptionCommand = ShowErrorDocVariableExceptionCommand;
var ShowInsertContentFromServerErrorDialogCommand = (function (_super) {
    tslib_1.__extends(ShowInsertContentFromServerErrorDialogCommand, _super);
    function ShowInsertContentFromServerErrorDialogCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowInsertContentFromServerErrorDialogCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.InsertContentFromServerException;
    };
    return ShowInsertContentFromServerErrorDialogCommand;
}(DialogErrorMessageCommand));
exports.ShowInsertContentFromServerErrorDialogCommand = ShowInsertContentFromServerErrorDialogCommand;
var ShowLoadPictureErrorDialogCommand = (function (_super) {
    tslib_1.__extends(ShowLoadPictureErrorDialogCommand, _super);
    function ShowLoadPictureErrorDialogCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowLoadPictureErrorDialogCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.LoadPictureError;
    };
    return ShowLoadPictureErrorDialogCommand;
}(DialogErrorMessageCommand));
exports.ShowLoadPictureErrorDialogCommand = ShowLoadPictureErrorDialogCommand;
var ShowSpellingCheckCompletedCommand = (function (_super) {
    tslib_1.__extends(ShowSpellingCheckCompletedCommand, _super);
    function ShowSpellingCheckCompletedCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShowSpellingCheckCompletedCommand.prototype.getMessageTextId = function () {
        return AlertMessageText.SpellingCheckCompleted;
    };
    return ShowSpellingCheckCompletedCommand;
}(DialogInformationMessageCommand));
exports.ShowSpellingCheckCompletedCommand = ShowSpellingCheckCompletedCommand;
var AlertMessageDialogParameters = (function (_super) {
    tslib_1.__extends(AlertMessageDialogParameters, _super);
    function AlertMessageDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AlertMessageDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.messageTextId = obj.messageTextId;
    };
    AlertMessageDialogParameters.prototype.clone = function () {
        var newInstance = new AlertMessageDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    AlertMessageDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return AlertMessageDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.AlertMessageDialogParameters = AlertMessageDialogParameters;
var AlertMessageText;
(function (AlertMessageText) {
    AlertMessageText[AlertMessageText["ModelIsChanged"] = 0] = "ModelIsChanged";
    AlertMessageText[AlertMessageText["SessionHasExpired"] = 1] = "SessionHasExpired";
    AlertMessageText[AlertMessageText["OpeningAndOverstoreImpossible"] = 2] = "OpeningAndOverstoreImpossible";
    AlertMessageText[AlertMessageText["ClipboardAccessDenied"] = 3] = "ClipboardAccessDenied";
    AlertMessageText[AlertMessageText["InnerException"] = 4] = "InnerException";
    AlertMessageText[AlertMessageText["AuthException"] = 5] = "AuthException";
    AlertMessageText[AlertMessageText["CantOpenFile"] = 6] = "CantOpenFile";
    AlertMessageText[AlertMessageText["CantSaveFile"] = 7] = "CantSaveFile";
    AlertMessageText[AlertMessageText["DocVariableException"] = 8] = "DocVariableException";
    AlertMessageText[AlertMessageText["PathTooLongException"] = 9] = "PathTooLongException";
    AlertMessageText[AlertMessageText["InvalidDocumentFormat"] = 10] = "InvalidDocumentFormat";
    AlertMessageText[AlertMessageText["SpellingCheckCompleted"] = 11] = "SpellingCheckCompleted";
    AlertMessageText[AlertMessageText["ClipboardAccessDeniedTouch"] = 12] = "ClipboardAccessDeniedTouch";
    AlertMessageText[AlertMessageText["CantSaveToEmptyPath"] = 13] = "CantSaveToEmptyPath";
    AlertMessageText[AlertMessageText["InsertContentFromServerException"] = 14] = "InsertContentFromServerException";
    AlertMessageText[AlertMessageText["LoadPictureError"] = 15] = "LoadPictureError";
    AlertMessageText[AlertMessageText["DocumentImportError"] = 16] = "DocumentImportError";
})(AlertMessageText = exports.AlertMessageText || (exports.AlertMessageText = {}));
