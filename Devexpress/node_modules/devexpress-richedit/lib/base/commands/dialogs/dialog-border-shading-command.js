"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var border_info_1 = require("../../../core/model/borders/border-info");
var enums_1 = require("../../../core/model/borders/enums");
var color_1 = require("../../../core/model/color/color");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var table_cell_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-cell-properties-merger");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var color_2 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var toggle_table_cells_border_command_1 = require("../tables/toggle-table-cells-border-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogBorderShadingCommandBase = (function (_super) {
    tslib_1.__extends(DialogBorderShadingCommandBase, _super);
    function DialogBorderShadingCommandBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogBorderShadingCommandBase.prototype.getState = function () {
        var visible = this.selection.tableInfo.extendedData.numRows > 0;
        var state = new command_states_1.SimpleCommandState(this.isEnabled() && visible);
        state.visible = visible;
        return state;
    };
    DialogBorderShadingCommandBase.prototype.makeParams = function (applyToWholeTable, colorProvider) {
        var dialogParams = new BorderShadingDialogParameters();
        var selection = this.selection;
        var tableInfo = selection.tableInfo;
        var startCell = tableInfo.extendedData.firstCell;
        var table = startCell.parentRow.parentTable;
        var selectionStateInfo;
        dialogParams.applyToWholeTable = applyToWholeTable;
        if ((typeof dialogParams.applyToWholeTable !== "boolean" && this.isNoFullSelectedCell(selection)) || dialogParams.applyToWholeTable === true) {
            selectionStateInfo = selection.getFloatingState();
            selection.deprecatedSetSelection(table.getStartPosition(), table.getEndPosition(), selection.endOfLine, -1, true);
            tableInfo = selection.tableInfo;
        }
        this.topBorderCommand = new toggle_table_cells_border_command_1.ToggleTableCellsTopBorderCommand(this.control);
        this.rightBorderCommand = new toggle_table_cells_border_command_1.ToggleTableCellsRightBorderCommand(this.control);
        this.bottomBorderCommand = new toggle_table_cells_border_command_1.ToggleTableCellsBottomBorderCommand(this.control);
        this.leftBorderCommand = new toggle_table_cells_border_command_1.ToggleTableCellsLeftBorderCommand(this.control);
        this.insideHorizontalBordersCommand = new toggle_table_cells_border_command_1.ToggleTableCellInsideHorizontalBordersCommand(this.control);
        this.insideVerticalBordersCommand = new toggle_table_cells_border_command_1.ToggleTableCellInsideVerticalBordersCommand(this.control);
        dialogParams.top = DialogBorderInfo.create(this.topBorderCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.right = DialogBorderInfo.create(this.rightBorderCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.bottom = DialogBorderInfo.create(this.bottomBorderCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.left = DialogBorderInfo.create(this.leftBorderCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.insideHorizontal = DialogBorderInfo.create(this.insideHorizontalBordersCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.insideVertical = DialogBorderInfo.create(this.insideVerticalBordersCommand.getGeneralizedBorder(), colorProvider);
        dialogParams.init(this.colorProvider, tableInfo, this.modelManipulator.model);
        if (selectionStateInfo)
            this.selection.restoreFloatingState(selectionStateInfo);
        return dialogParams;
    };
    DialogBorderShadingCommandBase.prototype.applyParameters = function (_state, newParams, initParams) {
        var selection = this.selection;
        var tableInfo = selection.tableInfo;
        var startCell = tableInfo.extendedData.firstCell;
        var table = startCell.parentRow.parentTable;
        var selectionStateInfo;
        if ((typeof newParams.applyToWholeTable !== "boolean" && this.isNoFullSelectedCell(selection)) || newParams.applyToWholeTable === true) {
            selectionStateInfo = selection.getFloatingState();
            selection.deprecatedSetSelection(table.getStartPosition(), table.getEndPosition(), selection.endOfLine, -1, true);
            tableInfo = selection.tableInfo;
        }
        var history = this.history;
        history.beginTransaction();
        var changed = false;
        if (newParams.backgroundColor !== initParams.backgroundColor) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeTableCellShading).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeTableCellShading).
                DEPRECATEDConvertOptionsParameter(newParams.backgroundColor)));
            changed = true;
        }
        if (newParams.top && !newParams.top.equals(initParams.top)) {
            this.topBorderCommand.execute(this.control.commandManager.isPublicApiCall, newParams.top.getBorderInfo());
            changed = true;
        }
        if (newParams.bottom && !newParams.bottom.equals(initParams.bottom)) {
            this.bottomBorderCommand.execute(this.control.commandManager.isPublicApiCall, newParams.bottom.getBorderInfo());
            changed = true;
        }
        if (newParams.right && !newParams.right.equals(initParams.right)) {
            this.rightBorderCommand.execute(this.control.commandManager.isPublicApiCall, newParams.right.getBorderInfo());
            changed = true;
        }
        if (newParams.left && !newParams.left.equals(initParams.left)) {
            this.leftBorderCommand.execute(this.control.commandManager.isPublicApiCall, newParams.left.getBorderInfo());
            changed = true;
        }
        if (newParams.insideHorizontal && !newParams.insideHorizontal.equals(initParams.insideHorizontal)) {
            this.insideHorizontalBordersCommand.execute(this.control.commandManager.isPublicApiCall, newParams.insideHorizontal.getBorderInfo());
            changed = true;
        }
        if (newParams.insideVertical && !newParams.insideVertical.equals(initParams.insideVertical)) {
            this.insideVerticalBordersCommand.execute(this.control.commandManager.isPublicApiCall, newParams.insideVertical.getBorderInfo());
            changed = true;
        }
        history.endTransaction();
        if (selectionStateInfo)
            this.selection.restoreFloatingState(selectionStateInfo);
        return changed || !!selectionStateInfo;
    };
    DialogBorderShadingCommandBase.prototype.isNoFullSelectedCell = function (selection) {
        var tableInfo = selection.tableInfo;
        if (tableInfo.extendedData.numRows > 1 || tableInfo.extendedData.rows[0].cells.length > 1)
            return false;
        var startCell = tableInfo.extendedData.firstCell;
        return selection.intervals[0].start !== startCell.startParagraphPosition.value || selection.intervals[0].end !== startCell.endParagrapPosition.value;
    };
    DialogBorderShadingCommandBase.prototype.getDialogName = function () {
        return "BorderShading";
    };
    return DialogBorderShadingCommandBase;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogBorderShadingCommandBase = DialogBorderShadingCommandBase;
var DialogBorderShadingCommand = (function (_super) {
    tslib_1.__extends(DialogBorderShadingCommand, _super);
    function DialogBorderShadingCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogBorderShadingCommand.prototype.createParameters = function (options) {
        return this.makeParams(options.param, this.control.modelManager.model.colorProvider);
    };
    return DialogBorderShadingCommand;
}(DialogBorderShadingCommandBase));
exports.DialogBorderShadingCommand = DialogBorderShadingCommand;
var DialogServiceBorderShadingCommand = (function (_super) {
    tslib_1.__extends(DialogServiceBorderShadingCommand, _super);
    function DialogServiceBorderShadingCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogServiceBorderShadingCommand.prototype.createParameters = function (_options) {
        return this.makeParams(null, this.control.modelManager.model.colorProvider);
    };
    DialogServiceBorderShadingCommand.prototype.afterClosing = function (options) {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowTablePropertiesForm)
            .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, options.param));
    };
    return DialogServiceBorderShadingCommand;
}(DialogBorderShadingCommandBase));
exports.DialogServiceBorderShadingCommand = DialogServiceBorderShadingCommand;
var BorderShadingDialogParameters = (function (_super) {
    tslib_1.__extends(BorderShadingDialogParameters, _super);
    function BorderShadingDialogParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.borderLineHorizontalInVisible = false;
        _this.borderLineVerticalInVisible = false;
        return _this;
    }
    BorderShadingDialogParameters.prototype.init = function (colorProvider, tableInfo, model) {
        var firstCell = tableInfo.extendedData.firstCell;
        var table = tableInfo.table;
        var backColorMerger = new table_cell_properties_merger_1.TableCellPropertiesMergerShadingInfo();
        var backgroundColor = backColorMerger.getProperty(firstCell.properties, table.style, firstCell.conditionalFormatting, model.defaultTableCellProperties).getActualColor(colorProvider);
        this.backgroundColor = this.getColor(tableInfo.extendedData.allOfCells(function (cellInfo) {
            var bc = backColorMerger.getProperty(cellInfo.cell.properties, table.style, cellInfo.cell.conditionalFormatting, model.defaultTableCellProperties);
            return backgroundColor == (bc ? bc.getActualColor(colorProvider) : null);
        }) ? backgroundColor : null);
        this.borderLineHorizontalInVisible = tableInfo.extendedData.numRows > 1;
        this.borderLineVerticalInVisible = list_1.ListUtils.unsafeAnyOf(tableInfo.extendedData.rows, function (rowInfo) { return rowInfo.cells.length > 1; });
        this.setModeButton = this.getModeState();
    };
    BorderShadingDialogParameters.prototype.getModeState = function () {
        if (this.isModeStateNone())
            return SetModeButtons.None;
        if (this.isModeStateAll())
            return SetModeButtons.All;
        if (this.isModeStateBox())
            return SetModeButtons.Box;
        if (this.isModeStateGrid())
            return SetModeButtons.Grid;
        return SetModeButtons.Custom;
    };
    BorderShadingDialogParameters.prototype.isModeStateNone = function () {
        var borders = [this.top, this.right, this.bottom, this.left, this.insideVertical, this.insideHorizontal];
        for (var i = 0; i < borders.length; i++) {
            if (borders[i] != null && !(borders[i].style === enums_1.BorderLineStyle.None || borders[i].width === 0))
                return false;
        }
        return true;
    };
    BorderShadingDialogParameters.prototype.isModeStateAll = function () {
        var borders = [this.top, this.right, this.bottom, this.left];
        borders.push(this.insideVertical);
        borders.push(this.insideHorizontal);
        if ((borders[0] == null) || (borders[0].style === enums_1.BorderLineStyle.None) || (borders[0].width === 0))
            return false;
        if (!this.borderLineHorizontalInVisible && !this.borderLineVerticalInVisible)
            return false;
        for (var i = 1; i < borders.length; i++) {
            if ((borders[i] == null) || !borders[0].equals(borders[i]))
                return false;
        }
        return true;
    };
    BorderShadingDialogParameters.prototype.isModeStateBox = function () {
        var borders = [this.top, this.right, this.bottom, this.left];
        var bordersIn = [this.insideVertical, this.insideHorizontal];
        if ((borders[0] == null) || (borders[0].style === enums_1.BorderLineStyle.None) || (borders[0].width === 0))
            return false;
        for (var i = 1; i < borders.length; i++) {
            if ((borders[i] == null) || !borders[0].equals(borders[i]))
                return false;
        }
        if (!this.borderLineHorizontalInVisible && !this.borderLineVerticalInVisible)
            return true;
        for (var i = 0; i < bordersIn.length; i++) {
            if ((bordersIn[i] == null) || !(bordersIn[i].style === enums_1.BorderLineStyle.None || bordersIn[i].width === 0))
                return false;
        }
        return true;
    };
    BorderShadingDialogParameters.prototype.isModeStateGrid = function () {
        var borders = [this.top, this.right, this.bottom, this.left];
        var bordersIn = [this.insideVertical, this.insideHorizontal];
        if ((borders[0] == null) || (borders[0].style === enums_1.BorderLineStyle.None) || (borders[0].width === 0))
            return false;
        if (!this.borderLineHorizontalInVisible && !this.borderLineVerticalInVisible)
            return false;
        for (var i = 1; i < borders.length; i++) {
            if ((borders[i] == null) || !borders[0].equals(borders[i]))
                return false;
        }
        for (var i = 0; i < bordersIn.length; i++) {
            if ((bordersIn[i] == null) || bordersIn[i].style !== enums_1.BorderLineStyle.Single || bordersIn[i].color !== borders[0].color || (bordersIn[i].width !== BorderShadingDialogParameters.gridWidth))
                return false;
        }
        return true;
    };
    BorderShadingDialogParameters.prototype.getColor = function (color) {
        if (color == color_1.ColorHelper.AUTOMATIC_COLOR)
            return "Auto";
        if (color != undefined)
            return color_2.ColorUtils.colorToHash(color).toUpperCase();
        else
            return undefined;
    };
    BorderShadingDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.backgroundColor = obj.backgroundColor;
        this.top = obj.top !== null ? obj.top.clone() : null;
        this.right = obj.right !== null ? obj.right.clone() : null;
        this.bottom = obj.bottom !== null ? obj.bottom.clone() : null;
        this.left = obj.left !== null ? obj.left.clone() : null;
        this.insideHorizontal = obj.insideHorizontal !== null ? obj.insideHorizontal.clone() : null;
        this.insideVertical = obj.insideVertical !== null ? obj.insideVertical.clone() : null;
        this.applyToWholeTable = obj.applyToWholeTable;
    };
    BorderShadingDialogParameters.prototype.clone = function () {
        var newInstance = new BorderShadingDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    BorderShadingDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    BorderShadingDialogParameters.gridWidth = unit_converter_1.UnitConverter.twipsToPointsF(15);
    return BorderShadingDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.BorderShadingDialogParameters = BorderShadingDialogParameters;
var DialogBorderInfo = (function () {
    function DialogBorderInfo() {
    }
    DialogBorderInfo.create = function (borderInfo, colorProvider) {
        if (!borderInfo)
            return null;
        var dialogBorderInfo = new DialogBorderInfo();
        dialogBorderInfo.color = color_2.ColorUtils.colorToHash(borderInfo.color.toRgb(colorProvider)).toUpperCase();
        dialogBorderInfo.width = unit_converter_1.UnitConverter.twipsToPointsF(borderInfo.width);
        dialogBorderInfo.style = borderInfo.style;
        return dialogBorderInfo;
    };
    DialogBorderInfo.prototype.getBorderInfo = function () {
        var borderInfo = new border_info_1.BorderInfo();
        borderInfo.color = this.color === null ? color_model_info_1.ColorModelInfo.noColor : color_model_info_1.ColorModelInfo.makeByColor(color_2.ColorUtils.fromHashString(this.color));
        borderInfo.width = unit_converter_1.UnitConverter.pointsToTwips(this.width);
        borderInfo.style = this.style;
        return borderInfo;
    };
    DialogBorderInfo.prototype.equals = function (obj) {
        return obj && this.style == obj.style &&
            this.color == obj.color &&
            this.width == obj.width;
    };
    DialogBorderInfo.prototype.copyFrom = function (obj) {
        this.style = obj.style;
        this.color = obj.color;
        this.width = obj.width;
    };
    DialogBorderInfo.prototype.clone = function () {
        var result = new DialogBorderInfo();
        result.copyFrom(this);
        return result;
    };
    return DialogBorderInfo;
}());
exports.DialogBorderInfo = DialogBorderInfo;
var SetModeButtons;
(function (SetModeButtons) {
    SetModeButtons[SetModeButtons["None"] = 0] = "None";
    SetModeButtons[SetModeButtons["Box"] = 1] = "Box";
    SetModeButtons[SetModeButtons["All"] = 2] = "All";
    SetModeButtons[SetModeButtons["Grid"] = 3] = "Grid";
    SetModeButtons[SetModeButtons["Custom"] = 4] = "Custom";
})(SetModeButtons = exports.SetModeButtons || (exports.SetModeButtons = {}));
