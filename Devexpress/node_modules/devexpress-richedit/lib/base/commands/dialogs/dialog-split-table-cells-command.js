"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogSplitTableCellsCommand = (function (_super) {
    tslib_1.__extends(DialogSplitTableCellsCommand, _super);
    function DialogSplitTableCellsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSplitTableCellsCommand.prototype.getState = function () {
        var enabled = this.selection.tableInfo.rawData.isSquare &&
            !this.selection.specialRunInfo.isPictureSelected();
        var state = new command_states_1.SimpleCommandState(this.isEnabled() && enabled);
        state.visible = enabled;
        return state;
    };
    DialogSplitTableCellsCommand.prototype.createParameters = function (_options) {
        var tableInfo = this.selection.tableInfo;
        var parameters = new SplitTableCellsDialogParameters();
        parameters.rowCount = tableInfo.rawData.numRows;
        parameters.columnCount = tableInfo.rawData.rows[0].columnCountInSeries;
        parameters.isMergeBeforeSplit = tableInfo.rawData.numRows > 1 || tableInfo.rawData.rows[0].cells.length > 1;
        parameters.disableRowsSelector = !tableInfo.extendedData.isSquare;
        parameters.availableRowNumber = parameters.disableRowsSelector ?
            1 :
            tableInfo.rawData.numRows;
        return parameters;
    };
    DialogSplitTableCellsCommand.prototype.applyParameters = function (_state, params) {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SplitTableCellsCommand)
            .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, params));
    };
    DialogSplitTableCellsCommand.prototype.getDialogName = function () {
        return "SplitTableCells";
    };
    return DialogSplitTableCellsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogSplitTableCellsCommand = DialogSplitTableCellsCommand;
var SplitTableCellsDialogParameters = (function (_super) {
    tslib_1.__extends(SplitTableCellsDialogParameters, _super);
    function SplitTableCellsDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitTableCellsDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.rowCount = obj.rowCount;
        this.columnCount = obj.columnCount;
        this.isMergeBeforeSplit = obj.isMergeBeforeSplit;
    };
    SplitTableCellsDialogParameters.prototype.clone = function () {
        var newInstance = new SplitTableCellsDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    SplitTableCellsDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return SplitTableCellsDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.SplitTableCellsDialogParameters = SplitTableCellsDialogParameters;
