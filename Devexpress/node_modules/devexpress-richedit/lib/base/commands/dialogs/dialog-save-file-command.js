"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_format_1 = require("../../../core/document-format");
var file_name_helper_1 = require("../../../core/formats/file-name-helper");
var command_request_1 = require("../../../core/model/json/command-request");
var command_type_1 = require("../../../core/model/json/command-type");
var json_top_level_enums_1 = require("../../../core/model/json/enums/json-top-level-enums");
var control_1 = require("../../../core/model/options/control");
var rich_edit_core_1 = require("../../rich-edit-core");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var command_states_1 = require("../command-states");
var dialog_finish_and_merge_command_1 = require("./dialog-finish-and-merge-command");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogSaveFileCommand = (function (_super) {
    tslib_1.__extends(DialogSaveFileCommand, _super);
    function DialogSaveFileCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSaveFileCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.saveAs !== control_1.DocumentCapability.Hidden;
        return state;
    };
    DialogSaveFileCommand.prototype.createParameters = function (_options) {
        var documentInfo = this.control.documentInfo;
        var fileNameHelper = new file_name_helper_1.FileNameHelper(documentInfo.fileName, false, documentInfo.documentFormat);
        var saveFileDialogParameters = new SaveFileDialogParameters();
        saveFileDialogParameters.fileName = fileNameHelper.name !== "" ? fileNameHelper.name : rich_edit_core_1.DocumentInfo.defaultDocumentName;
        saveFileDialogParameters.documentFormat = fileNameHelper.documentFormat != document_format_1.DocumentFormat.Undefined ?
            fileNameHelper.documentFormat : document_format_1.DocumentFormat.OpenXml;
        saveFileDialogParameters.folderPath = "";
        saveFileDialogParameters.fileSavedToServer = true;
        return saveFileDialogParameters;
    };
    DialogSaveFileCommand.prototype.executeCore = function (state, parameter) {
        if (this.control.owner.hasWorkDirectory)
            return _super.prototype.executeCore.call(this, state, parameter);
        else
            return this.executeShowErrorMessageCommand();
    };
    DialogSaveFileCommand.prototype.applyParameters = function (_state, params) {
        if (params.fileSavedToServer) {
            var reqParams = {};
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.FileName] = params.fileName;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.FolderPath] = params.folderPath;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.DocumentFormat] = params.documentFormat;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.HistoryId] = this.history.getCurrentItemId();
            this.control.serverDispatcher.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.SaveAsDocument, -1, reqParams), new command_request_1.RequestParams(true, true, true));
        }
        else
            return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.Download)
                .execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, params));
        return true;
    };
    DialogSaveFileCommand.prototype.getDialogName = function () {
        return "FileSaveAs";
    };
    DialogSaveFileCommand.prototype.executeShowErrorMessageCommand = function () {
        return this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorOpeningAndOverstoreImpossibleMessageCommand).execute(this.control.commandManager.isPublicApiCall);
    };
    DialogSaveFileCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.saveAs) &&
            this.control.modelManager.model.isLoaded();
    };
    DialogSaveFileCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return DialogSaveFileCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogSaveFileCommand = DialogSaveFileCommand;
var SaveFileDialogParameters = (function (_super) {
    tslib_1.__extends(SaveFileDialogParameters, _super);
    function SaveFileDialogParameters() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fileName = "";
        _this.folderPath = "";
        _this.documentFormat = document_format_1.DocumentFormat.Undefined;
        _this.fileSavedToServer = true;
        return _this;
    }
    SaveFileDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.fileName = obj.fileName;
        this.folderPath = obj.folderPath;
        this.documentFormat = obj.documentFormat;
        this.fileSavedToServer = obj.fileSavedToServer;
    };
    SaveFileDialogParameters.prototype.clone = function () {
        var newInstance = new SaveFileDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    SaveFileDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return SaveFileDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.SaveFileDialogParameters = SaveFileDialogParameters;
var DialogSaveMergedDocumentCommand = (function (_super) {
    tslib_1.__extends(DialogSaveMergedDocumentCommand, _super);
    function DialogSaveMergedDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogSaveMergedDocumentCommand.prototype.createParameters = function (options) {
        var parameters = options.param;
        var saveFileDialogParameters = new SaveMergedDocumentDialogParameters();
        saveFileDialogParameters.fileName = "result";
        saveFileDialogParameters.documentFormat = document_format_1.DocumentFormat.OpenXml;
        saveFileDialogParameters.folderPath = "";
        saveFileDialogParameters.fileSavedToServer = true;
        saveFileDialogParameters.mergeMode = parameters.mergeMode;
        switch (parameters.range) {
            case dialog_finish_and_merge_command_1.MailMergeExportRange.AllRecords:
                saveFileDialogParameters.firstRecordIndex = 0;
                saveFileDialogParameters.lastRecordIndex = this.control.modelManager.richOptions.mailMerge.recordCount - 1;
                break;
            case dialog_finish_and_merge_command_1.MailMergeExportRange.CurrentRecord:
                saveFileDialogParameters.firstRecordIndex = this.control.modelManager.richOptions.mailMerge.activeRecordIndex;
                saveFileDialogParameters.lastRecordIndex = this.control.modelManager.richOptions.mailMerge.activeRecordIndex;
                break;
            case dialog_finish_and_merge_command_1.MailMergeExportRange.Range:
                saveFileDialogParameters.firstRecordIndex = parameters.exportFrom - 1;
                saveFileDialogParameters.lastRecordIndex = parameters.exportFrom + parameters.exportRecordsCount - 2;
                break;
        }
        return saveFileDialogParameters;
    };
    DialogSaveMergedDocumentCommand.prototype.applyParameters = function (_state, params) {
        var _a;
        if (params.fileSavedToServer) {
            var reqParams = {};
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.FileName] = params.fileName;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.FolderPath] = params.folderPath;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.DocumentFormat] = params.documentFormat;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.FirstRecordIndex] = params.firstRecordIndex;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.LastRecordIndex] = params.lastRecordIndex;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.MergeMode] = params.mergeMode;
            reqParams[json_top_level_enums_1.JSONInitSessionProperty.HistoryId] = this.history.getCurrentItemId();
            this.control.serverDispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.SaveMergedDocument, -1, reqParams), new command_request_1.RequestParams(true, true, true));
        }
        else {
            var request = new command_request_1.LoadCommandRequest(command_type_1.CommandType.DownloadMergedDocument, this.control.modelManager.model.mainSubDocument.id, (_a = {},
                _a[json_top_level_enums_1.JSONInitSessionProperty.DocumentFormat] = params.documentFormat,
                _a[json_top_level_enums_1.JSONInitSessionProperty.FirstRecordIndex] = params.firstRecordIndex,
                _a[json_top_level_enums_1.JSONInitSessionProperty.LastRecordIndex] = params.lastRecordIndex,
                _a[json_top_level_enums_1.JSONInitSessionProperty.MergeMode] = params.mergeMode,
                _a));
            this.control.serverDispatcher.pushRequest(request, new command_request_1.RequestParams(false, true, true));
        }
        return true;
    };
    return DialogSaveMergedDocumentCommand;
}(DialogSaveFileCommand));
exports.DialogSaveMergedDocumentCommand = DialogSaveMergedDocumentCommand;
var SaveMergedDocumentDialogParameters = (function (_super) {
    tslib_1.__extends(SaveMergedDocumentDialogParameters, _super);
    function SaveMergedDocumentDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveMergedDocumentDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.firstRecordIndex = obj.firstRecordIndex;
        this.lastRecordIndex = obj.lastRecordIndex;
        this.mergeMode = obj.mergeMode;
    };
    SaveMergedDocumentDialogParameters.prototype.clone = function () {
        var newInstance = new SaveMergedDocumentDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    SaveMergedDocumentDialogParameters.prototype.applyConverter = function (converter) {
        _super.prototype.applyConverter.call(this, converter);
        return this;
    };
    return SaveMergedDocumentDialogParameters;
}(SaveFileDialogParameters));
exports.SaveMergedDocumentDialogParameters = SaveMergedDocumentDialogParameters;
