"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var client_command_1 = require("../client-command");
var command_base_1 = require("../command-base");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogInsertTableCommand = (function (_super) {
    tslib_1.__extends(DialogInsertTableCommand, _super);
    function DialogInsertTableCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogInsertTableCommand.prototype.createParameters = function (_options) {
        var parameters = new InsertTableDialogParameters();
        parameters.rowCount = 2;
        parameters.columnCount = 5;
        return parameters;
    };
    DialogInsertTableCommand.prototype.applyParameters = function (_state, params) {
        if (params.rowCount > 0 && params.columnCount > 0) {
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertTableCore).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, { rowCount: params.rowCount, cellCount: params.columnCount }));
            return true;
        }
        return false;
    };
    DialogInsertTableCommand.prototype.getDialogName = function () {
        return "InsertTable";
    };
    return DialogInsertTableCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogInsertTableCommand = DialogInsertTableCommand;
var InsertTableDialogParameters = (function (_super) {
    tslib_1.__extends(InsertTableDialogParameters, _super);
    function InsertTableDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.rowCount = obj.rowCount;
        this.columnCount = obj.columnCount;
    };
    InsertTableDialogParameters.prototype.clone = function () {
        var newInstance = new InsertTableDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    InsertTableDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return InsertTableDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.InsertTableDialogParameters = InsertTableDialogParameters;
