"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var find_replace_helper_1 = require("../../../core/model/find-replace-helper");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogFindReplaceCommand = (function (_super) {
    tslib_1.__extends(DialogFindReplaceCommand, _super);
    function DialogFindReplaceCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogFindReplaceCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DialogFindReplaceCommand.prototype.createParameters = function (_options) {
        var parameters = new FindReplaceDialogParameters();
        parameters.controller = this.control.searchManager;
        return parameters;
    };
    DialogFindReplaceCommand.prototype.applyParameters = function (_state, _params) {
        return true;
    };
    DialogFindReplaceCommand.prototype.getDialogName = function () {
        return "FindReplace";
    };
    DialogFindReplaceCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    DialogFindReplaceCommand.prototype.isModal = function () {
        return false;
    };
    DialogFindReplaceCommand.getTextForResult = function (control, subDocument, interval) {
        var entryContextRadius = 20;
        var paragraphInterval = subDocument.getParagraphByPosition(interval.start).interval;
        var searchPartText = DialogFindReplaceCommand.getTextForward(control, subDocument, interval.start, interval.end, interval.length);
        var leftPartText = DialogFindReplaceCommand.getTextBackward(control, subDocument, interval.start, paragraphInterval.start, entryContextRadius);
        var rightPartText = DialogFindReplaceCommand.getTextForward(control, subDocument, interval.end, paragraphInterval.end, entryContextRadius);
        var resultText = "" + encodeHtml(leftPartText) + ("<b>" + encodeHtml(searchPartText) + "</b>") + encodeHtml(rightPartText);
        return resultText;
    };
    DialogFindReplaceCommand.getTextForward = function (control, subDocument, startPosition, endPosition, length) {
        var text = "";
        var charIterator = new find_replace_helper_1.ForwardCharacterIterator(control.modelManager, control.layoutFormatterManager, control.selection.pageIndex, subDocument, startPosition, endPosition);
        while (charIterator.nextChar() && text.length < length)
            text += charIterator.char;
        return charIterator.iterator.intervalEnd > charIterator.getCurrLogPosition() && text.length === length && charIterator.nextChar() ? text + "..." : text;
    };
    DialogFindReplaceCommand.getTextBackward = function (control, subDocument, startPosition, endPosition, length) {
        var text = "";
        var charIterator = new find_replace_helper_1.BackwardCharacterIterator(control.modelManager, control.layoutFormatterManager, control.selection.pageIndex, subDocument, endPosition, startPosition);
        while (charIterator.prevChar() && text.length < length)
            text = charIterator.char + text;
        return charIterator.iterator.intervalStart < charIterator.getCurrLogPosition() && text.length === length && charIterator.prevChar() ? "..." + text : text;
    };
    return DialogFindReplaceCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogFindReplaceCommand = DialogFindReplaceCommand;
var FindReplaceDialogParameters = (function (_super) {
    tslib_1.__extends(FindReplaceDialogParameters, _super);
    function FindReplaceDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindReplaceDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.controller = obj.controller;
    };
    FindReplaceDialogParameters.prototype.clone = function () {
        var newInstance = new FindReplaceDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    FindReplaceDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return FindReplaceDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.FindReplaceDialogParameters = FindReplaceDialogParameters;
function encodeHtml(html) {
    var replTable = [
        [/&amp;/g, '&ampx;'], [/&/g, '&amp;'],
        [/&quot;/g, '&quotx;'], [/"/g, '&quot;'],
        [/&lt;/g, '&ltx;'], [/</g, '&lt;'],
        [/&gt;/g, '&gtx;'], [/>/g, '&gt;']
    ];
    for (var i = 0; i < replTable.length; i++) {
        var replacement = replTable[i];
        html = html.replace(replacement[0], replacement[1]);
    }
    return html;
}
