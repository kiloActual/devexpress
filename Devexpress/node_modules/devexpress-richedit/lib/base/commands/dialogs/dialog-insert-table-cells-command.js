"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_1 = require("../../../core/model/options/control");
var client_command_1 = require("../client-command");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogInsertTableCellsCommand = (function (_super) {
    tslib_1.__extends(DialogInsertTableCellsCommand, _super);
    function DialogInsertTableCellsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogInsertTableCellsCommand.prototype.getState = function () {
        var visible = this.selection.tableInfo.extendedData.numRows > 0;
        var state = new command_states_1.SimpleCommandState(this.isEnabled() && visible);
        state.visible = visible;
        return state;
    };
    DialogInsertTableCellsCommand.prototype.createParameters = function (_options) {
        var parameters = new TableCellsDialogParameters();
        parameters.tableCellOperation = TableCellOperation.ShiftToTheVertically;
        return parameters;
    };
    DialogInsertTableCellsCommand.prototype.applyParameters = function (_state, params) {
        var command = client_command_1.RichEditClientCommand.None;
        switch (params.tableCellOperation) {
            case TableCellOperation.ShiftToTheHorizontally:
                command = client_command_1.RichEditClientCommand.InsertTableCellWithShiftToTheLeft;
                break;
            case TableCellOperation.ShiftToTheVertically:
                command = client_command_1.RichEditClientCommand.InsertTableCellsWithShiftToTheVertically;
                break;
            case TableCellOperation.RowOperation:
                command = client_command_1.RichEditClientCommand.InsertTableRowAbove;
                break;
            case TableCellOperation.ColumnOperation:
                command = client_command_1.RichEditClientCommand.InsertTableColumnToTheLeft;
                break;
        }
        return this.control.commandManager.getCommand(command).execute(this.control.commandManager.isPublicApiCall);
    };
    DialogInsertTableCellsCommand.prototype.getDialogName = function () {
        return "InsertTableCells";
    };
    return DialogInsertTableCellsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogInsertTableCellsCommand = DialogInsertTableCellsCommand;
var DialogDeleteTableCellsCommand = (function (_super) {
    tslib_1.__extends(DialogDeleteTableCellsCommand, _super);
    function DialogDeleteTableCellsCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogDeleteTableCellsCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.selection.tableInfo.extendedData.numRows > 0 && !this.selection.specialRunInfo.isSelected();
        return state;
    };
    DialogDeleteTableCellsCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) &&
            control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.tables) &&
            (this.selection.tableInfo.extendedData.isSquare || this.selection.tableInfo.extendedData.numRows == 1);
    };
    DialogDeleteTableCellsCommand.prototype.createParameters = function (_options) {
        var parameters = new TableCellsDialogParameters();
        parameters.tableCellOperation = TableCellOperation.ShiftToTheHorizontally;
        return parameters;
    };
    DialogDeleteTableCellsCommand.prototype.applyParameters = function (_state, params) {
        var command = client_command_1.RichEditClientCommand.None;
        switch (params.tableCellOperation) {
            case TableCellOperation.ShiftToTheHorizontally:
                command = client_command_1.RichEditClientCommand.DeleteTableCellsWithShiftToTheHorizontally;
                break;
            case TableCellOperation.ShiftToTheVertically:
                command = client_command_1.RichEditClientCommand.DeleteTableCellsWithShiftToTheVertically;
                break;
            case TableCellOperation.RowOperation:
                command = client_command_1.RichEditClientCommand.DeleteTableRows;
                break;
            case TableCellOperation.ColumnOperation:
                command = client_command_1.RichEditClientCommand.DeleteTableColumns;
                break;
        }
        return this.control.commandManager.getCommand(command).execute(this.control.commandManager.isPublicApiCall);
    };
    DialogDeleteTableCellsCommand.prototype.getDialogName = function () {
        return "DeleteTableCells";
    };
    return DialogDeleteTableCellsCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogDeleteTableCellsCommand = DialogDeleteTableCellsCommand;
var TableCellsDialogParameters = (function (_super) {
    tslib_1.__extends(TableCellsDialogParameters, _super);
    function TableCellsDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableCellsDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.tableCellOperation = obj.tableCellOperation;
    };
    TableCellsDialogParameters.prototype.clone = function () {
        var newInstance = new TableCellsDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    TableCellsDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return TableCellsDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.TableCellsDialogParameters = TableCellsDialogParameters;
var TableCellOperation;
(function (TableCellOperation) {
    TableCellOperation[TableCellOperation["ShiftToTheHorizontally"] = 0] = "ShiftToTheHorizontally";
    TableCellOperation[TableCellOperation["ShiftToTheVertically"] = 1] = "ShiftToTheVertically";
    TableCellOperation[TableCellOperation["RowOperation"] = 2] = "RowOperation";
    TableCellOperation[TableCellOperation["ColumnOperation"] = 3] = "ColumnOperation";
})(TableCellOperation = exports.TableCellOperation || (exports.TableCellOperation = {}));
