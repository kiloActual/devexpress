"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_format_1 = require("../../../core/document-format");
var control_1 = require("../../../core/model/options/control");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogFinishAndMergeCommand = (function (_super) {
    tslib_1.__extends(DialogFinishAndMergeCommand, _super);
    function DialogFinishAndMergeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogFinishAndMergeCommand.prototype.getState = function () {
        return new command_states_1.SimpleCommandState(this.isEnabled());
    };
    DialogFinishAndMergeCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    DialogFinishAndMergeCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            this.control.modelManager.richOptions.mailMerge.isEnabled &&
            this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() > 1;
    };
    DialogFinishAndMergeCommand.prototype.canModify = function () {
        return true;
    };
    DialogFinishAndMergeCommand.prototype.createParameters = function (_options) {
        var parameters = new FinishAndMergeDialogParameters();
        parameters.range = MailMergeExportRange.AllRecords;
        parameters.exportFrom = 1;
        parameters.exportRecordsCount = this.control.modelManager.richOptions.mailMerge.recordCount;
        parameters.mergeMode = MergeMode.NewParagraph;
        parameters.documentFormat = document_format_1.DocumentFormat.OpenXml;
        return parameters;
    };
    DialogFinishAndMergeCommand.prototype.getDialogName = function () {
        return "FinishAndMerge";
    };
    return DialogFinishAndMergeCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogFinishAndMergeCommand = DialogFinishAndMergeCommand;
var FinishAndMergeDialogParameters = (function (_super) {
    tslib_1.__extends(FinishAndMergeDialogParameters, _super);
    function FinishAndMergeDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FinishAndMergeDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.range = obj.range;
        this.exportFrom = obj.exportFrom;
        this.exportRecordsCount = obj.exportRecordsCount;
        this.mergeMode = obj.mergeMode;
        this.documentFormat = obj.documentFormat;
    };
    FinishAndMergeDialogParameters.prototype.clone = function () {
        var newInstance = new FinishAndMergeDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    FinishAndMergeDialogParameters.prototype.applyConverter = function (_converter) {
        return this;
    };
    return FinishAndMergeDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.FinishAndMergeDialogParameters = FinishAndMergeDialogParameters;
var MergeMode;
(function (MergeMode) {
    MergeMode[MergeMode["NewParagraph"] = 0] = "NewParagraph";
    MergeMode[MergeMode["NewSection"] = 1] = "NewSection";
    MergeMode[MergeMode["JoinTables"] = 2] = "JoinTables";
})(MergeMode = exports.MergeMode || (exports.MergeMode = {}));
var MailMergeExportRange;
(function (MailMergeExportRange) {
    MailMergeExportRange[MailMergeExportRange["AllRecords"] = 0] = "AllRecords";
    MailMergeExportRange[MailMergeExportRange["CurrentRecord"] = 1] = "CurrentRecord";
    MailMergeExportRange[MailMergeExportRange["Range"] = 2] = "Range";
})(MailMergeExportRange = exports.MailMergeExportRange || (exports.MailMergeExportRange = {}));
