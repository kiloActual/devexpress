"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var table_alignment_applier_1 = require("../../../core/layout-formatter/table/table-alignment-applier");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_column_1 = require("../../../core/layout/main-structures/layout-column");
var table_cell_properties_history_items_1 = require("../../../core/model/history/items/tables/table-cell-properties-history-items");
var table_properties_history_items_1 = require("../../../core/model/history/items/tables/table-properties-history-items");
var table_row_properties_history_items_1 = require("../../../core/model/history/items/tables/table-row-properties-history-items");
var table_cell_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-cell-properties-merger");
var table_row_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-row-properties-merger");
var table_cell_properties_1 = require("../../../core/model/tables/properties/table-cell-properties");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var table_utils_ex_1 = require("../../rich-utils/table-utils-ex");
var command_states_1 = require("../command-states");
var show_dialog_command_base_1 = require("./show-dialog-command-base");
var DialogTablePropertiesCommand = (function (_super) {
    tslib_1.__extends(DialogTablePropertiesCommand, _super);
    function DialogTablePropertiesCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogTablePropertiesCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.selection.tableInfo.extendedData.numRows > 0 && !this.selection.specialRunInfo.isPictureSelected();
        return state;
    };
    DialogTablePropertiesCommand.prototype.createParameters = function (options) {
        var dialogParams = new TablePropertiesDialogParameters();
        var table = this.selection.tableInfo.table;
        var subDocument = options.subDocument;
        var position = table.parentCell ? table.parentCell.endParagrapPosition.value : this.selection.intervals[0].start;
        var lp = subDocument.isMain() ?
            new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, position, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false)) :
            new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, position, this.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        var maxTableWidth = unit_converter_1.UnitConverter.pixelsToTwipsF(table.parentCell ? lp.row.width : layout_column_1.LayoutColumn.findSectionColumnWithMinimumWidth(lp.pageArea.columns));
        dialogParams.init(this.selection.tableInfo, this.control.modelManager.model, maxTableWidth, this.getInitialTab());
        return dialogParams;
    };
    DialogTablePropertiesCommand.prototype.applyParameters = function (_state, newParams, initParams) {
        var modelManipulator = this.modelManipulator;
        var subDocument = this.selection.activeSubDocument;
        var tableInfo = this.selection.tableInfo;
        var table = tableInfo.table;
        var history = this.history;
        if (!subDocument.isEditable([fixed_1.FixedInterval.fromPositions(table.getStartPosition(), table.getEndPosition())]))
            return false;
        var changed = false;
        history.beginTransaction();
        newParams.tablePreferredWidth = this.getActualPreferredWidth(newParams.useDefaultTableWidth, newParams.tablePreferredWidth);
        if (newParams.tablePreferredWidth && !newParams.tablePreferredWidth.equals(initParams.tablePreferredWidth)) {
            history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(modelManipulator, subDocument, table.index, newParams.tablePreferredWidth));
            changed = true;
        }
        if (newParams.tableRowAlignment !== undefined && newParams.tableRowAlignment !== null && newParams.tableRowAlignment !== initParams.tableRowAlignment) {
            history.addAndRedo(new table_properties_history_items_1.TableTableRowAlignmentHistoryItem(modelManipulator, subDocument, table.index, newParams.tableRowAlignment, true));
            for (var i = 0; i < table.rows.length; i++)
                history.addAndRedo(new table_row_properties_history_items_1.TableRowTableRowAlignmentHistoryItem(modelManipulator, subDocument, table.index, i, newParams.tableRowAlignment, true));
            changed = true;
        }
        if (!newParams.tableRowAlignment || newParams.tableRowAlignment !== table_base_structures_1.TableRowAlignment.Left)
            newParams.tableIndent = 0;
        if (newParams.tableIndent !== initParams.tableIndent) {
            var newTableIndent = table_units_1.TableWidthUnit.create(newParams.tableIndent, table_units_1.TableWidthUnitType.ModelUnits);
            history.addAndRedo(new table_properties_history_items_1.TableIndentHistoryItem(modelManipulator, subDocument, table.index, newTableIndent, true));
            changed = true;
        }
        if (!newParams.allowCellSpacing)
            newParams.cellSpacing = 0;
        if (newParams.cellSpacing !== undefined && newParams.cellSpacing !== initParams.cellSpacing) {
            var newCellSpacing = void 0;
            if (newParams.allowCellSpacing)
                newCellSpacing = table_units_1.TableWidthUnit.create(newParams.cellSpacing / 2, table_units_1.TableWidthUnitType.ModelUnits);
            else
                newCellSpacing = subDocument.documentModel.defaultTableProperties.cellSpacing.clone();
            history.addAndRedo(new table_properties_history_items_1.TableCellSpacingHistoryItem(modelManipulator, subDocument, table.index, newCellSpacing, true));
            for (var i = 0; i < table.rows.length; i++)
                history.addAndRedo(new table_row_properties_history_items_1.TableRowCellSpacingHistoryItem(modelManipulator, subDocument, table.index, i, newCellSpacing, true));
            changed = true;
        }
        var newlayoutType = newParams.resizeToFitContent ? table_base_structures_1.TableLayoutType.Autofit : table_base_structures_1.TableLayoutType.Fixed;
        if (newlayoutType !== table.properties.layoutType) {
            history.addAndRedo(new table_properties_history_items_1.TableLayoutTypeHistoryItem(modelManipulator, subDocument, table.index, newlayoutType, true));
            changed = true;
        }
        if (newParams.defaultCellMarginTop !== initParams.defaultCellMarginTop || newParams.defaultCellMarginRight !== initParams.defaultCellMarginRight ||
            newParams.defaultCellMarginBottom !== initParams.defaultCellMarginBottom || newParams.defaultCellMarginLeft !== initParams.defaultCellMarginLeft) {
            var topCellMargin = table_units_1.TableWidthUnit.create(newParams.defaultCellMarginTop, table_units_1.TableWidthUnitType.ModelUnits);
            var rightCellmargin = table_units_1.TableWidthUnit.create(newParams.defaultCellMarginRight, table_units_1.TableWidthUnitType.ModelUnits);
            var bottomCellMargin = table_units_1.TableWidthUnit.create(newParams.defaultCellMarginBottom, table_units_1.TableWidthUnitType.ModelUnits);
            var leftCellMargin = table_units_1.TableWidthUnit.create(newParams.defaultCellMarginLeft, table_units_1.TableWidthUnitType.ModelUnits);
            var newCellMargins = [topCellMargin, rightCellmargin, bottomCellMargin, leftCellMargin];
            history.addAndRedo(new table_properties_history_items_1.TableCellMarginsHistoryItem(modelManipulator, subDocument, table.index, newCellMargins, [true, true, true, true]));
            changed = true;
        }
        newParams.rowHeight = this.getActualRowHeight(newParams.useDefaultRowHeight, newParams.rowHeight);
        list_1.ListUtils.forEach(tableInfo.extendedData.rows, function (rowInfo) {
            var row = table.rows[rowInfo.rowIndex];
            if (newParams.rowHeight && !row.height.equals(newParams.rowHeight)) {
                history.addAndRedo(new table_row_properties_history_items_1.TableRowHeightHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, newParams.rowHeight));
                changed = true;
            }
            if (newParams.cantSplit !== undefined && newParams.cantSplit != initParams.cantSplit) {
                history.addAndRedo(new table_row_properties_history_items_1.TableRowCantSplitHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, newParams.cantSplit, true));
                changed = true;
            }
        });
        newParams.columnPreferredWidth = this.getActualPreferredWidth(newParams.useDefaultColumnWidth, newParams.columnPreferredWidth);
        if (newParams.columnPreferredWidth) {
            var columnsRange_1 = table_utils_ex_1.TableUtilsEx.getColumnsRangeBySelectedCells(tableInfo.extendedData);
            if (columnsRange_1.isNormalized()) {
                list_1.ListUtils.forEach(table.rows, function (row, rowIndex) {
                    list_1.ListUtils.forEach(table_utils_1.TableCellUtils.getCellIndicesByColumnsRange(row, columnsRange_1), function (cellIndex) {
                        if (!row.cells[cellIndex].preferredWidth.equals(newParams.columnPreferredWidth)) {
                            history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(modelManipulator, subDocument, table.index, rowIndex, cellIndex, newParams.columnPreferredWidth));
                            changed = true;
                        }
                    });
                });
            }
        }
        newParams.cellPreferredWidth = this.getActualPreferredWidth(newParams.useDefaultCellWidth, newParams.cellPreferredWidth);
        tableInfo.extendedData.foreach(function () { }, function (cellInfo, rowInfo) {
            var cell = cellInfo.cell;
            if (newParams.cellPreferredWidth && !cell.preferredWidth.equals(newParams.cellPreferredWidth) && !newParams.cellPreferredWidth.equals(initParams.cellPreferredWidth)) {
                history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, newParams.cellPreferredWidth));
                changed = true;
            }
            if (cell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
                var nextCellRowIndex = rowInfo.rowIndex + 1;
                while (table.rows[nextCellRowIndex]) {
                    var nextCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(table.rows[nextCellRowIndex], cellInfo.cellIndex);
                    var nextCell = table.rows[nextCellRowIndex].cells[nextCellIndex];
                    if (nextCell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                        break;
                    if (newParams.cellPreferredWidth && !nextCell.preferredWidth.equals(newParams.cellPreferredWidth)) {
                        history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(modelManipulator, subDocument, table.index, nextCellRowIndex, nextCellIndex, newParams.cellPreferredWidth));
                        changed = true;
                    }
                    nextCellRowIndex++;
                }
            }
            if (newParams.cellVerticalAlignment !== undefined && newParams.cellVerticalAlignment !== null && newParams.cellVerticalAlignment !== initParams.cellVerticalAlignment) {
                history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalAlignmentHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, newParams.cellVerticalAlignment, true));
                changed = true;
            }
            if (newParams.cellNoWrap !== undefined && newParams.cellNoWrap != initParams.cellNoWrap) {
                history.addAndRedo(new table_cell_properties_history_items_1.TableCellNoWrapHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, newParams.cellNoWrap, true));
                changed = true;
            }
            if (newParams.cellMarginsSameAsTable) {
                var defaultCellMargins = subDocument.documentModel.defaultTableCellProperties.cellMargins;
                if (!defaultCellMargins.equals(cell.properties.cellMargins)) {
                    var newCellMargins = [defaultCellMargins.top.clone(), defaultCellMargins.right.clone(), defaultCellMargins.bottom.clone(), defaultCellMargins.left.clone()];
                    history.addAndRedo(new table_cell_properties_history_items_1.TableCellCellMarginsHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, newCellMargins, [false, false, false, false]));
                    changed = true;
                }
            }
            else {
                if (newParams.cellMarginTop !== initParams.cellMarginTop || newParams.cellMarginRight !== initParams.cellMarginRight ||
                    newParams.cellMarginBottom !== initParams.cellMarginBottom || newParams.cellMarginLeft !== initParams.cellMarginLeft) {
                    var topCellMargin = table_units_1.TableWidthUnit.create(newParams.cellMarginTop, table_units_1.TableWidthUnitType.ModelUnits);
                    var rightCellmargin = table_units_1.TableWidthUnit.create(newParams.cellMarginRight, table_units_1.TableWidthUnitType.ModelUnits);
                    var bottomCellMargin = table_units_1.TableWidthUnit.create(newParams.cellMarginBottom, table_units_1.TableWidthUnitType.ModelUnits);
                    var leftCellMargin = table_units_1.TableWidthUnit.create(newParams.cellMarginLeft, table_units_1.TableWidthUnitType.ModelUnits);
                    var newCellMargins = [topCellMargin, rightCellmargin, bottomCellMargin, leftCellMargin];
                    history.addAndRedo(new table_cell_properties_history_items_1.TableCellCellMarginsHistoryItem(modelManipulator, subDocument, table.index, rowInfo.rowIndex, cellInfo.cellIndex, newCellMargins, [true, true, true, true]));
                    changed = true;
                }
            }
        });
        history.endTransaction();
        return changed;
    };
    DialogTablePropertiesCommand.prototype.getActualPreferredWidth = function (useDefaultValue, preferredWidth) {
        if (useDefaultValue === null)
            return null;
        if (useDefaultValue === true)
            return table_units_1.TableWidthUnit.create(0, table_units_1.TableWidthUnitType.Auto);
        return preferredWidth;
    };
    DialogTablePropertiesCommand.prototype.getActualRowHeight = function (useDefaultRowHeight, rowHeight) {
        if (useDefaultRowHeight === null)
            return null;
        if (useDefaultRowHeight === true)
            return table_units_1.TableHeightUnit.createDefault();
        return rowHeight;
    };
    DialogTablePropertiesCommand.prototype.getInitialTab = function () {
        return TablePropertiesDialogTab.Table;
    };
    DialogTablePropertiesCommand.prototype.getDialogName = function () {
        return "TableProperties";
    };
    return DialogTablePropertiesCommand;
}(show_dialog_command_base_1.ShowDialogCommandBase));
exports.DialogTablePropertiesCommand = DialogTablePropertiesCommand;
var DialogCellPropertiesCommand = (function (_super) {
    tslib_1.__extends(DialogCellPropertiesCommand, _super);
    function DialogCellPropertiesCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DialogCellPropertiesCommand.prototype.getInitialTab = function () {
        return TablePropertiesDialogTab.Cell;
    };
    return DialogCellPropertiesCommand;
}(DialogTablePropertiesCommand));
exports.DialogCellPropertiesCommand = DialogCellPropertiesCommand;
var TablePropertiesDialogParameters = (function (_super) {
    tslib_1.__extends(TablePropertiesDialogParameters, _super);
    function TablePropertiesDialogParameters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TablePropertiesDialogParameters.prototype.init = function (tableInfo, model, maxTableWidth, tab) {
        var table = tableInfo.table;
        this.tableInit(table, model);
        this.rowInit(tableInfo, model);
        this.columnInit(tableInfo);
        this.cellInit(tableInfo, model);
        this.maxTableWidth = maxTableWidth;
        this.initialTab = tab;
        this.isNestedTable = table.nestedLevel > 0;
    };
    TablePropertiesDialogParameters.prototype.tableInit = function (table, model) {
        this.useDefaultTableWidth = table.preferredWidth.type === table_units_1.TableWidthUnitType.Auto || table.preferredWidth.type === table_units_1.TableWidthUnitType.Nil;
        this.tablePreferredWidth = table.preferredWidth.clone();
        this.tableRowAlignment = table_alignment_applier_1.TableAlignmentApplier.getTableAlignment(table);
        var actualTableIndent = table.getActualTableIndent(model.defaultTableProperties);
        this.tableIndent = actualTableIndent.type === table_units_1.TableWidthUnitType.ModelUnits ? actualTableIndent.value : 0;
        this.cellSpacing = this.getCellSpacing(table, model);
        this.allowCellSpacing = this.cellSpacing !== 0;
        var layoutType = table.getActualTableLayout(model.defaultTableProperties);
        this.resizeToFitContent = layoutType === table_base_structures_1.TableLayoutType.Autofit;
        this.defaultCellMarginLeft = table.getActualLeftMargin(model.defaultTableProperties).value;
        this.defaultCellMarginRight = table.getActualRightMargin(model.defaultTableProperties).value;
        this.defaultCellMarginTop = table.getActualTopMargin(model.defaultTableProperties).value;
        this.defaultCellMarginBottom = table.getActualBottomMargin(model.defaultTableProperties).value;
    };
    TablePropertiesDialogParameters.prototype.getCellSpacing = function (table, model) {
        var firstRow = table.rows[0];
        var firstRowCellSpacing = new table_row_properties_merger_1.TableRowPropertiesMergerCellSpacing(model, table, firstRow.tablePropertiesException)
            .getProperty(firstRow.properties, table.style, table_base_structures_1.ConditionalTableStyleFormatting.FirstRow, model.defaultTableRowProperties);
        for (var i = 0, currentRow = void 0; currentRow = table.rows[i]; i++) {
            var currentRowCellSpacing = new table_row_properties_merger_1.TableRowPropertiesMergerCellSpacing(model, table, currentRow.tablePropertiesException)
                .getProperty(currentRow.properties, table.style, currentRow.conditionalFormatting, model.defaultTableRowProperties);
            if (!firstRowCellSpacing.equals(currentRowCellSpacing))
                return null;
        }
        return firstRowCellSpacing.type === table_units_1.TableWidthUnitType.ModelUnits ? (firstRowCellSpacing.value * 2) : 0;
    };
    TablePropertiesDialogParameters.prototype.rowInit = function (tableInfo, model) {
        var table = tableInfo.table;
        var identicalRowHeight = true;
        var identicalCantSplit = true;
        var cantSplitMerger = new table_row_properties_merger_1.TableRowPropertiesMergerCantSplit();
        var firstRow = table.rows[tableInfo.extendedData.startRowIndex];
        var firstRowCantSplit = cantSplitMerger.getProperty(firstRow.properties, table.style, firstRow.conditionalFormatting, model.defaultTableRowProperties);
        var firstRowHeight = firstRow.height.clone();
        list_1.ListUtils.reverseForEach(tableInfo.extendedData.rows, function (rowInfo) {
            var currentRow = table.rows[rowInfo.rowIndex];
            var currentCantSplit = cantSplitMerger.getProperty(currentRow.properties, table.style, currentRow.conditionalFormatting, model.defaultTableRowProperties);
            identicalRowHeight = currentRow.height.equals(firstRowHeight);
            identicalCantSplit = identicalCantSplit && (firstRowCantSplit === currentCantSplit);
        }, tableInfo.extendedData.rows.length - 1, 1);
        this.useDefaultRowHeight = identicalRowHeight ? firstRowHeight.value === 0 : null;
        this.cantSplit = identicalCantSplit ? firstRowCantSplit : null;
        this.rowHeight = table_units_1.TableHeightUnit.create(identicalRowHeight ? firstRowHeight.value : 0, firstRowHeight.type === table_units_1.TableHeightUnitType.Exact ? table_units_1.TableHeightUnitType.Exact : table_units_1.TableHeightUnitType.Minimum);
    };
    TablePropertiesDialogParameters.prototype.columnInit = function (tableInfo) {
        var table = tableInfo.table;
        var identicalColumnWidth = true;
        var columnsRange = table_utils_ex_1.TableUtilsEx.getColumnsRangeBySelectedCells(tableInfo.extendedData);
        var firstCellWidth = null;
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            var cellIndices = table_utils_1.TableCellUtils.getCellIndicesByColumnsRange(row, columnsRange);
            for (var i = 0; i < cellIndices.length; i++) {
                var cellIndex = cellIndices[i];
                if (firstCellWidth === null)
                    firstCellWidth = table.rows[rowIndex].cells[cellIndex].preferredWidth;
                else
                    identicalColumnWidth = identicalColumnWidth && table.rows[rowIndex].cells[cellIndex].preferredWidth.equals(firstCellWidth);
            }
        }
        this.useDefaultColumnWidth = identicalColumnWidth ? firstCellWidth.type === table_units_1.TableWidthUnitType.Auto : null;
        this.columnPreferredWidth = firstCellWidth.clone();
    };
    TablePropertiesDialogParameters.prototype.cellInit = function (tableInfo, model) {
        var _this = this;
        var table = tableInfo.table;
        this.cellMarginsSameAsTable = true;
        var identicalCellWidth = true;
        var identicalVerticalAlignment = true;
        var identicalNoWrap = true;
        var identicalLeftMargins = true;
        var identicalRightMargins = true;
        var identicalTopMargins = true;
        var identicalBottomMargins = true;
        var noWrapMerger = new table_cell_properties_merger_1.TableCellPropertiesMergerNoWrap();
        var verticalAlignmentMerger = new table_cell_properties_merger_1.TableCellVerticalAlignmentMerger();
        var firstSelectedCell = tableInfo.extendedData.firstCell;
        var firstCellWidth = firstSelectedCell.preferredWidth.clone();
        var firstCellVerticalAlignment = verticalAlignmentMerger.getProperty(firstSelectedCell.properties, table.style, firstSelectedCell.conditionalFormatting, model.defaultTableCellProperties);
        var firstCellNoWrap = noWrapMerger.getProperty(firstSelectedCell.properties, table.style, firstSelectedCell.conditionalFormatting, model.defaultTableCellProperties);
        var firstCellMargins = this.getActualCellMargins(table, firstSelectedCell, model);
        list_1.ListUtils.forEach(tableInfo.extendedData.rows, function (rowInfo) {
            list_1.ListUtils.forEach(rowInfo.cells, function (cellInfo) {
                var cell = cellInfo.cell;
                identicalCellWidth = identicalCellWidth && (firstCellWidth.equals(cell.preferredWidth));
                var currentCellVerticalAlignment = verticalAlignmentMerger.getProperty(cell.properties, table.style, cell.conditionalFormatting, model.defaultTableCellProperties);
                identicalVerticalAlignment = identicalVerticalAlignment && (firstCellVerticalAlignment === currentCellVerticalAlignment);
                var currentCellNoWrap = noWrapMerger.getProperty(cell.properties, table.style, cell.conditionalFormatting, model.defaultTableCellProperties);
                identicalNoWrap = identicalNoWrap && (firstCellNoWrap === currentCellNoWrap);
                var curreantCellMargins = _this.getActualCellMargins(table, cell, model);
                identicalTopMargins = identicalTopMargins && firstCellMargins.top.equals(curreantCellMargins.top);
                identicalRightMargins = identicalRightMargins && firstCellMargins.right.equals(curreantCellMargins.right);
                identicalBottomMargins = identicalBottomMargins && firstCellMargins.bottom.equals(curreantCellMargins.bottom);
                identicalLeftMargins = identicalLeftMargins && firstCellMargins.left.equals(curreantCellMargins.left);
                if (cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopMargin) || cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightMargin) ||
                    cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomMargin) || cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftMargin))
                    _this.cellMarginsSameAsTable = false;
            });
        });
        this.useDefaultCellWidth = identicalCellWidth ? firstCellWidth.type === table_units_1.TableWidthUnitType.Auto : null;
        this.cellPreferredWidth = firstCellWidth;
        this.cellVerticalAlignment = identicalVerticalAlignment ? firstCellVerticalAlignment : null;
        this.cellNoWrap = identicalNoWrap ? firstCellNoWrap : null;
        this.cellMarginTop = identicalTopMargins ? firstCellMargins.top.value : null;
        this.cellMarginRight = identicalRightMargins ? firstCellMargins.right.value : null;
        this.cellMarginBottom = identicalBottomMargins ? firstCellMargins.bottom.value : null;
        this.cellMarginLeft = identicalLeftMargins ? firstCellMargins.left.value : null;
    };
    TablePropertiesDialogParameters.prototype.getActualCellMargins = function (_table, cell, model) {
        var cellMarginLeft = cell.getActualLeftCellMargin(model).clone();
        var cellMarginRight = cell.getActualRightCellMargin(model).clone();
        var cellMarginTop = cell.getActualTopCellMargin(model).clone();
        var cellMarginBottom = cell.getActualBottomCellMargin(model).clone();
        return table_base_structures_1.TableCellMargins.create(cellMarginTop, cellMarginRight, cellMarginBottom, cellMarginLeft);
    };
    TablePropertiesDialogParameters.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.useDefaultTableWidth = obj.useDefaultTableWidth;
        this.tablePreferredWidth = obj.tablePreferredWidth.clone();
        this.tableRowAlignment = obj.tableRowAlignment;
        this.tableIndent = obj.tableIndent;
        this.cellSpacing = obj.cellSpacing;
        this.allowCellSpacing = obj.allowCellSpacing;
        this.resizeToFitContent = obj.resizeToFitContent;
        this.defaultCellMarginLeft = obj.defaultCellMarginLeft;
        this.defaultCellMarginRight = obj.defaultCellMarginRight;
        this.defaultCellMarginTop = obj.defaultCellMarginTop;
        this.defaultCellMarginBottom = obj.defaultCellMarginTop;
        this.useDefaultRowHeight = obj.useDefaultRowHeight;
        this.rowHeight = obj.rowHeight.clone();
        this.cantSplit = obj.cantSplit;
        this.useDefaultColumnWidth = obj.useDefaultColumnWidth;
        this.columnPreferredWidth = obj.columnPreferredWidth.clone();
        this.useDefaultCellWidth = obj.useDefaultCellWidth;
        this.cellPreferredWidth = obj.cellPreferredWidth.clone();
        this.cellVerticalAlignment = obj.cellVerticalAlignment;
        this.cellNoWrap = obj.cellNoWrap;
        this.cellMarginLeft = obj.cellMarginLeft;
        this.cellMarginRight = obj.cellMarginRight;
        this.cellMarginTop = obj.cellMarginTop;
        this.cellMarginBottom = obj.cellMarginBottom;
        this.cellMarginsSameAsTable = obj.cellMarginsSameAsTable;
        this.maxTableWidth = obj.maxTableWidth;
        this.initialTab = obj.initialTab;
        this.isNestedTable = obj.isNestedTable;
    };
    TablePropertiesDialogParameters.prototype.clone = function () {
        var newInstance = new TablePropertiesDialogParameters();
        newInstance.copyFrom(this);
        return newInstance;
    };
    TablePropertiesDialogParameters.prototype.applyConverter = function (converter) {
        if (this.tablePreferredWidth && this.tablePreferredWidth.type === table_units_1.TableWidthUnitType.ModelUnits)
            this.tablePreferredWidth.value = converter(this.tablePreferredWidth.value);
        if (this.tableIndent)
            this.tableIndent = converter(this.tableIndent);
        if (this.cellSpacing)
            this.cellSpacing = converter(this.cellSpacing);
        if (this.defaultCellMarginLeft)
            this.defaultCellMarginLeft = converter(this.defaultCellMarginLeft);
        if (this.defaultCellMarginRight)
            this.defaultCellMarginRight = converter(this.defaultCellMarginRight);
        if (this.defaultCellMarginTop)
            this.defaultCellMarginTop = converter(this.defaultCellMarginTop);
        if (this.defaultCellMarginBottom)
            this.defaultCellMarginBottom = converter(this.defaultCellMarginBottom);
        if (this.rowHeight)
            this.rowHeight.value = converter(this.rowHeight.value);
        if (this.columnPreferredWidth && this.columnPreferredWidth.type === table_units_1.TableWidthUnitType.ModelUnits)
            this.columnPreferredWidth.value = converter(this.columnPreferredWidth.value);
        if (this.cellPreferredWidth && this.cellPreferredWidth.type === table_units_1.TableWidthUnitType.ModelUnits)
            this.cellPreferredWidth.value = converter(this.cellPreferredWidth.value);
        if (this.cellMarginTop)
            this.cellMarginTop = converter(this.cellMarginTop);
        if (this.cellMarginRight)
            this.cellMarginRight = converter(this.cellMarginRight);
        if (this.cellMarginBottom)
            this.cellMarginBottom = converter(this.cellMarginBottom);
        if (this.cellMarginLeft)
            this.cellMarginLeft = converter(this.cellMarginLeft);
        if (this.maxTableWidth)
            this.maxTableWidth = converter(this.maxTableWidth);
        return this;
    };
    return TablePropertiesDialogParameters;
}(show_dialog_command_base_1.DialogParametersBase));
exports.TablePropertiesDialogParameters = TablePropertiesDialogParameters;
var TablePropertiesDialogDefaults = (function () {
    function TablePropertiesDialogDefaults() {
    }
    TablePropertiesDialogDefaults.MinTableIndentByDefault = -15 * 1440;
    TablePropertiesDialogDefaults.MaxTableIndentByDefault = 15 * 1440;
    TablePropertiesDialogDefaults.MinTableWidthByDefault = 0;
    TablePropertiesDialogDefaults.MaxTableWidthInModelUnitsByDefault = 22 * 1440;
    TablePropertiesDialogDefaults.MaxTableWidthInPercentByDefault = 600;
    TablePropertiesDialogDefaults.MinRowHeightByDefault = 0;
    TablePropertiesDialogDefaults.MaxRowHeightByDefault = 22 * 1440;
    TablePropertiesDialogDefaults.MinColumnWidthByDefault = 0;
    TablePropertiesDialogDefaults.MaxColumnWidthInModelUnitsByDefault = 22 * 1440;
    TablePropertiesDialogDefaults.MaxColumnWidthInPercentByDefault = 100;
    TablePropertiesDialogDefaults.MinCellWidthByDefault = 0;
    TablePropertiesDialogDefaults.MaxCellWidthInModelUnitsByDefault = 22 * 1440;
    TablePropertiesDialogDefaults.MaxCellWidthInPercentByDefault = 100;
    return TablePropertiesDialogDefaults;
}());
exports.TablePropertiesDialogDefaults = TablePropertiesDialogDefaults;
var TablePropertiesDialogTab;
(function (TablePropertiesDialogTab) {
    TablePropertiesDialogTab[TablePropertiesDialogTab["Table"] = 0] = "Table";
    TablePropertiesDialogTab[TablePropertiesDialogTab["Row"] = 1] = "Row";
    TablePropertiesDialogTab[TablePropertiesDialogTab["Column"] = 2] = "Column";
    TablePropertiesDialogTab[TablePropertiesDialogTab["Cell"] = 3] = "Cell";
})(TablePropertiesDialogTab = exports.TablePropertiesDialogTab || (exports.TablePropertiesDialogTab = {}));
