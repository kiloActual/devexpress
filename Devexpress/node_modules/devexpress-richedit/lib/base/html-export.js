"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("../base-utils/unit-converter");
var layout_picture_box_1 = require("../core/layout/main-structures/layout-boxes/layout-picture-box");
var enums_1 = require("../core/model/borders/enums");
var character_properties_1 = require("../core/model/character/character-properties");
var enums_2 = require("../core/model/character/enums");
var color_1 = require("../core/model/color/color");
var field_1 = require("../core/model/fields/field");
var list_level_properties_1 = require("../core/model/numbering-lists/list-level-properties");
var numbering_list_1 = require("../core/model/numbering-lists/numbering-list");
var paragraph_properties_1 = require("../core/model/paragraph/paragraph-properties");
var rich_utils_1 = require("../core/model/rich-utils");
var run_type_1 = require("../core/model/runs/run-type");
var table_1 = require("../core/model/tables/main-structures/table");
var table_cell_properties_merger_1 = require("../core/model/tables/properties-mergers/table-cell-properties-merger");
var table_properties_merger_1 = require("../core/model/tables/properties-mergers/table-properties-merger");
var table_base_structures_1 = require("../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../core/model/tables/secondary-structures/table-units");
var html_converter_1 = require("../core/rich-utils/html-converter");
var unit_converter_2 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var color_2 = require("@devexpress/utils/lib/utils/color");
var encode_1 = require("@devexpress/utils/lib/utils/encode");
var search_1 = require("@devexpress/utils/lib/utils/search");
var string_1 = require("@devexpress/utils/lib/utils/string");
var HtmlExporter = (function () {
    function HtmlExporter(control) {
        this.rangeCopy = null;
        this.control = control;
    }
    Object.defineProperty(HtmlExporter.prototype, "colorProvider", {
        get: function () { return this.control.modelManager.model.colorProvider; },
        enumerable: true,
        configurable: true
    });
    HtmlExporter.prototype.getHtmlElementsByInterval = function (model, subDocument, interval) {
        if (interval.length === 0)
            return "";
        var unitConverter = this.control.uiUnitConverter;
        var unitTypeToString = unitConverter.getUnits() == unit_converter_1.RichEditUnit.Centimeter ? "cm" : "in";
        var iterator = subDocument.getConstRunIterator(interval);
        var remainLength = interval.length;
        var currentPosition = interval.start;
        var renderer = this.control.viewManager.renderer;
        var result = "";
        var paragraphsInInterval = subDocument.getParagraphsByInterval(interval);
        var paragraphs = [];
        for (var i = 0, paragraphInInterval; paragraphInInterval = paragraphsInInterval[i]; i++) {
            if (interval.containsWithIntervalEnd(paragraphInInterval.getEndPosition()))
                paragraphs.push(paragraphInInterval);
        }
        var listsInInterval = [];
        for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) {
            if (paragraph.isInList()) {
                var paragraphNumberingListIndex = paragraph.getNumberingListIndex();
                var paragraphListLevelIndex = paragraph.getListLevelIndex();
                var paragraphStart = paragraph.startLogPosition.value;
                var paragraphEnd = paragraph.getEndPosition();
                var existingItem = null;
                for (var j = 0; j < listsInInterval.length; j++) {
                    if (listsInInterval[j].numberingListIndex == paragraphNumberingListIndex && listsInInterval[j].listLevelIndex == paragraphListLevelIndex)
                        existingItem = listsInInterval[j];
                }
                if (existingItem && (paragraphListLevelIndex == 0 || existingItem.end == paragraphStart
                    || listsInInterval[listsInInterval.length - 1].listLevelIndex > paragraphListLevelIndex)) {
                    existingItem.end = paragraphEnd;
                }
                else {
                    listsInInterval.push({
                        numberingListIndex: paragraphNumberingListIndex, listLevelIndex: paragraphListLevelIndex,
                        start: paragraphStart, end: paragraphEnd
                    });
                }
                var listLevelIndex = paragraphListLevelIndex;
                while (listLevelIndex > 0) {
                    var parentItem = null;
                    for (var j = 0; j < listsInInterval.length; j++) {
                        if (listsInInterval[j].listLevelIndex == listLevelIndex - 1)
                            parentItem = listsInInterval[j];
                    }
                    if (parentItem)
                        parentItem.end = paragraphEnd;
                    listLevelIndex--;
                }
            }
        }
        var isInsideFieldCode = false;
        var hyperlinkInfo = null;
        var hasFields = false;
        while (iterator.moveNext()) {
            var tableCell = table_1.Table.getTableCellByPosition(subDocument.tables, iterator.currentInterval().start);
            var isContinueMergingCell = tableCell && tableCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue;
            var listToStartIndex = -1;
            var listsToEndIndices = [];
            if (!tableCell) {
                if (listsInInterval.length) {
                    var currentPosition_1 = iterator.currentInterval().start;
                    for (var i = 0; i < listsInInterval.length; i++) {
                        if (listsInInterval[i].start == currentPosition_1)
                            listToStartIndex = i;
                        if (listsInInterval[i].end == iterator.currentInterval().end)
                            listsToEndIndices.push(i);
                    }
                    if (listToStartIndex < 0 && currentPosition_1 == interval.start) {
                        var firstParagraph = subDocument.getParagraphByPosition(currentPosition_1);
                        if (firstParagraph.getNumberingListIndex() == listsInInterval[0].numberingListIndex)
                            listToStartIndex = 0;
                    }
                }
                if (listToStartIndex > -1) {
                    var numberingList = model.numberingLists[listsInInterval[listToStartIndex].numberingListIndex];
                    var listFormatType = "";
                    switch (numberingList.levels[listsInInterval[listToStartIndex].listLevelIndex].getListLevelProperties().format) {
                        case list_level_properties_1.NumberingFormat.Bullet:
                            listFormatType = "disc";
                            break;
                        case list_level_properties_1.NumberingFormat.Decimal:
                            listFormatType = "decimal";
                            break;
                        case list_level_properties_1.NumberingFormat.LowerLetter:
                            listFormatType = "lower-alpha";
                            break;
                        case list_level_properties_1.NumberingFormat.UpperLetter:
                            listFormatType = "upper-alpha";
                            break;
                        case list_level_properties_1.NumberingFormat.LowerRoman:
                            listFormatType = "lower-roman";
                            break;
                        case list_level_properties_1.NumberingFormat.UpperRoman:
                            listFormatType = "upper-roman";
                            break;
                        default:
                            break;
                    }
                    result += "<" + (numberingList.getListType() != numbering_list_1.NumberingType.Bullet ? "ol" : "ul") + " style=\"list-style-type:" + listFormatType + "\">";
                }
            }
            var run = iterator.currentRun;
            var isRunInEmptyParagraph = run.paragraph.length === 1;
            if (paragraphs.length && (run.getType() != run_type_1.RunType.ParagraphRun || isRunInEmptyParagraph)) {
                var paragraphToStartIndex = search_1.SearchUtils.normedInterpolationIndexOf(paragraphs, function (p) { return p.startLogPosition.value; }, currentPosition);
                if (paragraphToStartIndex > -1) {
                    var currentParagraph = paragraphs[paragraphToStartIndex];
                    paragraphs.splice(paragraphToStartIndex, 1);
                    if (tableCell) {
                        var parentRow = tableCell.parentRow;
                        var parentTable = parentRow.parentTable;
                        var paragraphStartPosition = currentParagraph.startLogPosition.value;
                        if (parentTable.getStartPosition() == paragraphStartPosition) {
                            if (parentTable.parentCell) {
                                var parentCell = parentTable.parentCell;
                                while (parentCell) {
                                    var currentParentRow = parentCell.parentRow;
                                    var currentParentTable = currentParentRow.parentTable;
                                    if (currentParentTable.getStartPosition() == paragraphStartPosition)
                                        result += "<table style=\"" + this.getTableStyle(model, currentParentTable) + "\"><tbody>";
                                    if (currentParentRow.getStartPosition() == paragraphStartPosition) {
                                        result += "<tr>";
                                        if (currentParentRow.gridBefore > 0)
                                            result += "<td style=\"mso-cell-special:placeholder\" colspan=\"" + currentParentRow.gridBefore + "\">&nbsp;</td>";
                                    }
                                    if (parentCell.startParagraphPosition.value == paragraphStartPosition)
                                        result += "<td style=\"" + this.getCellStyle(model, parentCell) + "\"" + (parentCell.columnSpan > 1 ? " colspan=\"" + parentCell.columnSpan + "\"" : "") + ">";
                                    parentCell = currentParentTable.parentCell;
                                }
                            }
                            result += "<table style=\"" + this.getTableStyle(model, parentTable) + "\"><tbody>";
                        }
                        if (parentRow.getStartPosition() == paragraphStartPosition) {
                            result += "<tr>";
                            if (parentRow.gridBefore > 0)
                                result += "<td style=\"mso-cell-special:placeholder\" colspan=\"" + parentRow.gridBefore + "\">&nbsp;</td>";
                        }
                        if (tableCell.startParagraphPosition.value == paragraphStartPosition && !isContinueMergingCell) {
                            var rowSpan = 1;
                            if (tableCell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
                                var rowIndex = parentTable.rows.indexOf(parentRow);
                                var cellIndex = parentRow.cells.indexOf(tableCell);
                                for (var i_1 = rowIndex + 1, row = void 0; row = parentTable.rows[i_1]; i_1++) {
                                    var nextRowCellIndex = cellIndex;
                                    if (row.cells.length != parentRow.cells.length) {
                                        var extraCellsCount = 0;
                                        var isNextRowLonger = row.cells.length > parentRow.cells.length;
                                        var shorterRow = isNextRowLonger ? parentRow : row;
                                        for (var j_1 = 0; (j_1 < cellIndex) && (j_1 < shorterRow.cells.length); j_1++) {
                                            extraCellsCount += shorterRow.cells[j_1].columnSpan - 1;
                                            if (!isNextRowLonger)
                                                extraCellsCount -= parentRow.cells[j_1].columnSpan - 1;
                                        }
                                        nextRowCellIndex += (isNextRowLonger ? 1 : -1) * extraCellsCount;
                                    }
                                    var nextRowCell = row.cells[nextRowCellIndex];
                                    if (nextRowCell && nextRowCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                                        rowSpan++;
                                    else
                                        break;
                                }
                            }
                            result += "<td style=\"" + this.getCellStyle(model, tableCell) + "\"" + (rowSpan > 1 ? " rowspan=\"" + rowSpan + "\"" : "") +
                                (tableCell.columnSpan > 1 ? " colspan=\"" + tableCell.columnSpan + "\"" : "") + ">";
                        }
                    }
                    if (!isContinueMergingCell) {
                        var maskedParagraphProperties = currentParagraph.getParagraphMergedProperties();
                        var paragraphStyle = "";
                        var firstLineIndentType = maskedParagraphProperties.firstLineIndentType;
                        if (firstLineIndentType != paragraph_properties_1.ParagraphFirstLineIndent.None) {
                            paragraphStyle += "text-indent: " + (firstLineIndentType == paragraph_properties_1.ParagraphFirstLineIndent.Hanging ? "-" : "") +
                                unitConverter.twipsToUI(maskedParagraphProperties.firstLineIndent) + unitTypeToString + ";";
                        }
                        if (maskedParagraphProperties.alignment !== undefined) {
                            paragraphStyle += "text-align: ";
                            switch (maskedParagraphProperties.alignment) {
                                case paragraph_properties_1.ParagraphAlignment.Left:
                                    paragraphStyle += "left;";
                                    break;
                                case paragraph_properties_1.ParagraphAlignment.Right:
                                    paragraphStyle += "right;";
                                    break;
                                case paragraph_properties_1.ParagraphAlignment.Justify:
                                case paragraph_properties_1.ParagraphAlignment.JustifyHigh:
                                case paragraph_properties_1.ParagraphAlignment.JustifyLow:
                                case paragraph_properties_1.ParagraphAlignment.JustifyMedium:
                                case paragraph_properties_1.ParagraphAlignment.Distribute:
                                case paragraph_properties_1.ParagraphAlignment.ThaiDistribute:
                                    paragraphStyle += "justify;";
                                    break;
                                case paragraph_properties_1.ParagraphAlignment.Center:
                                    paragraphStyle += "center;";
                                    break;
                                default:
                                    break;
                            }
                        }
                        if (maskedParagraphProperties.lineSpacingType != paragraph_properties_1.ParagraphLineSpacingType.Single) {
                            var lineSpacingInUI = unitConverter.twipsToUI(maskedParagraphProperties.lineSpacing) + unitTypeToString + ";";
                            paragraphStyle += "line-height: ";
                            switch (maskedParagraphProperties.lineSpacingType) {
                                case paragraph_properties_1.ParagraphLineSpacingType.AtLeast:
                                    paragraphStyle += lineSpacingInUI;
                                    break;
                                case paragraph_properties_1.ParagraphLineSpacingType.Double:
                                    paragraphStyle += "2;";
                                    break;
                                case paragraph_properties_1.ParagraphLineSpacingType.Exactly:
                                    paragraphStyle += lineSpacingInUI + "mso-line-height-rule: exactly;";
                                    break;
                                case paragraph_properties_1.ParagraphLineSpacingType.Multiple:
                                    paragraphStyle += maskedParagraphProperties.lineSpacing + ";";
                                    break;
                                case paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral:
                                    paragraphStyle += "1.5;";
                                    break;
                                default:
                                    break;
                            }
                        }
                        if (color_2.ColorUtils.getAlpha(maskedParagraphProperties.shadingInfo.getActualColor(this.colorProvider)) > 0)
                            paragraphStyle += "background: " + color_1.ColorHelper.getCssStringInternal(maskedParagraphProperties.shadingInfo.getActualColor(this.colorProvider)) + ";";
                        if (maskedParagraphProperties.leftIndent)
                            paragraphStyle += "margin-left: " + unitConverter.twipsToUI(maskedParagraphProperties.leftIndent) + unitTypeToString + ";";
                        if (maskedParagraphProperties.rightIndent)
                            paragraphStyle += "margin-right: " + unitConverter.twipsToUI(maskedParagraphProperties.rightIndent) + unitTypeToString + ";";
                        paragraphStyle += "margin-top: " + unitConverter.twipsToUI(maskedParagraphProperties.spacingBefore) + unitTypeToString + ";";
                        paragraphStyle += "margin-bottom: " + unitConverter.twipsToUI(maskedParagraphProperties.spacingAfter) + unitTypeToString + ";";
                        var topBorderStyle = this.getBorderCssString(maskedParagraphProperties.topBorder);
                        if (topBorderStyle)
                            paragraphStyle += "border-top:" + topBorderStyle + ";";
                        var leftBorderStyle = this.getBorderCssString(maskedParagraphProperties.leftBorder);
                        if (leftBorderStyle)
                            paragraphStyle += "border-left:" + leftBorderStyle + ";";
                        var bottomBorderStyle = this.getBorderCssString(maskedParagraphProperties.bottomBorder);
                        if (bottomBorderStyle)
                            paragraphStyle += "border-bottom:" + bottomBorderStyle + ";";
                        var rightBorderStyle = this.getBorderCssString(maskedParagraphProperties.rightBorder);
                        if (rightBorderStyle)
                            paragraphStyle += "border-right:" + rightBorderStyle + ";";
                        if (isRunInEmptyParagraph) {
                            var charProps = run.getCharacterMergedProperties();
                            paragraphStyle += html_converter_1.HtmlConverter.getCssRules(charProps, charProps.textColor.toRgb(this.colorProvider), false, false, false)
                                .join(";");
                        }
                        result += (currentParagraph.isInList() && !tableCell ? "<li>" : "") + "<p" + (paragraphStyle ? " style=\"" + paragraphStyle + "\"" : "") + ">";
                        if (isRunInEmptyParagraph)
                            result += "&nbsp;";
                    }
                }
            }
            var html = "";
            var innerHtml = "";
            var length = Math.min(remainLength, iterator.currentInterval().length);
            switch (run.getType()) {
                case run_type_1.RunType.ParagraphRun:
                    if (!isContinueMergingCell) {
                        html = "</p>";
                        var paragraphEndPosition = run.paragraph.getEndPosition();
                        if (tableCell) {
                            var parentRow = tableCell.parentRow;
                            var parentTable = parentRow.parentTable;
                            if (tableCell.endParagrapPosition.value == paragraphEndPosition)
                                html += "</td>";
                            if (parentRow.getEndPosition() == paragraphEndPosition) {
                                if (parentRow.gridAfter > 0)
                                    html += "<td style=\"mso-cell-special:placeholder\" colspan=\"" + parentRow.gridAfter + "\">&nbsp;</td>";
                                html += "</tr>";
                            }
                            if (parentTable.getEndPosition() == paragraphEndPosition)
                                html += "</tbody></table>";
                        }
                    }
                    break;
                case run_type_1.RunType.InlinePictureRun:
                case run_type_1.RunType.AnchoredPictureRun: {
                    var picRun = run;
                    var charMergProps = run.getCharacterMergedProperties();
                    var pictureBox = new layout_picture_box_1.LayoutPictureBox(charMergProps, charMergProps.getLayoutColorInfo(this.colorProvider), picRun.cacheInfo, picRun.getActualSize().applyConverter(unit_converter_2.UnitConverter.twipsToPixels));
                    innerHtml = renderer.renderPicture(pictureBox);
                    break;
                }
                case run_type_1.RunType.InlineTextBoxRun:
                case run_type_1.RunType.AnchoredTextBoxRun: {
                    var textBoxRun = run;
                    var internalSubDocument = this.control.modelManager.model.subDocuments[textBoxRun.subDocId];
                    innerHtml = "<table border='1' style='border-width: 0px; border-collapse: collapse; border-spacing: 0px;'><tbody><tr>";
                    innerHtml += "<td style='" + this.getTextBoxStyleString(textBoxRun) + "'>";
                    innerHtml += this.getHtmlElementsByInterval(model, internalSubDocument, new fixed_1.FixedInterval(0, internalSubDocument.getDocumentEndPosition()));
                    innerHtml += "</td></tr></tbody></table>";
                    break;
                }
                case run_type_1.RunType.FieldCodeStartRun:
                    isInsideFieldCode = true;
                    var fieldIndex = field_1.Field.normedBinaryIndexOf(subDocument.fields, currentPosition + 1);
                    var field = subDocument.fields[fieldIndex];
                    if (field.isHyperlinkField())
                        hyperlinkInfo = field.getHyperlinkInfo();
                    break;
                case run_type_1.RunType.FieldCodeEndRun:
                    isInsideFieldCode = false;
                    break;
                case run_type_1.RunType.FieldResultEndRun:
                    hasFields = true;
                    break;
                case run_type_1.RunType.LayoutDependentRun:
                    var currentField = subDocument.fields[field_1.Field.normedBinaryIndexOf(subDocument.fields, currentPosition)];
                    if (currentField) {
                        var codeText = string_1.StringUtils.trim(subDocument.getText(currentField.getCodeInterval()).split("\\")[0]).toUpperCase();
                        if (codeText == "NUMPAGES")
                            innerHtml = this.control.layout.lastMaxNumPages.toString();
                        else if (codeText == "PAGE")
                            innerHtml = (this.control.selection.pageIndex + 1).toString();
                    }
                    break;
                default:
                    if (!isInsideFieldCode)
                        innerHtml = this.getHtmlText(subDocument.getText(new fixed_1.FixedInterval(currentPosition, length)));
                    break;
            }
            if (!html && innerHtml) {
                var characterProperties = run.getCharacterMergedProperties();
                var boxStyle = "white-space:pre;" + html_converter_1.HtmlConverter.getCssRules(characterProperties, characterProperties.textColor.toRgb(this.colorProvider), run.getType() == run_type_1.RunType.TextRun, false, false).
                    join(";");
                html = "<span style=\"" + boxStyle + "\">" + innerHtml + "</span>";
                if (hyperlinkInfo) {
                    var url = hyperlinkInfo.uri + (hyperlinkInfo.anchor != "" ? "#" + hyperlinkInfo.anchor : "");
                    var tooltip = hyperlinkInfo.tip;
                    html = "<a href=\"" + url + "\" title=\"" + tooltip + "\">" + html + "</a>";
                    hyperlinkInfo = null;
                }
                else {
                    if (characterProperties.fontUnderlineType != enums_2.UnderlineType.None && !characterProperties.underlineWordsOnly) {
                        var underlineColor = characterProperties.underlineColor.toRgb(this.colorProvider);
                        var cssColorValue = (underlineColor != color_1.ColorHelper.AUTOMATIC_COLOR) ? color_1.ColorHelper.getCssStringInternal(underlineColor) : "initial";
                        html = "<span style=\"text-decoration: underline; color: " + cssColorValue + "\">" + html + "</span>";
                    }
                    if (characterProperties.script !== enums_2.CharacterFormattingScript.Normal)
                        html = "<span style=\"font-size: " + characterProperties.fontSize + "px;\">" + html + "</span>";
                    if (color_2.ColorUtils.getAlpha(character_properties_1.CharacterProperties.getActualBackgroundColor(characterProperties, this.colorProvider)) > 0)
                        html = "<span style=\"background: " + color_1.ColorHelper.getCssStringInternal(character_properties_1.CharacterProperties.getActualBackgroundColor(characterProperties, this.colorProvider)) + "\">" + html + "</span>";
                }
            }
            result += html;
            if (listsToEndIndices.length) {
                for (var i = listsToEndIndices.length - 1; i >= 0; i--)
                    result += "</" + (model.numberingLists[listsInInterval[listsToEndIndices[i]].numberingListIndex].getListType() != numbering_list_1.NumberingType.Bullet ? "ol" : "ul") + ">";
            }
            currentPosition += length;
            remainLength -= length;
        }
        if (/^<td[^>]*>/gi.test(result))
            result = "<tr>" + result;
        if (/<\/td>$/gi.test(result))
            result += "</tr>";
        if (/^<tr[^>]*>/gi.test(result))
            result = "<table style=\"" + this.getTableStyle(model, null) + "\"><tbody>" + result;
        if (/<\/tr>$/gi.test(result))
            result += "</tbody></table>";
        if (hasFields && string_1.StringUtils.isNullOrEmpty(result))
            result = "<span class='field-mark'>&nbsp;</span>";
        return result;
    };
    HtmlExporter.prototype.getHtmlText = function (text) {
        var result = '';
        for (var i = 0; i < text.length; i++) {
            var char = text.charAt(i);
            if (char == rich_utils_1.RichUtils.specialCharacters.PageBreak)
                result += "<br style=\"page-break-before:always\">";
            else if (char == rich_utils_1.RichUtils.specialCharacters.LineBreak)
                result += "<br>";
            else {
                result += encode_1.EncodeUtils.encodeHtml(text.substr(i));
                break;
            }
        }
        return result;
    };
    HtmlExporter.prototype.getBorderCssString = function (borderInfo) {
        var borderStyle = "";
        if (borderInfo) {
            if (borderInfo.width)
                borderStyle += " " + unit_converter_2.UnitConverter.twipsToPixels(borderInfo.width) + "px";
            switch (borderInfo.style) {
                case enums_1.BorderLineStyle.Dashed:
                    borderStyle += " dashed";
                    break;
                case enums_1.BorderLineStyle.Dotted:
                    borderStyle += " dotted";
                    break;
                case enums_1.BorderLineStyle.Double:
                    borderStyle += " double";
                    break;
                case enums_1.BorderLineStyle.Inset:
                    borderStyle += " inset";
                    break;
                case enums_1.BorderLineStyle.None:
                    borderStyle += " none";
                    break;
                case enums_1.BorderLineStyle.Outset:
                    borderStyle += " outset";
                    break;
                case enums_1.BorderLineStyle.Single:
                    borderStyle += " solid";
                default:
                    break;
            }
            var rgba = this.control.modelManager.model.colorProvider.getRgbaFromModelColor(borderInfo.color);
            if (color_2.ColorUtils.getAlpha(rgba) > 0)
                borderStyle += " " + color_1.ColorHelper.getCssStringInternal(rgba);
        }
        return borderStyle;
    };
    HtmlExporter.prototype.getTableWidthUnitCssString = function (width) {
        return width.type == table_units_1.TableWidthUnitType.FiftiethsOfPercent ? width.value / 50 + "%" : unit_converter_2.UnitConverter.twipsToPoints(width.value) + "pt";
    };
    HtmlExporter.prototype.getTableStyle = function (model, table) {
        var defaultTableProperties = model.defaultTableProperties;
        var tableProperties = table ? table.properties : defaultTableProperties;
        var style = table ? table.style : model.getDefaultTableStyle();
        var tableStyle = "";
        var tableIndent = new table_properties_merger_1.TablePropertiesMergerIndent().getProperty(tableProperties, style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
        if (tableIndent.value)
            tableStyle += "margin-left:" + this.getTableWidthUnitCssString(tableIndent) + ";";
        var cellSpacing = new table_properties_merger_1.TablePropertiesMergerCellSpacing().getProperty(tableProperties, style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
        tableStyle += (cellSpacing.value ? "border-spacing:" + this.getTableWidthUnitCssString(cellSpacing) : "border-collapse: collapse") + ";";
        return tableStyle;
    };
    HtmlExporter.prototype.getCellStyle = function (model, cell) {
        var cellProperties = cell.properties;
        var defaultTableProperties = model.defaultTableProperties;
        var defaultCellProperties = model.defaultTableCellProperties;
        var parentTable = cell.parentRow.parentTable;
        var tableStyle = parentTable.style;
        var tableHorizontalBorderStyle = this.getBorderCssString((new table_properties_merger_1.TablePropertiesMergerBorderHorizontal())
            .getProperty(parentTable.properties, tableStyle, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties));
        var tableVerticalBorderStyle = this.getBorderCssString((new table_properties_merger_1.TablePropertiesMergerBorderVertical())
            .getProperty(parentTable.properties, tableStyle, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties));
        var cellStyle = "";
        var topBorderStyle = this.getBorderCssString(cell.getActualTopCellBorder(defaultCellProperties)) || tableVerticalBorderStyle;
        if (topBorderStyle)
            cellStyle += "border-top:" + topBorderStyle + ";";
        var leftBorderStyle = this.getBorderCssString(cell.getActualLeftCellBorder(defaultCellProperties)) || tableHorizontalBorderStyle;
        if (leftBorderStyle)
            cellStyle += "border-left:" + leftBorderStyle + ";";
        var bottomBorderStyle = this.getBorderCssString(cell.getActualBottomCellBorder(defaultCellProperties)) || tableVerticalBorderStyle;
        if (bottomBorderStyle)
            cellStyle += "border-bottom:" + bottomBorderStyle + ";";
        var rightBorderStyle = this.getBorderCssString(cell.getActualRightCellBorder(defaultCellProperties)) || tableHorizontalBorderStyle;
        if (rightBorderStyle)
            cellStyle += "border-right:" + rightBorderStyle + ";";
        var marginLeft = cell.getActualLeftCellMargin(model);
        if (marginLeft.value)
            cellStyle += "padding-left:" + this.getTableWidthUnitCssString(marginLeft) + ";";
        var marginTop = cell.getActualTopCellMargin(model);
        if (marginTop.value)
            cellStyle += "padding-top:" + this.getTableWidthUnitCssString(marginTop) + ";";
        var marginRight = cell.getActualRightCellMargin(model);
        if (marginRight.value)
            cellStyle += "padding-right:" + this.getTableWidthUnitCssString(marginRight) + ";";
        var marginBottom = cell.getActualBottomCellMargin(model);
        if (marginBottom.value)
            cellStyle += "padding-bottom:" + this.getTableWidthUnitCssString(marginBottom) + ";";
        var verticalAlignment = new table_cell_properties_merger_1.TableCellVerticalAlignmentMerger().getProperty(cellProperties, tableStyle, cell.conditionalFormatting, defaultCellProperties);
        switch (verticalAlignment) {
            case table_base_structures_1.TableCellVerticalAlignment.Bottom:
                cellStyle += "vertical-align:bottom;";
                break;
            case table_base_structures_1.TableCellVerticalAlignment.Center:
                cellStyle += "vertical-align:middle;";
                break;
            case table_base_structures_1.TableCellVerticalAlignment.Top:
                cellStyle += "vertical-align:top;";
                break;
            default:
                break;
        }
        var cellBackground = new table_cell_properties_merger_1.TableCellPropertiesMergerShadingInfo().getProperty(cellProperties, tableStyle, cell.conditionalFormatting, defaultCellProperties)
            .getActualColor(this.colorProvider);
        if (color_2.ColorUtils.getAlpha(cellBackground) > 0)
            cellStyle += "background: " + color_1.ColorHelper.getCssStringInternal(cellBackground) + ";";
        cellStyle += "width: " + unit_converter_2.UnitConverter.twipsToPixels(cell.preferredWidth.value) + "px;";
        return cellStyle;
    };
    HtmlExporter.prototype.getTextBoxStyleString = function (textBoxRun) {
        var contentMargins = textBoxRun.textBoxProperties.getContentMargins();
        var result = "padding-top:" + unit_converter_2.UnitConverter.twipsToPixels(contentMargins.top) + "px;";
        result += "padding-bottom:" + unit_converter_2.UnitConverter.twipsToPixels(contentMargins.bottom) + "px;";
        result += "padding-left:" + unit_converter_2.UnitConverter.twipsToPixels(contentMargins.left) + "px;";
        result += "padding-right:" + unit_converter_2.UnitConverter.twipsToPixels(contentMargins.right) + "px;";
        result += "border:" + unit_converter_2.UnitConverter.twipsToPixels(textBoxRun.shape.outlineWidth) + "px solid " + color_1.ColorHelper.getCssString(textBoxRun.shape.outlineColor, true) + ";";
        result += "background-color:" + color_1.ColorHelper.getCssString(textBoxRun.shape.fillColor, true) + ";";
        return result;
    };
    return HtmlExporter;
}());
exports.HtmlExporter = HtmlExporter;
