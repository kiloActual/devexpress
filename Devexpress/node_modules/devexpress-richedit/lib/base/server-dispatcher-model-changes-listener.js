"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("../core/model/changes/enums");
var command_request_1 = require("../core/model/json/command-request");
var command_type_1 = require("../core/model/json/command-type");
var json_character_enums_1 = require("../core/model/json/enums/json-character-enums");
var json_document_enums_1 = require("../core/model/json/enums/json-document-enums");
var json_field_enums_1 = require("../core/model/json/enums/json-field-enums");
var json_floating_enums_1 = require("../core/model/json/enums/json-floating-enums");
var json_list_enums_1 = require("../core/model/json/enums/json-list-enums");
var json_paragraph_enums_1 = require("../core/model/json/enums/json-paragraph-enums");
var json_run_enums_1 = require("../core/model/json/enums/json-run-enums");
var json_section_enums_1 = require("../core/model/json/enums/json-section-enums");
var json_style_enums_1 = require("../core/model/json/enums/json-style-enums");
var json_sub_document_enums_1 = require("../core/model/json/enums/json-sub-document-enums");
var json_top_level_enums_1 = require("../core/model/json/enums/json-top-level-enums");
var json_table_cell_enums_1 = require("../core/model/json/enums/table/json-table-cell-enums");
var json_table_enums_1 = require("../core/model/json/enums/table/json-table-enums");
var json_table_row_enums_1 = require("../core/model/json/enums/table/json-table-row-enums");
var image_cache_info_converter_1 = require("../core/model/json/importers/image-cache-info-converter");
var json_importer_1 = require("../core/model/json/importers/json-importer");
var json_masked_character_properties_converter_1 = require("../core/model/json/importers/json-masked-character-properties-converter");
var json_masked_paragraph_properties_converter_1 = require("../core/model/json/importers/json-masked-paragraph-properties-converter");
var json_tab_converter_1 = require("../core/model/json/importers/json-tab-converter");
var json_list_level_properties_converter_1 = require("../core/model/json/importers/numbering-list/json-list-level-properties-converter");
var json_section_properties_converter_1 = require("../core/model/json/importers/section/json-section-properties-converter");
var json_anchor_info_converter_1 = require("../core/model/json/importers/sub-document/json-anchor-info-converter");
var json_non_visual_properties_1 = require("../core/model/json/importers/sub-document/json-non-visual-properties");
var json_inline_picture_size_converter_1 = require("../core/model/json/importers/sub-document/sizes/json-inline-picture-size-converter");
var json_table_cell_properties_converter_1 = require("../core/model/json/importers/table/json-table-cell-properties-converter");
var json_table_properties_converter_1 = require("../core/model/json/importers/table/json-table-properties-converter");
var json_table_row_properties_converter_1 = require("../core/model/json/importers/table/json-table-row-properties-converter");
var json_table_unit_converter_1 = require("../core/model/json/importers/table/json-table-unit-converter");
var list_level_1 = require("../core/model/numbering-lists/list-level");
var sub_document_1 = require("../core/model/sub-document");
var common_1 = require("@devexpress/utils/lib/utils/common");
var ServerDispatcherModelChangesListener = (function () {
    function ServerDispatcherModelChangesListener(dispatcher) {
        this.dispatcher = dispatcher;
    }
    ServerDispatcherModelChangesListener.prototype.modelChanged = function (change) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22;
        switch (change.type) {
            case enums_1.ModelChangeType.PageColor: {
                var params = (_a = {},
                    _a[json_document_enums_1.JSONModelPropertyProperty.PageColor] = change.newColor,
                    _a);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ChangePageColor, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.DefaultTabWidth: {
                var params = (_b = {},
                    _b[json_document_enums_1.JSONModelPropertyProperty.DefaultTabWidth] = change.newDefaultTabWidth,
                    _b);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ChangeDefaultTabWidth, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.DifferentOddAndEvenPages: {
                var params = (_c = {},
                    _c[json_document_enums_1.JSONModelPropertyProperty.OddEvenPages] = common_1.boolToInt(change.newValue),
                    _c);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ChangeDifferentOddAndEvenPages, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.HeaderFooterCreated: {
                var params = (_d = {},
                    _d[json_sub_document_enums_1.JSONCreateHeaderFooterCommandBaseProperty.Type] = change.headerFooterType,
                    _d);
                var command = change.isHeader ? command_type_1.CommandType.CreateHeader : command_type_1.CommandType.CreateFooter;
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command, change.subDocumentInfo.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.HeaderFooterIndexChanged: {
                var params = (_e = {},
                    _e[json_sub_document_enums_1.JSONChangeHeaderFooterIndexCommandBase.SectionIndex] = change.sectionIndex,
                    _e[json_sub_document_enums_1.JSONChangeHeaderFooterIndexCommandBase.NewObjectIndex] = change.newIndex,
                    _e[json_sub_document_enums_1.JSONChangeHeaderFooterIndexCommandBase.Type] = change.headerFooterType,
                    _e);
                var command = change.isHeader ? command_type_1.CommandType.ChangeHeaderIndex : command_type_1.CommandType.ChangeFooterIndex;
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.LoadFontInfo: {
                var params = (_f = {},
                    _f[json_character_enums_1.JSONLoadFontInfoCommand.FontInfo] = (_g = {},
                        _g[json_character_enums_1.JSONFontInfoProperty.FontFamily] = change.fontInfo.getFontFamilies()[0],
                        _g),
                    _f);
                this.dispatcher.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.LoadFontInfo, -1, params), new command_request_1.RequestParams(false, true, false));
                break;
            }
            case enums_1.ModelChangeType.SectionFormattingChanged: {
                this.pushPropertyRequest(-1, change.property, change.newState, command_type_1.CommandType.ChangeSectionProperties);
                break;
            }
            case enums_1.ModelChangeType.CreateStyleLink: {
                var params = (_h = {},
                    _h[json_style_enums_1.JSONStyleLinkCommandBaseProperty.StyleName] = change.paragraphStyleName,
                    _h);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.CreateStyleLink, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.DeleteStyleLink: {
                var params = (_j = {},
                    _j[json_style_enums_1.JSONStyleLinkCommandBaseProperty.StyleName] = change.paragraphStyleName,
                    _j);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DeleteStyleLink, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.ListLevelPropertyChanged: {
                this.pushPropertyRequest(-1, change.property, change.newState, command_type_1.CommandType.ChangeListLevelProperties);
                break;
            }
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged: {
                this.pushPropertyRequest(-1, change.property, change.newState, command_type_1.CommandType.ChangeListLevelParagraphProperties);
                break;
            }
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged: {
                this.pushPropertyRequest(-1, change.property, change.newState, command_type_1.CommandType.ChangeListLevelCharacterProperties);
                break;
            }
            case enums_1.ModelChangeType.IOverrideListLevelChanged: {
                this.pushPropertyRequest(-1, change.property, change.newState, command_type_1.CommandType.ChangeIOverrideListLevel);
                break;
            }
            case enums_1.ModelChangeType.BookmarkCreated: {
                this.pushStateBasedRequestNew(change.subDocumentId, change, command_type_1.CommandType.CreateBookmark);
                break;
            }
            case enums_1.ModelChangeType.BookmarkDeleted: {
                this.pushStateBasedRequestNew(change.subDocumentId, change, command_type_1.CommandType.DeleteBookmark);
                break;
            }
            case enums_1.ModelChangeType.TabInserted: {
                this.pushStateBasedRequestNew(change.subDocumentId, change, command_type_1.CommandType.InsertTabToParagraph);
                break;
            }
            case enums_1.ModelChangeType.TabDeleted: {
                this.pushStateBasedRequestNew(change.subDocumentId, change, command_type_1.CommandType.DeleteTabAtParagraph);
                break;
            }
            case enums_1.ModelChangeType.LoadPicturesInfo: {
                var params = {
                    0: image_cache_info_converter_1.JSONCacheImageInfoConverter.convertToJSON(change.data, true)
                };
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.LoadPicturesInfo, change.subDocumentId, params), new command_request_1.RequestParams(false, true, false));
                break;
            }
            case enums_1.ModelChangeType.InlinePicturesUpdated: {
                var imageInfo = change.updatedImageInfo;
                var params = {
                    0: (_k = {},
                        _k[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.Position] = imageInfo.position,
                        _k[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.CacheInfo] = image_cache_info_converter_1.JSONCacheImageInfoConverter.convertToJSON(imageInfo.info, false),
                        _k[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.ScaleSize] = json_importer_1.SizeExporter.convertToJSON(imageInfo.size.scale),
                        _k)
                };
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.UpdateInlinePictures, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.InlinePictureInserted: {
                var params = (_l = {},
                    _l[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.Position] = change.position,
                    _l[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.CacheInfo] = image_cache_info_converter_1.JSONCacheImageInfoConverter.convertToJSON(change.picInfo.cacheInfo, false),
                    _l[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.ScaleSize] = json_importer_1.SizeExporter.convertToJSON(change.picInfo.size.scale),
                    _l[json_floating_enums_1.JSONInlinePictureCommandsImageInfo.DrawingObjectProperties] = json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertToJSON(change.containerProperties),
                    _l);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertInlinePicture, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AnchoredPictureInserted: {
                var params = (_m = {},
                    _m[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.Position] = change.position,
                    _m[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.Size] = json_inline_picture_size_converter_1.JSONInlinePictureSizeConverterConverter.convertToJSON(change.size),
                    _m[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.ImageCacheId] = change.id,
                    _m[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.AnchorInfo] = json_anchor_info_converter_1.JSONAnchorInfoConverter.convertToJSON(change.anchorInfo),
                    _m[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.DrawingObjectProperties] = json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertToJSON(change.containerProperties),
                    _m);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertAnchoredPicture, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged: {
                this.pushStateBasedRequestNew(change.subDocumentId, change, command_type_1.CommandType.ChangeAnchoredPictureSize);
                break;
            }
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged: {
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, command_type_1.CommandType.ChangeInlineObjectProperties);
                break;
            }
            case enums_1.ModelChangeType.FieldInserted: {
                var params = (_o = {},
                    _o[json_field_enums_1.JSONFieldProperty.StartPos] = change.startPosition,
                    _o[json_field_enums_1.JSONFieldProperty.SeparatorPos] = change.separatorPosition,
                    _o[json_field_enums_1.JSONFieldProperty.EndPos] = change.endPosition,
                    _o);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertField, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.FieldDeleted: {
                var params = (_p = {},
                    _p[json_field_enums_1.JSONFieldProperty.EndPos] = change.endPosition,
                    _p);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DeleteField, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.HyperlinkInfoChanged: {
                var params = (_q = {},
                    _q[json_field_enums_1.JSONFieldProperty.StartPos] = change.fieldCodeInterval.start - 1,
                    _q[json_field_enums_1.JSONFieldProperty.EndPos] = change.fieldResultInterval.end + 1,
                    _q);
                if (change.newHyperlinkInfo) {
                    params[json_field_enums_1.JSONFieldProperty.Uri] = change.newHyperlinkInfo.uri;
                    params[json_field_enums_1.JSONFieldProperty.Anchor] = change.newHyperlinkInfo.anchor;
                    params[json_field_enums_1.JSONFieldProperty.Tip] = change.newHyperlinkInfo.tip;
                    params[json_field_enums_1.JSONFieldProperty.Visited] = common_1.boolToInt(change.newHyperlinkInfo.visited);
                }
                else
                    params[json_field_enums_1.JSONFieldProperty.NoInfo] = 1;
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.HyperlinkInfoChanged, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.SimpleRunInserted: {
                var characterPropertiesJSON = json_masked_character_properties_converter_1.JSONMaskedCharacterPropertiesConverter.convertToJSON(change.characterProperties);
                var lastRequestInQueue = this.dispatcher.lastRequestInQueue;
                if (lastRequestInQueue && lastRequestInQueue.extendTextRequest(change.subDocumentId, change.position, change.length, characterPropertiesJSON, change.characterStyle.styleName, change.runType, change.text))
                    return;
                var params = (_r = {},
                    _r[json_character_enums_1.JSONInsertTextCommandProperty.Position] = change.position,
                    _r[json_character_enums_1.JSONInsertTextCommandProperty.Length] = change.length,
                    _r[json_character_enums_1.JSONInsertTextCommandProperty.RunType] = change.runType,
                    _r[json_character_enums_1.JSONInsertTextCommandProperty.CharacterProperties] = characterPropertiesJSON,
                    _r[json_character_enums_1.JSONInsertTextCommandProperty.CharacterStyleName] = change.characterStyle.styleName,
                    _r);
                this.dispatcher.pushRequest(new command_request_1.EditTextBufferCommandRequest(command_type_1.CommandType.InsertSimpleRun, change.subDocumentId, change.text, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TextBufferChanged: {
                this.dispatcher.pushRequest(new command_request_1.ClientServerTextBufferChangedCommandRequest(command_type_1.CommandType.ChangeTextBuffer, change.subDocumentId, change.newState, {}), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.ParagraphInserted: {
                var params = (_s = {},
                    _s[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.Position] = change.position,
                    _s[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.ParagraphProperties] = json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertToJSON(change.paragraph.maskedParagraphProperties),
                    _s[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.StyleName] = change.paragraph.paragraphStyle.styleName,
                    _s[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.NumberingListIndex] = change.paragraph.numberingListIndex,
                    _s[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.ListLevelIndex] = change.paragraph.listLevelIndex,
                    _s);
                var tabParams = [];
                for (var i_1 = 0, tabInfo = void 0; tabInfo = change.paragraph.tabs.tabsInfo[i_1]; i_1++)
                    tabParams.push(json_tab_converter_1.JSONTabConverter.convertToJSON(tabInfo));
                params[json_paragraph_enums_1.JSONInsertParagraphCommandProperty.TabsProperties] = tabParams;
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertParagraph, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.SectionInserted: {
                var params = (_t = {},
                    _t[json_section_enums_1.JSONInsertSectionCommandProperty.Position] = change.position,
                    _t[json_section_enums_1.JSONInsertSectionCommandProperty.SectionProperties] = json_section_properties_converter_1.JSONSectionPropertiesConverter.convertToJSON(change.section.sectionProperties),
                    _t);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertSection, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxInserted: {
                var params = (_u = {},
                    _u[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.Position] = change.position,
                    _u[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.SubDocId] = change.innerSubDocId,
                    _u[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.AnchorInfo] = json_anchor_info_converter_1.JSONAnchorInfoConverter.convertToJSON(change.anchorInfo),
                    _u[json_floating_enums_1.JSONInsertFloatingObjectCommandInfo.DrawingObjectProperties] = json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertToJSON(change.containerProperties),
                    _u);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertAnchoredTextBox, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AnchorObjectRemoved: {
                break;
            }
            case enums_1.ModelChangeType.IntervalRemoved: {
                var params = (_v = {},
                    _v[json_run_enums_1.JSONDeleteRunsCommandProperty.Position] = change.interval.start,
                    _v[json_run_enums_1.JSONDeleteRunsCommandProperty.Length] = change.interval.length,
                    _v);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DeleteRuns, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.ParagraphMerged: {
                var params = (_w = {},
                    _w[json_paragraph_enums_1.JSONMergeParagraphsCommandProperty.Position] = change.position,
                    _w[json_paragraph_enums_1.JSONMergeParagraphsCommandProperty.GetPropertiesFromNext] = common_1.boolToInt(change.getPropertiesFromNext),
                    _w);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.MergeParagraphs, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.SectionMerged: {
                var params = (_x = {},
                    _x[json_section_enums_1.JSONMergeSectionsCommandProperty.SectionIndex] = change.sectionIndex,
                    _x[json_section_enums_1.JSONMergeSectionsCommandProperty.GetPropertiesFromNext] = common_1.boolToInt(change.getPropertiesFromNext),
                    _x);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.MergeSections, sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.CharacterFormattingChanged: {
                if (change.property === json_character_enums_1.JSONCharacterFormattingProperty.UseValue)
                    this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ChangeCharacterPropertiesUseValue);
                else
                    this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, command_type_1.CommandType.ChangeCharacterProperty);
                break;
            }
            case enums_1.ModelChangeType.CharacterPropertiesChanged: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ChangeCharacterProperties);
                break;
            }
            case enums_1.ModelChangeType.ParagraphFormattingChanged: {
                if (change.property === json_paragraph_enums_1.JSONParagraphFormattingProperty.UseValue)
                    this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ChangeParagraphPropertiesUseValue);
                else
                    this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, command_type_1.CommandType.ChangeParagraphProperty);
                break;
            }
            case enums_1.ModelChangeType.ParagraphPropertiesChanged: {
                var params = (_y = {},
                    _y[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.ParagraphIndex] = change.paragraphIndex,
                    _y[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.ParagraphProperties] = json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertToJSON(change.properties),
                    _y[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.ListLevelIndex] = change.listInfo.listLevelIndex,
                    _y[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.NumberingListIndex] = change.listInfo.numberingListIndex,
                    _y[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.StyleName] = change.style.styleName,
                    _y);
                var tabParams = [];
                for (var i_2 = 0, tabInfo = void 0; tabInfo = change.tabs.tabsInfo[i_2]; i_2++)
                    tabParams.push(json_tab_converter_1.JSONTabConverter.convertToJSON(tabInfo));
                params[json_paragraph_enums_1.JSONParagraphPropertiesChangedProperty.TabsProperties] = tabParams;
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ChangeParagraphProperties, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ChangeAnchoredTextBoxSize);
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ChangeTextBoxProperties);
                break;
            }
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged: {
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, command_type_1.CommandType.ChangeAnchorInfoProperty);
                break;
            }
            case enums_1.ModelChangeType.ShapePropertyChanged: {
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, command_type_1.CommandType.ChangeAnchoredObjectShapeProperty);
                break;
            }
            case enums_1.ModelChangeType.CharacterStyleApplied: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ApplyCharacterStyle);
                break;
            }
            case enums_1.ModelChangeType.ParagraphStyleApplied: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ApplyParagraphStyle);
                break;
            }
            case enums_1.ModelChangeType.TableStyleChanged: {
                var params = (_z = {},
                    _z[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _z[json_table_enums_1.JSONEnumClientTableInfo.TableInfo] = (_0 = {},
                        _0[json_table_enums_1.JSONEnumClientTableFormatting.StyleName] = change.newStyle ? change.newStyle.styleName : null,
                        _0),
                    _z);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ApplyTableStyle, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.ParagraphNumberingListChanged: {
                this.pushStateBasedRequest(change.subDocumentId, change.newState, command_type_1.CommandType.ApplyNumberingList);
                break;
            }
            case enums_1.ModelChangeType.AbstractNumberingListAdded: {
                var numberingList = this.dispatcher.control.modelManager.model.abstractNumberingLists[change.index];
                var listLevelsInfo = [];
                for (var _i = 0, _23 = numberingList.levels; _i < _23.length; _i++) {
                    var listLevel_1 = _23[_i];
                    var levelInfo = {};
                    levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.CharacterProperties] = json_masked_character_properties_converter_1.JSONMaskedCharacterPropertiesConverter.convertToJSON(listLevel_1.getCharacterProperties());
                    levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.ParagraphProperties] = json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertToJSON(listLevel_1.getParagraphProperties());
                    levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.ListLevelProperties] = json_list_level_properties_converter_1.JSONListLevelPropertiesConverter.convertToJSON(listLevel_1.getListLevelProperties());
                    listLevelsInfo.push(levelInfo);
                }
                var params = (_1 = {},
                    _1[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.Deleted] = common_1.boolToInt(numberingList.deleted),
                    _1[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.Levels] = listLevelsInfo,
                    _1[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.InnerId] = numberingList.getId(),
                    _1);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.AddAbstractNumberingList, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.AbstractNumberingListDeleted: {
                var params = (_2 = {},
                    _2[json_list_enums_1.JSONDeleteAbstractNumberingListCommandProperty.Index] = change.index,
                    _2);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DeleteAbstractNumberingList, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.NumberingListAdded: {
                var numberingList = this.dispatcher.control.modelManager.model.numberingLists[change.index];
                var listLevelsInfo = [];
                for (var listLevel, i = 0; listLevel = numberingList.levels[i]; i++) {
                    var levelInfo = {};
                    if (listLevel instanceof list_level_1.OverrideListLevel) {
                        levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.CharacterProperties] = json_masked_character_properties_converter_1.JSONMaskedCharacterPropertiesConverter.convertToJSON(listLevel.getCharacterProperties());
                        levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.ParagraphProperties] = json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertToJSON(listLevel.getParagraphProperties());
                        levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.ListLevelProperties] = json_list_level_properties_converter_1.JSONListLevelPropertiesConverter.convertToJSON(listLevel.getListLevelProperties());
                    }
                    else {
                        levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.NewStart] = listLevel.getNewStart();
                    }
                    levelInfo[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.OverrideStart] = common_1.boolToInt(listLevel.overrideStart);
                    listLevelsInfo.push(levelInfo);
                }
                var params = (_3 = {},
                    _3[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.AbstractNumberingListIndex] = numberingList.abstractNumberingListIndex,
                    _3[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.Deleted] = numberingList.deleted,
                    _3[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.InnerId] = numberingList.getId(),
                    _3[json_list_enums_1.JSONAddAbstractNumberingListCommandPropery.Levels] = listLevelsInfo,
                    _3);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.AddNumberingList, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.NumberingListDeleted: {
                var params = (_4 = {},
                    _4[json_list_enums_1.JSONDeleteAbstractNumberingListCommandProperty.Index] = change.index,
                    _4);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.DeleteNumberingList, -1, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableCreated: {
                var params = (_5 = {},
                    _5[json_table_enums_1.JSONEnumClientTableInfo.Position] = change.table.getStartPosition(),
                    _5[json_table_enums_1.JSONEnumClientTableInfo.Rows] = JSONTableHelper.getJSONTableRows(change.table),
                    _5[json_table_enums_1.JSONEnumClientTableInfo.TableInfo] = JSONTableHelper.getJSONTableInfo(change.table),
                    _5);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.CreateTable, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableRemoved: {
                var params = (_6 = {},
                    _6[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSONCore(change.startPosition, change.nestedLevel),
                    _6);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.RemoveTable, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableStartPositionShifted: {
                var params = (_7 = {},
                    _7[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _7[json_table_enums_1.JSONEnumClientTableInfo.Position] = change.newPosition,
                    _7);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.ShiftTableStartPosition, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableCellPropertyChanged: {
                var commandType = void 0;
                switch (change.property) {
                    case json_table_cell_enums_1.JSONServerTableCellProperty.ColumnSpan:
                    case json_table_cell_enums_1.JSONServerTableCellProperty.PreferredWidth:
                    case json_table_cell_enums_1.JSONServerTableCellProperty.VerticalMerging:
                        commandType = command_type_1.CommandType.ChangeTableCell;
                        break;
                    default:
                        commandType = command_type_1.CommandType.ChangeTableCellProperty;
                        break;
                }
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, commandType);
                break;
            }
            case enums_1.ModelChangeType.TablePropertyChanged: {
                var commandType = void 0;
                switch (change.property) {
                    case json_table_enums_1.JSONEnumTableProperty.PreferredWidth:
                    case json_table_enums_1.JSONEnumTableProperty.TableLookTypes:
                        commandType = command_type_1.CommandType.ChangeTable;
                        break;
                    default:
                        commandType = command_type_1.CommandType.ChangeTableProperty;
                }
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, commandType);
                break;
            }
            case enums_1.ModelChangeType.TableRowPropertyChanged: {
                var commandType = void 0;
                switch (change.property) {
                    case json_table_row_enums_1.JSONServerTableRowProperty.GridAfter:
                    case json_table_row_enums_1.JSONServerTableRowProperty.GridBefore:
                    case json_table_row_enums_1.JSONServerTableRowProperty.Height:
                    case json_table_row_enums_1.JSONServerTableRowProperty.WidthAfter:
                    case json_table_row_enums_1.JSONServerTableRowProperty.WidthBefore:
                        commandType = command_type_1.CommandType.ChangeTableRow;
                        break;
                    default:
                        commandType = command_type_1.CommandType.ChangeTableRowProperty;
                        break;
                }
                this.pushPropertyRequest(change.subDocumentId, change.property, change.newState, commandType);
                break;
            }
            case enums_1.ModelChangeType.TableCellSplittedHorizontally: {
                var newCell = change.table.rows[change.rowIndex].cells[change.rightDirection ? (change.cellIndex + 1) : (change.cellIndex - 1)];
                var params = (_8 = {},
                    _8[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _8[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_9 = {},
                        _9[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _9[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = (_10 = {},
                            _10[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellIndex] = change.rightDirection ? change.cellIndex : (change.cellIndex - 1),
                            _10[json_table_cell_enums_1.JSONEnumClientTableCellInfo.RightDirection] = common_1.boolToInt(change.rightDirection),
                            _10[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellInfo] = JSONTableHelper.getJSONTableCellInfo(newCell),
                            _10),
                        _9),
                    _8);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.SplitTableCellHorizontally, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableCellMergedHorizontally: {
                var params = (_11 = {},
                    _11[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _11[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_12 = {},
                        _12[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _12[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = (_13 = {},
                            _13[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellIndex] = change.rightDirection ? change.cellIndex : (change.cellIndex + 1),
                            _13[json_table_cell_enums_1.JSONEnumClientTableCellInfo.RightDirection] = common_1.boolToInt(change.rightDirection),
                            _13),
                        _12),
                    _11);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.MergeTableCellHorizontally, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableRowInserted: {
                var row = change.table.rows[change.rowIndex];
                var params = (_14 = {},
                    _14[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _14[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_15 = {},
                        _15[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _15[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = JSONTableHelper.getJSONTableRowCells(row),
                        _15[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowInfo] = JSONTableHelper.getJSONTableRowInfo(row),
                        _15),
                    _14);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertTableRow, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableRowRemoved: {
                var params = (_16 = {},
                    _16[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _16[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_17 = {},
                        _17[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _17),
                    _16);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.RemoveTableRow, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableCellRemoved: {
                var params = (_18 = {},
                    _18[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _18[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_19 = {},
                        _19[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _19[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = (_20 = {},
                            _20[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellIndex] = change.cellIndex,
                            _20),
                        _19),
                    _18);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.RemoveTableCell, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.TableCellInserted: {
                var params = (_21 = {},
                    _21[json_table_enums_1.JSONEnumClientTableInfo.TablePosition] = JSONTableHelper.tablePositionToJSON(change.table),
                    _21[json_table_enums_1.JSONEnumClientTableInfo.Rows] = (_22 = {},
                        _22[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowIndex] = change.rowIndex,
                        _22[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = JSONTableHelper.getJSONTableCell(change.table.rows[change.rowIndex].cells[change.cellIndex], change.cellIndex),
                        _22),
                    _21);
                this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(command_type_1.CommandType.InsertTableCell, change.subDocumentId, params), new command_request_1.RequestParams(false, false, false));
                break;
            }
            case enums_1.ModelChangeType.DocumentProtectionChanged: {
                break;
            }
            case enums_1.ModelChangeType.RangePermissionsChanged: {
                break;
            }
            case enums_1.ModelChangeType.RangePermissionsPropertiesChanged: {
                break;
            }
        }
    };
    ServerDispatcherModelChangesListener.prototype.pushPropertyRequest = function (subDocumentId, property, newState, commandType) {
        var _a;
        var params = (_a = {},
            _a[json_top_level_enums_1.JSONPropertyStateBasedCommand.Property] = property,
            _a[json_top_level_enums_1.JSONPropertyStateBasedCommand.State] = newState.toJSON(),
            _a);
        this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(commandType, subDocumentId, params), new command_request_1.RequestParams(false, false, false));
    };
    ServerDispatcherModelChangesListener.prototype.pushStateBasedRequestNew = function (subDocumentId, object, commandType) {
        var _a;
        var params = (_a = {},
            _a[json_top_level_enums_1.JSONPropertyStateBasedCommand.State] = object.toJSON(),
            _a);
        this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(commandType, subDocumentId, params), new command_request_1.RequestParams(false, false, false));
    };
    ServerDispatcherModelChangesListener.prototype.pushStateBasedRequest = function (subDocumentId, newState, commandType) {
        var _a;
        var params = (_a = {},
            _a[json_top_level_enums_1.JSONPropertyStateBasedCommand.State] = newState.toJSON(),
            _a);
        this.dispatcher.pushRequest(new command_request_1.EditCommandRequest(commandType, subDocumentId, params), new command_request_1.RequestParams(false, false, false));
    };
    return ServerDispatcherModelChangesListener;
}());
exports.ServerDispatcherModelChangesListener = ServerDispatcherModelChangesListener;
var JSONTableHelper = (function () {
    function JSONTableHelper() {
    }
    JSONTableHelper.tablePositionToJSON = function (table) {
        return JSONTableHelper.tablePositionToJSONCore(table.getStartPosition(), table.nestedLevel);
    };
    JSONTableHelper.tablePositionToJSONCore = function (startPosition, nestedLevel) {
        var param = {};
        param[json_table_enums_1.JSONEnumClientTablePosition.ParagraphStartPosition] = startPosition;
        param[json_table_enums_1.JSONEnumClientTablePosition.NestedLevel] = nestedLevel;
        return param;
    };
    JSONTableHelper.getJSONTableInfo = function (table) {
        var jsonTable = {};
        jsonTable[json_table_enums_1.JSONEnumClientTableFormatting.TableProperties] = json_table_properties_converter_1.JSONTablePropertiesConverter.convertToJSON(table.properties);
        jsonTable[json_table_enums_1.JSONEnumClientTableFormatting.PreferredWidth] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(table.preferredWidth);
        jsonTable[json_table_enums_1.JSONEnumClientTableFormatting.LookTypes] = table.lookTypes;
        jsonTable[json_table_enums_1.JSONEnumClientTableFormatting.StyleName] = table.style.styleName;
        return jsonTable;
    };
    JSONTableHelper.getJSONTableRows = function (table) {
        var jsonRows = [];
        for (var _i = 0, _a = table.rows; _i < _a.length; _i++) {
            var row = _a[_i];
            var jsonRow = {};
            jsonRow[json_table_row_enums_1.JSONEnumClientTableRowInfo.Cells] = JSONTableHelper.getJSONTableRowCells(row);
            jsonRow[json_table_row_enums_1.JSONEnumClientTableRowInfo.RowInfo] = JSONTableHelper.getJSONTableRowInfo(row);
            jsonRows.push(jsonRow);
        }
        return jsonRows;
    };
    JSONTableHelper.getJSONTableRowInfo = function (row) {
        var jsonRowInfo = {};
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.GridAfter] = row.gridAfter;
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.GridBefore] = row.gridBefore;
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.Height] = json_table_unit_converter_1.JSONTableHeightUnitConverter.convertToJSON(row.height);
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.TableRowProperties] = json_table_row_properties_converter_1.JSONTableRowPropertiesConverter.convertToJSON(row.properties);
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.TablePropertiesException] = json_table_properties_converter_1.JSONTablePropertiesConverter.convertToJSON(row.tablePropertiesException);
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.WidthBefore] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(row.widthBefore);
        jsonRowInfo[json_table_row_enums_1.JSONEnumClientTableRowFormatting.WidthAfter] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(row.widthAfter);
        return jsonRowInfo;
    };
    JSONTableHelper.getJSONTableRowCells = function (row) {
        var jsonCells = [];
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            jsonCells.push(JSONTableHelper.getJSONTableCell(cell, -1));
        }
        return jsonCells;
    };
    JSONTableHelper.getJSONTableCell = function (cell, cellIndex) {
        var jsonCell = {};
        if (cellIndex >= 0)
            jsonCell[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellIndex] = cellIndex;
        jsonCell[json_table_cell_enums_1.JSONEnumClientTableCellInfo.CellInfo] = JSONTableHelper.getJSONTableCellInfo(cell);
        jsonCell[json_table_cell_enums_1.JSONEnumClientTableCellInfo.StartCellPosition] = cell.startParagraphPosition.value;
        jsonCell[json_table_cell_enums_1.JSONEnumClientTableCellInfo.EndCellPosition] = cell.endParagrapPosition.value;
        return jsonCell;
    };
    JSONTableHelper.getJSONTableCellInfo = function (cell) {
        var jsonCellInfo = {};
        jsonCellInfo[json_table_cell_enums_1.JSONEnumClientTableCellFormatting.ColumnSpan] = cell.columnSpan;
        jsonCellInfo[json_table_cell_enums_1.JSONEnumClientTableCellFormatting.CellProperties] = json_table_cell_properties_converter_1.JSONTableCellPropertiesConverter.convertToJSON(cell.properties);
        jsonCellInfo[json_table_cell_enums_1.JSONEnumClientTableCellFormatting.PreferredWidth] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(cell.preferredWidth);
        jsonCellInfo[json_table_cell_enums_1.JSONEnumClientTableCellFormatting.VerticalMerging] = cell.verticalMerging;
        return jsonCellInfo;
    };
    return JSONTableHelper;
}());
