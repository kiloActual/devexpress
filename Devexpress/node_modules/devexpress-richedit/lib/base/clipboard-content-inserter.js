"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_manager_1 = require("../core/model-manager");
var insert_picture_manipulator_params_1 = require("../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var data_transfer_1 = require("@devexpress/utils/lib/utils/data-transfer");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var importer_options_1 = require("../rtf/import/importer-options");
var rtf_importer_1 = require("../rtf/import/rtf-importer");
var sub_document_1 = require("../core/model/sub-document");
var client_command_1 = require("./commands/client-command");
var command_base_1 = require("./commands/command-base");
var ClipboardContentInserter = (function () {
    function ClipboardContentInserter(control) {
        this.control = control;
        this.processed = false;
    }
    ClipboardContentInserter.prototype.insert = function (evt) {
        var plainTextItem = data_transfer_1.DataTransferUtils.getPlainTextItem(evt.clipboardData.items);
        var rtfItem = data_transfer_1.DataTransferUtils.getRtfTextItem(evt.clipboardData.items);
        var htmlItem = data_transfer_1.DataTransferUtils.getTransferItemByType(evt.clipboardData.items, 'text/html');
        if (rtfItem) {
            this.loadingPanelManager = this.control.loadingPanelManager.loadingPanel.showPanelDelayed(400);
            evt_1.EvtUtils.preventEvent(evt);
            if (rtfItem)
                this.insertClipboardRtf(rtfItem);
            if (htmlItem)
                this.insertClipboardHtml(htmlItem);
            return true;
        }
        if (!plainTextItem) {
            var file = data_transfer_1.DataTransferUtils.getImageItem(evt.clipboardData.items);
            if (file) {
                evt_1.EvtUtils.preventEvent(evt);
                this.insertClipboardPicture(file);
                return true;
            }
        }
        return false;
    };
    ClipboardContentInserter.prototype.insertClipboardHtml = function (htmlItem) {
        var _this = this;
        try {
            htmlItem.getAsString(function (htmlText) {
                if (_this.processed)
                    return;
                var command = _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertHtml);
                command.execute(true, htmlText);
                _this.processed = true;
            });
        }
        catch (_a) {
            console.warn("Html insert error");
        }
        finally {
            this.loadingPanelManager.hidePanel();
        }
    };
    ClipboardContentInserter.prototype.insertClipboardPicture = function (file) {
        var _this = this;
        this.control.beginUpdate();
        this.control.isLoadingPictureFromClipboard = true;
        var charInfo = this.control.modelManager.model.cache.imageCache.createUnloadedInfoByFile(file);
        var subDocument = this.control.selection.activeSubDocument;
        var interval = this.control.selection.currState.interval.clone();
        this.control.modelManager.history.addTransaction(function () {
            command_base_1.CommandBase.addSelectionBefore(_this.control);
            _this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, interval), true, true);
            _this.control.modelManager.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(subDocument, interval.start), _this.control.inputPosition.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(charInfo), new image_loading_options_1.ImageLoadingOptions(true, undefined, function () { return _this.control.isLoadingPictureFromClipboard = false; }));
            command_base_1.CommandBase.addSelectionAfter(_this.control, interval.start + 1);
        });
        this.control.endUpdate();
    };
    ClipboardContentInserter.prototype.insertClipboardRtf = function (rtfItem) {
        var _this = this;
        this.control.isLoadingPictureFromClipboard = true;
        rtfItem.getAsString(function (rtf) {
            if (_this.processed || !rtf)
                return;
            if (rtf.length > 100000)
                _this.loadingPanelManager.executeIfTimerExpired();
            var options = new importer_options_1.RtfImporterOptions(function () { });
            new rtf_importer_1.RtfImporter(options).importFromString(rtf, _this.control.modelManager.richOptions, function (model, formatImagesImporter) {
                _this.loadingPanelManager.executeIfTimerExpired();
                formatImagesImporter.whenAllPicturesLoaded(function (_success) {
                    _this.loadingPanelManager.executeIfTimerExpired();
                    _this.control.beginUpdate();
                    var subDocument = _this.control.selection.activeSubDocument;
                    var interval = _this.control.selection.currState.interval.clone();
                    _this.control.modelManager.history.addTransaction(function () {
                        command_base_1.CommandBase.addSelectionBefore(_this.control);
                        _this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, interval), true, true);
                        var resultInterval = _this.control.modelManager.modelManipulator.subDocument.insertSubDocument(new sub_document_1.SubDocumentPosition(subDocument, interval.start), new sub_document_1.SubDocumentInterval(model.mainSubDocument, model.mainSubDocument.interval));
                        command_base_1.CommandBase.addSelectionAfter(_this.control, resultInterval.end);
                        model.updateHyperlinkFields(_this.control, subDocument, resultInterval);
                    });
                    _this.control.endUpdate();
                    _this.control.isLoadingPictureFromClipboard = false;
                    _this.control.commandManager.abortClipboardCommandExecution();
                }, 5000);
                var newModelManager = new model_manager_1.ClientModelManager(model, _this.control.modelManager.richOptions, new batch_updatable_1.EmptyBatchUpdatableObject());
                formatImagesImporter.import(newModelManager.modelManipulator);
                _this.loadingPanelManager.hidePanel();
                _this.processed = true;
            }, function (_reason) {
                console.warn("Rtf insert error");
                _this.loadingPanelManager.hidePanel();
            });
        });
    };
    return ClipboardContentInserter;
}());
exports.ClipboardContentInserter = ClipboardContentInserter;
