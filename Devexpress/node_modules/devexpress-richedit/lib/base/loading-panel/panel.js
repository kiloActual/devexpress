"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var delayed_manager_1 = require("@devexpress/utils/lib/class/delayed-manager");
var ShowLoadingPanelDelayedManager = (function (_super) {
    tslib_1.__extends(ShowLoadingPanelDelayedManager, _super);
    function ShowLoadingPanelDelayedManager(action, hidePanelAction) {
        var _this = _super.call(this, action) || this;
        _this.hidePanelAction = hidePanelAction;
        return _this;
    }
    ShowLoadingPanelDelayedManager.prototype.hidePanel = function () {
        this.stop();
        this.hidePanelAction();
    };
    return ShowLoadingPanelDelayedManager;
}(delayed_manager_1.DelayedActionManager));
exports.ShowLoadingPanelDelayedManager = ShowLoadingPanelDelayedManager;
var LoadingPanelBase = (function () {
    function LoadingPanelBase() {
        this.enabled = true;
    }
    LoadingPanelBase.prototype.showPanelDelayed = function (timeout) {
        var _this = this;
        var manager = new ShowLoadingPanelDelayedManager(function () { return _this.setVisible(true); }, function () { return _this.setVisible(false); });
        manager.start(timeout);
        return manager;
    };
    LoadingPanelBase.prototype.dispose = function () {
        if (this.customPanel)
            if (this.customPanel.dispose)
                this.customPanel.dispose();
        this.loadingPanel.dispose();
    };
    LoadingPanelBase.prototype.setVisible = function (visible) {
        if (this.customPanel)
            this.setPanelVisible(this.customPanel, visible);
        else
            this.setPanelVisible(this.loadingPanel, visible);
    };
    LoadingPanelBase.prototype.setPanelVisible = function (panel, visible) {
        var currState = panel.visible;
        if (visible) {
            if (this.enabled && (currState === false || currState === undefined))
                panel.show();
        }
        else {
            if (currState === true || currState === undefined)
                panel.hide();
        }
    };
    return LoadingPanelBase;
}());
exports.LoadingPanelBase = LoadingPanelBase;
