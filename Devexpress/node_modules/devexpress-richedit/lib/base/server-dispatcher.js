"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var command_request_1 = require("../core/model/json/command-request");
var command_type_1 = require("../core/model/json/command-type");
var json_sub_document_enums_1 = require("../core/model/json/enums/json-sub-document-enums");
var json_top_level_enums_1 = require("../core/model/json/enums/json-top-level-enums");
var errors_1 = require("@devexpress/utils/lib/errors");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var client_command_1 = require("./commands/client-command");
var server_dispatcher_response_processor_1 = require("./server-dispatcher-response-processor");
var ServerDispatcher = (function () {
    function ServerDispatcher(control) {
        this.responseWaitingTime = 30000;
        this.pendingPeriod = 5000;
        this.maxCommandCount = 250;
        this.wasModifiedOnServer = false;
        this.requestID = 0;
        this.editRequestID = 0;
        this.waitingTimerID = null;
        this.pendingTimerID = null;
        this.numActiveSaveRequests = 0;
        this.isWaiting = false;
        this.lockQueue = false;
        this.queue = {};
        this.sendedRequests = {};
        this.numQueueLockers = 0;
        this.control = control;
    }
    ServerDispatcher.prototype.dispose = function () {
        this.reset();
    };
    ServerDispatcher.prototype.initialize = function (testMode) {
        this.testMode = testMode;
    };
    ServerDispatcher.prototype.saveInProgress = function () {
        return this.numActiveSaveRequests > 0;
    };
    ServerDispatcher.prototype.pushRequest = function (request, requestParams) {
        var _this = this;
        request.id = ++this.requestID;
        request.processOnCallback = requestParams.processOnCallback;
        this.lastRequestInQueue = request;
        if (this.lockQueue)
            return;
        if (this.testMode)
            this.queue = {};
        this.lockQueue = requestParams.lockQueue;
        if (command_request_1.ServerCommandRequest.isEditRequest(request)) {
            request.editIncId = ++this.editRequestID;
            this.removeModelRequests();
        }
        if (request.isSaveDocumentRequest())
            this.numActiveSaveRequests++;
        this.queue[request.id] = request;
        if (this.testMode)
            this.sendRequestCore();
        else if (requestParams.immediateSend && !this.isWaiting)
            this.forceSendingRequest();
        else if (!this.isWaiting && this.pendingTimerID == null)
            this.pendingTimerID = setTimeout(function () { return _this.onPendingTimerExpired(); }, this.pendingPeriod);
    };
    ServerDispatcher.prototype.pushLoadNextChunksRequest = function (subDocument, startPosition) {
        var _a;
        if (!number_1.NumberMapUtils.containsBy(this.queue, function (req) { return req.isLoadNextChunksRequest(); }))
            this.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.LoadPieceTable, subDocument.id, (_a = {}, _a[json_sub_document_enums_1.JSONEnumLoadPieceTableCommandParameters.StartPosition] = startPosition, _a)), new command_request_1.RequestParams(false, true, false));
    };
    ServerDispatcher.prototype.processSaveResponse = function (historyId) {
        this.numActiveSaveRequests--;
        if (this.numActiveSaveRequests < 0)
            throw new Error(errors_1.Errors.InternalException);
        this.control.lastSavedHistoryItemId = historyId;
        this.wasModifiedOnServer = false;
        this.control.barHolder.updateItemsState();
    };
    ServerDispatcher.prototype.getRequestJSON = function () {
        this.lastRequestInQueue = undefined;
        var request = this.getRequestList(true);
        if (request.length && !this.lockQueue)
            return JSON.stringify(request);
        return "";
    };
    ServerDispatcher.prototype.reset = function () {
        this.clearTimers();
        this.numActiveSaveRequests = 0;
        this.isWaiting = false;
        this.lockQueue = false;
        this.queue = {};
        this.control.lastSavedHistoryItemId = -1;
    };
    ServerDispatcher.prototype.forceSendingRequest = function () {
        this.clearTimers();
        this.sendRequestCore();
    };
    ServerDispatcher.prototype.hasQueue = function () {
        return !!this.queue[this.requestID];
    };
    ServerDispatcher.prototype.isQueueLocked = function () {
        return this.lockQueue;
    };
    ServerDispatcher.prototype.onGetResponse = function (responce, testMode) {
        if (testMode === void 0) { testMode = false; }
        var coreResponce;
        try {
            if (testMode)
                coreResponce = eval(responce);
            else
                coreResponce = JSON.parse(responce);
        }
        catch (e) {
            if (testMode)
                throw new Error("InvalidResponce=" + responce.toString());
            return false;
        }
        this.onGetResponseCore(coreResponce);
        return true;
    };
    ServerDispatcher.prototype.onGetResponseCore = function (responce) {
        this.clearWaitingTimer();
        this.isWaiting = false;
        var queueLocked = this.lockQueue;
        if (queueLocked) {
            this.numQueueLockers++;
            this.control.globalEventDispatcher.beginUpdate();
        }
        this.processCommandsResponce(responce[json_top_level_enums_1.JSONResponceLevelProperty.CommandsResults]);
        this.control.loadingPanelManager.loadingPanel.setVisible(false);
        var errorCode = responce[json_top_level_enums_1.JSONResponceLevelProperty.ErrorCode];
        if (errorCode == json_top_level_enums_1.JSONResponseError.NoErrors) {
            if (!this.isWaiting) {
                if (!queueLocked)
                    this.sendRequestCore();
                if (!this.hasQueue())
                    this.lockQueue = false;
            }
            if (queueLocked) {
                if (!this.lockQueue) {
                    if (!this.control.modelManager.model.isLoaded())
                        this.pushLoadNextChunksRequest(this.control.modelManager.model.mainSubDocument, this.control.modelManager.model.getCurrentLength());
                    else {
                        while (this.numQueueLockers > 0) {
                            this.numQueueLockers--;
                            this.control.globalEventDispatcher.endUpdate();
                        }
                    }
                }
            }
            else {
                if (!this.lockQueue) {
                    if (!this.control.modelManager.model.isLoaded())
                        this.pushLoadNextChunksRequest(this.control.modelManager.model.mainSubDocument, this.control.modelManager.model.getCurrentLength());
                }
            }
        }
        else {
            this.reset();
            while (this.numQueueLockers > 0) {
                this.numQueueLockers--;
                this.control.globalEventDispatcher.endUpdate();
            }
            switch (errorCode) {
                case json_top_level_enums_1.JSONResponseError.SessionHasExpired:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorSessionHasExpiredMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.ModelIsChanged:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorModelIsChangedMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.AuthException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorAuthExceptionMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.InnerException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorInnerExceptionMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.CantSaveToAlreadyOpenedFile:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorOpeningAndOverstoreImpossibleMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.CantSaveToEmptyPath:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorCantSaveToEmptyPathMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.CantSaveDocument:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorSavingMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.CantOpenDocument:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorOpeningMessageCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.PathTooLongException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorPathTooLongCommand).execute(this.control.commandManager.isPublicApiCall);
                    break;
                case json_top_level_enums_1.JSONResponseError.CalculateDocumentVariableException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorDocVariableErrorCommand).execute(this.control.commandManager.isPublicApiCall);
                    if (this.control.selection.activeSubDocument.fieldsWaitingForUpdate)
                        this.control.selection.activeSubDocument.fieldsWaitingForUpdate.endAction();
                    break;
                case json_top_level_enums_1.JSONResponseError.InsertContentFromServerException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowInsertContentFromServerErrorDialogCommand).execute(this.control.commandManager.isPublicApiCall);
                    this.control.commandManager.insertContentFromServerRequestManager.reset();
                    break;
                case json_top_level_enums_1.JSONResponseError.LoadPictureException:
                    this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorLoadPictureMessage).execute(this.control.commandManager.isPublicApiCall);
                    console.error('Could not load the image. See also: https://stackoverflow.com/questions/28286086/default-securityprotocol-in-net-4-5');
                    break;
                default:
                    throw new Error("Undefined server error");
            }
        }
    };
    ServerDispatcher.prototype.clearTimers = function () {
        this.clearWaitingTimer();
        if (this.pendingTimerID) {
            clearTimeout(this.pendingTimerID);
            this.pendingTimerID = null;
        }
    };
    ServerDispatcher.prototype.clearWaitingTimer = function () {
        if (this.waitingTimerID) {
            clearTimeout(this.waitingTimerID);
            this.waitingTimerID = null;
        }
    };
    ServerDispatcher.prototype.sendRequestCore = function () {
        var _this = this;
        if (!this.hasQueue())
            return false;
        this.isWaiting = true;
        this.lastRequestInQueue = undefined;
        var sendRequestsViaCallback = this.shouldSendRequestsWithCallback();
        var request = this.getRequestList(sendRequestsViaCallback);
        this.showLoadingPanelIfNeeded(request);
        this.control.sendRequest(JSON.stringify(request), sendRequestsViaCallback);
        if (!this.lockQueue)
            this.waitingTimerID = setTimeout(function () { return _this.onWaitingTimerExpired(); }, this.responseWaitingTime);
        return true;
    };
    ServerDispatcher.prototype.showLoadingPanelIfNeeded = function (requestList) {
        for (var _i = 0, requestList_1 = requestList; _i < requestList_1.length; _i++) {
            var request = requestList_1[_i];
            var commandType = request[json_top_level_enums_1.JSONCommandParametersProperty.CommandType];
            if (command_request_1.ServerCommandRequest.isUIBlockingCommandType(commandType)) {
                this.control.loadingPanelManager.loadingPanel.setVisible(true);
                return;
            }
        }
    };
    ServerDispatcher.prototype.shouldSendRequestsWithCallback = function () {
        return number_1.NumberMapUtils.containsBy(this.queue, function (val) { return val.processOnCallback; });
    };
    ServerDispatcher.prototype.getRequestList = function (withPostData) {
        return number_1.NumberMapUtils.toListBy(this.queue, function (val) { return val.getJsonObject(withPostData); }, this.maxCommandCount);
    };
    ServerDispatcher.prototype.removeModelRequests = function () {
        var keysForDeleting = [];
        number_1.NumberMapUtils.forEach(this.queue, function (request, key) {
            if (!command_request_1.ServerCommandRequest.isEditRequest(request) &&
                !request.isSpellCheckerRequest() &&
                !request.isSaveDocumentRequest() &&
                !request.isGetSetRtfRequest() &&
                !request.isForcePushRequest() &&
                !request.isPdfExportRequest())
                keysForDeleting.push(key);
        });
        for (var i = keysForDeleting.length - 1; i >= 0; i--)
            delete this.queue[keysForDeleting[i]];
    };
    ServerDispatcher.prototype.processCommandsResponce = function (commandResults) {
        if (!commandResults)
            return;
        var needHandleRequests = [];
        for (var _i = 0, commandResults_1 = commandResults; _i < commandResults_1.length; _i++) {
            var jsonCommandResponce = commandResults_1[_i];
            var commandId = jsonCommandResponce[json_top_level_enums_1.JSONCommandParametersProperty.IncId];
            if (commandId > 0 && !Object.prototype.hasOwnProperty.call(this.queue, commandId.toString()))
                continue;
            delete this.queue[commandId];
            needHandleRequests.push(jsonCommandResponce);
        }
        this.control.globalEventDispatcher.beginUpdate();
        for (var _a = 0, needHandleRequests_1 = needHandleRequests; _a < needHandleRequests_1.length; _a++) {
            var jsonCommandResponce = needHandleRequests_1[_a];
            var commandType = jsonCommandResponce[json_top_level_enums_1.JSONCommandParametersProperty.CommandType];
            if (command_request_1.ServerCommandRequest.isUIBlockingCommandType(commandType))
                this.control.loadingPanelManager.loadingPanel.setVisible(true);
            var isNewWorkSession = !!jsonCommandResponce[json_top_level_enums_1.JSONCommandParametersProperty.IsNewWorkSession];
            var jsonServerParams = jsonCommandResponce[json_top_level_enums_1.JSONCommandParametersProperty.ServerParams];
            var jsonCacheData = jsonCommandResponce[json_top_level_enums_1.JSONCommandParametersProperty.Caches];
            server_dispatcher_response_processor_1.ServerDispatcherResponseProcessor.processCommandResponce(this, commandType, isNewWorkSession, jsonServerParams, jsonCacheData);
        }
        this.control.globalEventDispatcher.endUpdate();
    };
    ServerDispatcher.prototype.onPendingTimerExpired = function () {
        this.sendRequestCore();
        this.pendingTimerID = null;
    };
    ServerDispatcher.prototype.onWaitingTimerExpired = function () {
        this.sendRequestCore();
        this.waitingTimerID = null;
    };
    return ServerDispatcher;
}());
exports.ServerDispatcher = ServerDispatcher;
