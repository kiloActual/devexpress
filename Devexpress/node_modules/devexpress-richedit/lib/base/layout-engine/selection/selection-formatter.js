"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var event_dispatcher_1 = require("../../../base-utils/event-dispatcher");
var map_creator_1 = require("../../../base-utils/map-creator");
var layout_box_iterator_main_sub_document_1 = require("../../../core/layout-engine/layout-box-iterator/layout-box-iterator-main-sub-document");
var layout_box_iterator_other_sub_document_1 = require("../../../core/layout-engine/layout-box-iterator/layout-box-iterator-other-sub-document");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var layout_change_base_1 = require("../../../core/layout-formatter/changes/changes/layout-change-base");
var layout_page_selection_change_1 = require("../../../core/layout-formatter/changes/changes/selection/layout-page-selection-change");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var layout_selection_items_1 = require("../../../core/layout/selection/layout-selection-items");
var layout_table_cell_info_1 = require("../../../core/layout/table/layout-table-cell-info");
var enums_1 = require("../../../core/model/changes/enums");
var enums_2 = require("../../../core/model/character/enums");
var table_1 = require("../../../core/model/tables/main-structures/table");
var log_1 = require("../../../core/rich-utils/debug/logger/base-logger/log");
var log_obj_to_str_1 = require("../../../core/rich-utils/debug/logger/base-logger/log-obj-to-str");
var log_source_1 = require("../../../core/rich-utils/debug/logger/base-logger/log-source");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var math_1 = require("@devexpress/utils/lib/utils/math");
var SimpleSelectionLayoutType;
(function (SimpleSelectionLayoutType) {
    SimpleSelectionLayoutType[SimpleSelectionLayoutType["Search"] = 0] = "Search";
    SimpleSelectionLayoutType[SimpleSelectionLayoutType["Misspelled"] = 1] = "Misspelled";
    SimpleSelectionLayoutType[SimpleSelectionLayoutType["RangePermission"] = 2] = "RangePermission";
})(SimpleSelectionLayoutType = exports.SimpleSelectionLayoutType || (exports.SimpleSelectionLayoutType = {}));
var SelectionFormatter = (function (_super) {
    tslib_1.__extends(SelectionFormatter, _super);
    function SelectionFormatter(selection, measurer, layoutSelection, documentProtectionSettings) {
        var _this = _super.call(this) || this;
        _this.onSelectionLayoutChanged = new event_dispatcher_1.EventDispatcher();
        _this.selection = selection;
        _this.measurer = measurer;
        _this.layoutSelection = layoutSelection;
        _this.documentProtectionSettings = documentProtectionSettings;
        return _this;
    }
    Object.defineProperty(SelectionFormatter.prototype, "highlightRanges", {
        get: function () { return this.documentProtectionSettings.highlightRanges; },
        enumerable: true,
        configurable: true
    });
    SelectionFormatter.prototype.modelChanged = function (change) {
        if (change.type == enums_1.ModelChangeType.RangePermissionsPropertiesChanged)
            this.onRangePermissionPropertiesChanged();
    };
    SelectionFormatter.prototype.onRangePermissionPropertiesChanged = function () {
        var _this = this;
        for (var _i = 0, _a = this.layoutSelection.rangePermissionInfo.pageInfos; _i < _a.length; _i++) {
            var pageInfo = _a[_i];
            pageInfo.beforeRecreatePageSelection();
        }
        if (this.highlightRanges) {
            list_1.ListUtils.forEach(this.selection.layout.pages, function (page) {
                _this.buildRangePermissionSelection(_this.selection.model.mainSubDocument, page.index);
                number_1.NumberMapUtils.forEach(page.otherPageAreas, function (pa) { return _this.buildRangePermissionSelection(pa.subDocument, _this.selection.pageIndex); });
            });
        }
        else
            this.layoutSelection.rangePermissionInfo.changes = [];
        if (!this.isUpdateLocked())
            this.raiseRangePermissionLayoutChanged();
    };
    SelectionFormatter.prototype.NotifySelectionChanged = function (_selection) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.SelectionFormatter, "NotifySelectionChanged", function () { return "intervals: " + list_1.ListUtils.map(_this.selection.intervals, function (currI) { return log_obj_to_str_1.LogObjToStr.fixedInterval(currI); }).join(" ") + ", subDocId: " + _this.selection.activeSubDocument.id; });
        this.updateSubDocumentInfo();
        this.selectionChanged();
    };
    SelectionFormatter.prototype.NotifySearchSelectionChanged = function () {
        log_1.Log.print(log_source_1.LogSource.SelectionFormatter, "NotifySearchSelectionChanged", "");
        this.layoutSelection.searchInfo.changes = [];
        for (var _i = 0, _a = this.layoutSelection.searchInfo.pageInfos; _i < _a.length; _i++) {
            var pageInfo = _a[_i];
            pageInfo.beforeRecreatePageSelection();
        }
        var subDocument = this.selection.activeSubDocument;
        this.createSimpleLayout(subDocument, this.intersectModelIntervalsWithValidPageIntervals(subDocument, this.selection.searchIntervals, this.layoutSelection.pageIndex), this.layoutSelection.searchInfo, SimpleSelectionLayoutType.Search);
        if (!this.isUpdateLocked())
            this.raiseSearchSelectionLayoutChanged();
    };
    SelectionFormatter.prototype.NotifyMisspelledSelectionChanged = function () {
        log_1.Log.print(log_source_1.LogSource.SelectionFormatter, "NotifyMisspelledSelectionChanged", "");
        this.layoutSelection.misspelledInfo.changes = [];
        for (var _i = 0, _a = this.layoutSelection.misspelledInfo.pageInfos; _i < _a.length; _i++) {
            var pageInfo = _a[_i];
            pageInfo.beforeRecreatePageSelection();
        }
        var subDocument = this.selection.activeSubDocument;
        this.createSimpleLayout(subDocument, this.intersectModelIntervalsWithValidPageIntervals(subDocument, this.selection.misspelledIntervals, this.layoutSelection.pageIndex), this.layoutSelection.misspelledInfo, SimpleSelectionLayoutType.Misspelled);
        if (!this.isUpdateLocked())
            this.raiseMisspelledSelectionLayoutChanged();
    };
    SelectionFormatter.prototype.NotifyPagesReady = function (pageChanges) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.SelectionFormatter, "NotifyPagesReady", "");
        var _loop_1 = function (pageChange) {
            if (pageChange.changeType == layout_change_base_1.LayoutChangeType.Deleted) {
                this_1.layoutSelection.selectionInfo.pageInfos.splice(pageChange.index, 1);
                this_1.layoutSelection.selectionInfo.changes.push(new layout_page_selection_change_1.LayoutPageSelectionChange(pageChange.index, layout_change_base_1.LayoutChangeType.Deleted, []));
                if (this_1.highlightRanges) {
                    this_1.layoutSelection.rangePermissionInfo.pageInfos.splice(pageChange.index, 1);
                    this_1.layoutSelection.rangePermissionInfo.changes.push(new layout_page_selection_change_1.LayoutPageSelectionChange(pageChange.index, layout_change_base_1.LayoutChangeType.Deleted, []));
                }
            }
            else {
                this_1.buildPageSelection(pageChange.index);
                if (this_1.highlightRanges) {
                    var pageInfo = this_1.layoutSelection.rangePermissionInfo.pageInfos[pageChange.index];
                    if (pageInfo)
                        pageInfo.beforeRecreatePageSelection();
                    this_1.buildRangePermissionSelection(this_1.selection.model.mainSubDocument, pageChange.index);
                    number_1.NumberMapUtils.forEach(this_1.selection.layout.pages[pageChange.index].otherPageAreas, function (pa) { return _this.buildRangePermissionSelection(pa.subDocument, pageChange.index); });
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, pageChanges_1 = pageChanges; _i < pageChanges_1.length; _i++) {
            var pageChange = pageChanges_1[_i];
            _loop_1(pageChange);
        }
        if (!this.isUpdateLocked()) {
            this.raiseSelectionLayoutChanged();
            if (this.highlightRanges)
                this.raiseRangePermissionLayoutChanged();
            else
                this.layoutSelection.rangePermissionInfo.reset();
        }
    };
    SelectionFormatter.prototype.NotifyFullyFormatted = function (_pageCount) { };
    ;
    SelectionFormatter.prototype.onUpdateUnlocked = function (_occurredEvents) {
        this.updateSubDocumentInfo();
        log_1.Log.print(log_source_1.LogSource.SelectionFormatter, "onUpdateUnlocked", "");
        this.raiseSelectionLayoutChanged();
        this.raiseSearchSelectionLayoutChanged();
        this.raiseMisspelledSelectionLayoutChanged();
        if (this.highlightRanges)
            this.raiseRangePermissionLayoutChanged();
        else if (this.layoutSelection.rangePermissionInfo)
            this.layoutSelection.rangePermissionInfo.reset();
    };
    SelectionFormatter.prototype.selectionChanged = function () {
        this.layoutSelection.selectionInfo.changes = [];
        for (var _i = 0, _a = this.layoutSelection.selectionInfo.pageInfos; _i < _a.length; _i++) {
            var pageInfo = _a[_i];
            pageInfo.beforeRecreatePageSelection();
        }
        this.buildContiniousSelection();
        if (!this.isUpdateLocked())
            this.raiseSelectionLayoutChanged();
    };
    SelectionFormatter.prototype.updateSubDocumentInfo = function () {
        var needUpdate = this.layoutSelection.pageIndex != this.selection.pageIndex ||
            this.layoutSelection.subDocumentInfo != this.selection.activeSubDocument.info;
        if (needUpdate) {
            this.layoutSelection.pageIndex = this.selection.pageIndex;
            this.layoutSelection.subDocumentInfo = this.selection.activeSubDocument.info;
            this.selectionChanged();
        }
    };
    SelectionFormatter.prototype.buildContiniousSelection = function () {
        if (this.selection.isCollapsed())
            this.createCollapsedSelectionLayout(-1);
        else {
            var layout = this.selection.layout;
            var selIntervals = this.selection.intervals;
            var subDoc = this.selection.activeSubDocument;
            var validLayoutInterval = void 0;
            if (subDoc.isMain())
                validLayoutInterval = algorithms_1.IntervalAlgorithms.getMergedIntervals(list_1.ListUtils.accumulate(layout.pages, [], function (acc, page) { return list_1.ListUtils.addListOnTail(acc, page.getContentIntervals()); }, 0, layout.validPageCount), true);
            else {
                if (this.selection.pageIndex < layout.validPageCount) {
                    var pageArea = layout.pages[this.selection.pageIndex].otherPageAreas[subDoc.id];
                    validLayoutInterval = pageArea ? [new fixed_1.FixedInterval(0, subDoc.getDocumentEndPosition())] : [];
                }
                else
                    validLayoutInterval = [];
            }
            for (var _i = 0, _a = algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfInterval(validLayoutInterval, selIntervals); _i < _a.length; _i++) {
                var interval = _a[_i];
                this.createExtendedSelectionLayout(interval, this.layoutSelection.selectionInfo, selIntervals);
            }
        }
    };
    SelectionFormatter.prototype.buildPageSelection = function (pageIndex) {
        var selection = this.selection;
        var pageInfo = this.layoutSelection.selectionInfo.pageInfos[pageIndex];
        if (pageInfo)
            pageInfo.beforeRecreatePageSelection();
        if (selection.isCollapsed()) {
            this.layoutSelection.selectionInfo.changes = [];
            this.createCollapsedSelectionLayout(pageIndex);
        }
        else {
            var page = selection.layout.pages[pageIndex];
            var subDocument = selection.activeSubDocument;
            var intersPageIntervalsAndSelectionIntervals = [];
            if (subDocument.isMain())
                intersPageIntervalsAndSelectionIntervals =
                    algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfInterval(selection.intervals, page.getContentIntervals());
            else if (page.otherPageAreas[subDocument.id] && pageIndex == selection.pageIndex)
                intersPageIntervalsAndSelectionIntervals = selection.intervals;
            for (var _i = 0, intersPageIntervalsAndSelectionIntervals_1 = intersPageIntervalsAndSelectionIntervals; _i < intersPageIntervalsAndSelectionIntervals_1.length; _i++) {
                var interval = intersPageIntervalsAndSelectionIntervals_1[_i];
                if (interval.length > 0)
                    this.createExtendedSelectionLayout(interval, this.layoutSelection.selectionInfo, selection.intervals);
            }
        }
    };
    SelectionFormatter.prototype.buildRangePermissionSelection = function (subDocument, pageIndex) {
        var selection = this.selection;
        var page = selection.layout.pages[pageIndex];
        var rpIntervals = list_1.ListUtils.map(subDocument.availableRangePermissions, function (rp) { return rp.interval; });
        var intersPageIntervalsAndSelectionIntervals = subDocument.isMain() ?
            algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfInterval(rpIntervals, page.getContentIntervals()) :
            rpIntervals;
        this.createSimpleLayout(subDocument, SelectionFormatter.translateInteralsToIterators(this.selection.layout, subDocument, pageIndex, intersPageIntervalsAndSelectionIntervals), this.layoutSelection.rangePermissionInfo, SimpleSelectionLayoutType.RangePermission);
    };
    SelectionFormatter.prototype.createCollapsedSelectionLayout = function (dontCreateSelectionIfNotThisPageIndex) {
        var selection = this.selection;
        var selectionPosition = selection.intervals[0].start;
        var layout = selection.layout;
        var subDocument = selection.activeSubDocument;
        var cursorPos = subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(layout, subDocument, selectionPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false))
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(layout, subDocument, selectionPosition, selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        if (!cursorPos || dontCreateSelectionIfNotThisPageIndex >= 0 && cursorPos.pageIndex != dontCreateSelectionIfNotThisPageIndex ||
            !cursorPos.page.isValid)
            return;
        var stepBackward = true;
        while (enum_1.EnumUtils.isAnyOf(cursorPos.box.getType(), layout_box_1.LayoutBoxType.AnchorPicture, layout_box_1.LayoutBoxType.AnchorTextBox)) {
            if (stepBackward) {
                if (!cursorPos.advanceToPrevBoxInRow())
                    stepBackward = false;
            }
            else {
                if (!cursorPos.advanceToNextBoxInRow())
                    break;
            }
        }
        var cellInfo = cursorPos.row.tableCellInfo;
        if (cellInfo && cellInfo.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn)) {
            var rowInfo = cellInfo.parentRow;
            var tableGrid = rowInfo.parentTable.logicInfo.grid;
            var cellGridInfo = tableGrid.tableCellGridInfos[rowInfo.rowIndex][cellInfo.cellGridIndex];
            var cell = tableGrid.table.rows[cellGridInfo.getStartRowIndex()].cells[cellGridInfo.getCellIndex(0)];
            if (selectionPosition == cell.endParagrapPosition.value - 1) {
                for (var _i = 0, _a = cursorPos.column.tablesInfo; _i < _a.length; _i++) {
                    var prevNestedTableColumnInfo = _a[_i];
                    if (prevNestedTableColumnInfo.logicInfo.grid.table.getEndPosition() == selectionPosition) {
                        var lastBorder = list_1.ListUtils.last(prevNestedTableColumnInfo.verticalBorders);
                        var prevLayoutRow = cursorPos.column.rows[cursorPos.rowIndex - 1];
                        var parMarkBoxHeight = cursorPos.row.boxes[0].height;
                        var floatingObjectId_1 = SelectionFormatter.getFloatingObjId(subDocument, cursorPos.page);
                        var selectionCursor_1 = new layout_selection_items_1.LayoutSelectionCursorItem();
                        selectionCursor_1.setPosition(new point_1.Point(cursorPos.pageArea.x + cursorPos.column.x + prevNestedTableColumnInfo.x + lastBorder.xPos + Math.max(1, lastBorder.borderInfo.width) + 1, cursorPos.pageArea.y + cursorPos.column.y + prevLayoutRow.bottom - parMarkBoxHeight));
                        selectionCursor_1.setSize(new size_1.Size(1, parMarkBoxHeight));
                        selectionCursor_1.floatingObjectId = floatingObjectId_1;
                        this.layoutSelection.selectionInfo.registerItem(cursorPos.pageIndex, selectionCursor_1);
                        return;
                    }
                }
            }
        }
        SelectionFormatter.setPositionOnVisibleBox(cursorPos);
        if (cursorPos.row.height == 0 || cursorPos.row.width == 0)
            return;
        var floatingObjectId = SelectionFormatter.getFloatingObjId(subDocument, cursorPos.page);
        var selectionCursor = layout_selection_items_1.LayoutSelectionItem.create(cursorPos, new size_1.Size(1, cursorPos.box.height), floatingObjectId, layout_selection_items_1.LayoutSelectionCursorItem);
        selectionCursor.x += cursorPos.box.x + (cursorPos.box.isVisible() ? cursorPos.box.getCharOffsetXInPixels(this.measurer, cursorPos.charOffset) : 0);
        selectionCursor.y += cursorPos.row.getSpacingBefore() + cursorPos.row.baseLine - cursorPos.box.getAscent() - cursorPos.row.getSpacingBefore();
        if (cursorPos.box.characterProperties.script === enums_2.CharacterFormattingScript.Subscript) {
            var multiplier = cursorPos.box.characterProperties.fontInfo.scriptMultiplier;
            selectionCursor.y += unit_converter_1.UnitConverter.pointsToPixelsF(cursorPos.box.characterProperties.fontSize) *
                (cursorPos.box.characterProperties.fontInfo.subScriptOffset * multiplier - multiplier + 1);
        }
        this.layoutSelection.selectionInfo.registerItem(cursorPos.pageIndex, selectionCursor);
    };
    SelectionFormatter.prototype.createExtendedSelectionLayout = function (interval, layoutSelectionInfo, allIntervals) {
        var _this = this;
        var layout = this.selection.layout;
        if (layout.pages.length == 0)
            return;
        var activeSubDocument = this.selection.activeSubDocument;
        var isMainSubDoc = activeSubDocument.isMain();
        var page = isMainSubDoc ? layout.getLastValidPage() : layout.pages[this.layoutSelection.pageIndex];
        if (!page)
            return;
        if (this.selection.specialRunInfo.isPictureSelected() || (this.selection.specialRunInfo.isTextBoxSelected() && !activeSubDocument.isTextBox()))
            return;
        var startPos = interval.start;
        var endPos = Math.min(interval.end, isMainSubDoc ? page.getEndPosition() : page.otherPageAreas[activeSubDocument.id].getEndPosition());
        var iterator = isMainSubDoc ?
            new layout_box_iterator_main_sub_document_1.LayoutBoxIteratorMainSubDocument(activeSubDocument, layout, startPos, endPos) :
            new layout_box_iterator_other_sub_document_1.LayoutBoxIteratorOtherSubDocument(activeSubDocument, layout, startPos, endPos, this.layoutSelection.pageIndex);
        if (!iterator.isInitialized())
            throw new Error(errors_1.Errors.InternalException);
        var currentLayoutRow = null;
        var currSelectionItem = null;
        var selectedCellsCollector = new SelectedCellsCollector();
        var currPageIndex = -1;
        for (var isFirstBox = true; iterator.moveNext(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(!isFirstBox), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)); isFirstBox = false) {
            if (currPageIndex < iterator.position.pageIndex) {
                currPageIndex = iterator.position.pageIndex;
                number_1.NumberMapUtils.forEach(iterator.position.page.anchoredObjectHolder.objects, function (obj) {
                    var pos = layout.anchorObjectsPositionInfo.getPosition(obj.objectId);
                    if (obj.belongsToSubDocId == _this.layoutSelection.subDocumentInfo.subDocumentId &&
                        interval.containsInterval(new fixed_1.FixedInterval(pos, 1))) {
                        var ancObjSelItem = new layout_selection_items_1.LayoutSelectionFloatingObjectItem();
                        ancObjSelItem.copyFrom(obj.getOuterBounds(false));
                        layoutSelectionInfo.registerItem(currPageIndex, ancObjSelItem);
                    }
                });
            }
            var currPosition = iterator.position;
            var row = currPosition.row;
            if (row.tableCellInfo) {
                var cell = table_1.Table.getTableCellByPosition(activeSubDocument.tables, currPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Box));
                if (SelectionFormatter.isCellFullySelected(cell, allIntervals)) {
                    if (selectedCellsCollector.isNeedAddCellToSelection(cell, row.tableCellInfo)) {
                        currentLayoutRow = row;
                        var selectionBound = row.tableCellInfo.createRectangle();
                        selectionBound.x += currPosition.pageArea.x + currPosition.column.x;
                        selectionBound.y += currPosition.pageArea.y + currPosition.column.y;
                        currSelectionItem = new layout_selection_items_1.LayoutSelectionItem();
                        currSelectionItem.floatingObjectId = SelectionFormatter.getFloatingObjId(activeSubDocument, currPosition.page);
                        currSelectionItem.copyFrom(selectionBound);
                        layoutSelectionInfo.registerItem(currPosition.pageIndex, currSelectionItem);
                    }
                    continue;
                }
            }
            var rightCharOffset = Math.min(endPos - currPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Box), currPosition.box.getLength());
            var currentBoxLeftOffsetX = currPosition.box.getCharOffsetXInPixels(this.measurer, currPosition.charOffset);
            var currentBoxRightOffsetX = currPosition.box.getCharOffsetXInPixels(this.measurer, rightCharOffset);
            var absRowOffsetX = currPosition.pageArea.x + currPosition.column.x + currPosition.row.x;
            var absBoxOffsetX = currPosition.box.x + currentBoxLeftOffsetX + absRowOffsetX;
            var thereIsGap = !!currSelectionItem && !math_1.MathUtils.numberCloseTo(absBoxOffsetX, currSelectionItem.x + currSelectionItem.width);
            var isNeedCreateNewSelectionRow = row !== currentLayoutRow || thereIsGap;
            if (isNeedCreateNewSelectionRow) {
                currentLayoutRow = row;
                var floatingObjectId = SelectionFormatter.getFloatingObjId(activeSubDocument, currPosition.page);
                currSelectionItem = layout_selection_items_1.LayoutSelectionItem.create(currPosition, new size_1.Size(0, row.height), floatingObjectId, layout_selection_items_1.LayoutSelectionItem);
                currSelectionItem.x += currPosition.box.x + currentBoxLeftOffsetX;
                layoutSelectionInfo.registerItem(currPosition.pageIndex, currSelectionItem);
            }
            currSelectionItem.width += currentBoxRightOffsetX - currentBoxLeftOffsetX;
        }
    };
    SelectionFormatter.isCellFullySelected = function (cell, allIntervals) {
        if (!cell)
            return false;
        for (var _i = 0, allIntervals_1 = allIntervals; _i < allIntervals_1.length; _i++) {
            var interval = allIntervals_1[_i];
            if (cell.startParagraphPosition.value >= interval.start && cell.endParagrapPosition.value <= interval.end)
                return true;
        }
        return false;
    };
    SelectionFormatter.translateInteralsToIterators = function (layout, subDocument, pageIndex, finalIntervals) {
        var makeIter = subDocument.isMain() ?
            function (interval) { return new layout_box_iterator_main_sub_document_1.LayoutBoxIteratorMainSubDocument(subDocument, layout, interval.start, interval.end); } :
            function (interval) { return new layout_box_iterator_other_sub_document_1.LayoutBoxIteratorOtherSubDocument(subDocument, layout, interval.start, interval.end, pageIndex); };
        return list_1.ListUtils.reducedMap(finalIntervals, function (interval) {
            if (interval.length > 0) {
                var iter = makeIter(interval);
                return iter.isInitialized() ? iter : null;
            }
            return null;
        });
    };
    SelectionFormatter.prototype.intersectModelIntervalsWithValidPageIntervals = function (subDocument, modelIntervals, pageIndex) {
        var layout = this.selection.layout;
        if (layout.pages.length == 0)
            return [];
        if (subDocument.isMain()) {
            var pageIntervals = list_1.ListUtils.accumulate(layout.pages, [], function (acc, page) {
                return list_1.ListUtils.addListOnTail(acc, page.getContentIntervals());
            }, 0, layout.validPageCount);
            var mergedIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(pageIntervals, true);
            var finalIntervals = algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfInterval(modelIntervals, mergedIntervals);
            return SelectionFormatter.translateInteralsToIterators(this.selection.layout, subDocument, pageIndex, finalIntervals);
        }
        else {
            var page = layout.pages[pageIndex];
            if (!page || !page.otherPageAreas[subDocument.id])
                return [];
            return SelectionFormatter.translateInteralsToIterators(this.selection.layout, subDocument, pageIndex, modelIntervals);
        }
    };
    SelectionFormatter.prototype.createSimpleLayout = function (subDocument, iterators, layoutSelectionInfo, type) {
        var _loop_2 = function (iterator) {
            var currentLayoutRow = null;
            var currSelectionItem = null;
            var color = this_2.documentProtectionSettings.rangeHighlightColor;
            if (type == SimpleSelectionLayoutType.RangePermission) {
                var currentInterval_1 = new fixed_1.FixedInterval(iterator.intervalStart, iterator.intervalEnd - iterator.intervalStart);
                var intersections = list_1.ListUtils.filter(subDocument.availableRangePermissions, function (perm) { return algorithms_1.IntervalAlgorithms.getIntersection(perm.interval, currentInterval_1) != null; });
                if (intersections.length)
                    color = list_1.ListUtils.last(intersections).getRangePermissionColor(subDocument.documentModel, this_2.documentProtectionSettings);
            }
            for (var isFirstBox = true; iterator.moveNext(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(!isFirstBox), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)); isFirstBox = false) {
                var currPosition = iterator.position;
                var row = currPosition.row;
                var rightCharOffset = Math.min(iterator.intervalEnd - currPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Box), currPosition.box.getLength());
                var currentBoxLeftOffsetX = currPosition.box.getCharOffsetXInPixels(this_2.measurer, currPosition.charOffset);
                var currentBoxRightOffsetX = currPosition.box.getCharOffsetXInPixels(this_2.measurer, rightCharOffset);
                var absRowOffsetX = currPosition.pageArea.x + currPosition.column.x + currPosition.row.x;
                var absBoxOffsetX = currPosition.box.x + currentBoxLeftOffsetX + absRowOffsetX;
                var thereIsGap = !!currSelectionItem && !math_1.MathUtils.numberCloseTo(absBoxOffsetX, currSelectionItem.x + currSelectionItem.width);
                var isNeedCreateNewSelectionRow = row !== currentLayoutRow || thereIsGap;
                if (isNeedCreateNewSelectionRow) {
                    currentLayoutRow = row;
                    var height = type == SimpleSelectionLayoutType.Misspelled ?
                        row.baseLine :
                        row.height - row.getSpacingAfter() - row.getSpacingBefore();
                    var yOffset = type == SimpleSelectionLayoutType.Misspelled ?
                        0 :
                        row.getSpacingBefore();
                    var floatingObjectId = SelectionFormatter.getFloatingObjId(subDocument, currPosition.page);
                    currSelectionItem = layout_selection_items_1.LayoutSelectionItem.create(currPosition, new size_1.Size(0, height), floatingObjectId, SelectionFormatter.itemConstructorsMap[type]);
                    if (type == SimpleSelectionLayoutType.RangePermission)
                        currSelectionItem.color = color;
                    currSelectionItem.x += currPosition.box.x + currentBoxLeftOffsetX;
                    currSelectionItem.y += yOffset;
                    layoutSelectionInfo.registerItem(currPosition.pageIndex, currSelectionItem);
                }
                currSelectionItem.width += currentBoxRightOffsetX - currentBoxLeftOffsetX;
            }
        };
        var this_2 = this;
        for (var _i = 0, iterators_1 = iterators; _i < iterators_1.length; _i++) {
            var iterator = iterators_1[_i];
            _loop_2(iterator);
        }
    };
    SelectionFormatter.prototype.raiseSelectionLayoutChanged = function () {
        this.layoutSelection.selectionInfo.collectPageChanges(this.selection.layout);
        this.layoutSelection.updatePageIndexWithSelection();
        this.onSelectionLayoutChanged.listeners.forEach(function (listener) { return listener.NotifySelectionLayoutChanged(); });
    };
    SelectionFormatter.prototype.raiseSearchSelectionLayoutChanged = function () {
        this.layoutSelection.searchInfo.collectPageChanges(this.selection.layout);
        this.onSelectionLayoutChanged.listeners.forEach(function (listener) { return listener.NotifySearchSelectionLayoutChanged(); });
    };
    SelectionFormatter.prototype.raiseMisspelledSelectionLayoutChanged = function () {
        this.layoutSelection.misspelledInfo.collectPageChanges(this.selection.layout);
        this.onSelectionLayoutChanged.listeners.forEach(function (listener) { return listener.NotifyMisspelledSelectionLayoutChanged(); });
    };
    SelectionFormatter.prototype.raiseRangePermissionLayoutChanged = function () {
        this.layoutSelection.rangePermissionInfo.collectPageChanges(this.selection.layout);
        this.onSelectionLayoutChanged.listeners.forEach(function (listener) { return listener.NotifyRangePermissionLayoutChanged(); });
    };
    SelectionFormatter.setPositionOnVisibleBox = function (cursorPos) {
        if (cursorPos.charOffset != 0)
            return;
        for (var boxIndex = cursorPos.boxIndex - 1; boxIndex >= 0; boxIndex--) {
            if (cursorPos.row.boxes[boxIndex].isVisible()) {
                cursorPos.boxIndex = boxIndex;
                cursorPos.box = cursorPos.row.boxes[cursorPos.boxIndex];
                cursorPos.charOffset = cursorPos.box.getLength();
                return;
            }
        }
    };
    SelectionFormatter.getFloatingObjId = function (subDocument, page) {
        if (subDocument.isMain())
            return layout_selection_items_1.LayoutSelectionItem.mainPageAreaSelection;
        else if (subDocument.isHeaderFooter())
            return layout_selection_items_1.LayoutSelectionItem.headerFooterPageAreaSelection;
        else
            return page.anchoredObjectHolder.getTextBoxByInternalSubDocId(subDocument.id).objectId;
    };
    SelectionFormatter.itemConstructorsMap = new map_creator_1.MapCreator()
        .add(SimpleSelectionLayoutType.Misspelled, layout_selection_items_1.LayoutSelectionMisspelledItem)
        .add(SimpleSelectionLayoutType.RangePermission, layout_selection_items_1.LayoutRangePermissionItem)
        .add(SimpleSelectionLayoutType.Search, layout_selection_items_1.LayoutSelectionSearchItem)
        .get();
    return SelectionFormatter;
}(batch_updatable_1.BatchUpdatableObject));
exports.SelectionFormatter = SelectionFormatter;
var SelectedCellsCollector = (function () {
    function SelectedCellsCollector() {
        this.fullySelectedCells = {};
    }
    SelectedCellsCollector.prototype.isNeedAddCellToSelection = function (cell, cellInfo) {
        var key = cell.endParagrapPosition.value;
        var cellInfos = this.fullySelectedCells[key];
        if (cellInfos === undefined) {
            this.fullySelectedCells[key] = [cellInfo];
            return true;
        }
        for (var _i = 0, cellInfos_1 = cellInfos; _i < cellInfos_1.length; _i++) {
            var info = cellInfos_1[_i];
            if (info === cellInfo)
                return false;
        }
        cellInfos.push(cellInfo);
        return true;
    };
    return SelectedCellsCollector;
}());
