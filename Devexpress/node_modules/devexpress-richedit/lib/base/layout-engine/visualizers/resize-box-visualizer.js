"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var layout_anchor_object_finder_1 = require("../../../core/layout-engine/layout-anchor-object-finder");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var layout_change_base_1 = require("../../../core/layout-formatter/changes/changes/layout-change-base");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var frame_base_listener_1 = require("../../canvas/listeners/frame-base-listener");
var i_rich_edit_core_1 = require("../../interfaces/i-rich-edit-core");
var mouse_event_source_1 = require("../../mouse-handler/mouse-event-source");
var base_visualizer_1 = require("./base-visualizer");
var renderer_class_names_1 = require("../../../core/canvas/renderer-class-names");
var ResizeBoxVisualizer = (function (_super) {
    tslib_1.__extends(ResizeBoxVisualizer, _super);
    function ResizeBoxVisualizer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResizeBoxVisualizer.prototype.NotifySelectionChanged = function (selection) {
        if (selection.specialRunInfo.isSelected())
            this.setBox();
        else if (this.initBounds)
            this.hide();
    };
    ResizeBoxVisualizer.prototype.NotifyScrollPositionChanged = function () { };
    ResizeBoxVisualizer.prototype.NotifyFullyFormatted = function (_pageCount) { };
    ;
    ResizeBoxVisualizer.prototype.NotifyPagesReady = function (pageChanges) {
        var _this = this;
        var specRunInfo = this.control.selection.specialRunInfo;
        if (!specRunInfo.isSelected())
            return;
        var subDoc = specRunInfo.getParentSubDocument();
        var pos = specRunInfo.getPosition();
        if (subDoc.isMain()) {
            if (list_1.ListUtils.unsafeAnyOf(pageChanges, function (pageChange) {
                return pageChange.changeType == layout_change_base_1.LayoutChangeType.Deleted ? null : new layout_anchor_object_finder_1.LayoutAnchorObjectFinder(_this.control.layout, pos, subDoc.id, pageChange.index).obj ||
                    list_1.ListUtils.unsafeAnyOf(_this.control.layout.pages[pageChange.index].getContentIntervals(), function (interval) {
                        return interval.contains(pos) ? pageChange : null;
                    });
            }))
                this.setBox();
        }
        else {
            if (list_1.ListUtils.unsafeAnyOf(pageChanges, function (pageChange) {
                return pageChange.changeType == layout_change_base_1.LayoutChangeType.Deleted ? null :
                    number_1.NumberMapUtils.containsBy(_this.control.layout.pages[pageChange.index].otherPageAreas, function (pageArea) {
                        return pageArea.subDocument.id == subDoc.id;
                    });
            }))
                this.setBox();
        }
    };
    ResizeBoxVisualizer.prototype.setBox = function () {
        var specRunInfo = this.control.selection.specialRunInfo;
        var pos = specRunInfo.getPosition();
        if (specRunInfo.isSelectedAnchorObject) {
            var parentSubDoc = specRunInfo.getParentSubDocument();
            var finder = new layout_anchor_object_finder_1.LayoutAnchorObjectFinder(this.control.layout, pos, parentSubDoc.id, parentSubDoc.isHeaderFooter() ? this.control.selection.pageIndex : undefined);
            if (finder.obj)
                this.show(finder.page.index, null, null, null, finder.obj);
            return;
        }
        var subDocument = this.control.selection.activeSubDocument;
        var layoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.layout, subDocument, pos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.layout, subDocument, pos, this.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        if (layoutPosition)
            this.show(layoutPosition.pageIndex, layoutPosition.pageArea, layoutPosition.column, layoutPosition.row, layoutPosition.box);
    };
    ResizeBoxVisualizer.prototype.reset = function () {
        this.initBounds = null;
        _super.prototype.reset.call(this);
    };
    ResizeBoxVisualizer.prototype.show = function (pageIndex, pageArea, column, row, box) {
        this.pageIndex = pageIndex;
        this.tip = box.hyperlinkTip;
        var boxType = box.getType();
        this.isTextBox = boxType == layout_box_1.LayoutBoxType.AnchorTextBox;
        this.isAnchoredObject = boxType == layout_box_1.LayoutBoxType.AnchorPicture || boxType == layout_box_1.LayoutBoxType.AnchorTextBox;
        this.initBounds = new rectangle_1.Rectangle(0, 0, 0, 0);
        if (this.isAnchoredObject) {
            this.initBounds.copyFrom(box);
            this.rotation = boxType == layout_box_1.LayoutBoxType.AnchorTextBox && this.control.selection.activeSubDocument.isTextBox() ? 0 :
                box.rotationInRadians;
        }
        else {
            var boxY = Math.max(0, row.baseLine - box.getAscent());
            this.initBounds
                .setPosition(new point_1.Point(pageArea.x + column.x + row.x + box.x, pageArea.y + column.y + row.y + boxY))
                .setSize(box);
            this.rotation = 0;
        }
        this.recalculate(null, null, null);
    };
    ResizeBoxVisualizer.prototype.showAtPos = function (pageIndex, position) {
        this.pageIndex = pageIndex;
        this.initBounds.x = position.x;
        this.initBounds.y = position.y;
        this.recalculate(null, null, null);
    };
    ResizeBoxVisualizer.prototype.recalculate = function (size, positionDelta, newRotation) {
        this.bounds = size != null ?
            new rectangle_1.Rectangle(this.initBounds.x + positionDelta.width, this.initBounds.y + positionDelta.height, size.width, size.height) :
            this.initBounds.createRectangle();
        if (newRotation != null)
            this.rotation = newRotation;
        this.raiseShow();
    };
    ResizeBoxVisualizer.prototype.isResizeBoxVisible = function () {
        return !!this.bounds;
    };
    ResizeBoxVisualizer.prototype.shouldCapture = function (evt) {
        return !this.control.isReadOnlyPersistent && !!ResizeBoxVisualizer.shouldCaptureEvents[evt.source];
    };
    ResizeBoxVisualizer.shouldRotate = function (evt, control) {
        return control.readOnly != i_rich_edit_core_1.ReadOnlyMode.Persistent &&
            ResizeBoxVisualizer.isEventSourceHasClassName(evt, frame_base_listener_1.FrameBaseListener.CLASSNAMES.ROTATION_BOX) &&
            control.selection.activeSubDocument.isEditable([new fixed_1.FixedInterval(control.selection.specialRunInfo.getPosition(), 1)]);
    };
    ResizeBoxVisualizer.shouldHandleTextBoxAreaClick = function (evt) {
        return ResizeBoxVisualizer.isEventSourceHasClassName(evt, frame_base_listener_1.FrameBaseListener.CLASSNAMES.TEXTBOX_AREA) ||
            ResizeBoxVisualizer.isEventSourceHasClassName(evt, renderer_class_names_1.RendererClassNames.SELECTED_TEXTBOX);
    };
    ResizeBoxVisualizer.isEventSourceHasClassName = function (evt, className) {
        var element = evt_1.EvtUtils.getEventSource(evt.mouseEvent);
        while (element) {
            if (element.className.indexOf(className) > -1)
                return true;
            if (element.className.indexOf(renderer_class_names_1.RendererClassNames.PAGES) > -1)
                return false;
            element = element.parentElement;
        }
        return false;
    };
    ResizeBoxVisualizer.shouldCaptureEvents = (_a = {},
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_E] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_N] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_NE] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_NW] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_S] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_SE] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_SW] = true,
        _a[mouse_event_source_1.MouseEventSource.ResizeBox_W] = true,
        _a);
    return ResizeBoxVisualizer;
}(base_visualizer_1.BaseVisualizer));
exports.ResizeBoxVisualizer = ResizeBoxVisualizer;
