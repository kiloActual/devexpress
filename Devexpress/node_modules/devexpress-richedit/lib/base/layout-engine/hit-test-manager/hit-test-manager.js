"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../../base-utils/utils");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_anchored_object_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-anchored-object-box");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var metrics_1 = require("@devexpress/utils/lib/geometry/metrics");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var hit_test_result_1 = require("./hit-test-result");
var TEXTBOX_AREA_MARGIN = 5;
var HitTestManager = (function () {
    function HitTestManager(documentLayout, measurer) {
        this.documentLayout = documentLayout;
        this.measurer = measurer;
        this.result = null;
        this.point = null;
    }
    HitTestManager.prototype.calculate = function (point, requestDetailsLevel, subDocument, excludeTextBoxesFromSubDocuments) {
        if (excludeTextBoxesFromSubDocuments === void 0) { excludeTextBoxesFromSubDocuments = false; }
        this.point = point;
        this.subDocument = subDocument;
        this.excludeTextBoxesFromSubDocuments = excludeTextBoxesFromSubDocuments;
        this.result = new hit_test_result_1.HitTestResult(subDocument);
        this.result.detailsLevel = requestDetailsLevel;
        this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.None;
        if (point && !point.isEmpty())
            this.calcPage();
        return this.result;
    };
    HitTestManager.prototype.calcPage = function () {
        var page = this.documentLayout.pages[this.point.pageIndex];
        this.result.pageIndex = this.point.pageIndex;
        this.result.page = page;
        var pageDeviation = HitTestManager.getDeviation(this.point, new rectangle_1.Rectangle(0, 0, page.width, page.height));
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Page] = pageDeviation;
        if (pageDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Page;
        this.calcFloatingObject(false);
        if (this.result.detailsLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.Page)
            this.calcPageArea(this.point.x, this.point.y);
    };
    HitTestManager.prototype.calcFloatingObject = function (considerBehindTextWrap) {
        if (this.result.floatingObject)
            return;
        var anchoredObjects = this.result.page.anchoredObjectHolder.getObjectsForRenderer(this.documentLayout.anchorObjectsPositionInfo).reverse();
        for (var i = 0, obj = void 0; obj = anchoredObjects[i]; i++) {
            if ((!this.result.subDocument ||
                obj.belongsToSubDocId == this.result.subDocument.id) &&
                (considerBehindTextWrap || obj.levelType != layout_anchored_object_box_1.AnchoredObjectLevelType.BehindText)) {
                var rotatedPoint = obj.rotationInRadians == 0 ? this.point : utils_1.rotatePoint(this.point, -obj.rotationInRadians, obj.center);
                if (obj.containsPoint(rotatedPoint)) {
                    this.result.floatingObject = obj;
                    return;
                }
            }
        }
    };
    HitTestManager.prototype.calcPageArea = function (pointX, pointY) {
        var _this = this;
        var point = new point_1.Point(pointX, pointY);
        var pageArea;
        var pageAreaIndex;
        if (this.subDocument) {
            if (this.subDocument.isMain()) {
                var pageAreas = this.result.page.mainSubDocumentPageAreas;
                pageAreaIndex = HitTestManager.findNearest(pointY, pageAreas, function (pa) { return pa.y; }, function (pa) { return pa.bottom; });
                pageArea = pageAreas[pageAreaIndex];
            }
            else {
                pageArea = this.result.page.otherPageAreas[this.subDocument.id];
                pageAreaIndex = 0;
                if (!pageArea)
                    return;
            }
        }
        else {
            var pageAreas_1 = list_1.ListUtils.shallowCopy(this.result.page.mainSubDocumentPageAreas);
            number_1.NumberMapUtils.forEach(this.result.page.otherPageAreas, function (pa) {
                if (pa.subDocument.isHeaderFooter())
                    pageAreas_1.push(pa);
            });
            var textBoxPaList_1 = [];
            if (!this.excludeTextBoxesFromSubDocuments) {
                list_1.ListUtils.forEach(this.result.page.anchoredObjectHolder.getObjectsForRenderer(this.documentLayout.anchorObjectsPositionInfo).reverse(), function (obj) {
                    if (obj.getType() == layout_box_1.LayoutBoxType.AnchorTextBox)
                        textBoxPaList_1.push(_this.result.page.otherPageAreas[obj.internalSubDocId]);
                });
            }
            list_1.ListUtils.addListOnTail(textBoxPaList_1, pageAreas_1);
            pageArea = HitTestManager.hitTestRectangles(point, textBoxPaList_1)[0].obj;
            pageAreaIndex = pageArea.subDocument.isMain() ? this.result.page.mainSubDocumentPageAreas.indexOf(pageArea) : 0;
            this.result.subDocument = pageArea.subDocument;
        }
        this.result.pageArea = pageArea;
        this.result.pageAreaIndex = pageAreaIndex;
        var pageAreaDeviation = HitTestManager.getDeviation(point, pageArea)
            | this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Page];
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] = pageAreaDeviation;
        if (pageAreaDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea;
        else
            this.calcFloatingObject(true);
        if (this.result.detailsLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea)
            this.calcColumn(pointX - pageArea.x, pointY - pageArea.y);
    };
    HitTestManager.prototype.calcColumn = function (pointX, pointY) {
        var columns = this.result.pageArea.columns;
        var columnIndex = HitTestManager.findNearest(pointX, columns, function (col) { return col.x; }, function (col) { return col.right; });
        var column = columns[columnIndex];
        this.result.columnIndex = columnIndex;
        this.result.column = column;
        var columnDeviation = HitTestManager.getDeviation(new point_1.Point(pointX, pointY), column)
            | this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea];
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Column] = columnDeviation;
        if (columnDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Column;
        else
            this.calcFloatingObject(true);
        if (this.result.detailsLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.Column)
            this.calcRow(pointX - column.x, pointY - column.y);
    };
    HitTestManager.prototype.calcRow = function (pointX, pointY) {
        var rows = this.result.column.rows;
        var closestTable = this.getClosestTable(pointX, pointY);
        this.result.rowIndex = closestTable ?
            this.getLayoutRowIndexCaseInTable(pointX, pointY, closestTable) :
            Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(rows, function (r) { return r.y; }, pointY));
        var row = rows[this.result.rowIndex];
        this.result.row = row;
        var rowDeviation = HitTestManager.getDeviation(new point_1.Point(pointX, pointY), row)
            | this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Column];
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Row] = rowDeviation;
        if (rowDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Row;
        else
            this.calcFloatingObject(true);
        if (this.result.detailsLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.Row)
            this.calcBox(pointX - row.x, pointY - row.y);
    };
    HitTestManager.prototype.calcBox = function (pointX, pointY) {
        var boxes = this.result.row.boxes;
        var boxIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(boxes, function (b) { return b.x; }, pointX));
        var box = boxes[boxIndex];
        var boxLeftBorder = box.x;
        var boxRightBorder = boxLeftBorder + box.width;
        var boxTopBorder = this.result.row.baseLine - box.getAscent();
        var boxBottomBorder = box.height + boxTopBorder;
        if (boxBottomBorder > this.result.row.height)
            boxBottomBorder = this.result.row.height;
        this.result.boxIndex = boxIndex;
        this.result.box = this.result.row.boxes[boxIndex];
        var boxDeviation = HitTestManager.getDeviation(new point_1.Point(pointX, pointY), new rectangle_1.Rectangle(boxLeftBorder, boxTopBorder, boxRightBorder - boxLeftBorder, boxBottomBorder - boxTopBorder))
            | this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Row];
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Box] = boxDeviation;
        if (boxDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Box;
        else
            this.calcFloatingObject(true);
        if (this.result.detailsLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            this.calcCharacter(pointX - boxLeftBorder, pointY - boxTopBorder);
    };
    HitTestManager.prototype.calcCharacter = function (pointX, _pointY) {
        var boxDeviation = this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Box];
        var boxOffset = -1;
        if (boxDeviation & rectangle_1.HitTestDeviation.Left)
            boxOffset = 0;
        else if (boxDeviation & rectangle_1.HitTestDeviation.Right)
            boxOffset = this.result.box.getLength();
        else
            boxOffset = this.result.box.calculateCharOffsetByPointX(this.measurer, pointX);
        this.result.charOffset = boxOffset;
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Character] = boxDeviation;
        if (boxDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Character;
        else
            this.calcFloatingObject(true);
    };
    HitTestManager.getDeviation = function (point, rect) {
        return new rectangle_1.RectangleDeviation(rect, point).calcDeviation().deviation.getValue();
    };
    HitTestManager.findNearest = function (point, objects, minBound, maxBound) {
        var currObj = objects[0];
        var nextObjIndex = 1;
        for (var nextObj = void 0; nextObj = objects[nextObjIndex]; nextObjIndex++) {
            if (point - maxBound(currObj) <= minBound(nextObj) - point)
                break;
            currObj = nextObj;
        }
        return nextObjIndex - 1;
    };
    HitTestManager.prototype.getClosestTable = function (pointX, pointY) {
        var tableColumnInfos = this.result.column.tablesInfo;
        if (tableColumnInfos.length == 0)
            return null;
        var belowPosition = [];
        var abovePosition = [];
        var leftRightDeviation = [];
        var exactlyColumn = list_1.ListUtils.reverseElementBy(tableColumnInfos, function (currTableColumnInfo) {
            var deviationResult = new rectangle_1.RectangleDeviation(currTableColumnInfo, new point_1.Point(pointX, pointY)).calcDeviation();
            var deviation = deviationResult.deviation;
            if (deviation.getValue() == rectangle_1.HitTestDeviation.None)
                return true;
            if (deviation.get(rectangle_1.HitTestDeviation.Top))
                belowPosition.push(deviationResult);
            else if (deviation.get(rectangle_1.HitTestDeviation.Bottom))
                abovePosition.push(deviationResult);
            else
                leftRightDeviation.push(deviationResult);
            return false;
        });
        if (exactlyColumn)
            return exactlyColumn;
        var isCollectBelowTables = this.result.column.rows[0].tableCellInfo && pointY <= tableColumnInfos[0].y;
        if (belowPosition.length && isCollectBelowTables)
            return HitTestManager.choiseClosestTable(belowPosition, false);
        var isCollectAboveTables = list_1.ListUtils.last(this.result.column.rows).tableCellInfo && pointY >= list_1.ListUtils.last(tableColumnInfos).y;
        if (abovePosition.length && isCollectAboveTables)
            return HitTestManager.choiseClosestTable(abovePosition, true);
        if (leftRightDeviation.length)
            return HitTestManager.choiseClosestTable(leftRightDeviation, false);
        return null;
    };
    HitTestManager.choiseClosestTable = function (tblList, isUseMax) {
        list_1.ListUtils.forEach(tblList, function (elem) { return elem.calcAdditionalParams(); });
        return ((isUseMax ? list_1.ListUtils.max : list_1.ListUtils.min)(tblList, function (a) { return a.offsetToInside.y; }).initRectangle);
    };
    HitTestManager.prototype.getLayoutRowIndexCaseInTable = function (pointX, pointY, closestTable) {
        var cell;
        while (true) {
            cell = this.getCell(pointX, pointY, closestTable);
            if (cell.layoutRows.length)
                break;
            closestTable = cell.internalTables[0];
        }
        var pnt = new point_1.Point(pointX, pointY);
        var cellDeviation = new rectangle_1.RectangleDeviation(cell, pnt).calcDeviation().deviation.getValue();
        this.result.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell] = cellDeviation;
        if (cellDeviation == rectangle_1.HitTestDeviation.None)
            this.result.exactlyDetailLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell;
        var deviations = [];
        var bestSuitableTbl = number_1.NumberMapUtils.elementBy(cell.internalTables, function (tbl) {
            if (tbl.containsPoint(pnt))
                return true;
            deviations.push(new rectangle_1.RectangleDeviation(tbl, pnt).calcDeviation().calcAdditionalParams());
            return false;
        });
        if (bestSuitableTbl)
            return this.getLayoutRowIndexCaseInTable(pointX, pointY, bestSuitableTbl);
        var layoutRowAndIndex_Index = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(cell.layoutRows, function (r) { return r.y; }, pointY));
        var layoutRow = cell.layoutRows[layoutRowAndIndex_Index];
        var bestSuitableTblDeviation = list_1.ListUtils.min(deviations, function (a) { return a.offsetToInside.y; });
        if (!bestSuitableTblDeviation ||
            new rectangle_1.RectangleDeviation(layoutRow, new point_1.Point(pointX, pointY)).calcDeviation().calcAdditionalParams().offsetToInside.y <=
                bestSuitableTblDeviation.offsetToInside.y)
            return layoutRow.indexInColumn;
        return this.getLayoutRowIndexCaseInTable(pointX, pointY, bestSuitableTblDeviation.initRectangle);
    };
    HitTestManager.getCellInRow = function (pointX, pointY, row, isForceGetCell) {
        var cells = row.rowCells;
        var cellIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(cells, function (c) { return c.x; }, pointX));
        var cell = cells[cellIndex];
        return isForceGetCell || cell.containsPoint(new point_1.Point(pointX, pointY)) ? cell : null;
    };
    HitTestManager.prototype.getCell = function (pointX, pointY, closestTable) {
        var rows = closestTable.tableRows;
        var rowIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(rows, function (r) { return r.y; }, pointY));
        var row = rows[rowIndex];
        var cell = HitTestManager.getCellInRow(pointX, pointY, row, true);
        if (cell.containsPoint(new point_1.Point(pointX, pointY)))
            return cell;
        var exactlyCalculatedCell = list_1.ListUtils.unsafeReverseAnyOf(rows, function (row) { return HitTestManager.getCellInRow(pointX, pointY, row, false); }, rowIndex - 1);
        if (exactlyCalculatedCell)
            return exactlyCalculatedCell;
        return cell;
    };
    HitTestManager.isPointInTexBoxArea = function (point, box, angle) {
        var rotatedPoint = angle == 0 ? point : utils_1.rotatePoint(point, -angle, box.center);
        return rotatedPoint.x > box.x + TEXTBOX_AREA_MARGIN &&
            rotatedPoint.x < box.x + box.width - TEXTBOX_AREA_MARGIN &&
            rotatedPoint.y > box.y + TEXTBOX_AREA_MARGIN &&
            rotatedPoint.y < box.y + box.height - TEXTBOX_AREA_MARGIN;
    };
    HitTestManager.hitTestRectangles = function (point, rectangles) {
        var perfectHit = [];
        var hit = list_1.ListUtils.map(rectangles, function (r) {
            var dev = new rectangle_1.RectangleDeviation(r, point).calcDeviation().calcAdditionalParams();
            if (dev.deviation.getValue() == rectangle_1.HitTestDeviation.None)
                perfectHit.push(new HitTestOfRectanglesResult(r, dev));
            return new HitTestOfRectanglesResult(r, dev);
        });
        return perfectHit.length ? perfectHit : [list_1.ListUtils.min(hit, function (a) { return metrics_1.Metrics.euclideanDistance(new point_1.Point(0, 0), a.deviation.offsetToInside); })];
    };
    return HitTestManager;
}());
exports.HitTestManager = HitTestManager;
var HitTestOfRectanglesResult = (function () {
    function HitTestOfRectanglesResult(obj, deviation) {
        this.obj = obj;
        this.deviation = deviation;
    }
    return HitTestOfRectanglesResult;
}());
exports.HitTestOfRectanglesResult = HitTestOfRectanglesResult;
