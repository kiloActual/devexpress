"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var file_name_helper_1 = require("../core/formats/file-name-helper");
var font_corrector_1 = require("../core/model/creator/font-corrector");
var update_sequence_info_1 = require("../core/model/fields/update-sequence-info");
var command_type_1 = require("../core/model/json/command-type");
var json_document_enums_1 = require("../core/model/json/enums/json-document-enums");
var json_general_enums_1 = require("../core/model/json/enums/json-general-enums");
var json_top_level_enums_1 = require("../core/model/json/enums/json-top-level-enums");
var json_exporter_1 = require("../core/model/json/exporters/json-exporter");
var json_numbering_list_exporter_1 = require("../core/model/json/exporters/json-numbering-list-exporter");
var json_font_info_converter_1 = require("../core/model/json/importers/json-font-info-converter");
var json_importer_1 = require("../core/model/json/importers/json-importer");
var json_masked_character_properties_converter_1 = require("../core/model/json/importers/json-masked-character-properties-converter");
var json_masked_paragraph_properties_converter_1 = require("../core/model/json/importers/json-masked-paragraph-properties-converter");
var json_styles_exporter_1 = require("../core/model/json/importers/json-styles-exporter");
var json_list_level_properties_converter_1 = require("../core/model/json/importers/numbering-list/json-list-level-properties-converter");
var server_model_inserter_1 = require("../core/model/json/importers/server-model-inserter");
var json_table_cell_properties_converter_1 = require("../core/model/json/importers/table/json-table-cell-properties-converter");
var json_table_row_properties_converter_1 = require("../core/model/json/importers/table/json-table-row-properties-converter");
var web_caches_exporter_1 = require("../core/model/json/web-caches-exporter");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var file_1 = require("@devexpress/utils/lib/utils/file");
var client_command_1 = require("./commands/client-command");
var print_document_command_1 = require("./commands/document/print-document-command");
var rich_edit_core_1 = require("./rich-edit-core");
var ServerDispatcherResponseProcessor = (function () {
    function ServerDispatcherResponseProcessor() {
    }
    ServerDispatcherResponseProcessor.processCommandResponce = function (dispatcher, commandType, isNewWorkSession, jsonServerParams, jsonCacheData) {
        var _a;
        var control = dispatcher.control;
        if (isNewWorkSession)
            ServerDispatcherResponseProcessor.processNewWorkSessionResponse(dispatcher, jsonServerParams);
        var model = control.modelManager.model;
        var docIsLoaded = model.isLoaded();
        var cachesExporter = new web_caches_exporter_1.WebCachesExporter(model.cache, jsonCacheData, model);
        var isNewDocument = isNewWorkSession ? jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.IsNewDocument] : false;
        switch (commandType) {
            case command_type_1.CommandType.StartCommand:
                json_importer_1.JSONImporter.importOptions(model.options, jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.Options]);
                break;
            case command_type_1.CommandType.SaveAsDocument:
            case command_type_1.CommandType.SaveDocument:
                dispatcher.processSaveResponse(jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.HistoryId]);
                break;
            case command_type_1.CommandType.DelayedPrint:
                control.owner.sendDownloadRequest(print_document_command_1.DownloadRequestType.PrintCurrentDocument);
                break;
            case command_type_1.CommandType.LoadPicturesInfo:
                control.modelManager.modelManipulator.picture.loader.applyRequest(jsonServerParams);
                break;
            case command_type_1.CommandType.FieldUpdate:
                control.modelManager.modelManipulator.field.continueUpdateFields(control.modelManager.model, jsonServerParams);
                break;
            case command_type_1.CommandType.LoadFontInfo: {
                var newFontInfo = control.modelManager.modelManipulator.font.applyFontInfoLoadedOnPaste(control.measurer, jsonServerParams, jsonCacheData[json_top_level_enums_1.JSONCachesDataProperty.FontInfoCache]);
                if (newFontInfo) {
                    var ribbonBar = control.barHolder.ribbon;
                    if (ribbonBar) {
                        var fontRibbonItem = (_a = ribbonBar.getItem) === null || _a === void 0 ? void 0 : _a.call(ribbonBar, client_command_1.RichEditClientCommand.ChangeFontName);
                        if (fontRibbonItem) {
                            var fontComboBox = fontRibbonItem.getEditor();
                            if (fontComboBox && !fontComboBox.FindItemByValue(newFontInfo.name))
                                fontComboBox.AddItem(newFontInfo.name, newFontInfo.name);
                        }
                    }
                }
                break;
            }
            case command_type_1.CommandType.CheckSpelling:
                control.spellChecker.processResponse(jsonServerParams[json_general_enums_1.JSONCheckSpellingCommand.CheckedIntervals]);
                break;
            case command_type_1.CommandType.InsertRtf:
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertRtf).handleResponce(jsonServerParams);
                break;
            case command_type_1.CommandType.GetRtf:
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.GetRtf).handleResponce(jsonServerParams);
                break;
            case command_type_1.CommandType.RequestModelAfterHibernation:
                ServerDispatcherResponseProcessor.processAfterHibernationResponce(dispatcher, cachesExporter);
                break;
            case command_type_1.CommandType.ForceSyncWithServer:
                control.commandManager.forceSyncWithServerCallbackManager.handleResponce(jsonServerParams);
                break;
            case command_type_1.CommandType.InsertContentFromServer:
                control.commandManager.insertContentFromServerRequestManager.handleResponce(control, jsonServerParams);
                break;
            case command_type_1.CommandType.DownloadMergedDocument:
                var base64 = jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.Document];
                var format = jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.DocumentFormat];
                file_1.FileUtils.startDownloadFileLocal(base64_1.Base64Utils.getFileFromBase64(base64, '', {}), "MergedDocument" + file_name_helper_1.FileNameHelper.convertToString(format));
                break;
        }
        if (isNewDocument) {
            server_model_inserter_1.ServerModelInserter.processNewDocumentResponse(model, null, jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.Document]);
            model.stylesManager.initCharacterAndParagraphStyleGalleryItems();
        }
        cachesExporter.importSubDocuments(control.modelManager.modelManipulator.modelManager.richOptions.documentProtection, null);
        if (isNewDocument) {
            control.selection.beginUpdate();
            var selectionUpdated = control.selection.changeState(function (newState) { return newState.setPosition(0).resetKeepX().setEndOfLine(false)
                .setPageIndex(-1).setSubDocument(control.modelManager.model.mainSubDocument); });
            control.layoutFormatterManager.openDocument();
            control.layout.pageColor = model.pageBackColor;
            control.layoutFormatterManager.forceFormatPage(0);
            control.inputPosition.reset();
            control.barHolder.setEnabled(true);
            control.horizontalRulerControl.setEnable(true);
            control.selection.endUpdate();
            control.barHolder.forceUpdate();
            if (!selectionUpdated)
                control.selection.raiseSelectionChanged();
            control.spellChecker.check();
        }
        control.layoutFormatterManager.runFormattingAsync();
        if (!model.isLoaded()) {
        }
        else {
            if (docIsLoaded !== model.isLoaded()) {
                control.barHolder.updateItemsState();
                this.processDocumentLoaded(control);
            }
        }
        if (isNewDocument && !!jsonServerParams[json_top_level_enums_1.JSONInitSessionProperty.InvalidDocument])
            control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowErrorInvalidDocumentFormat).execute(control.commandManager.isPublicApiCall);
        cachesExporter.dispose();
    };
    ServerDispatcherResponseProcessor.processDocumentLoaded = function (control) {
        update_sequence_info_1.updateFieldSequenceInfo(control.modelManager, control.layoutFormatterManager, control.createFieldRequestManager());
        new font_corrector_1.FontCorrector(control.modelManager.modelManipulator, control.modelManager.model, control.modelManager.richOptions.fonts).correct();
        control.globalEventDispatcher.NotifyDocumentLoaded();
    };
    ServerDispatcherResponseProcessor.processNewWorkSessionResponse = function (dispatcher, obj) {
        var sessionGuid = obj[json_top_level_enums_1.JSONInitSessionProperty.SessionGuid];
        var format = obj[json_top_level_enums_1.JSONInitSessionProperty.DocumentFormat];
        var documentInfo = new rich_edit_core_1.DocumentInfo(obj[json_top_level_enums_1.JSONInitSessionProperty.FileName], obj[json_top_level_enums_1.JSONInitSessionProperty.DocumentHasSource], format);
        if (!!obj[json_top_level_enums_1.JSONInitSessionProperty.IsNewDocument])
            dispatcher.control.initialize(sessionGuid, documentInfo, obj[json_top_level_enums_1.JSONInitSessionProperty.SubDocumentsCounter], null);
        else
            dispatcher.control.setWorkSession(sessionGuid, documentInfo, obj[json_top_level_enums_1.JSONInitSessionProperty.LastExecutedEditCommandId]);
        dispatcher.editRequestID = obj[json_top_level_enums_1.JSONInitSessionProperty.LastExecutedEditCommandId];
        dispatcher.wasModifiedOnServer = !!obj[json_top_level_enums_1.JSONInitSessionProperty.IsModified];
    };
    ServerDispatcherResponseProcessor.processAfterHibernationResponce = function (dispatcher, cachesExporter) {
        var control = dispatcher.control;
        var result = {};
        var jsonModel = {};
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.DocumentProperties] = json_exporter_1.JSONExporter.exportDocumentProperties(control.modelManager.model);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.Styles] = json_styles_exporter_1.JSONStylesExporter.exportStyles(control.modelManager.model);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.Sections] = json_exporter_1.JSONExporter.exportSections(control.modelManager.model);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.AbstractNumberingLists] =
            json_numbering_list_exporter_1.JSONNumberingListExporter.exportAbstractNumberingLists(control.modelManager.model);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.NumberingLists] =
            json_numbering_list_exporter_1.JSONNumberingListExporter.exportNumberingLists(control.modelManager.model);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.Headers] = json_exporter_1.JSONExporter.exportModelHeaderFooter(control.modelManager.model.headers);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.Footers] = json_exporter_1.JSONExporter.exportModelHeaderFooter(control.modelManager.model.footers);
        jsonModel[json_document_enums_1.JSONDocumentModelProperty.AbstractNumberingListTemplates] =
            json_numbering_list_exporter_1.JSONNumberingListExporter.exportAbstractNumberingListTemplates(control.modelManager.model);
        var jsonCaches = {};
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.CharacterPropertiesCache] =
            control.modelManager.model.cache.maskedCharacterPropertiesCache.convertToJSON(json_masked_character_properties_converter_1.JSONMaskedCharacterPropertiesConverter.convertToJSON);
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.ParagraphPropertiesCache] =
            control.modelManager.model.cache.maskedParagraphPropertiesCache.convertToJSON(json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertToJSON);
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.ListLevelPropertiesCache] =
            control.modelManager.model.cache.listLevelPropertiesCache.convertToJSON(json_list_level_properties_converter_1.JSONListLevelPropertiesConverter.convertToJSON);
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.TableRowPropertiesCache] =
            control.modelManager.model.cache.tableRowPropertiesCache.convertToJSON(json_table_row_properties_converter_1.JSONTableRowPropertiesConverter.convertToJSON);
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.TableCellPropertiesCache] =
            control.modelManager.model.cache.tableCellPropertiesCache.convertToJSON(json_table_cell_properties_converter_1.JSONTableCellPropertiesConverter.convertToJSON);
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.SubDocuments] = cachesExporter.exportSubDocuments();
        jsonCaches[json_top_level_enums_1.JSONCachesDataProperty.FontInfoCache] =
            control.modelManager.model.cache.fontInfoCache.convertToJSON(json_font_info_converter_1.JSONFontInfoConverter.convertToJSON);
        result[json_top_level_enums_1.JSONInitSessionProperty.Document] = jsonModel;
        result[json_top_level_enums_1.JSONInitSessionProperty.Caches] = jsonCaches;
        result[json_top_level_enums_1.JSONInitSessionProperty.Options] = json_exporter_1.JSONExporter.exportOptions(control.modelManager.richOptions.control);
        return result;
    };
    return ServerDispatcherResponseProcessor;
}());
exports.ServerDispatcherResponseProcessor = ServerDispatcherResponseProcessor;
