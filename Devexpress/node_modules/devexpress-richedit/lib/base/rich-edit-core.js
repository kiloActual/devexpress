"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("../base-utils/unit-converter");
var document_format_1 = require("../core/document-format");
var file_name_helper_1 = require("../core/formats/file-name-helper");
var formatter_manager_1 = require("../core/layout-formatter/managers/formatter-manager");
var document_layout_1 = require("../core/layout/document-layout");
var layout_selection_1 = require("../core/layout/selection/layout-selection");
var measurer_1 = require("../core/measurer/measurer");
var font_info_cache_1 = require("../core/model/caches/hashed-caches/font-info-cache");
var character_property_descriptor_1 = require("../core/model/character/character-property-descriptor");
var document_model_1 = require("../core/model/document-model");
var json_top_level_enums_1 = require("../core/model/json/enums/json-top-level-enums");
var rich_utils_1 = require("../core/model/rich-utils");
var sub_document_1 = require("../core/model/sub-document");
var inner_client_properties_1 = require("../core/rich-utils/inner-client-properties");
var listeners_1 = require("../core/spelling/listeners");
var spell_checker_1 = require("../core/spelling/spell-checker");
var browser_1 = require("@devexpress/utils/lib/browser");
var helper_frame_1 = require("@devexpress/utils/lib/pdf/helper-frame");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var fonts_1 = require("@devexpress/utils/lib/utils/fonts");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var html_importer_1 = require("../html/import/html-importer");
var auto_correct_service_1 = require("./auto-correct/auto-correct-service");
var document_renderer_1 = require("./canvas/renderes/common/document-renderer");
var view_manager_1 = require("./canvas/renderes/view-manager");
var client_side_events_1 = require("./client-side-events");
var client_command_1 = require("./commands/client-command");
var command_base_1 = require("./commands/command-base");
var update_field_command_1 = require("./commands/fields/update-field-command");
var event_manager_1 = require("./event-manager");
var focus_manager_1 = require("./focus-manager");
var global_event_dispatcher_1 = require("./global-event-dispatcher");
var input_controller_1 = require("./input-controller");
var i_rich_edit_core_1 = require("./interfaces/i-rich-edit-core");
var hit_test_manager_1 = require("./layout-engine/hit-test-manager/hit-test-manager");
var selection_formatter_1 = require("./layout-engine/selection/selection-formatter");
var box_visualizer_manager_1 = require("./layout-engine/visualizers/box-visualizer-manager");
var popup_menu_manager_1 = require("./popup-menu-manager");
var model_states_1 = require("./scroll/model-states");
var scroll_formatter_1 = require("./scroll/scroll-formatter");
var input_position_1 = require("./selection/input-position");
var input_position_model_changes_listener_1 = require("./selection/input-position-model-changes-listener");
var selection_1 = require("./selection/selection");
var selection_model_changes_listener_1 = require("./selection/selection-model-changes-listener");
var server_dispatcher_1 = require("./server-dispatcher");
var server_dispatcher_model_changes_listener_1 = require("./server-dispatcher-model-changes-listener");
var spell_checker_selection_changes_listener_1 = require("./spelling/spell-checker-selection-changes-listener");
var ruler_1 = require("./ui/ruler/ruler");
var search_manager_1 = require("./ui/search-manager");
var RichEditCore = (function () {
    function RichEditCore(owner, name, element, clientGuid, readOnly, barHolder, unitsType, rulerSettings, richOptions, viewsSettings, stringResources) {
        var _this = this;
        this.isLoadingPictureFromClipboard = false;
        this.readOnly = i_rich_edit_core_1.ReadOnlyMode.None;
        this._isDisposed = false;
        this.lastSavedHistoryItemId = -1;
        if (this.isClientMode())
            name = "";
        this.barHolder = barHolder;
        this.barHolder.initialize(this);
        character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo.defaultValue = font_info_cache_1.FontInfoCache.defaultFontInfo;
        this.pdfHelperFrame = new helper_frame_1.PdfHelperFrame(element, "dxre-helperFrame");
        this.owner = owner;
        this.clientGuid = clientGuid;
        this.readOnly = readOnly ? i_rich_edit_core_1.ReadOnlyMode.Persistent : i_rich_edit_core_1.ReadOnlyMode.None;
        this.modelManager = this.createModelManager(richOptions);
        this.stringResources = stringResources;
        this.measurer = new measurer_1.Measurer(name);
        this.boxVisualizerManager = new box_visualizer_manager_1.BoxVisualizerManager(this);
        this.eventManager = new event_manager_1.EventManager(this, this.boxVisualizerManager);
        this.uiUnitConverter = unit_converter_1.createUnitConverter(unitsType);
        var viewElement = this.createViewElement(name, element);
        this.horizontalRulerControl = new ruler_1.HorizontalRulerControl(this, rulerSettings, viewElement);
        this.barHolder.horizontalRuler = this.horizontalRulerControl;
        this.inputController = new input_controller_1.InputController(this, this.eventManager, viewElement);
        this.innerClientProperties = new inner_client_properties_1.InnerClientProperties(viewsSettings);
        this.viewManager = new view_manager_1.ViewManager(viewElement, this.eventManager, this.stringResources, this.horizontalRulerControl, this.inputController, this.innerClientProperties, this, this, this.owner.internalApi, this.modelManager.richOptions.fields);
        this.loadingPanelManager = this.createLoadingPanelManager();
        this.popupMenuManager = new popup_menu_manager_1.PopupMenuManager(this.owner, this.viewManager, this.measurer, null);
        this.focusManager = new focus_manager_1.FocusManager(this.viewManager.canvasManager, this.owner, this.inputController, this.eventManager);
        this.commandManager = this.createCommandManager();
        this.shortcutManager = this.createShortcutManager();
        this.serverDispatcher = new server_dispatcher_1.ServerDispatcher(this);
        this.searchManager = new search_manager_1.SearchManager(this);
        this.boxVisualizerManager.initListeners(this.viewManager);
        this.autoCorrectService = new auto_correct_service_1.AutoCorrectService(this, this.modelManager.richOptions.autoCorrect);
        this.clientSideEvents = new client_side_events_1.ClientSideEvents(this.owner);
        this.globalEventDispatcher = new global_event_dispatcher_1.GlobalEventDispatcher(this, function () {
            _this.searchManager.raiseSearchReset();
            _this.clientSideEvents.raiseDocumentChanged();
        });
        this.simpleViewCanvasSizeManager = new document_renderer_1.SimpleViewCanvasSizeManager(this.viewManager.canvasManager, function () {
            list_1.ListUtils.forEach(_this.viewManager.cache, function (_val) { return _this.viewManager.renderer.removePage(1); }, 1);
            _this.innerClientProperties.viewsSettings.widthOfPage = _this.viewManager.canvasManager.getCanvasWidth();
            if (_this.layoutFormatterManager) {
                _this.layoutFormatterManager.invalidator.onChangedAllLayout();
                _this.selection.scrollManager.setScroll(new model_states_1.ScrollState().byModelPosition(_this.selection)
                    .setModelPosition(_this.selection.lastSelectedInterval.start).useStdRelativePosition().useStdOffset());
            }
            _this.owner.adjustControl();
            _this.horizontalRulerControl.update();
        });
        if (this.innerClientProperties.viewsSettings.isSimpleView)
            this.simpleViewCanvasSizeManager.setViewMode(true);
        if (fonts_1.fontWebApiAvailable())
            fonts_1.afterFontsLoaded(function () {
                _this.invalidateLayoutAfterFontsLoaded();
            });
    }
    Object.defineProperty(RichEditCore.prototype, "isReadOnlyPersistent", {
        get: function () { return this.readOnly == i_rich_edit_core_1.ReadOnlyMode.Persistent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditCore.prototype, "model", {
        get: function () { return this.modelManager.model; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditCore.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    RichEditCore.prototype.registerActiveContextTabManager = function () { };
    RichEditCore.prototype.registerFontChangesListeners = function () { };
    RichEditCore.prototype.initialize = function (sessionGuid, documentInfo, subDocumentsCounter, model, testMode) {
        if (testMode === void 0) { testMode = false; }
        this.closed = false;
        if (!model)
            model = new document_model_1.DocumentModel(this.modelManager.richOptions, subDocumentsCounter);
        this.setWorkSession(sessionGuid, documentInfo);
        this.modelManager.model = model;
        this.measurer.setCharacterPropertiesCache(this.modelManager.model.cache.mergedCharacterPropertiesCache);
        this.layout = new document_layout_1.DocumentLayout(new document_layout_1.AnchorObjectsPositionInfo(model));
        this.selection = new selection_1.Selection(this.modelManager.model, this.layout, this.modelManager.model.mainSubDocument);
        this.inputPosition = new input_position_1.InputPosition(this.selection);
        this.inputPositionModelChangesListener = new input_position_model_changes_listener_1.InputPositionModelChangesListener(this.inputPosition, this.selection);
        this.selection.inputPosition = this.inputPosition;
        this.popupMenuManager.setSelection(this.selection);
        this.selectionModelChangesListener = new selection_model_changes_listener_1.SelectionModelChangesListener(this.selection);
        var layoutSelection = new layout_selection_1.LayoutSelection(this.selection.activeSubDocument.info, -1, this.innerClientProperties);
        this.viewManager.setWorkSession(this.layout, layoutSelection, this.modelManager.model.cache.imageCache);
        this.hitTestManager = new hit_test_manager_1.HitTestManager(this.layout, this.measurer);
        this.serverDispatcher.initialize(testMode);
        this.selectionFormatter = new selection_formatter_1.SelectionFormatter(this.selection, this.measurer, layoutSelection, this.modelManager.richOptions.documentProtection);
        this.selectionFormatter.onSelectionLayoutChanged.add(this.viewManager);
        this.selection.onChanged.add(this.inputPositionModelChangesListener);
        this.selection.onChanged.add(this.selectionFormatter);
        this.selection.onChanged.add(this.boxVisualizerManager.fullTableSelectorVisualizer);
        this.selection.onSearchChanged.add(this.selectionFormatter);
        this.selection.onMisspelledSelectionChanged.add(this.selectionFormatter);
        this.scrollFormatter = new scroll_formatter_1.ScrollFormatter(this.selection);
        this.selection.scrollManager.onChanged.add(this.scrollFormatter);
        this.scrollFormatter.onScrollLayoutChanged.add(this.viewManager.canvasScrollManager);
        this.spellChecker = new spell_checker_1.SpellChecker(this.serverDispatcher, this.selection, this.modelManager.richOptions.spellChecker);
        this.layoutFormatterManager = new formatter_manager_1.FormatterManager(this.measurer, this.innerClientProperties, this.modelManager.model, this.layout, this.selection, this.modelManager.richOptions.bookmarks, this.modelManager.richOptions.documentProtection, this.viewManager.canvasManager.controlHeightProvider, this.stringResources, [
            this.viewManager,
            this.globalEventDispatcher,
            this.selectionFormatter,
            this.scrollFormatter,
            this.boxVisualizerManager.resizeBoxVisualizer,
            this.boxVisualizerManager.anchorVisualizer,
            this.boxVisualizerManager.fullTableSelectorVisualizer,
            new listeners_1.SpellCheckerLayoutChangesListener(this.spellChecker)
        ]);
        this.modelManager.modelManipulator.clearListeners();
        this.modelManager.history.clear();
        this.modelManager.modelManipulator.modelListeners.push(this.inputPositionModelChangesListener);
        this.modelManager.modelManipulator.modelListeners.push(this.layoutFormatterManager.modelChangesListener);
        this.modelManager.modelManipulator.modelListeners.push(new server_dispatcher_model_changes_listener_1.ServerDispatcherModelChangesListener(this.serverDispatcher));
        this.modelManager.modelManipulator.modelListeners.push(this.selectionModelChangesListener);
        this.modelManager.modelManipulator.modelListeners.push(new listeners_1.SpellCheckerModelChangesListener(this.spellChecker));
        if (this.barHolder.ribbon)
            this.modelManager.modelManipulator.modelListeners.push(this.barHolder.ribbon);
        this.modelManager.modelManipulator.modelListeners.push(this.barHolder.contextMenu);
        this.modelManager.modelManipulator.modelListeners.push(this.horizontalRulerControl);
        this.modelManager.modelManipulator.modelListeners.push(this.selectionFormatter);
        this.registerFontChangesListeners();
        this.selection.onChanged.add(this.searchManager);
        this.selection.onChanged.add(this.boxVisualizerManager.resizeBoxVisualizer);
        this.selection.onChanged.add(this.boxVisualizerManager.anchorVisualizer);
        this.selection.onChanged.add(this.barHolder.contextMenu);
        if (this.barHolder.ribbon)
            this.selection.onChanged.add(this.barHolder.ribbon);
        this.barHolder.setEnabled(false);
        this.horizontalRulerControl.initialize(testMode);
        this.horizontalRulerControl.setEnable(false);
        this.selection.onChanged.add(this.horizontalRulerControl);
        this.spellChecker.initialize(this.selection.activeSubDocument);
        this.selection.onChanged.add(new spell_checker_selection_changes_listener_1.SpellCheckerSelectionChangesListener(this.spellChecker));
        this.selection.onChanged.add(this.globalEventDispatcher);
        this.selection.onChanged.add(this.barHolder.publicUiChangesListener);
        this.registerActiveContextTabManager();
        this.modelManager.modelManipulator.modelListeners.push(this.globalEventDispatcher);
        this.modelManager.modelManipulator.modelListeners.push(this.barHolder.publicUiChangesListener);
    };
    RichEditCore.prototype.dispose = function () {
        var _a, _b;
        if (this.isDisposed)
            return;
        this.pdfHelperFrame.dispose();
        this.measurer.dispose();
        this.horizontalRulerControl.dispose();
        this.searchManager.dispose();
        this.inputController.dispose();
        this.viewManager.dispose();
        this.layoutFormatterManager.dispose();
        this.serverDispatcher.dispose();
        this.eventManager.dispose();
        this.simpleViewCanvasSizeManager.dispose();
        this.loadingPanelManager.dispose();
        this.commandManager.dispose();
        this.spellChecker.dispose();
        this.selection.dispose();
        (_b = (_a = this.barHolder).dispose) === null || _b === void 0 ? void 0 : _b.call(_a);
        this.modelManager = null;
        this.commandManager = null;
        this.shortcutManager = null;
        this.selection = null;
        this.inputPosition = null;
        this.hitTestManager = null;
        this.measurer = null;
        this.uiUnitConverter = null;
        this.horizontalRulerControl = null;
        this.spellChecker = null;
        this.autoCorrectService = null;
        this.searchManager = null;
        this.clientSideEvents = null;
        this.innerClientProperties = null;
        this.focusManager = null;
        this.inputController = null;
        this.layout = null;
        this.viewManager = null;
        this.layoutFormatterManager = null;
        this.barHolder = null;
        this.popupMenuManager = null;
        this.serverDispatcher = null;
        this.owner = null;
        this.eventManager = null;
        this.selectionFormatter = null;
        this.scrollFormatter = null;
        this.boxVisualizerManager = null;
        this.globalEventDispatcher = null;
        this.simpleViewCanvasSizeManager = null;
        this.selectionModelChangesListener = null;
        this.loadingPanelManager = null;
        this.inputPositionModelChangesListener = null;
        this._isDisposed = true;
    };
    RichEditCore.prototype.beginUpdate = function () {
        var _a;
        this.layoutFormatterManager.beginUpdate();
        this.selectionFormatter.beginUpdate();
        this.scrollFormatter.beginUpdate();
        this.viewManager.canvasManager.beginUpdate();
        this.selectionModelChangesListener.beginUpdate();
        this.selection.beginUpdate();
        this.inputPositionModelChangesListener.beginUpdate();
        (_a = this.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.beginUpdate();
        this.barHolder.contextMenu.beginUpdate();
        this.horizontalRulerControl.beginUpdate();
        this.globalEventDispatcher.beginUpdate();
        this.barHolder.publicUiChangesListener.beginUpdate();
    };
    RichEditCore.prototype.endUpdate = function () {
        var _a;
        this.layoutFormatterManager.endUpdate();
        this.selectionFormatter.endUpdate();
        this.scrollFormatter.endUpdate();
        this.viewManager.canvasManager.endUpdate();
        this.layoutFormatterManager.runFormattingAsync();
        this.selectionModelChangesListener.endUpdate();
        this.selection.endUpdate();
        this.inputPositionModelChangesListener.endUpdate();
        (_a = this.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.endUpdate();
        this.barHolder.contextMenu.endUpdate();
        this.horizontalRulerControl.endUpdate();
        this.globalEventDispatcher.endUpdate();
        this.barHolder.publicUiChangesListener.endUpdate();
    };
    RichEditCore.prototype.setPersistentReadOnly = function (readOnly) {
        if (readOnly)
            this.readOnly = i_rich_edit_core_1.ReadOnlyMode.Persistent;
        else if (!readOnly && this.readOnly === i_rich_edit_core_1.ReadOnlyMode.Persistent) {
            this.readOnly = i_rich_edit_core_1.ReadOnlyMode.None;
            this.inputController.inputEditor.initializeIfNotReadOnly();
        }
    };
    RichEditCore.prototype.setWorkSession = function (sessionGuid, documentInfo) {
        this.sessionGuid = sessionGuid;
        this.documentInfo = documentInfo;
        if (this.owner)
            this.owner.syncSessionGuid(sessionGuid);
    };
    RichEditCore.prototype.sendRequest = function (requestQueryString, viaInternalCallback) {
        this.owner.raiseBeginSynchronization();
        this.owner.sendRequest(requestQueryString, viaInternalCallback);
    };
    RichEditCore.prototype.beginLoading = function () {
        if (this.readOnly === i_rich_edit_core_1.ReadOnlyMode.None) {
            this.readOnly = i_rich_edit_core_1.ReadOnlyMode.Temporary;
            var ribbon = this.barHolder.ribbon;
            if (ribbon) {
                ribbon.suspendUpdate();
                ribbon.updateItemsState();
                ribbon.continueUpdate();
            }
            this.loadingPanelManager.statusBarLoadingPanel.setVisible(true);
        }
    };
    RichEditCore.prototype.endLoading = function () {
        if (this.readOnly === i_rich_edit_core_1.ReadOnlyMode.Temporary) {
            this.readOnly = i_rich_edit_core_1.ReadOnlyMode.None;
            var ribbon = this.barHolder.ribbon;
            if (ribbon) {
                ribbon.suspendUpdate();
                ribbon.updateItemsState();
                ribbon.continueUpdate();
            }
            this.loadingPanelManager.statusBarLoadingPanel.setVisible(false);
        }
    };
    RichEditCore.prototype.closeDocument = function () {
        this.selection.onChanged.remove(this.globalEventDispatcher);
        for (var ind = 0; ind < this.modelManager.modelManipulator.modelListeners.length; ind++) {
            if (this.modelManager.modelManipulator.modelListeners[ind] == this.globalEventDispatcher) {
                this.modelManager.modelManipulator.modelListeners.splice(ind, 1);
                break;
            }
        }
        this.barHolder.setEnabled(false);
        if (this.horizontalRulerControl)
            this.horizontalRulerControl.setEnable(false);
        this.layoutFormatterManager.closeDocument();
        this.viewManager.closeDocument();
        this.boxVisualizerManager.closeDocument();
        this.serverDispatcher.reset();
        this.closed = true;
    };
    RichEditCore.prototype.importHtml = function (elements) {
        var _this = this;
        var interval = this.selection.lastSelectedInterval;
        this.beginUpdate();
        var exportedRangeCopy = this.inputController.getExportedRangeCopy();
        var charPropsBundle = this.inputPosition.charPropsBundle;
        var subDocument = this.selection.activeSubDocument;
        this.modelManager.history.beginTransaction();
        command_base_1.CommandBase.addSelectionBefore(this);
        this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, interval), true, true);
        var insertedInterval;
        if (exportedRangeCopy && this.isUsedInnerClipboard(elements))
            insertedInterval = this.importInnerClipboard(exportedRangeCopy, this.selection);
        else {
            insertedInterval = new html_importer_1.HtmlImporter(this.modelManager, this.measurer, new sub_document_1.SubDocumentPosition(this.selection.activeSubDocument, interval.start), elements, charPropsBundle).import();
        }
        var pos = subDocument.positionManager.registerPosition(insertedInterval.end);
        var afterUpdate = function () {
            command_base_1.CommandBase.addSelectionAfter(_this, pos.value);
            subDocument.positionManager.unregisterPosition(pos);
            _this.modelManager.history.endTransaction();
            _this.endUpdate();
        };
        var cmd = this.commandManager.getCommand(client_command_1.RichEditClientCommand.UpdateField);
        if (insertedInterval.length > 0 && this.modelManager.richOptions.fields.updateFieldsOnPaste && cmd.getState().enabled) {
            var params = new update_field_command_1.UpdateFieldCommandParameters(subDocument, [insertedInterval], function () { return afterUpdate(); });
            params.options.updateFillIn = false;
            var opts = new command_base_1.CommandSimpleOptions(this, params);
            cmd.execute(this.commandManager.isPublicApiCall, opts);
        }
        else
            afterUpdate();
    };
    RichEditCore.prototype.importInnerClipboard = function (exportedRangeCopy, selection) {
        var interval = selection.lastSelectedInterval;
        var subDocument = this.selection.activeSubDocument;
        var insertPosition = new sub_document_1.SubDocumentPosition(subDocument, interval.start);
        if (selection.tableInfo.isSelected)
            return exportedRangeCopy.insertToTable(this.modelManager.modelManipulator, insertPosition, selection.tableInfo);
        else
            return exportedRangeCopy.insertTo(this.modelManager.modelManipulator, insertPosition);
    };
    RichEditCore.prototype.onViewTypeChanged = function () {
        this.viewManager.renderer.onViewTypeChanged();
        this.horizontalRulerControl.onViewTypeChanged();
        this.simpleViewCanvasSizeManager.setViewMode(this.innerClientProperties.viewsSettings.isSimpleView);
    };
    RichEditCore.prototype.getModifiedState = function () {
        if (this.serverDispatcher.saveInProgress())
            return json_top_level_enums_1.IsModified.SaveInProgress;
        else if (this.serverDispatcher.wasModifiedOnServer)
            return json_top_level_enums_1.IsModified.True;
        else if (this.lastSavedHistoryItemId != this.modelManager.history.getCurrentItemId())
            return json_top_level_enums_1.IsModified.True;
        return json_top_level_enums_1.IsModified.False;
    };
    RichEditCore.prototype.setModifiedFalse = function () {
        this.lastSavedHistoryItemId = this.modelManager.history.getCurrentItemId();
    };
    RichEditCore.prototype.getGuidParams = function () {
        return { sguid: this.sessionGuid, cguid: this.clientGuid };
    };
    RichEditCore.prototype.isTouchMode = function () {
        return browser_1.Browser.TouchUI && !browser_1.Browser.MSTouchUI;
    };
    RichEditCore.prototype.isRibbon = function (element) {
        return this.owner.isRibbon(element);
    };
    RichEditCore.prototype.isClosed = function () {
        return this.closed;
    };
    RichEditCore.prototype.invalidateLayoutAfterFontsLoaded = function () {
        if (!this.isDisposed && this.measurer && this.layoutFormatterManager && this.layoutFormatterManager.invalidator) {
            this.measurer.clearCache();
            this.layoutFormatterManager.invalidator.onChangedAllLayout();
        }
    };
    RichEditCore.prototype.createViewElement = function (id, element) {
        var viewElement = document.createElement("DIV");
        viewElement.id = id + "_View";
        viewElement.className = "dxreView";
        element.appendChild(viewElement);
        return viewElement;
    };
    RichEditCore.prototype.isUsedInnerClipboard = function (elements) {
        var elem = elements[0];
        return elem && dom_1.DomUtils.isHTMLElementNode(elem) && elem.id == rich_utils_1.RichUtils.getCopyPasteGuid(this.getGuidParams());
    };
    RichEditCore.prototype.getExportDocumentFormat = function () {
        var format = this.documentInfo.documentFormat;
        return format !== undefined && format !== null ? format : document_format_1.DocumentFormat.OpenXml;
    };
    return RichEditCore;
}());
exports.RichEditCore = RichEditCore;
var DocumentInfo = (function () {
    function DocumentInfo(fileName, documentHasSource, documentFormat) {
        if (documentFormat === void 0) { documentFormat = DocumentInfo.defaultDocumentFormat; }
        this._fileName = fileName;
        this._documentFormat = documentFormat;
        this.documentHasSource = documentHasSource;
    }
    Object.defineProperty(DocumentInfo.prototype, "fileName", {
        get: function () { return this._fileName; },
        set: function (val) { this._fileName = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DocumentInfo.prototype, "documentFormat", {
        get: function () { return this._documentFormat; },
        set: function (val) {
            if (typeof val === 'string')
                this._documentFormat = file_name_helper_1.FileNameHelper.convertExtensionToDocumentFormat(val);
            else
                this._documentFormat = val;
        },
        enumerable: true,
        configurable: true
    });
    DocumentInfo.prototype.getFileNameForDownload = function (fileName) {
        if (!string_1.StringUtils.isNullOrEmpty(fileName))
            return fileName;
        return string_1.StringUtils.isNullOrEmpty(this._fileName) ? DocumentInfo.defaultDocumentName : this._fileName;
    };
    DocumentInfo.defaultDocumentName = 'document1';
    DocumentInfo.defaultDocumentFormat = document_format_1.DocumentFormat.OpenXml;
    return DocumentInfo;
}());
exports.DocumentInfo = DocumentInfo;
