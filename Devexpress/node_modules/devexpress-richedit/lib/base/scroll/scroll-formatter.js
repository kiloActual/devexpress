"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var event_dispatcher_1 = require("../../base-utils/event-dispatcher");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var ScrollFormatter = (function (_super) {
    tslib_1.__extends(ScrollFormatter, _super);
    function ScrollFormatter(selection) {
        var _this = _super.call(this) || this;
        _this.onScrollLayoutChanged = new event_dispatcher_1.EventDispatcher();
        _this.selection = selection;
        return _this;
    }
    ScrollFormatter.prototype.NotifyPagesReady = function (_pageChanges) {
        this.process();
    };
    ScrollFormatter.prototype.NotifyFullyFormatted = function (_pageCount) {
        this.process();
    };
    ;
    ScrollFormatter.prototype.NotifyScrollChanged = function () {
        this.process();
    };
    ScrollFormatter.prototype.onUpdateUnlocked = function (_occurredEvents) {
        this.process();
    };
    ScrollFormatter.prototype.process = function () {
        var modelState = this.selection.scrollManager.state;
        if (modelState) {
            this.canvasState = modelState.getCanvasState(this.selection.layout);
            if (this.canvasState || this.selection.layout.isFullyFormatted)
                this.selection.scrollManager.init();
        }
        if (this.isUpdateLocked())
            return;
        if (this.canvasState) {
            this.raiseScrollChanged();
            this.canvasState = null;
        }
    };
    ScrollFormatter.prototype.raiseScrollChanged = function () {
        var _this = this;
        this.onScrollLayoutChanged.listeners.forEach(function (listener) { return listener.NotifyScrollPositionChanged(_this.canvasState); });
    };
    return ScrollFormatter;
}(batch_updatable_1.BatchUpdatableObject));
exports.ScrollFormatter = ScrollFormatter;
