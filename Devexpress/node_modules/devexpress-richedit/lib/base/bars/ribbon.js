"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../core/model/changes/enums");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var client_command_1 = require("../commands/client-command");
var base_1 = require("./base");
var RibbonEventType;
(function (RibbonEventType) {
    RibbonEventType[RibbonEventType["None"] = 0] = "None";
    RibbonEventType[RibbonEventType["FullReset"] = 1] = "FullReset";
    RibbonEventType[RibbonEventType["CheckSelectionChange"] = 2] = "CheckSelectionChange";
    RibbonEventType[RibbonEventType["ActivateHeaderFooter"] = 4] = "ActivateHeaderFooter";
})(RibbonEventType = exports.RibbonEventType || (exports.RibbonEventType = {}));
var RibbonBarBase = (function (_super) {
    tslib_1.__extends(RibbonBarBase, _super);
    function RibbonBarBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selection = null;
        return _this;
    }
    RibbonBarBase.prototype.updateContextItem = function (commandKey) {
        var command = this.core.commandManager.getCommand(commandKey);
        if (command)
            this.setContextItemVisible(commandKey, command.getState().visible);
    };
    RibbonBarBase.prototype.forceUpdate = function (queryCommands) {
        if (this.isUpdateLocked())
            this.registerOccurredEvent(RibbonEventType.FullReset);
        else
            this.updateItemsState(queryCommands);
    };
    RibbonBarBase.prototype.checkActivateHeaderFooter = function (selection) {
        return selection.prevState.intervalsInfo.subDocument != selection.currState.intervalsInfo.subDocument &&
            selection.currState.intervalsInfo.subDocument.isHeaderFooter();
    };
    RibbonBarBase.prototype.activateHeaderFooter = function () {
        this.setContextItemVisible(client_command_1.RichEditClientCommand.ContextItem_HeadersFooters, true);
        this.activateContextItem(client_command_1.RichEditClientCommand.ContextItem_HeadersFooters);
    };
    RibbonBarBase.prototype.onUpdateUnlocked = function (occurredEvents) {
        this.applyEvent(occurredEvents);
    };
    RibbonBarBase.prototype.modelChanged = function (change) {
        var occurredEvents = this.getModelChangeEvent(change);
        if (this.isUpdateLocked())
            this.registerOccurredEvent(occurredEvents);
        else
            this.applyEvent(occurredEvents);
    };
    RibbonBarBase.prototype.NotifySelectionChanged = function (selection) {
        this.selection = selection;
        if (this.isUpdateLocked())
            this.registerOccurredEvent(RibbonEventType.CheckSelectionChange);
        else
            this.applyEvent(this.getSelectionChangeEvent());
    };
    RibbonBarBase.prototype.applyEvent = function (occurredEvents) {
        if (!this.updateEnabled)
            return;
        var flag = new flag_1.Flag(occurredEvents);
        if (flag.get(RibbonEventType.CheckSelectionChange))
            flag.add(this.getSelectionChangeEvent());
        if (flag.get(RibbonEventType.ActivateHeaderFooter))
            this.activateHeaderFooter();
        if (flag.get(RibbonEventType.FullReset))
            this.updateItemsState();
    };
    RibbonBarBase.prototype.getSelectionChangeEvent = function () {
        var flag = new flag_1.Flag(RibbonEventType.None);
        if (!this.selection || this.selection.shouldResetInputPosition())
            flag.set(RibbonEventType.FullReset, true);
        if (this.selection && this.checkActivateHeaderFooter(this.selection)) {
            flag.set(RibbonEventType.ActivateHeaderFooter, true);
            flag.set(RibbonEventType.FullReset, true);
        }
        return flag.getValue();
    };
    RibbonBarBase.prototype.getModelChangeEvent = function (change) {
        switch (change.type) {
            case enums_1.ModelChangeType.DifferentOddAndEvenPages:
            case enums_1.ModelChangeType.PageColor:
            case enums_1.ModelChangeType.DefaultTabWidth:
            case enums_1.ModelChangeType.HeaderFooterCreated:
            case enums_1.ModelChangeType.HeaderFooterIndexChanged:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.LoadFontInfo:
                return RibbonEventType.FullReset;
            case enums_1.ModelChangeType.SectionFormattingChanged:
                return RibbonEventType.FullReset;
            case enums_1.ModelChangeType.CreateStyleLink:
            case enums_1.ModelChangeType.DeleteStyleLink:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.AbstractNumberingListAdded:
            case enums_1.ModelChangeType.AbstractNumberingListDeleted:
            case enums_1.ModelChangeType.NumberingListAdded:
            case enums_1.ModelChangeType.NumberingListDeleted:
            case enums_1.ModelChangeType.ListLevelPropertyChanged:
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged:
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged:
            case enums_1.ModelChangeType.IOverrideListLevelChanged:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.BookmarkCreated:
            case enums_1.ModelChangeType.BookmarkDeleted:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.TabInserted:
            case enums_1.ModelChangeType.TabDeleted:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.LoadPicturesInfo:
            case enums_1.ModelChangeType.InlinePicturesUpdated:
            case enums_1.ModelChangeType.InlinePictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged:
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged:
                return RibbonEventType.FullReset;
            case enums_1.ModelChangeType.FieldInserted:
            case enums_1.ModelChangeType.FieldDeleted:
            case enums_1.ModelChangeType.HyperlinkInfoChanged:
            case enums_1.ModelChangeType.FieldsShowCodeChanged:
                return RibbonEventType.None;
            case enums_1.ModelChangeType.SimpleRunInserted:
            case enums_1.ModelChangeType.TextBufferChanged:
            case enums_1.ModelChangeType.ParagraphInserted:
            case enums_1.ModelChangeType.SectionInserted:
            case enums_1.ModelChangeType.AnchoredTextBoxInserted:
            case enums_1.ModelChangeType.AnchorObjectRemoved:
            case enums_1.ModelChangeType.IntervalRemoved:
            case enums_1.ModelChangeType.ParagraphMerged:
            case enums_1.ModelChangeType.SectionMerged:
                return RibbonEventType.FullReset;
            case enums_1.ModelChangeType.CharacterFormattingChanged:
            case enums_1.ModelChangeType.CharacterPropertiesChanged:
            case enums_1.ModelChangeType.ParagraphFormattingChanged:
            case enums_1.ModelChangeType.ParagraphPropertiesChanged:
            case enums_1.ModelChangeType.ParagraphAndCharacterMergedPropertiesReset:
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged:
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged:
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged:
            case enums_1.ModelChangeType.ShapeChanged:
            case enums_1.ModelChangeType.ShapePropertyChanged:
            case enums_1.ModelChangeType.CharacterStyleApplied:
            case enums_1.ModelChangeType.ParagraphStyleApplied:
            case enums_1.ModelChangeType.TableStyleChanged:
            case enums_1.ModelChangeType.ParagraphNumberingListChanged:
                return RibbonEventType.FullReset;
            case enums_1.ModelChangeType.TableCreated:
            case enums_1.ModelChangeType.TableRemoved:
            case enums_1.ModelChangeType.TableStartPositionShifted:
            case enums_1.ModelChangeType.TableCellPropertyChanged:
            case enums_1.ModelChangeType.TablePropertyChanged:
            case enums_1.ModelChangeType.TableRowPropertyChanged:
            case enums_1.ModelChangeType.TableCellSplittedHorizontally:
            case enums_1.ModelChangeType.TableCellMergedHorizontally:
            case enums_1.ModelChangeType.TableRowInserted:
            case enums_1.ModelChangeType.TableRowRemoved:
            case enums_1.ModelChangeType.TableCellRemoved:
            case enums_1.ModelChangeType.TableCellInserted:
                return RibbonEventType.FullReset;
            default:
                return RibbonEventType.None;
        }
    };
    return RibbonBarBase;
}(base_1.BarBase));
exports.RibbonBarBase = RibbonBarBase;
