"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var font_info_1 = require("../../core/model/fonts/font-info");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var common_1 = require("@devexpress/utils/lib/utils/common");
var client_command_1 = require("../commands/client-command");
var BarBase = (function (_super) {
    tslib_1.__extends(BarBase, _super);
    function BarBase(owner) {
        var _this = _super.call(this) || this;
        _this.updateEnabled = true;
        _this.owner = owner;
        return _this;
    }
    Object.defineProperty(BarBase.prototype, "isInitialized", {
        get: function () { return !!this.core; },
        enumerable: true,
        configurable: true
    });
    BarBase.prototype.initialize = function (core) {
        this.core = core;
    };
    BarBase.prototype.updateItemsState = function (queryCommands) {
        if (!this.isInitialized || this.isUpdateLocked() || !this.isVisible())
            return;
        if (queryCommands === undefined) {
            for (var _i = 0, _a = this.getCommandKeys(); _i < _a.length; _i++) {
                var commandKey = _a[_i];
                this.updateBarItem(commandKey);
            }
            for (var _b = 0, _c = this.getContextKeys(); _b < _c.length; _b++) {
                var commandKey = _c[_b];
                this.updateContextItem(commandKey);
            }
        }
        else {
            for (var _d = 0, _e = this.getCommandKeys(); _d < _e.length; _d++) {
                var commandKey = _e[_d];
                if (queryCommands[commandKey] !== undefined)
                    this.updateBarItem(commandKey);
            }
            for (var _f = 0, _g = this.getContextKeys(); _f < _g.length; _f++) {
                var commandKey = _g[_f];
                if (queryCommands[commandKey] !== undefined)
                    this.updateContextItem(commandKey);
            }
        }
    };
    BarBase.prototype.updateBarItem = function (commandKey) {
        var coreCommandId = commandKey;
        var command = this.core.commandManager.getCommand(coreCommandId);
        if (command) {
            var commandState = command.getState();
            this.setItemVisible(coreCommandId, commandState.visible);
            if (commandState.visible) {
                this.setItemEnabled(commandKey, commandState.enabled);
                if (!commandState.denyUpdateValue) {
                    var itemValue = this.getItemValue(commandState);
                    if (commandState.items)
                        this.setItemSubItems(coreCommandId, commandState.items);
                    this.setItemValue(coreCommandId, itemValue);
                }
            }
        }
        else
            this.setItemEnabled(commandKey, this.core.commandManager.commandIsEnabled(commandKey));
    };
    BarBase.prototype.raiseBarCommandExecuted = function (command, parameter) {
        var _a;
        var commandId = parseInt(command);
        if (!isNaN(commandId) && client_command_1.RichEditClientCommand[commandId] !== undefined) {
            var executeResult = this.core.commandManager.getCommand(commandId)
                .execute(this.core.commandManager.isPublicApiCall, parameter);
            if (!executeResult)
                this.updateItemsState((_a = {}, _a[commandId] = true, _a));
        }
        else
            this.owner.raiseCustomCommandExecuted(command, parameter);
        this.owner.Focus();
    };
    BarBase.prototype.isVisible = function () { return true; };
    BarBase.prototype.setItemSubItems = function (_key, _subItems) { };
    BarBase.prototype.setItemValue = function (_key, _value) { };
    BarBase.prototype.getContextKeys = function () { return []; };
    BarBase.prototype.updateContextItem = function (_commandKey) { };
    BarBase.prototype.getItemValue = function (state) {
        if (common_1.isDefined(state.checked))
            return state.checked;
        var value = state.value;
        return value instanceof font_info_1.FontInfo ? value.name : value;
    };
    return BarBase;
}(batch_updatable_1.BatchUpdatableObject));
exports.BarBase = BarBase;
