"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_properties_history_items_1 = require("../../core/model/history/items/list-level-properties-history-items");
var insert_text_manipulator_params_1 = require("../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var numbering_list_1 = require("../../core/model/numbering-lists/numbering-list");
var rich_utils_1 = require("../../core/model/rich-utils");
var run_type_1 = require("../../core/model/runs/run-type");
var sub_document_1 = require("../../core/model/sub-document");
var input_position_base_1 = require("../../core/selection/input-position-base");
var selection_intervals_info_1 = require("../../core/selection/selection-intervals-info");
var helpers_1 = require("../../core/spelling/helpers");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var key_1 = require("@devexpress/utils/lib/utils/key");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var client_command_1 = require("../commands/client-command");
var command_base_1 = require("../commands/command-base");
var command_states_1 = require("../commands/command-states");
var selection_history_item_1 = require("../model/history/selection/selection-history-item");
var AutoCorrectProviderBase = (function () {
    function AutoCorrectProviderBase(control) {
        this.control = control;
    }
    Object.defineProperty(AutoCorrectProviderBase.prototype, "subDocument", {
        get: function () { return this.control.selection.activeSubDocument; },
        enumerable: true,
        configurable: true
    });
    AutoCorrectProviderBase.prototype.revise = function () {
        var _this = this;
        var pos = this.control.selection.lastSelectedInterval.start;
        var lastInsertedChar = this.control.selection.activeSubDocument.getText(new fixed_1.FixedInterval(pos - 1, 1));
        if (this.isTriggerChar(lastInsertedChar)) {
            var wordStartPos = helpers_1.ModelWordPositionHelper.getWordStartPositionByCharCondition(this.control.selection.activeSubDocument, pos - 1, function (char) { return _this.isSeparator(char); });
            var wordEndPos = (this.includeTriggerChar(lastInsertedChar) ? pos : pos - 1) - wordStartPos;
            var interval = new fixed_1.FixedInterval(wordStartPos, wordEndPos);
            var text = this.control.selection.activeSubDocument.getText(interval);
            var selectionStateInfo = null;
            if (!this.includeTriggerChar(lastInsertedChar))
                selectionStateInfo = this.control.selection.getFloatingState();
            var autoCorrectResult = this.reviseCore(text, interval);
            if (selectionStateInfo)
                if (autoCorrectResult)
                    this.control.selection.restoreFloatingState(selectionStateInfo);
                else
                    selectionStateInfo.finalize();
            return autoCorrectResult;
        }
        return false;
    };
    AutoCorrectProviderBase.prototype.isSeparator = function (char) {
        return !rich_utils_1.RichUtils.isAlphanumeric.test(char);
    };
    AutoCorrectProviderBase.prototype.isTriggerChar = function (char) {
        return this.isSeparator(char);
    };
    AutoCorrectProviderBase.prototype.includeTriggerChar = function (_char) {
        return false;
    };
    return AutoCorrectProviderBase;
}());
exports.AutoCorrectProviderBase = AutoCorrectProviderBase;
var EventAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(EventAutoCorrectProvider, _super);
    function EventAutoCorrectProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EventAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        this.control.modelManager.history.beginTransaction();
        var handled = this.control.clientSideEvents.raiseAutoCorrect(text, interval);
        this.control.modelManager.history.endTransaction();
        return handled;
    };
    EventAutoCorrectProvider.prototype.isTriggerChar = function (_char) {
        return true;
    };
    EventAutoCorrectProvider.prototype.includeTriggerChar = function (_char) {
        return true;
    };
    return EventAutoCorrectProvider;
}(AutoCorrectProviderBase));
exports.EventAutoCorrectProvider = EventAutoCorrectProvider;
var TwoInitialCapitalsAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(TwoInitialCapitalsAutoCorrectProvider, _super);
    function TwoInitialCapitalsAutoCorrectProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TwoInitialCapitalsAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        if (text.length > 2 && text[0] === text[0].toUpperCase() && text[1] === text[1].toUpperCase()) {
            for (var i = 2; i < text.length; i++)
                if (text[i] !== text[i].toLowerCase() || text[i] == text[i].toUpperCase())
                    return false;
            var replaceWith = text.substring(0, 1) + text[1].toLowerCase() + text.slice(2);
            this.control.modelManager.history.beginTransaction();
            this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.control.selection.activeSubDocument, interval), false, false);
            this.control.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.control.selection.activeSubDocument, interval.start), new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this.control.selection.activeSubDocument, interval.start))
                .charPropsBundle, run_type_1.RunType.TextRun, replaceWith));
            this.control.modelManager.history.endTransaction();
            return true;
        }
        return false;
    };
    return TwoInitialCapitalsAutoCorrectProvider;
}(AutoCorrectProviderBase));
exports.TwoInitialCapitalsAutoCorrectProvider = TwoInitialCapitalsAutoCorrectProvider;
var BulletedListAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(BulletedListAutoCorrectProvider, _super);
    function BulletedListAutoCorrectProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.numberingRegEx = /^[0-9]+[\.\)]$/;
        return _this;
    }
    BulletedListAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        var subDocument = this.control.selection.activeSubDocument;
        var position = interval.end;
        var paragraphIndex = subDocument.getParagraphIndexByPosition(position);
        var paragraph = subDocument.paragraphs[paragraphIndex];
        if (paragraph.isInList())
            return false;
        var parStartPosition = paragraph.startLogPosition.value;
        if (parStartPosition !== interval.start)
            return false;
        var targetNumberingListType = this.getTargetNumberingListType(text);
        if (targetNumberingListType === undefined)
            return false;
        this.control.modelManager.history.beginTransaction();
        this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, fixed_1.FixedInterval.fromPositions(parStartPosition, position + 1)), false, false);
        this.control.selection.changeState(function (newState) { return newState.setPosition(parStartPosition); });
        if (targetNumberingListType === numbering_list_1.NumberingType.Bullet)
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleBulletedListItem).execute(this.control.commandManager.isPublicApiCall);
        else {
            var targetIndex = parseInt(text.slice(0, -1));
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleNumberingListItem).execute(this.control.commandManager.isPublicApiCall, targetIndex);
            var numberingListIndex = this.control.modelManager.model.numberingLists.length - 1;
            var separator = text[text.length - 1];
            for (var i = 0, length = this.control.modelManager.model.numberingLists[numberingListIndex].levels.length; i < length; i++)
                this.control.modelManager.history.addAndRedo(new list_level_properties_history_items_1.ListLevelDisplayFormatStringHistoryItem(this.control.modelManager.modelManipulator, false, numberingListIndex, i, "{" + i + "}" + separator));
        }
        this.control.modelManager.history.endTransaction();
        return true;
    };
    BulletedListAutoCorrectProvider.prototype.isSeparator = function (char) {
        return rich_utils_1.RichUtils.isWhitespace.test(char);
    };
    BulletedListAutoCorrectProvider.prototype.isTriggerChar = function (char) {
        return char.charCodeAt(0) != key_1.KeyCode.Enter && rich_utils_1.RichUtils.isWhitespace.test(char);
    };
    BulletedListAutoCorrectProvider.prototype.getTargetNumberingListType = function (paragraphText) {
        if (paragraphText.length === 1 && paragraphText.indexOf("*") === 0)
            return numbering_list_1.NumberingType.Bullet;
        if (this.numberingRegEx.test(paragraphText))
            return numbering_list_1.NumberingType.Simple;
        return undefined;
    };
    return BulletedListAutoCorrectProvider;
}(AutoCorrectProviderBase));
exports.BulletedListAutoCorrectProvider = BulletedListAutoCorrectProvider;
var UrlAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(UrlAutoCorrectProvider, _super);
    function UrlAutoCorrectProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.urlRegex = /^(?:[a-z][\w-]+:(?:\/{1,3}([^./]*:[^./]*@){0,1})|www\d{0,3}[.]|ftp[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\([^\s<>]*\))+(?:\([^\s<>]*\)|[^\s`!()\[\]{};:'"".,<>?«»“”‘’])$/i;
        _this.emailRegex = /^(mailto:)?[-\w!#$%&'*+/=?^_`{|}~]+(?:\.[-\w!#$%&'*+/=?^_`{|}~]+)*@(?:\w+([-\w]*\w)\.)[\w]+$/;
        _this.localRegex = /^(([a-zA-Z][:][\\])|(\\\\))(((?![<>:"\\|?*]).)+((?![ .])\\)?)*$/;
        return _this;
    }
    UrlAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        if (this.urlRegex.test(text) || this.emailRegex.test(text) || this.localRegex.test(text)) {
            this.control.modelManager.history.beginTransaction();
            this.control.modelManager.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.control.modelManager.modelManipulator, this.control.selection, this.control.selection.getState(), this.control.selection.getState().setIntervals([interval])));
            var command = this.control.commandManager
                .getCommand(client_command_1.RichEditClientCommand.ShowHyperlinkForm);
            var options = new command_base_1.CommandOptions(this.control).setIntervalsInfo(selection_intervals_info_1.SelectionIntervalsInfo.fromInterval(this.subDocument, interval));
            var state = command.getState(options);
            var parameters = command.createParameters(options);
            var initParameters = parameters.clone();
            parameters.text = text;
            parameters.url = this.createNavigateUri(text);
            var result = command.applyParameters(new command_states_1.IntervalCommandState(state.enabled, interval), parameters, initParameters);
            this.control.modelManager.history.endTransaction();
            return result;
        }
        return false;
    };
    UrlAutoCorrectProvider.prototype.createNavigateUri = function (url) {
        if (url.indexOf(":") == -1 && url.indexOf("@") > 0)
            return "mailto:" + url;
        if (url.indexOf("www") == 0)
            return "http://" + url;
        if (url.indexOf("\\") == 0)
            return "file://" + url.replace(/\\/g, "\\\\");
        return url;
    };
    UrlAutoCorrectProvider.prototype.isSeparator = function (char) {
        return rich_utils_1.RichUtils.isWhitespace.test(char);
    };
    return UrlAutoCorrectProvider;
}(AutoCorrectProviderBase));
exports.UrlAutoCorrectProvider = UrlAutoCorrectProvider;
var TableBasedAutoCorrectProviderBase = (function (_super) {
    tslib_1.__extends(TableBasedAutoCorrectProviderBase, _super);
    function TableBasedAutoCorrectProviderBase(control, settings) {
        var _this = _super.call(this, control) || this;
        _this.replaceInfoCollection = [];
        _this.caseSensitiveReplacement = settings.caseSensitiveReplacement;
        settings.replaceInfoCollection.sort(function (a, b) { return _this.compare(a.replace, b.replace); });
        _this.initReplaceInfo(settings.replaceInfoCollection);
        return _this;
    }
    TableBasedAutoCorrectProviderBase.prototype.compare = function (origin, target) {
        if (!this.caseSensitiveReplacement) {
            origin = origin.toLocaleLowerCase();
            target = target.toLocaleLowerCase();
        }
        return origin === target ? 0 : (origin < target ? -1 : 1);
    };
    return TableBasedAutoCorrectProviderBase;
}(AutoCorrectProviderBase));
exports.TableBasedAutoCorrectProviderBase = TableBasedAutoCorrectProviderBase;
var TableBasedSimpleAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(TableBasedSimpleAutoCorrectProvider, _super);
    function TableBasedSimpleAutoCorrectProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBasedSimpleAutoCorrectProvider.prototype.initReplaceInfo = function (replaceInfoCollection) {
        var _this = this;
        list_1.ListUtils.forEach(replaceInfoCollection, function (val) {
            if (rich_utils_1.RichUtils.isAlphanumeric.test(val.replace))
                _this.replaceInfoCollection.push(val);
        });
    };
    TableBasedSimpleAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        var _this = this;
        var replaceWordIndex = search_1.SearchUtils.binaryIndexOf(this.replaceInfoCollection, function (a) { return _this.compare(a.replace, text); });
        if (replaceWordIndex >= 0) {
            var replaceWith = this.replaceInfoCollection[replaceWordIndex].with;
            var charPropsBundle = this.control.inputPosition.charPropsBundle;
            this.control.modelManager.history.beginTransaction();
            command_base_1.CommandBase.addSelectionBefore(this.control);
            this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, interval), true, false);
            var result = this.control.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, interval.start), charPropsBundle, run_type_1.RunType.TextRun, replaceWith));
            command_base_1.CommandBase.addSelectionAfter(this.control, result.insertedInterval.end + 1);
            this.control.modelManager.history.endTransaction();
            return true;
        }
        return false;
    };
    return TableBasedSimpleAutoCorrectProvider;
}(TableBasedAutoCorrectProviderBase));
exports.TableBasedSimpleAutoCorrectProvider = TableBasedSimpleAutoCorrectProvider;
var TableBasedCompositeAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(TableBasedCompositeAutoCorrectProvider, _super);
    function TableBasedCompositeAutoCorrectProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBasedCompositeAutoCorrectProvider.prototype.initReplaceInfo = function (replaceInfoCollection) {
        var _this = this;
        list_1.ListUtils.forEach(replaceInfoCollection, function (val) {
            var lastSymbol = val.replace[val.replace.length - 1];
            if (!rich_utils_1.RichUtils.isAlphanumeric.test(val.replace) && rich_utils_1.RichUtils.isAlphanumeric.test(lastSymbol))
                _this.replaceInfoCollection.push(val);
        });
    };
    TableBasedCompositeAutoCorrectProvider.prototype.reviseCore = function (text, interval) {
        for (var _i = 0, _a = this.replaceInfoCollection; _i < _a.length; _i++) {
            var val = _a[_i];
            if (this.isEndOf(val.replace, text)) {
                var diff = val.replace.length - text.length;
                var start = interval.start - diff;
                if (start >= 0) {
                    var intervalToCheck = new fixed_1.FixedInterval(start, interval.end - start);
                    var textToCheck = this.control.selection.activeSubDocument.getText(intervalToCheck);
                    if (this.isEndOf(val.replace, textToCheck)) {
                        var charPropsBundle = this.control.inputPosition.charPropsBundle;
                        this.control.modelManager.history.beginTransaction();
                        this.control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, intervalToCheck), true, false);
                        var result = this.control.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, intervalToCheck.start), charPropsBundle, run_type_1.RunType.TextRun, val.with));
                        this.control.modelManager.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(this.control.modelManager.modelManipulator, this.control.selection, this.control.selection.getState(), this.control.selection.getState().setPosition(result.insertedInterval.end)));
                        this.control.modelManager.history.endTransaction();
                        return true;
                    }
                }
            }
        }
        return false;
    };
    TableBasedCompositeAutoCorrectProvider.prototype.isEndOf = function (origin, target) {
        return this.compare(origin.substr(target.length * -1, target.length), target) == 0;
    };
    return TableBasedCompositeAutoCorrectProvider;
}(TableBasedAutoCorrectProviderBase));
exports.TableBasedCompositeAutoCorrectProvider = TableBasedCompositeAutoCorrectProvider;
var TableBasedImmediateAutoCorrectProvider = (function (_super) {
    tslib_1.__extends(TableBasedImmediateAutoCorrectProvider, _super);
    function TableBasedImmediateAutoCorrectProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBasedImmediateAutoCorrectProvider.prototype.initReplaceInfo = function (replaceInfoCollection) {
        var _this = this;
        this.triggeredChar = [];
        list_1.ListUtils.forEach(replaceInfoCollection, function (val) {
            var lastSymbol = val.replace[val.replace.length - 1];
            if (!rich_utils_1.RichUtils.isAlphanumeric.test(lastSymbol)) {
                _this.triggeredChar.push(lastSymbol);
                _this.replaceInfoCollection.push(val);
            }
        });
    };
    TableBasedImmediateAutoCorrectProvider.prototype.isTriggerChar = function (char) {
        return list_1.ListUtils.unsafeAnyOf(this.triggeredChar, function (currVal) { return currVal == char; });
    };
    TableBasedImmediateAutoCorrectProvider.prototype.includeTriggerChar = function (_char) {
        return true;
    };
    return TableBasedImmediateAutoCorrectProvider;
}(TableBasedCompositeAutoCorrectProvider));
exports.TableBasedImmediateAutoCorrectProvider = TableBasedImmediateAutoCorrectProvider;
