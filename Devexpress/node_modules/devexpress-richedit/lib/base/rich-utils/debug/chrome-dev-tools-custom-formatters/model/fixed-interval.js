"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var base_formatter_1 = require("../base-formatter");
var CCF_FixedInterval = (function (_super) {
    tslib_1.__extends(CCF_FixedInterval, _super);
    function CCF_FixedInterval() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_FixedInterval.prototype.isHandleObject = function (obj) {
        return obj instanceof fixed_1.FixedInterval;
    };
    CCF_FixedInterval.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("", "[" + this.curr.start + ", " + this.curr.end + "]"),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_FixedInterval.prototype.availableFullDescription = function (_config) {
        return this.curr.length > 1;
    };
    CCF_FixedInterval.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("start", this.curr.start),
            new pair_1.Pair("end", this.curr.end),
            new pair_1.Pair("length", this.curr.length),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_FixedInterval._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_FixedInterval());
    return CCF_FixedInterval;
}(base_formatter_1.BaseFormatter));
exports.CCF_FixedInterval = CCF_FixedInterval;
