"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_request_1 = require("../../../../core/model/json/command-request");
var command_type_1 = require("../../../../core/model/json/command-type");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("./base-formatter");
var CCF_ServerCommandRequest = (function (_super) {
    tslib_1.__extends(CCF_ServerCommandRequest, _super);
    function CCF_ServerCommandRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_ServerCommandRequest.prototype.isHandleObject = function (obj) {
        return obj instanceof command_request_1.ServerCommandRequest;
    };
    CCF_ServerCommandRequest.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("type", command_type_1.CommandType[this.curr.type] + "(" + this.curr.type + ")")
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_ServerCommandRequest.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_ServerCommandRequest.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("type", command_type_1.CommandType[this.curr.type] + "(" + this.curr.type + ")"),
            new pair_1.Pair("subDocId", this.curr.subDocumentId),
            new pair_1.Pair("id", this.curr.id),
            new pair_1.Pair("processOnCallback", this.curr.processOnCallback),
            new pair_1.Pair("params", this.curr.params)
        ];
        if (this.curr instanceof command_request_1.EditCommandRequest) {
            list.push(new pair_1.Pair("editIncId", this.curr.editIncId));
            if (this.curr instanceof command_request_1.EditTextBufferCommandRequest)
                list.push(new pair_1.Pair("text", this.curr.text));
            if (this.curr instanceof command_request_1.ClientServerTextBufferChangedCommandRequest)
                list.push(new pair_1.Pair("text", this.curr.state));
        }
        else
            list.push(new pair_1.Pair("fontInfoCacheLength", this.curr.fontInfoCacheLength));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_ServerCommandRequest._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_ServerCommandRequest());
    return CCF_ServerCommandRequest;
}(base_formatter_1.BaseFormatter));
exports.CCF_ServerCommandRequest = CCF_ServerCommandRequest;
