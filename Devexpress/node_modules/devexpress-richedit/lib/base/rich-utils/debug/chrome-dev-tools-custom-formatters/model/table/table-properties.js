"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_properties_1 = require("../../../../../../core/model/tables/properties/table-properties");
var table_base_structures_1 = require("../../../../../../core/model/tables/secondary-structures/table-base-structures");
var log_1 = require("../../../../../../core/rich-utils/debug/logger/base-logger/log");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../../base-formatter");
var CCF_TableProperties = (function (_super) {
    tslib_1.__extends(CCF_TableProperties, _super);
    function CCF_TableProperties() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_TableProperties.prototype.isHandleObject = function (obj) {
        return obj instanceof table_properties_1.TableProperties;
    };
    CCF_TableProperties.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("", table_base_structures_1.TableLayoutType[this.curr.layoutType]),
            new pair_1.Pair("indent", this.curr.indent),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_TableProperties.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_TableProperties.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("layoutType", table_base_structures_1.TableLayoutType[this.curr.layoutType]),
            new pair_1.Pair("indent", this.curr.indent),
            new pair_1.Pair("mask", log_1.Log.mask(table_properties_1.TablePropertiesMask, this.curr.mask, table_properties_1.TablePropertiesMask.UseNone)),
        ];
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing))
            list.push(new pair_1.Pair("cellSpacing", this.curr.cellSpacing));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseLeftMargin))
            list.push(new pair_1.Pair("cellMargins.left", this.curr.cellMargins.left));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseRightMargin))
            list.push(new pair_1.Pair("cellMargins.right", this.curr.cellMargins.right));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseTopMargin))
            list.push(new pair_1.Pair("cellMargins.top", this.curr.cellMargins.top));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseBottomMargin))
            list.push(new pair_1.Pair("cellMargins.bottom", this.curr.cellMargins.bottom));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseLeftBorder))
            list.push(new pair_1.Pair("borders.leftBorder", this.curr.borders.leftBorder));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseRightBorder))
            list.push(new pair_1.Pair("borders.rightBorder", this.curr.borders.rightBorder));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseTopBorder))
            list.push(new pair_1.Pair("borders.topBorder", this.curr.borders.topBorder));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseBottomBorder))
            list.push(new pair_1.Pair("borders.bottomBorder", this.curr.borders.bottomBorder));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseShadingInfoIndex))
            list.push(new pair_1.Pair("backgroundColor", base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.shadingInfo.getActualColor(this.model.colorProvider))));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseTableAlignment))
            list.push(new pair_1.Pair("tableRowAlignment", table_base_structures_1.TableRowAlignment[this.curr.tableRowAlignment]));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseTableStyleColBandSize))
            list.push(new pair_1.Pair("tableStyleColumnBandSize", this.curr.tableStyleColumnBandSize));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseTableStyleRowBandSize))
            list.push(new pair_1.Pair("tableStyleRowBandSize", this.curr.tableStyleRowBandSize));
        if (this.curr.getUseValue(table_properties_1.TablePropertiesMask.UseAvoidDoubleBorders))
            list.push(new pair_1.Pair("avoidDoubleBorders", this.curr.avoidDoubleBorders));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_TableProperties._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_TableProperties());
    return CCF_TableProperties;
}(base_formatter_1.BaseFormatter));
exports.CCF_TableProperties = CCF_TableProperties;
