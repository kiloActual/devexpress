"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inline_picture_run_1 = require("../../../../../core/model/runs/inline-picture-run");
var run_base_1 = require("../../../../../core/model/runs/run-base");
var run_type_1 = require("../../../../../core/model/runs/run-type");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var base_formatter_1 = require("../base-formatter");
var short_string_1 = require("../short-string");
var CCF_RunBase = (function (_super) {
    tslib_1.__extends(CCF_RunBase, _super);
    function CCF_RunBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_RunBase.prototype.isHandleObject = function (obj) {
        return obj instanceof run_base_1.RunBase;
    };
    CCF_RunBase.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("", run_type_1.RunType[this.curr.getType()]),
            new pair_1.Pair("", "[" + this.curr.startOffset + ", " + (this.curr.startOffset + this.curr.getLength()) + "]"),
        ];
        if (this.curr.getType() == run_type_1.RunType.TextRun)
            list.push(new pair_1.Pair("", new short_string_1.ShortString(this.getText())));
        if (this.curr.getType() == run_type_1.RunType.AnchoredPictureRun || this.curr.getType() == run_type_1.RunType.InlinePictureRun) {
            var r = this.curr;
            var size = r.size.actualSize;
            list.push(new pair_1.Pair("", this.getPictureNode(r.cacheInfo.currId, size)));
        }
        if (this.curr.getType() == run_type_1.RunType.AnchoredTextBoxRun)
            list.push(new pair_1.Pair("txt", this.getSubDocumentText(this.curr.subDocId)));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_RunBase.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_RunBase.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("type", run_type_1.RunType[this.curr.getType()]),
            new pair_1.Pair("offset", this.curr.startOffset),
            new pair_1.Pair("endOffset", this.curr.startOffset + this.curr.getLength()),
            new pair_1.Pair("length", this.curr.getLength()),
            new pair_1.Pair("maskedCharacterProperties", this.curr.maskedCharacterProperties),
            new pair_1.Pair("mergedCharacterProperies", this.curr.getCharacterMergedProperties()),
            new pair_1.Pair("charStyle", this.curr.characterStyle),
            new pair_1.Pair("paragraph", this.curr.paragraph),
        ];
        switch (this.curr.getType()) {
            case run_type_1.RunType.TextRun:
                list.push(new pair_1.Pair("text", new short_string_1.ShortString(this.getText())));
                break;
            case run_type_1.RunType.InlinePictureRun: {
                list.push(new pair_1.Pair("nextPublicAPIId", inline_picture_run_1.InlinePictureRun.nextPublicAPIId));
                this.addPicRunInfo(list);
                break;
            }
            case run_type_1.RunType.AnchoredPictureRun: {
                this.addPicRunInfo(list);
                this.addAnchorInfo(list);
                break;
            }
            case run_type_1.RunType.InlineTextBoxRun: {
                var r_1 = this.curr;
                this.addTextBoxRunInfo(list);
                list.push(new pair_1.Pair("size", r_1.size));
                var subDoc = this.model.subDocuments[r_1.subDocId];
                list.push(new pair_1.Pair("textOfInnerSubDocument", new short_string_1.ShortString(subDoc.getText(new fixed_1.FixedInterval(0, subDoc.getDocumentEndPosition())))));
                break;
            }
            case run_type_1.RunType.AnchoredTextBoxRun:
                var r = this.curr;
                this.addTextBoxRunInfo(list);
                this.addAnchorInfo(list);
                list.push(new pair_1.Pair("size", r.size));
                list.push(new pair_1.Pair("textOfInnerSubDocument", this.getSubDocumentText(r.subDocId)));
                break;
            case run_type_1.RunType.FieldCodeEndRun:
                break;
            case run_type_1.RunType.FieldCodeStartRun:
                break;
            case run_type_1.RunType.FieldResultEndRun:
                break;
            case run_type_1.RunType.EndNoteRun:
            case run_type_1.RunType.FootNoteRun:
            case run_type_1.RunType.NoteSeparatorRun:
            case run_type_1.RunType.NoteContinuationSeparatorRun:
                break;
            case run_type_1.RunType.LayoutDependentRun:
                break;
            case run_type_1.RunType.ParagraphRun:
                break;
            case run_type_1.RunType.SectionRun:
                break;
            case run_type_1.RunType.Undefined:
                break;
            default: throw new Error(errors_1.Errors.NotImplemented);
        }
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_RunBase.prototype.addPicRunInfo = function (list) {
        var r = this.curr;
        list.push(new pair_1.Pair("size", r.size));
        list.push(new pair_1.Pair("cacheInfo", r.cacheInfo));
        list.push(new pair_1.Pair("shape", r.shape));
        list.push(new pair_1.Pair("", this.getPictureNode(r.cacheInfo.currId, r.size.actualSize)));
    };
    CCF_RunBase.prototype.addTextBoxRunInfo = function (list) {
        var r = this.curr;
        list.push(new pair_1.Pair("subDocId", r.subDocId));
        list.push(new pair_1.Pair("textBoxProperties", r.textBoxProperties));
        list.push(new pair_1.Pair("shape", r.shape));
    };
    CCF_RunBase.prototype.addAnchorInfo = function (list) {
        var r = this.curr;
        list.push(new pair_1.Pair("anchoredObjectID", r.anchoredObjectID));
        list.push(new pair_1.Pair("anchorInfo", r.anchorInfo));
    };
    CCF_RunBase.prototype.getText = function () {
        return this.getChunk().textBuffer.substr(this.curr.startOffset, this.curr.getLength());
    };
    CCF_RunBase.prototype.getChunk = function () {
        var _this = this;
        return number_1.NumberMapUtils.anyOf(this.model.subDocuments, function (subD) {
            return list_1.ListUtils.elementBy(subD.chunks, function (chunk) { return !!list_1.ListUtils.elementBy(chunk.textRuns, function (run) { return run === _this.curr; }); });
        });
    };
    CCF_RunBase._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_RunBase());
    return CCF_RunBase;
}(base_formatter_1.BaseFormatter));
exports.CCF_RunBase = CCF_RunBase;
