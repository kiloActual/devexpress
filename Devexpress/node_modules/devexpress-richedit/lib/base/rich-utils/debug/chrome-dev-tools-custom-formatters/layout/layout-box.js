"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_box_1 = require("../../../../../core/layout/main-structures/layout-boxes/layout-box");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../base-formatter");
var CCF_LayoutBox = (function (_super) {
    tslib_1.__extends(CCF_LayoutBox, _super);
    function CCF_LayoutBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_LayoutBox.prototype.isHandleObject = function (obj) {
        return obj instanceof layout_box_1.LayoutBox;
    };
    CCF_LayoutBox.prototype.getShortDescription = function (_config) {
        var list = [new pair_1.Pair("", layout_box_1.LayoutBoxType[this.curr.getType()])];
        if (this.curr.getType() == layout_box_1.LayoutBoxType.Text)
            list.push(new pair_1.Pair("text", this.curr.text));
        list.push(new pair_1.Pair("offset", this.curr.rowOffset));
        if (this.curr.getType() == layout_box_1.LayoutBoxType.AnchorTextBox)
            list.push(new pair_1.Pair("txt", this.getSubDocumentText(this.curr.internalSubDocId)));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_LayoutBox.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_LayoutBox.prototype.getFullDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps(this.getList()).showAsColumn());
    };
    CCF_LayoutBox.prototype.getList = function () {
        var list = [
            new pair_1.Pair("offset", this.curr.rowOffset),
            new pair_1.Pair("type", layout_box_1.LayoutBoxType[this.curr.getType()]),
            new pair_1.Pair("bounds", this.curr.createRectangle()),
        ];
        switch (this.curr.getType()) {
            case layout_box_1.LayoutBoxType.Text:
                list.push(new pair_1.Pair("text", this.curr.text));
                break;
            case layout_box_1.LayoutBoxType.Space:
                list.push(new pair_1.Pair("hiddenSpaceWidth", this.curr.hiddenSpaceWidth));
                list.push(new pair_1.Pair("spaceWidth", this.curr.spaceWidth));
                break;
            case layout_box_1.LayoutBoxType.NonBreakingSpace:
                list.push(new pair_1.Pair("nonBreakingSymbolWidth", this.curr.spaceWidth));
                list.push(new pair_1.Pair("hiddenSpaceWidth", this.curr.hiddenSpaceWidth));
                break;
            case layout_box_1.LayoutBoxType.Picture:
                list.push(new pair_1.Pair("pictureIsLoaded", this.curr.cacheInfo.currId));
                this.addPicInfo(list);
                break;
            case layout_box_1.LayoutBoxType.NumberingList:
                list.push(new pair_1.Pair("separatorBox", this.curr.separatorBox));
                list.push(new pair_1.Pair("textBox", this.curr.textBox));
                break;
            case layout_box_1.LayoutBoxType.AnchorPicture:
            case layout_box_1.LayoutBoxType.AnchorTextBox:
                list.push(new pair_1.Pair("objectId", this.curr.objectId));
                list.push(new pair_1.Pair("belongsToSubDocId", this.curr.belongsToSubDocId));
                list.push(new pair_1.Pair("rotationInRadians", this.curr.rotationInRadians));
                list.push(new pair_1.Pair("anchorInfo", this.curr.anchorInfo));
                list.push(new pair_1.Pair("shape", this.curr.shape));
                list.push(new pair_1.Pair("rendererLevel", this.curr.rendererLevel));
                if (this.curr.getType() == layout_box_1.LayoutBoxType.AnchorTextBox) {
                    list.push(new pair_1.Pair("internalSubDocId", this.curr.internalSubDocId));
                    list.push(new pair_1.Pair("textBoxProperties", this.curr.textBoxProperties));
                    list.push(new pair_1.Pair("textOfInnerSubDocument", this.getSubDocumentText(this.curr.internalSubDocId)));
                }
                else {
                    list.push(new pair_1.Pair("isLoaded", this.curr.cacheInfo.currId));
                    this.addPicInfo(list);
                }
                break;
        }
        list.push(new pair_1.Pair("characterProperties", this.curr.characterProperties));
        list.push(new pair_1.Pair("fieldLevel", this.curr.fieldLevel));
        list.push(new pair_1.Pair("hyperlinkTip", this.curr.hyperlinkTip));
        return list;
    };
    CCF_LayoutBox.prototype.addPicInfo = function (list) {
        var picId = this.curr.getType() == layout_box_1.LayoutBoxType.Picture ?
            this.curr.cacheInfo.currId : this.curr.cacheInfo.currId;
        list.push(new pair_1.Pair("pictureId", picId));
        list.push(new pair_1.Pair("", this.getPictureNode(picId, this.curr)));
    };
    CCF_LayoutBox._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_LayoutBox());
    return CCF_LayoutBox;
}(base_formatter_1.BaseFormatter));
exports.CCF_LayoutBox = CCF_LayoutBox;
