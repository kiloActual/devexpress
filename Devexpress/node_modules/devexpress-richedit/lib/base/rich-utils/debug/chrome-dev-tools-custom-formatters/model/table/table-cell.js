"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_1 = require("../../../../../../core/model/tables/main-structures/table-cell");
var table_base_structures_1 = require("../../../../../../core/model/tables/secondary-structures/table-base-structures");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var base_formatter_1 = require("../../base-formatter");
var CCF_TableCell = (function (_super) {
    tslib_1.__extends(CCF_TableCell, _super);
    function CCF_TableCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_TableCell.prototype.isHandleObject = function (obj) {
        return obj instanceof table_cell_1.TableCell;
    };
    CCF_TableCell.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("", this.getIndex() + ":"),
            new pair_1.Pair("", "[" + this.curr.startParagraphPosition.value + ", " + this.curr.endParagrapPosition.value + "]"),
        ];
        if (this.curr.columnSpan > 1)
            list.push(new pair_1.Pair("cols", this.curr.columnSpan));
        if (this.curr.verticalMerging != table_base_structures_1.TableCellMergingState.None)
            list.push(new pair_1.Pair("vertMerg", table_base_structures_1.TableCellMergingState[this.curr.verticalMerging]));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_TableCell.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_TableCell.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("index", this.getIndex()),
            new pair_1.Pair("preferredWidth", this.curr.preferredWidth),
            new pair_1.Pair("columnSpan", this.curr.columnSpan),
            new pair_1.Pair("interval", this.curr.interval),
            new pair_1.Pair("text", this.getRawText(this.getSubDocument().getText(this.curr.interval)).setLen(30)),
            new pair_1.Pair("runsOnCell", this.getSubDocument().getRunsByInterval(this.curr.interval)),
            new pair_1.Pair("properties", this.curr.properties),
            new pair_1.Pair("conditionalFormatting", table_base_structures_1.ConditionalTableStyleFormatting[this.curr.conditionalFormatting]),
            new pair_1.Pair("style", this.curr.style),
            new pair_1.Pair("verticalMerging", table_base_structures_1.TableCellMergingState[this.curr.verticalMerging]),
            new pair_1.Pair("parentRow", this.curr.parentRow),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_TableCell.prototype.getIndex = function () {
        return this.curr.parentRow.cells.indexOf(this.curr);
    };
    CCF_TableCell.prototype.getSubDocument = function () {
        var _this = this;
        return number_1.NumberMapUtils.elementBy(this.model.subDocuments, function (subDoc) {
            return subDoc.tables[_this.curr.parentRow.parentTable.index] == _this.curr.parentRow.parentTable;
        });
    };
    CCF_TableCell._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_TableCell());
    return CCF_TableCell;
}(base_formatter_1.BaseFormatter));
exports.CCF_TableCell = CCF_TableCell;
