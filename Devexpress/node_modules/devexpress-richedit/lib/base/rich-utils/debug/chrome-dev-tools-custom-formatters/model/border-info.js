"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var border_info_1 = require("../../../../../core/model/borders/border-info");
var enums_1 = require("../../../../../core/model/borders/enums");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var base_formatter_1 = require("../base-formatter");
var CCF_BorderInfo = (function (_super) {
    tslib_1.__extends(CCF_BorderInfo, _super);
    function CCF_BorderInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_BorderInfo.prototype.isHandleObject = function (obj) {
        return obj instanceof border_info_1.BorderInfo;
    };
    CCF_BorderInfo.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("width", this.curr.width + "(" + unit_converter_1.UnitConverter.twipsToPixels(this.curr.width) + "px)"),
            new pair_1.Pair("style", enums_1.BorderLineStyle[this.curr.style]),
            new pair_1.Pair("", base_formatter_1.BaseFormatter.getColorBoxNode(this.model.colorProvider.getRgbaFromModelColor(this.curr.color))),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_BorderInfo.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_BorderInfo.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("width", this.curr.width + "(" + unit_converter_1.UnitConverter.twipsToPixels(this.curr.width) + "px)"),
            new pair_1.Pair("style", enums_1.BorderLineStyle[this.curr.style]),
            new pair_1.Pair("colorIndex", base_formatter_1.BaseFormatter.getColorBoxNode(this.model.colorProvider.getRgbaFromModelColor(this.curr.color))),
            new pair_1.Pair("frame", this.curr.frame),
            new pair_1.Pair("offset", this.curr.offset),
            new pair_1.Pair("shadow", this.curr.shadow),
        ];
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_BorderInfo._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_BorderInfo());
    return CCF_BorderInfo;
}(base_formatter_1.BaseFormatter));
exports.CCF_BorderInfo = CCF_BorderInfo;
