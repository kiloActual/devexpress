"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_1 = require("../../../../../core/layout/document-layout");
var color_1 = require("../../../../../core/model/color/color");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../base-formatter");
var elements_1 = require("../elements");
var CCF_DocumentLayout = (function (_super) {
    tslib_1.__extends(CCF_DocumentLayout, _super);
    function CCF_DocumentLayout() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_DocumentLayout.prototype.isHandleObject = function (obj) {
        return obj instanceof document_layout_1.DocumentLayout;
    };
    CCF_DocumentLayout.prototype.getShortDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps([
            new pair_1.Pair("", this.curr.isFullyFormatted ? "FullFormatted" : "NotFullFormatted"),
            new pair_1.Pair("validPages", this.curr.validPageCount),
            new pair_1.Pair("phisicalPages", this.curr.pages.length),
            new pair_1.Pair("anchorObjectsPositionInfo", this.curr.anchorObjectsPositionInfo),
        ]).showAsLine());
    };
    CCF_DocumentLayout.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_DocumentLayout.prototype.getFullDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps(this.getList(true)).showAsColumn());
    };
    CCF_DocumentLayout.prototype.getList = function (placePagesInfo) {
        var list = [new pair_1.Pair("isFullyFormatted", this.curr.isFullyFormatted),
            new pair_1.Pair("validPages", this.curr.validPageCount),
            new pair_1.Pair("existingPages", this.curr.pages.length),
            new pair_1.Pair("lastMaxNumPages", this.curr.lastMaxNumPages),
            new pair_1.Pair("pagesColor", new elements_1.DivElement().setStyle("display: inline-block")
                .setText(color_1.ColorHelper.getCssString(this.curr.pageColor, false) + " (" + this.curr.pageColor + ") ")
                .setNode(base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.pageColor))),
            new pair_1.Pair("anchorObjectsPositionInfo", this.curr.anchorObjectsPositionInfo)];
        if (placePagesInfo)
            list.push(new pair_1.Pair("pages", this.curr.pages));
        return list;
    };
    CCF_DocumentLayout._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_DocumentLayout());
    return CCF_DocumentLayout;
}(base_formatter_1.BaseFormatter));
exports.CCF_DocumentLayout = CCF_DocumentLayout;
