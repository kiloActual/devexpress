"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../../../core/model/fields/field");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var base_formatter_1 = require("../base-formatter");
var CCF_Field = (function (_super) {
    tslib_1.__extends(CCF_Field, _super);
    function CCF_Field() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_Field.prototype.isHandleObject = function (obj) {
        return obj instanceof field_1.Field;
    };
    CCF_Field.prototype.getShortDescription = function (_config) {
        var list = [
            new pair_1.Pair("", this.curr.index + ":"),
            new pair_1.Pair("", this.curr.showCode ? "showCode" : "showRes"),
            new pair_1.Pair("", this.curr.getFieldStartPosition() + "[" + this.curr.getSeparatorPosition() + "|]" + this.curr.getFieldEndPosition())
        ];
        if (this.curr.isHyperlinkField())
            list.push(new pair_1.Pair("", "hyperl"));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_Field.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_Field.prototype.getFullDescription = function (_config) {
        var list = [new pair_1.Pair("index", this.curr.index)];
        if (this.curr.parent)
            list.push(new pair_1.Pair("parentInd", this.curr.parent.index));
        list.push(new pair_1.Pair("isShowCode", this.curr.showCode));
        if (this.curr.isHyperlinkField()) {
            var hypInfo = this.curr.getHyperlinkInfo();
            list.push(new pair_1.Pair("anchor", hypInfo.anchor));
            list.push(new pair_1.Pair("tip", hypInfo.tip));
            list.push(new pair_1.Pair("uri", hypInfo.uri));
            list.push(new pair_1.Pair("visited", hypInfo.visited));
        }
        list.push(new pair_1.Pair("intervals", "(" + this.curr.getFieldStartPosition() + ")[code(" + this.curr.getSeparatorPosition() + ")|result](" + this.curr.getFieldEndPosition() + ")"));
        list.push(new pair_1.Pair("text", "[" + this.getSubDocument().getText(this.curr.getCodeInterval()) + "|" + this.getSubDocument().getText(this.curr.getResultInterval()) + "]"));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_Field.prototype.getSubDocument = function () {
        var _this = this;
        return number_1.NumberMapUtils.elementBy(this.model.subDocuments, function (subD) { return subD.fields[_this.curr.index] ? subD.fields[_this.curr.index] === _this.curr : null; });
    };
    CCF_Field._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_Field());
    return CCF_Field;
}(base_formatter_1.BaseFormatter));
exports.CCF_Field = CCF_Field;
