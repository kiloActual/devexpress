"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var BaseElement = (function () {
    function BaseElement() {
    }
    BaseElement.prototype.toList = function () {
        var result = [this.getTypeAsString()];
        this.fillResult(result);
        return result;
    };
    ;
    BaseElement.fillClassesPart = function (result, elem) {
        if (elem.classes.length || elem.styles.length) {
            var classStyleObject = {};
            if (elem.classes.length)
                classStyleObject["class"] = elem.classes.join(", ");
            if (elem.styles.length)
                classStyleObject["style"] = elem.styles.join("; ");
            result.push(classStyleObject);
        }
    };
    BaseElement.fillTextPart = function (result, elem) {
        if (elem.text.length)
            result.push(elem.text.join(" "));
    };
    BaseElement.fillNodesPart = function (result, elem) {
        if (elem.nodes.length)
            for (var _i = 0, _a = elem.nodes; _i < _a.length; _i++) {
                var node = _a[_i];
                result.push(node.toList());
            }
    };
    return BaseElement;
}());
exports.BaseElement = BaseElement;
var DivElement = (function (_super) {
    tslib_1.__extends(DivElement, _super);
    function DivElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.styles = [];
        _this.classes = [];
        _this.nodes = [];
        _this.text = [];
        return _this;
    }
    DivElement.prototype.getTypeAsString = function () { return "div"; };
    DivElement.prototype.setText = function (text) {
        this.text.push(text);
        return this;
    };
    DivElement.prototype.setStyle = function (styleStr) {
        this.styles.push(styleStr);
        return this;
    };
    DivElement.prototype.setInlineBlockType = function () {
        return this.setStyle("display: inline-block");
    };
    DivElement.prototype.setClass = function (classStr) {
        this.classes.push(classStr);
        return this;
    };
    DivElement.prototype.setNode = function (node) {
        this.nodes.push(node);
        return this;
    };
    DivElement.prototype.fillResult = function (result) {
        BaseElement.fillClassesPart(result, this);
        BaseElement.fillTextPart(result, this);
        BaseElement.fillNodesPart(result, this);
    };
    DivElement.prototype.setColor = function (color) {
        this.setStyle("color: " + color);
        return this;
    };
    return DivElement;
}(BaseElement));
exports.DivElement = DivElement;
var SpanElement = (function (_super) {
    tslib_1.__extends(SpanElement, _super);
    function SpanElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SpanElement.prototype.getTypeAsString = function () { return "span"; };
    return SpanElement;
}(DivElement));
exports.SpanElement = SpanElement;
var LiElement = (function (_super) {
    tslib_1.__extends(LiElement, _super);
    function LiElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LiElement.prototype.getTypeAsString = function () { return "li"; };
    return LiElement;
}(DivElement));
exports.LiElement = LiElement;
var OlElement = (function (_super) {
    tslib_1.__extends(OlElement, _super);
    function OlElement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.styles = [];
        _this.classes = [];
        _this.nodes = [];
        return _this;
    }
    OlElement.prototype.getTypeAsString = function () { return "ol"; };
    OlElement.prototype.setStyle = function (styleStr) {
        this.styles.push(styleStr);
        return this;
    };
    OlElement.prototype.setClass = function (classStr) {
        this.classes.push(classStr);
        return this;
    };
    OlElement.prototype.setNode = function (node) {
        this.nodes.push(node);
        return this;
    };
    OlElement.prototype.fillResult = function (result) {
        if (!this.nodes.length)
            throw new Error(errors_1.Errors.InternalException);
        BaseElement.fillClassesPart(result, this);
        BaseElement.fillNodesPart(result, this);
    };
    return OlElement;
}(BaseElement));
exports.OlElement = OlElement;
var TableElement = (function (_super) {
    tslib_1.__extends(TableElement, _super);
    function TableElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableElement.prototype.getTypeAsString = function () { return "table"; };
    return TableElement;
}(OlElement));
exports.TableElement = TableElement;
var TrElement = (function (_super) {
    tslib_1.__extends(TrElement, _super);
    function TrElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TrElement.prototype.getTypeAsString = function () { return "tr"; };
    return TrElement;
}(OlElement));
exports.TrElement = TrElement;
var TdElement = (function (_super) {
    tslib_1.__extends(TdElement, _super);
    function TdElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TdElement.prototype.getTypeAsString = function () { return "td"; };
    return TdElement;
}(DivElement));
exports.TdElement = TdElement;
var ObjectElement = (function (_super) {
    tslib_1.__extends(ObjectElement, _super);
    function ObjectElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ObjectElement.prototype.getTypeAsString = function () { return "object"; };
    ObjectElement.prototype.setObjectData = function (obj, config) {
        this.obj = obj;
        this.config = config;
        return this;
    };
    ObjectElement.prototype.fillResult = function (result) {
        var objData = {};
        objData["object"] = this.obj;
        objData["config"] = this.config;
        result.push(objData);
    };
    return ObjectElement;
}(BaseElement));
exports.ObjectElement = ObjectElement;
