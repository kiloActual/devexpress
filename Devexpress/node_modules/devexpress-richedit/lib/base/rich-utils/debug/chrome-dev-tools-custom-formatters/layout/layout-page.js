"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_page_1 = require("../../../../../core/layout/main-structures/layout-page");
var log_1 = require("../../../../../core/rich-utils/debug/logger/base-logger/log");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../base-formatter");
var CCF_LayoutPage = (function (_super) {
    tslib_1.__extends(CCF_LayoutPage, _super);
    function CCF_LayoutPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_LayoutPage.prototype.isHandleObject = function (obj) {
        return obj instanceof layout_page_1.LayoutPage;
    };
    CCF_LayoutPage.prototype.getShortDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps([
            new pair_1.Pair("", this.curr.index),
            new pair_1.Pair("offset", this.curr.getPosition()),
            new pair_1.Pair("", this.curr.isValid ? "valid" : "invalid")
        ]).showAsLine());
    };
    CCF_LayoutPage.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_LayoutPage.prototype.getFullDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps([
            new pair_1.Pair("index", this.curr.index),
            new pair_1.Pair("isValid", this.curr.isValid),
            new pair_1.Pair("intervals", this.curr.getContentIntervals()),
            new pair_1.Pair("bounds", this.curr.createRectangle()),
            new pair_1.Pair("mainPageAreas", this.curr.mainSubDocumentPageAreas),
            new pair_1.Pair("otherPageAreas", this.stdShow(new base_formatter_1.StdProps(this.mapNumberAsKeyToListOfPairs(this.curr.otherPageAreas, function (id) { return id; }, function (id, pa) { return new pair_1.Pair(id.toString(), pa); })).showAsLine().setStdNumElements()).setInlineBlockType()),
            new pair_1.Pair("anchoredObjectHolder", this.curr.anchoredObjectHolder),
            new pair_1.Pair("flags", log_1.Log.mask(layout_page_1.LayoutPageFlags, this.curr.flags.getValue())),
        ]).showAsColumn());
    };
    CCF_LayoutPage._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_LayoutPage());
    return CCF_LayoutPage;
}(base_formatter_1.BaseFormatter));
exports.CCF_LayoutPage = CCF_LayoutPage;
