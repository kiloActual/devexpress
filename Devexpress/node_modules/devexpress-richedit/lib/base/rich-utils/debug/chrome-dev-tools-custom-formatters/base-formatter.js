"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../../../../core/model/color/color");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var elements_1 = require("./elements");
var short_string_1 = require("./short-string");
var BaseFormatter = (function () {
    function BaseFormatter() {
    }
    BaseFormatter.addToFormattersList = function (formatter) {
        BaseFormatter.formattersList.push(formatter);
    };
    BaseFormatter.prototype.availableFullDescription = function (_config) {
        return false;
    };
    BaseFormatter.prototype.getFullDescription = function (_config) {
        return null;
    };
    BaseFormatter.prototype.header = function (obj, config) {
        if (!this.isHandleObject(obj) || config && !config.useCustomFormatter)
            return null;
        this.curr = obj;
        return this.getShortDescription(config).toList();
    };
    BaseFormatter.prototype.hasBody = function (obj, config) {
        this.curr = obj;
        return this.availableFullDescription(config);
    };
    BaseFormatter.prototype.body = function (obj, config) {
        this.curr = obj;
        var domObj = this.getFullDescription(config);
        return domObj ? domObj.toList() : null;
    };
    BaseFormatter.prototype.toFixed = function (val, numDigitsAfterPoint) {
        if (numDigitsAfterPoint === void 0) { numDigitsAfterPoint = 2; }
        if (val === null)
            return "null";
        if (val === undefined)
            return "undefined";
        var str = val.toFixed(numDigitsAfterPoint);
        var len = str.length;
        return str.substr(len - 2) == "00" ? str.substring(0, len - 3) : str;
    };
    BaseFormatter.prototype.stdShow = function (props) {
        var rowElement = new elements_1.DivElement();
        if (props._onLine && props._openChar.length)
            rowElement.setNode(new elements_1.SpanElement().setText(props._openChar));
        list_1.ListUtils.forEach(props._list, function (prop) {
            var node = new elements_1.DivElement()
                .setStyle("margin: 0px 5px")
                .setStyle("padding: 0px 2px");
            if (prop.first.length)
                node.setNode(new elements_1.SpanElement().setText(prop.first + ": ")
                    .setStyle("font-weight: bold")
                    .setStyle("color: " + BaseFormatter.paramNameColor));
            if (props._onLine)
                node.setStyle("display: inline-block");
            if (typeof prop.second == "object") {
                if (prop.second instanceof elements_1.BaseElement)
                    node.setNode(prop.second);
                else
                    node.setNode(new elements_1.ObjectElement().setObjectData(prop.second, null));
            }
            else {
                node.setNode(new elements_1.SpanElement().setText("" + (prop.second === null || prop.second === undefined ? "null" : prop.second))
                    .setStyle("color: " + BaseFormatter.valueColor));
            }
            rowElement.setNode(node);
        }, 0, props._numElements);
        if (props.isShowNotAllElements())
            rowElement.setNode(new elements_1.SpanElement().setText("..."));
        if (props._onLine && props._closeChar.length)
            rowElement.setNode(new elements_1.SpanElement().setText(props._closeChar));
        return rowElement;
    };
    BaseFormatter.prototype.mapNumberAsKeyToListOfPairs = function (map, getSortVal, makePair) {
        return list_1.ListUtils.map(number_1.NumberMapUtils.toListBy(map, function (obj, key) { return [key, obj]; })
            .sort(function (a, b) { return getSortVal(a[0], a[1]) - getSortVal(b[0], b[1]); }), function (obj) { return makePair(obj[0], obj[1]); });
    };
    BaseFormatter.getColorBoxNode = function (color) {
        return new elements_1.DivElement()
            .setStyle("display: inline-block")
            .setStyle("background-color:" + color_1.ColorHelper.getCssString(color, false))
            .setStyle("width: 10px")
            .setStyle("height: 10px")
            .setStyle("border: 1px solid black");
    };
    BaseFormatter.prototype.getPictureNode = function (_picId, _obj) {
        return null;
    };
    BaseFormatter.prototype.makeTableCellNode = function (propName, val) {
        return new elements_1.TrElement()
            .setNode(new elements_1.TdElement().setText(propName + ":"))
            .setNode(new elements_1.TdElement().setText("" + val));
    };
    Object.defineProperty(BaseFormatter.prototype, "handlerURI", {
        get: function () {
            return "";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormatter.prototype, "model", {
        get: function () {
            return BaseFormatter.rich.modelManager.model;
        },
        enumerable: true,
        configurable: true
    });
    BaseFormatter.prototype.getSubDocumentText = function (subDocId, interval) {
        if (interval === void 0) { interval = null; }
        var subDoc = this.model.subDocuments[subDocId];
        if (!interval)
            interval = new fixed_1.FixedInterval(0, subDoc.getDocumentEndPosition());
        var text = subDoc.getText(interval);
        return this.getRawText(text);
    };
    BaseFormatter.prototype.getRawText = function (text) {
        text = text.replace(new RegExp(rich_utils_1.RichUtils.specialCharacters.ParagraphMark, "g"), "Â¶");
        return new short_string_1.ShortString(text);
    };
    BaseFormatter.stringColor = "rgb(196,26,22)";
    BaseFormatter.paramNameColor = "rgb(176,98,182)";
    BaseFormatter.valueColor = "rgb(70,47,216)";
    BaseFormatter.blackColor = "rgb(0,0,0)";
    BaseFormatter.formattersList = [];
    return BaseFormatter;
}());
exports.BaseFormatter = BaseFormatter;
var StdProps = (function () {
    function StdProps(list) {
        this._onLine = true;
        this._list = list;
        this._numElements = list.length;
        this._openChar = "{";
        this._closeChar = "}";
    }
    StdProps.prototype.setNumElements = function (val) {
        this._numElements = val;
        return this;
    };
    StdProps.prototype.setStdNumElements = function () {
        return this.setNumElements(Math.min(this._list.length, StdProps.STD_NUM_ELEMENTS));
    };
    StdProps.prototype.showAsLine = function () {
        this._onLine = true;
        return this;
    };
    StdProps.prototype.showAsColumn = function () {
        this._onLine = false;
        return this;
    };
    StdProps.prototype.setBoundChars = function (openChar, closeChar) {
        this._openChar = openChar;
        this._closeChar = closeChar;
        return this;
    };
    StdProps.prototype.isShowNotAllElements = function () {
        return this._numElements < this._list.length;
    };
    StdProps.STD_NUM_ELEMENTS = 3;
    return StdProps;
}());
exports.StdProps = StdProps;
var Config = (function () {
    function Config() {
    }
    Config.prototype.getProp = function (getter, defaultVal) {
        var val = getter();
        if (val === undefined)
            return defaultVal;
        return val;
    };
    Object.defineProperty(Config.prototype, "useCustomFormatter", {
        get: function () {
            var _this = this;
            return this.getProp(function () { return _this.aspxRichEditConfig_useCustomFormatter; }, true);
        },
        set: function (val) { this.aspxRichEditConfig_useCustomFormatter = val; },
        enumerable: true,
        configurable: true
    });
    Config.useCustomFormatter = function (val, config) {
        if (config === void 0) { config = new Config; }
        config.useCustomFormatter = val;
        return config;
    };
    return Config;
}());
exports.Config = Config;
