"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_row_properties_1 = require("../../../../../../core/model/tables/properties/table-row-properties");
var table_base_structures_1 = require("../../../../../../core/model/tables/secondary-structures/table-base-structures");
var log_1 = require("../../../../../../core/rich-utils/debug/logger/base-logger/log");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../../base-formatter");
var CCF_TableRowProperties = (function (_super) {
    tslib_1.__extends(CCF_TableRowProperties, _super);
    function CCF_TableRowProperties() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_TableRowProperties.prototype.isHandleObject = function (obj) {
        return obj instanceof table_row_properties_1.TableRowProperties;
    };
    CCF_TableRowProperties.prototype.getShortDescription = function (_config) {
        var list = [];
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseCantSplit))
            list.push(new pair_1.Pair("cantSplit", this.curr.cantSplit));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseCellSpacing))
            list.push(new pair_1.Pair("cellSpacing", this.curr.cellSpacing));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseTableRowAlignment) && this.curr.tableRowAlignment != table_base_structures_1.TableRowAlignment.Left)
            list.push(new pair_1.Pair("tableRowAlignment", table_base_structures_1.TableRowAlignment[this.curr.tableRowAlignment]));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseHideCellMark) && this.curr.header)
            list.push(new pair_1.Pair("", "header"));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_TableRowProperties.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_TableRowProperties.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("mask", log_1.Log.mask(table_row_properties_1.TableRowPropertiesMask, this.curr.mask, table_row_properties_1.TableRowPropertiesMask.UseNone)),
        ];
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseCellSpacing))
            list.push(new pair_1.Pair("cellSpacing", this.curr.cellSpacing));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseCantSplit))
            list.push(new pair_1.Pair("cantSplit", this.curr.cantSplit));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseHeader))
            list.push(new pair_1.Pair("header", this.curr.header));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseDivId))
            list.push(new pair_1.Pair("divId", this.curr.divId));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseTableRowAlignment))
            list.push(new pair_1.Pair("tableRowAlignment", table_base_structures_1.TableRowAlignment[this.curr.tableRowAlignment]));
        if (this.curr.getUseValue(table_row_properties_1.TableRowPropertiesMask.UseHideCellMark))
            list.push(new pair_1.Pair("header", this.curr.hideCellMark));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_TableRowProperties._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_TableRowProperties());
    return CCF_TableRowProperties;
}(base_formatter_1.BaseFormatter));
exports.CCF_TableRowProperties = CCF_TableRowProperties;
