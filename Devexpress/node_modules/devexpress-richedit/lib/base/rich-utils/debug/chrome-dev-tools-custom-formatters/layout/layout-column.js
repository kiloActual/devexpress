"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_column_1 = require("../../../../../core/layout/main-structures/layout-column");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../base-formatter");
var CCF_LayoutColumn = (function (_super) {
    tslib_1.__extends(CCF_LayoutColumn, _super);
    function CCF_LayoutColumn() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_LayoutColumn.prototype.isHandleObject = function (obj) {
        return obj instanceof layout_column_1.LayoutColumn;
    };
    CCF_LayoutColumn.prototype.getShortDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps([
            new pair_1.Pair("offset", this.curr.pageAreaOffset),
        ]).showAsLine());
    };
    CCF_LayoutColumn.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_LayoutColumn.prototype.getFullDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps([
            new pair_1.Pair("offset", this.curr.pageAreaOffset),
            new pair_1.Pair("bounds", this.curr.createRectangle()),
            new pair_1.Pair("rows", this.curr.rows),
            new pair_1.Pair("paragraphFrames", this.curr.paragraphFrames),
            new pair_1.Pair("tablesInfo", this.curr.tablesInfo),
        ]).showAsColumn());
    };
    CCF_LayoutColumn._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_LayoutColumn());
    return CCF_LayoutColumn;
}(base_formatter_1.BaseFormatter));
exports.CCF_LayoutColumn = CCF_LayoutColumn;
