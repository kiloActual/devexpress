"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_1 = require("../../../../../core/model/character/character-properties");
var enums_1 = require("../../../../../core/model/character/enums");
var log_1 = require("../../../../../core/rich-utils/debug/logger/base-logger/log");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../base-formatter");
var CCF_CharacterProperties = (function (_super) {
    tslib_1.__extends(CCF_CharacterProperties, _super);
    function CCF_CharacterProperties() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_CharacterProperties.prototype.isHandleObject = function (obj) {
        return obj instanceof character_properties_1.CharacterProperties;
    };
    CCF_CharacterProperties.prototype.getShortDescription = function (_config) {
        var useVal = this.getUseVal();
        var list = [];
        if (useVal & enums_1.CharacterPropertiesMask.UseHidden)
            list.push(new pair_1.Pair("", this.curr.hidden ? "hidden" : ""));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontName)
            list.push(new pair_1.Pair("f", this.curr.fontInfo));
        if (useVal & enums_1.CharacterPropertiesMask.UseDoubleFontSize)
            list.push(new pair_1.Pair("fSize", this.curr.fontSize));
        if (useVal & enums_1.CharacterPropertiesMask.UseShadingInfoIndex)
            list.push(new pair_1.Pair("bckColor", base_formatter_1.BaseFormatter.getColorBoxNode(character_properties_1.CharacterProperties.getActualBackgroundColor(this.curr, this.model.colorProvider))));
        if (this.isMasked())
            list.push(new pair_1.Pair("mask", log_1.Log.mask(enums_1.CharacterPropertiesMask, useVal, enums_1.CharacterPropertiesMask.UseNone)));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_CharacterProperties.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_CharacterProperties.prototype.getFullDescription = function (_config) {
        var list = [];
        var useVal = this.getUseVal();
        if (this.isMasked())
            list.push(new pair_1.Pair("mask", log_1.Log.mask(enums_1.CharacterPropertiesMask, useVal, enums_1.CharacterPropertiesMask.UseNone)));
        if (useVal & enums_1.CharacterPropertiesMask.UseHidden)
            list.push(new pair_1.Pair("hidden", this.curr.hidden));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontName)
            list.push(new pair_1.Pair("fontInfo", this.curr.fontInfo));
        if (useVal & enums_1.CharacterPropertiesMask.UseDoubleFontSize)
            list.push(new pair_1.Pair("fontSize", this.curr.fontSize));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontBold)
            list.push(new pair_1.Pair("fontBold", this.curr.fontBold));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontItalic)
            list.push(new pair_1.Pair("fontItalic", this.curr.fontItalic));
        if (useVal & enums_1.CharacterPropertiesMask.UseForeColorIndex)
            list.push(new pair_1.Pair("textColor", base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.textColor.toRgb(this.model.colorProvider))));
        if (useVal & enums_1.CharacterPropertiesMask.UseShadingInfoIndex)
            list.push(new pair_1.Pair("backColor", base_formatter_1.BaseFormatter.getColorBoxNode(character_properties_1.CharacterProperties.getActualBackgroundColor(this.curr, this.model.colorProvider))));
        if (useVal & enums_1.CharacterPropertiesMask.UseAllCaps)
            list.push(new pair_1.Pair("allCaps", this.curr.allCaps));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontStrikeoutType)
            list.push(new pair_1.Pair("fontStrikeoutType", enums_1.StrikeoutType[this.curr.fontStrikeoutType]));
        if (useVal & enums_1.CharacterPropertiesMask.UseFontUnderlineType)
            list.push(new pair_1.Pair("fontUnderlineType", enums_1.UnderlineType[this.curr.fontUnderlineType]));
        if (useVal & enums_1.CharacterPropertiesMask.UseNoProof)
            list.push(new pair_1.Pair("noProof", this.curr.noProof));
        if (useVal & enums_1.CharacterPropertiesMask.UseScript)
            list.push(new pair_1.Pair("script", enums_1.CharacterFormattingScript[this.curr.script]));
        if (useVal & enums_1.CharacterPropertiesMask.UseStrikeoutColorIndex)
            list.push(new pair_1.Pair("strikeoutColor", base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.strikeoutColor.toRgb(this.model.colorProvider))));
        if (useVal & enums_1.CharacterPropertiesMask.UseStrikeoutWordsOnly)
            list.push(new pair_1.Pair("strikeoutWordsOnly", this.curr.strikeoutWordsOnly));
        if (useVal & enums_1.CharacterPropertiesMask.UseUnderlineColorIndex)
            list.push(new pair_1.Pair("underlineColor", base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.underlineColor.toRgb(this.model.colorProvider))));
        if (useVal & enums_1.CharacterPropertiesMask.UseUnderlineWordsOnly)
            list.push(new pair_1.Pair("underlineWordsOnly", this.curr.underlineWordsOnly));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_CharacterProperties.prototype.getUseVal = function () {
        return this.isMasked() ? this.curr.useValue : enums_1.CharacterPropertiesMask.UseAll;
    };
    CCF_CharacterProperties.prototype.isMasked = function () {
        return this.curr.useValue !== undefined;
    };
    CCF_CharacterProperties._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_CharacterProperties());
    return CCF_CharacterProperties;
}(base_formatter_1.BaseFormatter));
exports.CCF_CharacterProperties = CCF_CharacterProperties;
