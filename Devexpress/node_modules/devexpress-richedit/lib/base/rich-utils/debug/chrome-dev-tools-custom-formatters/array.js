"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var list_1 = require("@devexpress/utils/lib/utils/list");
var base_formatter_1 = require("./base-formatter");
var elements_1 = require("./elements");
var CCF_Array = (function (_super) {
    tslib_1.__extends(CCF_Array, _super);
    function CCF_Array() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_Array.prototype.isHandleObject = function (obj) {
        return Array.isArray(obj);
    };
    CCF_Array.prototype.getShortDescription = function (_config) {
        if (!this.curr.length)
            return new elements_1.DivElement().setText("[]");
        var list = this.getList();
        list.unshift(new pair_1.Pair("", new elements_1.SpanElement().setText(this.curr.length ? "(" + this.curr.length + ")" : "").setColor(base_formatter_1.BaseFormatter.blackColor)));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine().setStdNumElements().setBoundChars("[", "]"));
    };
    CCF_Array.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_Array.prototype.getFullDescription = function (_config) {
        return this.stdShow(new base_formatter_1.StdProps(this.getList()).showAsColumn());
    };
    CCF_Array.prototype.getList = function () {
        return list_1.ListUtils.map(this.curr, function (val, ind) { return new pair_1.Pair(ind.toString(), val); });
    };
    CCF_Array._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_Array());
    return CCF_Array;
}(base_formatter_1.BaseFormatter));
exports.CCF_Array = CCF_Array;
