"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_1 = require("../../../../../../core/model/tables/properties/table-cell-properties");
var table_base_structures_1 = require("../../../../../../core/model/tables/secondary-structures/table-base-structures");
var log_1 = require("../../../../../../core/rich-utils/debug/logger/base-logger/log");
var pair_1 = require("@devexpress/utils/lib/class/pair");
var base_formatter_1 = require("../../base-formatter");
var CCF_TableCellProperties = (function (_super) {
    tslib_1.__extends(CCF_TableCellProperties, _super);
    function CCF_TableCellProperties() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CCF_TableCellProperties.prototype.isHandleObject = function (obj) {
        return obj instanceof table_cell_properties_1.TableCellProperties;
    };
    CCF_TableCellProperties.prototype.getShortDescription = function (_config) {
        var list = [];
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment) && this.curr.verticalAlignment != table_base_structures_1.TableCellVerticalAlignment.Top)
            list.push(new pair_1.Pair("vertAlign", table_base_structures_1.TableCellVerticalAlignment[this.curr.verticalAlignment]));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex))
            list.push(new pair_1.Pair("", base_formatter_1.BaseFormatter.getColorBoxNode(this.curr.shadingInfo.getActualColor(this.model.colorProvider))));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsLine());
    };
    CCF_TableCellProperties.prototype.availableFullDescription = function (_config) {
        return true;
    };
    CCF_TableCellProperties.prototype.getFullDescription = function (_config) {
        var list = [
            new pair_1.Pair("mask", log_1.Log.mask(table_cell_properties_1.TableCellPropertiesMask, this.curr.mask, table_cell_properties_1.TableCellPropertiesMask.UseNone)),
        ];
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment))
            list.push(new pair_1.Pair("verticalAlignment", table_base_structures_1.TableCellVerticalAlignment[this.curr.verticalAlignment]));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftMargin))
            list.push(new pair_1.Pair("cellMargins.left", this.curr.cellMargins.left));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightMargin))
            list.push(new pair_1.Pair("cellMargins.right", this.curr.cellMargins.right));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopMargin))
            list.push(new pair_1.Pair("cellMargins.top", this.curr.cellMargins.top));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomMargin))
            list.push(new pair_1.Pair("cellMargins.bottom", this.curr.cellMargins.bottom));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder))
            list.push(new pair_1.Pair("cellMargins.left", this.curr.borders.leftBorder));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightBorder))
            list.push(new pair_1.Pair("cellMargins.right", this.curr.borders.rightBorder));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopBorder))
            list.push(new pair_1.Pair("cellMargins.top", this.curr.borders.topBorder));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder))
            list.push(new pair_1.Pair("cellMargins.bottom", this.curr.borders.bottomBorder));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTextDirection))
            list.push(new pair_1.Pair("textDirection", table_base_structures_1.TextDirection[this.curr.textDirection]));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseFitText))
            list.push(new pair_1.Pair("fitText", this.curr.fitText));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex))
            list.push(new pair_1.Pair("shadingInfo", this.curr.shadingInfo.getActualColor(this.model.colorProvider)));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseHideCellMark))
            list.push(new pair_1.Pair("hideCellMark", this.curr.hideCellMark));
        if (this.curr.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseNoWrap))
            list.push(new pair_1.Pair("noWrap", this.curr.noWrap));
        return this.stdShow(new base_formatter_1.StdProps(list).showAsColumn());
    };
    CCF_TableCellProperties._foo = base_formatter_1.BaseFormatter.addToFormattersList(new CCF_TableCellProperties());
    return CCF_TableCellProperties;
}(base_formatter_1.BaseFormatter));
exports.CCF_TableCellProperties = CCF_TableCellProperties;
