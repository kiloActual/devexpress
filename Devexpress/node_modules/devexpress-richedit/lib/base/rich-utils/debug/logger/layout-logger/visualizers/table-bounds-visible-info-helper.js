"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var debug_base_visualizer_1 = require("./debug-base-visualizer");
var debug_visualizer_type_1 = require("./debug-visualizer-type");
var offsets_1 = require("@devexpress/utils/lib/geometry/offsets");
var TableBoundsVisibleInfoHelper = (function (_super) {
    tslib_1.__extends(TableBoundsVisibleInfoHelper, _super);
    function TableBoundsVisibleInfoHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBoundsVisibleInfoHelper.prototype.getType = function () {
        return debug_visualizer_type_1.DebugVisualizerType.TableBounds;
    };
    TableBoundsVisibleInfoHelper.prototype.getContainerClassName = function () {
        return "dxreDebugTableBoundsContainer";
    };
    TableBoundsVisibleInfoHelper.prototype.fillPageContainer = function (layout, pageContainer, pageIndex) {
        var _this = this;
        var layoutPage = layout.pages[pageIndex];
        for (var _i = 0, _a = layoutPage.mainSubDocumentPageAreas; _i < _a.length; _i++) {
            var pageArea = _a[_i];
            this.setElementsFromPageArea(pageArea, pageContainer);
        }
        number_1.NumberMapUtils.forEach(layoutPage.otherPageAreas, function (otherPageArea) {
            return _this.setElementsFromPageArea(otherPageArea, pageContainer);
        });
    };
    TableBoundsVisibleInfoHelper.prototype.setElementsFromPageArea = function (layoutPageArea, container) {
        for (var _i = 0, _a = layoutPageArea.columns; _i < _a.length; _i++) {
            var column = _a[_i];
            for (var _b = 0, _c = column.tablesInfo; _b < _c.length; _b++) {
                var tbl = _c[_b];
                var tblColumnElem = container.appendChild(this.createElement("dxreDebugTableColumnBound", tbl.createRectangle().moveRectangle(layoutPageArea.x + column.x, layoutPageArea.y + column.y)
                    .applyNormalizedOffsetsInside(new offsets_1.Offsets(0, 2, 0, 2)), "" + tbl.logicInfo.grid.table.index));
                for (var _d = 0, _e = tbl.tableRows; _d < _e.length; _d++) {
                    var row = _e[_d];
                    var rowElem = tblColumnElem.appendChild(this.createElement("dxreDebugTableRowBound", row.createRectangle().moveRectangle(-tbl.x, -tbl.y).applyNormalizedOffsetsInside(new offsets_1.Offsets(0, 2, 0, 2)), "" + row.rowIndex));
                    for (var _f = 0, _g = row.rowCells; _f < _g.length; _f++) {
                        var cell = _g[_f];
                        rowElem.appendChild(this.createElement("dxreDebugTableCellBound", cell.createRectangle().moveRectangle(-row.x, -row.y).applyNormalizedOffsetsInside(new offsets_1.Offsets(0, 2, 0, 2)), "" + cell.cellGridIndex));
                    }
                }
            }
        }
    };
    return TableBoundsVisibleInfoHelper;
}(debug_base_visualizer_1.DebugBaseVisualizer));
exports.TableBoundsVisibleInfoHelper = TableBoundsVisibleInfoHelper;
