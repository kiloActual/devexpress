"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var document_renderer_1 = require("../../../../../canvas/renderes/common/document-renderer");
var debug_visualizer_type_1 = require("./debug-visualizer-type");
var layout_bounds_info_helper_1 = require("./layout-bounds-info-helper");
var table_bounds_visible_info_helper_1 = require("./table-bounds-visible-info-helper");
var DebugVisualizerManager = (function () {
    function DebugVisualizerManager(cache) {
        this.vizualizers = {};
        this.containers = {};
        this.cache = cache;
        this.vizualizers[debug_visualizer_type_1.DebugVisualizerType.TableBounds] = new table_bounds_visible_info_helper_1.TableBoundsVisibleInfoHelper();
        this.vizualizers[debug_visualizer_type_1.DebugVisualizerType.LayoutBounds] = new layout_bounds_info_helper_1.LayoutBoundsInfoHelper();
    }
    DebugVisualizerManager.prototype.show = function (vizType, layout, pageIndex) {
        var viz = this.vizualizers[vizType];
        var pageContainer = this.getPageContainer(viz, pageIndex);
        DebugVisualizerManager.clearContainer(pageContainer);
        viz.fillPageContainer(layout, pageContainer, pageIndex);
        document_renderer_1.DocumentRenderer.getServiceContainerCore(this.cache[pageIndex].page).appendChild(pageContainer);
    };
    DebugVisualizerManager.clearContainer = function (container) {
        while (container.firstChild)
            dom_1.DomUtils.hideNode(container.firstChild);
    };
    DebugVisualizerManager.prototype.hide = function (vizType, pageIndex) {
        var viz = this.vizualizers[vizType];
        var currContainer = this.getPageContainer(viz, pageIndex);
        dom_1.DomUtils.hideNode(currContainer);
    };
    DebugVisualizerManager.prototype.hideAll = function (vizType) {
        if (vizType === void 0) { vizType = debug_visualizer_type_1.DebugVisualizerType.None; }
        var viz = this.vizualizers[vizType];
        if (viz) {
            var vizContainers = this.containers[viz.getType()];
            if (vizContainers) {
                list_1.ListUtils.forEach(vizContainers, function (cont) { return dom_1.DomUtils.hideNode(cont); });
                delete this.containers[viz.getType()];
            }
        }
        else {
            number_1.NumberMapUtils.forEach(this.containers, function (vizContainers) {
                return list_1.ListUtils.forEach(vizContainers, function (cont) { return dom_1.DomUtils.hideNode(cont); });
            });
            this.containers = {};
        }
    };
    DebugVisualizerManager.prototype.getPageContainer = function (viz, pageIndex) {
        var vizContainers = this.containers[viz.getType()];
        if (!vizContainers)
            vizContainers = this.containers[viz.getType()] = [];
        var currLen = vizContainers.length;
        while (currLen <= pageIndex)
            currLen = vizContainers.push(document_renderer_1.DocumentRenderer.renderContainer(viz.getContainerClassName()));
        return vizContainers[pageIndex];
    };
    return DebugVisualizerManager;
}());
exports.DebugVisualizerManager = DebugVisualizerManager;
