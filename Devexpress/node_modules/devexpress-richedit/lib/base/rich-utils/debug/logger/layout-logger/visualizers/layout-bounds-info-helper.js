"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var debug_base_visualizer_1 = require("./debug-base-visualizer");
var debug_visualizer_type_1 = require("./debug-visualizer-type");
var LayoutBoundsInfoHelper = (function (_super) {
    tslib_1.__extends(LayoutBoundsInfoHelper, _super);
    function LayoutBoundsInfoHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutBoundsInfoHelper.prototype.getType = function () {
        return debug_visualizer_type_1.DebugVisualizerType.LayoutBounds;
    };
    LayoutBoundsInfoHelper.prototype.getContainerClassName = function () {
        return "dxreDebugLayoutBoundsContainer";
    };
    LayoutBoundsInfoHelper.prototype.fillPageContainer = function (layout, pageContainer, pageIndex) {
        var _this = this;
        var page = layout.pages[pageIndex];
        list_1.ListUtils.forEach(page.mainSubDocumentPageAreas, function (pa) { return _this.drawPageArea(pageContainer, pa); });
        number_1.NumberMapUtils.forEach(page.otherPageAreas, function (pa) { return _this.drawPageArea(pageContainer, pa); });
    };
    LayoutBoundsInfoHelper.prototype.drawPageArea = function (pageContainer, pa) {
        var _this = this;
        var elem = this.createElement("dxreDebugPageAreaBounds", pa);
        list_1.ListUtils.forEach(pa.columns, function (col) { return _this.drawColumn(elem, col); });
        pageContainer.appendChild(elem);
    };
    LayoutBoundsInfoHelper.prototype.drawColumn = function (pageAreaContainer, column) {
        var _this = this;
        var elem = this.createElement("dxreDebugColumnBounds", column);
        list_1.ListUtils.forEach(column.rows, function (row) { return _this.drawRow(elem, row); });
        pageAreaContainer.appendChild(elem);
    };
    LayoutBoundsInfoHelper.prototype.drawRow = function (columnContainer, row) {
        var elem = this.createElement("dxreDebugRowBounds", row);
        columnContainer.appendChild(elem);
    };
    return LayoutBoundsInfoHelper;
}(debug_base_visualizer_1.DebugBaseVisualizer));
exports.LayoutBoundsInfoHelper = LayoutBoundsInfoHelper;
