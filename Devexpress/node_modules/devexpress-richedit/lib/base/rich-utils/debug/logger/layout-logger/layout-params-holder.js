"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var log_source_1 = require("../../../../../core/rich-utils/debug/logger/base-logger/log-source");
var log_source_params_func_handler_1 = require("../../../../../core/rich-utils/debug/logger/base-logger/log-source-params-func-handler");
var model_params_holder_1 = require("../../../../../core/rich-utils/debug/logger/base-logger/model-params-holder");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var diplay_table_bounds_info_source_param_1 = require("./diplay-table-bounds-info-source-param");
var LayoutParamsHolder = (function (_super) {
    tslib_1.__extends(LayoutParamsHolder, _super);
    function LayoutParamsHolder() {
        var _this = _super.call(this) || this;
        _this.listOfCustomBounds = {};
        if (!_this.visualizerManager)
            _this.visualizerManager = null;
        return _this;
    }
    LayoutParamsHolder.prototype.handle = function (logSourceKey) {
        switch (logSourceKey) {
            case log_source_1.LogSource.DiplayPageInfo:
                this.logSourceParams[logSourceKey] = new log_source_params_func_handler_1.LogSourceParamsFuncHandler(false, logSourceKey);
                break;
            case log_source_1.LogSource.DiplayTableBoundsInfo:
                this.logSourceParams[logSourceKey] = new diplay_table_bounds_info_source_param_1.DiplayTableBoundsInfoSourceParam(false, logSourceKey);
                break;
            default: _super.prototype.handle.call(this, logSourceKey);
        }
    };
    LayoutParamsHolder.prototype.clearCustomBounds = function (pageIndex) {
        if (pageIndex === void 0) { pageIndex = -1; }
        if (pageIndex == -1) {
            number_1.NumberMapUtils.forEach(this.listOfCustomBounds, function (pageList) {
                return list_1.ListUtils.forEach(pageList, function (elem) { return dom_1.DomUtils.hideNode(elem); });
            });
            this.listOfCustomBounds = {};
        }
        else {
            var pageList = this.listOfCustomBounds[pageIndex];
            if (pageList) {
                list_1.ListUtils.forEach(pageList, function (elem) { return dom_1.DomUtils.hideNode(elem); });
            }
            delete this.listOfCustomBounds[pageIndex];
        }
    };
    return LayoutParamsHolder;
}(model_params_holder_1.ModelParamsHolder));
exports.LayoutParamsHolder = LayoutParamsHolder;
