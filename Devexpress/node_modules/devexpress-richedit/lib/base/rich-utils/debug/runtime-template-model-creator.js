"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var layout_page_1 = require("../../../core/layout/main-structures/layout-page");
var enums_1 = require("../../../core/model/enums");
var model_iterator_1 = require("../../../core/model/model-iterator");
var run_type_1 = require("../../../core/model/runs/run-type");
var table_cell_properties_1 = require("../../../core/model/tables/properties/table-cell-properties");
var table_properties_1 = require("../../../core/model/tables/properties/table-properties");
var table_row_properties_1 = require("../../../core/model/tables/properties/table-row-properties");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var ManagerParams = (function () {
    function ManagerParams(name, func) {
        if (func === void 0) { func = null; }
        this.name = name;
        this.func = func;
    }
    return ManagerParams;
}());
exports.ManagerParams = ManagerParams;
var ManagerInfo = (function () {
    function ManagerInfo(id, obj) {
        this.id = id;
        this.obj = obj;
    }
    return ManagerInfo;
}());
var SimpleObjectsManager = (function () {
    function SimpleObjectsManager() {
        this.map = {};
        this.createdVariables = [];
    }
    SimpleObjectsManager.prototype.add = function (obj, constructorName, params) {
        if (string_2.StringUtils.startsAt(constructorName, "new "))
            constructorName = constructorName.substr(4);
        var indOfOpenBracket = constructorName.indexOf("(");
        if (indOfOpenBracket == -1)
            indOfOpenBracket = constructorName.length;
        var constructorParams = constructorName.substring(indOfOpenBracket);
        if (!constructorParams.length)
            constructorParams = "()";
        var variablePrefixName = constructorName.charAt(0).toLowerCase() + constructorName.substring(1, indOfOpenBracket);
        var info = this.map[variablePrefixName];
        if (info === undefined)
            info = this.map[variablePrefixName] = [];
        var equalObj;
        if (obj.equals)
            equalObj = list_1.ListUtils.elementBy(info, function (curr) { return curr.obj.equals(obj); });
        if (equalObj)
            return variablePrefixName + "_" + equalObj.id;
        var id = info.length ? list_1.ListUtils.last(info).id + 1 : 0;
        var variableName = variablePrefixName + "_" + id;
        info.push(new ManagerInfo(id, obj));
        var t = [];
        t.push("const " + variableName + ": " + constructorName.substring(0, indOfOpenBracket) + " = new " + constructorName.substr(0, indOfOpenBracket) + constructorParams + ";");
        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
            var p = params_1[_i];
            t.push(variableName + "." + p.name + " = " + (p.func ? p.func() : obj[p.name]) + ";");
        }
        this.createdVariables.push(t.join("\r\n"));
        return variableName;
    };
    return SimpleObjectsManager;
}());
exports.SimpleObjectsManager = SimpleObjectsManager;
var Options = (function () {
    function Options() {
        this.defineBorderInfo = false;
        this.defineTableBorderInfo = false;
        this.defineTableCellBorderInfo = false;
        this.defineFullTableProperties = false;
        this.defineFullTableRowProperties = false;
        this.defineFullTableCellProperties = false;
    }
    Options.prototype.enableSeparateBorderInfo = function () {
        this.defineBorderInfo = true;
        return this;
    };
    Options.prototype.enableSeparateTableBorderInfo = function () {
        this.defineTableBorderInfo = true;
        return this;
    };
    Options.prototype.enableSeparateTableCellBorderInfo = function () {
        this.defineTableCellBorderInfo = true;
        return this;
    };
    Options.prototype.enableFullTableProperties = function () {
        this.defineFullTableProperties = true;
        return this;
    };
    Options.prototype.enableFullTableRowProperties = function () {
        this.defineFullTableRowProperties = true;
        return this;
    };
    Options.prototype.enableFullTableCellProperties = function () {
        this.defineFullTableCellProperties = true;
        return this;
    };
    return Options;
}());
exports.Options = Options;
var Creator = (function () {
    function Creator(model, layout, options) {
        var _this = this;
        if (layout === void 0) { layout = null; }
        if (options === void 0) { options = new Options(); }
        this.layout = layout;
        this.subDocument = model.mainSubDocument;
        this.subDocumentVariableName = Creator.getSubDocumentVariableName(this.subDocument);
        this.model = model;
        this.options = options;
        this.idMap = new SimpleObjectsManager();
        this.tblIndex = 0;
        this.str = [];
        this.fillModel();
        this.str.push(this.subDocumentVariableName + " = model.activeSubDocument;");
        this.fillTables();
        this.fillFields();
        this.fillBookmarks();
        number_1.NumberMapUtils.forEach(this.model.subDocuments, function (sd) {
            if (sd.isMain())
                return;
            _this.subDocumentVariableName = Creator.getSubDocumentVariableName(sd);
            _this.subDocument = sd;
            var parentSubDocumentId = sd.isTextBox() ? sd.info.parentSubDocumentId : -1;
            _this.str.push("const " + _this.subDocumentVariableName + ": SubDocument = TestDocumentModel.addOtherSubDocument(model, SubDocumentInfoType." + enums_1.SubDocumentInfoType[sd.info.getType()] + ", " + parentSubDocumentId + ",");
            _this.str.push("[");
            _this.fillChunks();
            _this.str.push("],");
            _this.str.push("[");
            _this.fillParagraphs();
            _this.str.push("]);");
            _this.fillTables();
            _this.fillFields();
            _this.fillBookmarks();
        });
        this.str.push("layout = new TestLayoutCreator([");
        for (var _i = 0, _a = this.layout.pages; _i < _a.length; _i++) {
            var p = _a[_i];
            this.fillPage(p);
        }
        this.str.push("], model).getLayout();");
    }
    Object.defineProperty(Creator.prototype, "documentModel", {
        get: function () { list_1.ListUtils.addListOnTail(this.idMap.createdVariables, this.str); return this.idMap.createdVariables.join("\r\n"); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Creator.prototype, "tables", {
        get: function () { return this.subDocument.tables; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Creator.prototype, "table", {
        get: function () { return this.tables[this.tblIndex]; },
        enumerable: true,
        configurable: true
    });
    Creator.create = function (model, layout, options) {
        if (layout === void 0) { layout = null; }
        if (options === void 0) { options = new Options(); }
        return new Creator(model, layout, options).documentModel;
    };
    Creator.getSubDocumentVariableName = function (sd) {
        if (sd.isMain())
            return "subDocument";
        var typeAsStr = enums_1.SubDocumentInfoType[sd.info.getType()];
        return "subDocument_" + typeAsStr + "_" + sd.id;
    };
    Creator.prototype.escape = function (str) {
        return str.replace(/\\/g, "\\\\")
            .replace(/"/g, "\\\"");
    };
    Creator.prototype.fillFields = function () {
        var _this = this;
        list_1.ListUtils.forEach(this.subDocument.fields, function (f, ind) {
            _this.str.push("Field.addField(" + _this.subDocumentVariableName + ".fields, new Field(" + _this.subDocumentVariableName + ".positionManager, " + ind + ", " + f.getFieldStartPosition() + ", " + f.getSeparatorPosition() + ", " + f.getFieldEndPosition() + ", " + f.showCode + ",");
            if (f.getHyperlinkInfo())
                _this.str.push("new HyperlinkInfo(\"" + _this.escape(f.getHyperlinkInfo().uri) + "\", \"" + _this.escape(f.getHyperlinkInfo().anchor) + "\", \"" + _this.escape(f.getHyperlinkInfo().tip) + "\", " + f.getHyperlinkInfo().visited + "))); //" + _this.escape(_this.subDocument.getText(f.getAllFieldInterval())));
            else {
                _this.str.push("undefined)); //" + _this.escape(_this.subDocument.getText(f.getAllFieldInterval())));
                _this.mergeLastStrings(2);
            }
        });
    };
    Creator.prototype.fillBookmarks = function () {
        if (!this.subDocument.bookmarks.length)
            return;
        this.str.push(this.subDocumentVariableName + ".bookmarks = [];");
        for (var _i = 0, _a = this.subDocument.bookmarks; _i < _a.length; _i++) {
            var b = _a[_i];
            this.str.push(this.subDocumentVariableName + ".bookmarks.push(new Bookmark(" + this.subDocumentVariableName + ".positionManager, new BoundaryInterval(" + b.start + ", " + b.end + "), \"" + this.escape(b.name) + "\")); //" + this.escape(this.subDocument.getText(b.interval)));
        }
    };
    Creator.prototype.fillModel = function () {
        this.str.push("model = TestDocumentModel.create(");
        this.str.push("[");
        this.fillChunks();
        this.str.push("],");
        this.str.push("[");
        this.fillParagraphs();
        this.str.push("],");
        this.str.push("[");
        this.fillSections();
        this.str.push("]);");
    };
    Creator.prototype.tableWidthUnit = function (w) {
        return "new TableWidthUnit().init(" + w.value + ", TableWidthUnitType." + table_units_1.TableWidthUnitType[w.type] + ")";
    };
    Creator.prototype.borderInfo = function (b) {
        if (this.options.defineBorderInfo)
            return this.idMap.add(b, "BorderInfo", [
                new ManagerParams("colorIndex"),
                new ManagerParams("frame"),
                new ManagerParams("offset"),
                new ManagerParams("shadow"),
                new ManagerParams("style"),
                new ManagerParams("width"),
            ]);
        else
            return "new BorderInfo()";
    };
    Creator.prototype.tableBorders = function (brds) {
        var _this = this;
        if (this.options.defineTableBorderInfo)
            return this.idMap.add(brds, "TableBorders", [
                new ManagerParams("topBorder", function () { return _this.borderInfo(brds.topBorder); }),
                new ManagerParams("rightBorder", function () { return _this.borderInfo(brds.rightBorder); }),
                new ManagerParams("bottomBorder", function () { return _this.borderInfo(brds.bottomBorder); }),
                new ManagerParams("leftBorder", function () { return _this.borderInfo(brds.leftBorder); }),
                new ManagerParams("insideHorizontalBorder", function () { return _this.borderInfo(brds.insideHorizontalBorder); }),
                new ManagerParams("insideVerticalBorder", function () { return _this.borderInfo(brds.insideVerticalBorder); }),
            ]);
        else
            return "new TableBorders()";
    };
    Creator.prototype.asEnum = function (objEnum, objEnumName, mask, excessNullValue) {
        if (excessNullValue === void 0) { excessNullValue = Number.MAX_VALUE; }
        var res = [];
        var isFoundNullValue = false;
        string_1.StringMapUtils.forEach(objEnum, function (obj, key) {
            var keyNum = parseInt(key);
            if (!isNaN(keyNum) && (keyNum & mask) == keyNum) {
                if (excessNullValue != keyNum)
                    res.push(obj);
                else
                    isFoundNullValue = true;
            }
        });
        if (isFoundNullValue && !res.length)
            res.push(objEnum[excessNullValue]);
        return list_1.ListUtils.map(res, function (r) { return objEnumName + "." + r; }).join(" | ");
    };
    Creator.prototype.tableCellMargins = function (cm) {
        var _this = this;
        return this.idMap.add(cm, "TableCellMargins", [
            new ManagerParams("top", function () { return _this.tableWidthUnit(cm.top); }),
            new ManagerParams("bottom", function () { return _this.tableWidthUnit(cm.bottom); }),
            new ManagerParams("left", function () { return _this.tableWidthUnit(cm.left); }),
            new ManagerParams("right", function () { return _this.tableWidthUnit(cm.right); }),
        ]);
    };
    Creator.prototype.tableProperties = function (p) {
        var _this = this;
        if (this.options.defineFullTableProperties)
            return this.idMap.add(p, "TableProperties", [
                new ManagerParams("avoidDoubleBorders"),
                new ManagerParams("backgroundColor"),
                new ManagerParams("borders", function () { return _this.tableBorders(p.borders); }),
                new ManagerParams("bottomFromText"),
                new ManagerParams("cellMargins", function () { return _this.tableCellMargins(p.cellMargins); }),
                new ManagerParams("cellSpacing", function () { return _this.tableWidthUnit(p.cellSpacing); }),
                new ManagerParams("horizontalAlignMode"),
                new ManagerParams("horizontalAnchorType"),
                new ManagerParams("indent", function () { return _this.tableWidthUnit(p.indent); }),
                new ManagerParams("isTableOverlap"),
                new ManagerParams("layoutType", function () { return "TableLayoutType." + table_base_structures_1.TableLayoutType[p.layoutType]; }),
                new ManagerParams("leftFromText"),
                new ManagerParams("mask", function () { return _this.asEnum(table_properties_1.TablePropertiesMask, "TablePropertiesMask", p.mask, table_properties_1.TablePropertiesMask.UseNone); }),
                new ManagerParams("rightFromText"),
                new ManagerParams("tableHorizontalPosition"),
                new ManagerParams("tableRowAlignment"),
                new ManagerParams("tableStyleColumnBandSize"),
                new ManagerParams("tableStyleRowBandSize"),
                new ManagerParams("tableVerticalPosition"),
                new ManagerParams("textWrapping"),
                new ManagerParams("topFromText"),
                new ManagerParams("verticalAlignMode"),
                new ManagerParams("verticalAnchorType"),
            ]);
        else
            return this.idMap.add(p, "TableProperties", [
                new ManagerParams("cellMargins", function () { return _this.tableCellMargins(p.cellMargins); }),
                new ManagerParams("cellSpacing", function () { return _this.tableWidthUnit(p.cellSpacing); }),
                new ManagerParams("indent", function () { return _this.tableWidthUnit(p.indent); }),
                new ManagerParams("layoutType", function () { return "TableLayoutType." + table_base_structures_1.TableLayoutType[p.layoutType]; }),
                new ManagerParams("mask", function () { return _this.asEnum(table_properties_1.TablePropertiesMask, "TablePropertiesMask", p.mask, table_properties_1.TablePropertiesMask.UseNone); }),
            ]);
    };
    Creator.prototype.tableLookTypes = function (lt) {
        return this.asEnum(table_base_structures_1.TableLookTypes, "TableLookTypes", lt, table_base_structures_1.TableLookTypes.None);
    };
    Creator.prototype.tableStyle = function (_s) {
        return "new TableStyle(\"name\", \"name\", false, false, false, false, {}, null, null)";
    };
    Creator.prototype.tableRowProperties = function (prop) {
        var _this = this;
        if (this.options.defineFullTableRowProperties)
            return this.idMap.add(prop, "TableRowProperties", [
                new ManagerParams("cantSplit"),
                new ManagerParams("cellSpacing", function () { return _this.tableWidthUnit(prop.cellSpacing); }),
                new ManagerParams("divId"),
                new ManagerParams("header"),
                new ManagerParams("hideCellMark"),
                new ManagerParams("mask", function () { return _this.asEnum(table_row_properties_1.TableRowPropertiesMask, "TableRowPropertiesMask", prop.mask, table_row_properties_1.TableRowPropertiesMask.UseNone); }),
                new ManagerParams("tableRowAlignment"),
            ]);
        else
            return this.idMap.add(prop, "TableRowProperties", [
                new ManagerParams("cellSpacing", function () { return _this.tableWidthUnit(prop.cellSpacing); }),
                new ManagerParams("mask", function () { return _this.asEnum(table_row_properties_1.TableRowPropertiesMask, "TableRowPropertiesMask", prop.mask, table_row_properties_1.TableRowPropertiesMask.UseNone); }),
            ]);
    };
    Creator.prototype.tblCellRuns = function (c) {
        var nextLevel = this.subDocument.tablesByLevels[this.table.nestedLevel + 1];
        if (!nextLevel)
            nextLevel = [];
        var cellInterval = c.interval;
        var internalTables = list_1.ListUtils.reducedMap(nextLevel, function (t) {
            return algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(t.interval, cellInterval) ? t : null;
        });
        var isNeedChunkIndex = this.subDocument.chunks.length > 1;
        var it = new model_iterator_1.ModelIterator(this.subDocument, false);
        it.setPosition(cellInterval.start);
        var runStr = [];
        var _loop_1 = function () {
            var pos = it.getAbsolutePosition();
            if (pos >= cellInterval.end)
                return "break";
            var curr = new fixed_1.FixedInterval(pos, it.run.getLength());
            if (list_1.ListUtils.allOf(internalTables, function (t) { return !algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(t.interval, curr); }))
                runStr.push(isNeedChunkIndex ? "[" + it.chunkIndex + ", " + it.runIndex + "]" : "" + it.runIndex);
        };
        do {
            var state_1 = _loop_1();
            if (state_1 === "break")
                break;
        } while (it.moveToNextRun());
        this.str.push("[" + runStr.join(", ") + "],");
    };
    Creator.prototype.tableCellborders = function (brds) {
        var _this = this;
        if (this.options.defineTableCellBorderInfo)
            return this.idMap.add(brds, "TableCellBorders", [
                new ManagerParams("topBorder", function () { return _this.borderInfo(brds.topBorder); }),
                new ManagerParams("rightBorder", function () { return _this.borderInfo(brds.rightBorder); }),
                new ManagerParams("bottomBorder", function () { return _this.borderInfo(brds.bottomBorder); }),
                new ManagerParams("leftBorder", function () { return _this.borderInfo(brds.leftBorder); }),
                new ManagerParams("topLeftDiagonalBorder", function () { return _this.borderInfo(brds.topLeftDiagonalBorder); }),
                new ManagerParams("topRightDiagonalBorder", function () { return _this.borderInfo(brds.topRightDiagonalBorder); }),
            ]);
        else
            return "new TableCellBorders()";
    };
    Creator.prototype.tableCellProperties = function (prop) {
        var _this = this;
        if (this.options.defineFullTableCellProperties)
            return this.idMap.add(prop, "TableCellProperties", [
                new ManagerParams("backgroundColor"),
                new ManagerParams("borders", function () { return _this.tableCellborders(prop.borders); }),
                new ManagerParams("cellMargins", function () { return _this.tableCellMargins(prop.cellMargins); }),
                new ManagerParams("fitText"),
                new ManagerParams("foreColor"),
                new ManagerParams("hideCellMark"),
                new ManagerParams("mask", function () { return _this.asEnum(table_cell_properties_1.TableCellPropertiesMask, "TableCellPropertiesMask", prop.mask, table_cell_properties_1.TableCellPropertiesMask.UseNone); }),
                new ManagerParams("noWrap"),
                new ManagerParams("shading"),
                new ManagerParams("textDirection"),
                new ManagerParams("verticalAlignment"),
            ]);
        else
            return this.idMap.add(prop, "TableCellProperties", [
                new ManagerParams("cellMargins", function () { return _this.tableCellMargins(prop.cellMargins); }),
                new ManagerParams("mask", function () { return _this.asEnum(table_cell_properties_1.TableCellPropertiesMask, "TableCellPropertiesMask", prop.mask, table_cell_properties_1.TableCellPropertiesMask.UseNone); }),
            ]);
    };
    Creator.prototype.internalTables = function (c) {
        var nextLevel = this.subDocument.tablesByLevels[this.table.nestedLevel + 1];
        if (nextLevel) {
            var cellInterval_1 = c.interval;
            var tbls = list_1.ListUtils.reducedMap(nextLevel, function (t) {
                return algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(t.interval, cellInterval_1) ? t : null;
            });
            if (tbls.length) {
                this.str.push("[");
                for (var _i = 0, tbls_1 = tbls; _i < tbls_1.length; _i++) {
                    var t = tbls_1[_i];
                    this.fillTable(t.index);
                }
                this.str.push("],");
                return true;
            }
        }
        this.str.push("[],");
        return false;
    };
    Creator.prototype.mergeLastStrings = function (num) {
        this.str.push(this.str.splice(this.str.length - num, num).join(" "));
    };
    Creator.prototype.tableCells = function (cells) {
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var c = cells_1[_i];
            this.str.push("new MockTableCell(");
            this.tblCellRuns(c),
                this.str.push(c.columnSpan + ",");
            this.str.push("TableCellMergingState." + table_base_structures_1.TableCellMergingState[c.verticalMerging] + ",");
            this.mergeLastStrings(4);
            var intTbls = this.internalTables(c);
            if (!intTbls)
                this.mergeLastStrings(2);
            this.str.push(this.tableWidthUnit(c.preferredWidth) + ",");
            this.str.push(this.tableCellProperties(c.properties) + "),");
            this.mergeLastStrings(intTbls ? 2 : 3);
        }
    };
    Creator.prototype.fillTableRows = function () {
        for (var _i = 0, _a = this.table.rows; _i < _a.length; _i++) {
            var r = _a[_i];
            this.str.push("new MockTableRow(" + r.gridBefore + ", " + r.gridAfter + ", [");
            this.tableCells(r.cells);
            this.str.push("],");
            this.str.push("new TableHeightUnit().init(" + r.height.value + ", TableHeightUnitType." + table_units_1.TableHeightUnitType[r.height.type] + "),");
            this.str.push(this.tableRowProperties(r.properties) + ",");
            this.str.push(this.tableWidthUnit(r.widthBefore) + ",");
            this.str.push(this.tableWidthUnit(r.widthAfter) + ",");
            this.str.push("true),");
            this.mergeLastStrings(6);
        }
    };
    Creator.prototype.fillTable = function (tInd) {
        var oldInd = this.tblIndex;
        this.tblIndex = tInd;
        this.str.push("new MockTable([");
        this.fillTableRows();
        this.str.push("],");
        this.str.push(this.tableWidthUnit(this.table.preferredWidth) + ",");
        this.str.push(this.tableProperties(this.table.properties) + ",");
        this.str.push(this.tableLookTypes(this.table.lookTypes) + ",");
        this.str.push(this.tableStyle(this.table.style) + "),");
        this.tblIndex = oldInd;
    };
    Creator.prototype.fillTables = function () {
        if (!this.tables.length)
            return;
        this.str.push("new ImposeTableHelper(" + this.subDocumentVariableName + ", [");
        for (var _i = 0, _a = this.subDocument.tablesByLevels[0]; _i < _a.length; _i++) {
            var t = _a[_i];
            this.fillTable(t.index);
        }
        this.str.push("]);");
    };
    Creator.prototype.fillSections = function () {
        for (var _i = 0, _a = this.model.sections; _i < _a.length; _i++) {
            var _s = _a[_i];
            this.str.push("new MockSection(0),");
        }
    };
    Creator.prototype.fillParagraphs = function () {
        for (var _i = 0, _a = this.subDocument.paragraphs; _i < _a.length; _i++) {
            var _p = _a[_i];
            this.str.push("new MockParagraph(0, 0, -1, -1),");
        }
    };
    Creator.prototype.fillChunks = function () {
        for (var _i = 0, _a = this.subDocument.chunks; _i < _a.length; _i++) {
            var c = _a[_i];
            this.str.push("[");
            this.fillRuns(c);
            this.str.push("]");
        }
    };
    Creator.prototype.size = function (s) {
        return "new Size(" + s.width + ", " + s.height + ")";
    };
    Creator.prototype.point = function (p) {
        return "new Point(" + p.x + ", " + p.y + ")";
    };
    Creator.prototype.anchorInfo = function (obj) {
        var _this = this;
        return this.idMap.add(obj, "AnchorInfo", [
            new ManagerParams("allowOverlap"),
            new ManagerParams("topDistance"),
            new ManagerParams("bottomDistance"),
            new ManagerParams("leftDistance"),
            new ManagerParams("rightDistance"),
            new ManagerParams("hidden"),
            new ManagerParams("horizontalPositionAlignment"),
            new ManagerParams("horizontalPositionType"),
            new ManagerParams("isBehindDoc"),
            new ManagerParams("layoutTableCell"),
            new ManagerParams("locked"),
            new ManagerParams("offset", function () { return _this.point(obj.offset); }),
            new ManagerParams("percentOffset", function () { return _this.point(obj.percentOffset); }),
            new ManagerParams("verticalPositionAlignment"),
            new ManagerParams("verticalPositionType"),
            new ManagerParams("wrapSide"),
            new ManagerParams("wrapType"),
            new ManagerParams("zOrder"),
        ]);
    };
    Creator.prototype.shape = function (s) {
        return "new Shape(" + s.fillColor + ", " + s.outlineColor + ", " + s.outlineWidth + ")";
    };
    Creator.prototype.textBoxProps = function (props) {
        return this.idMap.add(props, "new TextBoxProperties(new Margins(" + props.leftMargin + ", " + props.rightMargin + ", " + props.topMargin + ", " + props.bottomMargin + "))", [
            new ManagerParams("resizeShapeToFitText"),
            new ManagerParams("upright"),
            new ManagerParams("verticalAlignment"),
            new ManagerParams("wrapText"),
        ]);
    };
    Creator.prototype.fillRuns = function (c) {
        for (var _i = 0, _a = c.textRuns; _i < _a.length; _i++) {
            var r = _a[_i];
            switch (r.getType()) {
                case run_type_1.RunType.TextRun: {
                    var run = r;
                    this.str.push("new MockTextRun(0, 0, \"" + this.escape(c.getTextInChunk(run.startOffset, run.length)) + "\"),");
                    break;
                }
                case run_type_1.RunType.ParagraphRun: {
                    this.str.push("new MockParagraphRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.SectionRun: {
                    this.str.push("new MockSectionRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.AnchoredPictureRun: {
                    var run = r;
                    var size = "new PictureSize(" + run.size.lockAspectRatio + ", " + run.size.rotation + ", " + this.size(run.size.originalSize) + ", " + this.size(run.size.scale) + ")";
                    this.str.push("new MockAnchoredPictureRun(0, 0, " + this.shape(run.shape) + ", " + run.cacheInfo.currId + ", " + size + ", " + this.anchorInfo(run.anchorInfo) + ", " + run.cacheInfo.isLoaded + "),");
                    break;
                }
                case run_type_1.RunType.AnchoredTextBoxRun: {
                    var run = r;
                    var size = "new AnchorTextBoxSize(" + run.size.lockAspectRatio + ", " + run.size.rotation + ", " + this.size(run.size.absoluteSize) + ", " + this.size(run.size.relativeSize) + ", " + run.size.relativeWidthType + ", " + run.size.relativeHeightType + ", " + run.size.useAbsoluteWidth() + ", " + run.size.useAbsoluteHeight() + ")";
                    this.str.push("new MockAnchoredTextBoxRun(0, 0, " + this.shape(run.shape) + ", " + run.subDocId + ", " + size + ", " + this.anchorInfo(run.anchorInfo) + ", " + this.textBoxProps(run.textBoxProperties) + "),");
                    break;
                }
                case run_type_1.RunType.FieldCodeEndRun: {
                    this.str.push("new MockFieldCodeEndRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.FieldCodeStartRun: {
                    this.str.push("new MockFieldCodeStartRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.FieldResultEndRun: {
                    this.str.push("new MockFieldResultEndRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.InlinePictureRun: {
                    var run = r;
                    var size = "new PictureSize(" + run.size.lockAspectRatio + ", " + run.size.rotation + ", " + this.size(run.size.originalSize) + ", " + this.size(run.size.scale) + ")";
                    this.str.push("new MockInlinePictureRun(0, 0, " + this.shape(run.shape) + ", " + run.cacheInfo.currId + ", " + size + ", " + run.cacheInfo.isLoaded + "),");
                    break;
                }
                case run_type_1.RunType.LayoutDependentRun: {
                    this.str.push("new MockLayoutDependentRun(0, 0),");
                    break;
                }
                case run_type_1.RunType.EndNoteRun:
                case run_type_1.RunType.FootNoteRun:
                case run_type_1.RunType.NoteSeparatorRun:
                case run_type_1.RunType.NoteContinuationSeparatorRun:
                case run_type_1.RunType.Undefined:
                case run_type_1.RunType.InlineTextBoxRun:
                default: throw new Error("NotSupportedRun");
            }
            this.str.push("// [" + (c.startLogPosition.value + r.startOffset) + ", " + (c.startLogPosition.value + r.startOffset + r.getLength()) + "]");
            this.mergeLastStrings(2);
        }
    };
    Creator.prototype.pushRectangleProps = function (prefix, r) {
        this.str.push(prefix + "Width: " + r.width + ",");
        this.str.push(prefix + "Height: " + r.height + ",");
        this.str.push(prefix + "X: " + r.x + ",");
        this.str.push(prefix + "Y: " + r.y + ",");
        this.mergeLastStrings(4);
    };
    Creator.prototype.fillPage = function (page) {
        var _this = this;
        this.str.push("{");
        this.pushRectangleProps("page", page);
        this.str.push("pageStartPosition: " + page.getPosition() + ",");
        this.str.push("pageIsContentValid: " + true + ",");
        this.str.push("pageIsFirstInSection: " + page.flags.get(layout_page_1.LayoutPageFlags.IsFirstPageOfSection) + ",");
        this.str.push("pageCalculateIntervals: " + true + ",");
        this.mergeLastStrings(4);
        this.str.push("pagePageAreas: [");
        for (var _i = 0, _a = page.mainSubDocumentPageAreas; _i < _a.length; _i++) {
            var pa = _a[_i];
            this.fillPageArea(pa);
        }
        number_1.NumberMapUtils.forEach(page.otherPageAreas, function (pa) {
            return _this.fillPageArea(pa);
        });
        this.str.push("]},");
    };
    Creator.prototype.fillPageArea = function (pa) {
        this.str.push("{");
        this.pushRectangleProps("pageArea", pa);
        this.str.push("pageAreaSubDocument: " + Creator.getSubDocumentVariableName(pa.subDocument) + ",");
        this.str.push("pageAreaPageOffset: " + pa.pageOffset + ",");
        this.str.push("pageAreaColumns: [");
        this.mergeLastStrings(3);
        for (var _i = 0, _a = pa.columns; _i < _a.length; _i++) {
            var c = _a[_i];
            this.fillColumn(c);
        }
        this.str.push("]},");
    };
    Creator.prototype.fillColumn = function (c) {
        this.str.push("{");
        this.pushRectangleProps("column", c);
        this.str.push("columnParagraphFrames: [],");
        this.str.push("columnPageAreaOffset: " + c.pageAreaOffset + ",");
        this.str.push("columnRows: [");
        this.mergeLastStrings(3);
        for (var _i = 0, _a = c.rows; _i < _a.length; _i++) {
            var r = _a[_i];
            this.fillRow(r);
        }
        this.str.push("]},");
    };
    Creator.prototype.fillRow = function (r) {
        this.str.push("{");
        this.pushRectangleProps("row", r);
        this.str.push("rowBaseLine: " + r.baseLine + ",");
        this.str.push("rowSpacingBefore: " + r.getSpacingBefore() + ",");
        this.str.push("rowSpacingAfter: " + r.getSpacingAfter() + ",");
        this.str.push("rowNumberingListBox: " + r.numberingListBox + ",");
        this.str.push("rowColumnOffset: " + r.columnOffset + ",");
        this.mergeLastStrings(5);
        this.str.push("rowBoxes: [");
        for (var _i = 0, _a = r.boxes; _i < _a.length; _i++) {
            var b = _a[_i];
            this.fillBox(b);
        }
        this.str.push("]},");
    };
    Creator.prototype.fillBox = function (b) {
        var str = "{ width: " + b.width + ", height: " + b.height + ", type: LayoutBoxType." + layout_box_1.LayoutBoxType[b.getType()] + ", charProp: null, getAscent: () => " + b.getAscent() + ", getDescent: () => " + b.getDescent();
        switch (b.getType()) {
            case layout_box_1.LayoutBoxType.Text:
                str += ", text: \"" + this.escape(b.text) + "\" },";
                break;
            case layout_box_1.LayoutBoxType.Dash:
                str += ", text: \"" + this.escape(b.text) + "\" },";
                break;
            case layout_box_1.LayoutBoxType.Picture:
                str += ", id: " + b.cacheInfo.currId + " },";
                break;
            case layout_box_1.LayoutBoxType.Space:
            case layout_box_1.LayoutBoxType.TabSpace:
            case layout_box_1.LayoutBoxType.LineBreak:
            case layout_box_1.LayoutBoxType.PageBreak:
            case layout_box_1.LayoutBoxType.ColumnBreak:
            case layout_box_1.LayoutBoxType.ParagraphMark:
                str += " },";
                break;
        }
        this.str.push(str);
    };
    return Creator;
}());
exports.Creator = Creator;
