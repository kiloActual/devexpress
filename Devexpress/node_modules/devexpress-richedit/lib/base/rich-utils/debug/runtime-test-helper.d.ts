import { DocumentLayout } from '../../../core/layout/document-layout';
import { LayoutPage } from '../../../core/layout/main-structures/layout-page';
import { LayoutTableCellInfo } from '../../../core/layout/table/layout-table-cell-info';
import { DocumentModel } from '../../../core/model/document-model';
import { AnchorInfo } from '../../../core/model/floating-objects/anchor-info';
import { SubDocument } from '../../../core/model/sub-document';
import { Table } from '../../../core/model/tables/main-structures/table';
import { TableConditionalStyle } from '../../../core/model/tables/styles/table-conditional-style';
import { TableStyle } from '../../../core/model/tables/styles/table-style';
import { IRichEditControl } from '../../interfaces/i-rich-edit-core';
import { Selection } from '../../selection/selection';
export declare class TEST_CLASS {
    static pagesIntervals(control: IRichEditControl): void;
    static pageIntervals(page: LayoutPage): string;
    static getLayoutPosition(control: IRichEditControl, pos: number): import("../../../../core/src/layout/layout-position").LayoutPosition;
    static recalcPageIntervals(control: IRichEditControl): void;
    static clearAllRunMergedProperties(control: IRichEditControl): void;
    static checkLayoutPage(layout: DocumentLayout, page: LayoutPage): void;
    static checkLayout(_model: DocumentModel, layout: DocumentLayout): void;
    static checkModel(model: DocumentModel): void;
    static getPlaceActualTableProperties(table: Table, prefix?: string): void;
    static getTableStructure(subDocument: SubDocument, index: number): string;
    static getTableIndexesInfoByLayoutCell(cellInfo: LayoutTableCellInfo): TEST_TABLE_INFO;
    static anchorInfoToString(ancInfo: AnchorInfo): string;
    static selectionInfo(selection: Selection): string;
}
export declare class TEST_CLASS_PROPS_ANALYZE {
    static analyzeContainer<TProp, TEnum, TPropsContainer>(container: TPropsContainer, getPropFromContainer: (container: TPropsContainer) => TProp, enumObject: any, enumProperty: TEnum): string;
    static analyzeTableConditionalStyles<TContainer, TContainerEnum>(tableStyle: TableStyle, getContainerFromCondStyle: (tblCondStyle: TableConditionalStyle) => TContainer, getValue: (container: TContainer) => any, enumObject: any, enumProperty: TContainerEnum): string;
    static analyzeTableConditionalStyleByCharacterPropertyFontSize(tableStyle: TableStyle): string;
    static analyzeTableConditionalStyleByCharacterPropertyColor(tableStyle: TableStyle): string;
}
export declare class BOX_ITERATOR_VISUALIZER {
    private it;
    private control;
    private canRunNext;
    private canRunPrev;
    constructor(control: IRichEditControl);
    reset(): void;
    next(): boolean;
    prev(): boolean;
}
export declare class TEST_TABLE_INFO {
    modelTableIndex: number;
    nestedLevel: number;
    layoutRowIndex: number;
    layoutCellIndex: number;
    toString(): string;
}
//# sourceMappingURL=runtime-test-helper.d.ts.map
