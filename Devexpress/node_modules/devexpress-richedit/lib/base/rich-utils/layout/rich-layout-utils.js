"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_position_1 = require("../../../core/layout/layout-position");
var insert_text_manipulator_params_1 = require("../../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var selection_history_item_1 = require("../../model/history/selection/selection-history-item");
var RichLayoutUtils = (function () {
    function RichLayoutUtils() {
    }
    RichLayoutUtils.getAllowedSizeForImage = function (subDocument, layoutFormatterManager, selection, logPosition) {
        var layoutPosition = layout_position_1.LayoutPosition.ensure(layoutFormatterManager, selection, subDocument, logPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        var allowedSize = layoutPosition.column.createSize().applyConverter(unit_converter_1.UnitConverter.pixelsToTwips);
        if (layoutPosition.row.tableCellInfo)
            allowedSize.width = Math.min(unit_converter_1.UnitConverter.pixelsToTwips(layoutPosition.row.tableCellInfo.avaliableContentWidth), allowedSize.width);
        return allowedSize;
    };
    RichLayoutUtils.modifyTextUnderCursor = function (control, text) {
        var subDocument = control.selection.activeSubDocument;
        var position = control.selection.lastSelectedInterval.start;
        var startInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(control.layout, subDocument, control.selection, position);
        var startIntervalLayoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(control.layout, subDocument, startInterval, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(control.layout, subDocument, startInterval, control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(control.selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
        if (startIntervalLayoutPosition.isLastBoxInRow())
            startInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(control.layout, subDocument, control.selection, position - 1);
        var endInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(control.layout, subDocument, control.selection, startInterval, false);
        var intervalForModify = new fixed_1.FixedInterval(startInterval, endInterval - startInterval);
        var charBundle = control.inputPosition.charPropsBundle;
        control.modelManager.history.beginTransaction();
        control.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, intervalForModify), true, false);
        var result = control.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, intervalForModify.start), charBundle, run_type_1.RunType.TextRun, text));
        control.modelManager.history.addAndRedo(new selection_history_item_1.SelectionHistoryItem(control.modelManager.modelManipulator, control.selection, control.selection.getState(), control.selection.getState().setPosition(result.insertedInterval.end)));
        control.modelManager.history.endTransaction();
    };
    return RichLayoutUtils;
}());
exports.RichLayoutUtils = RichLayoutUtils;
