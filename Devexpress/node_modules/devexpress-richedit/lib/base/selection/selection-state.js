"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var linked_interval_1 = require("../../core/model/position/linked-interval");
var selection_intervals_info_1 = require("../../core/selection/selection-intervals-info");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var SelectionState = (function () {
    function SelectionState(intervalsInfo, forwardDirection, endOfLine, pageIndex) {
        this.forwardDirection = true;
        this.endOfLine = false;
        this.keepX = -1;
        this.pageIndex = -1;
        this.intervalsInfo = intervalsInfo.clone();
        this.forwardDirection = forwardDirection;
        this.endOfLine = endOfLine;
        this.pageIndex = pageIndex;
    }
    Object.defineProperty(SelectionState.prototype, "interval", {
        get: function () { return this.intervalsInfo.interval; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SelectionState.prototype, "anchorPostion", {
        get: function () { return this.forwardDirection ? this.interval.start : this.interval.end; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionState.prototype, "activePostion", {
        get: function () { return this.forwardDirection ? this.interval.end : this.interval.start; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectionState.prototype, "reversedAnchorPostion", {
        get: function () { return this.forwardDirection ? this.interval.end : this.interval.start; },
        enumerable: true,
        configurable: true
    });
    SelectionState.prototype.setEndOfLine = function (endOfLine) {
        this.endOfLine = endOfLine;
        return this;
    };
    SelectionState.prototype.resetKeepX = function () {
        this.keepX = -1;
        return this;
    };
    SelectionState.prototype.setKeepX = function (keepX) {
        this.keepX = keepX;
        return this;
    };
    SelectionState.prototype.setForwardDirection = function (fd) {
        this.forwardDirection = fd;
        return this;
    };
    SelectionState.prototype.setInterval = function (interval) {
        this.intervalsInfo.intervals = [this.getNormalizedLastInterval(interval)];
        return this;
    };
    SelectionState.prototype.setIntervals = function (intervals) {
        this.intervalsInfo.intervals = intervals;
        return this;
    };
    SelectionState.prototype.setPosition = function (pos) {
        this.intervalsInfo.position = pos;
        return this;
    };
    SelectionState.prototype.addInterval = function (interval) {
        if (this.intervalsInfo.isCollapsed)
            this.intervalsInfo.interval = interval;
        else
            this.intervalsInfo.lastIntervalIndex = this.intervalsInfo.intervals.push(this.getNormalizedLastInterval(interval)) - 1;
        return this;
    };
    SelectionState.prototype.extendLastInterval = function (end) {
        var oldAnchor = this.anchorPostion;
        this.interval.start = Math.min(oldAnchor, end);
        this.interval.length = Math.abs(oldAnchor - end);
        this.forwardDirection = end >= oldAnchor;
        return this;
    };
    SelectionState.prototype.setPageIndex = function (pageIndex) {
        this.pageIndex = pageIndex;
        return this;
    };
    SelectionState.prototype.setSubDocument = function (subDocument) {
        this.intervalsInfo.subDocument = subDocument;
        return this;
    };
    SelectionState.prototype.getNormalizedLastInterval = function (interval) {
        this.forwardDirection = interval.length >= 0;
        return this.forwardDirection ? interval : new fixed_1.FixedInterval(interval.end, interval.start);
    };
    SelectionState.getDefault = function (activeSubDocument) {
        return new SelectionState(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(activeSubDocument, 0), true, false, -1);
    };
    SelectionState.prototype.clone = function () {
        return new SelectionState(this.intervalsInfo.clone(), this.forwardDirection, this.endOfLine, this.pageIndex);
    };
    SelectionState.prototype.equals = function (obj) {
        return this.partiallyEquals(obj) &&
            list_1.ListUtils.equals(this.intervalsInfo.intervals, obj.intervalsInfo.intervals);
    };
    SelectionState.prototype.partiallyEquals = function (obj) {
        return obj &&
            this.keepX == obj.keepX &&
            this.forwardDirection == obj.forwardDirection &&
            this.endOfLine == obj.endOfLine &&
            this.intervalsInfo.lastIntervalIndex == obj.intervalsInfo.lastIntervalIndex &&
            this.pageIndex == obj.pageIndex;
    };
    return SelectionState;
}());
exports.SelectionState = SelectionState;
var SelectionFloatingState = (function () {
    function SelectionFloatingState(state) {
        this.state = state;
        this.linkedIntervals = list_1.ListUtils.map(state.intervalsInfo.intervals, function (curr) { return new linked_interval_1.LinkedInterval(state.intervalsInfo.subDocument.positionManager, curr); });
    }
    SelectionFloatingState.prototype.finalize = function () {
        var intervals = [];
        for (var _i = 0, _a = this.linkedIntervals; _i < _a.length; _i++) {
            var interval = _a[_i];
            intervals.push(interval.getFixedInterval());
            interval.destructor(this.state.intervalsInfo.subDocument.positionManager);
        }
        this.linkedIntervals = [];
        this.state.intervalsInfo.intervals = intervals;
        return this.state;
    };
    return SelectionFloatingState;
}());
exports.SelectionFloatingState = SelectionFloatingState;
