import { EventDispatcher } from '../../base-utils/event-dispatcher';
import { DocumentLayout } from '../../core/layout/document-layout';
import { DocumentModel } from '../../core/model/document-model';
import { SubDocument, SubDocumentInterval, SubDocumentIntervals } from '../../core/model/sub-document';
import { SelectedTableInfo } from '../../core/selection/selected-cells-engine';
import { SelectedSpecialRunInfo } from '../../core/selection/selected-special-run-info';
import { ISelectionBase } from '../../core/selection/selection-base';
import { SelectionIntervalsInfo } from '../../core/selection/selection-intervals-info';
import { BatchUpdatableObject } from '@devexpress/utils/lib/class/batch-updatable';
import { FixedInterval } from '@devexpress/utils/lib/intervals/fixed';
import { ModelScrollManager } from '../scroll/model-scroll-manager';
import { IMisspelledSelectionChangesListener, ISearchSelectionChangesListener, ISelectionChangesListener } from './i-selection-changes-listener';
import { InputPosition } from './input-position';
import { SelectionFloatingState, SelectionState } from './selection-state';
import { SetSelectionParams } from './set-selection-params';
export declare class SetSelectionStateOptions {
    correctIntervalDueToFields: boolean;
    correctIntervalDueToTables: boolean;
    useFieldUiChecks: boolean;
    isForceUpdate: boolean;
    noFieldCorrect(): this;
    noTablesCorrect(): this;
    noFieldUiChecks(): this;
    forceUpdate(): this;
}
export declare class Selection extends BatchUpdatableObject implements ISelectionBase {
    private _prevState;
    private _state;
    isCollapsed(): boolean;
    model: DocumentModel;
    layout: DocumentLayout;
    scrollManager: ModelScrollManager;
    searchIntervals: FixedInterval[];
    misspelledIntervals: FixedInterval[];
    onChanged: EventDispatcher<ISelectionChangesListener>;
    onSearchChanged: EventDispatcher<ISearchSelectionChangesListener>;
    onMisspelledSelectionChanged: EventDispatcher<IMisspelledSelectionChangesListener>;
    inputPosition: InputPosition;
    constructor(model: DocumentModel, layout: DocumentLayout, activeSubDocument: SubDocument);
    dispose(): void;
    setSelection(params: SetSelectionParams): void;
    getState(): SelectionState;
    changeState(changeState: (newState: SelectionState) => void, options?: SetSelectionStateOptions): boolean;
    setState(newState: SelectionState, options?: SetSelectionStateOptions): boolean;
    correctAfterTextBufferChanged(): void;
    getFloatingState(): SelectionFloatingState;
    restoreFloatingState(state: SelectionFloatingState): void;
    setSearchSelectionIntervals(intervals: FixedInterval[]): void;
    resetSearchSelection(): void;
    onUpdateUnlocked(occurredEvents: number): void;
    setMisspelledSelectionIntervals(intervals: FixedInterval[]): void;
    raiseSelectionChanged(): void;
    raiseSearchSelectionChanged(): void;
    raiseMisspelledSelectionChanged(): void;
    deprecatedSetSelection(firstPosition: number, secondPosition: number, endOfLine: boolean, keepX: number, _upd: boolean, correctIntervalDueToFields?: boolean, correctIntervalDueToTables?: boolean, visibleModelPosition?: number, useFieldUiChecks?: boolean): void;
    shouldResetInputPosition(): boolean;
    resetInputPositionIfNeeded(): void;
    readonly currState: SelectionState;
    keepX: number;
    forwardDirection: boolean;
    endOfLine: boolean;
    pageIndex: number;
    readonly intervals: FixedInterval[];
    readonly activeSubDocument: SubDocument;
    readonly lastSelectedInterval: FixedInterval;
    readonly intervalsInfo: SelectionIntervalsInfo;
    readonly prevState: SelectionState;
    readonly multiselection: boolean;
    readonly anchorPosition: number;
    readonly reversedAnchorPostion: number;
    readonly subDocumentIntervals: SubDocumentIntervals;
    readonly subDocumentInterval: SubDocumentInterval;
    readonly specialRunInfo: SelectedSpecialRunInfo;
    readonly tableInfo: SelectedTableInfo;
}
//# sourceMappingURL=selection.d.ts.map
