"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var event_dispatcher_1 = require("../../base-utils/event-dispatcher");
var field_1 = require("../../core/model/fields/field");
var sub_document_1 = require("../../core/model/sub-document");
var selected_cells_engine_1 = require("../../core/selection/selected-cells-engine");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var model_scroll_manager_1 = require("../scroll/model-scroll-manager");
var model_states_1 = require("../scroll/model-states");
var selection_state_1 = require("./selection-state");
var SetSelectionStateOptions = (function () {
    function SetSelectionStateOptions() {
        this.correctIntervalDueToFields = true;
        this.correctIntervalDueToTables = true;
        this.useFieldUiChecks = true;
        this.isForceUpdate = false;
    }
    SetSelectionStateOptions.prototype.noFieldCorrect = function () {
        this.correctIntervalDueToFields = false;
        return this;
    };
    SetSelectionStateOptions.prototype.noTablesCorrect = function () {
        this.correctIntervalDueToTables = false;
        return this;
    };
    SetSelectionStateOptions.prototype.noFieldUiChecks = function () {
        this.useFieldUiChecks = false;
        return this;
    };
    SetSelectionStateOptions.prototype.forceUpdate = function () {
        this.isForceUpdate = true;
        return this;
    };
    return SetSelectionStateOptions;
}());
exports.SetSelectionStateOptions = SetSelectionStateOptions;
var Selection = (function (_super) {
    tslib_1.__extends(Selection, _super);
    function Selection(model, layout, activeSubDocument) {
        var _this = _super.call(this) || this;
        _this.searchIntervals = [];
        _this.misspelledIntervals = [];
        _this.onChanged = new event_dispatcher_1.EventDispatcher();
        _this.onSearchChanged = new event_dispatcher_1.EventDispatcher();
        _this.onMisspelledSelectionChanged = new event_dispatcher_1.EventDispatcher();
        _this.model = model;
        _this.layout = layout;
        _this.scrollManager = new model_scroll_manager_1.ModelScrollManager();
        _this._prevState = selection_state_1.SelectionState.getDefault(activeSubDocument);
        _this._state = selection_state_1.SelectionState.getDefault(activeSubDocument);
        return _this;
    }
    Object.defineProperty(Selection.prototype, "currState", {
        get: function () { return this._state; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "keepX", {
        get: function () { return this._state.keepX; },
        set: function (val) { this._state.keepX = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "forwardDirection", {
        get: function () { return this._state.forwardDirection; },
        set: function (val) { this._state.forwardDirection = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "endOfLine", {
        get: function () { return this._state.endOfLine; },
        set: function (val) { this._state.endOfLine = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "pageIndex", {
        get: function () { return this._state.pageIndex; },
        set: function (val) { this._state.pageIndex = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "intervals", {
        get: function () { return this._state.intervalsInfo.intervals; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "activeSubDocument", {
        get: function () { return this._state.intervalsInfo.subDocument; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "lastSelectedInterval", {
        get: function () { return this._state.interval; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "intervalsInfo", {
        get: function () { return this._state.intervalsInfo; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "prevState", {
        get: function () { return this._prevState; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "multiselection", {
        get: function () { return this._state.intervalsInfo.multiselection; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "anchorPosition", {
        get: function () { return this._state.anchorPostion; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "reversedAnchorPostion", {
        get: function () { return this._state.reversedAnchorPostion; },
        enumerable: true,
        configurable: true
    });
    Selection.prototype.isCollapsed = function () { return this._state.intervalsInfo.isCollapsed; };
    Object.defineProperty(Selection.prototype, "subDocumentIntervals", {
        get: function () {
            return new sub_document_1.SubDocumentIntervals(this.activeSubDocument, list_1.ListUtils.deepCopy(this._state.intervalsInfo.intervals));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "subDocumentInterval", {
        get: function () { return this._state.intervalsInfo.subDocInterval; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Selection.prototype, "specialRunInfo", {
        get: function () { return this._state.intervalsInfo.specialRunInfo; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Selection.prototype, "tableInfo", {
        get: function () { return this._state.intervalsInfo.tableInfo; },
        enumerable: true,
        configurable: true
    });
    Selection.prototype.dispose = function () {
        this.onChanged.dispose();
    };
    Selection.prototype.setSelection = function (params) {
        var options = new SetSelectionStateOptions();
        options.correctIntervalDueToFields = params.correctIntervalDueToFields;
        options.correctIntervalDueToTables = params.correctIntervalDueToTables;
        options.useFieldUiChecks = params.useFieldUiChecks;
        this.changeState(function (newState) {
            newState.intervalsInfo.intervals = [params.interval];
            newState.intervalsInfo.lastIntervalIndex = 0;
            newState.endOfLine = params.endOfLine;
            newState.keepX = params.keepX;
        }, options);
        this.resetInputPositionIfNeeded();
    };
    Selection.prototype.getState = function () {
        return this._state.clone();
    };
    Selection.prototype.changeState = function (changeState, options) {
        if (options === void 0) { options = new SetSelectionStateOptions(); }
        var newState = this.getState();
        changeState(newState);
        return this.setState(newState, options);
    };
    Selection.prototype.setState = function (newState, options) {
        if (options === void 0) { options = new SetSelectionStateOptions(); }
        var posOfLastInterval = newState.interval.start;
        if (options.correctIntervalDueToTables) {
            for (var _i = 0, _a = newState.intervalsInfo.intervals; _i < _a.length; _i++) {
                var interval = _a[_i];
                selected_cells_engine_1.TableSelectionExtender.correctIntervalDueToTables(newState.intervalsInfo.subDocument, interval);
            }
        }
        if (options.correctIntervalDueToFields) {
            for (var _b = 0, _c = newState.intervalsInfo.intervals; _b < _c.length; _b++) {
                var interval = _c[_b];
                if (options.useFieldUiChecks)
                    field_1.Field.correctIntervalDueToFields(newState.intervalsInfo.subDocument, interval);
                else
                    field_1.Field.correctIntervalDueToFieldsWithoutUiChecks(newState.intervalsInfo.subDocument, interval);
            }
        }
        for (var _d = 0, _e = newState.intervalsInfo.intervals; _d < _e.length; _d++) {
            var interval = _e[_d];
            new sub_document_1.SubDocumentInterval(newState.intervalsInfo.subDocument, interval).validateInterval();
        }
        newState.intervalsInfo.intervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(newState.intervalsInfo.intervals, true);
        newState.intervalsInfo.lastIntervalIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(newState.intervalsInfo.intervals, function (curr) { return curr.start; }, posOfLastInterval));
        var isSelectionChanged = options.isForceUpdate ||
            !list_1.ListUtils.equals(this._state.intervalsInfo.intervals, newState.intervalsInfo.intervals) ||
            !this._state.partiallyEquals(newState) ||
            this._state.intervalsInfo.subDocument != newState.intervalsInfo.subDocument;
        if (isSelectionChanged) {
            this._prevState = this._state;
            this._state = newState;
            newState.intervalsInfo.resetTableInfo();
            newState.intervalsInfo.specialRunInfo.init(newState.intervalsInfo);
            this.raiseSelectionChanged();
        }
        return isSelectionChanged;
    };
    Selection.prototype.correctAfterTextBufferChanged = function () {
        var intersection = algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfInterval([fixed_1.FixedInterval.fromPositions(0, this.activeSubDocument.getDocumentEndPosition())], this.intervals);
        this.changeState(function (newState) {
            var posOfLastInterval = newState.intervalsInfo.interval.start;
            newState.intervalsInfo.intervals = intersection;
            newState.intervalsInfo.lastIntervalIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(newState.intervalsInfo.intervals, function (curr) { return curr.start; }, posOfLastInterval));
        });
    };
    Selection.prototype.getFloatingState = function () {
        return new selection_state_1.SelectionFloatingState(this.getState());
    };
    Selection.prototype.restoreFloatingState = function (state) {
        this.setState(state.finalize());
    };
    Selection.prototype.setSearchSelectionIntervals = function (intervals) {
        this.searchIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, false);
        this.raiseSearchSelectionChanged();
    };
    Selection.prototype.resetSearchSelection = function () {
        if (this.searchIntervals.length) {
            this.searchIntervals = [];
            this.raiseSearchSelectionChanged();
        }
    };
    Selection.prototype.onUpdateUnlocked = function (occurredEvents) {
        if (occurredEvents & SelectionBatchUpdateEvents.SelectionChanged)
            this.raiseSelectionChanged();
        if (occurredEvents & SelectionBatchUpdateEvents.SearchSelectionChanged)
            this.raiseSearchSelectionChanged();
        if (occurredEvents & SelectionBatchUpdateEvents.MisspelledSelectionChanged)
            this.raiseMisspelledSelectionChanged();
    };
    Selection.prototype.setMisspelledSelectionIntervals = function (intervals) {
        this.misspelledIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, false);
        this.raiseMisspelledSelectionChanged();
    };
    Selection.prototype.raiseSelectionChanged = function () {
        var _this = this;
        if (this.isUpdateLocked())
            this.registerOccurredEvent(SelectionBatchUpdateEvents.SelectionChanged);
        else
            this.onChanged.listeners.forEach(function (listener) { return listener.NotifySelectionChanged(_this); });
    };
    Selection.prototype.raiseSearchSelectionChanged = function () {
        if (this.isUpdateLocked())
            this.registerOccurredEvent(SelectionBatchUpdateEvents.SearchSelectionChanged);
        else
            this.onSearchChanged.listeners.forEach(function (listener) { return listener.NotifySearchSelectionChanged(); });
    };
    Selection.prototype.raiseMisspelledSelectionChanged = function () {
        if (this.isUpdateLocked())
            this.registerOccurredEvent(SelectionBatchUpdateEvents.MisspelledSelectionChanged);
        else
            this.onMisspelledSelectionChanged.listeners.forEach(function (listener) { return listener.NotifyMisspelledSelectionChanged(); });
    };
    Selection.prototype.deprecatedSetSelection = function (firstPosition, secondPosition, endOfLine, keepX, _upd, correctIntervalDueToFields, correctIntervalDueToTables, visibleModelPosition, useFieldUiChecks) {
        if (correctIntervalDueToFields === void 0) { correctIntervalDueToFields = true; }
        if (correctIntervalDueToTables === void 0) { correctIntervalDueToTables = true; }
        if (visibleModelPosition === void 0) { visibleModelPosition = model_scroll_manager_1.ModelScrollManager.StandartScrollPosition; }
        if (useFieldUiChecks === void 0) { useFieldUiChecks = true; }
        var options = new SetSelectionStateOptions();
        options.useFieldUiChecks = useFieldUiChecks;
        options.correctIntervalDueToTables = correctIntervalDueToTables;
        options.correctIntervalDueToFields = correctIntervalDueToFields;
        this.changeState(function (newState) {
            newState.setInterval(new fixed_1.FixedInterval(Math.min(firstPosition, secondPosition), Math.abs(firstPosition - secondPosition)))
                .setKeepX(keepX)
                .setEndOfLine(endOfLine)
                .setForwardDirection(secondPosition >= firstPosition);
        }, options);
        if (visibleModelPosition != model_scroll_manager_1.ModelScrollManager.DontChangeScrollPosition)
            this.scrollManager.setScroll(model_scroll_manager_1.ModelScrollManager.StandartScrollPosition ?
                new model_states_1.ScrollState().byModelPosition(this)
                    .useCurrentPosition(this)
                    .useStdRelativePosition()
                    .useStdOffset() :
                new model_states_1.ScrollState().byModelPosition(this)
                    .setModelPosition(visibleModelPosition)
                    .useStdRelativePosition()
                    .useStdOffset());
        this.resetInputPositionIfNeeded();
    };
    Selection.prototype.shouldResetInputPosition = function () {
        var currentState = this.getState();
        return currentState.intervalsInfo.subDocument.id != this.prevState.intervalsInfo.subDocument.id ||
            !list_1.ListUtils.equals(currentState.intervalsInfo.intervals, this.prevState.intervalsInfo.intervals);
    };
    Selection.prototype.resetInputPositionIfNeeded = function () {
        if (this.shouldResetInputPosition())
            this.inputPosition.reset();
    };
    return Selection;
}(batch_updatable_1.BatchUpdatableObject));
exports.Selection = Selection;
var SelectionBatchUpdateEvents;
(function (SelectionBatchUpdateEvents) {
    SelectionBatchUpdateEvents[SelectionBatchUpdateEvents["None"] = 0] = "None";
    SelectionBatchUpdateEvents[SelectionBatchUpdateEvents["SelectionChanged"] = 1] = "SelectionChanged";
    SelectionBatchUpdateEvents[SelectionBatchUpdateEvents["SearchSelectionChanged"] = 4] = "SearchSelectionChanged";
    SelectionBatchUpdateEvents[SelectionBatchUpdateEvents["MisspelledSelectionChanged"] = 8] = "MisspelledSelectionChanged";
})(SelectionBatchUpdateEvents || (SelectionBatchUpdateEvents = {}));
