"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../core/model/changes/enums");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var selection_1 = require("./selection");
var SelectionModelChangesListener = (function (_super) {
    tslib_1.__extends(SelectionModelChangesListener, _super);
    function SelectionModelChangesListener(selection) {
        var _this = _super.call(this) || this;
        _this.selection = selection;
        return _this;
    }
    SelectionModelChangesListener.prototype.modelChanged = function (change) {
        switch (change.type) {
            case enums_1.ModelChangeType.InlinePictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureInserted:
            case enums_1.ModelChangeType.FieldInserted:
            case enums_1.ModelChangeType.FieldDeleted:
            case enums_1.ModelChangeType.SimpleRunInserted:
            case enums_1.ModelChangeType.TextBufferChanged:
            case enums_1.ModelChangeType.ParagraphInserted:
            case enums_1.ModelChangeType.SectionInserted:
            case enums_1.ModelChangeType.AnchoredTextBoxInserted:
            case enums_1.ModelChangeType.AnchorObjectRemoved:
            case enums_1.ModelChangeType.IntervalRemoved:
            case enums_1.ModelChangeType.ParagraphMerged:
            case enums_1.ModelChangeType.SectionMerged:
            case enums_1.ModelChangeType.TableCreated:
            case enums_1.ModelChangeType.TableRemoved:
            case enums_1.ModelChangeType.TableStartPositionShifted:
            case enums_1.ModelChangeType.TableRowInserted:
            case enums_1.ModelChangeType.TableRowRemoved:
            case enums_1.ModelChangeType.TableCellRemoved:
            case enums_1.ModelChangeType.TableCellInserted: {
                this.raiseSelectionChange();
                break;
            }
        }
    };
    SelectionModelChangesListener.prototype.onUpdateUnlocked = function (occurredEvents) {
        if (occurredEvents != 0)
            this.raiseSelectionChangeCore();
    };
    SelectionModelChangesListener.prototype.raiseSelectionChange = function () {
        if (!this.isUpdateLocked())
            this.raiseSelectionChangeCore();
        else
            this.registerOccurredEvent(1);
    };
    SelectionModelChangesListener.prototype.raiseSelectionChangeCore = function () {
        this.selection.changeState(function (newState) { return newState; }, new selection_1.SetSelectionStateOptions().forceUpdate());
    };
    return SelectionModelChangesListener;
}(batch_updatable_1.BatchUpdatableObject));
exports.SelectionModelChangesListener = SelectionModelChangesListener;
