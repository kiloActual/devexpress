"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = require("../../core/spelling/helpers");
var SpellCheckerSelectionChangesListener = (function () {
    function SpellCheckerSelectionChangesListener(spellChecker) {
        this.spellChecker = spellChecker;
    }
    SpellCheckerSelectionChangesListener.prototype.dispose = function () {
        clearTimeout(this.updBoxesTimerId);
    };
    SpellCheckerSelectionChangesListener.prototype.NotifySelectionChanged = function (selection) {
        var _this = this;
        if (!this.spellChecker.settings.isEnabled)
            return;
        if (selection.prevState.intervalsInfo.subDocument != selection.currState.intervalsInfo.subDocument) {
            this.spellChecker.initialize(selection.activeSubDocument);
            this.spellChecker.check();
            this.updBoxesTimerId = setTimeout(function () { return _this.spellChecker.updateMisspelledBoxes(); }, 0);
        }
        var startPosition = selection.anchorPosition;
        if (this.lastStartPosition === startPosition)
            return;
        this.lastStartPosition = startPosition;
        var wordStartPosition = helpers_1.ModelWordPositionHelper.getWordStartPosition(selection.activeSubDocument, startPosition);
        if (this.lastWordStartPosition === wordStartPosition)
            return;
        if (startPosition == wordStartPosition && startPosition - this.lastWordStartPosition == 1) {
            this.lastWordStartPosition = wordStartPosition;
            return;
        }
        this.lastWordStartPosition = wordStartPosition;
        this.spellChecker.onCurrentSelectedWordChanged();
    };
    return SpellCheckerSelectionChangesListener;
}());
exports.SpellCheckerSelectionChangesListener = SpellCheckerSelectionChangesListener;
