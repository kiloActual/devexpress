"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_layout_details_level_1 = require("../../core/layout/document-layout-details-level");
var mouse_handler_1 = require("../mouse-handler/mouse-handler/mouse-handler");
var model_states_1 = require("../scroll/model-states");
var CanvasScrollManager = (function () {
    function CanvasScrollManager(viewManager, horizontalRuler) {
        this.updateScrollTimeoutId = null;
        this.waitForDblClickTimeoutId = null;
        this.viewManager = viewManager;
        this.horizontalRuler = horizontalRuler;
    }
    Object.defineProperty(CanvasScrollManager.prototype, "canvas", {
        get: function () { return this.viewManager.canvas; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasScrollManager.prototype, "sizes", {
        get: function () { return this.viewManager.sizes; },
        enumerable: true,
        configurable: true
    });
    CanvasScrollManager.prototype.dispose = function () {
        clearTimeout(this.updateScrollTimeoutId);
        clearTimeout(this.waitForDblClickTimeoutId);
    };
    Object.defineProperty(CanvasScrollManager.prototype, "scrollTop", {
        get: function () { return this.canvas.scrollTop; },
        set: function (val) { this.canvas.scrollTop = val; },
        enumerable: true,
        configurable: true
    });
    CanvasScrollManager.prototype.setScrollEnabled = function (enabled) {
        if (enabled)
            this.canvas.style.overflow = "";
        else
            this.canvas.style.overflow = "hidden";
        this.updateScrollVisibility();
    };
    CanvasScrollManager.prototype.updateScrollVisibility = function () {
        if (!this.scrollMeasurer) {
            this.scrollMeasurer = document.createElement("div");
            this.scrollMeasurer.style.position = "absolute";
            this.scrollMeasurer.style.top = "0";
            this.scrollMeasurer.style.bottom = "0";
            this.scrollMeasurer.style.right = "0";
            this.scrollMeasurer.style.left = "0";
        }
        this.canvas.appendChild(this.scrollMeasurer);
        var prevScrollYVisibility = this.sizes.scrollYVisible;
        this.sizes.updateScrollVisibility(this.scrollMeasurer.offsetWidth, this.scrollMeasurer.offsetHeight);
        this.canvas.removeChild(this.scrollMeasurer);
        if (prevScrollYVisibility !== this.sizes.scrollYVisible && this.horizontalRuler)
            this.horizontalRuler.adjust();
    };
    CanvasScrollManager.prototype.scrollToX = function (canvasState) {
        var position = canvasState.lp;
        var relativePosition = canvasState.relativePosition;
        var y = this.sizes.getPageOffsetY(this.viewManager.layout.pages[position.pageIndex]);
        var height = 0;
        if (position.detailsLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea) {
            y += position.pageArea.y;
            if (position.detailsLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Column) {
                y += position.column.y;
                if (position.detailsLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Row) {
                    y += position.row.y;
                    if (relativePosition === model_states_1.RelativePosition.Bottom)
                        y += position.row.height;
                    else if (relativePosition === model_states_1.RelativePosition.Inside)
                        height = position.row.height;
                }
                else if (relativePosition === model_states_1.RelativePosition.Bottom)
                    y += position.column.height;
                else if (relativePosition === model_states_1.RelativePosition.Inside)
                    height = position.column.height;
            }
            else if (relativePosition === model_states_1.RelativePosition.Bottom)
                y += position.pageArea.height;
            else if (relativePosition === model_states_1.RelativePosition.Inside)
                height = position.pageArea.height;
        }
        else if (relativePosition === model_states_1.RelativePosition.Bottom)
            y += position.page.height;
        else if (relativePosition === model_states_1.RelativePosition.Inside)
            height = position.page.height;
        if (relativePosition === model_states_1.RelativePosition.Bottom)
            y -= this.sizes.getVisibleAreaHeight(false);
        y += canvasState.getVerticalOffset(this.sizes);
        if (relativePosition === model_states_1.RelativePosition.Inside) {
            var scrollTop = this.canvas.scrollTop;
            var scrollVisibleAreaHeight = this.sizes.getVisibleAreaHeight(false);
            if (y < scrollTop)
                this.canvas.scrollTop = y;
            else if (y + height > scrollVisibleAreaHeight + scrollTop)
                this.canvas.scrollTop = y + height - scrollVisibleAreaHeight;
        }
        else
            this.canvas.scrollTop = y;
    };
    CanvasScrollManager.prototype.NotifyScrollPositionChanged = function (canvasState) {
        var _this = this;
        if (this.updateScrollTimeoutId) {
            clearTimeout(this.updateScrollTimeoutId);
            this.updateScrollTimeoutId = null;
        }
        if (this.waitForDblClickTimeoutId > 0) {
            this.updateScrollTimeoutId = setTimeout(function () {
                _this.scrollToX(canvasState);
            }, mouse_handler_1.MouseHandler.WAIT_FOR_DBLCLICK_INTERVAL);
        }
        else
            this.scrollToX(canvasState);
    };
    CanvasScrollManager.prototype.waitForDblClick = function () {
        var _this = this;
        if (this.waitForDblClickTimeoutId)
            clearTimeout(this.waitForDblClickTimeoutId);
        this.waitForDblClickTimeoutId = setTimeout(function () {
            _this.waitForDblClickTimeoutId = null;
        }, mouse_handler_1.MouseHandler.WAIT_FOR_DBLCLICK_INTERVAL);
    };
    return CanvasScrollManager;
}());
exports.CanvasScrollManager = CanvasScrollManager;
