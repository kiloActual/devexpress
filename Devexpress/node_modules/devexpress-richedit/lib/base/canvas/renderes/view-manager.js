"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var renderer_class_names_1 = require("../../../core/canvas/renderer-class-names");
var layout_page_1 = require("../../../core/layout/main-structures/layout-page");
var color_1 = require("../../../core/model/color/color");
var log_1 = require("../../../core/rich-utils/debug/logger/base-logger/log");
var log_list_helper_1 = require("../../../core/rich-utils/debug/logger/base-logger/log-list-helper");
var log_source_1 = require("../../../core/rich-utils/debug/logger/base-logger/log-source");
var log_obj_to_str_layout_1 = require("../../../core/rich-utils/debug/logger/layout-logger/log-obj-to-str-layout");
var views_settings_1 = require("../../../core/view-settings/views-settings");
var browser_1 = require("@devexpress/utils/lib/browser");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var canvas_manager_1 = require("../canvas-manager");
var canvas_scroll_info_1 = require("../canvas-scroll-info");
var canvas_scroll_manager_1 = require("../canvas-scroll-manager");
var canvas_size_info_1 = require("../canvas-size-info");
var print_layout_view_canvas_listener_1 = require("./canvas-listener/print-layout-view-canvas-listener");
var simple_view_canvas_listener_1 = require("./canvas-listener/simple-view-canvas-listener");
var renderer_1 = require("./change-active-sub-document/renderer");
var document_renderer_1 = require("./common/document-renderer");
var print_layout_renderer_1 = require("./common/print-layout-renderer");
var simple_view_renderer_1 = require("./common/simple-view-renderer");
var misspelled_selection_renderer_1 = require("./selection-renderers/misspelled-selection-renderer");
var range_permission_renderer_1 = require("./selection-renderers/range-permission-renderer");
var search_selection_renderer_1 = require("./selection-renderers/search-selection-renderer");
var selection_renderer_1 = require("./selection-renderers/selection-renderer");
var ViewManager = (function () {
    function ViewManager(canvas, eventManager, stringResources, horizontalRuler, inputController, innerClientProperties, readOnlyPropertyHolder, layoutFormatterManagerHolder, internalApi, fieldOptions) {
        this.cache = [];
        this.sizes = new canvas_size_info_1.CanvasSizeInfo();
        this.readOnlyPropertyHolder = readOnlyPropertyHolder;
        this.layoutFormatterManagerHolder = layoutFormatterManagerHolder;
        this.internalApi = internalApi;
        this.fieldOptions = fieldOptions;
        this.canvas = canvas;
        this.stringResources = stringResources;
        this.inputController = inputController;
        this.innerClientProperties = innerClientProperties;
        this.addTopLevelContainers();
        this.canvasManager = new canvas_manager_1.CanvasManager(this, eventManager);
        this.scroll = new canvas_scroll_info_1.CanvasScrollInfo(canvas, this.sizes, this.internalApi);
        this.canvasScrollManager = new canvas_scroll_manager_1.CanvasScrollManager(this, horizontalRuler);
        this.renderers = new map_creator_1.MapCreator()
            .add(views_settings_1.ViewType.PrintLayout, new print_layout_renderer_1.PrintLayoutRenderer(this))
            .add(views_settings_1.ViewType.Simple, new simple_view_renderer_1.SimpleViewRenderer(this))
            .get();
        this.canvasListeners = new map_creator_1.MapCreator()
            .add(views_settings_1.ViewType.PrintLayout, new print_layout_view_canvas_listener_1.PrintLayoutViewCanvasListener(this, this.renderers[views_settings_1.ViewType.PrintLayout]))
            .add(views_settings_1.ViewType.Simple, new simple_view_canvas_listener_1.SimpleViewCanvasListener(this, this.renderers[views_settings_1.ViewType.Simple]))
            .get();
        var layoutSelection = null;
        this.selection = new selection_renderer_1.SelectionRenderer(this.cache, layoutSelection);
        this.searchSelection = new search_selection_renderer_1.SearchSelectionRenderer(this.cache, layoutSelection);
        this.misspelledSelection = new misspelled_selection_renderer_1.MisspelledSelectionRenderer(this.cache, layoutSelection);
        this.rangePermission = new range_permission_renderer_1.RangePermissionRenderer(this.cache, layoutSelection);
        this.changeActiveSubDocumentRenderer = new renderer_1.RendererManager(this, stringResources);
    }
    Object.defineProperty(ViewManager.prototype, "renderer", {
        get: function () { return this.renderers[this.innerClientProperties.viewsSettings.viewType]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewManager.prototype, "printLayoutRenderer", {
        get: function () { return this.renderers[views_settings_1.ViewType.PrintLayout]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewManager.prototype, "canvasListener", {
        get: function () { return this.canvasListeners[this.innerClientProperties.viewsSettings.viewType]; },
        enumerable: true,
        configurable: true
    });
    ViewManager.prototype.dispose = function () {
        this.canvasManager.dispose();
        this.canvasScrollManager.dispose();
        this.selection.dispose();
        this.pagesContainer = null;
    };
    ViewManager.prototype.adjust = function (force) {
        if ((force || !this.sizes.isInitialized()) && this.cache.length > 0) {
            var firstRenderedPageIndex = Math.min(this.cache.length, Math.max(0, list_1.ListUtils.indexBy(this.layout.pages, function (page) { return page.flags.get(layout_page_1.LayoutPageFlags.ContentRendered); })));
            this.sizes.initialize(this.cache[firstRenderedPageIndex].page, this.canvas);
            var oldPageIndo = this.innerClientProperties.viewsSettings.pageVerticalInfo.clone();
            this.innerClientProperties.viewsSettings.pageVerticalInfo.copyFrom(this.sizes.pageVerticalInfo);
            if (this.innerClientProperties.viewsSettings.isSimpleView && !this.innerClientProperties.viewsSettings.pageVerticalInfo.equals(oldPageIndo)) {
                var page = this.layout.pages[firstRenderedPageIndex];
                if (this.layoutFormatterManagerHolder.layoutFormatterManager && page)
                    this.layoutFormatterManagerHolder.layoutFormatterManager.invalidator.onChangedAllLayout();
            }
            if (force) {
                this.canvasScrollManager.updateScrollVisibility();
                this.canvasListener.onCanvasScroll();
            }
        }
    };
    ViewManager.prototype.NotifyPagesReady = function (pageChanges) {
        this.canvasListener.onPagesReady(pageChanges);
    };
    ViewManager.prototype.NotifyFullyFormatted = function (_pageCount) { };
    ;
    ViewManager.prototype.NotifySelectionLayoutChanged = function () {
        var layoutSelection = this.selection.layoutSelection;
        this.changeActiveSubDocumentRenderer.update(layoutSelection);
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onSelectionLayoutChanged\n", log_list_helper_1.LogListHelper.level_1(log_1.Log.w(2, log_1.Log.flip(log_obj_to_str_layout_1.LogObjToStrLayout.pageSelectionChange, 0, 1))(""), this.selection.layoutSelection.selectionInfo.changes, "", "\n"));
        if (this.innerClientProperties.viewsSettings.isSimpleView)
            this.selection.renderAllPageSelection(this.layout, 0, true);
        else
            this.selection.applySelectionChanges(this.layout);
        if (browser_1.Browser.WebKitTouchUI || (browser_1.Browser.MacOSPlatform && browser_1.Browser.MajorVersion >= 13) || browser_1.Browser.Chrome) {
            var pageIndex = list_1.ListUtils.reverseIndexBy(layoutSelection.selectionInfo.pageInfos, function (pageInfo) { return pageInfo.oldItems.length > 0; });
            if (pageIndex > -1) {
                var pageInfo = layoutSelection.selectionInfo.pageInfos[pageIndex];
                var item = pageInfo.oldItems[0];
                var layoutPage = this.layout.pages[pageIndex];
                this.inputController.setPosition(layoutPage.x + this.cache[pageIndex].page.offsetLeft + item.x, this.sizes.getPageOffsetY(layoutPage) + item.y);
            }
        }
    };
    ViewManager.prototype.NotifySearchSelectionLayoutChanged = function () {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onSearchSelectionLayoutChanged\n", log_list_helper_1.LogListHelper.level_1(log_1.Log.w(2, log_1.Log.flip(log_obj_to_str_layout_1.LogObjToStrLayout.pageSelectionChange, 0, 1))(""), this.selection.layoutSelection.searchInfo.changes, "", "\n"));
        if (this.innerClientProperties.viewsSettings.isSimpleView)
            this.searchSelection.renderAllPageSelection(this.layout, 0, true);
        else
            this.searchSelection.applySelectionChanges(this.layout);
    };
    ViewManager.prototype.NotifyMisspelledSelectionLayoutChanged = function () {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onMisspelledSelectionLayoutChanged\n", log_list_helper_1.LogListHelper.level_1(log_1.Log.w(2, log_1.Log.flip(log_obj_to_str_layout_1.LogObjToStrLayout.pageSelectionChange, 0, 1))(""), this.selection.layoutSelection.misspelledInfo.changes, "", "\n"));
        if (this.innerClientProperties.viewsSettings.isSimpleView)
            this.misspelledSelection.renderAllPageSelection(this.layout, 0, true);
        else
            this.misspelledSelection.applySelectionChanges(this.layout);
    };
    ViewManager.prototype.NotifyRangePermissionLayoutChanged = function () {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onRangePermissionsLayoutChanged\n", log_list_helper_1.LogListHelper.level_1(log_1.Log.w(2, log_1.Log.flip(log_obj_to_str_layout_1.LogObjToStrLayout.pageSelectionChange, 0, 1))(""), this.selection.layoutSelection.rangePermissionInfo.changes, "", "\n"));
        if (this.innerClientProperties.viewsSettings.isSimpleView)
            this.rangePermission.renderAllPageSelection(this.layout, 0, true);
        else
            this.rangePermission.applySelectionChanges(this.layout);
    };
    ViewManager.prototype.addTopLevelContainers = function () {
        this.pagesContainer = document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.PAGES);
        this.serviceContainer = document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TOP_LEVEL_SERVICE_CONTAINER);
        document_renderer_1.DocumentRenderer.insertInContainer(this.canvas, 0, this.pagesContainer, function (node) { return node; });
        this.canvas.appendChild(this.serviceContainer);
    };
    ViewManager.prototype.setWorkSession = function (layout, layoutSelection, imageCache) {
        this.layout = layout;
        this.imageCache = imageCache;
        this.changeActiveSubDocumentRenderer.init();
        this.selection.layoutSelection = layoutSelection;
        this.searchSelection.layoutSelection = layoutSelection;
        this.misspelledSelection.layoutSelection = layoutSelection;
        this.rangePermission.layoutSelection = layoutSelection;
        this.selection.touchSelectionCircleElementsManager.layoutSelection = layoutSelection;
    };
    ViewManager.prototype.closeDocument = function () {
        dom_1.DomUtils.clearInnerHtml(this.pagesContainer);
        this.cache.splice(0);
        this.canvasManager.closeDocument();
        this.selection.closeDocument();
        this.searchSelection.closeDocument();
        this.misspelledSelection.closeDocument();
        this.rangePermission.closeDocument();
        number_1.NumberMapUtils.forEach(this.canvasListeners, function (r) { return r.closeDocument(); });
        this.layout.setEmptyLayout(color_1.ColorHelper.NO_COLOR);
    };
    return ViewManager;
}());
exports.ViewManager = ViewManager;
