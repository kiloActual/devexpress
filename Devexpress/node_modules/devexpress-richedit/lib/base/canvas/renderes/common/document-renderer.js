"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../../base-utils/map-creator");
var renderer_class_names_1 = require("../../../../core/canvas/renderer-class-names");
var z_index_helper_1 = require("../../../../core/canvas/renderes/z-index-helper");
var layout_change_base_1 = require("../../../../core/layout-formatter/changes/changes/layout-change-base");
var bookmark_box_1 = require("../../../../core/layout/main-structures/layout-boxes/bookmark-box");
var layout_box_1 = require("../../../../core/layout/main-structures/layout-boxes/layout-box");
var layout_page_1 = require("../../../../core/layout/main-structures/layout-page");
var enums_1 = require("../../../../core/model/borders/enums");
var enums_2 = require("../../../../core/model/character/enums");
var color_1 = require("../../../../core/model/color/color");
var enums_3 = require("../../../../core/model/enums");
var log_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-source");
var html_converter_1 = require("../../../../core/rich-utils/html-converter");
var views_settings_1 = require("../../../../core/view-settings/views-settings");
var browser_1 = require("@devexpress/utils/lib/browser");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var color_2 = require("@devexpress/utils/lib/utils/color");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var math_1 = require("@devexpress/utils/lib/utils/math");
var utils_1 = require("../../utils");
var SimpleViewCanvasSizeManager = (function () {
    function SimpleViewCanvasSizeManager(canvasManager, action) {
        this.id = null;
        this.size = new size_1.Size(0, 0);
        this.action = action;
        this.canvasManager = canvasManager;
    }
    SimpleViewCanvasSizeManager.prototype.dispose = function () {
        clearTimeout(this.id);
    };
    SimpleViewCanvasSizeManager.prototype.changeSize = function (force) {
        var curr = new size_1.Size(this.canvasManager.getCanvasWidth(), this.canvasManager.controlHeightProvider.getVisibleAreaHeight(false));
        if (force || !curr.equals(this.size)) {
            this.size = curr;
            this.action();
        }
    };
    SimpleViewCanvasSizeManager.prototype.setViewMode = function (val) {
        var _this = this;
        if (val) {
            this.changeSize(true);
            if (this.id != null)
                return;
            this.id = setInterval(function () { return _this.changeSize(false); }, SimpleViewCanvasSizeManager.DELAY);
        }
        else {
            if (this.id != null) {
                clearInterval(this.id);
                this.id = null;
            }
            this.action();
        }
    };
    SimpleViewCanvasSizeManager.DELAY = 1000;
    return SimpleViewCanvasSizeManager;
}());
exports.SimpleViewCanvasSizeManager = SimpleViewCanvasSizeManager;
var DocumentRenderer = (function () {
    function DocumentRenderer(viewManager) {
        this.viewManager = viewManager;
        if (this.viewManager.innerClientProperties.viewsSettings.isSimpleView)
            dom_1.DomUtils.addClassName(this.viewManager.canvas, renderer_class_names_1.RendererClassNames.SIMPLE_VIEW);
    }
    Object.defineProperty(DocumentRenderer.prototype, "cache", {
        get: function () { return this.viewManager.cache; },
        enumerable: true,
        configurable: true
    });
    DocumentRenderer.prototype.onViewTypeChanged = function () {
        switch (this.viewManager.innerClientProperties.viewsSettings.viewType) {
            case views_settings_1.ViewType.Simple:
                dom_1.DomUtils.addClassName(this.viewManager.canvas, renderer_class_names_1.RendererClassNames.SIMPLE_VIEW);
                break;
            case views_settings_1.ViewType.PrintLayout:
                dom_1.DomUtils.removeClassName(this.viewManager.canvas, renderer_class_names_1.RendererClassNames.SIMPLE_VIEW);
                break;
        }
    };
    DocumentRenderer.prototype.applyPageChange = function (layoutPage, pageChange) {
        log_1.Log.print(log_source_1.LogSource.DocumentRenderer, "applyPageChanges", "pageIndex " + pageChange.index);
        var pageFromCache = this.cache[pageChange.index];
        for (var _i = 0, _a = pageChange.mainPageAreaChanges; _i < _a.length; _i++) {
            var pageAreaChange = _a[_i];
            this.applyMainPageAreaChange(pageFromCache, layoutPage, pageAreaChange);
        }
        for (var _b = 0, _c = pageChange.otherPageAreaChanges; _b < _c.length; _b++) {
            var pageAreaChange = _c[_b];
            this.applyOtherPageAreaChange(pageFromCache, layoutPage, pageAreaChange);
        }
        for (var _d = 0, _e = pageChange.anchoredPictureChanges; _d < _e.length; _d++) {
            var anchoredPictureChange = _e[_d];
            this.applyAnchorPictureChange(pageFromCache, layoutPage, anchoredPictureChange);
        }
    };
    DocumentRenderer.prototype.applyAnchorPictureChange = function (cache, layoutPage, ancPicChange) {
        var objId = ancPicChange.index;
        switch (ancPicChange.changeType) {
            case layout_change_base_1.LayoutChangeType.Deleted: {
                DocumentRenderer.removeFromContainerByObject(objId, DocumentRenderer.getAnchoredObjectsContainer(cache.page), cache.anchoredPicture);
                break;
            }
            case layout_change_base_1.LayoutChangeType.Replaced: {
                var obj = layoutPage.anchoredObjectHolder.getObjById(objId);
                DocumentRenderer.replaceFromContainerByObject(objId, DocumentRenderer.getAnchoredObjectsContainer(cache.page), cache.anchoredPicture, this.renderFloatingPicture(obj, layoutPage.renderLevelCalculator));
                break;
            }
            case layout_change_base_1.LayoutChangeType.Updated: {
                break;
            }
            case layout_change_base_1.LayoutChangeType.Inserted: {
                var obj = layoutPage.anchoredObjectHolder.getObjById(objId);
                DocumentRenderer.insertToContainerByObject(objId, DocumentRenderer.getAnchoredObjectsContainer(cache.page), cache.anchoredPicture, this.renderFloatingPicture(obj, layoutPage.renderLevelCalculator));
                break;
            }
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    DocumentRenderer.prototype.applyMainPageAreaChange = function (pageCache, layoutPage, pageAreaChange) {
        switch (pageAreaChange.changeType) {
            case layout_change_base_1.LayoutChangeType.Deleted:
                DocumentRenderer.removeFromContainerByIndex(pageCache.page, pageAreaChange.canvasIndex, DocumentRenderer.getMainPageAreaContainerCore);
                break;
            case layout_change_base_1.LayoutChangeType.Replaced:
                DocumentRenderer.replaceInContainer(pageCache.page, pageAreaChange.canvasIndex, this.renderPageArea(layoutPage.renderLevelCalculator, pageCache, layoutPage.mainSubDocumentPageAreas[pageAreaChange.layoutIndex], null), DocumentRenderer.getMainPageAreaContainerCore);
                break;
            case layout_change_base_1.LayoutChangeType.Updated: {
                var layoutPageArea = layoutPage.mainSubDocumentPageAreas[pageAreaChange.layoutIndex];
                var pageAreaElement = DocumentRenderer.getMainPageAreaContainerCore(pageCache.page).childNodes[pageAreaChange.canvasIndex];
                for (var _i = 0, _a = pageAreaChange.columnChanges; _i < _a.length; _i++) {
                    var columnChange = _a[_i];
                    this.applyColumnChange(pageAreaElement, layoutPageArea, columnChange, layoutPage.renderLevelCalculator.renderMainPageAreaLevel);
                }
                break;
            }
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    DocumentRenderer.prototype.applyOtherPageAreaChange = function (cache, layoutPage, pageAreaChange) {
        var subDocId = pageAreaChange.index;
        var pageArea = layoutPage.otherPageAreas[subDocId];
        switch (pageAreaChange.changeType) {
            case layout_change_base_1.LayoutChangeType.Deleted: {
                DocumentRenderer.removeFromContainerByObject(subDocId, DocumentRenderer.getOtherPageAreaContainerCore(cache.page), cache.otherAreas);
                DocumentRenderer.removeFromContainerByObject(subDocId, DocumentRenderer.getTextBoxBackgroundContainer(cache.page), cache.textBoxBgElements);
                break;
            }
            case layout_change_base_1.LayoutChangeType.Replaced: {
                DocumentRenderer.replaceFromContainerByObject(subDocId, DocumentRenderer.getOtherPageAreaContainerCore(cache.page), cache.otherAreas, this.renderPageArea(layoutPage.renderLevelCalculator, cache, pageArea, pageArea.subDocument.isTextBox() ? layoutPage.anchoredObjectHolder.getTextBoxByInternalSubDocId(subDocId) : null));
                break;
            }
            case layout_change_base_1.LayoutChangeType.Updated: {
                var pageAreaElement = cache.otherAreas[subDocId];
                var level = pageArea.subDocument.isTextBox() ?
                    layoutPage.renderLevelCalculator.getRenderLevel(layoutPage.anchoredObjectHolder.getTextBoxByInternalSubDocId(subDocId).rendererLevel) :
                    layoutPage.renderLevelCalculator.renderHeaderFooterPageAreasLevel;
                for (var _i = 0, _a = pageAreaChange.columnChanges; _i < _a.length; _i++) {
                    var columnChange = _a[_i];
                    this.applyColumnChange(pageAreaElement, pageArea, columnChange, level);
                }
                break;
            }
            case layout_change_base_1.LayoutChangeType.Inserted: {
                DocumentRenderer.insertToContainerByObject(subDocId, DocumentRenderer.getOtherPageAreaContainerCore(cache.page), cache.otherAreas, this.renderPageArea(layoutPage.renderLevelCalculator, cache, pageArea, pageArea.subDocument.isTextBox() ? layoutPage.anchoredObjectHolder.getTextBoxByInternalSubDocId(subDocId) : null));
                break;
            }
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    DocumentRenderer.prototype.applyColumnChange = function (pageAreaElement, layoutPageArea, columnChange, level) {
        var _this = this;
        switch (columnChange.changeType) {
            case layout_change_base_1.LayoutChangeType.Deleted:
                DocumentRenderer.removeFromContainerByIndex(pageAreaElement, columnChange.canvasIndex, DocumentRenderer.getColumnsContainerCore);
                break;
            case layout_change_base_1.LayoutChangeType.Replaced: {
                var renderedColumn = this.renderColumn(layoutPageArea.columns[columnChange.layoutIndex], level, layoutPageArea.subDocument.isMain());
                DocumentRenderer.replaceInContainer(pageAreaElement, columnChange.canvasIndex, renderedColumn, DocumentRenderer.getColumnsContainerCore);
                break;
            }
            case layout_change_base_1.LayoutChangeType.Updated: {
                var layoutColumn_1 = layoutPageArea.columns[columnChange.layoutIndex];
                var columnElement = DocumentRenderer.getColumnsContainerCore(pageAreaElement).childNodes[columnChange.canvasIndex];
                for (var _i = 0, _a = columnChange.rowChanges; _i < _a.length; _i++) {
                    var rowChange = _a[_i];
                    DocumentRenderer.applyChange(columnElement, rowChange, DocumentRenderer.getRowsContainerCore, function () { return _this.renderRow(layoutColumn_1.rows[rowChange.layoutIndex], level); });
                }
                for (var _b = 0, _c = columnChange.tableChanges; _b < _c.length; _b++) {
                    var tableChange = _c[_b];
                    DocumentRenderer.applyChange(columnElement, tableChange, DocumentRenderer.getTablesContainerCore, function () { return DocumentRenderer.renderTable(layoutColumn_1.tablesInfo[tableChange.layoutIndex], level, _this.viewManager.innerClientProperties.showTableGridLines); });
                }
                for (var _d = 0, _e = columnChange.paragraphFrameChanges; _d < _e.length; _d++) {
                    var paragraphFrameChange = _e[_d];
                    DocumentRenderer.applyChange(columnElement, paragraphFrameChange, DocumentRenderer.getParagraphFramesContainerCore, function () { return DocumentRenderer.renderParagraphFrame(layoutColumn_1.paragraphFrames[paragraphFrameChange.layoutIndex], level); });
                }
                break;
            }
            case layout_change_base_1.LayoutChangeType.Inserted: {
                var renderedColumn = this.renderColumn(layoutPageArea.columns[columnChange.layoutIndex], level, layoutPageArea.subDocument.isMain());
                DocumentRenderer.insertInContainer(pageAreaElement, columnChange.canvasIndex, renderedColumn, DocumentRenderer.getColumnsContainerCore);
                break;
            }
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    DocumentRenderer.applyChange = function (topLevelNode, change, getContainer, getRenderedElement) {
        switch (change.changeType) {
            case layout_change_base_1.LayoutChangeType.Deleted:
                DocumentRenderer.removeFromContainerByIndex(topLevelNode, change.canvasIndex, getContainer);
                break;
            case layout_change_base_1.LayoutChangeType.Replaced:
                DocumentRenderer.replaceInContainer(topLevelNode, change.canvasIndex, getRenderedElement(), getContainer);
                break;
            case layout_change_base_1.LayoutChangeType.Inserted:
                DocumentRenderer.insertInContainer(topLevelNode, change.canvasIndex, getRenderedElement(), getContainer);
                break;
            case layout_change_base_1.LayoutChangeType.Updated:
                break;
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    DocumentRenderer.prototype.getPageRender = function (layoutPageIndex, layoutPage) {
        var cachedPage = this.cache[layoutPageIndex].page;
        if (!DocumentRenderer.isPageElementConsiderAllContainers(cachedPage))
            this.renderPageContent(layoutPage, layoutPageIndex);
        return this.cache[layoutPageIndex].page;
    };
    DocumentRenderer.prototype.renderPage = function (layoutPage, layoutPageIndex, renderInnerContent) {
        layoutPage.flags.set(layout_page_1.LayoutPageFlags.IsSelectionRendered, false);
        layoutPage.flags.set(layout_page_1.LayoutPageFlags.IsMisspelledSelectionRendered, false);
        layoutPage.flags.set(layout_page_1.LayoutPageFlags.IsRangePermissionsRendered, false);
        var pageCache = this.cache[layoutPageIndex];
        if (pageCache) {
            var pageElement = pageCache.page;
            this.updatePageClasses(pageElement);
            this.updatePageSize(layoutPage, pageElement);
            DocumentRenderer.updatePageColor(pageElement, this.viewManager.layout.pageColor);
            if (!DocumentRenderer.isPageElementEmpty(pageElement))
                this.removePageContent(layoutPageIndex);
        }
        else {
            var pageElement = DocumentRenderer.renderContainer("");
            pageElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.SERVICE_CONTAINER));
            DocumentRenderer.updatePageColor(pageElement, this.viewManager.layout.pageColor);
            this.updatePageClasses(pageElement);
            this.updatePageSize(layoutPage, pageElement);
            DocumentRenderer.insertInContainer(this.viewManager.pagesContainer, layoutPageIndex, pageElement, function (node) { return node; });
            this.cache.splice(layoutPageIndex, 0, new DocumentRendererPageCache(pageElement));
        }
        if (renderInnerContent)
            this.renderPageContent(layoutPage, layoutPageIndex);
    };
    DocumentRenderer.prototype.removePage = function (pageIndex) {
        var pageCache = this.cache[pageIndex];
        if (pageCache) {
            pageCache.page.parentNode.removeChild(pageCache.page);
            this.cache.splice(pageIndex, 1);
        }
    };
    DocumentRenderer.prototype.updatePageSize = function (page, pageElement) {
        if (pageElement.offsetHeight != page.height || pageElement.offsetWidth != page.width)
            dom_1.DomUtils.setStyleSize(pageElement.style, page);
    };
    DocumentRenderer.prototype.updatePageClasses = function (pageElement) {
        pageElement.className = renderer_class_names_1.RendererClassNames.PAGE;
        if (this.viewManager.innerClientProperties.viewsSettings.isSimpleView &&
            !this.viewManager.innerClientProperties.viewsSettings.isFixedWidthMode)
            dom_1.DomUtils.addClassName(pageElement, renderer_class_names_1.RendererClassNames.SIMPLE_PAGE_FLOW_MODE);
    };
    DocumentRenderer.prototype.removePageContent = function (pageIndex) {
        var pageCache = this.cache[pageIndex];
        if (pageCache)
            pageCache.removeContent();
    };
    DocumentRenderer.prototype.renderPageContainers = function (pageCache) {
        pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.SELECTION_CONTAINER));
        pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.SEARCH_SELECTION_CONTAINER));
        pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.MISSPELLED_SELECTION_CONTAINER));
        pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.RANGE_PERMISSIONS_CONTAINER));
        var result = [
            pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.MAIN_PAGE_AREA_CONTAINER)),
            pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.OTHER_PAGE_AREA_CONTAINER)),
            pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.FLOATING_OBJECTS_CONTAINER))
        ];
        pageCache.page.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.SHAPE_BG_CONTAINER));
        return result;
    };
    DocumentRenderer.prototype.renderPageContent = function (page, pageIndex) {
        var _this = this;
        var pageCache = this.cache[pageIndex];
        var _a = this.renderPageContainers(pageCache), mainPageAreasContainer = _a[0], otherPageAreasContainer = _a[1], floatingObjectsContainer = _a[2];
        list_1.ListUtils.forEach(page.mainSubDocumentPageAreas, function (area) {
            return mainPageAreasContainer.appendChild(_this.renderPageArea(page.renderLevelCalculator, pageCache, area, null));
        });
        if (!this.viewManager.innerClientProperties.viewsSettings.isSimpleView)
            number_1.NumberMapUtils.forEach(page.otherPageAreas, function (pageArea, subDocId) {
                if (!pageArea.subDocument.isTextBox())
                    DocumentRenderer.insertToContainerByObject(subDocId, otherPageAreasContainer, pageCache.otherAreas, _this.renderPageArea(page.renderLevelCalculator, pageCache, pageArea, null));
            });
        for (var _i = 0, _b = this.renderPageContentGetFloatingObjects(page); _i < _b.length; _i++) {
            var ancObjProps = _b[_i];
            switch (ancObjProps.getType()) {
                case layout_box_1.LayoutBoxType.AnchorTextBox:
                    var internalSubDocId = ancObjProps.internalSubDocId;
                    DocumentRenderer.insertToContainerByObject(internalSubDocId, otherPageAreasContainer, pageCache.otherAreas, this.renderPageArea(page.renderLevelCalculator, pageCache, page.otherPageAreas[internalSubDocId], ancObjProps));
                    break;
                case layout_box_1.LayoutBoxType.AnchorPicture:
                    DocumentRenderer.insertToContainerByObject(ancObjProps.objectId, floatingObjectsContainer, pageCache.anchoredPicture, this.renderFloatingPicture(ancObjProps, page.renderLevelCalculator));
                    break;
            }
        }
    };
    DocumentRenderer.updatePageColor = function (pageElement, newColor) {
        var newStringColor = color_2.ColorUtils.colorToHash(newColor);
        if (pageElement.style.backgroundColor != newStringColor)
            pageElement.style.backgroundColor = color_1.ColorHelper.isEmptyBgColor(newColor) ? "" : newStringColor;
    };
    DocumentRenderer.getPageAreaClassname = function (area) {
        switch (area.subDocument.info.getType()) {
            case enums_3.SubDocumentInfoType.Main:
            case enums_3.SubDocumentInfoType.Header:
            case enums_3.SubDocumentInfoType.Footer:
                return renderer_class_names_1.RendererClassNames.PAGE_AREA;
            case enums_3.SubDocumentInfoType.TextBox:
                return renderer_class_names_1.RendererClassNames.PAGE_AREA + " " + renderer_class_names_1.RendererClassNames.FLOATING_OBJECT_TEXT_BOX_AREA;
        }
        throw new Error(errors_1.Errors.InternalException);
    };
    DocumentRenderer.prototype.renderPageArea = function (renderLevelCalculator, pageCache, area, textBox, renderContent) {
        if (renderContent === void 0) { renderContent = true; }
        var element = DocumentRenderer.renderContainer(DocumentRenderer.getPageAreaClassname(area));
        if (area.subDocument.isTextBox())
            element.style.overflow = "hidden";
        dom_1.DomUtils.setStyleSizeAndPosition(element.style, area);
        var level;
        switch (area.subDocument.info.getType()) {
            case enums_3.SubDocumentInfoType.TextBox:
                level = renderLevelCalculator.getRenderLevel(textBox.rendererLevel);
                break;
            case enums_3.SubDocumentInfoType.Footer:
            case enums_3.SubDocumentInfoType.Header:
                level = renderLevelCalculator.renderHeaderFooterPageAreasLevel;
                break;
            case enums_3.SubDocumentInfoType.Main:
                level = renderLevelCalculator.renderMainPageAreaLevel;
                break;
            default: throw new Error(errors_1.Errors.NotImplemented);
        }
        if (area.subDocument.isTextBox()) {
            var textBoxShapeInfo = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TEXT_BOX_BG + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TextBoxBg));
            var oldBgElem = pageCache.textBoxBgElements[area.subDocument.id];
            if (oldBgElem)
                dom_1.DomUtils.hideNode(oldBgElem);
            pageCache.textBoxBgElements[area.subDocument.id] = textBoxShapeInfo;
            DocumentRenderer.setShapePropertiesToElement(textBoxShapeInfo, textBox.shape, true);
            dom_1.DomUtils.setStyleSize(textBoxShapeInfo.style, area);
            dom_1.DomUtils.setStylePosition(textBoxShapeInfo.style, textBox.getExtendedBounds());
            DocumentRenderer.setRotationInRadians(textBoxShapeInfo, textBox.rotationInRadians);
            DocumentRenderer.getTextBoxBackgroundContainer(pageCache.page).appendChild(textBoxShapeInfo);
            dom_1.DomUtils.setStylePosition(element.style, area);
            if (DocumentRenderer.setRotationInRadians(element, textBox.rotationInRadians))
                dom_1.DomUtils.addClassName(element, z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TextBox));
        }
        else {
            var color = color_1.ColorHelper.isEmptyBgColor(this.viewManager.layout.pageColor) ?
                color_2.ColorUtils.LIGHT_COLOR : this.viewManager.layout.pageColor;
            DocumentRenderer.updatePageColor(element, color);
        }
        if (renderContent)
            for (var _i = 0, _a = area.columns; _i < _a.length; _i++) {
                var column = _a[_i];
                element.appendChild(this.renderColumn(column, level, area.subDocument.isMain()));
            }
        return element;
    };
    DocumentRenderer.prototype.renderColumn = function (column, level, _isMainPageArea) {
        var columnElement = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.COLUMN);
        dom_1.DomUtils.setStyleSizeAndPosition(columnElement.style, column);
        var rowsContainer = columnElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.ROWS_CONTAINER));
        var paragraphFramesContainer = columnElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.PARAGRAPHFRAMES_CONTAINER));
        var tablesContainer = columnElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLES_CONTAINER));
        for (var _i = 0, _a = column.rows; _i < _a.length; _i++) {
            var row = _a[_i];
            rowsContainer.appendChild(this.renderRow(row, level));
        }
        for (var _b = 0, _c = column.paragraphFrames; _b < _c.length; _b++) {
            var frame = _c[_b];
            paragraphFramesContainer.appendChild(DocumentRenderer.renderParagraphFrame(frame, level));
        }
        for (var _d = 0, _e = column.tablesInfo; _d < _e.length; _d++) {
            var tableColumn = _e[_d];
            tablesContainer.appendChild(DocumentRenderer.renderTable(tableColumn, level, this.viewManager.innerClientProperties.showTableGridLines));
        }
        return columnElement;
    };
    DocumentRenderer.prototype.renderRow = function (row, level) {
        var lastBoxIndexWhatCanStrikeoutAndUnderline = row.getLastBoxIndexWhatCanStrikeoutAndUnderline();
        var content = "";
        if (row.numberingListBox) {
            content += this.renderBox(row, row.numberingListBox.textBox, 0 > lastBoxIndexWhatCanStrikeoutAndUnderline, level).html;
            if (row.numberingListBox.separatorBox)
                content += this.renderBox(row, row.numberingListBox.separatorBox, 0 > lastBoxIndexWhatCanStrikeoutAndUnderline, level).html;
        }
        var increaseRowHeight = false;
        for (var boxIndex = 0, box = void 0; box = row.boxes[boxIndex]; boxIndex++) {
            if (box.getType() == layout_box_1.LayoutBoxType.AnchorTextBox || box.getType() == layout_box_1.LayoutBoxType.AnchorPicture)
                continue;
            var boxRenderResult = this.renderBox(row, box, boxIndex > lastBoxIndexWhatCanStrikeoutAndUnderline, level);
            content += boxRenderResult.html;
            increaseRowHeight = increaseRowHeight || boxRenderResult.increaseRowHeight;
        }
        for (var _i = 0, _a = row.bookmarkBoxes; _i < _a.length; _i++) {
            var bookmarkBox = _a[_i];
            content += DocumentRenderer.renderBookmark(bookmarkBox, level);
        }
        var rowElement = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.ROW);
        dom_1.DomUtils.setStyleSizeAndPosition(rowElement.style, new rectangle_1.Rectangle(row.x, row.y + row.getSpacingBefore(), row.width, (row.height - row.getSpacingBefore()) + (increaseRowHeight ? 1 : 0)));
        rowElement.innerHTML = content;
        return rowElement;
    };
    DocumentRenderer.prototype.renderBox = function (row, box, noNeedUnderlineAndStrikeout, level) {
        var content = box.renderGetContent(this);
        var top = box.getTop(row);
        var left = box.x;
        if (box.characterProperties.script === enums_2.CharacterFormattingScript.Subscript) {
            var multiplier = box.characterProperties.fontInfo.scriptMultiplier;
            top += unit_converter_1.UnitConverter.pointsToPixelsF(box.characterProperties.fontSize) * (box.characterProperties.fontInfo.subScriptOffset * multiplier - multiplier + 1);
        }
        var delta = box.height > row.height && top >= 0 ? math_1.MathUtils.round(box.height - row.height) * 3 / 4 : 0;
        var boxStyles = [];
        boxStyles.push("left: " + math_1.MathUtils.round(left, 3) + "px");
        boxStyles.push("top: " + math_1.MathUtils.round(top - delta, 3) + "px");
        boxStyles.push("width: " + math_1.MathUtils.round(box.width, 3) + "px");
        boxStyles.push("height: " + math_1.MathUtils.round(box.height, 3) + "px");
        var props = box.renderGetCharacterProperties();
        var charProps = props.initProps;
        var colorProps = props.colorInfo;
        var underlineColor = colorProps.underlineColor;
        var strikeoutColor = colorProps.strikeoutColor;
        var textColor = colorProps.textColor;
        var needUnderline = !noNeedUnderlineAndStrikeout && (charProps.fontUnderlineType != enums_2.UnderlineType.None) && (box.getType() != layout_box_1.LayoutBoxType.Space || !charProps.underlineWordsOnly);
        var needStrikeout = !noNeedUnderlineAndStrikeout && (charProps.fontStrikeoutType != enums_2.StrikeoutType.None) && (box.getType() != layout_box_1.LayoutBoxType.Space || !charProps.strikeoutWordsOnly);
        if ((needStrikeout && needUnderline) || (needStrikeout && strikeoutColor != color_1.ColorHelper.AUTOMATIC_COLOR) || (needUnderline && underlineColor != color_1.ColorHelper.AUTOMATIC_COLOR)) {
            boxStyles = boxStyles.concat(html_converter_1.HtmlConverter.getSizeSignificantRules(charProps));
            boxStyles.push(html_converter_1.HtmlConverter.getForeColorRule(textColor));
            var needColor = strikeoutColor != color_1.ColorHelper.AUTOMATIC_COLOR ||
                underlineColor != color_1.ColorHelper.AUTOMATIC_COLOR;
            if (needColor && (!needStrikeout || strikeoutColor != color_1.ColorHelper.AUTOMATIC_COLOR))
                content = '<span style="color: ' + color_1.ColorHelper.getCssString(textColor, true) + ';">' + content + '</span>';
            if (needStrikeout) {
                var strikeoutColorStyle = needColor ? ("color: " + color_1.ColorHelper.getCssString(strikeoutColor == color_1.ColorHelper.AUTOMATIC_COLOR ? textColor : strikeoutColor, true)) : "";
                content = '<span style="text-decoration: line-through;' + strikeoutColorStyle + '">' + content + '</span>';
            }
            if (needUnderline) {
                var underlineColorStyle = needColor ? ("color: " + color_1.ColorHelper.getCssString(underlineColor == color_1.ColorHelper.AUTOMATIC_COLOR ? textColor : underlineColor, true)) : "";
                content = '<span style="text-decoration: underline;' + underlineColorStyle + '">' + content + '</span>';
            }
        }
        else
            boxStyles = boxStyles.concat(html_converter_1.HtmlConverter.getCssRules(charProps, textColor, box.renderIsWordBox(), noNeedUnderlineAndStrikeout, true));
        var boxClass = "";
        switch (box.getType()) {
            case layout_box_1.LayoutBoxType.Text:
            case layout_box_1.LayoutBoxType.LayoutDependent:
            case layout_box_1.LayoutBoxType.FieldCodeEnd:
            case layout_box_1.LayoutBoxType.FieldCodeStart:
            case layout_box_1.LayoutBoxType.ColumnBreak:
            case layout_box_1.LayoutBoxType.LineBreak:
            case layout_box_1.LayoutBoxType.PageBreak:
            case layout_box_1.LayoutBoxType.ParagraphMark:
            case layout_box_1.LayoutBoxType.SectionMark:
                boxClass = renderer_class_names_1.RendererClassNames.BOX + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.Box);
                break;
            default:
                boxClass = renderer_class_names_1.RendererClassNames.BOX_SPACE + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.BoxSpace);
        }
        if (charProps.hidden && this.viewManager.innerClientProperties.showHiddenSymbols)
            boxClass += ' ' + renderer_class_names_1.RendererClassNames.HIDDEN_BOX;
        var html = '<span style="' + boxStyles.join(";") + '" class="' + boxClass + '">' + content + '</span>';
        var backColor = colorProps.foregroundColor;
        if (box.fieldLevel && (backColor == color_1.ColorHelper.AUTOMATIC_COLOR || backColor == color_1.ColorHelper.NO_COLOR)) {
            var fieldBgClass = renderer_class_names_1.RendererClassNames.FIELD_BG + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.FieldBg);
            switch (box.fieldLevel) {
                case 1:
                    fieldBgClass += ' ' + renderer_class_names_1.RendererClassNames.FIELD_BOX_LEVEL1;
                    break;
                case 2:
                    fieldBgClass += ' ' + renderer_class_names_1.RendererClassNames.FIELD_BOX_LEVEL2;
                    break;
                default: fieldBgClass += ' ' + renderer_class_names_1.RendererClassNames.FIELD_BOX_LEVEL3;
            }
            html += '<span class="' + fieldBgClass + '" style="top: ' + math_1.MathUtils.round(top, 3) + 'px; left: ' + math_1.MathUtils.round(left, 3) + 'px; width: ' +
                math_1.MathUtils.round(box.width, 3) + 'px; height: ' + math_1.MathUtils.round(box.height, 3) + 'px"></span>';
        }
        if (color_2.ColorUtils.getAlpha(backColor) > 0 && !noNeedUnderlineAndStrikeout) {
            var height = row.height - row.getSpacingAfter();
            var bgBoxStyle = "top: 0px; left: " + Math.floor(box.x) + "px; width: " + Math.ceil(box.width) + "px; height: " + math_1.MathUtils.round(height, 3) +
                "px; background: " + color_1.ColorHelper.getCssStringInternal(backColor) + ";";
            html += '<span class="' + renderer_class_names_1.RendererClassNames.BOX_BG + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.BoxBg) +
                '" style="' + bgBoxStyle + '"></span>';
        }
        if (box.hyperlinkTip) {
            var tip = utils_1.CanvasUtils.buildHyperlinkTipString(box.hyperlinkTip, this.viewManager.stringResources.commonLabels.clickToFollowHyperlink, this.viewManager.fieldOptions);
            if (tip) {
                html = "<span title=\"" + tip + "\">" + html + "</span>";
            }
        }
        return new BoxRenderResult(html, charProps.hidden);
    };
    DocumentRenderer.renderBookmark = function (box, level) {
        var className = (box.boxType == bookmark_box_1.LayoutBookmarkBoxType.StartBox ?
            renderer_class_names_1.RendererClassNames.START_BOOKMARK :
            renderer_class_names_1.RendererClassNames.END_BOOKMARK) + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.Bookmark);
        return "<div class=\"" + className + "\" style=\"width: " + math_1.MathUtils.round(box.width, 3) + "px; height: " + math_1.MathUtils.round(box.height, 3) + "px; " +
            ("left: " + math_1.MathUtils.round(box.x, 3) + "px; top: " + math_1.MathUtils.round(box.y, 3) + "px; border-color: " + box.color + "\"></div>");
    };
    DocumentRenderer.prototype.renderPicture = function (box) {
        return this.renderPictureBoxContent(box.createSize(), box.cacheInfo, box.hyperlinkTip);
    };
    DocumentRenderer.prototype.renderFloatingPicture = function (box, renderLevelCalculator) {
        var element = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.ANCHORED_PICTURE + " " + z_index_helper_1.ZIndexHelper.getClassName(renderLevelCalculator.getRenderLevel(box.rendererLevel), z_index_helper_1.zIndexCssClassType.AnchoredPicture));
        dom_1.DomUtils.setStyleSize(element.style, box);
        dom_1.DomUtils.setStylePosition(element.style, new point_1.Point(box.x - box.shape.outlineWidth, box.y - box.shape.outlineWidth));
        DocumentRenderer.setShapePropertiesToElement(element, box.shape, false);
        DocumentRenderer.setRotationInRadians(element, box.rotationInRadians);
        element.innerHTML = box.renderGetContent(this);
        return element;
    };
    DocumentRenderer.setShapePropertiesToElement = function (element, shape, isTextBox) {
        element.style.backgroundColor = color_1.ColorHelper.getCssString(shape.fillColor, false);
        element.style.borderStyle = DocumentRenderer.borderTypeToString(enums_1.BorderLineStyle.Single);
        element.style.borderColor = color_1.ColorHelper.getCssString(shape.outlineColor, false);
        element.style.borderWidth = Math.max(isTextBox ? 1 : 0, shape.outlineWidth).toString() + "px";
        element.style.boxSizing = "content-box";
    };
    DocumentRenderer.setRotationInRadians = function (element, rotation) {
        var isSetRotation = rotation != 0;
        element.style.transform = isSetRotation ? "rotate(" + rotation + "rad)" : "none";
        return isSetRotation;
    };
    DocumentRenderer.renderParagraphFrame = function (paragraphFrame, level) {
        var element = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.PARAGRAPH_FRAME + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.ParBg));
        DocumentRenderer.updateParagraphFrame(paragraphFrame, element);
        return element;
    };
    DocumentRenderer.updateParagraphFrame = function (frame, frameElement) {
        dom_1.DomUtils.setStyleSizeAndPosition(frameElement.style, frame);
        frameElement.style.background = color_1.ColorHelper.getCssStringInternal(frame.paragraphColor);
    };
    DocumentRenderer.renderTable = function (tableColumnInfo, level, showTableGridLines) {
        var tblXPos = tableColumnInfo.x;
        var tblYPos = tableColumnInfo.y;
        var tblBgColor = tableColumnInfo.logicInfo.backgroundColor;
        var tableElement = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_ELEMENTS_CONTAINER);
        dom_1.DomUtils.setStylePosition(tableElement.style, tableColumnInfo);
        var tblBordersContainer = tableElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_BORDERS_CONTAINER));
        var tblRowsBgContainer = tableElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_ROW_BACKGROUND_CONTAINER));
        var tblCellsBgContainer = tableElement.appendChild(DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_CELL_BACKGROUND_CONTAINER));
        var tblCursorsContainer = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_CURSORS_CONTAINER);
        tblCursorsContainer.style.width = tableColumnInfo.width + "px";
        tblCursorsContainer.style.height = tableColumnInfo.height + "px";
        tableElement.appendChild(tblCursorsContainer);
        tblCursorsContainer["dxTableIndex"] = tableColumnInfo.logicInfo.grid.table.index;
        for (var i = 0, border = void 0; border = tableColumnInfo.horizontalBorders[i]; i++)
            DocumentRenderer.renderHorizontalBorder(tblBordersContainer, border, level, showTableGridLines);
        for (var i = 0, border = void 0; border = tableColumnInfo.verticalBorders[i]; i++)
            DocumentRenderer.renderVerticalBorder(tblBordersContainer, border, level, showTableGridLines);
        if (tableColumnInfo.logicInfo.isEditable) {
            for (var _i = 0, _a = tableColumnInfo.verticalCursorBorders; _i < _a.length; _i++) {
                var border = _a[_i];
                var element = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_COLUMN_CURSOR + " " +
                    z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TblCursor));
                dom_1.DomUtils.setStylePosition(element.style, new point_1.Point(border.xPos, border.yPos));
                element.style.height = border.length + "px";
                tblCursorsContainer.appendChild(element);
            }
            for (var _b = 0, _c = tableColumnInfo.horizontalCursorBorders; _b < _c.length; _b++) {
                var border = _c[_b];
                var element = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_ROW_CURSOR + " " +
                    z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TblCursor));
                dom_1.DomUtils.setStylePosition(element.style, new point_1.Point(border.xPos, border.yPos));
                element.style.width = border.length + "px";
                element["dxLayoutRowIndex"] = border.layoutRowIndex;
                tblCursorsContainer.appendChild(element);
            }
        }
        for (var _d = 0, _e = tableColumnInfo.tableRows; _d < _e.length; _d++) {
            var tblRow = _e[_d];
            DocumentRenderer.renderTableBackgroundElement(renderer_class_names_1.RendererClassNames.TABLE_ROW_BG + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TblRowBg), tblRowsBgContainer, tblRow, tblXPos, tblYPos, tblBgColor);
            for (var _f = 0, _g = tblRow.backgroundInfos; _f < _g.length; _f++) {
                var cellBgInfo = _g[_f];
                DocumentRenderer.renderTableBackgroundElement(renderer_class_names_1.RendererClassNames.TABLE_CELL_BG + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TblCellBg), tblCellsBgContainer, cellBgInfo, 0, 0, cellBgInfo.color);
            }
        }
        return tableElement;
    };
    DocumentRenderer.renderTableBackgroundElement = function (className, container, bound, tblXPos, tblYPos, color) {
        if (color_1.ColorHelper.isEmptyBgColor(color))
            return;
        var elem = DocumentRenderer.renderContainer(className);
        dom_1.DomUtils.setStylePosition(elem.style, new point_1.Point(bound.x - tblXPos, bound.y - tblYPos));
        dom_1.DomUtils.setStyleSize(elem.style, bound);
        elem.style.backgroundColor = color_2.ColorUtils.colorToHash(color);
        container.appendChild(elem);
    };
    DocumentRenderer.renderVerticalBorder = function (tableBordersContainer, border, level, showTableGridLines) {
        var borderInfo = border.borderInfo;
        if (DocumentRenderer.isNotRenderTableBorder(borderInfo)) {
            if (showTableGridLines) {
                var element = DocumentRenderer.createBorderElement(color_2.ColorUtils.LIGHT_COLOR, level);
                dom_1.DomUtils.setStyleSizeAndPosition(element.style, new rectangle_1.Rectangle(border.xPos, border.yPos, 0, border.length));
                element.style.borderStyle = "None";
                element.style.borderRightWidth = DocumentRenderer.getTableGridLineBorderWidth();
                element.style.borderRightStyle = "dashed";
                tableBordersContainer.appendChild(element);
            }
        }
        else {
            var element = DocumentRenderer.createBorderElement(borderInfo.color, level);
            dom_1.DomUtils.setStyleSizeAndPosition(element.style, new rectangle_1.Rectangle(border.xPos, border.yPos, 0, border.length));
            element.style.backgroundColor = "";
            element.style.borderStyle = "None";
            element.style.borderRightColor = color_2.ColorUtils.colorToHash(borderInfo.color);
            element.style.borderRightWidth = DocumentRenderer.getBorderTypeWidth(borderInfo);
            element.style.borderRightStyle = DocumentRenderer.borderTypeToString(borderInfo.style);
            tableBordersContainer.appendChild(element);
        }
    };
    DocumentRenderer.getTableGridLineBorderWidth = function () {
        var devicePixelRatio = window.devicePixelRatio;
        if (browser_1.Browser.Chrome && devicePixelRatio > 1 && devicePixelRatio < 1.5)
            return "1.5px";
        return "1px";
    };
    DocumentRenderer.renderHorizontalBorder = function (tableBordersContainer, border, level, showTableGridLines) {
        var borderInfo = border.borderInfo;
        if (DocumentRenderer.isNotRenderTableBorder(borderInfo)) {
            if (!showTableGridLines)
                return;
            var element = DocumentRenderer.createBorderElement(color_2.ColorUtils.LIGHT_COLOR, level);
            dom_1.DomUtils.setStyleSizeAndPosition(element.style, new rectangle_1.Rectangle(border.xPos, border.yPos, border.length, 0));
            element.style.borderStyle = "None";
            element.style.borderBottomWidth = DocumentRenderer.getTableGridLineBorderWidth();
            element.style.borderBottomStyle = "dashed";
            tableBordersContainer.appendChild(element);
        }
        else {
            var element = DocumentRenderer.createBorderElement(borderInfo.color, level);
            dom_1.DomUtils.setStyleSizeAndPosition(element.style, new rectangle_1.Rectangle(border.xPos, border.yPos, border.length, 0));
            element.style.backgroundColor = "";
            element.style.borderStyle = "None";
            element.style.borderBottomColor = color_2.ColorUtils.colorToHash(borderInfo.color);
            element.style.borderBottomWidth = DocumentRenderer.getBorderTypeWidth(borderInfo);
            element.style.borderBottomStyle = DocumentRenderer.borderTypeToString(borderInfo.style);
            tableBordersContainer.appendChild(element);
        }
    };
    DocumentRenderer.createBorderElement = function (color, level) {
        var element = DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLE_BORDER + " " + z_index_helper_1.ZIndexHelper.getClassName(level, z_index_helper_1.zIndexCssClassType.TableBorder));
        element.style.backgroundColor = color_2.ColorUtils.colorToHash(color);
        return element;
    };
    DocumentRenderer.isNotRenderTableBorder = function (borderInfo) {
        return !borderInfo || borderInfo.style == enums_1.BorderLineStyle.None || borderInfo.style == enums_1.BorderLineStyle.Nil;
    };
    DocumentRenderer.borderTypeToString = function (style) {
        var str = DocumentRenderer.mapBorderTypeToString[style];
        return str ? str : "solid";
    };
    DocumentRenderer.getBorderTypeWidth = function (borderInfo) {
        var mimWidth = this.getBorderTypeMinWidth(borderInfo.style);
        return Math.max(mimWidth, borderInfo.width) + "px";
    };
    DocumentRenderer.getBorderTypeMinWidth = function (style) {
        if (style == enums_1.BorderLineStyle.Double)
            return 3;
        return 1;
    };
    DocumentRenderer.getServiceContainerCore = function (pageElement) {
        return pageElement.firstChild;
    };
    DocumentRenderer.getSelectionContainerCore = function (pageElement) {
        return pageElement.childNodes[1];
    };
    DocumentRenderer.getSearchSelectionContainerCore = function (pageElement) {
        return pageElement.childNodes[2];
    };
    DocumentRenderer.getMisspelledSelectionContainerCore = function (pageElement) {
        return pageElement.childNodes[3];
    };
    DocumentRenderer.getRangePermissionsContainerCore = function (pageElement) {
        return pageElement.childNodes[4];
    };
    DocumentRenderer.isPageElementConsiderAllContainers = function (pageElement) {
        return pageElement.childNodes.length > 1;
    };
    DocumentRenderer.getMainPageAreaContainerCore = function (pageElement) {
        return pageElement.childNodes[5];
    };
    DocumentRenderer.getOtherPageAreaContainerCore = function (pageElement) {
        return pageElement.childNodes[6];
    };
    DocumentRenderer.getAnchoredObjectsContainer = function (pageElement) {
        return pageElement.childNodes[7];
    };
    DocumentRenderer.getTextBoxBackgroundContainer = function (pageElement) {
        return pageElement.childNodes[8];
    };
    DocumentRenderer.getRowsContainerCore = function (columnElement) {
        return columnElement.firstChild;
    };
    DocumentRenderer.getParagraphFramesContainerCore = function (columnElement) {
        return browser_1.Browser.Chrome ? columnElement.firstChild.nextSibling : columnElement.childNodes[1];
    };
    DocumentRenderer.getTablesContainerCore = function (columnElement) {
        return columnElement.lastChild;
    };
    DocumentRenderer.getColumnsContainerCore = function (pageAreaElement) {
        return pageAreaElement;
    };
    DocumentRenderer.renderContainer = function (className) {
        var element = document.createElement("DIV");
        element.className = className;
        return element;
    };
    DocumentRenderer.removeFromContainerByIndex = function (node, index, getContainer) {
        var container = getContainer(node);
        var child = container.childNodes[index];
        if (child)
            container.removeChild(child);
    };
    DocumentRenderer.replaceInContainer = function (node, index, newRenderedElement, getContainer) {
        var container = getContainer(node);
        container.replaceChild(newRenderedElement, container.childNodes[index]);
    };
    DocumentRenderer.insertInContainer = function (node, index, newRenderedElement, getContainer) {
        var container = getContainer(node);
        if (index < container.childNodes.length)
            container.insertBefore(newRenderedElement, container.childNodes[index]);
        else
            container.appendChild(newRenderedElement);
    };
    DocumentRenderer.removeFromContainerByObject = function (id, container, cache) {
        var obj = cache[id];
        if (obj) {
            container.removeChild(obj);
            delete cache[id];
        }
    };
    DocumentRenderer.replaceFromContainerByObject = function (id, container, cache, newNode) {
        container.replaceChild(newNode, cache[id]);
        cache[id] = newNode;
    };
    DocumentRenderer.insertToContainerByObject = function (id, container, cache, newNode) {
        cache[id] = newNode;
        container.appendChild(newNode);
    };
    DocumentRenderer.isPageElementEmpty = function (pageElement) {
        return pageElement.childNodes.length == 0;
    };
    DocumentRenderer.prototype.renderPictureBoxContent = function (size, cacheInfo, tip) {
        var tooltip = tip ? utils_1.CanvasUtils.buildHyperlinkTipString(tip, this.viewManager.stringResources.commonLabels.clickToFollowHyperlink, this.viewManager.fieldOptions) : "";
        return "<img src=\"" + cacheInfo.base64 + "\"" + (tooltip ? "title=\"" + tooltip + "\"" : "") + " style=\"height: " + math_1.MathUtils.round(size.height, 3) + "px; width: " + math_1.MathUtils.round(size.width, 3) + "px; vertical-align: baseline\" class=\"" + renderer_class_names_1.RendererClassNames.PICTURE + "\" />";
    };
    DocumentRenderer.mapBorderTypeToString = new map_creator_1.MapCreator()
        .add(enums_1.BorderLineStyle.Single, "solid")
        .add(enums_1.BorderLineStyle.Dotted, "dotted")
        .add(enums_1.BorderLineStyle.Dashed, "dashed")
        .add(enums_1.BorderLineStyle.Double, "double")
        .add(enums_1.BorderLineStyle.DashSmallGap, "dashed")
        .add(enums_1.BorderLineStyle.DotDash, "dashed")
        .add(enums_1.BorderLineStyle.DotDotDash, "dashed")
        .get();
    return DocumentRenderer;
}());
exports.DocumentRenderer = DocumentRenderer;
var DocumentRendererPageCache = (function () {
    function DocumentRendererPageCache(page) {
        this.page = page;
        this.init();
    }
    DocumentRendererPageCache.prototype.removeContent = function () {
        var serviceContainer = DocumentRenderer.getServiceContainerCore(this.page);
        dom_1.DomUtils.clearInnerHtml(this.page);
        this.page.appendChild(serviceContainer);
        this.init();
    };
    DocumentRendererPageCache.prototype.init = function () {
        this.otherAreas = {};
        this.anchoredPicture = {};
        this.textBoxBgElements = {};
    };
    return DocumentRendererPageCache;
}());
exports.DocumentRendererPageCache = DocumentRendererPageCache;
var BoxRenderResult = (function () {
    function BoxRenderResult(html, increaseRowHeight) {
        this.html = html;
        this.increaseRowHeight = increaseRowHeight;
    }
    return BoxRenderResult;
}());
exports.BoxRenderResult = BoxRenderResult;
