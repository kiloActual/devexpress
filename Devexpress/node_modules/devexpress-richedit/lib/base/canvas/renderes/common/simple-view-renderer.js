"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var renderer_class_names_1 = require("../../../../core/canvas/renderer-class-names");
var column_change_1 = require("../../../../core/layout-formatter/changes/changes/column-change");
var layout_change_base_1 = require("../../../../core/layout-formatter/changes/changes/layout-change-base");
var page_area_change_1 = require("../../../../core/layout-formatter/changes/changes/page-area-change");
var page_change_1 = require("../../../../core/layout-formatter/changes/changes/page-change");
var log_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log");
var log_list_helper_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-list-helper");
var log_source_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-source");
var log_obj_to_str_layout_1 = require("../../../../core/rich-utils/debug/logger/layout-logger/log-obj-to-str-layout");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var intervals_1 = require("@devexpress/utils/lib/intervals/sparse/intervals");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var simple_view_canvas_listener_1 = require("../canvas-listener/simple-view-canvas-listener");
var document_renderer_1 = require("./document-renderer");
var SimpleViewRenderer = (function (_super) {
    tslib_1.__extends(SimpleViewRenderer, _super);
    function SimpleViewRenderer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowIndexInterval = new boundary_1.BoundaryInterval(0, 0);
        _this.paragraphFramesIndexInterval = new boundary_1.BoundaryInterval(0, 0);
        _this.tableIndexInterval = new boundary_1.BoundaryInterval(0, 0);
        _this.updateDataChunk = new simple_view_canvas_listener_1.VisibleCanvasObjectsInfo(new fixed_1.FixedInterval(0, 0), new fixed_1.FixedInterval(0, 0), new fixed_1.FixedInterval(0, 0), {}, {});
        return _this;
    }
    SimpleViewRenderer.prototype.pageInserted = function (layoutPage, updateDataChunk) {
        this.updateDataChunk = updateDataChunk;
        this.renderPage(layoutPage, 0, true);
    };
    SimpleViewRenderer.prototype.renderPageContentGetFloatingObjects = function (page) {
        var foMap = number_1.NumberMapUtils.shallowCopy(this.updateDataChunk.ancPictureObjs);
        number_1.NumberMapUtils.forEach(this.updateDataChunk.ancTextBoxObjs, function (tb, key) { return foMap[key] = tb; });
        return page.anchoredObjectHolder.getObjectsForRenderer(this.viewManager.layout.anchorObjectsPositionInfo, foMap);
    };
    SimpleViewRenderer.prototype.collectScrollChanges = function (oldInterval, newInterval, isAddUpdateChange, getConstructor) {
        var changes = [];
        var iter = new intervals_1.SparseIntervals(algorithms_1.IntervalAlgorithms.getMergedIntervalsTemplate([oldInterval, newInterval], true, new boundary_1.BoundaryInterval(0, 0)))
            .getNativeIterator();
        for (var canvasElementIndex = 0; iter.moveNext();) {
            if (oldInterval.contains(iter.index)) {
                if (newInterval.contains(iter.index)) {
                    if (isAddUpdateChange)
                        changes.push(new getConstructor(iter.index, canvasElementIndex, layout_change_base_1.LayoutChangeType.Updated));
                    canvasElementIndex++;
                }
                else {
                    if (iter.index < newInterval.start)
                        changes.push(new getConstructor(iter.index, canvasElementIndex, layout_change_base_1.LayoutChangeType.Deleted));
                    else
                        do
                            changes.push(new getConstructor(iter.index, newInterval.length, layout_change_base_1.LayoutChangeType.Deleted));
                        while (iter.moveNext());
                }
            }
            else
                changes.push(new getConstructor(iter.index, canvasElementIndex++, layout_change_base_1.LayoutChangeType.Inserted));
        }
        return changes;
    };
    SimpleViewRenderer.prototype.collectScrollChangesMap = function (oldObjects, newObjects, isAddUpdateChange, isTextBoxes, getConstructor) {
        var list = [];
        number_1.NumberMapUtils.forEach(oldObjects, function (obj) { return list.push(obj.objectId); });
        number_1.NumberMapUtils.forEach(newObjects, function (obj) { return list.push(obj.objectId); });
        list = list_1.ListUtils.uniqueNumber(list);
        var changes = [];
        list_1.ListUtils.forEach(list, function (objectId) {
            if (oldObjects[objectId] !== undefined) {
                if (newObjects[objectId] !== undefined) {
                    if (isAddUpdateChange)
                        changes.push(new getConstructor(isTextBoxes ? newObjects[objectId].internalSubDocId : objectId, layout_change_base_1.LayoutChangeType.Updated));
                }
                else
                    changes.push(new getConstructor(isTextBoxes ? oldObjects[objectId].internalSubDocId : objectId, layout_change_base_1.LayoutChangeType.Deleted));
            }
            else
                changes.push(new getConstructor(isTextBoxes ? newObjects[objectId].internalSubDocId : objectId, layout_change_base_1.LayoutChangeType.Inserted));
        });
        return changes;
    };
    SimpleViewRenderer.prototype.collectAllScrollChanges = function (newUpdateDataChunk, isAddUpdateChange) {
        return new simple_view_canvas_listener_1.RenderedCanvasObjectsInfo(this.collectScrollChanges(this.updateDataChunk.rows, newUpdateDataChunk.rows, isAddUpdateChange, layout_change_base_1.RowChangeSV), this.collectScrollChanges(this.updateDataChunk.tables, newUpdateDataChunk.tables, isAddUpdateChange, layout_change_base_1.TableChangeSV), this.collectScrollChanges(this.updateDataChunk.parFrames, newUpdateDataChunk.parFrames, isAddUpdateChange, layout_change_base_1.ParagraphFrameChangeSV), this.collectScrollChangesMap(this.updateDataChunk.ancPictureObjs, newUpdateDataChunk.ancPictureObjs, isAddUpdateChange, false, layout_change_base_1.AnchoredPictureChange), this.collectScrollChangesMap(this.updateDataChunk.ancTextBoxObjs, newUpdateDataChunk.ancTextBoxObjs, isAddUpdateChange, true, page_area_change_1.PageAreaChange));
    };
    SimpleViewRenderer.prototype.pageScrolled = function (layoutPage, newUpdateDataChunk) {
        var changes = this.collectAllScrollChanges(newUpdateDataChunk, false);
        var pc = this.makePageChange(changes);
        log_1.Log.print(log_source_1.LogSource.SimpleViewRenderer, "mergedPageChanges - Changes\n", log_list_helper_1.LogListHelper.level_1(function (change) { return log_obj_to_str_layout_1.LogObjToStrLayout.pageChange(change, ""); }, [pc], "", "\n"));
        this.applyPageChange(layoutPage, pc);
        this.updateDataChunk = newUpdateDataChunk;
    };
    SimpleViewRenderer.prototype.applyFormatterChanges = function (formatterChanges, scrollChanges) {
        if (!scrollChanges.length || !formatterChanges.length)
            return;
        var mm = list_1.ListUtils.minMaxExtended(scrollChanges, function (v) { return v.layoutIndex; });
        var visibleObjectsInterval = new boundary_1.BoundaryInterval(mm.minValue, mm.maxValue + 1);
        var isObjectMustBeReplaced = list_1.ListUtils.accumulate(formatterChanges, {}, function (acc, c) {
            if (c.changeType == layout_change_base_1.LayoutChangeType.Replaced && visibleObjectsInterval.contains(c.layoutIndex))
                acc[c.layoutIndex] = true;
            return acc;
        });
        for (var _i = 0, scrollChanges_1 = scrollChanges; _i < scrollChanges_1.length; _i++) {
            var scrollChange = scrollChanges_1[_i];
            if (isObjectMustBeReplaced[scrollChange.layoutIndex] && scrollChange.changeType != layout_change_base_1.LayoutChangeType.Inserted)
                scrollChange.changeType = layout_change_base_1.LayoutChangeType.Replaced;
        }
    };
    SimpleViewRenderer.prototype.applyFormatterChangesMap = function (formatterChanges, scrollChanges) {
        var map = list_1.ListUtils.accumulate(scrollChanges, {}, function (acc, c) {
            acc[c.layoutIndex] = c;
            return acc;
        });
        list_1.ListUtils.forEach(formatterChanges, function (fc) {
            var scrollChange = map[fc.layoutIndex];
            if (scrollChange && !enum_1.EnumUtils.isAnyOf(scrollChange.changeType, layout_change_base_1.LayoutChangeType.Deleted, layout_change_base_1.LayoutChangeType.Inserted))
                if (scrollChange && scrollChange.changeType != layout_change_base_1.LayoutChangeType.Deleted)
                    scrollChange.changeType = layout_change_base_1.LayoutChangeType.Replaced;
            if (fc.changeType == layout_change_base_1.LayoutChangeType.Updated && fc instanceof page_area_change_1.PageAreaChange)
                if (scrollChange && scrollChange instanceof page_area_change_1.PageAreaChange && scrollChange.changeType == layout_change_base_1.LayoutChangeType.Updated)
                    scrollChange.columnChanges = fc.columnChanges;
        });
    };
    SimpleViewRenderer.prototype.makePageChange = function (changes) {
        var cc = [new column_change_1.ColumnChange(0, layout_change_base_1.LayoutChangeType.Updated, changes.rows, changes.tables, changes.parFrames)];
        var pac = [new page_area_change_1.PageAreaChange(0, layout_change_base_1.LayoutChangeType.Updated, cc)];
        var pc = new page_change_1.PageChange(0, layout_change_base_1.LayoutChangeType.Updated, pac, changes.ancTextBoxObjs);
        pc.anchoredPictureChanges = changes.ancPictureObjs;
        return pc;
    };
    SimpleViewRenderer.prototype.pageUpdated = function (pageChange, newUpdateDataChunk) {
        var changes = this.collectAllScrollChanges(newUpdateDataChunk, true);
        if (pageChange.mainPageAreaChanges.length) {
            this.applyFormatterChanges(pageChange.mainPageAreaChanges[0].columnChanges[0].rowChanges, changes.rows);
            this.applyFormatterChanges(pageChange.mainPageAreaChanges[0].columnChanges[0].paragraphFrameChanges, changes.parFrames);
            this.applyFormatterChanges(pageChange.mainPageAreaChanges[0].columnChanges[0].tableChanges, changes.tables);
        }
        this.applyFormatterChangesMap(pageChange.anchoredPictureChanges, changes.ancPictureObjs);
        this.applyFormatterChangesMap(pageChange.otherPageAreaChanges, changes.ancTextBoxObjs);
        var pc = this.makePageChange(changes);
        log_1.Log.print(log_source_1.LogSource.SimpleViewRenderer, "mergedPageChanges - Changes\n", log_list_helper_1.LogListHelper.level_1(function (change) { return log_obj_to_str_layout_1.LogObjToStrLayout.pageChange(change, ""); }, [pc], "", "\n"));
        this.applyPageChange(this.viewManager.layout.pages[0], pc);
        this.updateDataChunk = newUpdateDataChunk;
    };
    SimpleViewRenderer.prototype.renderColumn = function (column, level, isMainPageArea) {
        var _this = this;
        var columnElement = document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.COLUMN);
        dom_1.DomUtils.setStyleSizeAndPosition(columnElement.style, column);
        var rowsContainer = columnElement.appendChild(document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.ROWS_CONTAINER));
        var paragraphFramesContainer = columnElement.appendChild(document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.PARAGRAPHFRAMES_CONTAINER));
        var tablesContainer = columnElement.appendChild(document_renderer_1.DocumentRenderer.renderContainer(renderer_class_names_1.RendererClassNames.TABLES_CONTAINER));
        var bounds = isMainPageArea ?
            this.updateDataChunk :
            new simple_view_canvas_listener_1.SimpleViewChangesDataBase(new boundary_1.BoundaryInterval(0, column.rows.length), new boundary_1.BoundaryInterval(0, column.tablesInfo.length), new boundary_1.BoundaryInterval(0, column.paragraphFrames.length));
        list_1.ListUtils.forEach(column.rows, function (row) { return rowsContainer.appendChild(_this.renderRow(row, level)); }, bounds.rows.start, bounds.rows.end);
        list_1.ListUtils.forEach(column.paragraphFrames, function (pf) { return paragraphFramesContainer.appendChild(document_renderer_1.DocumentRenderer.renderParagraphFrame(pf, level)); }, bounds.parFrames.start, bounds.parFrames.end);
        list_1.ListUtils.forEach(column.tablesInfo, function (t) {
            return tablesContainer.appendChild(document_renderer_1.DocumentRenderer.renderTable(t, level, _this.viewManager.innerClientProperties.showTableGridLines));
        }, bounds.tables.start, bounds.tables.end);
        return columnElement;
    };
    return SimpleViewRenderer;
}(document_renderer_1.DocumentRenderer));
exports.SimpleViewRenderer = SimpleViewRenderer;
