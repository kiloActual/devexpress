"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_change_base_1 = require("../../../../core/layout-formatter/changes/changes/layout-change-base");
var layout_box_1 = require("../../../../core/layout/main-structures/layout-boxes/layout-box");
var errors_1 = require("@devexpress/utils/lib/errors");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var canvas_listener_1 = require("./canvas-listener");
var SimpleViewChangesDataBase = (function () {
    function SimpleViewChangesDataBase(rows, tables, parFrames) {
        this.rows = rows;
        this.tables = tables;
        this.parFrames = parFrames;
    }
    return SimpleViewChangesDataBase;
}());
exports.SimpleViewChangesDataBase = SimpleViewChangesDataBase;
var SimpleViewChangesData = (function (_super) {
    tslib_1.__extends(SimpleViewChangesData, _super);
    function SimpleViewChangesData(rows, tables, parFrames, ancPictureObjs, ancTextBoxObjs) {
        var _this = _super.call(this, rows, tables, parFrames) || this;
        _this.ancPictureObjs = ancPictureObjs;
        _this.ancTextBoxObjs = ancTextBoxObjs;
        return _this;
    }
    return SimpleViewChangesData;
}(SimpleViewChangesDataBase));
exports.SimpleViewChangesData = SimpleViewChangesData;
var VisibleCanvasObjectsInfo = (function (_super) {
    tslib_1.__extends(VisibleCanvasObjectsInfo, _super);
    function VisibleCanvasObjectsInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return VisibleCanvasObjectsInfo;
}(SimpleViewChangesData));
exports.VisibleCanvasObjectsInfo = VisibleCanvasObjectsInfo;
var RenderedCanvasObjectsInfo = (function (_super) {
    tslib_1.__extends(RenderedCanvasObjectsInfo, _super);
    function RenderedCanvasObjectsInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RenderedCanvasObjectsInfo;
}(SimpleViewChangesData));
exports.RenderedCanvasObjectsInfo = RenderedCanvasObjectsInfo;
var SimpleViewCanvasListener = (function (_super) {
    tslib_1.__extends(SimpleViewCanvasListener, _super);
    function SimpleViewCanvasListener() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SimpleViewCanvasListener.prototype.onPagesReady = function (pageChanges) {
        if (pageChanges.length > 1 && !list_1.ListUtils.allOf(pageChanges, function (c) { return c.changeType == layout_change_base_1.LayoutChangeType.Deleted; }, 1))
            throw new Error(errors_1.Errors.InternalException);
        if (this.layout.pages.length > 1)
            throw new Error(errors_1.Errors.InternalException);
        var pageChange = pageChanges[0];
        if (pageChange) {
            var layoutPage = this.layout.pages[0];
            switch (pageChange.changeType) {
                case layout_change_base_1.LayoutChangeType.Inserted: {
                    if (!this.viewManager.sizes.isInitialized()) {
                        this.renderer.renderPage(layoutPage, 0, false);
                        this.viewManager.adjust(false);
                    }
                    this.renderer.pageInserted(layoutPage, this.getCurrentIndexes());
                    break;
                }
                case layout_change_base_1.LayoutChangeType.Replaced: {
                    this.renderer.removePageContent(0);
                    this.renderer.renderPage(layoutPage, 0, false);
                    this.viewManager.adjust(false);
                    this.renderer.pageInserted(layoutPage, this.getCurrentIndexes());
                    break;
                }
                case layout_change_base_1.LayoutChangeType.Updated: {
                    canvas_listener_1.CanvasListener.mergeInnerPageChanges(pageChange);
                    this.renderer.pageUpdated(pageChange, this.getCurrentIndexes());
                    break;
                }
                case layout_change_base_1.LayoutChangeType.Deleted: {
                    this.renderer.removePage(0);
                    break;
                }
            }
        }
    };
    SimpleViewCanvasListener.prototype.getCurrentIndexes = function () {
        var layoutPage = this.layout.pages[0];
        var visibleInterval = this.viewManager.scroll.getVisibleInterval();
        var column = layoutPage.mainSubDocumentPageAreas[0].columns[0];
        var layoutRows = column.rows;
        var rI = this.determineVisibleObjectsForRows(layoutRows, visibleInterval);
        var tI = this.determineVisibleObjectsForTables(column.tablesInfo, visibleInterval);
        var pfI = this.determineVisibleObjects(column.paragraphFrames, visibleInterval);
        var ancPic = number_1.NumberMapUtils.reducedMap(layoutPage.anchoredObjectHolder.objects, function (fo, _id) {
            return fo.getType() == layout_box_1.LayoutBoxType.AnchorPicture && algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(fo.createVerticalInterval(), visibleInterval) ? fo : null;
        });
        var ancTB = number_1.NumberMapUtils.reducedMap(layoutPage.anchoredObjectHolder.objects, function (fo, _id) {
            return fo.getType() == layout_box_1.LayoutBoxType.AnchorTextBox && algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(fo.createVerticalInterval(), visibleInterval) ? fo : null;
        });
        return new VisibleCanvasObjectsInfo(rI, tI, pfI, ancPic, ancTB);
    };
    SimpleViewCanvasListener.prototype.determineVisibleObjects = function (objects, visibleInterval) {
        if (!objects.length)
            return new boundary_1.BoundaryInterval(-1, -1);
        var startIndex = Math.max(0, list_1.ListUtils.reverseIndexBy(objects, function (obj) { return !algorithms_1.IntervalAlgorithms.getIntersection(obj.createVerticalInterval(), visibleInterval); }, search_1.SearchUtils.normedInterpolationIndexOf(objects, function (obj) { return obj.y; }, visibleInterval.start) - 1));
        var minEndIndex = Math.max(startIndex, search_1.SearchUtils.normedInterpolationIndexOf(objects, function (obj) { return obj.y; }, visibleInterval.end));
        for (var obj = void 0; obj = objects[minEndIndex]; minEndIndex++) {
            if (!algorithms_1.IntervalAlgorithms.getIntersection(obj.createVerticalInterval(), visibleInterval)) {
                minEndIndex++;
                break;
            }
        }
        return new boundary_1.BoundaryInterval(startIndex, minEndIndex);
    };
    SimpleViewCanvasListener.prototype.determineVisibleObjectsForTables = function (objects, visibleInterval) {
        if (!objects.length)
            return new boundary_1.BoundaryInterval(-1, -1);
        var startIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(objects, function (obj) { return obj.y; }, visibleInterval.start));
        for (var obj = void 0; obj = objects[startIndex]; startIndex--) {
            if (!obj.logicInfo.grid.table.nestedLevel && !algorithms_1.IntervalAlgorithms.getIntersection(obj.createVerticalInterval(), visibleInterval))
                break;
        }
        startIndex = Math.max(0, startIndex);
        var minEndIndex = Math.max(startIndex, search_1.SearchUtils.normedInterpolationIndexOf(objects, function (obj) { return obj.y; }, visibleInterval.end));
        for (var obj = void 0; obj = objects[minEndIndex]; minEndIndex++) {
            if (!algorithms_1.IntervalAlgorithms.getIntersection(obj.createVerticalInterval(), visibleInterval)) {
                minEndIndex++;
                break;
            }
        }
        return new boundary_1.BoundaryInterval(startIndex, minEndIndex);
    };
    SimpleViewCanvasListener.prototype.determineVisibleObjectsForRows = function (rows, visibleInterval) {
        if (!rows.length)
            return new boundary_1.BoundaryInterval(-1, -1);
        var startIndex = Math.max(0, list_1.ListUtils.reverseIndexBy(rows, function (obj) { return obj.bottom < visibleInterval.start && !obj.tableCellInfo; }, search_1.SearchUtils.normedInterpolationIndexOf(rows, function (obj) { return obj.y; }, visibleInterval.start) - 1));
        var endIndex = Math.max(startIndex, search_1.SearchUtils.normedInterpolationIndexOf(rows, function (obj) { return obj.y; }, visibleInterval.end));
        for (var row = void 0; row = rows[endIndex]; endIndex++) {
            if (row.y > visibleInterval.end && !row.tableCellInfo) {
                endIndex++;
                break;
            }
        }
        return new boundary_1.BoundaryInterval(startIndex, endIndex);
    };
    SimpleViewCanvasListener.prototype.updateVisibleParts = function () {
        if (this.layout.pages.length)
            this.renderer.pageScrolled(this.layout.pages[0], this.getCurrentIndexes());
    };
    SimpleViewCanvasListener.prototype.onCanvasScroll = function () {
        this.updateVisibleParts();
    };
    return SimpleViewCanvasListener;
}(canvas_listener_1.CanvasListener));
exports.SimpleViewCanvasListener = SimpleViewCanvasListener;
