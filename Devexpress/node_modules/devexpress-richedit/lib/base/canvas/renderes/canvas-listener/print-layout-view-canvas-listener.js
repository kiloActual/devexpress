"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_change_base_1 = require("../../../../core/layout-formatter/changes/changes/layout-change-base");
var layout_page_1 = require("../../../../core/layout/main-structures/layout-page");
var log_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log");
var log_list_helper_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-list-helper");
var log_source_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-source");
var errors_1 = require("@devexpress/utils/lib/errors");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var list_1 = require("@devexpress/utils/lib/utils/list");
var debug_visualizer_type_1 = require("../../../rich-utils/debug/logger/layout-logger/visualizers/debug-visualizer-type");
var page_visible_info_helper_1 = require("../../../rich-utils/debug/logger/layout-logger/visualizers/page-visible-info-helper");
var canvas_listener_1 = require("./canvas-listener");
var PrintLayoutViewCanvasListener = (function (_super) {
    tslib_1.__extends(PrintLayoutViewCanvasListener, _super);
    function PrintLayoutViewCanvasListener(viewManager, renderer) {
        var _this = _super.call(this, viewManager, renderer) || this;
        _this.handledPageIndexes = [];
        return _this;
    }
    PrintLayoutViewCanvasListener.prototype.onPagesReady = function (pageChanges) {
        var _this = this;
        var updatedTypePageChanges = [];
        var otherTypePageChanges = [];
        for (var _i = 0, pageChanges_1 = pageChanges; _i < pageChanges_1.length; _i++) {
            var pageChange = pageChanges_1[_i];
            if (pageChange.changeType == layout_change_base_1.LayoutChangeType.Updated)
                updatedTypePageChanges.push(pageChange);
            else
                otherTypePageChanges.push(pageChange);
        }
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onPagesReady - handled pages", log_list_helper_1.LogListHelper.level_1(function (index) { return "" + index; }, this.handledPageIndexes, "\t", "\t"));
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onPagesReady - pageFlags\n", log_list_helper_1.LogListHelper.level_1(function (page) { return "" + log_1.Log.mask(layout_page_1.LayoutPageFlags, page.flags.getValue()); }, this.viewManager.layout.pages, "\t", "\n"));
        if (otherTypePageChanges.length > 0) {
            for (var _a = 0, otherTypePageChanges_1 = otherTypePageChanges; _a < otherTypePageChanges_1.length; _a++) {
                var pageChange = otherTypePageChanges_1[_a];
                var pageIndex = pageChange.index;
                var layoutPage = this.viewManager.layout.pages[pageIndex];
                switch (pageChange.changeType) {
                    case layout_change_base_1.LayoutChangeType.Inserted:
                        this.viewManager.renderer.renderPage(layoutPage, pageIndex, false);
                        layoutPage.flags.set(layout_page_1.LayoutPageFlags.ContentRendered, false);
                        this.viewManager.adjust(false);
                        break;
                    case layout_change_base_1.LayoutChangeType.Deleted:
                        this.renderer.removePage(pageIndex);
                        break;
                    case layout_change_base_1.LayoutChangeType.Replaced:
                        if (layoutPage.flags.get(layout_page_1.LayoutPageFlags.ContentRendered))
                            layoutPage.flags.set(layout_page_1.LayoutPageFlags.NeedDeleteContent, true);
                        this.renderer.renderPage(layoutPage, pageIndex, false);
                        layoutPage.flags.set(layout_page_1.LayoutPageFlags.ContentRendered, false);
                        break;
                    default: throw new Error(errors_1.Errors.NotImplemented);
                }
            }
            this.updateVisiblePages();
            this.viewManager.canvasScrollManager.updateScrollVisibility();
        }
        for (var _b = 0, updatedTypePageChanges_1 = updatedTypePageChanges; _b < updatedTypePageChanges_1.length; _b++) {
            var pageChange = updatedTypePageChanges_1[_b];
            var layoutPage = this.layout.pages[pageChange.index];
            if (!layoutPage.flags.get(layout_page_1.LayoutPageFlags.ContentRendered))
                continue;
            canvas_listener_1.CanvasListener.mergeInnerPageChanges(pageChange);
            this.renderer.applyPageChange(layoutPage, pageChange);
            this.viewManager.changeActiveSubDocumentRenderer.updatePage(this.viewManager.selection.layoutSelection, layoutPage.index);
        }
        this.handleDeferredPagesOperations();
        log_1.Log.print(log_source_1.LogSource.DiplayPageInfo, "", function () { return list_1.ListUtils.map(pageChanges, function (p) { if (p.changeType == layout_change_base_1.LayoutChangeType.Deleted)
            page_visible_info_helper_1.PageVisibleInfoHelper.hidePageVisibleInfoElement(p.index);
        else
            page_visible_info_helper_1.PageVisibleInfoHelper.showPageVisibleInfoElement(_this.viewManager.cache, function () { return "pageIndex=" + p.index; }, p.index); }); });
        log_1.Log.print(log_source_1.LogSource.DiplayTableBoundsInfo, "", function () { return list_1.ListUtils.map(pageChanges, function (p) { if (p.changeType == layout_change_base_1.LayoutChangeType.Deleted)
            log_1.Log.paramsHolder.visualizerManager.hide(debug_visualizer_type_1.DebugVisualizerType.TableBounds, p.index);
        else
            log_1.Log.paramsHolder.visualizerManager.show(debug_visualizer_type_1.DebugVisualizerType.TableBounds, _this.layout, p.index); }); });
        log_1.Log.print(log_source_1.LogSource.DiplayLayoutBoundsInfo, "", function () { return list_1.ListUtils.map(pageChanges, function (p) { if (p.changeType == layout_change_base_1.LayoutChangeType.Deleted)
            log_1.Log.paramsHolder.visualizerManager.hide(debug_visualizer_type_1.DebugVisualizerType.LayoutBounds, p.index);
        else
            log_1.Log.paramsHolder.visualizerManager.show(debug_visualizer_type_1.DebugVisualizerType.LayoutBounds, _this.layout, p.index); }); });
    };
    PrintLayoutViewCanvasListener.prototype.updateVisiblePages = function () {
        var pages = this.layout.pages;
        this.viewManager.scroll.updatePageIndexesInfo(pages);
        var renderInterval = this.viewManager.scroll.renderPageIndexInterval();
        for (var _i = 0, _a = this.handledPageIndexes; _i < _a.length; _i++) {
            var pageIndex = _a[_i];
            if (!renderInterval.contains(pageIndex)) {
                var page = pages[pageIndex];
                if (page) {
                    page.flags.set(layout_page_1.LayoutPageFlags.NeedDeleteContent, true);
                    page.flags.set(layout_page_1.LayoutPageFlags.MustBeRendered, false);
                }
            }
        }
        var endPageIndex = Math.min(renderInterval.end - 1, this.layout.pages.length - 1);
        for (var pageIndex = renderInterval.start; pageIndex <= endPageIndex; pageIndex++) {
            var page = pages[pageIndex];
            if (!page.flags.get(layout_page_1.LayoutPageFlags.ContentRendered)) {
                page.flags.set(layout_page_1.LayoutPageFlags.NeedRenderContent, true);
                page.flags.set(layout_page_1.LayoutPageFlags.MustBeRendered, true);
                this.handledPageIndexes.push(pageIndex);
            }
        }
    };
    PrintLayoutViewCanvasListener.prototype.handleDeferredPagesOperations = function () {
        var pages = this.layout.pages;
        var visiblePages = [];
        this.handledPageIndexes.sort(comparers_1.Comparers.number);
        var prevPageIndex = -1;
        for (var _i = 0, _a = this.handledPageIndexes; _i < _a.length; _i++) {
            var pageIndex = _a[_i];
            if (pageIndex == prevPageIndex)
                continue;
            var page = pages[pageIndex];
            if (!page)
                continue;
            this.handlePageFlags(page);
            if (page.flags.get(layout_page_1.LayoutPageFlags.MustBeRendered))
                visiblePages.push(pageIndex);
            prevPageIndex = pageIndex;
        }
        this.handledPageIndexes = visiblePages;
    };
    PrintLayoutViewCanvasListener.prototype.handlePageFlags = function (page) {
        var isNeedDeleteContent = page.flags.get(layout_page_1.LayoutPageFlags.NeedDeleteContent);
        if (page.index >= this.layout.validPageCount) {
            if (isNeedDeleteContent) {
                log_1.Log.print(log_source_1.LogSource.CanvasManager, "handleDeferredPagesOperations", "pageIndex: " + page.index + " content deleted");
                this.renderer.renderPage(page, page.index, false);
                page.flags.set(layout_page_1.LayoutPageFlags.ContentRendered, false);
                page.flags.set(layout_page_1.LayoutPageFlags.NeedDeleteContent, false);
                page.flags.set(layout_page_1.LayoutPageFlags.IsSelectionRendered, false);
                page.flags.set(layout_page_1.LayoutPageFlags.IsMisspelledSelectionRendered, false);
            }
            return;
        }
        var isContentRendered = page.flags.get(layout_page_1.LayoutPageFlags.ContentRendered);
        var isNeedRenderContent = page.flags.get(layout_page_1.LayoutPageFlags.NeedRenderContent);
        var callRender = isNeedDeleteContent || isNeedRenderContent;
        if (callRender) {
            log_1.Log.print(log_source_1.LogSource.CanvasManager, "handlePageFlags", "pageIndex: " + page.index + " content " + (isNeedRenderContent ? "rendered" : "deleted"));
            this.renderer.renderPage(page, page.index, isNeedRenderContent);
            this.viewManager.changeActiveSubDocumentRenderer.updatePage(this.viewManager.selection.layoutSelection, page.index);
        }
        page.flags.set(layout_page_1.LayoutPageFlags.ContentRendered, isNeedRenderContent || !callRender && isContentRendered);
        page.flags.set(layout_page_1.LayoutPageFlags.NeedDeleteContent, false);
        page.flags.set(layout_page_1.LayoutPageFlags.NeedRenderContent, false);
        if (callRender) {
            page.flags.set(layout_page_1.LayoutPageFlags.IsSelectionRendered, false);
            page.flags.set(layout_page_1.LayoutPageFlags.IsMisspelledSelectionRendered, false);
        }
    };
    PrintLayoutViewCanvasListener.prototype.updateVisibleParts = function () {
        this.updateVisiblePages();
        this.handleDeferredPagesOperations();
    };
    PrintLayoutViewCanvasListener.prototype.onCanvasScroll = function () {
        this.updateVisibleParts();
        for (var _i = 0, _a = this.handledPageIndexes; _i < _a.length; _i++) {
            var visiblePageIndex = _a[_i];
            this.viewManager.selection.renderAllPageSelection(this.layout, visiblePageIndex, false);
            this.viewManager.searchSelection.renderAllPageSelection(this.layout, visiblePageIndex, false);
            this.viewManager.misspelledSelection.renderAllPageSelection(this.layout, visiblePageIndex, false);
            this.viewManager.rangePermission.renderAllPageSelection(this.layout, visiblePageIndex, false);
        }
    };
    return PrintLayoutViewCanvasListener;
}(canvas_listener_1.CanvasListener));
exports.PrintLayoutViewCanvasListener = PrintLayoutViewCanvasListener;
