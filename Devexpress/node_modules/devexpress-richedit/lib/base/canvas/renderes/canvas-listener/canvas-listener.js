"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var changes_merger_1 = require("../../../../core/layout-formatter/changes/engine/changes-merger");
var CanvasListener = (function () {
    function CanvasListener(viewManager, renderer) {
        this.viewManager = viewManager;
        this.renderer = renderer;
    }
    Object.defineProperty(CanvasListener.prototype, "layout", {
        get: function () { return this.viewManager.layout; },
        enumerable: true,
        configurable: true
    });
    CanvasListener.prototype.closeDocument = function () {
    };
    CanvasListener.mergeInnerPageChanges = function (pageChange) {
        pageChange.mainPageAreaChanges = new changes_merger_1.LayoutPageAreaChangesMerger().merge(pageChange.mainPageAreaChanges);
        for (var _i = 0, _a = pageChange.mainPageAreaChanges; _i < _a.length; _i++) {
            var pageAreaChange = _a[_i];
            pageAreaChange.columnChanges = new changes_merger_1.LayoutColumnChangesMerger().merge(pageAreaChange.columnChanges);
            for (var _b = 0, _c = pageAreaChange.columnChanges; _b < _c.length; _b++) {
                var columnChanges = _c[_b];
                columnChanges.rowChanges = new changes_merger_1.LayoutRowChangesMerger().merge(columnChanges.rowChanges);
                columnChanges.tableChanges = new changes_merger_1.LayoutTableChangesMerger().merge(columnChanges.tableChanges);
                columnChanges.paragraphFrameChanges = new changes_merger_1.LayoutParagraphFrameChangesMerger().merge(columnChanges.paragraphFrameChanges);
            }
        }
    };
    return CanvasListener;
}());
exports.CanvasListener = CanvasListener;
