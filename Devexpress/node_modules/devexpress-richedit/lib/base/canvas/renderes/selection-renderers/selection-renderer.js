"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var renderer_class_names_1 = require("../../../../core/canvas/renderer-class-names");
var layout_page_1 = require("../../../../core/layout/main-structures/layout-page");
var layout_selection_items_1 = require("../../../../core/layout/selection/layout-selection-items");
var log_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../../../core/rich-utils/debug/logger/base-logger/log-source");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var document_renderer_1 = require("../common/document-renderer");
var selection_renderer_base_1 = require("./selection-renderer-base");
var touch_selection_circle_elements_manager_1 = require("./touch-selection-circle-elements-manager");
var CHANGE_BLINK_CURSOR_DELAY = 350;
var SelectionRenderer = (function (_super) {
    tslib_1.__extends(SelectionRenderer, _super);
    function SelectionRenderer(cache, layoutSelection) {
        var _this = _super.call(this, cache, layoutSelection) || this;
        _this.layoutPageFlag = layout_page_1.LayoutPageFlags.IsSelectionRendered;
        _this.processIdChangeCursorToBlink = null;
        _this.touchSelectionCircleElementsManager = new touch_selection_circle_elements_manager_1.TouchSelectionCircleElementsManager(cache, layoutSelection);
        return _this;
    }
    SelectionRenderer.prototype.dispose = function () {
        clearTimeout(this.processIdChangeCursorToBlink);
    };
    SelectionRenderer.prototype.applySelectionChanges = function (layout) {
        this.switchCursorToBlinkState();
        _super.prototype.applySelectionChanges.call(this, layout);
        this.touchSelectionCircleElementsManager.update();
    };
    SelectionRenderer.prototype.renderAllPageSelection = function (layout, pageIndex, force) {
        this.switchCursorToBlinkState();
        _super.prototype.renderAllPageSelection.call(this, layout, pageIndex, force);
        log_1.Log.print(log_source_1.LogSource.SelectionRenderer, "renderAllPageSelection", "pageIndex: " + pageIndex);
        this.touchSelectionCircleElementsManager.update();
    };
    SelectionRenderer.prototype.closeDocument = function () {
        this.switchCursorToBlinkState();
        this.getLayoutSelectionInfo().reset();
        this.layoutSelection.pageIndex = -1;
        this.layoutSelection.subDocumentInfo = null;
    };
    SelectionRenderer.prototype.renderItem = function (item, layoutPage) {
        var _this = this;
        if (item instanceof layout_selection_items_1.LayoutSelectionFloatingObjectItem) {
            var selectionElement_1 = document_renderer_1.DocumentRenderer.renderContainer(item.baseClassName);
            dom_1.DomUtils.setStyleSizeAndPosition(selectionElement_1.style, item);
            return selectionElement_1;
        }
        var selectionElement = _super.prototype.renderItem.call(this, item, layoutPage);
        if (item.isCursor()) {
            this.processIdChangeCursorToBlink = setTimeout(function () {
                dom_1.DomUtils.removeClassName(selectionElement, renderer_class_names_1.RendererClassNames.CURSOR_NO_BLINK_CLASS_NAME);
                _this.processIdChangeCursorToBlink = null;
            }, CHANGE_BLINK_CURSOR_DELAY);
        }
        return selectionElement;
    };
    SelectionRenderer.prototype.getLayoutSelectionInfo = function () {
        return this.layoutSelection.selectionInfo;
    };
    SelectionRenderer.prototype.getContainer = function (pageElement) {
        return document_renderer_1.DocumentRenderer.getSelectionContainerCore(pageElement);
    };
    SelectionRenderer.prototype.switchCursorToBlinkState = function () {
        if (this.processIdChangeCursorToBlink === null) {
            clearTimeout(this.processIdChangeCursorToBlink);
            this.processIdChangeCursorToBlink = null;
        }
    };
    return SelectionRenderer;
}(selection_renderer_base_1.SelectionRendererBase));
exports.SelectionRenderer = SelectionRenderer;
