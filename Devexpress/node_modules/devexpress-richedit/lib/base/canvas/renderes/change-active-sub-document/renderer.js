"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var floating_picture_renderer_1 = require("./floating-picture-renderer");
var header_footer_labels_renderer_1 = require("./header-footer-labels-renderer");
var main_header_footer_renderer_1 = require("./main-header-footer-renderer");
var text_box_renderer_1 = require("./text-box-renderer");
var RendererManager = (function () {
    function RendererManager(viewManager, stringResources) {
        this.viewManager = viewManager;
        this.renderers = [
            new floating_picture_renderer_1.FloatingPictureRenderer(this),
            new text_box_renderer_1.TextBoxRenderer(this),
            new main_header_footer_renderer_1.HeaderFooterRenderer(this),
            new main_header_footer_renderer_1.MainRenderer(this),
            new header_footer_labels_renderer_1.HeaderFooterLabelsRenderer(this, stringResources.headerFooter),
        ];
    }
    Object.defineProperty(RendererManager.prototype, "cache", {
        get: function () { return this.viewManager.cache; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RendererManager.prototype, "canvas", {
        get: function () { return this.viewManager.canvas; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RendererManager.prototype, "layout", {
        get: function () { return this.viewManager.layout; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RendererManager.prototype, "scroll", {
        get: function () { return this.viewManager.scroll; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RendererManager.prototype, "canvasScrollManager", {
        get: function () { return this.viewManager.canvasScrollManager; },
        enumerable: true,
        configurable: true
    });
    ;
    RendererManager.prototype.init = function () {
        for (var _i = 0, _a = this.renderers; _i < _a.length; _i++) {
            var r = _a[_i];
            r.init();
        }
    };
    RendererManager.prototype.update = function (layoutSelection) {
        var pageIndex = layoutSelection.pageIndex;
        var currSubDocInfo = layoutSelection.subDocumentInfo;
        for (var _i = 0, _a = this.renderers; _i < _a.length; _i++) {
            var r = _a[_i];
            r.update(currSubDocInfo, pageIndex);
        }
    };
    RendererManager.prototype.updatePage = function (layoutSelection, whatPageIndexUpdate) {
        var pageIndex = layoutSelection.pageIndex;
        var currSubDocInfo = layoutSelection.subDocumentInfo;
        for (var _i = 0, _a = this.renderers; _i < _a.length; _i++) {
            var r = _a[_i];
            r.updatePage(whatPageIndexUpdate, currSubDocInfo, pageIndex);
        }
    };
    return RendererManager;
}());
exports.RendererManager = RendererManager;
