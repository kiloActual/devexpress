"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@devexpress/utils/lib/browser");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var CanvasScrollInfo = (function () {
    function CanvasScrollInfo(canvas, sizes, internalApi) {
        this.lastScrollTop = -1;
        this.lastScrollLeft = -1;
        this.startVisiblePageIndex = 0;
        this.endVisiblePageIndex = 0;
        this.internalApi = internalApi;
        this.init(canvas, sizes);
    }
    CanvasScrollInfo.prototype.init = function (canvas, sizes) {
        this.canvas = canvas;
        this.sizes = sizes;
        this.renderPagesOffset = browser_1.Browser.TouchUI ? CanvasScrollInfo.VISIBLE_PAGES_RANGE_TOUCH : CanvasScrollInfo.VISIBLE_PAGES_RANGE;
    };
    CanvasScrollInfo.prototype.getStartRenderPageIndex = function () {
        return Math.max(0, this.startVisiblePageIndex - this.renderPagesOffset);
    };
    CanvasScrollInfo.prototype.getEndRenderPageIndex = function () {
        return this.endVisiblePageIndex + this.renderPagesOffset;
    };
    CanvasScrollInfo.prototype.renderPageIndexInterval = function () {
        return fixed_1.FixedInterval.fromPositions(this.getStartRenderPageIndex(), this.getEndRenderPageIndex() + 1);
    };
    CanvasScrollInfo.prototype.updatePageIndexesInfo = function (pages) {
        if (!pages.length)
            return;
        var scrollTop = this.getScrollTop();
        this.lastScrollLeft = this.canvas.scrollLeft;
        if (this.startVisiblePageIndex >= 0 && scrollTop == this.lastScrollTop)
            return;
        this.startVisiblePageIndex = this.sizes.findPageIndexByOffsetY(pages, scrollTop);
        this.endVisiblePageIndex = this.sizes.findPageIndexByOffsetY(pages, scrollTop + this.getVisibleHeight());
        this.lastScrollTop = scrollTop;
    };
    CanvasScrollInfo.prototype.getVisibleInterval = function () {
        var scrollTop = this.getScrollTop();
        var visibleHeight = this.getVisibleHeight();
        var visibleHeightInterval = new fixed_1.FixedInterval(scrollTop, visibleHeight);
        var fullRenderedHeight = visibleHeightInterval.length * CanvasScrollInfo.VISIBLE_AREA_HEIGHT_MULTIPLIER;
        return boundary_1.BoundaryInterval.makeByConstInterval(new fixed_1.FixedInterval(Math.max(0, visibleHeightInterval.center - Math.floor(fullRenderedHeight / 2)), fullRenderedHeight));
    };
    CanvasScrollInfo.prototype.getScrollTop = function () {
        return this.canvas.scrollTop + (this.internalApi.getVerticalScrollOffset ? this.internalApi.getVerticalScrollOffset() : 0);
    };
    CanvasScrollInfo.prototype.getVisibleHeight = function () {
        return this.internalApi.getVisibleAreaHeight ? this.internalApi.getVisibleAreaHeight() : this.sizes.getVisibleAreaHeight(false);
    };
    CanvasScrollInfo.VISIBLE_PAGES_RANGE = 2;
    CanvasScrollInfo.VISIBLE_PAGES_RANGE_TOUCH = 0;
    CanvasScrollInfo.VISIBLE_AREA_HEIGHT_MULTIPLIER = 2;
    return CanvasScrollInfo;
}());
exports.CanvasScrollInfo = CanvasScrollInfo;
