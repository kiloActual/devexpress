"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var browser_1 = require("@devexpress/utils/lib/browser");
var list_1 = require("@devexpress/utils/lib/utils/list");
var mouse_event_source_1 = require("../../mouse-handler/mouse-event-source");
var document_renderer_1 = require("../renderes/common/document-renderer");
var frame_base_listener_1 = require("./frame-base-listener");
var ResizeBoxListener = (function (_super) {
    tslib_1.__extends(ResizeBoxListener, _super);
    function ResizeBoxListener(rendererCache, stringResources, readOnlyPropertyHolder, fieldOptions) {
        var _this = _super.call(this, rendererCache, stringResources, fieldOptions) || this;
        _this.readOnlyPropertyHolder = readOnlyPropertyHolder;
        _this.initElement(false);
        return _this;
    }
    ResizeBoxListener.prototype.baseFrameClassName = function () {
        return frame_base_listener_1.FrameBaseListener.CLASSNAMES.CONTAINER;
    };
    ResizeBoxListener.getCornerPrefix = function () {
        return frame_base_listener_1.FrameBaseListener.CLASSNAMES.CORNER_ELEM_PREFIX +
            (browser_1.Browser.TouchUI ? frame_base_listener_1.FrameBaseListener.CLASSNAMES.CORNER_TOUCH_POSTFIX : "");
    };
    ResizeBoxListener.prototype.initElement = function (reinit) {
        var _this = this;
        if (reinit)
            this.initFrameElement();
        this.isReadOnly = this.readOnlyPropertyHolder.isReadOnlyPersistent;
        var cornerPrefix = ResizeBoxListener.getCornerPrefix();
        list_1.ListUtils.forEach(ResizeBoxListener.cornerLinesInfo, function (info) {
            var lineElem = document_renderer_1.DocumentRenderer.renderContainer(frame_base_listener_1.FrameBaseListener.CLASSNAMES.CORNER_LINE_PREFIX + info[0]);
            _this.baseFrame.appendChild(lineElem);
            if (!_this.isReadOnly)
                list_1.ListUtils.forEach(info, function (direction) {
                    lineElem.appendChild(document_renderer_1.DocumentRenderer.renderContainer(cornerPrefix + direction));
                }, 1);
            else
                lineElem.style.cursor = 'auto';
        });
        if (!this.isReadOnly) {
            this.baseFrame.appendChild(document_renderer_1.DocumentRenderer.renderContainer(frame_base_listener_1.FrameBaseListener.CLASSNAMES.ROTATION_BOX));
            this.baseFrame.appendChild(document_renderer_1.DocumentRenderer.renderContainer(frame_base_listener_1.FrameBaseListener.CLASSNAMES.ROTATION_LINE));
        }
    };
    ResizeBoxListener.prototype.NotifyShow = function (pageIndex, bounds, tip, isTextBox, isAnchoredObject, rotation) {
        if (this.readOnlyPropertyHolder.isReadOnlyPersistent != this.isReadOnly)
            this.initElement(true);
        _super.prototype.NotifyShow.call(this, pageIndex, bounds, tip, isTextBox, isAnchoredObject, rotation);
        this.setCursorsConsiderRotation(rotation);
    };
    ResizeBoxListener.prototype.setCursorsConsiderRotation = function (rotation) {
        var cornerPrefix = ResizeBoxListener.getCornerPrefix();
        var shift = Math.round(rotation * 180 / Math.PI / 45);
        var cornerElements = this.baseFrame.querySelectorAll("[class^=" + frame_base_listener_1.FrameBaseListener.CLASSNAMES.CORNER_ELEM_PREFIX + "]");
        cornerElements.forEach(function (node) {
            var baseElementDirection = node.className.substr(cornerPrefix.length);
            var baseCursorNameIndex = ResizeBoxListener.directions.indexOf(baseElementDirection);
            var index = (baseCursorNameIndex + shift) % ResizeBoxListener.directions.length;
            node.style.cursor = ResizeBoxListener.cursorNames[index];
        });
    };
    ResizeBoxListener.cornerLinesInfo = [
        ["W", "W"],
        ["E", "E"],
        ["N", "NW", "N", "NE"],
        ["S", "SW", "S", "SE"]
    ];
    ResizeBoxListener.directions = ["N", "NE", "E", "SE", "S", "SW", "W", "NW"];
    ResizeBoxListener.cursorNames = ["n-resize", "ne-resize", "e-resize", "se-resize", "s-resize", "sw-resize", "w-resize", "nw-resize"];
    ResizeBoxListener.directionToSource = {
        "NW": mouse_event_source_1.MouseEventSource.ResizeBox_NW,
        "NE": mouse_event_source_1.MouseEventSource.ResizeBox_NE,
        "SE": mouse_event_source_1.MouseEventSource.ResizeBox_SE,
        "SW": mouse_event_source_1.MouseEventSource.ResizeBox_SW,
        "N": mouse_event_source_1.MouseEventSource.ResizeBox_N,
        "E": mouse_event_source_1.MouseEventSource.ResizeBox_E,
        "S": mouse_event_source_1.MouseEventSource.ResizeBox_S,
        "W": mouse_event_source_1.MouseEventSource.ResizeBox_W
    };
    return ResizeBoxListener;
}(frame_base_listener_1.FrameBaseListener));
exports.ResizeBoxListener = ResizeBoxListener;
