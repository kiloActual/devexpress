"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var document_renderer_1 = require("../renderes/common/document-renderer");
var utils_1 = require("../utils");
var FrameBaseListener = (function () {
    function FrameBaseListener(rendererCache, stringResources, fieldOptions) {
        this.rendererCache = rendererCache;
        this.stringResources = stringResources;
        this.fieldOptions = fieldOptions;
        this.initFrameElement();
    }
    FrameBaseListener.prototype.initFrameElement = function () {
        if (this.baseFrame)
            this.NotifyHide();
        this.baseFrame = document_renderer_1.DocumentRenderer.renderContainer(this.baseFrameClassName());
    };
    FrameBaseListener.prototype.NotifyHide = function () {
        dom_1.DomUtils.hideNode(this.baseFrame);
    };
    FrameBaseListener.prototype.NotifyShow = function (pageIndex, bounds, tip, isTextBox, isAnchoredObject, rotation) {
        dom_1.DomUtils.setStyleSizeAndPosition(this.baseFrame.style, bounds);
        if (tip)
            this.baseFrame.title = utils_1.CanvasUtils.buildHyperlinkTipString(tip, this.stringResources.commonLabels.clickToFollowHyperlink, this.fieldOptions);
        this.toggleClass(document_renderer_1.DocumentRenderer.setRotationInRadians(this.baseFrame, rotation), FrameBaseListener.CLASSNAMES.IS_BOX_ROTATED);
        this.toggleClass(isTextBox, FrameBaseListener.CLASSNAMES.TEXTBOX_AREA);
        this.toggleClass(isAnchoredObject, FrameBaseListener.CLASSNAMES.ANCHORED_OBJECT);
        document_renderer_1.DocumentRenderer.getServiceContainerCore(this.rendererCache[pageIndex].page).appendChild(this.baseFrame);
    };
    FrameBaseListener.prototype.toggleClass = function (shouldBeEnabled, className) {
        if (shouldBeEnabled)
            dom_1.DomUtils.addClassName(this.baseFrame, className);
        else
            dom_1.DomUtils.removeClassName(this.baseFrame, className);
    };
    FrameBaseListener.CLASSNAMES = {
        CONTAINER: "dxreResBox",
        CORNER_ELEM_PREFIX: "dxreResBoxCornerElem",
        CORNER_LINE_PREFIX: "dxreResBoxCornerLine",
        CORNER_TOUCH_POSTFIX: "Touch",
        ROTATION_BOX: "dxreResBoxRotation",
        ROTATION_LINE: "dxreResBoxRotationLine",
        ANCHORED_OBJECT: "dxreResBoxAnchored",
        TEXTBOX_AREA: "dxreResBoxTextBoxArea",
        IS_BOX_ROTATED: "dxreResBoxRotated",
    };
    return FrameBaseListener;
}());
exports.FrameBaseListener = FrameBaseListener;
