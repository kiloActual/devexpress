"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var views_settings_1 = require("../../core/view-settings/views-settings");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var search_1 = require("@devexpress/utils/lib/utils/search");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var CanvasSizeInfo = (function () {
    function CanvasSizeInfo() {
        this.topSpacing = -1;
        this.betweenPageSpacing = 1;
        this.visibleAreaSize = new size_1.Size(-1, -1);
        this.scrollWidth = -1;
        this.pageVerticalInfo = new views_settings_1.RenderPageVertivalInfo();
        this.scrollWidth = dom_1.DomUtils.getVerticalScrollBarWidth();
    }
    CanvasSizeInfo.prototype.isInitialized = function () {
        return this.topSpacing >= 0;
    };
    CanvasSizeInfo.prototype.initialize = function (page, canvas) {
        this.pageVerticalInfo.init(dom_1.DomUtils.getCurrentStyle(page));
        this.topSpacing = this.pageVerticalInfo.topPageBorderWidth + this.pageVerticalInfo.topMargin;
        this.betweenPageSpacing = this.pageVerticalInfo.betweenPageSpacing;
        this.setVisibleAreaSize(canvas.offsetWidth, canvas.offsetHeight);
    };
    CanvasSizeInfo.prototype.findPageIndexByOffsetY = function (pages, offsetY) {
        var _this = this;
        return Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(pages, function (p) { return _this.getPageOffsetY(p); }, offsetY));
    };
    CanvasSizeInfo.prototype.getPageOffsetY = function (layoutPage) {
        return layoutPage.y + (this.topSpacing + layoutPage.index * this.betweenPageSpacing);
    };
    CanvasSizeInfo.prototype.setVisibleAreaSize = function (width, height) {
        this.visibleAreaSize.width = width;
        this.visibleAreaSize.height = height;
    };
    CanvasSizeInfo.prototype.getVisibleAreaWidth = function (includeScrollBars) {
        if (includeScrollBars)
            return this.visibleAreaSize.width;
        return this.scrollYVisible ? this.visibleAreaSize.width - this.scrollWidth : this.visibleAreaSize.width;
    };
    CanvasSizeInfo.prototype.getVisibleAreaHeight = function (includeScrollBars) {
        if (includeScrollBars)
            return this.visibleAreaSize.height;
        return this.scrollXVisible ? this.visibleAreaSize.height - this.scrollWidth : this.visibleAreaSize.height;
    };
    CanvasSizeInfo.prototype.updateScrollVisibility = function (measurerWidth, measurerHeight) {
        this.scrollXVisible = measurerHeight < this.visibleAreaSize.height;
        this.scrollYVisible = measurerWidth < this.visibleAreaSize.width;
    };
    return CanvasSizeInfo;
}());
exports.CanvasSizeInfo = CanvasSizeInfo;
