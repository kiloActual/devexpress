"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var layout_point_1 = require("../../core/layout/layout-point");
var log_1 = require("../../core/rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../core/rich-utils/debug/logger/base-logger/log-source");
var browser_1 = require("@devexpress/utils/lib/browser");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var popup_1 = require("@devexpress/utils/lib/utils/popup");
var event_manager_1 = require("../event-manager");
var mouse_event_source_1 = require("../mouse-handler/mouse-event-source");
var mouse_handler_1 = require("../mouse-handler/mouse-handler/mouse-handler");
var resize_box_listener_1 = require("./listeners/resize-box-listener");
var SCROLL_INTERVAL_MS = 50;
var CSSCLASS_FOCUSED = "dxreInFocus";
var AUTOSCROLL_AREA_SIZE = 10;
var AUTOSCROLL_STEP = 10;
var MSTOUCH_MOVE_SENSITIVITY = 5;
var CanvasManager = (function (_super) {
    tslib_1.__extends(CanvasManager, _super);
    function CanvasManager(viewManager, eventManager) {
        var _this = _super.call(this) || this;
        _this.lastMousePosition = { x: -1, y: -1 };
        _this.canvasPosition = { x: -1, y: -1 };
        _this.pointer = mouse_handler_1.CursorPointer.Auto;
        _this.blockNotPointerEvents = false;
        _this.lastPointerPosition = { x: -1, y: -1 };
        _this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
        _this.viewManager = viewManager;
        _this.eventManager = eventManager;
        _this.initCommonEvents();
        if (!browser_1.Browser.WebKitTouchUI)
            _this.initMouseEvents();
        if (browser_1.Browser.TouchUI)
            _this.initTouchEvents();
        if (browser_1.Browser.MSTouchUI)
            if (browser_1.Browser.MajorVersion > 10)
                _this.initPointerEvents();
            else
                _this.initMSPointerEvents();
        return _this;
    }
    Object.defineProperty(CanvasManager.prototype, "sizes", {
        get: function () { return this.viewManager.sizes; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasManager.prototype, "scroll", {
        get: function () { return this.viewManager.scroll; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CanvasManager.prototype, "controlHeightProvider", {
        get: function () { return this.sizes; },
        enumerable: true,
        configurable: true
    });
    CanvasManager.prototype.dispose = function () {
        this.evtHandlersHolder.removeAllListeners();
    };
    CanvasManager.prototype.onUpdateUnlocked = function (_occurredEvents) {
        this.viewManager.canvasListener.updateVisibleParts();
    };
    CanvasManager.prototype.setCursorPointer = function (pointer) {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "setCursorPointer", function () { return "pointer: " + mouse_handler_1.CursorPointer[pointer]; });
        if (this.pointer === pointer)
            return;
        if (this.pointer !== mouse_handler_1.CursorPointer.Auto)
            dom_1.DomUtils.removeClassName(this.viewManager.canvas, CanvasManager.getCursorClassName(this.pointer));
        var newClassName = CanvasManager.getCursorClassName(pointer);
        if (newClassName)
            dom_1.DomUtils.addClassName(this.viewManager.canvas, newClassName);
        this.pointer = pointer;
    };
    CanvasManager.prototype.closeDocument = function () {
        this.scroll.init(this.viewManager.canvas, this.sizes);
    };
    CanvasManager.prototype.focusChanged = function (inFocus) {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "focusChanged", "to: " + inFocus);
        if (inFocus)
            dom_1.DomUtils.addClassName(this.viewManager.canvas, CSSCLASS_FOCUSED);
        else
            dom_1.DomUtils.removeClassName(this.viewManager.canvas, CSSCLASS_FOCUSED);
    };
    CanvasManager.prototype.getCanvasWidth = function () {
        return this.viewManager.canvas.clientWidth;
    };
    CanvasManager.prototype.onCanvasMouseWheel = function (evt) {
        if (!this.viewManager.layout)
            return;
        var point = this.getLayoutPoint(evt, false);
        point.y += evt.deltaY;
        this.eventManager.mouseWheelEvent = true;
        this.eventManager.onMouseMove(new event_manager_1.RichMouseEvent(evt, point, CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
        this.eventManager.mouseWheelEvent = false;
        this.viewManager.canvasListener.updateVisibleParts();
    };
    CanvasManager.prototype.onCanvasMouseDown = function (evt) {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onCanvasMouseDown", "evt.button: " + evt.button + ", evt.buttons: " + evt.buttons);
        if (!this.blockNotPointerEvents)
            this.onCanvasMouseDownInternal(evt);
        evt_1.EvtUtils.preventEvent(evt);
    };
    CanvasManager.prototype.onCanvasMouseDownInternal = function (evt) {
        var _this = this;
        var point = this.getLayoutPoint(evt, true);
        this.eventManager.onMouseDown(new event_manager_1.RichMouseEvent(evt, point, CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
        this.saveMousePosition(evt);
        this.resetScrollInterval();
        this.canvasPosition.x = dom_1.DomUtils.getAbsolutePositionX(this.viewManager.canvas);
        this.canvasPosition.y = dom_1.DomUtils.getAbsolutePositionY(this.viewManager.canvas);
        if (!point.isEmpty()) {
            this.scrollIntervalID = setInterval(function () {
                _this.onScrollIntervalTick();
            }, SCROLL_INTERVAL_MS);
        }
    };
    CanvasManager.prototype.onCanvasMouseUp = function (evt) {
        log_1.Log.print(log_source_1.LogSource.CanvasManager, "onCanvasMouseUp", "");
        if (!this.blockNotPointerEvents)
            this.onCanvasMouseUpInternal(evt);
    };
    CanvasManager.prototype.onCanvasMouseUpInternal = function (evt) {
        this.eventManager.onMouseUp(new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, false), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
        this.resetScrollInterval();
    };
    CanvasManager.prototype.onCanvasMouseMove = function (evt) {
        if (!this.blockNotPointerEvents)
            this.onCanvasMouseMoveInternal(evt);
    };
    CanvasManager.prototype.onCanvasMouseMoveInternal = function (evt) {
        this.eventManager.onMouseMove(new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, false), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
    };
    CanvasManager.prototype.onCanvasMouseDblClick = function (evt) {
        this.eventManager.onMouseDblClick(new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, true), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
        return evt_1.EvtUtils.preventEventAndBubble(evt);
    };
    CanvasManager.prototype.onCanvasTouchStart = function (evt) {
        if (!this.blockNotPointerEvents)
            this.onCanvasTouchStartInternal(evt);
        return true;
    };
    CanvasManager.prototype.onCanvasTouchStartInternal = function (evt) {
        this.saveMousePosition(evt);
        var richMouseEvent = new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, true), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft);
        if (this.doubleTapStartDate && ((new Date()) - this.doubleTapStartDate) < 600) {
            this.doubleTapStartDate = null;
            this.onCanvasDoubleTap(richMouseEvent);
        }
        else {
            this.doubleTapStartDate = new Date();
            this.eventManager.onTouchStart(richMouseEvent);
        }
    };
    CanvasManager.prototype.onCanvasDoubleTap = function (evt) {
        this.eventManager.onDoubleTap(evt);
    };
    CanvasManager.prototype.onCanvasTouchEnd = function (evt) {
        if (!this.blockNotPointerEvents)
            this.onCanvasTouchEndInternal(evt);
        evt_1.EvtUtils.preventEventAndBubble(evt);
    };
    CanvasManager.prototype.onCanvasTouchEndInternal = function (evt) {
        return this.eventManager.onTouchEnd(new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, false), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
    };
    CanvasManager.prototype.onCanvasTouchMove = function (evt) {
        if (!this.blockNotPointerEvents)
            return this.onCanvasTouchMoveInternal(evt);
        return true;
    };
    CanvasManager.prototype.onCanvasTouchMoveInternal = function (evt) {
        if (!this.eventManager.onTouchMove(new event_manager_1.RichMouseEvent(evt, this.getLayoutPoint(evt, false), CanvasManager.getMouseEventSource(evt_1.EvtUtils.getEventSource(evt)), this.scroll.lastScrollTop, this.scroll.lastScrollLeft))) {
            evt_1.EvtUtils.preventEventAndBubble(evt);
            return;
        }
        return true;
    };
    CanvasManager.prototype.onCanvasPointerDown = function (evt) {
        if (evt.pointerType == "mouse")
            this.onCanvasMouseDownInternal(evt);
        else if (evt.pointerType == "touch")
            this.onCanvasTouchStartInternal(evt);
        this.blockNotPointerEvents = true;
        this.lastPointerPosition.x = evt.x;
        this.lastPointerPosition.y = evt.y;
    };
    CanvasManager.prototype.onCanvasPointerMove = function (evt) {
        if (Math.abs(evt.x - this.lastPointerPosition.x) > MSTOUCH_MOVE_SENSITIVITY || Math.abs(evt.y - this.lastPointerPosition.y) > MSTOUCH_MOVE_SENSITIVITY) {
            if (evt.pointerType == "mouse")
                this.onCanvasMouseMoveInternal(evt);
            else if (evt.pointerType == "touch") {
                this.onCanvasTouchMoveInternal(evt);
                return;
            }
            evt_1.EvtUtils.preventEventAndBubble(evt);
        }
    };
    CanvasManager.prototype.onCanvasPointerUp = function (evt) {
        var _this = this;
        if (evt.pointerType == "mouse")
            this.onCanvasMouseUpInternal(evt);
        else if (evt.pointerType == "touch")
            this.onCanvasTouchEndInternal(evt);
        setTimeout(function () { _this.blockNotPointerEvents = false; }, 0);
        evt_1.EvtUtils.preventEventAndBubble(evt);
    };
    CanvasManager.prototype.onCanvasGestureStart = function (evt) {
        this.eventManager.onGestureStart(evt);
    };
    CanvasManager.prototype.onDocumentMouseUp = function (evt) {
        if (dom_1.DomUtils.isItParent(this.viewManager.canvas, evt_1.EvtUtils.getEventSource(evt))) {
            if (!evt_1.EvtUtils.isLeftButtonPressed(evt))
                if (this.eventManager.shouldPreventContextMenuEvent)
                    popup_1.PopupUtils.preventContextMenu(evt);
            this.onCanvasMouseUp(evt);
        }
        else {
            this.eventManager.onMouseUp(new event_manager_1.RichMouseEvent(evt, null, mouse_event_source_1.MouseEventSource.Undefined, this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
            this.resetScrollInterval();
        }
    };
    CanvasManager.prototype.onDocumentContextMenu = function (evt) {
        if (!this.viewManager.canvas.parentNode)
            return;
        if (dom_1.DomUtils.isItParent(this.viewManager.canvas.parentNode.parentNode, evt_1.EvtUtils.getEventSource(evt))) {
            if (this.eventManager.shouldPreventContextMenuEvent) {
                popup_1.PopupUtils.preventContextMenu(evt);
                return evt_1.EvtUtils.cancelBubble(evt);
            }
        }
    };
    CanvasManager.prototype.onDocumentMouseMove = function (evt) {
        this.saveMousePosition(evt);
    };
    CanvasManager.prototype.onDocumentTouchEnd = function (evt) {
        if (dom_1.DomUtils.isItParent(this.viewManager.canvas, evt_1.EvtUtils.getEventSource(evt)))
            return;
        this.eventManager.onTouchEnd(new event_manager_1.RichMouseEvent(evt, null, mouse_event_source_1.MouseEventSource.Undefined, this.scroll.lastScrollTop, this.scroll.lastScrollLeft));
        this.resetScrollInterval();
    };
    CanvasManager.prototype.onDocumentTouchMove = function (evt) {
        this.saveMousePosition(evt);
    };
    CanvasManager.prototype.getScale = function (actualSize, originalSize) {
        return actualSize != 0 && originalSize != 0 ? actualSize / originalSize : 1;
    };
    CanvasManager.prototype.getLayoutPoint = function (evt, checkScroll) {
        if (!this.viewManager.layout)
            return layout_point_1.LayoutPoint.Empty();
        var canvas = this.viewManager.canvas;
        var clientRect = canvas.getBoundingClientRect();
        var scaleX = this.getScale(clientRect.width, canvas.offsetWidth);
        var scaleY = this.getScale(clientRect.height, canvas.offsetHeight);
        var clientX = evt_1.EvtUtils.getEventX(evt) / scaleX;
        var clientY = evt_1.EvtUtils.getEventY(evt) / scaleY;
        var canvasX = dom_1.DomUtils.getAbsolutePositionX(canvas) / scaleX;
        var canvasY = dom_1.DomUtils.getAbsolutePositionY(canvas) / scaleY;
        var offsetY = canvas.scrollTop + clientY - canvasY;
        var pageIndex = this.sizes.findPageIndexByOffsetY(this.viewManager.layout.pages, offsetY);
        if (checkScroll) {
            if (this.sizes.scrollYVisible && canvasX + this.sizes.getVisibleAreaWidth(false) - clientX < 0)
                return layout_point_1.LayoutPoint.Empty();
            if (this.sizes.scrollXVisible && canvasY + this.sizes.getVisibleAreaHeight(false) - clientY < 0)
                return layout_point_1.LayoutPoint.Empty();
        }
        var layoutPage = this.viewManager.layout.pages[pageIndex];
        var renderPageCacheElem = this.viewManager.cache[pageIndex];
        if (!layoutPage || !renderPageCacheElem)
            return layout_point_1.LayoutPoint.Empty();
        return new layout_point_1.LayoutPoint(pageIndex, canvas.scrollLeft + clientX - (canvasX + renderPageCacheElem.page.offsetLeft), offsetY - this.sizes.getPageOffsetY(layoutPage));
    };
    CanvasManager.prototype.isVisiblePosition = function (layoutPoint) {
        var pages = this.viewManager.layout.pages;
        this.scroll.updatePageIndexesInfo(pages);
        if (layoutPoint.pageIndex < this.scroll.startVisiblePageIndex || layoutPoint.pageIndex > this.scroll.endVisiblePageIndex)
            return false;
        var pageY = this.sizes.getPageOffsetY(pages[layoutPoint.pageIndex]);
        var pageX = this.viewManager.cache[layoutPoint.pageIndex].page.offsetLeft;
        var x = pageX + layoutPoint.x;
        var y = pageY + layoutPoint.y;
        return x >= this.scroll.lastScrollLeft && x <= this.sizes.getVisibleAreaWidth(false) + this.scroll.lastScrollLeft &&
            y >= this.scroll.lastScrollTop && y <= this.sizes.getVisibleAreaHeight(false) + this.scroll.lastScrollTop;
    };
    CanvasManager.prototype.initCommonEvents = function () {
        var _this = this;
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "scroll", function () { return _this.viewManager.canvasListener.onCanvasScroll(); });
    };
    CanvasManager.prototype.initMouseEvents = function () {
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "mousedown", this.onCanvasMouseDown.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "mousemove", this.onCanvasMouseMove.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "dblclick", this.onCanvasMouseDblClick.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, evt_1.EvtUtils.getMouseWheelEventName(), this.onCanvasMouseWheel.bind(this), { passive: true });
        this.evtHandlersHolder.addListenerToDocument("mouseup", this.onDocumentMouseUp.bind(this));
        this.evtHandlersHolder.addListenerToDocument("mousemove", this.onDocumentMouseMove.bind(this));
        this.evtHandlersHolder.addListenerToDocument("contextmenu", this.onDocumentContextMenu.bind(this));
    };
    CanvasManager.prototype.initTouchEvents = function () {
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "touchstart", this.onCanvasTouchStart.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "touchend", this.onCanvasTouchEnd.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "touchmove", this.onCanvasTouchMove.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "gesturestart", this.onCanvasGestureStart.bind(this));
        this.evtHandlersHolder.addListenerToDocument("touchend", this.onDocumentTouchEnd.bind(this));
        this.evtHandlersHolder.addListenerToDocument("touchmove", this.onDocumentTouchMove.bind(this));
    };
    CanvasManager.prototype.initPointerEvents = function () {
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "pointerdown", this.onCanvasPointerDown.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "pointermove", this.onCanvasPointerMove.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "pointerup", this.onCanvasPointerUp.bind(this));
    };
    CanvasManager.prototype.initMSPointerEvents = function () {
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "mspointerdown", this.onCanvasPointerDown.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "mspointermove", this.onCanvasPointerMove.bind(this));
        this.evtHandlersHolder.addListener(this.viewManager.canvas, "mspointerup", this.onCanvasPointerUp.bind(this));
    };
    CanvasManager.prototype.resetScrollInterval = function () {
        if (this.scrollIntervalID) {
            clearInterval(this.scrollIntervalID);
            this.scrollIntervalID = null;
        }
    };
    CanvasManager.prototype.saveMousePosition = function (evt) {
        this.lastMousePosition.x = evt_1.EvtUtils.getEventX(evt);
        this.lastMousePosition.y = evt_1.EvtUtils.getEventY(evt);
    };
    CanvasManager.prototype.onScrollIntervalTick = function () {
        var evtX = this.lastMousePosition.x;
        var evtY = this.lastMousePosition.y;
        var inHorizontalArea = evtX >= this.canvasPosition.x && evtX <= this.canvasPosition.x + this.sizes.getVisibleAreaWidth(true);
        var inVerticalArea = evtY >= this.canvasPosition.y && evtY <= this.canvasPosition.y + this.sizes.getVisibleAreaHeight(true);
        if (!inHorizontalArea && !inVerticalArea)
            return;
        if (inHorizontalArea && evtY - this.canvasPosition.y <= AUTOSCROLL_AREA_SIZE)
            this.viewManager.canvas.scrollTop -= AUTOSCROLL_STEP;
        else if (inHorizontalArea && this.canvasPosition.y + this.sizes.getVisibleAreaHeight(true) - evtY <= AUTOSCROLL_AREA_SIZE)
            this.viewManager.canvas.scrollTop += AUTOSCROLL_STEP;
        if (inVerticalArea && evtX - this.canvasPosition.x <= AUTOSCROLL_AREA_SIZE)
            this.viewManager.canvas.scrollLeft -= AUTOSCROLL_STEP;
        else if (inVerticalArea && this.canvasPosition.x + this.sizes.getVisibleAreaWidth(true) - evtX <= AUTOSCROLL_AREA_SIZE)
            this.viewManager.canvas.scrollLeft += AUTOSCROLL_STEP;
    };
    CanvasManager.getCursorClassName = function (pointer) {
        switch (pointer) {
            case mouse_handler_1.CursorPointer.Copy:
                return "dxreCursorCopy";
            case mouse_handler_1.CursorPointer.NoDrop:
                return "dxreCursorNoDrop";
            case mouse_handler_1.CursorPointer.EResize:
                return "dxreCursorEResize";
            case mouse_handler_1.CursorPointer.NResize:
                return "dxreCursorNResize";
            case mouse_handler_1.CursorPointer.SResize:
                return "dxreCursorSResize";
            case mouse_handler_1.CursorPointer.WResize:
                return "dxreCursorWResize";
            case mouse_handler_1.CursorPointer.SEResize:
                return "dxreCursorSEResize";
            case mouse_handler_1.CursorPointer.SWResize:
                return "dxreCursorSWResize";
            case mouse_handler_1.CursorPointer.NWResize:
                return "dxreCursorNWResize";
            case mouse_handler_1.CursorPointer.NEResize:
                return "dxreCursorNEResize";
            case mouse_handler_1.CursorPointer.NSResize:
                return "dxreCursorNSResize";
            case mouse_handler_1.CursorPointer.EWResize:
                return "dxreCursorEWResize";
            case mouse_handler_1.CursorPointer.Move:
            case mouse_handler_1.CursorPointer.Default:
                return "dxreCursorDefault";
        }
    };
    CanvasManager.getMouseEventSource = function (initSource) {
        var source = initSource.nodeType === Node.ELEMENT_NODE ? initSource : initSource.parentNode;
        var className = source.className;
        var cornerPrefix = resize_box_listener_1.ResizeBoxListener.getCornerPrefix();
        var ind = className.indexOf(cornerPrefix);
        if (ind != 0)
            return mouse_event_source_1.MouseEventSource.Undefined;
        return resize_box_listener_1.ResizeBoxListener.directionToSource[className.substr(ind + cornerPrefix.length, 2).trim()];
    };
    CanvasManager.prototype.getScrollTopInfo = function () {
        var pages = this.viewManager.layout.pages;
        var scrollTop = this.viewManager.canvas.scrollTop;
        var pageIndex = this.sizes.findPageIndexByOffsetY(pages, scrollTop);
        return new ScrollTopInfo(pageIndex, scrollTop - this.sizes.getPageOffsetY(pages[pageIndex]));
    };
    return CanvasManager;
}(batch_updatable_1.BatchUpdatableObject));
exports.CanvasManager = CanvasManager;
var ScrollTopInfo = (function () {
    function ScrollTopInfo(pageIndex, topPositionRelativePage) {
        this.pageIndex = pageIndex;
        this.topPositionRelativePage = topPositionRelativePage;
    }
    return ScrollTopInfo;
}());
exports.ScrollTopInfo = ScrollTopInfo;
