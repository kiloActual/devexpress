"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var client_command_1 = require("../commands/client-command");
var command_base_1 = require("../commands/command-base");
var RotateBoxHelper = (function () {
    function RotateBoxHelper(control, resizeBoxVisualizer) {
        this.control = control;
        this.resizeBoxVisualizer = resizeBoxVisualizer;
    }
    RotateBoxHelper.prototype.start = function (evt) {
        var page = this.control.layout.pages[evt.layoutPoint.pageIndex];
        var subDocId = this.control.selection.activeSubDocument.id;
        var box = page.anchoredObjectHolder.getObjectByModelPosition(this.control.layout, this.control.selection.specialRunInfo.getPosition(), subDocId);
        this.centerPoint = box.center;
    };
    RotateBoxHelper.prototype.move = function (evt) {
        this.resizeBoxVisualizer.recalculate(null, null, this.getRotation(this.centerPoint, evt.layoutPoint));
    };
    RotateBoxHelper.prototype.end = function (evt) {
        var newRotation = this.getRotation(this.centerPoint, evt.layoutPoint);
        var layoutOptionsCommand = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowLayoutOptionsForm);
        var params = layoutOptionsCommand.createParameters(new command_base_1.CommandOptions(this.control));
        var initParams = params.clone();
        params.rotation = unit_converter_1.UnitConverter.radiansToDegrees(newRotation);
        layoutOptionsCommand.applyParameters(layoutOptionsCommand.getState(), params, initParams);
        this.resizeBoxVisualizer.recalculate(null, null, newRotation);
    };
    RotateBoxHelper.prototype.getRotation = function (center, point) {
        var rotation = Math.atan2(center.y - point.y, center.x - point.x);
        rotation -= Math.PI / 2;
        rotation = (rotation < 0) ? rotation + 2 * Math.PI : rotation;
        var delta = 0.05;
        var correctingValues = [0, Math.PI / 2, Math.PI, 3 * Math.PI / 2, 2 * Math.PI];
        for (var i = 0; i < correctingValues.length; i++)
            if (Math.abs(rotation - correctingValues[i]) < delta)
                rotation = correctingValues[i];
        if (rotation == 2 * Math.PI)
            rotation = 0;
        return rotation;
    };
    return RotateBoxHelper;
}());
exports.RotateBoxHelper = RotateBoxHelper;
