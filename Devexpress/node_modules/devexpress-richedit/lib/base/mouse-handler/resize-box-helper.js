"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_anchor_object_finder_1 = require("../../core/layout-engine/layout-anchor-object-finder");
var run_type_1 = require("../../core/model/runs/run-type");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var client_command_1 = require("../commands/client-command");
var command_base_1 = require("../commands/command-base");
var mouse_event_source_1 = require("./mouse-event-source");
var ResizeBoxHelper = (function () {
    function ResizeBoxHelper(control, resizeBoxVisualizer) {
        this.control = control;
        this.resizeBoxVisualizer = resizeBoxVisualizer;
    }
    ResizeBoxHelper.prototype.start = function (evt) {
        var specialRunInfo = this.control.selection.specialRunInfo;
        var pos = specialRunInfo.getPosition();
        var run = this.control.selection.activeSubDocument.getRunByPosition(pos);
        if (specialRunInfo.isSelectedAnchorObject) {
            var parentSubDoc = specialRunInfo.getParentSubDocument();
            var finder = new layout_anchor_object_finder_1.LayoutAnchorObjectFinder(this.control.layout, pos, parentSubDoc.id, parentSubDoc.isHeaderFooter() ? this.control.selection.pageIndex : undefined);
            this.startSize = new size_1.Size(finder.obj.width, finder.obj.height);
        }
        else
            this.startSize = size_1.Size.initByCommonAction(function (adp) { return unit_converter_1.UnitConverter.twipsToPixelsF(adp(run.size.actualSize)); });
        this.lockAspectRatio = run.size.lockAspectRatio;
        this.rotation = unit_converter_1.UnitConverter.twipsToDegrees(run.size.rotation) * Math.PI / 180;
        this.startX = evt.absolutePoint.x;
        this.startY = evt.absolutePoint.y;
        this.startScrollLeft = evt.scroll.x;
        this.startScrollTop = evt.scroll.y;
        this.lockH = evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_S || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_N;
        this.lockV = evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_E || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_W;
        this.sideH = evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_E || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_NE || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_SE;
        this.sideV = evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_SE || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_S || evt.source == mouse_event_source_1.MouseEventSource.ResizeBox_SW;
    };
    ResizeBoxHelper.prototype.move = function (evt) {
        this.size = this.getSize(evt);
        this.positionDelta = this.getPositionDelta(this.size);
        this.resizeBoxVisualizer.recalculate(this.size, this.positionDelta, null);
    };
    ResizeBoxHelper.prototype.end = function (evt) {
        var run = this.control.selection.activeSubDocument.getRunByPosition(this.control.selection.specialRunInfo.getPosition());
        if (!this.size) {
            this.size = this.getSize(evt);
            this.positionDelta = this.getPositionDelta(this.size);
        }
        if (run.getType() == run_type_1.RunType.InlinePictureRun) {
            var changeInlinePictureScaleCommand = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeInlinePictureScale);
            var originalSize = run.size.originalSize;
            var newWidth = unit_converter_1.UnitConverter.pixelsToTwips(100 * this.size.width / originalSize.width);
            var newHeight = unit_converter_1.UnitConverter.pixelsToTwips(100 * this.size.height / originalSize.height);
            changeInlinePictureScaleCommand.execute(this.control.commandManager.isPublicApiCall, [newWidth, newHeight]);
        }
        else {
            var layoutOptionsCommand = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ShowLayoutOptionsForm);
            var params = layoutOptionsCommand.createParameters(new command_base_1.CommandOptions(this.control));
            var initParams = params.clone();
            params.useAbsoluteWidth = true;
            params.useAbsoluteHeight = true;
            params.absoluteWidth = unit_converter_1.UnitConverter.pixelsToTwips(this.size.width);
            params.absoluteHeight = unit_converter_1.UnitConverter.pixelsToTwips(this.size.height);
            params.offsetX = params.offsetX + unit_converter_1.UnitConverter.pixelsToTwips(this.positionDelta.width);
            params.offsetY = params.offsetY + unit_converter_1.UnitConverter.pixelsToTwips(this.positionDelta.height);
            layoutOptionsCommand.applyParameters(layoutOptionsCommand.getState(), params, initParams);
        }
    };
    ResizeBoxHelper.prototype.getSize = function (evt) {
        var absDeltaX = evt.absolutePoint.x - (this.startScrollLeft - evt.scroll.x) - this.startX;
        var absDeltaY = evt.absolutePoint.y - (this.startScrollTop - evt.scroll.y) - this.startY;
        var deltaX = absDeltaX * Math.cos(this.rotation) - (-absDeltaY) * Math.sin(this.rotation);
        var deltaY = -(absDeltaX * Math.sin(this.rotation) + (-absDeltaY) * Math.cos(this.rotation));
        var newWidth, newHeight;
        deltaY = !this.sideV && deltaY > 0 ? Math.min(this.startSize.height + 1, deltaY) : deltaY;
        deltaX = !this.sideH && deltaX > 0 ? Math.min(this.startSize.width + 1, deltaX) : deltaX;
        if (!this.lockH && !this.lockV && this.lockAspectRatio) {
            if (Math.abs(deltaX) > Math.abs(deltaY)) {
                newWidth = this.sideH ? Math.max(1, this.startSize.width + deltaX) : (this.startSize.width - deltaX);
                newHeight = this.startSize.height * (newWidth / this.startSize.width);
            }
            else {
                newHeight = this.sideV ? Math.max(1, this.startSize.height + deltaY) : (this.startSize.height - deltaY);
                newWidth = this.startSize.width * (newHeight / this.startSize.height);
            }
        }
        else {
            deltaX = this.lockH ? 0 : deltaX;
            deltaY = this.lockV ? 0 : deltaY;
            newWidth = Math.max(1, this.sideH ? (this.startSize.width + deltaX) : (this.startSize.width - deltaX));
            newHeight = Math.max(1, this.sideV ? (this.startSize.height + deltaY) : (this.startSize.height - deltaY));
        }
        return new size_1.Size(newWidth, newHeight);
    };
    ResizeBoxHelper.prototype.getPositionDelta = function (newSize) {
        var deltaWidth = this.startSize.width - newSize.width;
        var deltaHeight = this.startSize.height - newSize.height;
        var halfDeltaWidth = (!this.lockV && (this.sideH && !this.sideV || !this.sideH && this.sideV) ? -deltaWidth : deltaWidth) / 2;
        var halfDeltaHeight = deltaHeight / 2;
        var deltaX = halfDeltaWidth * Math.cos(this.rotation) - halfDeltaHeight * Math.sin(this.rotation);
        var deltaY = halfDeltaHeight * Math.cos(this.rotation) + halfDeltaWidth * Math.sin(this.rotation);
        if ((this.sideH || this.sideV) && !(!this.lockV && this.sideH && !this.sideV)) {
            deltaX = -deltaX;
            deltaY = -deltaY;
        }
        return new size_1.Size(deltaX + deltaWidth / 2, deltaY + deltaHeight / 2);
    };
    return ResizeBoxHelper;
}());
exports.ResizeBoxHelper = ResizeBoxHelper;
