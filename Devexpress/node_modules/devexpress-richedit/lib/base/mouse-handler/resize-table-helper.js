"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var x_direction_adaptor_1 = require("../../base-utils/direction-adaptor/x-direction-adaptor");
var y_direction_adaptor_1 = require("../../base-utils/direction-adaptor/y-direction-adaptor");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var renderer_class_names_1 = require("../../core/canvas/renderer-class-names");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var client_command_1 = require("../commands/client-command");
var ruler_table_commands_1 = require("../commands/ruler/ruler-table-commands");
var ResizeTableHelperBase = (function () {
    function ResizeTableHelperBase(control, resizeTableVisualizer, evt) {
        this.setAdaptors();
        this.control = control;
        this.resizeTableVisualizer = resizeTableVisualizer;
        var sourceElement = evt_1.EvtUtils.getEventSource(evt.mouseEvent);
        this.setIndexes(sourceElement);
        if (!this.isInited())
            return;
        var pageAreaPlusColumn = this.getPartialLayoutPosition(evt.layoutPoint.pageIndex);
        this.columnBoundsRelativePage = pageAreaPlusColumn.pageArea.createRectangle();
        this.columnBoundsRelativePage.moveRectangleByPoint(pageAreaPlusColumn.column);
        this.sourceElementSize = new size_1.Size(sourceElement.offsetWidth, sourceElement.offsetHeight);
        this.startPositionRelativeTable = new point_1.Point(dom_1.DomUtils.pxToInt(sourceElement.style.left), dom_1.DomUtils.pxToInt(sourceElement.style.top));
        this.pointDirAdp.init(this.startPositionRelativeTable).position += Math.round(this.sizeDirAdp.init(this.sourceElementSize).length / 2);
        this.pointDirAdp.anotherPosition = 0;
        this.currPositionRelativeTable = this.startPositionRelativeTable.clone();
        var lineSize = new size_1.Size(this.layoutTable.width, this.layoutTable.height);
        this.sizeDirAdp.init(lineSize).length = 1;
        this.resizeTableVisualizer.init(evt.layoutPoint.pageIndex, lineSize);
        this.updateVisualizer();
        this.setSpecific();
    }
    ResizeTableHelperBase.prototype.isInited = function () {
        return this.tableIndex !== undefined;
    };
    ResizeTableHelperBase.prototype.move = function (evt) {
        if (!evt.layoutPoint || !this.isInited())
            return;
        var currPosRelativeTable = this.pointDirAdp.init(evt.layoutPoint.point).position -
            this.rectDirAdp.init(this.columnBoundsRelativePage).position -
            this.rectDirAdp.init(this.layoutTable).position;
        if (currPosRelativeTable >= this.minValueRelativeTable && currPosRelativeTable <= this.maxValueRelativeTable) {
            this.pointDirAdp.init(this.currPositionRelativeTable).position = currPosRelativeTable;
            this.updateVisualizer();
        }
    };
    ResizeTableHelperBase.prototype.end = function (evt) {
        if (!this.isInited())
            return;
        this.move(evt);
        if (Math.abs(this.pointDirAdp.init(this.currPositionRelativeTable).position - this.pointDirAdp.init(this.startPositionRelativeTable).position)
            > ResizeTableHelperBase.DIFFERENT_BY_PIXELS_ALLOW_CHANGE_MODEL)
            this.applyChanges();
        this.resizeTableVisualizer.hide();
    };
    ResizeTableHelperBase.prototype.updateVisualizer = function () {
        this.resizeTableVisualizer.show(new point_1.Point(this.columnBoundsRelativePage.x + this.layoutTable.x + this.currPositionRelativeTable.x, this.columnBoundsRelativePage.y + this.layoutTable.y + this.currPositionRelativeTable.y));
    };
    ResizeTableHelperBase.prototype.getPartialLayoutPosition = function (pageIndex) {
        var _this = this;
        var page = this.control.layout.pages[pageIndex];
        var subDocument = this.control.selection.activeSubDocument;
        if (!subDocument.isMain()) {
            var pageArea = page.otherPageAreas[subDocument.id];
            var column = pageArea.columns[0];
            this.layoutTable = ResizeTableHelperBase.getLayoutTable(column, this.tableIndex);
            return new PageAreaPlusColumn(pageArea, column);
        }
        return list_1.ListUtils.unsafeAnyOf(page.mainSubDocumentPageAreas, function (pageArea) {
            var column = list_1.ListUtils.unsafeAnyOf(pageArea.columns, function (column) {
                return (_this.layoutTable = ResizeTableHelperBase.getLayoutTable(column, _this.tableIndex)) ? column : null;
            });
            return column ? new PageAreaPlusColumn(pageArea, column) : null;
        });
    };
    ResizeTableHelperBase.getLayoutTable = function (column, tableIndex) {
        return list_1.ListUtils.elementBy(column.tablesInfo, function (tInfo) { return tInfo.logicInfo.grid.table.index == tableIndex; });
    };
    ResizeTableHelperBase.prototype.setIndexes = function (sourceElement) {
        this.tableIndex = sourceElement.parentNode["dxTableIndex"];
    };
    ResizeTableHelperBase.DIFFERENT_BY_PIXELS_ALLOW_CHANGE_MODEL = 5;
    ResizeTableHelperBase.TABLE_SEPARATOR_DIVISION_MARGIN_X = 7;
    ResizeTableHelperBase.TABLE_SEPARATOR_DIVISION_MARGIN_Y = 7;
    return ResizeTableHelperBase;
}());
exports.ResizeTableHelperBase = ResizeTableHelperBase;
var ResizeRowTableHelper = (function (_super) {
    tslib_1.__extends(ResizeRowTableHelper, _super);
    function ResizeRowTableHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResizeRowTableHelper.prototype.setAdaptors = function () {
        this.rectDirAdp = new y_direction_adaptor_1.RectangleDirectionAdaptorY();
        this.pointDirAdp = new y_direction_adaptor_1.PointDirectionAdaptorY();
        this.sizeDirAdp = new y_direction_adaptor_1.SizeDirectionAdaptorY();
    };
    ResizeRowTableHelper.canHandleResize = function (evt) {
        return evt_1.EvtUtils.getEventSource(evt.mouseEvent).className.indexOf(renderer_class_names_1.RendererClassNames.TABLE_ROW_CURSOR) > -1;
    };
    ResizeRowTableHelper.prototype.isInited = function () {
        return _super.prototype.isInited.call(this) && this.layoutRowIndex !== undefined;
    };
    ResizeRowTableHelper.prototype.setIndexes = function (sourceElement) {
        _super.prototype.setIndexes.call(this, sourceElement);
        this.layoutRowIndex = sourceElement["dxLayoutRowIndex"];
    };
    ResizeRowTableHelper.prototype.setSpecific = function () {
        if (!this.isInited())
            return;
        this.minValueRelativeTable = this.layoutTable.tableRows[this.layoutRowIndex].y - this.layoutTable.y + ResizeTableHelperBase.TABLE_SEPARATOR_DIVISION_MARGIN_Y;
        this.maxValueRelativeTable = this.columnBoundsRelativePage.height - this.layoutTable.y;
    };
    ResizeRowTableHelper.prototype.applyChanges = function () {
        if (!this.isInited())
            return;
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerChangeTableRowHeight).execute(this.control.commandManager.isPublicApiCall, new ruler_table_commands_1.RulerChangeTableRowHeightCommandParameters(this.tableIndex, this.currPositionRelativeTable.y - this.startPositionRelativeTable.y, this.layoutTable, this.layoutRowIndex));
    };
    return ResizeRowTableHelper;
}(ResizeTableHelperBase));
exports.ResizeRowTableHelper = ResizeRowTableHelper;
var ResizeColumnTableHelper = (function (_super) {
    tslib_1.__extends(ResizeColumnTableHelper, _super);
    function ResizeColumnTableHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ResizeColumnTableHelper.prototype.setAdaptors = function () {
        this.rectDirAdp = new x_direction_adaptor_1.RectangleDirectionAdaptorX();
        this.pointDirAdp = new x_direction_adaptor_1.PointDirectionAdaptorX();
        this.sizeDirAdp = new x_direction_adaptor_1.SizeDirectionAdaptorX();
    };
    ResizeColumnTableHelper.canHandleResize = function (evt) {
        return evt_1.EvtUtils.getEventSource(evt.mouseEvent).className.indexOf(renderer_class_names_1.RendererClassNames.TABLE_COLUMN_CURSOR) > -1;
    };
    ResizeColumnTableHelper.prototype.applyChanges = function () {
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.RulerChangeTableColumnWidth).execute(this.control.commandManager.isPublicApiCall, new ruler_table_commands_1.RulerChangeTableColumnWidthCommandParameters(this.tableIndex, this.currPositionRelativeTable.x - this.startPositionRelativeTable.x, this.layoutTable, this.startPositionRelativeTable.x + this.layoutTable.x, false));
    };
    ResizeColumnTableHelper.prototype.setSpecific = function () {
        var columnsXPositions = this.layoutTable.logicInfo.grid.columns.positions;
        var columnIndex = ResizeColumnTableHelper.findNearestColumnIndex(columnsXPositions, this.startPositionRelativeTable.x);
        this.minValueRelativeTable = (columnIndex == 0 ? -this.layoutTable.x : columnsXPositions[columnIndex - 1] + ResizeTableHelperBase.TABLE_SEPARATOR_DIVISION_MARGIN_X);
        this.maxValueRelativeTable = columnIndex == columnsXPositions.length - 1 ?
            Number.MAX_VALUE :
            columnsXPositions[columnIndex + 1] - ResizeTableHelperBase.TABLE_SEPARATOR_DIVISION_MARGIN_X;
    };
    ResizeColumnTableHelper.findNearestColumnIndex = function (columnsXPositions, xPosRelativeTable) {
        var centralColumnIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(columnsXPositions, function (x) { return x; }, xPosRelativeTable));
        var columnIndexes = [centralColumnIndex];
        if (centralColumnIndex + 1 < columnsXPositions.length)
            columnIndexes.push(centralColumnIndex + 1);
        if (centralColumnIndex - 1 > 0)
            columnIndexes.unshift(centralColumnIndex - 1);
        return list_1.ListUtils.min(columnIndexes, function (a) { return Math.abs(columnsXPositions[a] - xPosRelativeTable); });
    };
    return ResizeColumnTableHelper;
}(ResizeTableHelperBase));
exports.ResizeColumnTableHelper = ResizeColumnTableHelper;
var PageAreaPlusColumn = (function () {
    function PageAreaPlusColumn(pageArea, column) {
        this.pageArea = pageArea;
        this.column = column;
    }
    return PageAreaPlusColumn;
}());
