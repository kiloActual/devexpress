"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_anchor_object_finder_1 = require("../../core/layout-engine/layout-anchor-object-finder");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var client_command_1 = require("../commands/client-command");
var floating_object_drag_drop_change_position_command_1 = require("../commands/floating-objects/floating-object-drag-drop-change-position-command");
var DragFloatingObjectsHelper = (function () {
    function DragFloatingObjectsHelper(control, resizeBoxVisualizer) {
        this.control = control;
        this.resizeBoxVisualizer = resizeBoxVisualizer;
    }
    DragFloatingObjectsHelper.prototype.start = function (evt) {
        var layout = this.control.layout;
        this.startPoint = point_1.Point.plus(evt.absolutePoint, evt.scroll);
        this.startLayoutPoint = evt.layoutPoint;
        this.startPageIndex = evt.layoutPoint.pageIndex;
        this.pageIndex = this.startPageIndex;
        this.box = layout.pages[this.startPageIndex].anchoredObjectHolder.getObjectByModelPosition(layout, this.control.selection.specialRunInfo.getPosition(), this.control.selection.activeSubDocument.id);
        this.boxPoint = new point_1.Point(this.box.x, this.box.y);
        this.clickBoxDistance = point_1.Point.minus(this.startLayoutPoint, this.boxPoint);
    };
    DragFloatingObjectsHelper.prototype.move = function (evt) {
        this.pageIndex = evt.layoutPoint.pageIndex;
        var newPoint = point_1.Point.minus(evt.layoutPoint, this.clickBoxDistance);
        this.resizeBoxVisualizer.showAtPos(this.pageIndex, newPoint);
    };
    DragFloatingObjectsHelper.prototype.end = function (evt) {
        var delta = this.getDelta(evt);
        if (delta.isZero() || !evt.layoutPoint)
            return;
        var endPageIndex = evt.layoutPoint.pageIndex;
        var newPosition = point_1.Point.minus(evt.layoutPoint, this.clickBoxDistance);
        var args = new floating_object_drag_drop_change_position_command_1.FloatingObjectDragDropChangePositionCommandParameters(this.control, this.startPageIndex, endPageIndex, newPosition, evt.layoutPoint.point);
        this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.FloatingObjectDragDropChangePosition)
            .execute(this.control.commandManager.isPublicApiCall, args);
        var finder;
        while (true) {
            finder = new layout_anchor_object_finder_1.LayoutAnchorObjectFinder(this.control.layout, this.control.selection.specialRunInfo.getPosition(), this.control.selection.activeSubDocument.id);
            if (finder.page)
                break;
            else
                this.control.layoutFormatterManager.forceFormatPage(this.control.layout.validPageCount);
        }
        this.resizeBoxVisualizer.show(finder.page.index, null, null, null, finder.obj);
    };
    DragFloatingObjectsHelper.prototype.rollback = function () {
        this.resizeBoxVisualizer.showAtPos(this.startPageIndex, this.boxPoint);
        this.control.modelManager.history.endTransaction();
    };
    DragFloatingObjectsHelper.prototype.getDelta = function (evt) {
        return point_1.Point.minus(point_1.Point.plus(evt.absolutePoint, evt.scroll), this.startPoint);
    };
    return DragFloatingObjectsHelper;
}());
exports.DragFloatingObjectsHelper = DragFloatingObjectsHelper;
