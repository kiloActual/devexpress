"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var client_command_1 = require("../../commands/client-command");
var touch_handler_default_state_1 = require("./touch-handler-default-state");
var touch_handler_state_base_1 = require("./touch-handler-state-base");
var TouchHandlerSelectionStateBase = (function (_super) {
    tslib_1.__extends(TouchHandlerSelectionStateBase, _super);
    function TouchHandlerSelectionStateBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchHandlerSelectionStateBase.prototype.onTouchEnd = function (evt) {
        this.handler.switchToDefaultState();
        this.setLastLayoutPosition();
        this.captureInputFocus(evt);
        this.showPopupMenu();
    };
    return TouchHandlerSelectionStateBase;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerSelectionStateBase = TouchHandlerSelectionStateBase;
var TouchHandlerChangeActiveSubDocument = (function (_super) {
    tslib_1.__extends(TouchHandlerChangeActiveSubDocument, _super);
    function TouchHandlerChangeActiveSubDocument(handler, point) {
        var _this = _super.call(this, handler) || this;
        var htr = _this.handler.control.hitTestManager.calculate(point, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, _this.handler.control.selection.activeSubDocument);
        var activeSubDocument = _this.handler.control.selection.activeSubDocument;
        if (activeSubDocument.isMain()) {
            if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top) {
                _this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertHeader).execute(_this.handler.control.commandManager.isPublicApiCall, htr.pageIndex);
                return _this;
            }
            else if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom) {
                _this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertFooter).execute(_this.handler.control.commandManager.isPublicApiCall, htr.pageIndex);
                return _this;
            }
        }
        else if (_this.shouldActivateMainArea(activeSubDocument, htr)) {
            _this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain).execute(_this.handler.control.commandManager.isPublicApiCall);
        }
        _this.handler.switchToDefaultState();
        return _this;
    }
    TouchHandlerChangeActiveSubDocument.prototype.shouldActivateMainArea = function (activeSubDocument, htr) {
        return (activeSubDocument.isHeader() && !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom)) ||
            (activeSubDocument.isFooter() && !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top));
    };
    TouchHandlerChangeActiveSubDocument.prototype.onTouchStart = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onTouchStart(evt);
    };
    TouchHandlerChangeActiveSubDocument.prototype.onDoubleTap = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        var activeSubDocument = this.handler.control.selection.activeSubDocument;
        if (this.shouldActivateMainArea(activeSubDocument, htr)) {
            this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain).execute(this.handler.control.commandManager.isPublicApiCall);
        }
        this.handler.switchToDefaultState();
    };
    return TouchHandlerChangeActiveSubDocument;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerChangeActiveSubDocument = TouchHandlerChangeActiveSubDocument;
var TouchHandlerSelectWordUnderCursorState = (function (_super) {
    tslib_1.__extends(TouchHandlerSelectWordUnderCursorState, _super);
    function TouchHandlerSelectWordUnderCursorState(handler, evt) {
        var _this = _super.call(this, handler) || this;
        _this.selectWordUnderCursor(evt);
        return _this;
    }
    TouchHandlerSelectWordUnderCursorState.prototype.onTouchStart = function (evt) {
        this.selectWordUnderCursor(evt);
    };
    TouchHandlerSelectWordUnderCursorState.prototype.onTouchMove = function (evt) {
        this.selectWordUnderCursor(evt);
        return false;
    };
    TouchHandlerSelectWordUnderCursorState.prototype.selectWordUnderCursor = function (evt) {
        var activeSubDocument = this.handler.control.selection.activeSubDocument;
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
            var position = htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset + htr.box.rowOffset + htr.charOffset;
            var startInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(this.handler.control.layout, activeSubDocument, this.handler.control.selection, position);
            var endInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(this.handler.control.layout, activeSubDocument, this.handler.control.selection, position, false);
            if (endInterval > startInterval)
                this.handler.control.selection.deprecatedSetSelection(startInterval, endInterval, false, -1, true);
        }
    };
    return TouchHandlerSelectWordUnderCursorState;
}(TouchHandlerSelectionStateBase));
exports.TouchHandlerSelectWordUnderCursorState = TouchHandlerSelectWordUnderCursorState;
var TouchHandlerContinueSelectionStateBase = (function (_super) {
    tslib_1.__extends(TouchHandlerContinueSelectionStateBase, _super);
    function TouchHandlerContinueSelectionStateBase(handler) {
        return _super.call(this, handler) || this;
    }
    TouchHandlerContinueSelectionStateBase.prototype.onTouchMove = function (evt) {
        this.setTouchBarsVisibility(false);
        evt.layoutPoint.y -= touch_handler_default_state_1.TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE;
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            this.extendSelection(htr);
        return false;
    };
    TouchHandlerContinueSelectionStateBase.prototype.setTouchBarsVisibility = function (visible) {
        this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setVisibilityTouchBars(visible);
    };
    TouchHandlerContinueSelectionStateBase.prototype.onTouchEnd = function (evt) {
        this.handler.control.popupMenuManager.rejectNextShowContextMenu();
        _super.prototype.onTouchEnd.call(this, evt);
        this.setTouchBarsVisibility(true);
        this.setEditableDocumentContent();
    };
    TouchHandlerContinueSelectionStateBase.prototype.extendSelection = function (_htr) {
    };
    return TouchHandlerContinueSelectionStateBase;
}(TouchHandlerSelectionStateBase));
exports.TouchHandlerContinueSelectionStateBase = TouchHandlerContinueSelectionStateBase;
var TouchHandlerContinueSelectionState = (function (_super) {
    tslib_1.__extends(TouchHandlerContinueSelectionState, _super);
    function TouchHandlerContinueSelectionState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchHandlerContinueSelectionState.prototype.onTouchMove = function (evt) {
        this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setVisibilityTouchBars(false);
        evt.layoutPoint.y -= touch_handler_default_state_1.TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE;
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
            if (!this.startPosition) {
                this.setLastLayoutPosition();
                this.startPosition = this.lastLayoutPosition;
            }
            this.extendSelection(htr);
        }
        return false;
    };
    TouchHandlerContinueSelectionState.prototype.onTouchEnd = function (evt) {
        this.captureInputFocus(evt);
        this.setLastLayoutPosition();
        if (!this.startPosition)
            this.startPosition = this.lastLayoutPosition;
        if (this.startPosition.equals(this.lastLayoutPosition))
            this.showPopupMenu();
        this.handler.switchToDefaultState();
        this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setVisibilityTouchBars(true);
        this.setEditableDocumentContent();
    };
    TouchHandlerContinueSelectionState.prototype.extendSelection = function (htr) {
        var position = this.getLayoutPosition(htr);
        var endOfLine = position === (htr.pageArea.subDocument.isMain() ? htr.page.getPosition() : 0)
            + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.getEndPosition();
        this.handler.control.selection.deprecatedSetSelection(position, position, endOfLine, -1, false);
    };
    TouchHandlerContinueSelectionState.prototype.getLayoutPosition = function (htr) {
        var position = (htr.pageArea.subDocument.isMain() ? htr.page.getPosition() : 0) + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset;
        if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Row] & rectangle_1.HitTestDeviation.Right) {
            var lastVisibleBoxInRow = htr.row.getLastVisibleBox();
            if (lastVisibleBoxInRow)
                position += lastVisibleBoxInRow.getEndPosition();
        }
        else {
            position += htr.box.rowOffset + htr.charOffset;
            if (htr.boxIndex == htr.row.boxes.length - 1 && htr.charOffset == htr.box.getLength() && !htr.box.isVisible())
                position -= 1;
        }
        return position;
    };
    return TouchHandlerContinueSelectionState;
}(TouchHandlerContinueSelectionStateBase));
exports.TouchHandlerContinueSelectionState = TouchHandlerContinueSelectionState;
var TouchHandlerContinueSelectionOnOneSideState = (function (_super) {
    tslib_1.__extends(TouchHandlerContinueSelectionOnOneSideState, _super);
    function TouchHandlerContinueSelectionOnOneSideState(handler, isDragLeftEdge) {
        if (isDragLeftEdge === void 0) { isDragLeftEdge = true; }
        var _this = _super.call(this, handler) || this;
        _this.isDragLeftEdge = false;
        _this.isDragLeftEdge = isDragLeftEdge;
        return _this;
    }
    TouchHandlerContinueSelectionOnOneSideState.prototype.extendSelection = function (htr) {
        this.extendLastSelectionOnOneSide(Math.min(htr.getPosition(), htr.subDocument.getDocumentEndPosition() - 1), this.isDragLeftEdge);
    };
    TouchHandlerContinueSelectionOnOneSideState.prototype.extendLastSelectionOnOneSide = function (end, isDragLeftEdge) {
        var selection = this.handler.control.selection;
        var lastInterval = selection.intervalsInfo.interval;
        var newInterval = null;
        var forwardDirection = end >= selection.anchorPosition;
        if (isDragLeftEdge) {
            if (end < lastInterval.end)
                newInterval = new fixed_1.FixedInterval(end, lastInterval.length - (end - lastInterval.start));
        }
        else {
            if ((end - lastInterval.start) >= 1)
                newInterval = new fixed_1.FixedInterval(lastInterval.start, end - lastInterval.start);
        }
        if (newInterval && (selection.endOfLine != false || !lastInterval.equals(newInterval)))
            selection.changeState(function (newState) { return newState.setInterval(newInterval).setForwardDirection(forwardDirection).setEndOfLine(false); });
    };
    TouchHandlerContinueSelectionOnOneSideState.prototype.setTouchBarsVisibility = function (visible) {
        if (this.isDragLeftEdge)
            this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setFirstTouchBarVisibility(visible);
        else
            this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setSecondTouchBarVisibility(visible);
    };
    return TouchHandlerContinueSelectionOnOneSideState;
}(TouchHandlerContinueSelectionStateBase));
exports.TouchHandlerContinueSelectionOnOneSideState = TouchHandlerContinueSelectionOnOneSideState;
