"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var client_command_1 = require("../../commands/client-command");
var hit_test_manager_1 = require("../../layout-engine/hit-test-manager/hit-test-manager");
var resize_box_visualizer_1 = require("../../layout-engine/visualizers/resize-box-visualizer");
var set_selection_params_1 = require("../../selection/set-selection-params");
var mouse_handler_default_state_1 = require("../mouse-handler/mouse-handler-default-state");
var touch_handler_drag_floating_object_state_1 = require("./touch-handler-drag-floating-object-state");
var touch_handler_popup_menu_state_1 = require("./touch-handler-popup-menu-state");
var touch_handler_resize_box_state_1 = require("./touch-handler-resize-box-state");
var touch_handler_rotate_box_state_1 = require("./touch-handler-rotate-box-state");
var touch_handler_selection_states_1 = require("./touch-handler-selection-states");
var touch_handler_state_base_1 = require("./touch-handler-state-base");
var TouchHandlerDefaultState = (function (_super) {
    tslib_1.__extends(TouchHandlerDefaultState, _super);
    function TouchHandlerDefaultState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchHandlerDefaultState.prototype.onTouchStart = function (evt) {
        var _this = this;
        var activeSubDocument = this.handler.control.selection.activeSubDocument;
        if (this.shouldProcessResizeBoxVisualizer(evt)) {
            if (this.resizeRotationChecker(function () {
                if (activeSubDocument.isTextBox())
                    mouse_handler_default_state_1.MouseHandlerHelper.selectParentsTextBox(_this.handler.control);
                _this.beginResizeBoxTouchHandler(evt);
            }))
                return;
        }
        if (resize_box_visualizer_1.ResizeBoxVisualizer.shouldRotate(evt, this.handler.control)) {
            if (this.resizeRotationChecker(function () {
                if (activeSubDocument.isTextBox())
                    mouse_handler_default_state_1.MouseHandlerHelper.selectParentsTextBox(_this.handler.control);
                _this.handler.switchState(new touch_handler_rotate_box_state_1.TouchHandlerRotateBoxState(_this.handler));
                _this.handler.state.onTouchStart(evt);
            }))
                return;
        }
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, activeSubDocument);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return;
        if (!resize_box_visualizer_1.ResizeBoxVisualizer.shouldHandleTextBoxAreaClick(evt) && activeSubDocument.isTextBox()) {
            mouse_handler_default_state_1.MouseHandlerHelper.changeActiveSubDocumentToParent(this.handler.control);
            htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        }
        if (htr.floatingObject && htr.floatingObject.belongsToSubDocId == this.handler.control.selection.activeSubDocument.id) {
            var box = htr.floatingObject;
            var pos = this.handler.control.layout.anchorObjectsPositionInfo.getPosition(box.objectId);
            var newInterval = new fixed_1.FixedInterval(pos, 1);
            var isObjectAlreadySelected_1 = this.handler.control.selection.intervals.length == 1 && this.handler.control.selection.intervals[0].equals(newInterval);
            this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams().setInterval(newInterval));
            if (box.getType() == layout_box_1.LayoutBoxType.AnchorTextBox &&
                hit_test_manager_1.HitTestManager.isPointInTexBoxArea(evt.layoutPoint, box, activeSubDocument.isTextBox() ? 0 : box.rotationInRadians)) {
                this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToTextBox)
                    .execute(this.handler.control.commandManager.isPublicApiCall);
                this.handler.boxVisualizerManager.resizeBoxVisualizer.show(htr.pageIndex, null, null, null, box);
                htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
            }
            else {
                if (this.resizeRotationChecker(function () {
                    if (isObjectAlreadySelected_1) {
                        _this.handler.switchState(new touch_handler_drag_floating_object_state_1.TouchHandlerDragFloatingObjectState(_this.handler));
                        _this.handler.state.onTouchStart(evt);
                    }
                }))
                    return;
                else {
                    var specRunInfo = this.handler.control.selection.specialRunInfo;
                    if (specRunInfo.isPictureSelected() && specRunInfo.isSelectedAnchorObject) {
                        this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                            .setInterval(new fixed_1.FixedInterval(specRunInfo.getPicturePosition(), 1)));
                        return;
                    }
                }
            }
        }
        if (!this.handler.control.selection.isCollapsed() && (this.isAreaToLeftOfText(htr, evt) || this.isAreaToRightOfText(htr, evt)))
            this.collapseSelection(htr);
        else {
            this.handler.switchState(new touch_handler_popup_menu_state_1.TouchHandlerPopupMenuState(this.handler));
            this.handler.state.onTouchStart(evt);
        }
    };
    TouchHandlerDefaultState.prototype.onTouchMove = function (_evt) {
        return true;
    };
    TouchHandlerDefaultState.prototype.onDoubleTap = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Box) {
            this.handler.switchState(new touch_handler_selection_states_1.TouchHandlerSelectWordUnderCursorState(this.handler, evt));
            this.handler.control.popupMenuManager.rejectNextShowContextMenu();
        }
        else
            this.handler.switchState(new touch_handler_selection_states_1.TouchHandlerChangeActiveSubDocument(this.handler, evt.layoutPoint));
    };
    TouchHandlerDefaultState.prototype.shouldProcessResizeBoxVisualizer = function (evt) {
        if (this.handler.boxVisualizerManager.resizeBoxVisualizer.shouldCapture(evt) &&
            this.handler.control.selection.activeSubDocument.isEditable([new fixed_1.FixedInterval(this.handler.control.selection.specialRunInfo.getPosition(), 1)])) {
            this.beginResizeBoxTouchHandler(evt);
            return true;
        }
        return false;
    };
    TouchHandlerDefaultState.prototype.beginResizeBoxTouchHandler = function (evt) {
        this.handler.switchState(new touch_handler_resize_box_state_1.TouchHandlerResizeBoxState(this.handler));
        this.handler.state.onTouchStart(evt);
    };
    TouchHandlerDefaultState.prototype.isAreaToLeftOfText = function (htr, evt) {
        return htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea &&
            htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Column] & rectangle_1.HitTestDeviation.Left &&
            evt.layoutPoint.x <= htr.pageArea.x + htr.column.x;
    };
    TouchHandlerDefaultState.prototype.isAreaToRightOfText = function (htr, evt) {
        return htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea &&
            htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Column] & rectangle_1.HitTestDeviation.Right &&
            evt.layoutPoint.x >= htr.pageArea.x + htr.column.x + htr.column.width;
    };
    TouchHandlerDefaultState.prototype.collapseSelection = function (htr) {
        var selection = this.handler.control.selection;
        var position = htr.row.getLastVisibleBox().getEndPosition();
        selection.deprecatedSetSelection(position, position, false, -1, true);
    };
    TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE = 20;
    return TouchHandlerDefaultState;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerDefaultState = TouchHandlerDefaultState;
