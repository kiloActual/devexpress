"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var browser_1 = require("@devexpress/utils/lib/browser");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var manipulator_handler_state_base_1 = require("../base/manipulator-handler-state-base");
var TouchHandlerStateBase = (function (_super) {
    tslib_1.__extends(TouchHandlerStateBase, _super);
    function TouchHandlerStateBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.TOUCH_SCROLL_SENSITIVITY_IN_ROWS = 2;
        return _this;
    }
    TouchHandlerStateBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.popupMenuId);
    };
    TouchHandlerStateBase.prototype.onTouchStart = function (_evt) { };
    TouchHandlerStateBase.prototype.onDoubleTap = function (_evt) { };
    TouchHandlerStateBase.prototype.onTouchEnd = function (_evt) { };
    TouchHandlerStateBase.prototype.onTouchMove = function (_evt) { return true; };
    TouchHandlerStateBase.prototype.captureInputFocus = function (_evt) {
        this.handler.control.focusManager.captureFocus();
    };
    TouchHandlerStateBase.prototype.showPopupMenu = function () {
        var _this = this;
        this.popupMenuId = setTimeout(function () { return _this.handler.control.popupMenuManager.showByTouchClick(); }, 20);
    };
    TouchHandlerStateBase.prototype.setEditableDocumentContent = function () {
        if (!browser_1.Browser.IE && !browser_1.Browser.Edge) {
            var subDocument = this.handler.control.selection.activeSubDocument;
            var position = this.handler.control.selection.lastSelectedInterval.start;
            var startInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(this.handler.control.layout, this.handler.control.selection.activeSubDocument, this.handler.control.selection, position);
            var startIntervalLayoutPosition = (subDocument.isMain()
                ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.handler.control.layout, subDocument, startInterval, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
                : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.handler.control.layout, subDocument, startInterval, this.handler.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box))
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(this.handler.control.selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
            if (startIntervalLayoutPosition.isLastBoxInRow())
                startInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(this.handler.control.layout, this.handler.control.selection.activeSubDocument, this.handler.control.selection, position - 1);
            var endInterval = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(this.handler.control.layout, this.handler.control.selection.activeSubDocument, this.handler.control.selection, startInterval, false);
            var textUnderCursor = position >= startInterval && position <= endInterval ? this.handler.control.selection.activeSubDocument.getText(new fixed_1.FixedInterval(startInterval, endInterval - startInterval)) : "";
            this.handler.control.inputController.setEditableDocumentContent(textUnderCursor);
            if (textUnderCursor.length)
                this.handler.control.inputController.setEditableDocumentCursorPosition(position - startInterval);
        }
    };
    TouchHandlerStateBase.prototype.setLastLayoutPosition = function () {
        var subDocument = this.handler.control.selection.activeSubDocument;
        var logPosition = this.handler.control.selection.lastSelectedInterval.start;
        this.lastLayoutPosition = (subDocument.isMain()
            ? new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.handler.control.layout, subDocument, logPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.handler.control.layout, subDocument, logPosition, this.handler.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character))
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(this.handler.control.selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
    };
    return TouchHandlerStateBase;
}(manipulator_handler_state_base_1.ManipulatorHandlerStateBase));
exports.TouchHandlerStateBase = TouchHandlerStateBase;
var TouchHandlerBeginDragHelperState = (function (_super) {
    tslib_1.__extends(TouchHandlerBeginDragHelperState, _super);
    function TouchHandlerBeginDragHelperState(handler, dragState) {
        var _this = _super.call(this, handler) || this;
        _this.dragState = dragState;
        return _this;
    }
    TouchHandlerBeginDragHelperState.prototype.start = function () {
        var _a;
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.beginUpdate();
        this.handler.control.horizontalRulerControl.beginUpdate();
    };
    TouchHandlerBeginDragHelperState.prototype.finish = function () {
        var _a;
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.endUpdate();
        this.handler.control.horizontalRulerControl.endUpdate();
        this.handler.control.barHolder.updateItemsState();
        this.handler.control.horizontalRulerControl.update();
    };
    TouchHandlerBeginDragHelperState.prototype.onTouchMove = function (evt) {
        this.handler.switchState(this.dragState);
        this.dragState.onTouchMove(evt);
        return false;
    };
    TouchHandlerBeginDragHelperState.prototype.onTouchEnd = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.onTouchEnd(evt);
    };
    return TouchHandlerBeginDragHelperState;
}(TouchHandlerStateBase));
exports.TouchHandlerBeginDragHelperState = TouchHandlerBeginDragHelperState;
