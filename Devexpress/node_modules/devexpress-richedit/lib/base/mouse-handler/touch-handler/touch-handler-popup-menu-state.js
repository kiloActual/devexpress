"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var touch_handler_default_state_1 = require("./touch-handler-default-state");
var touch_handler_selection_states_1 = require("./touch-handler-selection-states");
var touch_handler_state_base_1 = require("./touch-handler-state-base");
var touch_handler_waiting_states_1 = require("./touch-handler-waiting-states");
var TouchHandlerPopupMenuState = (function (_super) {
    tslib_1.__extends(TouchHandlerPopupMenuState, _super);
    function TouchHandlerPopupMenuState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TouchHandlerPopupMenuState.prototype.onTouchStart = function (evt) {
        var leftOrRightEdge = false;
        for (var i = 0, interval = void 0; interval = this.handler.control.selection.intervals[i]; i++) {
            if (this.isLeftOrRightEdge(evt.layoutPoint, interval)) {
                leftOrRightEdge = true;
                break;
            }
        }
        if (!leftOrRightEdge || !this.handler.control.focusManager.isInFocus)
            this.handler.switchState(this.getNextState(evt));
    };
    TouchHandlerPopupMenuState.prototype.onTouchMove = function (evt) {
        this.handler.switchState(this.getNextState(evt));
        return false;
    };
    TouchHandlerPopupMenuState.prototype.onTouchEnd = function (_evt) {
        this.showPopupMenu();
        this.handler.switchToDefaultState();
    };
    TouchHandlerPopupMenuState.prototype.getNextState = function (evt) {
        var lpStart = this.getLayoutPosition(this.handler.control.selection.intervals[0].start);
        if (this.canExtendSelection(evt.layoutPoint, lpStart))
            return new touch_handler_selection_states_1.TouchHandlerContinueSelectionState(this.handler);
        for (var i = 0, interval = void 0; interval = this.handler.control.selection.intervals[i]; i++) {
            if (this.canExtendSelectionOnOneSide(evt.layoutPoint, interval))
                return new touch_handler_selection_states_1.TouchHandlerContinueSelectionOnOneSideState(this.handler, this.isHitPoints(evt.layoutPoint, lpStart.getPositionRelativePage(this.handler.control.measurer), lpStart.row.height));
        }
        return new touch_handler_waiting_states_1.TouchHandlerBeginTapProcessingState(this.handler, evt);
    };
    TouchHandlerPopupMenuState.prototype.canExtendSelection = function (mousePoint, lpStart) {
        return this.handler.control.focusManager.isInFocus &&
            this.handler.control.selection.isCollapsed() &&
            this.isHitPoints(mousePoint, lpStart.getPositionRelativePage(this.handler.control.measurer), lpStart.row.height);
    };
    TouchHandlerPopupMenuState.prototype.canExtendSelectionOnOneSide = function (mousePoint, selectionInterval) {
        return this.handler.control.focusManager.isInFocus && this.isLeftOrRightEdge(mousePoint, selectionInterval);
    };
    TouchHandlerPopupMenuState.prototype.getLayoutPosition = function (logPosition) {
        var subDocument = this.handler.control.selection.activeSubDocument;
        return subDocument.isMain()
            ? layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.handler.control.layoutFormatterManager, subDocument, logPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(this.handler.control.selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false))
            : new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.handler.control.layout, subDocument, logPosition, this.handler.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(this.handler.control.selection.endOfLine), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false));
    };
    TouchHandlerPopupMenuState.prototype.isLeftOrRightEdge = function (mousePoint, selectionInterval) {
        var lpStart = this.getLayoutPosition(selectionInterval.start);
        var lpEnd = this.getLayoutPosition(selectionInterval.end);
        return this.isHitPoints(mousePoint, lpStart.getPositionRelativePage(this.handler.control.measurer), lpStart.row.height) ||
            this.isHitPoints(mousePoint, lpEnd.getPositionRelativePage(this.handler.control.measurer), lpEnd.row.height);
    };
    TouchHandlerPopupMenuState.prototype.isHitPoints = function (mousePoint, selectionPoint, height) {
        var hitX = Math.abs(mousePoint.x - selectionPoint.x) < touch_handler_default_state_1.TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE;
        var hitY = false;
        if (mousePoint.y < selectionPoint.y)
            hitY = Math.abs(mousePoint.y - selectionPoint.y) < touch_handler_default_state_1.TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE;
        else
            hitY = (mousePoint.y - selectionPoint.y) < (touch_handler_default_state_1.TouchHandlerDefaultState.TOUCH_RADIUS_HANDLE + height);
        return hitX && hitY;
    };
    return TouchHandlerPopupMenuState;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerPopupMenuState = TouchHandlerPopupMenuState;
