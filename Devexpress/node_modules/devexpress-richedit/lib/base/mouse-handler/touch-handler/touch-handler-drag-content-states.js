"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var field_1 = require("../../../core/model/fields/field");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var client_command_1 = require("../../commands/client-command");
var touch_handler_state_base_1 = require("./touch-handler-state-base");
var TouchHandlerDragContentState = (function (_super) {
    tslib_1.__extends(TouchHandlerDragContentState, _super);
    function TouchHandlerDragContentState(handler) {
        return _super.call(this, handler) || this;
    }
    TouchHandlerDragContentState.prototype.finish = function () {
        this.handler.boxVisualizerManager.dragCaretVisualizer.hide();
    };
    TouchHandlerDragContentState.prototype.onTouchMove = function (evt) {
        this.continueDrag(evt);
        return false;
    };
    TouchHandlerDragContentState.prototype.onTouchEnd = function (evt) {
        this.commitDrag(evt);
        this.handler.switchToDefaultState();
    };
    TouchHandlerDragContentState.prototype.continueDrag = function (evt) {
        var htr = this.calculateHitTest(evt);
        if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
            this.handler.boxVisualizerManager.dragCaretVisualizer.show(htr);
    };
    TouchHandlerDragContentState.prototype.commitDrag = function (evt) {
        var htr = this.calculateHitTest(evt);
        if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Character) {
            var subDocument = this.handler.control.selection.activeSubDocument;
            var interval = new fixed_1.FixedInterval(htr.getPosition(), 0);
            field_1.Field.correctIntervalDueToFields(subDocument, interval);
            var commandId = client_command_1.RichEditClientCommand.DragMoveContent;
            this.handler.control.commandManager.getCommand(commandId).execute(this.handler.control.commandManager.isPublicApiCall, interval.start);
        }
    };
    TouchHandlerDragContentState.prototype.calculateHitTest = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            htr.correctAsVisibleBox();
        return htr;
    };
    return TouchHandlerDragContentState;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerDragContentState = TouchHandlerDragContentState;
