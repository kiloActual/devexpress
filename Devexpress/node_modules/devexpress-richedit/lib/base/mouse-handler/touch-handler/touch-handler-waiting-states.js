"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_picture_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-picture-box");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var touch_handler_drag_content_states_1 = require("./touch-handler-drag-content-states");
var touch_handler_selection_states_1 = require("./touch-handler-selection-states");
var touch_handler_state_base_1 = require("./touch-handler-state-base");
var TouchHandlerWaitingStateBase = (function (_super) {
    tslib_1.__extends(TouchHandlerWaitingStateBase, _super);
    function TouchHandlerWaitingStateBase(handler, interval, action) {
        var _this = _super.call(this, handler) || this;
        _this.action = action;
        _this.timerID = setTimeout(function () {
            _this.timerID = -1;
            _this.action();
        }, interval);
        return _this;
    }
    TouchHandlerWaitingStateBase.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.timerID);
    };
    TouchHandlerWaitingStateBase.prototype.onTouchEnd = function (_evt) {
        this.finish();
    };
    TouchHandlerWaitingStateBase.prototype.onTouchMove = function (_evt) {
        this.finish();
        this.handler.switchToDefaultState();
        return true;
    };
    TouchHandlerWaitingStateBase.prototype.finish = function () {
        if (this.timerID != -1)
            clearTimeout(this.timerID);
    };
    TouchHandlerWaitingStateBase.prototype.handleTap = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None && this.shouldSelectPicture(htr))
            this.selectImage(htr);
        else if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
            this.setLastLayoutPosition();
            var position = this.getLayoutPosition(htr);
            var endOfLine = position === (htr.pageArea.subDocument.isMain() ? htr.page.getPosition() : 0)
                + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.getEndPosition();
            this.handler.control.selection.deprecatedSetSelection(position, position, endOfLine, -1, true);
            this.setEditableDocumentContent();
            this.captureInputFocus(evt);
            this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setVisibilityTouchBars(true);
        }
    };
    TouchHandlerWaitingStateBase.prototype.getLayoutPosition = function (htr) {
        var position = (htr.pageArea.subDocument.isMain() ? htr.page.getPosition() : 0) + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset;
        if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Row] & rectangle_1.HitTestDeviation.Right) {
            var lastVisibleBoxInRow = htr.row.getLastVisibleBox();
            if (lastVisibleBoxInRow)
                position += lastVisibleBoxInRow.getEndPosition();
        }
        else {
            position += htr.box.rowOffset + htr.charOffset;
            if (htr.boxIndex == htr.row.boxes.length - 1 && htr.charOffset == htr.box.getLength() && !htr.box.isVisible())
                position -= 1;
        }
        return position;
    };
    TouchHandlerWaitingStateBase.prototype.shouldSelectPicture = function (htr) {
        if (htr.exactlyDetailLevel < document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            return false;
        return htr.box instanceof layout_picture_box_1.LayoutPictureBox;
    };
    TouchHandlerWaitingStateBase.prototype.selectImage = function (htr) {
        var position = htr.getPosition() - htr.charOffset;
        var selection = this.handler.control.selection;
        selection.deprecatedSetSelection(position, position + 1, false, -1, true);
        this.handler.control.viewManager.selection.touchSelectionCircleElementsManager.setVisibilityTouchBars(false);
    };
    TouchHandlerWaitingStateBase.prototype.beginDragExistingSelection = function () {
        var dragState = new touch_handler_drag_content_states_1.TouchHandlerDragContentState(this.handler);
        var state = new touch_handler_state_base_1.TouchHandlerBeginDragHelperState(this.handler, dragState);
        this.handler.switchState(state);
    };
    return TouchHandlerWaitingStateBase;
}(touch_handler_state_base_1.TouchHandlerStateBase));
exports.TouchHandlerWaitingStateBase = TouchHandlerWaitingStateBase;
var TouchHandlerBeginTapProcessingState = (function (_super) {
    tslib_1.__extends(TouchHandlerBeginTapProcessingState, _super);
    function TouchHandlerBeginTapProcessingState(handler, evt) {
        var _this = _super.call(this, handler, 500, function () {
            if (_this.handler.boxVisualizerManager.resizeBoxVisualizer.isResizeBoxVisible())
                _this.beginDragExistingSelection();
            else
                handler.switchState(new TouchHandlerBeginWaitForLongTapState(handler, evt));
        }) || this;
        return _this;
    }
    TouchHandlerBeginTapProcessingState.prototype.onTouchStart = function (evt) {
        this.finish();
        this.handler.switchState(new touch_handler_selection_states_1.TouchHandlerSelectWordUnderCursorState(this.handler, evt));
    };
    TouchHandlerBeginTapProcessingState.prototype.onTouchEnd = function (evt) {
        this.handleTap(evt);
        this.finish();
        this.handler.switchToDefaultState();
    };
    return TouchHandlerBeginTapProcessingState;
}(TouchHandlerWaitingStateBase));
exports.TouchHandlerBeginTapProcessingState = TouchHandlerBeginTapProcessingState;
var TouchHandlerBeginWaitForLongTapState = (function (_super) {
    tslib_1.__extends(TouchHandlerBeginWaitForLongTapState, _super);
    function TouchHandlerBeginWaitForLongTapState(handler, evt) {
        var _this = _super.call(this, handler, 100, function () {
            _this.handleTap(evt);
            _this.showPopupMenu();
            _this.finish();
            _this.handler.switchToDefaultState();
        }) || this;
        return _this;
    }
    return TouchHandlerBeginWaitForLongTapState;
}(TouchHandlerWaitingStateBase));
exports.TouchHandlerBeginWaitForLongTapState = TouchHandlerBeginWaitForLongTapState;
