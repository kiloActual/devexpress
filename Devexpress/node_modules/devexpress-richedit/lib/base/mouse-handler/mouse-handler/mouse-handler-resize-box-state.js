"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var resize_box_helper_1 = require("../resize-box-helper");
var mouse_handler_1 = require("./mouse-handler");
var mouse_handler_drag_content_states_1 = require("./mouse-handler-drag-content-states");
var MouseHandlerResizeBoxState = (function (_super) {
    tslib_1.__extends(MouseHandlerResizeBoxState, _super);
    function MouseHandlerResizeBoxState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerResizeBoxState.prototype.start = function () {
        this.resizeBoxHelper = new resize_box_helper_1.ResizeBoxHelper(this.handler.control, this.handler.boxVisualizerManager.resizeBoxVisualizer);
    };
    MouseHandlerResizeBoxState.prototype.onMouseDown = function (evt) {
        this.resizeBoxHelper.start(evt);
        this.setCursor();
    };
    MouseHandlerResizeBoxState.prototype.onMouseMove = function (evt) {
        this.resizeBoxHelper.move(evt);
    };
    MouseHandlerResizeBoxState.prototype.onMouseUp = function (evt) {
        _super.prototype.onMouseUp.call(this, evt);
        this.resizeBoxHelper.end(evt);
    };
    MouseHandlerResizeBoxState.prototype.setCursor = function () {
        if (this.resizeBoxHelper.lockH)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.SResize);
        else if (this.resizeBoxHelper.lockV)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.WResize);
        else if (this.resizeBoxHelper.sideH && this.resizeBoxHelper.sideV)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.SEResize);
        else if (this.resizeBoxHelper.sideH && !this.resizeBoxHelper.sideV)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.NEResize);
        else if (!this.resizeBoxHelper.sideH && this.resizeBoxHelper.sideV)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.SWResize);
        else if (!this.resizeBoxHelper.sideH && !this.resizeBoxHelper.sideV)
            this.handler.setCursorPointer(mouse_handler_1.CursorPointer.NWResize);
    };
    MouseHandlerResizeBoxState.prototype.finish = function () {
        this.handler.setCursorPointer(mouse_handler_1.CursorPointer.Auto);
    };
    return MouseHandlerResizeBoxState;
}(mouse_handler_drag_content_states_1.MouseHandlerCancellableDragStateBase));
exports.MouseHandlerResizeBoxState = MouseHandlerResizeBoxState;
