"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var math_1 = require("@devexpress/utils/lib/utils/math");
var auto_scroll_listener_1 = require("../../canvas/listeners/auto-scroll-listener");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var Scroller = (function () {
    function Scroller(control) {
        this.timerId = null;
        this.control = control;
    }
    Scroller.prototype.start = function (offset) {
        var _this = this;
        this.stop();
        var coeff = Math.exp(algorithms_1.IntervalAlgorithms.reflectionOfPointOnInterval(math_1.MathUtils.restrictValue(Math.abs(offset), 23, 300), fixed_1.FixedInterval.fromPositions(23, 301), fixed_1.FixedInterval.fromPositions(-2, 1.7)));
        var stepByPixel = (offset > 0 ? Math.max(offset, 23) : Math.min(offset, -23)) * coeff / Scroller.STEPS;
        var currPos = this.control.viewManager.canvasScrollManager.scrollTop;
        this.timerId = setInterval(function () {
            currPos += stepByPixel;
            _this.control.viewManager.canvasScrollManager.scrollTop = currPos;
        }, 0);
    };
    Scroller.prototype.stop = function () {
        if (this.timerId !== null) {
            clearTimeout(this.timerId);
            this.timerId = null;
        }
    };
    Scroller.STEPS = 8;
    return Scroller;
}());
var MouseHandlerAutoScrollState = (function (_super) {
    tslib_1.__extends(MouseHandlerAutoScrollState, _super);
    function MouseHandlerAutoScrollState(handler) {
        var _this = _super.call(this, handler) || this;
        _this.scroller = new Scroller(_this.handler.control);
        return _this;
    }
    MouseHandlerAutoScrollState.prototype.onMouseDoubleClick = function (_evt) {
    };
    MouseHandlerAutoScrollState.prototype.onMouseDown = function (evt) {
        this.absStartPoint = evt.absolutePoint;
        this.handler.boxVisualizerManager.autoScrollVisualizer.show(rectangle_1.Rectangle.fromCenter(evt.absolutePoint, auto_scroll_listener_1.AutoScrollListener.HALF_SIZE));
    };
    MouseHandlerAutoScrollState.prototype.onMouseUp = function (_evt) {
        this.handler.switchToDefaultState();
    };
    MouseHandlerAutoScrollState.prototype.onMouseMove = function (evt) {
        var offset = evt.absolutePoint.y - this.absStartPoint.y;
        if (Math.abs(offset) > auto_scroll_listener_1.AutoScrollListener.HALF_SIZE)
            this.scroller.start(offset + (offset > 0 ? -1 : 1) * auto_scroll_listener_1.AutoScrollListener.HALF_SIZE);
        else
            this.scroller.stop();
    };
    MouseHandlerAutoScrollState.prototype.onMouseWheel = function (_evt) {
    };
    MouseHandlerAutoScrollState.prototype.onShortcut = function (_shortcutCode) {
    };
    MouseHandlerAutoScrollState.prototype.finish = function () {
        this.scroller.stop();
        this.handler.boxVisualizerManager.autoScrollVisualizer.hide();
    };
    return MouseHandlerAutoScrollState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerAutoScrollState = MouseHandlerAutoScrollState;
