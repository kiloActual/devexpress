"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var manipulator_handler_base_1 = require("../base/manipulator-handler-base");
var mouse_handler_default_state_1 = require("./mouse-handler-default-state");
var MouseHandler = (function (_super) {
    tslib_1.__extends(MouseHandler, _super);
    function MouseHandler(control, boxVisualizerManager) {
        return _super.call(this, control, mouse_handler_default_state_1.MouseHandlerDefaultState, boxVisualizerManager) || this;
    }
    MouseHandler.prototype.onMouseDoubleClick = function (evt) {
        this.state.onMouseDoubleClick(evt);
    };
    MouseHandler.prototype.onMouseDown = function (evt) {
        this.state.onMouseDown(evt);
    };
    MouseHandler.prototype.onMouseUp = function (evt) {
        this.state.onMouseUp(evt);
    };
    MouseHandler.prototype.onMouseMove = function (evt) {
        this.state.onMouseMove(evt);
    };
    MouseHandler.prototype.onMouseWheel = function (evt) {
        this.state.onMouseWheel(evt);
    };
    MouseHandler.prototype.onShortcut = function (shortcutCode) {
        this.state.onShortcut(shortcutCode);
    };
    MouseHandler.prototype.setCursorPointer = function (pointer) {
        this.control.viewManager.canvasManager.setCursorPointer(pointer);
    };
    MouseHandler.prototype.restoreCursorPointer = function () {
        this.control.viewManager.canvasManager.setCursorPointer(CursorPointer.Auto);
    };
    MouseHandler.LEFT_AREA_COMMANDS_OFFSET = 20;
    MouseHandler.WAIT_FOR_DBLCLICK_INTERVAL = 300;
    return MouseHandler;
}(manipulator_handler_base_1.ManipulatorHandlerBase));
exports.MouseHandler = MouseHandler;
var CursorPointer;
(function (CursorPointer) {
    CursorPointer[CursorPointer["Default"] = 0] = "Default";
    CursorPointer[CursorPointer["Move"] = 1] = "Move";
    CursorPointer[CursorPointer["Copy"] = 2] = "Copy";
    CursorPointer[CursorPointer["NoDrop"] = 3] = "NoDrop";
    CursorPointer[CursorPointer["EResize"] = 4] = "EResize";
    CursorPointer[CursorPointer["NResize"] = 5] = "NResize";
    CursorPointer[CursorPointer["SResize"] = 6] = "SResize";
    CursorPointer[CursorPointer["WResize"] = 7] = "WResize";
    CursorPointer[CursorPointer["SEResize"] = 8] = "SEResize";
    CursorPointer[CursorPointer["SWResize"] = 9] = "SWResize";
    CursorPointer[CursorPointer["NWResize"] = 10] = "NWResize";
    CursorPointer[CursorPointer["NEResize"] = 11] = "NEResize";
    CursorPointer[CursorPointer["EWResize"] = 12] = "EWResize";
    CursorPointer[CursorPointer["NSResize"] = 13] = "NSResize";
    CursorPointer[CursorPointer["Auto"] = 14] = "Auto";
})(CursorPointer = exports.CursorPointer || (exports.CursorPointer = {}));
