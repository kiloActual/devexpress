"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var renderer_class_names_1 = require("../../../core/canvas/renderer-class-names");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-box");
var control_1 = require("../../../core/model/options/control");
var layout_word_bounds_1 = require("../../../core/word-bounds-engine/layout-word-bounds");
var browser_1 = require("@devexpress/utils/lib/browser");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var key_1 = require("@devexpress/utils/lib/utils/key");
var list_1 = require("@devexpress/utils/lib/utils/list");
var client_command_1 = require("../../commands/client-command");
var select_table_command_1 = require("../../commands/selection/select-table-command");
var change_active_sub_document_command_1 = require("../../commands/sub-document/change-active-sub-document-command");
var event_manager_1 = require("../../event-manager");
var hit_test_manager_1 = require("../../layout-engine/hit-test-manager/hit-test-manager");
var resize_box_visualizer_1 = require("../../layout-engine/visualizers/resize-box-visualizer");
var set_selection_params_1 = require("../../selection/set-selection-params");
var resize_table_helper_1 = require("../resize-table-helper");
var mouse_handler_1 = require("./mouse-handler");
var mouse_handler_auto_scroll_state_1 = require("./mouse-handler-auto-scroll-state");
var mouse_handler_begin_drag_helper_state_1 = require("./mouse-handler-begin-drag-helper-state");
var mouse_handler_drag_column_or_row_state_1 = require("./mouse-handler-drag-column-or-row-state");
var mouse_handler_drag_content_states_1 = require("./mouse-handler-drag-content-states");
var mouse_handler_drag_floating_object_state_1 = require("./mouse-handler-drag-floating-object-state");
var mouse_handler_paragraph_select_state_1 = require("./mouse-handler-paragraph-select-state");
var mouse_handler_resize_box_state_1 = require("./mouse-handler-resize-box-state");
var mouse_handler_rotate_box_state_1 = require("./mouse-handler-rotate-box-state");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var mouse_handler_text_selection_states_1 = require("./mouse-handler-text-selection-states");
var MouseHandlerDefaultState = (function (_super) {
    tslib_1.__extends(MouseHandlerDefaultState, _super);
    function MouseHandlerDefaultState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerDefaultState.prototype.onMouseDoubleClick = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return;
        if (this.isLeftAreaOffset(htr, evt)) {
            this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectParagraph)
                .execute(this.handler.control.commandManager.isPublicApiCall, htr.getPosition());
            return;
        }
        var activeSubDocument = this.handler.control.selection.activeSubDocument;
        if (htr.exactlyDetailLevel < document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea) {
            if (activeSubDocument.isMain()) {
                if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top) {
                    this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertHeader).execute(this.handler.control.commandManager.isPublicApiCall, htr.pageIndex);
                    return;
                }
                if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom) {
                    this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertFooter).execute(this.handler.control.commandManager.isPublicApiCall, htr.pageIndex);
                    return;
                }
            }
            else if (this.shouldActivateMainArea(activeSubDocument, htr)) {
                this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain).execute(this.handler.control.commandManager.isPublicApiCall);
                return;
            }
        }
        if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea) {
            var position = htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset + htr.box.rowOffset + htr.charOffset;
            if (htr.boxIndex == htr.row.boxes.length - 1 && htr.charOffset == htr.box.getLength())
                position--;
            var selection = this.handler.control.selection;
            var startInterval_1 = layout_word_bounds_1.LayoutWordBounds.getLayoutWordStartBound(this.handler.control.layout, activeSubDocument, selection, position);
            var endInterval_1 = layout_word_bounds_1.LayoutWordBounds.getLayoutWordEndBound(this.handler.control.layout, activeSubDocument, selection, position, true);
            if (endInterval_1 <= startInterval_1)
                return;
            selection.changeState(function (newState) {
                var interval = fixed_1.FixedInterval.fromPositions(startInterval_1, endInterval_1);
                if (evt.modifiers & key_1.ModifierKey.Ctrl)
                    newState.addInterval(interval);
                else
                    newState.setInterval(interval);
                newState.resetKeepX().setEndOfLine(false);
            });
            this.handler.switchState(new mouse_handler_paragraph_select_state_1.MouseHandlerParagraphSelectState(this.handler, evt, startInterval_1));
        }
    };
    MouseHandlerDefaultState.prototype.shouldActivateMainArea = function (activeSubDocument, htr) {
        return (activeSubDocument.isHeader() && !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom)) ||
            (activeSubDocument.isFooter() && !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top)) ||
            (activeSubDocument.isHeaderFooter() && !htr.pageArea);
    };
    MouseHandlerDefaultState.prototype.changeActiveSubDocument = function (evt) {
        var control = this.handler.control;
        var activeSubDocument = control.selection.activeSubDocument;
        if (!activeSubDocument.isHeaderFooter())
            return false;
        var htr = control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea, null, true);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return false;
        if (htr.pageArea.subDocument.isHeaderFooter()) {
            if (htr.pageArea.subDocument.id != activeSubDocument.id || control.selection.pageIndex != htr.pageIndex) {
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
                    .execute(control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(control, htr.pageIndex, htr.pageArea.subDocument.isHeader()));
                return true;
            }
            return false;
        }
        if (htr.pageArea.subDocument.isMain()) {
            if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top) {
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
                    .execute(control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(control, htr.pageIndex, true));
                return true;
            }
            if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom) {
                control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
                    .execute(control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(control, htr.pageIndex, false));
                return true;
            }
            return false;
        }
        return false;
    };
    MouseHandlerDefaultState.prototype.onMouseDown = function (evt) {
        var _this = this;
        var _a;
        var activeSubDocument = this.handler.control.selection.activeSubDocument;
        this.handler.control.barHolder.contextMenu.onCanvasMouseDown();
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.onCanvasMouseDown();
        if (evt.middleButtonPressed) {
            this.handler.switchState(new mouse_handler_auto_scroll_state_1.MouseHandlerAutoScrollState(this.handler));
            this.handler.state.onMouseDown(evt);
            return;
        }
        if (this.changeActiveSubDocument(evt))
            return;
        if (MouseHandlerDefaultState.canHandleFullTableSelection(evt)) {
            this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                .setInterval(this.handler.control.selection.tableInfo.table.interval));
            return;
        }
        if (resize_table_helper_1.ResizeColumnTableHelper.canHandleResize(evt) && !this.handler.control.readOnly) {
            var htr_1 = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea, null);
            if (htr_1.pageArea.subDocument == activeSubDocument) {
                this.handler.switchState(new mouse_handler_drag_column_or_row_state_1.MouseHandlerDragTableColumnState(this.handler));
                this.handler.state.onMouseDown(evt);
                return;
            }
        }
        if (resize_table_helper_1.ResizeRowTableHelper.canHandleResize(evt) && !this.handler.control.readOnly) {
            var htr_2 = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea, null);
            if (htr_2.pageArea.subDocument == activeSubDocument) {
                this.handler.switchState(new mouse_handler_drag_column_or_row_state_1.MouseHandlerDragTableRowState(this.handler));
                this.handler.state.onMouseDown(evt);
                return;
            }
        }
        if (this.shouldProcessResizeBoxVisualizer(evt))
            if (this.resizeRotationChecker(function () {
                if (activeSubDocument.isTextBox())
                    MouseHandlerHelper.selectParentsTextBox(_this.handler.control);
                _this.beginResizeBoxMouseHandler(evt);
            }))
                return;
        if (resize_box_visualizer_1.ResizeBoxVisualizer.shouldRotate(evt, this.handler.control))
            if (this.resizeRotationChecker(function () {
                if (activeSubDocument.isTextBox())
                    MouseHandlerHelper.selectParentsTextBox(_this.handler.control);
                _this.beginRotate(evt);
            }))
                return;
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, activeSubDocument);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None && !htr.floatingObject)
            return;
        if (!resize_box_visualizer_1.ResizeBoxVisualizer.shouldHandleTextBoxAreaClick(evt) && activeSubDocument.isTextBox()) {
            MouseHandlerHelper.changeActiveSubDocumentToParent(this.handler.control);
            htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        }
        if (htr.floatingObject && htr.floatingObject.belongsToSubDocId == this.handler.control.selection.activeSubDocument.id) {
            var box = htr.floatingObject;
            this.selectFloatingObject(box);
            if (box.getType() == layout_box_1.LayoutBoxType.AnchorTextBox &&
                hit_test_manager_1.HitTestManager.isPointInTexBoxArea(evt.layoutPoint, box, activeSubDocument.isTextBox() ? 0 : box.rotationInRadians)) {
                this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToTextBox).execute(this.handler.control.commandManager.isPublicApiCall);
                this.handler.boxVisualizerManager.resizeBoxVisualizer.show(htr.pageIndex, null, null, null, box);
                htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
            }
            else {
                var specRunInfo = this.handler.control.selection.specialRunInfo;
                if (specRunInfo.isSelectedAnchorObject && this.resizeRotationChecker(function () {
                    var dragFloatingObjectState = new mouse_handler_drag_floating_object_state_1.MouseHandlerDragFloatingObjectState(_this.handler, evt);
                    _this.handler.switchState(new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, _this.handler, dragFloatingObjectState));
                }))
                    return;
                else {
                    if (specRunInfo.isPictureSelected() && specRunInfo.isSelectedAnchorObject) {
                        this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                            .setInterval(new fixed_1.FixedInterval(specRunInfo.getPicturePosition(), 1)));
                        return;
                    }
                }
            }
        }
        if (browser_1.Browser.TouchUI && htr.subDocument.isMain() && htr.exactlyDetailLevel < document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea) {
            if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Top || htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea] & rectangle_1.HitTestDeviation.Bottom)
                this.handler.control.viewManager.canvasScrollManager.waitForDblClick();
        }
        if (evt.button === event_manager_1.MouseButton.Right && this.handler.control.selection.lastSelectedInterval.contains(htr.getPosition()))
            return;
        if (this.shouldSelectEntireTableColumn(htr))
            this.beginSelectEntireTableColumn(htr, evt);
        else if (this.shouldSelectEntireTableRow(htr))
            this.beginSelectEntireTableRow(htr, evt);
        else if (this.shouldBeginDragExistingSelection(htr, evt))
            this.beginDragExistingSelection(evt, true);
        else if (this.shouldSelectEntireTableCell(htr, evt)) {
            if (this.shouldSelectPicture(htr, !!(evt.modifiers & key_1.ModifierKey.Ctrl)))
                this.selectImage(evt, htr);
            else
                this.beginSelectEntireTableCell(htr, evt);
        }
        else if (this.isLeftAreaOffset(htr, evt)) {
            if (evt.modifiers & key_1.ModifierKey.Ctrl && this.handler.control.selection.isCollapsed())
                this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectAll).execute(this.handler.control.commandManager.isPublicApiCall, htr.getPosition());
            else
                this.beginLineSelection(htr, evt);
        }
        else if (this.shouldSelectPicture(htr, !!(evt.modifiers & key_1.ModifierKey.Ctrl)))
            this.selectImage(evt, htr);
        else if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Character && evt.modifiers & key_1.ModifierKey.Ctrl)
            this.beginCharacterMultiSelection(htr);
        else if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea)
            this.beginCharacterSelection(evt, htr, !!(evt.modifiers & key_1.ModifierKey.Shift));
    };
    MouseHandlerDefaultState.prototype.onMouseUp = function (evt) {
        if ((evt.button === event_manager_1.MouseButton.Right || evt.button === event_manager_1.MouseButton.Left && browser_1.Browser.MacOSPlatform && (evt.modifiers & key_1.ModifierKey.Ctrl))
            && !evt.middleButtonPressed && evt.layoutPoint) {
            this.handler.control.popupMenuManager.showByMouseClick(evt.absolutePoint);
        }
        if (this.handler.control.modelManager.richOptions.fields.openHyperlinkOnClick || (evt.modifiers & key_1.ModifierKey.Ctrl)) {
            var field = this.handler.getHyperlinkFieldResult(evt);
            if (field) {
                if (!this.handler.control.clientSideEvents.raiseHyperlinkClick(evt.mouseEvent, field))
                    this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.OpenHyperlink)
                        .execute(this.handler.control.commandManager.isPublicApiCall, field);
            }
        }
    };
    MouseHandlerDefaultState.canHandleFullTableSelection = function (evt) {
        return evt_1.EvtUtils.getEventSource(evt.mouseEvent).className.indexOf(renderer_class_names_1.RendererClassNames.FULL_TABLE_SELECTOR) > -1;
    };
    MouseHandlerDefaultState.prototype.shouldSelectEntireTableColumn = function (htr) {
        if (!htr.row)
            return false;
        if (!htr.row.tableCellInfo)
            return false;
        return !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell] & rectangle_1.HitTestDeviation.Top);
    };
    MouseHandlerDefaultState.prototype.shouldSelectEntireTableRow = function (htr) {
        if (!htr.row)
            return false;
        if (!htr.row.tableCellInfo)
            return false;
        return !!(htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell] & rectangle_1.HitTestDeviation.Left);
    };
    MouseHandlerDefaultState.prototype.shouldSelectEntireTableCell = function (htr, evt) {
        if (!htr.row)
            return false;
        if (!htr.row.tableCellInfo)
            return false;
        if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell])
            return false;
        if (evt.modifiers & key_1.ModifierKey.Shift)
            return false;
        return true;
    };
    MouseHandlerDefaultState.prototype.beginSelectEntireTableColumn = function (htr, evt) {
        var shouldAddSelection = evt.modifiers & key_1.ModifierKey.Ctrl;
        var cmd = this.handler.control.commandManager.getCommand(shouldAddSelection ? client_command_1.RichEditClientCommand.ExtendSelectTableColumn : client_command_1.RichEditClientCommand.SelectTableColumn);
        var table = htr.row.tableCellInfo.parentRow.parentTable.logicInfo.grid.table;
        var cellGridIndex = htr.row.tableCellInfo.cellGridIndex;
        cmd.execute(this.handler.control.commandManager.isPublicApiCall, { table: table, columnIndices: [cellGridIndex] });
        var selectionState = new mouse_handler_text_selection_states_1.MouseHandlerContinueSelectionByTableColumnsState(this.handler, htr.row.tableCellInfo.parentRow.parentTable, cellGridIndex, htr.column.x + htr.pageArea.x);
        var dragState = new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, this.handler, selectionState);
        this.handler.switchState(dragState);
    };
    MouseHandlerDefaultState.prototype.beginSelectEntireTableRow = function (htr, evt) {
        var shouldAddSelection = evt.modifiers & key_1.ModifierKey.Ctrl;
        var cmd = this.handler.control.commandManager.getCommand(shouldAddSelection ? client_command_1.RichEditClientCommand.ExtendSelectTableRow : client_command_1.RichEditClientCommand.SelectTableRow);
        var table = htr.row.tableCellInfo.parentRow.parentTable.logicInfo.grid.table;
        var rowIndex = htr.row.tableCellInfo.parentRow.rowIndex;
        cmd.execute(this.handler.control.commandManager.isPublicApiCall, new select_table_command_1.SelectTableRowCommandOptions(this.handler.control, table, [rowIndex], true));
        var selectionState = new mouse_handler_text_selection_states_1.MouseHandlerContinueSelectionByTableRowsState(this.handler, htr.row.tableCellInfo.parentRow.parentTable, rowIndex);
        var dragState = new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, this.handler, selectionState);
        this.handler.switchState(dragState);
    };
    MouseHandlerDefaultState.prototype.beginSelectEntireTableCell = function (htr, evt) {
        var shouldAddSelection = !!(evt.modifiers & key_1.ModifierKey.Ctrl);
        var position = this.getPosition(htr);
        var selection = this.handler.control.selection;
        selection.changeState(function (newState) {
            var interval = new fixed_1.FixedInterval(position, 0);
            if (shouldAddSelection || (evt.button & event_manager_1.MouseButton.Right))
                newState.addInterval(interval);
            else
                newState.setInterval(interval);
            newState.resetKeepX().setEndOfLine(false);
        });
        var rowIndex = htr.row.tableCellInfo.parentRow.rowIndex;
        var gridCellIndex = htr.row.tableCellInfo.cellGridIndex;
        var selectionState = new mouse_handler_text_selection_states_1.MouseHandlerContinueSelectionByTableCellsState(this.handler, htr.row.tableCellInfo.parentRow.parentTable, rowIndex, gridCellIndex, this.getPosition(htr));
        var dragState = new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, this.handler, selectionState);
        this.handler.switchState(dragState);
    };
    MouseHandlerDefaultState.prototype.beginCharacterMultiSelection = function (htr) {
        var position = htr.getPosition();
        this.handler.switchState(new mouse_handler_text_selection_states_1.MouseHandlerBeginMultiselectionState(this.handler, position));
    };
    MouseHandlerDefaultState.prototype.isLeftAreaOffset = function (htr, evt) {
        if (htr) {
            if (htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Page &&
                htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Column] & rectangle_1.HitTestDeviation.Left &&
                evt.layoutPoint.x <= htr.pageArea.x + htr.column.x - mouse_handler_1.MouseHandler.LEFT_AREA_COMMANDS_OFFSET)
                return true;
            if (htr.detailsLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Box &&
                htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Row &&
                htr.box == htr.row.boxes[0] &&
                htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Box] & rectangle_1.HitTestDeviation.Left &&
                evt.layoutPoint.x <= htr.pageArea.x + htr.column.x + htr.row.x + htr.box.x - mouse_handler_1.MouseHandler.LEFT_AREA_COMMANDS_OFFSET) {
                var h = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, null);
                if (h.floatingObject && h.floatingObject.isInText())
                    return true;
            }
        }
        return false;
    };
    MouseHandlerDefaultState.prototype.shouldProcessResizeBoxVisualizer = function (evt) {
        return this.handler.boxVisualizerManager.resizeBoxVisualizer.shouldCapture(evt) &&
            this.handler.control.selection.activeSubDocument.isEditable([new fixed_1.FixedInterval(this.handler.control.selection.specialRunInfo.getPosition(), 1)]);
    };
    MouseHandlerDefaultState.prototype.beginResizeBoxMouseHandler = function (evt) {
        this.handler.switchState(new mouse_handler_resize_box_state_1.MouseHandlerResizeBoxState(this.handler));
        this.handler.state.onMouseDown(evt);
    };
    MouseHandlerDefaultState.prototype.beginRotate = function (evt) {
        this.handler.switchState(new mouse_handler_rotate_box_state_1.MouseHandlerRotateBoxState(this.handler));
        this.handler.state.onMouseDown(evt);
    };
    MouseHandlerDefaultState.prototype.beginCharacterSelection = function (evt, htr, extendSelection) {
        this.setStartSelection(htr, extendSelection);
        this.handler.switchState(new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, this.handler, new mouse_handler_text_selection_states_1.MouseHandlerContinueSelectionByCharactersState(this.handler)));
    };
    MouseHandlerDefaultState.prototype.setStartSelection = function (htr, extendSelection) {
        this.handler.control.inputController.setEditableDocumentContent("");
        var selection = this.handler.control.selection;
        var position = this.getPosition(htr);
        var endOfLine = position === htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset +
            htr.column.pageAreaOffset + htr.row.getEndPosition();
        selection.changeState(function (newState) {
            if (extendSelection)
                newState.extendLastInterval(position);
            else
                newState.setInterval(new fixed_1.FixedInterval(position, 0));
            newState.resetKeepX().setEndOfLine(endOfLine);
        });
    };
    MouseHandlerDefaultState.prototype.getPosition = function (htr) {
        var position = htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset;
        if (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Box] & rectangle_1.HitTestDeviation.Right) {
            var lastVisibleBoxInRow = htr.row.getLastVisibleBox();
            if (lastVisibleBoxInRow)
                position += lastVisibleBoxInRow.getEndPosition();
        }
        else {
            position += htr.box.rowOffset + htr.charOffset;
            if (htr.boxIndex == htr.row.boxes.length - 1 && htr.charOffset == htr.box.getLength() && !htr.box.isVisible())
                position -= 1;
        }
        return position;
    };
    MouseHandlerDefaultState.prototype.beginLineSelection = function (htr, evt) {
        var lineStart = htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset;
        if (evt.modifiers & key_1.ModifierKey.Shift) {
            this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ExtendSelectLineNoUpdateControlState).execute(this.handler.control.commandManager.isPublicApiCall, lineStart);
        }
        else if (evt.modifiers & key_1.ModifierKey.Ctrl)
            this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.AddSelectedLineCommandNoUpdateControlState).execute(this.handler.control.commandManager.isPublicApiCall, lineStart);
        else
            this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectLineNoUpdateControlState).execute(this.handler.control.commandManager.isPublicApiCall, lineStart);
        this.handler.switchState(new mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState(evt.layoutPoint, this.handler, new mouse_handler_text_selection_states_1.MouseHandlerContinueSelectionByLinesState(this.handler)));
    };
    MouseHandlerDefaultState.prototype.shouldSelectPicture = function (htr, ctrlPressed) {
        if (htr.exactlyDetailLevel < document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
            return false;
        return htr.box.getType() == layout_box_1.LayoutBoxType.Picture && !ctrlPressed;
    };
    MouseHandlerDefaultState.prototype.shouldBeginDragExistingSelection = function (htr, evt) {
        if (!(evt.modifiers & key_1.ModifierKey.Shift) &&
            control_1.ControlOptions.isEnabled(this.handler.control.modelManager.richOptions.control.drag) && !this.handler.control.selection.isCollapsed() &&
            htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.Box) {
            var position_1 = htr.getPosition();
            return list_1.ListUtils.unsafeAnyOf(this.handler.control.selection.intervals, function (interval) { return interval.contains(position_1); });
        }
        return false;
    };
    MouseHandlerDefaultState.prototype.selectImage = function (evt, htr) {
        var position = htr.getPosition() - htr.charOffset;
        var selection = this.handler.control.selection;
        selection.deprecatedSetSelection(position, position + 1, false, -1, true);
        if (control_1.ControlOptions.isEnabled(this.handler.control.modelManager.richOptions.control.drag))
            this.beginDragExistingSelection(evt, false);
    };
    MouseHandlerDefaultState.prototype.beginDragExistingSelection = function (evt, resetSelectionOnMouseUp) {
        var dragState = new mouse_handler_drag_content_states_1.MouseHandlerDragContentState(this.handler);
        var state = new mouse_handler_drag_content_states_1.MouseHandlerBeginContentDragHelperState(evt.layoutPoint, this.handler, dragState);
        state.resetSelectionOnMouseUp = resetSelectionOnMouseUp;
        this.handler.switchState(state);
    };
    MouseHandlerDefaultState.prototype.selectFloatingObject = function (box) {
        var pos = this.handler.control.layout.anchorObjectsPositionInfo.getPosition(box.objectId);
        this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams().setInterval(new fixed_1.FixedInterval(pos, 1)));
    };
    return MouseHandlerDefaultState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerDefaultState = MouseHandlerDefaultState;
var MouseHandlerHelper = (function () {
    function MouseHandlerHelper() {
    }
    MouseHandlerHelper.selectParentsTextBox = function (control) {
        var textBoxPosition = control.selection.specialRunInfo.getTextBoxPosition();
        if (textBoxPosition > -1) {
            this.changeActiveSubDocumentToParent(control);
            control.selection.setSelection(new set_selection_params_1.SetSelectionParams().setInterval(new fixed_1.FixedInterval(textBoxPosition, 1)));
        }
    };
    MouseHandlerHelper.changeActiveSubDocumentToParent = function (control) {
        var selection = control.selection;
        var parentActiveSubDocument = selection.specialRunInfo.getParentSubDocument();
        if (!parentActiveSubDocument)
            return;
        if (parentActiveSubDocument.isMain())
            control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToMain).execute(control.commandManager.isPublicApiCall);
        else
            control.commandManager.getCommand(client_command_1.RichEditClientCommand.ChangeActiveSubDocumentToHeaderFooterByPageIndex)
                .execute(control.commandManager.isPublicApiCall, new change_active_sub_document_command_1.ChangeActiveSubDocumentToHeaderFooterByPageIndexCommandParameters(control, selection.pageIndex, parentActiveSubDocument.isHeader()));
    };
    return MouseHandlerHelper;
}());
exports.MouseHandlerHelper = MouseHandlerHelper;
