"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var event_manager_1 = require("../../event-manager");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var MouseHandlerBeginDragHelperState = (function (_super) {
    tslib_1.__extends(MouseHandlerBeginDragHelperState, _super);
    function MouseHandlerBeginDragHelperState(lp, handler, dragState) {
        var _this = _super.call(this, handler) || this;
        _this.dragState = dragState;
        _this.startPoint = lp.clone();
        return _this;
    }
    MouseHandlerBeginDragHelperState.prototype.start = function () {
        var _a;
        this.handler.control.inputPositionModelChangesListener.beginUpdate();
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.beginUpdate();
        this.handler.control.barHolder.publicUiChangesListener.beginUpdate();
        this.handler.control.horizontalRulerControl.beginUpdate();
    };
    MouseHandlerBeginDragHelperState.prototype.finish = function () {
        var _a;
        this.handler.control.inputPositionModelChangesListener.endUpdate();
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.endUpdate();
        this.handler.control.barHolder.publicUiChangesListener.endUpdate();
        this.handler.control.horizontalRulerControl.endUpdate();
        this.handler.control.barHolder.updateItemsState();
        this.handler.control.horizontalRulerControl.update();
    };
    MouseHandlerBeginDragHelperState.prototype.cancelOnRightMouseUp = function () { return true; };
    MouseHandlerBeginDragHelperState.prototype.onMouseWheel = function (evt) {
        this.handler.switchState(this.dragState);
        this.dragState.onMouseWheel(evt);
    };
    MouseHandlerBeginDragHelperState.prototype.onMouseMove = function (evt) {
        if (!evt.layoutPoint.equals(this.startPoint)) {
            this.handler.switchState(this.dragState);
            this.dragState.onMouseMove(evt);
        }
    };
    MouseHandlerBeginDragHelperState.prototype.onMouseUp = function (evt) {
        if (evt.button == event_manager_1.MouseButton.Left || (this.cancelOnRightMouseUp() && evt.button & event_manager_1.MouseButton.Right)) {
            this.handler.switchToDefaultState();
            this.handler.onMouseUp(evt);
        }
    };
    return MouseHandlerBeginDragHelperState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerBeginDragHelperState = MouseHandlerBeginDragHelperState;
