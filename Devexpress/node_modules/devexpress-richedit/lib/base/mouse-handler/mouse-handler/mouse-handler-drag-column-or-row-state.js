"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var resize_table_helper_1 = require("../resize-table-helper");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var MouseHandlerDragResizeTableBase = (function (_super) {
    tslib_1.__extends(MouseHandlerDragResizeTableBase, _super);
    function MouseHandlerDragResizeTableBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerDragResizeTableBase.prototype.onMouseDown = function (evt) {
        this.helper = new (this.getHelperConstructor())(this.handler.control, this.handler.boxVisualizerManager.resizeTableVisualizer, evt);
    };
    MouseHandlerDragResizeTableBase.prototype.onMouseMove = function (evt) {
        this.helper.move(evt);
    };
    MouseHandlerDragResizeTableBase.prototype.onMouseUp = function (evt) {
        this.helper.end(evt);
        this.handler.switchToDefaultState();
    };
    MouseHandlerDragResizeTableBase.prototype.getHelperConstructor = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    return MouseHandlerDragResizeTableBase;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerDragResizeTableBase = MouseHandlerDragResizeTableBase;
var MouseHandlerDragTableRowState = (function (_super) {
    tslib_1.__extends(MouseHandlerDragTableRowState, _super);
    function MouseHandlerDragTableRowState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerDragTableRowState.prototype.getHelperConstructor = function () {
        return resize_table_helper_1.ResizeRowTableHelper;
    };
    return MouseHandlerDragTableRowState;
}(MouseHandlerDragResizeTableBase));
exports.MouseHandlerDragTableRowState = MouseHandlerDragTableRowState;
var MouseHandlerDragTableColumnState = (function (_super) {
    tslib_1.__extends(MouseHandlerDragTableColumnState, _super);
    function MouseHandlerDragTableColumnState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerDragTableColumnState.prototype.getHelperConstructor = function () {
        return resize_table_helper_1.ResizeColumnTableHelper;
    };
    return MouseHandlerDragTableColumnState;
}(MouseHandlerDragResizeTableBase));
exports.MouseHandlerDragTableColumnState = MouseHandlerDragTableColumnState;
