"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var layout_point_1 = require("../../../core/layout/layout-point");
var layout_table_cell_info_1 = require("../../../core/layout/table/layout-table-cell-info");
var table_utils_1 = require("../../../core/model/tables/table-utils");
var min_max_1 = require("@devexpress/utils/lib/class/min-max");
var errors_1 = require("@devexpress/utils/lib/errors");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var key_1 = require("@devexpress/utils/lib/utils/key");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var client_command_1 = require("../../commands/client-command");
var select_table_command_1 = require("../../commands/selection/select-table-command");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var MouseHandlerContinueSelectionByRangesState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByRangesState, _super);
    function MouseHandlerContinueSelectionByRangesState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerContinueSelectionByRangesState.prototype.onMouseMove = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            this.continueSelection(htr, evt);
    };
    MouseHandlerContinueSelectionByRangesState.prototype.onMouseUp = function (_evt) {
        this.stopProcessing();
    };
    MouseHandlerContinueSelectionByRangesState.prototype.start = function () {
        var _a;
        this.handler.control.inputPositionModelChangesListener.beginUpdate();
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.beginUpdate();
        this.handler.control.barHolder.publicUiChangesListener.beginUpdate();
        this.handler.control.horizontalRulerControl.beginUpdate();
    };
    MouseHandlerContinueSelectionByRangesState.prototype.finish = function () {
        var _a;
        this.handler.control.inputPositionModelChangesListener.endUpdate();
        this.handler.control.inputPosition.reset();
        (_a = this.handler.control.barHolder.ribbon) === null || _a === void 0 ? void 0 : _a.endUpdate();
        this.handler.control.barHolder.publicUiChangesListener.endUpdate();
        this.handler.control.horizontalRulerControl.endUpdate();
        this.handler.control.barHolder.updateItemsState();
        this.handler.control.horizontalRulerControl.update();
    };
    MouseHandlerContinueSelectionByRangesState.prototype.stopProcessing = function () {
        this.handler.switchToDefaultState();
    };
    MouseHandlerContinueSelectionByRangesState.prototype.continueSelection = function (htr, _evt) {
        var command = this.getExtendSelectionCommand();
        var parameter = this.getExtendSelectionCommandParameter(htr);
        command.execute(this.handler.control.commandManager.isPublicApiCall, parameter);
    };
    MouseHandlerContinueSelectionByRangesState.prototype.getExtendSelectionCommand = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    MouseHandlerContinueSelectionByRangesState.prototype.getExtendSelectionCommandParameter = function (_htr) {
        return undefined;
    };
    return MouseHandlerContinueSelectionByRangesState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerContinueSelectionByRangesState = MouseHandlerContinueSelectionByRangesState;
var MouseHandlerBeginMultiselectionState = (function (_super) {
    tslib_1.__extends(MouseHandlerBeginMultiselectionState, _super);
    function MouseHandlerBeginMultiselectionState(handler, startPosition) {
        var _this = _super.call(this, handler) || this;
        _this.startPosition = startPosition;
        return _this;
    }
    MouseHandlerBeginMultiselectionState.prototype.onMouseUp = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onMouseUp(evt);
    };
    MouseHandlerBeginMultiselectionState.prototype.onMouseMove = function (evt) {
        this.updateSelection(evt);
    };
    MouseHandlerBeginMultiselectionState.prototype.onMouseWheel = function (evt) {
        this.updateSelection(evt);
    };
    MouseHandlerBeginMultiselectionState.prototype.updateSelection = function (evt) {
        var _this = this;
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Max, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
            var newPosition = htr.getPosition();
            if (newPosition !== this.startPosition) {
                this.handler.control.selection.changeState(function (newState) {
                    newState.addInterval(fixed_1.FixedInterval.fromPositions(_this.startPosition, newPosition))
                        .resetKeepX().setEndOfLine(false);
                });
                this.handler.switchState(new MouseHandlerContinueSelectionByCharactersState(this.handler));
            }
        }
    };
    return MouseHandlerBeginMultiselectionState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerBeginMultiselectionState = MouseHandlerBeginMultiselectionState;
var MouseHandlerContinueSelectionByCharactersState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByCharactersState, _super);
    function MouseHandlerContinueSelectionByCharactersState() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.prevLayoutPoint = new layout_point_1.LayoutPoint(-1, -1, -1);
        return _this;
    }
    MouseHandlerContinueSelectionByCharactersState.prototype.extendToPoints = function (selection, bounds) {
        selection.changeState(function (newState) {
            newState.interval.start = Math.min(newState.interval.start, bounds.minElement);
            newState.interval.end = Math.max(newState.interval.end, bounds.maxElement);
            newState.resetKeepX().setEndOfLine(false);
        });
    };
    MouseHandlerContinueSelectionByCharactersState.prototype.isForwardMouseDirection = function (evt) {
        var currLp = evt.layoutPoint;
        return currLp.pageIndex > this.prevLayoutPoint.pageIndex || currLp.y > this.prevLayoutPoint.y || currLp.x > this.prevLayoutPoint.x;
    };
    MouseHandlerContinueSelectionByCharactersState.prototype.extendForward = function (selection, pos) {
        var lastSelectedInterval = selection.lastSelectedInterval;
        var lastParagraphInterval = this.handler.control.selection.activeSubDocument.getParagraphByPosition(Math.max(0, Math.max(pos, lastSelectedInterval.end) - 1)).interval;
        if (lastParagraphInterval.length > 1 && (lastParagraphInterval.end - 1 == pos || lastParagraphInterval.end == pos)
            && lastSelectedInterval.contains(lastParagraphInterval.start)) {
            selection.changeState(function (newState) {
                newState.extendLastInterval(Math.max(lastParagraphInterval.end, lastSelectedInterval.end))
                    .resetKeepX().setEndOfLine(false);
            });
            return true;
        }
        return false;
    };
    MouseHandlerContinueSelectionByCharactersState.prototype.extendBackward = function (selection, pos) {
        var lastSelectedInterval = selection.lastSelectedInterval;
        var firstParagraphInterval = this.handler.control.selection.activeSubDocument.getParagraphByPosition(Math.min(pos, lastSelectedInterval.start)).interval;
        var needToExtend = false;
        var bounds = new min_max_1.MinMaxNumber(lastSelectedInterval.start, lastSelectedInterval.end);
        if (firstParagraphInterval.length > 1 && firstParagraphInterval.start == pos && lastSelectedInterval.containsWithIntervalEnd(firstParagraphInterval.end - 1) && !lastSelectedInterval.containsWithIntervalEnd(firstParagraphInterval.end)) {
            bounds.minElement = Math.min(bounds.minElement, firstParagraphInterval.start);
            bounds.maxElement = Math.max(bounds.maxElement, firstParagraphInterval.end);
            needToExtend = true;
        }
        if (lastSelectedInterval.end > firstParagraphInterval.end && !selection.forwardDirection) {
            var lastParInterval = this.handler.control.selection.activeSubDocument.getParagraphByPosition(Math.max(pos, lastSelectedInterval.end)).interval;
            if (lastParInterval.length > 1 && lastSelectedInterval.contains(lastParInterval.start) && lastSelectedInterval.end == lastParInterval.end - 1) {
                bounds.minElement = Math.min(bounds.minElement, lastParInterval.start);
                bounds.maxElement = Math.max(bounds.maxElement, lastParInterval.end);
                needToExtend = true;
            }
        }
        if (needToExtend) {
            this.extendToPoints(selection, bounds);
            return true;
        }
        return false;
    };
    MouseHandlerContinueSelectionByCharactersState.prototype.extendSelectionToFullParagraph = function (evt, pos) {
        var selection = this.handler.control.selection;
        if (this.isForwardMouseDirection(evt)) {
            if (this.extendForward(selection, pos))
                return true;
        }
        else {
            if (this.extendBackward(selection, pos))
                return true;
        }
        return false;
    };
    MouseHandlerContinueSelectionByCharactersState.prototype.continueSelection = function (htr, evt, isTableCell) {
        if (isTableCell === void 0) { isTableCell = false; }
        var pos = htr.getPosition();
        if (isTableCell || !this.extendSelectionToFullParagraph(evt, pos))
            this.handler.control.selection.changeState(function (newState) {
                newState.extendLastInterval(pos).resetKeepX().setEndOfLine(false);
            });
        this.prevLayoutPoint = evt.layoutPoint.clone();
    };
    return MouseHandlerContinueSelectionByCharactersState;
}(MouseHandlerContinueSelectionByRangesState));
exports.MouseHandlerContinueSelectionByCharactersState = MouseHandlerContinueSelectionByCharactersState;
var MouseHandlerContinueSelectionByLinesState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByLinesState, _super);
    function MouseHandlerContinueSelectionByLinesState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerContinueSelectionByLinesState.prototype.getExtendSelectionCommand = function () {
        return this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.ExtendSelectLineNoUpdateControlState);
    };
    MouseHandlerContinueSelectionByLinesState.prototype.getExtendSelectionCommandParameter = function (htr) {
        return htr.getRelatedSubDocumentPagePosition() + htr.pageArea.pageOffset + htr.column.pageAreaOffset + htr.row.columnOffset;
    };
    return MouseHandlerContinueSelectionByLinesState;
}(MouseHandlerContinueSelectionByRangesState));
exports.MouseHandlerContinueSelectionByLinesState = MouseHandlerContinueSelectionByLinesState;
var MouseHandlerContinueSelectionByTableColumnsState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByTableColumnsState, _super);
    function MouseHandlerContinueSelectionByTableColumnsState(handler, table, startColumnIndex, columnOffsetX) {
        var _this = _super.call(this, handler) || this;
        _this.table = table;
        _this.startColumnIndex = startColumnIndex;
        _this.lastColumnIndex = startColumnIndex;
        _this.columnOffsetX = columnOffsetX;
        return _this;
    }
    MouseHandlerContinueSelectionByTableColumnsState.prototype.onMouseMove = function (evt) {
        if (evt.layoutPoint.isEmpty())
            return;
        var relativeX = evt.layoutPoint.x - this.columnOffsetX - this.table.x;
        var columnIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(this.table.logicInfo.grid.columns.positions, function (posX) { return posX; }, relativeX));
        if (columnIndex !== this.lastColumnIndex) {
            var shouldExtend = evt.modifiers & key_1.ModifierKey.Ctrl;
            var cmd = this.handler.control.commandManager.getCommand(shouldExtend ? client_command_1.RichEditClientCommand.ExtendSelectTableColumn : client_command_1.RichEditClientCommand.SelectTableColumn);
            var columnIndices = [];
            var startColumnIndex = Math.min(this.startColumnIndex, columnIndex);
            var endColumnIndex = Math.max(this.startColumnIndex, columnIndex);
            for (var i = startColumnIndex; i <= endColumnIndex; i++)
                columnIndices.push(i);
            cmd.execute(this.handler.control.commandManager.isPublicApiCall, { table: this.table.logicInfo.grid.table, columnIndices: columnIndices });
            this.lastColumnIndex = columnIndex;
        }
    };
    return MouseHandlerContinueSelectionByTableColumnsState;
}(MouseHandlerContinueSelectionByRangesState));
exports.MouseHandlerContinueSelectionByTableColumnsState = MouseHandlerContinueSelectionByTableColumnsState;
var MouseHandlerContinueSelectionByTableRowsState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByTableRowsState, _super);
    function MouseHandlerContinueSelectionByTableRowsState(handler, table, startRowIndex) {
        var _this = _super.call(this, handler) || this;
        _this.table = table;
        _this.startRowIndex = startRowIndex;
        _this.lastRowIndex = startRowIndex;
        return _this;
    }
    MouseHandlerContinueSelectionByTableRowsState.prototype.onMouseMove = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return;
        var shouldExtend = evt.modifiers & key_1.ModifierKey.Ctrl;
        var position = htr.getPosition();
        var modelTable = this.table.logicInfo.grid.table;
        var rowIndex;
        var shouldContinue = false;
        var forwardDirection;
        if (position < modelTable.getStartPosition()) {
            rowIndex = 0;
            shouldContinue = true;
            forwardDirection = false;
        }
        else if (position > modelTable.getEndPosition()) {
            rowIndex = modelTable.rows.length - 1;
            shouldContinue = true;
            forwardDirection = true;
        }
        else {
            rowIndex = search_1.SearchUtils.normedInterpolationIndexOf(modelTable.rows, function (r) { return r.getStartPosition(); }, position);
            forwardDirection = rowIndex >= this.startRowIndex;
        }
        var selection = this.handler.control.selection;
        if (this.lastRowIndex !== rowIndex || (!shouldContinue && (selection.intervals[0].start < modelTable.getStartPosition() || selection.intervals[selection.intervals.length - 1].end > modelTable.getEndPosition()))) {
            var cmd = this.handler.control.commandManager.getCommand(shouldExtend ? client_command_1.RichEditClientCommand.ExtendSelectTableRow : client_command_1.RichEditClientCommand.SelectTableRow);
            var rowIndices = [];
            var startRowIndex = Math.min(this.startRowIndex, rowIndex);
            var endRowIndex = Math.max(this.startRowIndex, rowIndex);
            for (var i = startRowIndex; i <= endRowIndex; i++)
                rowIndices.push(i);
            if (rowIndex < this.startRowIndex)
                rowIndices = rowIndices.reverse();
            cmd.execute(this.handler.control.commandManager.isPublicApiCall, new select_table_command_1.SelectTableRowCommandOptions(this.handler.control, this.table.logicInfo.grid.table, rowIndices, forwardDirection));
            this.lastRowIndex = rowIndex;
        }
        if (shouldContinue)
            this.continueSelection(htr, evt);
    };
    return MouseHandlerContinueSelectionByTableRowsState;
}(MouseHandlerContinueSelectionByCharactersState));
exports.MouseHandlerContinueSelectionByTableRowsState = MouseHandlerContinueSelectionByTableRowsState;
var MouseHandlerContinueSelectionByTableCellsState = (function (_super) {
    tslib_1.__extends(MouseHandlerContinueSelectionByTableCellsState, _super);
    function MouseHandlerContinueSelectionByTableCellsState(handler, startTable, startRowIndex, startGridCellIndex, startPosition) {
        var _this = _super.call(this, handler) || this;
        var modelRow = startTable.logicInfo.grid.table.rows[startRowIndex];
        var cellIndex = startTable.logicInfo.grid.tableCellGridInfos[startRowIndex][startGridCellIndex].getCellIndexAbs(startRowIndex);
        _this.startCell = modelRow.cells[cellIndex];
        _this.lastCell = _this.startCell;
        _this.startParentCell = _this.startCell;
        _this.startPosition = startPosition;
        while (_this.startParentCell.parentRow.parentTable.parentCell)
            _this.startParentCell = _this.startParentCell.parentRow.parentTable.parentCell;
        return _this;
    }
    MouseHandlerContinueSelectionByTableCellsState.prototype.onMouseMove = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        if (htr.exactlyDetailLevel == document_layout_details_level_1.DocumentLayoutDetailsLevel.None)
            return;
        var selection = this.handler.control.selection;
        var extendSelection = !!(evt.modifiers & key_1.ModifierKey.Ctrl);
        if (!htr.row.tableCellInfo) {
            this.selectWholeInterval(htr, evt, extendSelection);
            return;
        }
        var modelTable = htr.row.tableCellInfo.parentRow.parentTable.logicInfo.grid.table;
        var modelRow = modelTable.rows[htr.row.tableCellInfo.parentRow.rowIndex];
        var modelCell = modelRow.cells[table_utils_1.TableCellUtils.getCellIndexByColumnIndex(modelRow, htr.row.tableCellInfo.cellGridIndex)];
        var sameTableCells = table_utils_1.TableCellUtils.getSameTableCells(this.startCell, modelCell);
        if (!sameTableCells) {
            this.selectWholeInterval(htr, evt, extendSelection);
            return;
        }
        if (this.startCell === sameTableCells.lastCell) {
            if (!extendSelection &&
                (selection.intervals.length !== 1 ||
                    (selection.intervals[0].start !== this.startPosition && selection.intervals[0].end !== this.startPosition)))
                this.handler.control.selection.deprecatedSetSelection(this.startPosition, htr.getPosition(), false, -1, true);
            else {
                var noExtend = htr.row.tableCellInfo && htr.row.tableCellInfo.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn) &&
                    list_1.ListUtils.last(htr.row.tableCellInfo.layoutRows) == htr.row && htr.exactlyDetailLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.TableCell &&
                    (htr.deviations[document_layout_details_level_1.DocumentLayoutDetailsLevel.Character] & rectangle_1.HitTestDeviation.Right) &&
                    htr.isLastBoxInRow() && htr.charOffset == htr.box.getLength();
                if (!noExtend)
                    this.continueSelection(htr, evt, true);
            }
            this.lastCell = this.startCell;
            return;
        }
        if (this.lastCell === sameTableCells.lastCell)
            return;
        var commandParameters = {
            firstCell: sameTableCells.firstCell,
            lastCell: sameTableCells.lastCell,
            extendSelection: extendSelection
        };
        this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.SelectTableCellsRange)
            .execute(this.handler.control.commandManager.isPublicApiCall, commandParameters);
        this.lastCell = sameTableCells.lastCell;
    };
    MouseHandlerContinueSelectionByTableCellsState.prototype.selectWholeInterval = function (htr, evt, extendSelection) {
        var selection = this.handler.control.selection;
        var position = htr.getPosition();
        var startPosition = position >= this.startCell.endParagrapPosition.value ?
            this.startParentCell.parentRow.getStartPosition() :
            this.startParentCell.parentRow.getEndPosition();
        if (selection.multiselection) {
            selection.changeState(function (newState) {
                var interval = fixed_1.FixedInterval.fromPositions(startPosition, position);
                if (extendSelection)
                    newState.addInterval(interval);
                else
                    newState.setInterval(interval);
                newState.resetKeepX().setEndOfLine(true);
            });
        }
        else
            this.continueSelection(htr, evt);
    };
    return MouseHandlerContinueSelectionByTableCellsState;
}(MouseHandlerContinueSelectionByCharactersState));
exports.MouseHandlerContinueSelectionByTableCellsState = MouseHandlerContinueSelectionByTableCellsState;
