"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var set_selection_params_1 = require("../../selection/set-selection-params");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var MouseHandlerParagraphSelectState = (function (_super) {
    tslib_1.__extends(MouseHandlerParagraphSelectState, _super);
    function MouseHandlerParagraphSelectState(handler, evt, startSelectedWordInterval) {
        var _this = _super.call(this, handler) || this;
        _this.layoutPoint = evt.layoutPoint;
        _this.startSelectedWordInterval = startSelectedWordInterval;
        _this.timerId = setTimeout(function () {
            _this.handler.switchToDefaultState();
            _this.timerId = null;
        }, MouseHandlerParagraphSelectState.TIMEOUT);
        return _this;
    }
    MouseHandlerParagraphSelectState.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.timerId);
    };
    MouseHandlerParagraphSelectState.prototype.onMouseDoubleClick = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onMouseDoubleClick(evt);
    };
    MouseHandlerParagraphSelectState.prototype.onMouseDown = function (evt) {
        if (evt.layoutPoint.equals(this.layoutPoint)) {
            this.handler.control.selection.setSelection(new set_selection_params_1.SetSelectionParams()
                .setInterval(this.handler.control.selection.activeSubDocument.getParagraphByPosition(this.startSelectedWordInterval).interval));
            this.handler.switchToDefaultState();
        }
        else {
            this.handler.switchToDefaultState();
            this.handler.state.onMouseDown(evt);
        }
    };
    MouseHandlerParagraphSelectState.prototype.onMouseUp = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onMouseUp(evt);
    };
    MouseHandlerParagraphSelectState.prototype.onMouseMove = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onMouseMove(evt);
    };
    MouseHandlerParagraphSelectState.prototype.onMouseWheel = function (evt) {
        this.handler.switchToDefaultState();
        this.handler.state.onMouseWheel(evt);
    };
    MouseHandlerParagraphSelectState.prototype.onShortcut = function (shortcutCode) {
        this.handler.switchToDefaultState();
        this.handler.state.onShortcut(shortcutCode);
    };
    MouseHandlerParagraphSelectState.prototype.finish = function () {
        if (this.timerId !== null)
            clearTimeout(this.timerId);
    };
    MouseHandlerParagraphSelectState.TIMEOUT = 450;
    return MouseHandlerParagraphSelectState;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerParagraphSelectState = MouseHandlerParagraphSelectState;
