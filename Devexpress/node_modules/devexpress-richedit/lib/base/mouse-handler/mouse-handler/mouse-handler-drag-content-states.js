"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_layout_details_level_1 = require("../../../core/layout/document-layout-details-level");
var field_1 = require("../../../core/model/fields/field");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var key_1 = require("@devexpress/utils/lib/utils/key");
var client_command_1 = require("../../commands/client-command");
var event_manager_1 = require("../../event-manager");
var mouse_handler_1 = require("./mouse-handler");
var mouse_handler_begin_drag_helper_state_1 = require("./mouse-handler-begin-drag-helper-state");
var mouse_handler_state_base_1 = require("./mouse-handler-state-base");
var MouseHandlerBeginContentDragHelperState = (function (_super) {
    tslib_1.__extends(MouseHandlerBeginContentDragHelperState, _super);
    function MouseHandlerBeginContentDragHelperState(lp, handler, dragState) {
        var _this = _super.call(this, lp, handler, dragState) || this;
        _this.resetSelectionOnMouseUp = true;
        return _this;
    }
    MouseHandlerBeginContentDragHelperState.prototype.onMouseUp = function (evt) {
        _super.prototype.onMouseUp.call(this, evt);
        if (this.cancelOnRightMouseUp() && evt.button & event_manager_1.MouseButton.Right)
            return;
        if (this.resetSelectionOnMouseUp) {
            var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
            htr.correctAsVisibleBox();
            if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
                var selection = this.handler.control.selection;
                var position = htr.getPosition();
                selection.deprecatedSetSelection(position, position, false, -1, true);
            }
        }
    };
    return MouseHandlerBeginContentDragHelperState;
}(mouse_handler_begin_drag_helper_state_1.MouseHandlerBeginDragHelperState));
exports.MouseHandlerBeginContentDragHelperState = MouseHandlerBeginContentDragHelperState;
var MouseHandlerCancellableDragStateBase = (function (_super) {
    tslib_1.__extends(MouseHandlerCancellableDragStateBase, _super);
    function MouseHandlerCancellableDragStateBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MouseHandlerCancellableDragStateBase.prototype.onShortcut = function (shortcutCode) {
        if (shortcutCode === key_1.KeyCode.Esc)
            this.handler.switchToDefaultState();
    };
    MouseHandlerCancellableDragStateBase.prototype.calculateHitTest = function (evt) {
        var htr = this.handler.control.hitTestManager.calculate(evt.layoutPoint, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character, this.handler.control.selection.activeSubDocument);
        htr.correctAsVisibleBox();
        return htr;
    };
    MouseHandlerCancellableDragStateBase.prototype.onMouseMove = function (evt) {
        this.continueDrag(evt);
    };
    MouseHandlerCancellableDragStateBase.prototype.onMouseWheel = function (evt) {
        this.continueDrag(evt);
    };
    MouseHandlerCancellableDragStateBase.prototype.onMouseUp = function (evt) {
        this.commitDrag(evt);
        this.handler.switchToDefaultState();
    };
    MouseHandlerCancellableDragStateBase.prototype.continueDrag = function (_evt) { };
    MouseHandlerCancellableDragStateBase.prototype.commitDrag = function (_evt) { };
    return MouseHandlerCancellableDragStateBase;
}(mouse_handler_state_base_1.MouseHandlerStateBase));
exports.MouseHandlerCancellableDragStateBase = MouseHandlerCancellableDragStateBase;
var MouseHandlerDragContentState = (function (_super) {
    tslib_1.__extends(MouseHandlerDragContentState, _super);
    function MouseHandlerDragContentState(handler) {
        var _this = _super.call(this, handler) || this;
        _this.allowedToDrag = _this.handler.control.commandManager.getCommand(client_command_1.RichEditClientCommand.DragMoveContent).getState().enabled;
        return _this;
    }
    MouseHandlerDragContentState.prototype.start = function () {
        var cursorPointer = this.allowedToDrag ? mouse_handler_1.CursorPointer.Default : mouse_handler_1.CursorPointer.NoDrop;
        this.handler.setCursorPointer(cursorPointer);
    };
    MouseHandlerDragContentState.prototype.finish = function () {
        this.handler.restoreCursorPointer();
        this.handler.boxVisualizerManager.dragCaretVisualizer.hide();
    };
    MouseHandlerDragContentState.prototype.continueDrag = function (evt) {
        if (this.allowedToDrag) {
            var htr = this.calculateHitTest(evt);
            this.handler.boxVisualizerManager.dragCaretVisualizer.show(htr);
        }
    };
    MouseHandlerDragContentState.prototype.commitDrag = function (evt) {
        if (this.allowedToDrag) {
            var htr = this.calculateHitTest(evt);
            if (htr.exactlyDetailLevel > document_layout_details_level_1.DocumentLayoutDetailsLevel.None) {
                var subDocument = this.handler.control.selection.activeSubDocument;
                var interval = new fixed_1.FixedInterval(htr.getPosition(), 0);
                field_1.Field.correctIntervalDueToFields(subDocument, interval);
                var commandId = evt.modifiers & key_1.ModifierKey.Ctrl ? client_command_1.RichEditClientCommand.DragCopyContent : client_command_1.RichEditClientCommand.DragMoveContent;
                this.handler.control.commandManager.getCommand(commandId).execute(this.handler.control.commandManager.isPublicApiCall, interval.start);
            }
        }
    };
    return MouseHandlerDragContentState;
}(MouseHandlerCancellableDragStateBase));
exports.MouseHandlerDragContentState = MouseHandlerDragContentState;
