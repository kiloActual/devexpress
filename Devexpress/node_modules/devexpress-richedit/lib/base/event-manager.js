"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var text_buffer_changed_1 = require("../core/model/changes/sub-document/text/text-buffer-changed");
var insert_text_history_item_1 = require("../core/model/history/items/insert-text-history-item");
var history_item_state_1 = require("../core/model/history/states/history-item-state");
var history_item_state_object_1 = require("../core/model/history/states/history-item-state-object");
var insert_text_manipulator_params_1 = require("../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../core/model/runs/run-type");
var sub_document_1 = require("../core/model/sub-document");
var log_1 = require("../core/rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../core/rich-utils/debug/logger/base-logger/log-source");
var browser_1 = require("@devexpress/utils/lib/browser");
var errors_1 = require("@devexpress/utils/lib/errors");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var key_1 = require("@devexpress/utils/lib/utils/key");
var search_1 = require("@devexpress/utils/lib/utils/search");
var client_command_1 = require("./commands/client-command");
var command_base_1 = require("./commands/command-base");
var i_rich_edit_core_1 = require("./interfaces/i-rich-edit-core");
var selection_history_item_1 = require("./model/history/selection/selection-history-item");
var mouse_handler_1 = require("./mouse-handler/mouse-handler/mouse-handler");
var touch_handler_1 = require("./mouse-handler/touch-handler/touch-handler");
var log_obj_to_str_canvas_1 = require("./rich-utils/debug/logger/canvas-logger/log-obj-to-str-canvas");
var rich_layout_utils_1 = require("./rich-utils/layout/rich-layout-utils");
var MouseButton;
(function (MouseButton) {
    MouseButton[MouseButton["None"] = 0] = "None";
    MouseButton[MouseButton["Left"] = 1] = "Left";
    MouseButton[MouseButton["Right"] = 2] = "Right";
    MouseButton[MouseButton["Middle"] = 4] = "Middle";
})(MouseButton = exports.MouseButton || (exports.MouseButton = {}));
var EventManager = (function () {
    function EventManager(control, boxVisualizerManager) {
        this.moveLocked = false;
        this.shouldPreventContextMenuEvent = true;
        this.accumulatedText = "";
        this.accumulatedTextInsertId = null;
        this.accumulatedTextMaxLength = browser_1.Browser.Chrome ? 3 : 9;
        this.control = control;
        this.mouseHandler = new mouse_handler_1.MouseHandler(control, boxVisualizerManager);
        this.touchHandler = new touch_handler_1.TouchHandler(control, boxVisualizerManager);
    }
    Object.defineProperty(EventManager.prototype, "mouseWheelEvent", {
        set: function (val) {
            this.mouseHandler.mouseWheelEvent = val;
            this.touchHandler.mouseWheelEvent = val;
        },
        enumerable: true,
        configurable: true
    });
    EventManager.prototype.dispose = function () {
        clearTimeout(this.accumulatedTextInsertId);
        clearTimeout(this.lockMouseMoveTimerId);
        clearTimeout(this.onMouseUpTimerId);
    };
    EventManager.prototype.onShortcut = function (shortcutCode) {
        if (this.accumulatedText.length)
            this.insertFunc();
        this.control.shortcutManager.processShortcut(shortcutCode);
        this.mouseHandler.onShortcut(shortcutCode);
        if (enum_1.EnumUtils.isAnyOf(shortcutCode, key_1.KeyCode.Enter, key_1.KeyCode.Tab, key_1.KeyCode.Space) && this.control.selection.lastSelectedInterval.start > 0)
            this.control.autoCorrectService.performAutoCorrect();
    };
    EventManager.prototype.onMouseDown = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onMouseDown", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        if (!this.control.clientSideEvents.raisePointerDown(evt.mouseEvent)) {
            this.lockMouseMove();
            this.mouseHandler.onMouseDown(evt);
        }
    };
    EventManager.prototype.onMouseMove = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onMouseMove", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        if (this.moveLocked)
            return;
        this.mouseHandler.onMouseMove(evt);
    };
    EventManager.prototype.onMouseUp = function (evt) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.EventManager, "onMouseUp", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        var handled = false;
        if (evt.layoutPoint)
            handled = this.control.clientSideEvents.raisePointerUp(evt.mouseEvent);
        if (!handled) {
            this.lockMouseMove();
            this.mouseHandler.onMouseUp(evt);
            if (evt.layoutPoint) {
                if (browser_1.Browser.TouchUI)
                    this.control.inputController.setPosition(evt.absolutePoint.x + 2, evt.absolutePoint.y + 2);
                this.onMouseUpTimerId = setTimeout(function () { return _this.control.focusManager.captureFocus(); }, 0);
            }
        }
    };
    EventManager.prototype.onTouchStart = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onTouchStart", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        if (!this.control.clientSideEvents.raisePointerDown(evt.mouseEvent))
            this.touchHandler.onTouchStart(evt);
    };
    EventManager.prototype.onTouchEnd = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onTouchEnd", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        var handled = false;
        if (evt.layoutPoint)
            handled = this.control.clientSideEvents.raisePointerUp(evt.mouseEvent);
        if (!handled)
            this.touchHandler.onTouchEnd(evt);
    };
    EventManager.prototype.onTouchMove = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onTouchMove", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        return this.touchHandler.onTouchMove(evt);
    };
    EventManager.prototype.onDoubleTap = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onDoubleTap", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        this.touchHandler.onDoubleTap(evt);
    };
    EventManager.prototype.onGestureStart = function (evt) {
        this.touchHandler.onGestureStart(evt);
    };
    EventManager.prototype.onMouseDblClick = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onMouseDoubleClick", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        this.mouseHandler.onMouseDoubleClick(evt);
        this.control.inputController.setPosition(evt.absolutePoint.x, evt.absolutePoint.y);
    };
    EventManager.prototype.onMouseWheel = function (evt) {
        log_1.Log.print(log_source_1.LogSource.EventManager, "onMouseWheel", log_obj_to_str_canvas_1.LogObjToStrCanvas.richMouseEvent(evt));
        this.mouseHandler.onMouseWheel(evt);
    };
    EventManager.prototype.onText = function (text, isUpdated) {
        var _this = this;
        if (isUpdated)
            this.modifyLastInsertedSymbol(text);
        else {
            if (this.control.commandManager.clipboardTimerId === null) {
                this.accumulatedText += text;
                if (this.accumulatedTextInsertId) {
                    clearTimeout(this.accumulatedTextInsertId);
                    this.accumulatedTextInsertId = null;
                }
                if (this.accumulatedText.length > this.accumulatedTextMaxLength)
                    this.insertFunc();
                else
                    this.accumulatedTextInsertId = setTimeout(function () { return _this.insertFunc.apply(_this); }, 1);
            }
        }
    };
    EventManager.prototype.onTextReplace = function (text, length) {
        if (length != undefined)
            this.modifyLastText(text, length);
        else
            rich_layout_utils_1.RichLayoutUtils.modifyTextUnderCursor(this.control, text);
    };
    EventManager.prototype.modifyLastText = function (text, length) {
        if (length === 0) {
            this.control.beginUpdate();
            this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText).execute(this.control.commandManager.isPublicApiCall, new command_base_1.CommandSimpleOptions(this.control, text));
            this.control.endUpdate();
            return;
        }
        var endInterval = this.control.selection.lastSelectedInterval.start;
        var startInterval = endInterval - length;
        var intervalForModify = new fixed_1.FixedInterval(startInterval, endInterval - startInterval);
        var insertTextHistoryItem = this.control.modelManager.modelManipulator.text.getLastModifiableHistoryItem(function (hi) { return hi instanceof insert_text_history_item_1.InsertTextHistoryItem; });
        if (!insertTextHistoryItem)
            return false;
        var setSelectionHistoryItem = this.control.modelManager.modelManipulator.text.getLastModifiableHistoryItem(function (hi) { return hi instanceof selection_history_item_1.SelectionHistoryItem; });
        this.control.modelManager.modelManipulator.range.removeIntervalWithoutHistory(insertTextHistoryItem.params.subDocPos.subDocument, intervalForModify, false);
        this.control.modelManager.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(insertTextHistoryItem.params.subDocPos.subDocument, intervalForModify.start), insertTextHistoryItem.params.charPropsBundle, run_type_1.RunType.TextRun, text));
        setSelectionHistoryItem.newState.intervalsInfo.intervals[0].start = startInterval + text.length;
        insertTextHistoryItem.params.text = text;
        var newPositionSelection = setSelectionHistoryItem.newState.intervalsInfo.intervals[0].start;
        this.control.selection.changeState(function (newState) { return newState.setPosition(newPositionSelection); });
        this.control.commandManager.lastTextInsertDate = new Date(0);
    };
    EventManager.prototype.modifyLastInsertedSymbol = function (symbol) {
        if (symbol.length !== 1)
            throw new Error(errors_1.Errors.InternalException);
        var insertTextHistoryInfo = this.control.modelManager.modelManipulator.text.getLastModifiableHistoryItem(function (hi) { return hi instanceof insert_text_history_item_1.InsertTextHistoryItem; });
        if (!insertTextHistoryInfo)
            throw new Error(errors_1.Errors.InternalException);
        var textLength = insertTextHistoryInfo.params.text.length;
        insertTextHistoryInfo.params.text = insertTextHistoryInfo.params.text.substr(0, textLength - 1) + symbol;
        this.updateSymbol(insertTextHistoryInfo.params.subDocPos.subDocument, insertTextHistoryInfo.params.subDocPos.position + textLength - 1, symbol);
    };
    EventManager.prototype.updateSymbol = function (subDocument, position, symbol) {
        var state = new history_item_state_1.HistoryItemIntervalState();
        var chunkIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.chunks, function (c) { return c.startLogPosition.value; }, position);
        var chunk = subDocument.chunks[chunkIndex];
        var chunkRelativePosition = position - chunk.startLogPosition.value;
        var oldSymbol = chunk.textBuffer.substr(chunkRelativePosition, 1);
        state.register(new history_item_state_object_1.HistoryItemTextBufferStateObject(position, symbol));
        chunk.textBuffer = chunk.textBuffer.substr(0, chunkRelativePosition) + symbol + chunk.textBuffer.substr(chunkRelativePosition + 1);
        this.control.modelManager.modelManipulator.notifyModelChanged(new text_buffer_changed_1.TextBufferChangedSubDocumentChange(subDocument.id, state));
        return oldSymbol;
    };
    EventManager.prototype.insertFunc = function () {
        var insertCommand = this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.InsertText);
        var textWasInserted = insertCommand.execute(this.control.commandManager.isPublicApiCall, this.accumulatedText);
        this.accumulatedText = "";
        this.accumulatedTextInsertId = -1;
        if (textWasInserted)
            this.control.autoCorrectService.performAutoCorrect();
    };
    EventManager.prototype.onFocusIn = function () {
        if (this.control.readOnly === i_rich_edit_core_1.ReadOnlyMode.None) {
            if (!this.isFocused())
                this.control.clientSideEvents.raiseGotFocus();
            this.control.focusManager.isInFocus = true;
        }
    };
    EventManager.prototype.onFocusOut = function () {
        if (this.isFocused())
            this.control.clientSideEvents.raiseLostFocus();
        this.control.focusManager.isInFocus = false;
    };
    EventManager.prototype.isFocused = function () {
        return this.control.focusManager.isInFocus;
    };
    EventManager.prototype.lockMouseMove = function () {
        var _this = this;
        this.moveLocked = true;
        this.lockMouseMoveTimerId = setTimeout(function () { return _this.moveLocked = false; }, 0);
    };
    return EventManager;
}());
exports.EventManager = EventManager;
var RichMouseEvent = (function () {
    function RichMouseEvent(evt, layoutPoint, source, scrollTop, scrollLeft) {
        this.layoutPoint = layoutPoint;
        this.absolutePoint = new point_1.Point(evt_1.EvtUtils.getEventX(evt), evt_1.EvtUtils.getEventY(evt));
        this.scroll = new point_1.Point(scrollLeft, scrollTop);
        this.modifiers = key_1.KeyUtils.getKeyModifiers(evt);
        this.button = this.isLeftButtonPressed(evt) ? MouseButton.Left : MouseButton.Right;
        this.middleButtonPressed = !!(evt.buttons & MouseButton.Middle);
        this.source = source;
        this.mouseEvent = evt;
    }
    RichMouseEvent.prototype.isLeftButtonPressed = function (evt) {
        return !browser_1.Browser.MSTouchUI ? evt_1.EvtUtils.isLeftButtonPressed(evt) : evt.button != 2;
    };
    return RichMouseEvent;
}());
exports.RichMouseEvent = RichMouseEvent;
