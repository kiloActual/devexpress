"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../core/model/changes/enums");
var rich_utils_1 = require("../core/model/rich-utils");
var sub_document_1 = require("../core/model/sub-document");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var change_base_1 = require("../core/model/changes/change-base");
var PublicApiEventType;
(function (PublicApiEventType) {
    PublicApiEventType[PublicApiEventType["None"] = 0] = "None";
    PublicApiEventType[PublicApiEventType["DocumentLoaded"] = 1] = "DocumentLoaded";
    PublicApiEventType[PublicApiEventType["ModelChanged"] = 2] = "ModelChanged";
    PublicApiEventType[PublicApiEventType["SelectionChanged"] = 3] = "SelectionChanged";
    PublicApiEventType[PublicApiEventType["DocumentFormatted"] = 4] = "DocumentFormatted";
})(PublicApiEventType || (PublicApiEventType = {}));
var PublicEvent = (function () {
    function PublicEvent(type, action, change) {
        this.type = type;
        this.action = action;
        this.change = change;
    }
    return PublicEvent;
}());
var GlobalEventDispatcher = (function (_super) {
    tslib_1.__extends(GlobalEventDispatcher, _super);
    function GlobalEventDispatcher(rich, onModelChanged) {
        var _this = _super.call(this) || this;
        _this.deferredEvents = [];
        _this.locked = false;
        _this.rich = rich;
        _this.onModelChanged = onModelChanged;
        return _this;
    }
    GlobalEventDispatcher.prototype.addDeferredEvent = function (e, change, type) {
        if (type === void 0) { type = PublicApiEventType.None; }
        if (!this.rich.commandManager.isPublicApiCall || this.rich.modelManager.richOptions.control.raiseClientEventsOnModificationsViaAPI) {
            this.deferredEvents.push(new PublicEvent(type, e, change));
            this.handleDeferredEvents();
        }
    };
    GlobalEventDispatcher.prototype.isCharacterPropertiesChangedType = function (type) {
        return type == enums_1.ModelChangeType.CharacterPropertiesChanged || type == enums_1.ModelChangeType.CharacterFormattingChanged;
    };
    GlobalEventDispatcher.prototype.equals = function (source, target) {
        if (!source || !target)
            return false;
        if (this.isCharacterPropertiesChangedType(source.type) && this.isCharacterPropertiesChangedType(target.type)) {
            var sourceChange = source;
            var targetChange = target;
            return sourceChange.subDocumentId == targetChange.subDocumentId && sourceChange.newState.interval.equals(targetChange.newState.interval);
        }
        return false;
    };
    GlobalEventDispatcher.prototype.handleDeferredEvents = function () {
        var _this = this;
        if (!this.isLocked() && (!this.rich.commandManager.isPublicApiCall || this.rich.modelManager.richOptions.control.raiseClientEventsOnModificationsViaAPI)) {
            var singleEvents_1 = [];
            var occuredFormattingEvents_1 = [];
            var prevInsertingEvent_1 = null;
            this.deferredEvents = list_1.ListUtils.reducedMap(this.deferredEvents, function (e) {
                if (e.type == PublicApiEventType.None) {
                    var change = e.change;
                    if (change) {
                        if (_this.isCharacterPropertiesChangedType(change.type)) {
                            if (list_1.ListUtils.indexBy(occuredFormattingEvents_1, function (oe) { return _this.equals(oe.change, e.change); }) < 0)
                                occuredFormattingEvents_1.push(e);
                            else
                                return null;
                        }
                        if (change instanceof change_base_1.ContentInsertedSubDocumentChange) {
                            if (_this.tryAppendInsertingEvent(prevInsertingEvent_1, change))
                                return null;
                            else
                                prevInsertingEvent_1 = e;
                        }
                    }
                    return e;
                }
                singleEvents_1.push(e);
                return null;
            });
            list_1.ListUtils.addListOnTail(this.deferredEvents, list_1.ListUtils.unique(singleEvents_1, function (a, b) {
                return a.type - b.type;
            }));
            if (!this.locked) {
                this.locked = true;
                for (var action = void 0; action = this.deferredEvents.shift();)
                    action.action();
                this.locked = false;
            }
        }
    };
    GlobalEventDispatcher.prototype.tryAppendInsertingEvent = function (prevEvent, modelChange) {
        var _this = this;
        if (prevEvent) {
            var prevChange_1 = prevEvent.change;
            if (prevChange_1.canContinuesWith(modelChange)) {
                prevChange_1.length += modelChange.length;
                prevEvent.action = function () {
                    return _this.rich.clientSideEvents.raiseContentInserted(prevChange_1.subDocumentId, new fixed_1.FixedInterval(prevChange_1.position, prevChange_1.length));
                };
                return true;
            }
        }
        return false;
    };
    GlobalEventDispatcher.prototype.onUpdateUnlocked = function (_occurredEvents) {
        this.handleDeferredEvents();
    };
    GlobalEventDispatcher.prototype.processModelChanged = function () {
        var _this = this;
        this.addDeferredEvent(function () { return _this.onModelChanged(); }, null, PublicApiEventType.ModelChanged);
    };
    GlobalEventDispatcher.prototype.NotifyDocumentLoaded = function () {
        var _this = this;
        this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseDocumentLoaded(); }, null, PublicApiEventType.DocumentLoaded);
    };
    GlobalEventDispatcher.prototype.NotifyPagesReady = function (_pageChanges) { };
    GlobalEventDispatcher.prototype.NotifyFullyFormatted = function (pageCount) {
        var _this = this;
        this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseDocumentFormatted(pageCount); }, null, PublicApiEventType.DocumentFormatted);
    };
    GlobalEventDispatcher.prototype.NotifySelectionChanged = function (selection) {
        var _this = this;
        if (selection.prevState.intervalsInfo.subDocument != selection.currState.intervalsInfo.subDocument)
            this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseActiveSubDocumentChanged(); }, null, PublicApiEventType.SelectionChanged);
        this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseSelectionChanged(); }, null, PublicApiEventType.SelectionChanged);
    };
    GlobalEventDispatcher.prototype.NotifyScrollPositionChanged = function () { };
    GlobalEventDispatcher.prototype.modelChanged = function (change) {
        var _this = this;
        switch (change.type) {
            case enums_1.ModelChangeType.PageColor:
            case enums_1.ModelChangeType.DefaultTabWidth:
            case enums_1.ModelChangeType.DifferentOddAndEvenPages:
            case enums_1.ModelChangeType.HeaderFooterCreated:
            case enums_1.ModelChangeType.HeaderFooterIndexChanged:
            case enums_1.ModelChangeType.SectionFormattingChanged:
            case enums_1.ModelChangeType.AbstractNumberingListAdded:
            case enums_1.ModelChangeType.AbstractNumberingListDeleted:
            case enums_1.ModelChangeType.NumberingListAdded:
            case enums_1.ModelChangeType.NumberingListDeleted:
            case enums_1.ModelChangeType.ListLevelPropertyChanged:
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged:
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged:
            case enums_1.ModelChangeType.IOverrideListLevelChanged:
            case enums_1.ModelChangeType.BookmarkCreated:
            case enums_1.ModelChangeType.BookmarkDeleted:
            case enums_1.ModelChangeType.TabInserted:
            case enums_1.ModelChangeType.TabDeleted:
            case enums_1.ModelChangeType.LoadPicturesInfo:
            case enums_1.ModelChangeType.InlinePicturesUpdated:
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged:
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged:
            case enums_1.ModelChangeType.FieldInserted:
            case enums_1.ModelChangeType.FieldDeleted:
            case enums_1.ModelChangeType.HyperlinkInfoChanged:
            case enums_1.ModelChangeType.FieldsShowCodeChanged:
            case enums_1.ModelChangeType.TextBufferChanged:
            case enums_1.ModelChangeType.ParagraphAndCharacterMergedPropertiesReset:
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged:
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged:
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged:
            case enums_1.ModelChangeType.ShapeChanged:
            case enums_1.ModelChangeType.ShapePropertyChanged:
            case enums_1.ModelChangeType.CreateStyleLink:
            case enums_1.ModelChangeType.DeleteStyleLink:
            case enums_1.ModelChangeType.CharacterStyleApplied:
            case enums_1.ModelChangeType.ParagraphStyleApplied:
            case enums_1.ModelChangeType.TableStyleChanged:
            case enums_1.ModelChangeType.ParagraphNumberingListChanged:
            case enums_1.ModelChangeType.TableCreated:
            case enums_1.ModelChangeType.TableStartPositionShifted:
            case enums_1.ModelChangeType.TableCellPropertyChanged:
            case enums_1.ModelChangeType.TablePropertyChanged:
            case enums_1.ModelChangeType.TableRowPropertyChanged:
            case enums_1.ModelChangeType.TableCellSplittedHorizontally:
            case enums_1.ModelChangeType.TableCellMergedHorizontally:
            case enums_1.ModelChangeType.TableRowInserted:
            case enums_1.ModelChangeType.TableRowRemoved:
            case enums_1.ModelChangeType.TableCellRemoved:
            case enums_1.ModelChangeType.TableCellInserted: {
                this.processModelChanged();
                break;
            }
            case enums_1.ModelChangeType.SectionMerged: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentRemoved(sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID, change.removedInterval, rich_utils_1.RichUtils.specialCharacters.SectionMark); }, change);
                break;
            }
            case enums_1.ModelChangeType.ParagraphMerged: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentRemoved(change.subDocumentId, change.removedInterval, rich_utils_1.RichUtils.specialCharacters.ParagraphMark); }, change);
                break;
            }
            case enums_1.ModelChangeType.InlinePictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureInserted:
            case enums_1.ModelChangeType.ParagraphInserted:
            case enums_1.ModelChangeType.SectionInserted:
            case enums_1.ModelChangeType.AnchoredTextBoxInserted: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentInserted(change.subDocumentId, new fixed_1.FixedInterval(change.position, 1)); }, change);
                break;
            }
            case enums_1.ModelChangeType.SimpleRunInserted: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentInserted(change.subDocumentId, new fixed_1.FixedInterval(change.position, change.length)); }, change);
                break;
            }
            case enums_1.ModelChangeType.AnchorObjectRemoved: {
                break;
            }
            case enums_1.ModelChangeType.IntervalRemoved: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentRemoved(change.subDocumentId, change.interval, change.removedText); }, change);
                break;
            }
            case enums_1.ModelChangeType.CharacterFormattingChanged: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseCharacterPropertiesChanged(change.subDocumentId, change.newState.interval); }, change);
                break;
            }
            case enums_1.ModelChangeType.CharacterPropertiesChanged: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseCharacterPropertiesChanged(change.subDocumentId, change.newState.interval); }, change);
                break;
            }
            case enums_1.ModelChangeType.ParagraphFormattingChanged: {
                this.processModelChanged();
                var paragraphIndexs = this.rich.modelManager.model.subDocuments[change.subDocumentId].getParagraphsIndices(change.newState.interval);
                var _loop_1 = function (i) {
                    var parInd = i;
                    this_1.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseParagraphPropertiesChanged(change.subDocumentId, parInd); }, change);
                };
                var this_1 = this;
                for (var i = paragraphIndexs.start; i < paragraphIndexs.end; i++) {
                    _loop_1(i);
                }
                break;
            }
            case enums_1.ModelChangeType.ParagraphPropertiesChanged: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseParagraphPropertiesChanged(change.subDocumentId, change.paragraphIndex); }, change);
                break;
            }
            case enums_1.ModelChangeType.TableRemoved: {
                this.processModelChanged();
                this.addDeferredEvent(function () { return _this.rich.clientSideEvents.raiseContentRemoved(change.subDocumentId, fixed_1.FixedInterval.fromPositions(change.startPosition, change.endPosition), change.removedText); }, change);
                break;
            }
            case enums_1.ModelChangeType.DocumentProtectionChanged: {
                this.processModelChanged();
                break;
            }
            case enums_1.ModelChangeType.RangePermissionsChanged: {
                this.processModelChanged();
                break;
            }
            case enums_1.ModelChangeType.RangePermissionsPropertiesChanged: {
                this.processModelChanged();
                break;
            }
        }
    };
    return GlobalEventDispatcher;
}(batch_updatable_1.BatchUpdatableObject));
exports.GlobalEventDispatcher = GlobalEventDispatcher;
