"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../core/layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../core/layout/document-layout-details-level");
var layout_point_1 = require("../core/layout/layout-point");
var create_range_copy_operation_1 = require("../core/model/manipulators/range/create-range-copy-operation");
var control_1 = require("../core/model/options/control");
var paragraph_properties_1 = require("../core/model/paragraph/paragraph-properties");
var rich_utils_1 = require("../core/model/rich-utils");
var html_converter_1 = require("../core/rich-utils/html-converter");
var browser_1 = require("@devexpress/utils/lib/browser");
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var evt_1 = require("@devexpress/utils/lib/utils/evt");
var key_1 = require("@devexpress/utils/lib/utils/key");
var popup_1 = require("@devexpress/utils/lib/utils/popup");
var string_1 = require("@devexpress/utils/lib/utils/string");
var clipboard_content_inserter_1 = require("./clipboard-content-inserter");
var client_command_1 = require("./commands/client-command");
var html_export_1 = require("./html-export");
var i_rich_edit_core_1 = require("./interfaces/i-rich-edit-core");
exports.INPUT_CLASS_NAME = "dxreInputTarget";
var EMPTY_KEYCODE = 229;
var TAB_KEYCODE = 9;
var IDEOGRAPHIC_SPACE_CHARCODE = 12288;
var InputEditorBase = (function () {
    function InputEditorBase(control, eventManager, parent) {
        this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
        this.control = control;
        this.eventManager = eventManager;
        this.canInsertTextOnInputEvent = this.canUseInputEvent();
        this.createHierarchy(parent);
        this.initialize();
        this.isIME = false;
        this.inputWithAlt = false;
    }
    InputEditorBase.prototype.dispose = function () {
        this.evtHandlersHolder.removeAllListeners();
        clearTimeout(this.keyPressTimerId);
        clearTimeout(this.imeTimerId);
        clearTimeout(this.onInputTimerId);
        clearTimeout(this.onBlurTimerId);
        clearTimeout(this.onKeyUpTimerId);
    };
    InputEditorBase.prototype.initialize = function () {
        this.initializeIfNotReadOnly();
        this.initEvents();
        this.prevKeyCode = EMPTY_KEYCODE;
    };
    InputEditorBase.prototype.initializeIfNotReadOnly = function () {
        if ((this.control.readOnly !== i_rich_edit_core_1.ReadOnlyMode.Persistent || this.control.modelManager.clientMode) && !this.initializedIfNotReadOnly) {
            this.initializedIfNotReadOnly = true;
            this.initializeIfNotReadOnlyCore();
        }
    };
    InputEditorBase.prototype.initializeIfNotReadOnlyCore = function () {
    };
    InputEditorBase.prototype.initEvents = function () {
        var _this = this;
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "keydown", this.onKeyDown.bind(this));
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "keyup", function (evt) { return _this.onKeyUpTimerId = setTimeout(function () { return _this.onKeyUp(evt); }, 0); });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "keypress", this.onKeyPress.bind(this));
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "focus", this.onFocus.bind(this));
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "blur", function (evt) { return _this.onBlurTimerId = setTimeout(function () { return _this.onBlur(evt); }, 10); });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "contextmenu", this.onContextMenu.bind(this));
        if (this.canInsertTextOnInputEvent)
            this.evtHandlersHolder.addListener(this.getEditableDocument(), "input", function (evt) { return _this.onInput(evt); });
    };
    InputEditorBase.prototype.createHierarchy = function (parent) {
        var _this = this;
        this.inputElement = this.createInputElement();
        this.inputElement.className = exports.INPUT_CLASS_NAME;
        parent.appendChild(this.inputElement);
        this.createHierarchyCore();
        this.inputElement.addEventListener("load", function () { return _this.recreateIfNeeded(); }, true);
    };
    InputEditorBase.prototype.createHierarchyCore = function () { };
    InputEditorBase.prototype.createInputElement = function () {
        return null;
    };
    InputEditorBase.prototype.onInput = function (evt) {
        var _this = this;
        if (this.canInsertTextOnInputEvent)
            this.onInputTimerId = setTimeout(function () { return _this.onTextInput(evt.data); }, 0);
    };
    InputEditorBase.prototype.onBlur = function (_evt) {
        var targetElement = document.activeElement;
        if (!targetElement || !this.control.isRibbon(targetElement) || dom_1.DomUtils.isInteractiveControl(targetElement))
            this.eventManager.onFocusOut();
        this.clearInputElement();
    };
    InputEditorBase.prototype.onFocus = function () {
        this.selectEditableDocumentContent();
        this.eventManager.onFocusIn();
    };
    InputEditorBase.prototype.onKeyDown = function (evt) {
        var _this = this;
        if (!this.control.clientSideEvents.raiseKeyDown(evt)) {
            if (!this.isIME) {
                evt = this.getNormalizedEvent(evt);
                var keyCode = key_1.KeyUtils.getEventKeyCode(evt);
                this.needProcessShortcut = !keyCode || keyCode == EMPTY_KEYCODE;
                this.canInsertTextOnInputEvent = this.canUseInputEvent();
                if (evt.altKey || evt.ctrlKey || evt.metaKey)
                    this.canInsertTextOnInputEvent = false;
                if (evt.altKey)
                    if (keyCode >= key_1.KeyCode.Numpad_0 && keyCode <= key_1.KeyCode.Numpad_9)
                        this.inputWithAlt = true;
                    else if (keyCode != 18)
                        this.inputWithAlt = false;
                if (!this.needProcessShortcut) {
                    var isShortcut = this.isProcessShortcut(keyCode) && this.onShortcut(evt);
                    if (isShortcut || (keyCode === TAB_KEYCODE && !this.control.modelManager.richOptions.control.acceptsTab)) {
                        this.prevKeyCode = keyCode;
                        return;
                    }
                }
                if (!this.canInsertTextOnInputEvent && !this.control.isTouchMode())
                    this.imeTimerId = setTimeout(function () {
                        if (!_this.isIME)
                            _this.onTextInput(undefined);
                    }, 0);
                this.prevKeyCode = keyCode;
            }
        }
        else
            evt_1.EvtUtils.preventEvent(evt);
    };
    InputEditorBase.prototype.isProcessShortcut = function (keyCode) {
        return !(keyCode == key_1.KeyCode.Space && this.prevKeyCode == key_1.KeyCode.SingleQuote && !browser_1.Browser.MacOSPlatform);
    };
    InputEditorBase.prototype.onKeyUp = function (evt) {
        this.control.clientSideEvents.raiseKeyUp(evt);
        if (this.needProcessShortcut) {
            this.onShortcut(evt);
        }
    };
    InputEditorBase.prototype.onKeyPress = function (evt) {
        var _this = this;
        if (!evt.altKey) {
            if (this.inputWithAlt)
                this.keyPressTimerId = setTimeout(function () { return _this.onTextInput(undefined); }, 0);
            this.inputWithAlt = false;
        }
    };
    InputEditorBase.prototype.onContextMenu = function (evt) {
        popup_1.PopupUtils.preventContextMenu(evt);
        evt.preventDefault();
        this.control.popupMenuManager.showByKey();
    };
    InputEditorBase.prototype.onShortcut = function (evt) {
        var shortcutCode = this.getShortcutCode(evt);
        if (!this.control.shortcutManager.isKnownShortcut(shortcutCode))
            return false;
        this.onShortcutCore(evt, shortcutCode);
        return true;
    };
    InputEditorBase.prototype.onShortcutCore = function (evt, shortcutCode) {
        if (!browser_1.Browser.WebKitTouchUI)
            this.clearInputElement();
        this.selectEditableDocumentContent();
        if (!this.control.shortcutManager.isClipboardCommandShortcut(shortcutCode) && !browser_1.Browser.MacOSMobilePlatform)
            evt_1.EvtUtils.preventEvent(evt);
        this.eventManager.onShortcut(shortcutCode);
    };
    InputEditorBase.prototype.onText = function (text, currentText, isUpdated) {
        if (!this.canInsertTextOnInputEvent)
            this.needProcessShortcut = false;
        this.eventManager.onText(text, isUpdated);
        this.previousText = currentText;
    };
    InputEditorBase.prototype.onTextReplace = function (_text, currentText) {
        this.previousText = currentText;
    };
    InputEditorBase.prototype.onTextInput = function (_data) {
        var text = this.getEditableDocumentText();
        if (text) {
            if (this.previousText) {
                var previousText = this.previousText;
                var previousTextLastIndex = previousText.length - 1;
                if (text[previousTextLastIndex] && text[previousTextLastIndex] != previousText[previousTextLastIndex])
                    this.onText(text[previousTextLastIndex], text, true);
                var insertedCharacterCount = text.length - previousText.length;
                if (insertedCharacterCount > 0) {
                    for (var i = text.length - insertedCharacterCount; i < text.length; i++)
                        this.onText(text[i], text, false);
                }
            }
            else
                this.onText(text, text, false);
        }
    };
    InputEditorBase.prototype.tryObtainCodeFromChar = function (char) {
        if (char == "\n")
            return key_1.KeyCode.Enter;
        return EMPTY_KEYCODE;
    };
    InputEditorBase.prototype.captureFocus = function () {
    };
    InputEditorBase.prototype.canUseInputEvent = function () {
        return browser_1.Browser.Firefox && browser_1.Browser.MajorVersion >= 14 || browser_1.Browser.WebKitTouchUI;
    };
    InputEditorBase.prototype.getEditableDocumentText = function () {
        return dom_1.DomUtils.getInnerText(this.getEditableTextOwner()).replace(/(\r\n|\n|\r)/gm, "");
    };
    InputEditorBase.prototype.getEditableTextOwner = function () {
        return null;
    };
    InputEditorBase.prototype.setPosition = function (left, top) {
        this.inputElement.style.left = left + "px";
        this.inputElement.style.top = top + "px";
    };
    InputEditorBase.prototype.clearInputElement = function () {
        this.previousText = "";
    };
    InputEditorBase.prototype.setEditableDocumentContent = function (_content) {
        this.previousText = "";
    };
    InputEditorBase.prototype.setEditableDocumentCursorPosition = function (_cursorPosition) { };
    InputEditorBase.prototype.selectEditableDocumentContent = function () {
        var _a;
        this.control.barHolder.updateItemsState((_a = {},
            _a[client_command_1.RichEditClientCommand.CopySelection] = true,
            _a[client_command_1.RichEditClientCommand.PasteSelection] = true,
            _a[client_command_1.RichEditClientCommand.CutSelection] = true,
            _a));
    };
    InputEditorBase.prototype.getEditableDocumentContent = function () {
        return "";
    };
    InputEditorBase.prototype.getNormalizedEvent = function (evt) {
        if (browser_1.Browser.IE && browser_1.Browser.MajorVersion < 9) {
            var eventCopy = {};
            for (var i in evt)
                eventCopy[i] = evt[i];
            return eventCopy;
        }
        return evt;
    };
    InputEditorBase.prototype.recreateIfNeeded = function () { };
    InputEditorBase.prototype.getShortcutCode = function (evt) {
        var keyCode = key_1.KeyUtils.getEventKeyCode(evt);
        var modifiers = 0;
        if (evt.altKey)
            modifiers |= key_1.ModifierKey.Alt;
        if (evt.ctrlKey)
            modifiers |= key_1.ModifierKey.Ctrl;
        if (evt.shiftKey)
            modifiers |= key_1.ModifierKey.Shift;
        if (evt.metaKey && browser_1.Browser.MacOSPlatform)
            modifiers |= key_1.ModifierKey.Meta;
        return modifiers | keyCode;
    };
    return InputEditorBase;
}());
exports.InputEditorBase = InputEditorBase;
var DivInputEditor = (function (_super) {
    tslib_1.__extends(DivInputEditor, _super);
    function DivInputEditor(control, eventManager, parent) {
        return _super.call(this, control, eventManager, parent) || this;
    }
    DivInputEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.clearInputTimerId);
    };
    DivInputEditor.prototype.initializeIfNotReadOnlyCore = function () {
        this.inputElement.contentEditable = "true";
        this.clearInputElement();
    };
    DivInputEditor.prototype.setPosition = function (left, top) {
        _super.prototype.setPosition.call(this, left, top);
    };
    DivInputEditor.prototype.createInputElement = function () {
        var element = document.createElement("DIV");
        if (browser_1.Browser.Safari)
            element.autocapitalize = "off";
        return element;
    };
    DivInputEditor.prototype.onKeyDown = function (evt) {
        this.handled = false;
        _super.prototype.onKeyDown.call(this, evt);
        this.canSkipInputEvent = true;
    };
    DivInputEditor.prototype.onKeyUp = function (evt) {
        _super.prototype.onKeyUp.call(this, evt);
        this.control.owner.hidePopupMenu();
        this.onTextInput(undefined);
    };
    DivInputEditor.prototype.onInput = function (evt) {
        if (!this.canSkipInputEvent) {
            this.handled = false;
            _super.prototype.onInput.call(this, evt);
        }
        this.control.owner.hidePopupMenu();
        this.canSkipInputEvent = false;
    };
    DivInputEditor.prototype.onFocus = function () {
        if (!this.canSkipFocusAndBlur)
            _super.prototype.onFocus.call(this);
        this.canSkipFocusAndBlur = false;
    };
    DivInputEditor.prototype.onBlur = function (evt) {
        if (!this.canSkipFocusAndBlur)
            _super.prototype.onBlur.call(this, evt);
    };
    DivInputEditor.prototype.onShortcutCore = function (evt, shortcutCode) {
        var _this = this;
        if (shortcutCode !== key_1.KeyCode.Space || !browser_1.Browser.MacOSMobilePlatform) {
            this.handled = true;
            this.clearInputTimerId = setTimeout(function () { return _this.clearInputElement(); }, 0);
            _super.prototype.onShortcutCore.call(this, evt, shortcutCode);
        }
    };
    DivInputEditor.prototype.onTextReplace = function (text, currentText) {
        this.eventManager.onTextReplace(text);
        _super.prototype.onTextReplace.call(this, text, currentText);
    };
    DivInputEditor.prototype.onTextInput = function (data) {
        var text = this.getEditableDocumentText();
        if (!this.handled) {
            var isShortcutHandled = browser_1.Browser.AndroidMobilePlatform && this.needProcessShortcut && this.tryHandleShortcutByInputString(data);
            if (!isShortcutHandled) {
                var isTextReplaced = !this.cursorWasSetOnLastPosition && this.getEditableDocumentCursorPosition() === this.getEditableDocumentFullText().length;
                var lastWordStartIndex = 0;
                if (!isTextReplaced && this.previousText) {
                    var previousText = this.previousText;
                    var lastSpaceIndex = previousText.lastIndexOf(" ");
                    if (lastSpaceIndex >= 0)
                        lastWordStartIndex = lastSpaceIndex + 1;
                    var lengthToReplaceCheck = (text.length > previousText.length ? previousText.length : text.length) - lastWordStartIndex - 1;
                    var currentWordPart = text.substr(lastWordStartIndex, lengthToReplaceCheck);
                    var previousWordPart = previousText.substr(lastWordStartIndex, lengthToReplaceCheck);
                    if (currentWordPart !== previousWordPart)
                        isTextReplaced = true;
                }
                if (isTextReplaced)
                    this.onTextReplace(text.substr(lastWordStartIndex), text);
                else
                    _super.prototype.onTextInput.call(this, data);
                if (this.previousText && text.length < this.previousText.length || !text.length) {
                    var deletedCharacterCount = this.previousText ? this.previousText.length - text.length : 1;
                    for (var i = 0; i < deletedCharacterCount; i++)
                        this.eventManager.onShortcut(key_1.KeyCode.Backspace);
                    this.previousText = text;
                }
                this.cursorWasSetOnLastPosition = true;
            }
            this.handled = true;
        }
        if (browser_1.Browser.MacOSMobilePlatform && text[text.length - 1] == " ")
            this.clearInputElement();
    };
    DivInputEditor.prototype.tryHandleShortcutByInputString = function (data) {
        if (data && !this.isIME) {
            var enteredChar = data.charAt(data.length - 1);
            var keyCode = this.tryObtainCodeFromChar(enteredChar);
            if (keyCode != EMPTY_KEYCODE) {
                if (this.isProcessShortcut(keyCode) && this.control.shortcutManager.isKnownShortcut(keyCode)) {
                    this.eventManager.onShortcut(keyCode);
                    return true;
                }
            }
        }
        return false;
    };
    DivInputEditor.prototype.getEditableTextOwner = function () {
        return this.inputElement;
    };
    DivInputEditor.prototype.captureFocus = function () {
        this.inputElement.focus();
    };
    DivInputEditor.prototype.getEditableDocument = function () {
        return this.inputElement;
    };
    DivInputEditor.prototype.clearInputElement = function () {
        _super.prototype.clearInputElement.call(this);
        dom_1.DomUtils.clearInnerHtml(this.inputElement);
        this.cursorWasSetOnLastPosition = true;
    };
    DivInputEditor.prototype.setEditableDocumentContent = function (content) {
        if (content)
            this.inputElement.innerHTML = content;
        else
            this.clearInputElement();
    };
    DivInputEditor.prototype.setEditableDocumentCursorPosition = function (cursorPosition) {
        var textLength = this.getEditableDocumentFullText().length;
        if (cursorPosition > textLength)
            cursorPosition = textLength;
        if (this.inputElement.childNodes.length > 0) {
            var range = document.createRange();
            var selection = window.getSelection();
            var lastChild = this.inputElement.childNodes[this.inputElement.childNodes.length - 1];
            if (cursorPosition <= lastChild.textContent.length) {
                range.setStart(lastChild, cursorPosition);
                range.collapse(true);
                selection.removeAllRanges();
                selection.addRange(range);
                this.previousText = this.getEditableDocumentText();
                this.cursorWasSetOnLastPosition = cursorPosition === textLength;
            }
        }
    };
    DivInputEditor.prototype.getEditableDocumentText = function () {
        return this.getEditableDocumentFullText().substring(0, this.getEditableDocumentCursorPosition());
    };
    DivInputEditor.prototype.getEditableDocumentFullText = function () {
        return _super.prototype.getEditableDocumentText.call(this).replace(/\s/g, " ");
    };
    DivInputEditor.prototype.getEditableDocumentContent = function () {
        return this.inputElement.innerHTML;
    };
    DivInputEditor.prototype.getEditableDocumentCursorPosition = function () {
        var selection = window.getSelection();
        var cursorPosition = selection.focusOffset;
        if (browser_1.Browser.MacOSMobilePlatform) {
            var fullText = this.getEditableDocumentFullText();
            if (fullText[fullText.length - 1] === " " && fullText.length > 1)
                cursorPosition++;
        }
        return cursorPosition;
    };
    DivInputEditor.prototype.selectEditableDocumentContent = function () {
        var selection = window.getSelection();
        var firstChildNode = null;
        if (this.inputElement.childNodes.length) {
            firstChildNode = this.inputElement.childNodes[0];
            if (!firstChildNode.childNodes.length)
                return;
        }
        selection.removeAllRanges();
        selection.selectAllChildren(this.inputElement);
        _super.prototype.selectEditableDocumentContent.call(this);
    };
    return DivInputEditor;
}(InputEditorBase));
exports.DivInputEditor = DivInputEditor;
var IFrameInputEditor = (function (_super) {
    tslib_1.__extends(IFrameInputEditor, _super);
    function IFrameInputEditor(control, eventManager, parent) {
        return _super.call(this, control, eventManager, parent) || this;
    }
    IFrameInputEditor.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.onTextInputTimerId);
        clearTimeout(this.composUpdateTimerId);
        clearTimeout(this.composEndTimerId);
    };
    IFrameInputEditor.prototype.createHierarchyCore = function () {
        var frameHtml = "<!DOCTYPE html>";
        frameHtml += "<html>";
        frameHtml += "<head>";
        frameHtml += "</head>";
        frameHtml += "<body style=\"padding: 0px; margin: 0px; overflow: hidden;\" loaded=\"true\">";
        frameHtml += "</body>";
        frameHtml += "</html>";
        this.editableDocument = this.inputElement.contentDocument || this.inputElement.contentWindow.document;
        this.editableDocument.documentElement.innerHTML = frameHtml;
    };
    IFrameInputEditor.prototype.initializeIfNotReadOnlyCore = function () {
        if (browser_1.Browser.WebKitFamily)
            this.editableDocument.body.setAttribute("contenteditable", "true");
        else
            this.editableDocument.designMode = "on";
    };
    IFrameInputEditor.prototype.createInputElement = function () {
        var element = document.createElement("IFRAME");
        element.src = "about:blank";
        if (browser_1.Browser.Safari) {
            element.style.width = "100%";
            element.style.minWidth = "100%";
            element.style.overflow = "hidden";
        }
        return element;
    };
    IFrameInputEditor.prototype.initEvents = function () {
        var _this = this;
        _super.prototype.initEvents.call(this);
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "compositionstart", this.onCompositionStart.bind(this));
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "compositionupdate", function (evt) { return browser_1.Browser.IE || browser_1.Browser.Edge ?
            _this.onCompositionUpdate(evt) : _this.composUpdateTimerId = setTimeout(function () { return _this.onCompositionUpdate(evt); }, 0); });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "compositionend", function (evt) { return !browser_1.Browser.Safari ?
            _this.onCompositionEnd(evt) : _this.composEndTimerId = setTimeout(function () { return _this.onCompositionEnd(evt); }, 0); });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "copy", function (evt) {
            if (!control_1.ControlOptions.isEnabled(_this.control.modelManager.richOptions.control.copy))
                return evt_1.EvtUtils.preventEvent(evt);
            else
                _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.CopySelection).copyEventRaised();
        });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "cut", function (evt) {
            if (!control_1.ControlOptions.isEnabled(_this.control.modelManager.richOptions.control.cut))
                return evt_1.EvtUtils.preventEvent(evt);
        });
        this.evtHandlersHolder.addListener(this.getEditableDocument(), "paste", function (evt) {
            if (!control_1.ControlOptions.isEnabled(_this.control.modelManager.richOptions.control.paste) || _this.control.isClosed())
                return evt_1.EvtUtils.preventEvent(evt);
            if (evt && evt.clipboardData && evt.clipboardData.items) {
                var clipboardContentInserter = new clipboard_content_inserter_1.ClipboardContentInserter(_this.control);
                var success = clipboardContentInserter.insert(evt);
                if (success)
                    return;
            }
            _this.control.commandManager.getCommand(client_command_1.RichEditClientCommand.PasteSelection).pasteEventRaised();
        });
    };
    IFrameInputEditor.prototype.captureFocus = function () {
        if ((browser_1.Browser.Opera && browser_1.Browser.MajorVersion <= 12) ||
            browser_1.Browser.Chrome && this.inputElement === document.activeElement ||
            ((browser_1.Browser.IE || browser_1.Browser.Edge) && this.control.readOnly == i_rich_edit_core_1.ReadOnlyMode.Persistent) ||
            browser_1.Browser.Firefox)
            this.inputElement.contentWindow.focus();
        else
            dom_1.DomUtils.setFocus(this.control.readOnly == i_rich_edit_core_1.ReadOnlyMode.Persistent ? this.inputElement : this.editableDocument.body);
    };
    IFrameInputEditor.prototype.setPosition = function (left, top) {
        _super.prototype.setPosition.call(this, left, top);
        if (left && top)
            this.selectEditableDocumentContent();
    };
    IFrameInputEditor.prototype.clearInputElement = function () {
        if (this.previousText != this.getEditableDocumentText())
            _super.prototype.onTextInput.call(this, "");
        _super.prototype.clearInputElement.call(this);
        dom_1.DomUtils.clearInnerHtml(this.editableDocument.body);
    };
    IFrameInputEditor.prototype.setEditableDocumentContent = function (content) {
        _super.prototype.setEditableDocumentContent.call(this, content);
        this.isIME = false;
        this.editableDocument.body.innerHTML = content;
    };
    IFrameInputEditor.prototype.getEditableDocumentContent = function () {
        return this.editableDocument.body.innerHTML;
    };
    IFrameInputEditor.prototype.selectEditableDocumentContent = function () {
        var firstChildNode = this.editableDocument.body.childNodes[0];
        if (firstChildNode && !firstChildNode.childNodes.length && !(firstChildNode.nodeType === 3 && firstChildNode.nodeValue === ""))
            return;
        var selection = this.editableDocument.getSelection ? this.editableDocument.getSelection() : this.editableDocument["selection"];
        if (selection) {
            if (selection.removeAllRanges)
                selection.removeAllRanges();
            else if (selection.empty)
                selection.empty();
            if (selection.selectAllChildren)
                selection.selectAllChildren(this.editableDocument.body);
            else if (selection.createRange) {
                try {
                    var range = selection.createRange();
                    range.moveToElementText(this.editableDocument.body);
                }
                catch (e) { }
                range.select();
            }
        }
        _super.prototype.selectEditableDocumentContent.call(this);
    };
    IFrameInputEditor.prototype.getEditableDocument = function () {
        return this.editableDocument;
    };
    IFrameInputEditor.prototype.getEditableTextOwner = function () {
        return this.editableDocument.body;
    };
    IFrameInputEditor.prototype.onBlur = function (evt) {
        _super.prototype.onBlur.call(this, evt);
        this.isIME = false;
        this.endInputIME();
    };
    IFrameInputEditor.prototype.onShortcutCore = function (evt, shortcutCode) {
        var prevSelectedInterval = this.control.selection.lastSelectedInterval;
        _super.prototype.onShortcutCore.call(this, evt, shortcutCode);
        if (this.control.selection.lastSelectedInterval != prevSelectedInterval)
            this.selectEditableDocumentContent();
    };
    IFrameInputEditor.prototype.onTextInput = function (data) {
        var _this = this;
        this.onTextInputTimerId = setTimeout(function () {
            var editableDocumentText = _this.getEditableDocumentText();
            if (editableDocumentText.charCodeAt(0) == IDEOGRAPHIC_SPACE_CHARCODE || string_1.StringUtils.trim(editableDocumentText))
                _super.prototype.onTextInput.call(_this, data);
        }, 0);
    };
    IFrameInputEditor.prototype.onTextReplace = function (text, currentText) {
        this.eventManager.onTextReplace(text, this.previousText.length);
        _super.prototype.onTextReplace.call(this, text, currentText);
    };
    IFrameInputEditor.prototype.recreateIfNeeded = function () {
        var iframeDocument = this.inputElement.contentDocument || this.inputElement.contentWindow.document;
        if (!iframeDocument.body.hasAttribute("loaded")) {
            this.initializedIfNotReadOnly = false;
            this.createHierarchyCore();
            this.initialize();
        }
    };
    IFrameInputEditor.prototype.onCompositionStart = function (_evt) {
        this.isIME = true;
        this.needProcessShortcut = false;
        if (!browser_1.Browser.IE && !browser_1.Browser.Edge)
            this.clearInputElement();
        this.startInputIME();
    };
    IFrameInputEditor.prototype.onCompositionUpdate = function (_evt) {
        var text = this.getEditableDocumentText();
        if (this.isIME && text.length && this.previousText != text) {
            this.onTextReplace(text, text);
            this.updateInputIME();
        }
    };
    IFrameInputEditor.prototype.onCompositionEnd = function (_evt) {
        var text = this.getEditableDocumentText();
        if (text.length && this.previousText != text)
            this.onTextReplace(text, text);
        else if (!browser_1.Browser.Edge)
            this.clearInputElement();
        if (text.charCodeAt(text.length - 1) == IDEOGRAPHIC_SPACE_CHARCODE)
            this.clearInputElement();
        this.isIME = false;
        this.endInputIME();
    };
    IFrameInputEditor.prototype.startInputIME = function () {
        this.inputElement.style.position = "absolute";
        var lastSelectedIntervalStartPosition = this.control.selection.lastSelectedInterval.start;
        var subDocument = this.control.selection.activeSubDocument;
        var layoutPosition = subDocument.isMain() ?
            new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.selection.layout, subDocument, lastSelectedIntervalStartPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)) :
            new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.selection.layout, subDocument, lastSelectedIntervalStartPosition, this.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        if (!layoutPosition)
            return null;
        var currentTextIndent = this.editableDocument.body.style.textIndent;
        var propChar = html_converter_1.HtmlConverter.getSizeSignificantRules(this.control.inputPosition.getMergedCharacterPropertiesRaw()).join(";");
        this.editableDocument.body.setAttribute("style", "padding: 0px; margin: 0px; overflow: hidden; color: transparent; " + propChar);
        this.editableDocument.body.style.textIndent = currentTextIndent;
        var layoutX = layoutPosition.getLayoutX(this.control.measurer, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row);
        var layoutPoint = new layout_point_1.LayoutPoint(layoutPosition.pageIndex, layoutX, layoutPosition.getLayoutY(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row));
        var pageElement = this.control.viewManager.cache[layoutPoint.pageIndex].page;
        layoutPoint.offset(pageElement.offsetLeft, pageElement.offsetTop);
        this.setPosition(layoutPoint.x, layoutPoint.y);
        this.editableDocument.body.style.textIndent = this.previousText.length ? currentTextIndent :
            layoutPosition.getLayoutX(this.control.measurer, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box) +
                layoutPosition.box.getCharOffsetXInPixels(this.control.measurer, layoutPosition.charOffset) - layoutX + "px";
        this.inputElement.style.width = layoutPosition.row.width + "px";
        if (browser_1.Browser.IE || browser_1.Browser.Edge) {
            this.editableDocument.body.style.width = this.inputElement.style.width;
            this.editableDocument.body.style.height = this.inputElement.style.height = layoutPosition.row.height + "px";
        }
        if (layoutPosition.row.boxes.length > 1) {
            this.editableDocument.body.style.lineHeight = layoutPosition.row.height + "px";
            this.editableDocument.body.style.marginTop = (layoutPosition.box.height - layoutPosition.row.height) / 2 + "px";
        }
    };
    IFrameInputEditor.prototype.updateInputIME = function () {
        var lastSelectedIntervalStartPosition = this.control.selection.lastSelectedInterval.start;
        var subDocument = this.control.selection.activeSubDocument;
        var layoutPosition = subDocument.isMain() ?
            new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(this.control.selection.layout, subDocument, lastSelectedIntervalStartPosition, document_layout_details_level_1.DocumentLayoutDetailsLevel.Character)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true)) :
            new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(this.control.selection.layout, subDocument, lastSelectedIntervalStartPosition, this.control.selection.pageIndex, document_layout_details_level_1.DocumentLayoutDetailsLevel.Box)
                .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
        if (!layoutPosition)
            return null;
        var paragraphProperties = this.control.selection.activeSubDocument.getParagraphByPosition(lastSelectedIntervalStartPosition).getParagraphMergedProperties();
        var text = this.getEditableDocumentText();
        if (text.length === 2)
            this.inputElement.style.height = (paragraphProperties.alignment == paragraph_properties_1.ParagraphAlignment.Left ? layoutPosition.pageArea.height : 0) + "px";
        var inputWidth = parseInt(this.inputElement.style.width);
        if (inputWidth && inputWidth != layoutPosition.row.width) {
            var widthDiff = layoutPosition.row.width - parseInt(this.inputElement.style.width);
            this.inputElement.style.width = layoutPosition.row.width + "px";
            this.editableDocument.body.style.textIndent = parseInt(this.editableDocument.body.style.textIndent) + widthDiff + "px";
            this.inputElement.style.left = parseInt(this.inputElement.style.left) - widthDiff + "px";
        }
    };
    IFrameInputEditor.prototype.endInputIME = function () {
        this.inputElement.style.width = "0px";
        this.inputElement.style.height = "0px";
    };
    return IFrameInputEditor;
}(InputEditorBase));
exports.IFrameInputEditor = IFrameInputEditor;
var InputController = (function () {
    function InputController(control, eventManager, parent) {
        this.control = control;
        this.inputEditor = this.createInputEditor(parent, eventManager);
        this.exporter = new html_export_1.HtmlExporter(this.control);
    }
    InputController.prototype.dispose = function () {
        this.inputEditor.dispose();
    };
    InputController.prototype.createInputEditor = function (parent, eventManager) {
        if (this.control.isTouchMode())
            return new DivInputEditor(this.control, eventManager, parent);
        return new IFrameInputEditor(this.control, eventManager, parent);
    };
    InputController.prototype.getEditableDocument = function () {
        return this.inputEditor.getEditableDocument();
    };
    InputController.prototype.getExportedRangeCopy = function () {
        return this.exporter.rangeCopy;
    };
    InputController.prototype.captureFocus = function () {
        this.inputEditor.captureFocus();
    };
    InputController.prototype.setPosition = function (left, top) {
        this.inputEditor.setPosition(left, top);
    };
    InputController.prototype.renderSelectionToEditableDocument = function () {
        var selection = this.control.selection;
        if (selection.intervals.length === 0 || selection.isCollapsed())
            return;
        var rangeCopy = create_range_copy_operation_1.RangeCopy.create(selection.subDocumentIntervals);
        var model = rangeCopy.model;
        var interval = new fixed_1.FixedInterval(0, model.mainSubDocument.getDocumentEndPosition() - (rangeCopy.addedUselessParagraphMarkInEnd ? 1 : 0));
        var html = this.exporter.getHtmlElementsByInterval(model, model.mainSubDocument, interval);
        if (html.length) {
            var guids = rich_utils_1.RichUtils.getCopyPasteGuid(this.control.getGuidParams());
            html = "<a id=\"" + guids + "\"><span id=\"" + guids + "\"><b style=\"font-weight: normal;\" id=\"" + guids + "\">" + html + "</b></span></a>";
            this.exporter.rangeCopy = rangeCopy;
        }
        this.setEditableDocumentContent(html);
        this.selectEditableDocumentContent();
    };
    InputController.prototype.setEditableDocumentContent = function (content) {
        this.inputEditor.setEditableDocumentContent(content);
    };
    InputController.prototype.setEditableDocumentCursorPosition = function (cursorPosition) {
        this.inputEditor.setEditableDocumentCursorPosition(cursorPosition);
    };
    InputController.prototype.getEditableDocumentContent = function () {
        return this.inputEditor.getEditableDocumentContent();
    };
    InputController.prototype.selectEditableDocumentContent = function () {
        this.inputEditor.selectEditableDocumentContent();
    };
    return InputController;
}());
exports.InputController = InputController;
