"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var hyperlink_info_changed_1 = require("../../../core/model/changes/sub-document/field/hyperlink-info-changed");
var inserted_1 = require("../../../core/model/changes/sub-document/field/inserted");
var character_style_1 = require("../../../core/model/character/character-style");
var field_1 = require("../../../core/model/fields/field");
var interval_based_history_item_1 = require("../../../core/model/history/base/interval-based-history-item");
var insert_paragraph_manipulator_params_1 = require("../../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var table_normalizator_1 = require("../../../core/model/manipulators/tables/table-normalizator");
var insert_text_manipulator_params_1 = require("../../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../../../core/model/runs/run-type");
var sub_document_1 = require("../../../core/model/sub-document");
var table_1 = require("../../../core/model/tables/main-structures/table");
var table_cell_1 = require("../../../core/model/tables/main-structures/table-cell");
var table_row_1 = require("../../../core/model/tables/main-structures/table-row");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var PasteHtmlDataHistoryItem = (function (_super) {
    tslib_1.__extends(PasteHtmlDataHistoryItem, _super);
    function PasteHtmlDataHistoryItem(modelManipulator, subDocInterval, historyRuns, tablesInfo, charPropsBundle) {
        var _this = _super.call(this, modelManipulator, subDocInterval) || this;
        _this.historyRuns = historyRuns;
        _this.tablesInfo = tablesInfo;
        _this.charPropsBundle = charPropsBundle;
        return _this;
    }
    PasteHtmlDataHistoryItem.prototype.redo = function () {
        this.insertRuns();
        this.insertTables();
    };
    PasteHtmlDataHistoryItem.prototype.undo = function () {
        for (var _i = 0, _a = this.historyTables; _i < _a.length; _i++) {
            var table = _a[_i];
            this.modelManipulator.table.removeTable(this.boundSubDocument, table);
        }
        this.modelManipulator.range.removeIntervalWithoutHistory(this.boundSubDocument, this.interval, false);
    };
    PasteHtmlDataHistoryItem.prototype.insertRuns = function () {
        var fields = this.boundSubDocument.fields;
        var fieldStackHistory = [];
        for (var historyRunIndex = 0, historyRun; historyRun = this.historyRuns[historyRunIndex]; historyRunIndex++) {
            switch (historyRun.type) {
                case run_type_1.RunType.ParagraphRun:
                    var historyRunParagraph = historyRun;
                    this.modelManipulator.paragraph.insertParagraphInner(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(this.boundSubDocument, historyRunParagraph.offsetAtStartDocument), historyRunParagraph.charPropsBundle, historyRunParagraph.parPropsBundle, historyRunParagraph.applyDirectlyToNewParagraph, function () { }));
                    break;
                case run_type_1.RunType.InlinePictureRun:
                    var historyInlinePictureRun = historyRun;
                    this.modelManipulator.picture.insertInlinePictureInner(new sub_document_1.SubDocumentPosition(this.boundSubDocument, historyInlinePictureRun.offsetAtStartDocument), historyInlinePictureRun.charPropsBundle, historyInlinePictureRun.picInfo, historyInlinePictureRun.options);
                    break;
                case run_type_1.RunType.FieldCodeStartRun:
                    fieldStackHistory.push(historyRun);
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.boundSubDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    break;
                case run_type_1.RunType.FieldResultEndRun:
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.boundSubDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    var histFieldCodeStartRun = fieldStackHistory.pop();
                    var fieldInsertIndex = 0;
                    if (fields.length > 0) {
                        fieldInsertIndex = Math.max(0, field_1.Field.normedBinaryIndexOf(fields, histFieldCodeStartRun.startPosition + 1));
                        if (histFieldCodeStartRun.startPosition > fields[fieldInsertIndex].getFieldStartPosition())
                            fieldInsertIndex++;
                    }
                    var field = new field_1.Field(this.boundSubDocument.positionManager, fieldInsertIndex, histFieldCodeStartRun.startPosition, histFieldCodeStartRun.separatorPosition, histFieldCodeStartRun.endPosition, histFieldCodeStartRun.showCode, histFieldCodeStartRun.hyperlinkInfo ? histFieldCodeStartRun.hyperlinkInfo.clone() : undefined);
                    field_1.Field.addField(fields, field);
                    this.modelManipulator.notifyModelChanged(new inserted_1.FieldInsertedSubDocumentChange(this.boundSubDocument.id, histFieldCodeStartRun.startPosition, histFieldCodeStartRun.separatorPosition, histFieldCodeStartRun.endPosition));
                    if (histFieldCodeStartRun.hyperlinkInfo) {
                        var codeInterval = fixed_1.FixedInterval.fromPositions(histFieldCodeStartRun.startPosition + 1, histFieldCodeStartRun.separatorPosition);
                        var resultInterval = fixed_1.FixedInterval.fromPositions(histFieldCodeStartRun.separatorPosition + 1, histFieldCodeStartRun.endPosition - 1);
                        this.modelManipulator.notifyModelChanged(new hyperlink_info_changed_1.HyperlinkInfoChangedSubDocumentChange(this.boundSubDocument.id, resultInterval, codeInterval, histFieldCodeStartRun.hyperlinkInfo));
                        if (resultInterval.length)
                            this.modelManipulator.style.setCharacterStyle(this.boundSubDocument, resultInterval, this.boundSubDocument.documentModel.getCharacterStyleByName(character_style_1.CharacterStyle.hyperlinkStyleName), false);
                    }
                    break;
                default:
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.boundSubDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    break;
            }
        }
    };
    PasteHtmlDataHistoryItem.prototype.insertTables = function () {
        this.historyTables = [];
        for (var _i = 0, _a = this.tablesInfo; _i < _a.length; _i++) {
            var tableInfo = _a[_i];
            var table = new table_1.Table(tableInfo.properties, this.boundSubDocument.documentModel.getDefaultTableStyle());
            table.preferredWidth = tableInfo.width;
            for (var _b = 0, _c = tableInfo.rows; _b < _c.length; _b++) {
                var rowInfo = _c[_b];
                var row = new table_row_1.TableRow(table, this.boundSubDocument.documentModel.cache.tableRowPropertiesCache.getItem(rowInfo.properties));
                row.gridAfter = rowInfo.gridAfter;
                row.gridBefore = rowInfo.gridBefore;
                row.widthAfter = rowInfo.widthAfter;
                row.widthBefore = rowInfo.widthBefore;
                table.rows.push(row);
                for (var _d = 0, _e = rowInfo.cells; _d < _e.length; _d++) {
                    var cellInfo = _e[_d];
                    var cell = new table_cell_1.TableCell(row, this.boundSubDocument.documentModel.cache.tableCellPropertiesCache.getItem(cellInfo.properties));
                    cell.preferredWidth = cellInfo.preferredWidth;
                    cell.startParagraphPosition = this.boundSubDocument.positionManager.registerPosition(cellInfo.startPosition);
                    cell.endParagrapPosition = this.boundSubDocument.positionManager.registerPosition(cellInfo.endPosition);
                    cell.columnSpan = cellInfo.columnSpan;
                    cell.verticalMerging = cellInfo.firstWhenVerticallyMerged ?
                        (cellInfo.rowSpan > 1 ? table_base_structures_1.TableCellMergingState.Restart : table_base_structures_1.TableCellMergingState.None) :
                        table_base_structures_1.TableCellMergingState.Continue;
                    row.cells.push(cell);
                }
            }
            var positionToPaste = tableInfo.rows[0].cells[0].startPosition;
            this.modelManipulator.table.pasteTable(this.boundSubDocument, table, positionToPaste);
            var insertedTable = table_1.Table.getTableByPosition(this.boundSubDocument.tables, positionToPaste, true);
            new table_normalizator_1.TableNormalizator(insertedTable, function (table, rowIndex, newValue) { return table.rows[rowIndex].gridBefore = newValue; }, function (table, rowIndex, newValue) { return table.rows[rowIndex].gridAfter = newValue; }, function (table, rowIndex, newValue) { return table.rows[rowIndex].widthBefore = newValue; }, function (table, rowIndex, newValue) { return table.rows[rowIndex].widthAfter = newValue; }, function (table, rowIndex, cellIndex, newValue) { return table.rows[rowIndex].cells[cellIndex].columnSpan = newValue; }, function (table, rowIndex, cellIndex, newValue) { return table.rows[rowIndex].cells[cellIndex].verticalMerging = newValue; })
                .normalizeAll();
            if (insertedTable)
                this.historyTables.push(insertedTable);
        }
    };
    return PasteHtmlDataHistoryItem;
}(interval_based_history_item_1.IntervalBasedHistoryItem));
exports.PasteHtmlDataHistoryItem = PasteHtmlDataHistoryItem;
