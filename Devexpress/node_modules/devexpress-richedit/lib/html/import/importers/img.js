"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var runs_1 = require("../containers/runs");
var base_1 = require("./base");
var HtmlImgTagImporter = (function (_super) {
    tslib_1.__extends(HtmlImgTagImporter, _super);
    function HtmlImgTagImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlImgTagImporter.prototype.elementTag = function () {
        return "IMG";
    };
    HtmlImgTagImporter.prototype.importBefore = function () {
        var imageElement = this.importer.currElement;
        var originalSize = new size_1.Size(imageElement.naturalWidth, imageElement.naturalHeight);
        var actualSize = new size_1.Size(imageElement.width, imageElement.height);
        if (originalSize.width !== undefined && originalSize.height !== undefined)
            originalSize.applyConverter(unit_converter_1.UnitConverter.pixelsToTwips);
        if (actualSize.width !== undefined && actualSize.height !== undefined)
            actualSize.applyConverter(unit_converter_1.UnitConverter.pixelsToTwips);
        var cacheInfo = this.importer.modelManager.model.cache.imageCache.createUnloadedByBase64OrUrl(imageElement.src, originalSize);
        this.addRun(new runs_1.ImportedInlinePictureRunInfo(this.importer.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo), actualSize));
    };
    HtmlImgTagImporter.prototype.isImportChilds = function () {
        return false;
    };
    HtmlImgTagImporter.prototype.importAfter = function () {
    };
    return HtmlImgTagImporter;
}(base_1.HtmlTagImporterBase));
exports.HtmlImgTagImporter = HtmlImgTagImporter;
