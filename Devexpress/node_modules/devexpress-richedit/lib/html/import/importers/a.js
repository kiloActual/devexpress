"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var field_1 = require("../../../core/model/fields/field");
var control_1 = require("../../../core/model/options/control");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var runs_1 = require("../containers/runs");
var base_1 = require("./base");
var HtmlATagImporter = (function (_super) {
    tslib_1.__extends(HtmlATagImporter, _super);
    function HtmlATagImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlATagImporter.prototype.elementTag = function () {
        return "A";
    };
    HtmlATagImporter.prototype.importBefore = function () {
        var hyperlinkElement = this.element;
        if (!hyperlinkElement.href)
            return;
        var uriParts = hyperlinkElement.href.split("#");
        var hyperlinkInfo = new field_1.HyperlinkInfo(uriParts[0], uriParts.length > 1 ? uriParts[1] : "", hyperlinkElement.title, false);
        var codeText = [
            " HYPERLINK \"",
            hyperlinkInfo.uri,
            "\" ",
            hyperlinkInfo.tip == "" ? "" : "\\o \"" + hyperlinkInfo.tip + "\" ",
            hyperlinkInfo.anchor == "" ? "" : "\\l \"" + hyperlinkInfo.anchor + "\" "
        ].join("");
        this.addRun(new runs_1.ImportedFieldCodeStartRunInfo(this.importer.charPropsBundle, hyperlinkInfo, this.importer.fieldsId));
        this.addRun(new runs_1.ImportedTextRunInfo(this.importer.modelManager.model, this.importer.measurer, codeText, this.importer.htmlImporterMaskedCharacterProperties.getBundleFrom(this.element, new fixed_1.FixedInterval(this.importer.currPosition, codeText.length))));
        this.addRun(new runs_1.ImportedFieldCodeEndRunInfo(this.importer.charPropsBundle, this.importer.fieldsId));
    };
    HtmlATagImporter.prototype.isImportChilds = function () {
        return true;
    };
    HtmlATagImporter.prototype.importAfter = function () {
        if (!this.element.href)
            return;
        this.addRun(new runs_1.ImportedFieldResultEndRunInfo(this.importer.charPropsBundle, this.importer.fieldsId));
        this.importer.fieldsId++;
    };
    HtmlATagImporter.prototype.isAllowed = function () {
        return control_1.ControlOptions.isEnabled(this.importer.modelManager.richOptions.control.hyperlinks);
    };
    return HtmlATagImporter;
}(base_1.HtmlTagImporterBase));
exports.HtmlATagImporter = HtmlATagImporter;
