"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_row_properties_1 = require("../../../core/model/tables/properties/table-row-properties");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var tables_1 = require("../containers/tables");
var base_1 = require("./base");
var table_1 = require("./table");
var td_1 = require("./td");
var HtmlTrTagImporter = (function (_super) {
    tslib_1.__extends(HtmlTrTagImporter, _super);
    function HtmlTrTagImporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cells = [];
        return _this;
    }
    HtmlTrTagImporter.prototype.elementTag = function () {
        return HtmlTrTagImporter.tagName;
    };
    HtmlTrTagImporter.prototype.importBefore = function () {
        this.rowElement = this.element;
        this.gridBeforeInfo = HtmlTrTagImporter.importGridBefore(this.rowElement);
    };
    HtmlTrTagImporter.prototype.isImportChilds = function () {
        return true;
    };
    HtmlTrTagImporter.prototype.importAfter = function () {
        if (this.cells.length) {
            var tableImporter = this.getClosestImporterByTagName(table_1.HtmlTableTagImporter.tagName);
            td_1.HtmlTdTagImporter.addVerticalMergedCells(this.importer, tableImporter, this);
            var _a = HtmlTrTagImporter.importGridAfter(this.rowElement), gridAfter = _a.gridAfter, widthAfter = _a.widthAfter;
            var props = new table_row_properties_1.TableRowProperties();
            tableImporter.rows.push(new tables_1.ImportedTableRowInfo(this.gridBeforeInfo.gridBefore, gridAfter, this.gridBeforeInfo.widthBefore, widthAfter, props, this.cells));
        }
    };
    HtmlTrTagImporter.importGridBefore = function (row) {
        var gridBefore = 0;
        var widthBefore = 0;
        var gridBeforeMatches = row.innerHTML.match(/^<td[^>]*mso-cell-special:\s*placeholder[^>]*><\/td>/gi);
        if (gridBeforeMatches && gridBeforeMatches.length) {
            var cellBeforeColSpan = gridBeforeMatches[0].replace(/<td[^>]*colspan="(\d+)"[^>]*><\/td>/gi, "$1");
            gridBefore = cellBeforeColSpan == gridBeforeMatches[0] ? 1 : parseInt(cellBeforeColSpan);
            var cellBeforeWidth = gridBeforeMatches[0].replace(/<td[^>]*width="(\d+)"[^>]*><\/td>/gi, "$1");
            widthBefore = cellBeforeWidth == gridBeforeMatches[0] ? 0 : unit_converter_1.UnitConverter.pixelsToTwips(parseFloat(cellBeforeWidth));
        }
        return { gridBefore: gridBefore, widthBefore: table_units_1.TableWidthUnit.create(widthBefore, table_units_1.TableWidthUnitType.ModelUnits) };
    };
    HtmlTrTagImporter.importGridAfter = function (row) {
        var gridAfter = 0;
        var widthAfter = 0;
        var gridAfterMatches = row.innerHTML.match(/<td[^>]*mso-cell-special:\s*placeholder[^>]*><\/td>$/gi);
        if (gridAfterMatches && gridAfterMatches.length) {
            var cellAfterColSpan = gridAfterMatches[0].replace(/<td[^>]*colspan="(\d+)"[^>]*><\/td>/gi, "$1");
            gridAfter = cellAfterColSpan == gridAfterMatches[0] ? 1 : parseInt(cellAfterColSpan);
            var cellAfterWidth = gridAfterMatches[0].replace(/<td[^>]*width="(\d+)"[^>]*><\/td>/gi, "$1");
            widthAfter = cellAfterWidth == gridAfterMatches[0] ? 0 : unit_converter_1.UnitConverter.pixelsToTwips(parseFloat(cellAfterWidth));
        }
        return { gridAfter: gridAfter, widthAfter: table_units_1.TableWidthUnit.create(widthAfter, table_units_1.TableWidthUnitType.ModelUnits) };
    };
    HtmlTrTagImporter.tagName = "TR";
    return HtmlTrTagImporter;
}(base_1.HtmlTagImporterBase));
exports.HtmlTrTagImporter = HtmlTrTagImporter;
