"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../base-utils/map-creator");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var table_cell_properties_1 = require("../../../core/model/tables/properties/table-cell-properties");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var attr_1 = require("@devexpress/utils/lib/utils/attr");
var color_1 = require("@devexpress/utils/lib/utils/color");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var runs_1 = require("../containers/runs");
var tables_1 = require("../containers/tables");
var utils_1 = require("../utils/utils");
var base_1 = require("./base");
var table_1 = require("./table");
var tr_1 = require("./tr");
var HtmlTdTagImporter = (function (_super) {
    tslib_1.__extends(HtmlTdTagImporter, _super);
    function HtmlTdTagImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlTdTagImporter.prototype.elementTag = function () {
        return "TD";
    };
    HtmlTdTagImporter.prototype.importBefore = function () {
        list_1.ListUtils.last(this.importer.levelInfo).allowInsertRuns = true;
        this.rowImporter = this.getClosestImporterByTagName(tr_1.HtmlTrTagImporter.tagName);
        HtmlTdTagImporter.addVerticalMergedCells(this.importer, this.getClosestImporterByTagName(table_1.HtmlTableTagImporter.tagName), this.rowImporter);
        this.startPosition = this.importer.currPosition;
    };
    HtmlTdTagImporter.prototype.isImportChilds = function () {
        return true;
    };
    HtmlTdTagImporter.prototype.importAfter = function () {
        var cell = this.element;
        var cellWidth = utils_1.HtmlImportUtils.getTableWidthUnit(this.element.style.width || attr_1.AttrUtils.getElementAttribute(this.element, "width"));
        var preferredWidth = cellWidth ? cellWidth : new table_units_1.TableWidthUnit().init(0, table_units_1.TableWidthUnitType.Auto);
        var columnSpan = cell.colSpan > 1000 ? 1 : (cell.colSpan == 0 ? Number.MAX_VALUE : cell.colSpan);
        var rowSpan = cell.rowSpan == 0 ? Number.MAX_VALUE : cell.rowSpan;
        var cellStyle = dom_1.DomUtils.getCurrentStyle(cell);
        var props = new table_cell_properties_1.TableCellProperties();
        this.importCellBorders(this.importer.modelManager.model.colorProvider, props, cellStyle);
        this.importMargins(props, cellStyle);
        this.setVerticalAlign(props, cellStyle);
        this.setBackgroungColor(props, cellStyle);
        var lastImportedRun = this.importer.getLastImportedRun();
        if (!lastImportedRun || !this.importer.prevRunIsParagraph ||
            this.importer.currPosition - lastImportedRun.runLength < this.startPosition) {
            this.importer.addParagraphRun(null, this.element, true);
        }
        this.rowImporter.cells.push(new tables_1.ImportedTableCellInfo(preferredWidth, this.startPosition, this.importer.currPosition, columnSpan, rowSpan, props, true));
    };
    HtmlTdTagImporter.addVerticalMergedCells = function (importer, tableImporter, rowImporter) {
        var prevRow = list_1.ListUtils.last(tableImporter.rows);
        if (!prevRow)
            return;
        var currColSpan = rowImporter.gridBeforeInfo.gridBefore +
            list_1.ListUtils.accumulate(rowImporter.cells, 0, function (acc, cell) { return acc + cell.columnSpan; });
        while (true) {
            var prevRowImpCell = prevRow.getCellByColumnSpan(currColSpan);
            if (prevRowImpCell && prevRowImpCell.rowSpan > 1) {
                var impCell = prevRowImpCell.clone();
                impCell.rowSpan--;
                impCell.startPosition = importer.currPosition;
                impCell.endPosition = importer.currPosition + 1;
                impCell.firstWhenVerticallyMerged = false;
                rowImporter.cells.push(impCell);
                currColSpan += impCell.columnSpan;
                importer.addRun(new runs_1.ImportedParagraphRunInfo(null, importer.charPropsBundle, new paragraph_properties_1.MaskedParagraphProperties()), true);
            }
            else
                break;
        }
    };
    HtmlTdTagImporter.prototype.setBackgroungColor = function (props, cellStyle) {
        var cellBackgroundColor = color_1.ColorUtils.fromString(cellStyle.backgroundColor);
        if (cellBackgroundColor) {
            props.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex, true);
            props.shadingInfo = shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(cellBackgroundColor));
        }
    };
    HtmlTdTagImporter.prototype.setVerticalAlign = function (props, cellStyle) {
        var align = HtmlTdTagImporter.verticalAlignInfo[cellStyle.verticalAlign];
        if (align !== undefined) {
            props.verticalAlignment = align;
            props.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment, true);
        }
    };
    HtmlTdTagImporter.prototype.importCellBorders = function (colorProvider, props, cellStyle) {
        utils_1.HtmlImportUtils.setBorders(colorProvider, props, props.borders, cellStyle, table_cell_properties_1.TableCellPropertiesMask.UseTopBorder, table_cell_properties_1.TableCellPropertiesMask.UseRightBorder, table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder, table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder);
    };
    HtmlTdTagImporter.prototype.importMargins = function (props, cellStyle) {
        this.importMargin(props, cellStyle.paddingTop, table_cell_properties_1.TableCellPropertiesMask.UseTopMargin, function (margins, value) { return margins.top = value; });
        this.importMargin(props, cellStyle.paddingRight, table_cell_properties_1.TableCellPropertiesMask.UseRightMargin, function (margins, value) { return margins.right = value; });
        this.importMargin(props, cellStyle.paddingBottom, table_cell_properties_1.TableCellPropertiesMask.UseBottomMargin, function (margins, value) { return margins.bottom = value; });
        this.importMargin(props, cellStyle.paddingLeft, table_cell_properties_1.TableCellPropertiesMask.UseLeftMargin, function (margins, value) { return margins.left = value; });
    };
    HtmlTdTagImporter.prototype.importMargin = function (props, value, mask, setMargin) {
        var margin = utils_1.HtmlImportUtils.getTableWidthUnit(value);
        if (margin) {
            setMargin(props.cellMargins, margin);
            props.setUseValue(mask, true);
        }
    };
    HtmlTdTagImporter.verticalAlignInfo = new map_creator_1.MapCreator()
        .add("bottom", table_base_structures_1.TableCellVerticalAlignment.Bottom)
        .add("middle", table_base_structures_1.TableCellVerticalAlignment.Center)
        .add("top", table_base_structures_1.TableCellVerticalAlignment.Top)
        .get();
    return HtmlTdTagImporter;
}(base_1.HtmlTagImporterBase));
exports.HtmlTdTagImporter = HtmlTdTagImporter;
var HtmlThTagImporter = (function (_super) {
    tslib_1.__extends(HtmlThTagImporter, _super);
    function HtmlThTagImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HtmlThTagImporter.prototype.elementTag = function () {
        return "TH";
    };
    return HtmlThTagImporter;
}(HtmlTdTagImporter));
exports.HtmlThTagImporter = HtmlThTagImporter;
