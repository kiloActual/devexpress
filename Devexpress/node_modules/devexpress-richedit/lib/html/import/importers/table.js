"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var table_properties_1 = require("../../../core/model/tables/properties/table-properties");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var attr_1 = require("@devexpress/utils/lib/utils/attr");
var color_1 = require("@devexpress/utils/lib/utils/color");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var tables_1 = require("../containers/tables");
var utils_1 = require("../utils/utils");
var base_1 = require("./base");
var HtmlTableTagImporter = (function (_super) {
    tslib_1.__extends(HtmlTableTagImporter, _super);
    function HtmlTableTagImporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rows = [];
        return _this;
    }
    HtmlTableTagImporter.prototype.elementTag = function () {
        return HtmlTableTagImporter.tagName;
    };
    HtmlTableTagImporter.prototype.importBefore = function () {
        var lastTableInfo = list_1.ListUtils.last(this.importer.importedTablesInfo);
        if (lastTableInfo && list_1.ListUtils.last(list_1.ListUtils.last(lastTableInfo.rows).cells).endPosition == this.importer.currPosition ||
            !this.importer.prevRunIsParagraph)
            this.importer.addParagraphRun(null, this.element);
        list_1.ListUtils.last(this.importer.levelInfo).allowInsertRuns = false;
        this.element.innerHTML = this.element.innerHTML.replace(/<td([^>]*mso-cell-special:\s*placeholder[^>]*)>[\s\S]*?<\/td>/gi, "<td$1></td>");
    };
    HtmlTableTagImporter.prototype.isImportChilds = function () {
        return true;
    };
    HtmlTableTagImporter.prototype.importAfter = function () {
        if (!this.element.rows.length)
            return;
        var tbl = new tables_1.TableInfo(this.getTableWidth(), this.getTableProperties(this.colorProvider), this.rows);
        if (!(tbl.width.type == table_units_1.TableWidthUnitType.ModelUnits && tbl.width.value > 0))
            if (!list_1.ListUtils.unsafeAnyOf(this.rows, function (row) { return list_1.ListUtils.unsafeAnyOf(row.cells, function (cell) {
                return cell.preferredWidth.type == table_units_1.TableWidthUnitType.ModelUnits && cell.preferredWidth.value > 0;
            }); })) {
                tbl.width.type = table_units_1.TableWidthUnitType.FiftiethsOfPercent;
                tbl.width.value = 100 * table_units_1.TableWidthUnit.MUTLIPLIER_FOR_PERCENTS;
            }
        this.importer.importedTablesInfo.push(tbl);
    };
    HtmlTableTagImporter.prototype.getTableProperties = function (colorProvider) {
        var tblProps = new table_properties_1.TableProperties();
        tblProps.layoutType = table_base_structures_1.TableLayoutType.Autofit;
        tblProps.setUseValue(table_properties_1.TablePropertiesMask.UseTableLayout, true);
        var tableStyle = dom_1.DomUtils.getCurrentStyle(this.element);
        utils_1.HtmlImportUtils.setBorders(colorProvider, tblProps, tblProps.borders, tableStyle, table_properties_1.TablePropertiesMask.UseTopBorder, table_properties_1.TablePropertiesMask.UseRightBorder, table_properties_1.TablePropertiesMask.UseBottomBorder, table_properties_1.TablePropertiesMask.UseLeftBorder);
        var tableMarginLeft = utils_1.HtmlImportUtils.getTableWidthUnit(tableStyle.marginLeft);
        if (tableMarginLeft && tableMarginLeft.type != table_units_1.TableWidthUnitType.Nil) {
            tblProps.indent = tableMarginLeft;
            tblProps.setUseValue(table_properties_1.TablePropertiesMask.UseTableIndent, true);
        }
        if (tableStyle.borderSpacing && tableStyle.borderCollapse != "collapse") {
            var cellSpacing = utils_1.HtmlImportUtils.getTableWidthUnit(tableStyle.borderSpacing.split(" ")[0]);
            if (cellSpacing && cellSpacing.type != table_units_1.TableWidthUnitType.Nil) {
                tblProps.cellSpacing = cellSpacing;
                tblProps.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
            }
        }
        var tableBackgroundColor = color_1.ColorUtils.fromString(tableStyle.backgroundColor);
        if (tableBackgroundColor) {
            tblProps.shadingInfo = shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(tableBackgroundColor));
            tblProps.setUseValue(table_properties_1.TablePropertiesMask.UseShadingInfoIndex, true);
        }
        return tblProps;
    };
    HtmlTableTagImporter.prototype.getTableWidth = function () {
        var tableWidth = utils_1.HtmlImportUtils.getTableWidthUnit(this.element.style.width || attr_1.AttrUtils.getElementAttribute(this.element, "width"));
        if (!tableWidth) {
            var parentCell = dom_1.DomUtils.getParentByTagName(this.element, "TD");
            if (parentCell)
                tableWidth = utils_1.HtmlImportUtils.getTableWidthUnit(parentCell.style.width || attr_1.AttrUtils.getElementAttribute(parentCell, "width"));
        }
        return tableWidth ? tableWidth : new table_units_1.TableWidthUnit().init(0, table_units_1.TableWidthUnitType.Auto);
    };
    HtmlTableTagImporter.tagName = "TABLE";
    return HtmlTableTagImporter;
}(base_1.HtmlTagImporterBase));
exports.HtmlTableTagImporter = HtmlTableTagImporter;
