"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var history_runs_1 = require("../../core/model/character/history-runs");
var image_loading_options_1 = require("../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var list_level_properties_1 = require("../../core/model/numbering-lists/list-level-properties");
var numbering_list_1 = require("../../core/model/numbering-lists/numbering-list");
var control_1 = require("../../core/model/options/control");
var paragraph_style_1 = require("../../core/model/paragraph/paragraph-style");
var rich_utils_1 = require("../../core/model/rich-utils");
var run_type_1 = require("../../core/model/runs/run-type");
var sub_document_1 = require("../../core/model/sub-document");
var properties_bundle_1 = require("../../core/rich-utils/properties-bundle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var paste_html_data_history_item_1 = require("../model/history/paste-html-data-history-item");
var HtmlModelInserter = (function () {
    function HtmlModelInserter(modelManager, subDocPos, htmlData, charPropsBundle) {
        this.pastedListsIndices = {};
        this.fieldsMap = {};
        this.tableInfo = [];
        this.historyRuns = [];
        this.modelManager = modelManager;
        this.subDocPos = subDocPos;
        this.htmlData = htmlData;
        this.defaultMaskedParProps = this.subDocument.documentModel.defaultParagraphProperties.clone();
        this.defaultMaskedParProps.useValue = 0;
        this.defaultMaskedCharProps = this.subDocument.documentModel.defaultCharacterProperties.clone();
        this.defaultMaskedCharProps.useValue = 0;
        this.charPropsBundle = new properties_bundle_1.MaskedCharacterPropertiesBundle(control_1.ControlOptions.isEnabled(this.options.characterFormatting) ?
            charPropsBundle.props :
            this.defaultMaskedCharProps.clone(), charPropsBundle.style);
        this.position = subDocPos.position;
        this.tableInfo = control_1.ControlOptions.isEnabled(this.options.tables) ? htmlData.tablesInfo : [];
        if (!HtmlModelInserter.runConverterMap) {
            HtmlModelInserter.runConverterMap = {};
            HtmlModelInserter.runConverterMap[run_type_1.RunType.TextRun] = this.convertTextRun;
            HtmlModelInserter.runConverterMap[run_type_1.RunType.InlinePictureRun] = this.convertInlinePictureRun;
            HtmlModelInserter.runConverterMap[run_type_1.RunType.ParagraphRun] = this.convertParagraphRun;
            HtmlModelInserter.runConverterMap[run_type_1.RunType.FieldCodeStartRun] = this.convertFieldCodeStartRun;
            HtmlModelInserter.runConverterMap[run_type_1.RunType.FieldCodeEndRun] = this.convertFieldCodeEndRun;
            HtmlModelInserter.runConverterMap[run_type_1.RunType.FieldResultEndRun] = this.convertFieldResultEndRun;
        }
    }
    Object.defineProperty(HtmlModelInserter.prototype, "options", {
        get: function () { return this.modelManager.richOptions.control; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(HtmlModelInserter.prototype, "subDocument", {
        get: function () { return this.subDocPos.subDocument; },
        enumerable: true,
        configurable: true
    });
    ;
    HtmlModelInserter.prototype.insert = function () {
        var _this = this;
        for (var _i = 0, _a = this.htmlData.runsInfo; _i < _a.length; _i++) {
            var runInfo = _a[_i];
            this.position += HtmlModelInserter.runConverterMap[runInfo.runType].call(this, runInfo);
        }
        var intervalToPasteIn = fixed_1.FixedInterval.fromPositions(this.subDocPos.position, this.position);
        this.modelManager.history.addTransaction(function () {
            _this.modelManager.history.addAndRedo(new paste_html_data_history_item_1.PasteHtmlDataHistoryItem(_this.modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(_this.subDocPos.subDocument, intervalToPasteIn), _this.historyRuns, _this.tableInfo, _this.charPropsBundle));
        });
        return fixed_1.FixedInterval.fromPositions(this.subDocPos.position, this.position);
    };
    HtmlModelInserter.prototype.convertTextRun = function (run) {
        var text = run.text;
        if (!control_1.ControlOptions.isEnabled(this.options.tabSymbol))
            text = text.replace(/\t/gi, " ");
        if (this.options.tabMarker !== rich_utils_1.RichUtils.specialCharacters.TabMark)
            text = text.replace(/\t/gi, this.options.tabMarker);
        this.historyRuns.push(new history_runs_1.HistoryRun(run_type_1.RunType.TextRun, run.charPropsBundle, this.position, text));
        return text.length;
    };
    HtmlModelInserter.prototype.convertInlinePictureRun = function (run) {
        if (!control_1.ControlOptions.isEnabled(this.options.inlinePictures))
            return 0;
        this.historyRuns.push(new history_runs_1.HistoryRunInlinePicture(this.position, run.charPropsBundle, run.picInfo, image_loading_options_1.ImageLoadingOptions.initByActualSize(run.actualSize)));
        return run.runLength;
    };
    HtmlModelInserter.prototype.convertParagraphRun = function (run) {
        if (!control_1.ControlOptions.isEnabled(this.options.paragraphs))
            return 0;
        var listInfo = this.insertListInfo(run.listInfo);
        var maskedParagraphProperties = control_1.ControlOptions.isEnabled(this.options.paragraphFormatting) ?
            run.maskedParagraphProperties :
            this.defaultMaskedParProps.clone();
        this.historyRuns.push(new history_runs_1.HistoryRunParagraph(run.runType, run.charPropsBundle, new properties_bundle_1.MaskedParagraphPropertiesBundleFull(maskedParagraphProperties, undefined, listInfo, new paragraph_style_1.TabProperties()), this.position, rich_utils_1.RichUtils.specialCharacters.ParagraphMark, true));
        return 1;
    };
    HtmlModelInserter.prototype.convertFieldCodeStartRun = function (run) {
        var hyperlinkInfo = run.hyperlinkInfo;
        if (!control_1.ControlOptions.isEnabled(this.options.fields) || (hyperlinkInfo && !control_1.ControlOptions.isEnabled(this.options.hyperlinks)))
            return 0;
        var historyRun = new history_runs_1.HistoryRunFieldCodeStart(run.runType, run.charPropsBundle, this.position, rich_utils_1.RichUtils.specialCharacters.FieldCodeStartRun, false, this.position, undefined, undefined, hyperlinkInfo);
        this.fieldsMap[run.id] = historyRun;
        this.historyRuns.push(historyRun);
        return 1;
    };
    HtmlModelInserter.prototype.convertFieldCodeEndRun = function (run) {
        var histRun = this.fieldsMap[run.id];
        if (!histRun)
            return 0;
        this.historyRuns.push(new history_runs_1.HistoryRunFieldCodeEnd(run.runType, run.charPropsBundle, this.position, rich_utils_1.RichUtils.specialCharacters.FieldCodeEndRun));
        histRun.separatorPosition = this.position;
        return 1;
    };
    HtmlModelInserter.prototype.convertFieldResultEndRun = function (run) {
        var histRun = this.fieldsMap[run.id];
        if (!histRun)
            return 0;
        this.historyRuns.push(new history_runs_1.HistoryRunFieldResultEnd(run.runType, run.charPropsBundle, this.position, rich_utils_1.RichUtils.specialCharacters.FieldResultEndRun));
        histRun.endPosition = this.position + 1;
        delete this.fieldsMap[run.id];
        return 1;
    };
    HtmlModelInserter.prototype.insertListInfo = function (listInfo) {
        var model = this.subDocument.documentModel;
        var modelManipulator = this.modelManager.modelManipulator;
        if (!listInfo ||
            !control_1.ControlOptions.isEnabled(this.options.numberingBulleted) &&
                !control_1.ControlOptions.isEnabled(this.options.numberingMultiLevel) &&
                !control_1.ControlOptions.isEnabled(this.options.numberingSimple))
            return properties_bundle_1.ParagraphListInfo.default;
        if (!control_1.ControlOptions.isEnabled(this.options.numberingBulleted) && listInfo.listType === numbering_list_1.NumberingType.Bullet) {
            var isNumberingSimpleEnabled = control_1.ControlOptions.isEnabled(this.options.numberingSimple);
            listInfo.listType = isNumberingSimpleEnabled ? numbering_list_1.NumberingType.Simple : numbering_list_1.NumberingType.MultiLevel;
            listInfo.listFormat = list_level_properties_1.NumberingFormat.Decimal;
            listInfo.displayFormatString = "";
        }
        if (!control_1.ControlOptions.isEnabled(this.options.numberingSimple) && listInfo.listType === numbering_list_1.NumberingType.Simple) {
            listInfo.listType = control_1.ControlOptions.isEnabled(this.options.numberingBulleted) ? numbering_list_1.NumberingType.Bullet : numbering_list_1.NumberingType.MultiLevel;
            listInfo.displayFormatString = "";
        }
        if (!control_1.ControlOptions.isEnabled(this.options.numberingMultiLevel) && listInfo.listType === numbering_list_1.NumberingType.MultiLevel) {
            listInfo.listType = control_1.ControlOptions.isEnabled(this.options.numberingBulleted) ? numbering_list_1.NumberingType.Bullet : numbering_list_1.NumberingType.Simple;
            listInfo.displayFormatString = "";
        }
        var targetListIndex = this.pastedListsIndices[listInfo.listIndex];
        if (targetListIndex === undefined) {
            var abstractNumberingList = new numbering_list_1.AbstractNumberingList(model);
            var template = list_1.ListUtils.elementBy(model.abstractNumberingListTemplates, function (tmpl) { return tmpl.getListType() === listInfo.listType; });
            if (template) {
                abstractNumberingList.copyFrom(template);
                var numberingList = new numbering_list_1.NumberingList(model, modelManipulator.numberingList.addAbstractNumberingList(abstractNumberingList));
                targetListIndex = modelManipulator.numberingList.addNumberingList(numberingList);
                this.pastedListsIndices[listInfo.listIndex] = targetListIndex;
            }
        }
        if (targetListIndex === undefined)
            return properties_bundle_1.ParagraphListInfo.default;
        var numberingListIndex = targetListIndex;
        var listLevelIndex = listInfo.listLevel;
        var listLevel = model.numberingLists[numberingListIndex].levels[listLevelIndex];
        modelManipulator.numberingList.listLevelProperties.format.setValue(model, false, targetListIndex, listLevelIndex, listInfo.listFormat);
        if (listInfo.displayFormatString) {
            modelManipulator.numberingList.listLevelProperties.displayFormatString.setValue(model, false, targetListIndex, listLevelIndex, listInfo.displayFormatString);
        }
        if (listInfo.maskedCharacterProperties) {
            listLevel.setCharacterProperties(listInfo.maskedCharacterProperties);
            listLevel.onCharacterPropertiesChanged();
        }
        return new properties_bundle_1.ParagraphListInfo(numberingListIndex, listLevelIndex);
    };
    return HtmlModelInserter;
}());
exports.HtmlModelInserter = HtmlModelInserter;
