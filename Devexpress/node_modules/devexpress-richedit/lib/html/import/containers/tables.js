"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var TableInfo = (function () {
    function TableInfo(width, properties, rows) {
        this.width = width;
        this.properties = properties;
        this.rows = rows;
        this.normalize();
    }
    Object.defineProperty(TableInfo.prototype, "interval", {
        get: function () {
            return fixed_1.FixedInterval.fromPositions(this.rows[0].cells[0].startPosition, list_1.ListUtils.last(list_1.ListUtils.last(this.rows).cells).endPosition);
        },
        enumerable: true,
        configurable: true
    });
    TableInfo.prototype.normalize = function () {
        var minGridBefore = list_1.ListUtils.min(this.rows, function (row) { return row.gridBefore; }).gridBefore;
        if (minGridBefore > 0)
            list_1.ListUtils.forEach(this.rows, function (row) { return row.gridBefore -= minGridBefore; });
        var minGridAfter = list_1.ListUtils.min(this.rows, function (row) { return row.gridAfter; }).gridAfter;
        if (minGridAfter > 0)
            list_1.ListUtils.forEach(this.rows, function (row) { return row.gridAfter -= minGridAfter; });
        var maxCountLogicColumns = list_1.ListUtils.maxExtended(this.rows, function (row) { return row.countLogicColumns; }).maxValue;
        list_1.ListUtils.forEach(this.rows, function (row) {
            var rowCountLogicColumns = row.countLogicColumns;
            if (rowCountLogicColumns < maxCountLogicColumns) {
                var newGridAfter = maxCountLogicColumns - rowCountLogicColumns - row.gridAfter;
                if (newGridAfter) {
                    if (row.gridAfter == 0)
                        row.widthAfter = new table_units_1.TableWidthUnit().init(0, table_units_1.TableWidthUnitType.Auto);
                    row.gridAfter = newGridAfter;
                }
            }
        });
    };
    return TableInfo;
}());
exports.TableInfo = TableInfo;
var ImportedTableRowInfo = (function () {
    function ImportedTableRowInfo(gridBefore, gridAfter, widthBefore, widthAfter, properties, cells) {
        this.gridBefore = gridBefore;
        this.gridAfter = gridAfter;
        this.widthBefore = widthBefore;
        this.widthAfter = widthAfter;
        this.properties = properties;
        this.cells = cells;
    }
    Object.defineProperty(ImportedTableRowInfo.prototype, "countLogicColumns", {
        get: function () {
            return this.gridBefore + this.gridAfter + list_1.ListUtils.accumulate(this.cells, 0, function (acc, cell) { return acc + cell.columnSpan; });
        },
        enumerable: true,
        configurable: true
    });
    ImportedTableRowInfo.prototype.getCellByColumnSpan = function (colSpan) {
        var currSpan = this.gridBefore;
        return list_1.ListUtils.elementBy(this.cells, function (cell) {
            if (new fixed_1.FixedInterval(currSpan, cell.columnSpan).contains(colSpan))
                return true;
            currSpan += cell.columnSpan;
            return false;
        });
    };
    return ImportedTableRowInfo;
}());
exports.ImportedTableRowInfo = ImportedTableRowInfo;
var ImportedTableCellInfo = (function () {
    function ImportedTableCellInfo(preferredWidth, startPosition, endPosition, columnSpan, rowSpan, properties, firstWhenVerticallyMerged) {
        this.preferredWidth = preferredWidth;
        this.startPosition = startPosition;
        this.endPosition = endPosition;
        this.columnSpan = columnSpan;
        this.rowSpan = rowSpan;
        this.properties = properties;
        this.firstWhenVerticallyMerged = firstWhenVerticallyMerged;
    }
    ImportedTableCellInfo.prototype.clone = function () {
        return new ImportedTableCellInfo(this.preferredWidth, -1, -1, this.columnSpan, this.rowSpan, this.properties, this.firstWhenVerticallyMerged);
    };
    return ImportedTableCellInfo;
}());
exports.ImportedTableCellInfo = ImportedTableCellInfo;
