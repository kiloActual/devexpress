"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var enums_1 = require("../../../core/model/borders/enums");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var errors_1 = require("@devexpress/utils/lib/errors");
var attr_1 = require("@devexpress/utils/lib/utils/attr");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var math_1 = require("@devexpress/utils/lib/utils/math");
var utils_1 = require("./utils");
var HtmlImporterMaskedParagraphProperties = (function () {
    function HtmlImporterMaskedParagraphProperties() {
    }
    HtmlImporterMaskedParagraphProperties.prototype.import = function (colorProvider, element, isTableCellTag) {
        this.result = new paragraph_properties_1.MaskedParagraphProperties();
        this.element = element;
        this.elementStyle = element.style;
        var calculatedStyle = dom_1.DomUtils.getCurrentStyle(element);
        this.importAlignment();
        this.importFirstLineIndent();
        this.importLeftIndent();
        this.importRightIndent();
        this.importLineSpacing();
        this.importSpacingBefore();
        this.importSpacingAfter();
        if (!isTableCellTag) {
            this.importTopBorder(colorProvider, calculatedStyle);
            this.importRightBorder(colorProvider, calculatedStyle);
            this.importBottomBorder(colorProvider, calculatedStyle);
            this.importLeftBorder(colorProvider, calculatedStyle);
        }
        return this.result;
    };
    HtmlImporterMaskedParagraphProperties.prototype.importAlignment = function () {
        var textAlign = this.elementStyle.textAlign;
        if (!textAlign || !textAlign.length) {
            var parentCell = dom_1.DomUtils.getParentByTagName(this.element, "TD");
            if (parentCell)
                textAlign = attr_1.AttrUtils.getElementAttribute(parentCell, "align");
        }
        this.result.alignment = utils_1.HtmlImportUtils.getPropertyByMap(HtmlImporterMaskedParagraphProperties.MapAlignmentToType, textAlign, paragraph_properties_1.ParagraphAlignment.Left);
        this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAlignment, this.result.alignment != paragraph_properties_1.ParagraphAlignment.Left);
    };
    HtmlImporterMaskedParagraphProperties.prototype.importFirstLineIndent = function () {
        var firstLineIndent = utils_1.HtmlImportUtils.getValueInTwips(this.elementStyle.textIndent);
        if (firstLineIndent != null && firstLineIndent != 0) {
            this.result.firstLineIndentType = firstLineIndent > 0 ? paragraph_properties_1.ParagraphFirstLineIndent.Indented : paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
            this.result.firstLineIndent = Math.abs(firstLineIndent);
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseFirstLineIndent, true);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importLeftIndent = function () {
        var leftIndent = utils_1.HtmlImportUtils.getValueInTwips(this.elementStyle.marginLeft);
        if (leftIndent != null && leftIndent >= 0) {
            this.result.leftIndent = leftIndent;
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent, true);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importRightIndent = function () {
        var rightIndent = utils_1.HtmlImportUtils.getValueInTwips(this.elementStyle.marginRight);
        if (rightIndent != null && rightIndent >= 0) {
            this.result.rightIndent = rightIndent;
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightIndent, true);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importSpacingBefore = function () {
        var spacingBefore = utils_1.HtmlImportUtils.getValueInTwips(this.elementStyle.marginTop);
        if (spacingBefore != null && spacingBefore >= 0) {
            this.result.spacingBefore = spacingBefore;
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingBefore, true);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importSpacingAfter = function () {
        var spacingAfter = utils_1.HtmlImportUtils.getValueInTwips(this.elementStyle.marginBottom);
        if (spacingAfter != null && spacingAfter >= 0) {
            this.result.spacingAfter = spacingAfter;
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingAfter, true);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importLineSpacing = function () {
        this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLineSpacing, true);
        this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBeforeAutoSpacing, true);
        this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAfterAutoSpacing, true);
        var stringLineHeight = this.elementStyle.lineHeight;
        var height = utils_1.HtmlImportUtils.getTableWidthUnit(stringLineHeight);
        if (height == null) {
            this.setSpacingAsMultiple(parseFloat(stringLineHeight));
            return;
        }
        switch (height.type) {
            case table_units_1.TableWidthUnitType.FiftiethsOfPercent:
                this.setSpacingAsMultiple(height.value / table_units_1.TableWidthUnit.MAX_PERCENT_WIDTH);
                break;
            case table_units_1.TableWidthUnitType.ModelUnits:
                this.result.lineSpacing = height.value;
                this.result.lineSpacingType = this.elementStyle["mso-line-height-rule"] == "exactly" ?
                    paragraph_properties_1.ParagraphLineSpacingType.Exactly :
                    paragraph_properties_1.ParagraphLineSpacingType.AtLeast;
                break;
            case table_units_1.TableWidthUnitType.Nil:
            case table_units_1.TableWidthUnitType.Auto:
                break;
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.setSpacingAsMultiple = function (multipleValue) {
        if (!multipleValue || isNaN(multipleValue))
            return;
        this.result.lineSpacing = multipleValue;
        this.result.lineSpacingType =
            math_1.MathUtils.numberCloseTo(multipleValue, 1.5) ? paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral :
                (math_1.MathUtils.numberCloseTo(multipleValue, 2) ? paragraph_properties_1.ParagraphLineSpacingType.Double :
                    (math_1.MathUtils.numberCloseTo(multipleValue, 1) ? paragraph_properties_1.ParagraphLineSpacingType.Single :
                        paragraph_properties_1.ParagraphLineSpacingType.Multiple));
    };
    HtmlImporterMaskedParagraphProperties.prototype.importTopBorder = function (colorProvider, calculatedStyle) {
        var borderTopInfo = utils_1.HtmlImportUtils.getBorderInfo(colorProvider, calculatedStyle.borderTopWidth, calculatedStyle.borderTopStyle, calculatedStyle.borderTopColor);
        if (borderTopInfo) {
            this.result.topBorder.copyFrom(borderTopInfo);
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseTopBorder, borderTopInfo.style != enums_1.BorderLineStyle.None);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importRightBorder = function (colorProvider, calculatedStyle) {
        var borderRightInfo = utils_1.HtmlImportUtils.getBorderInfo(colorProvider, calculatedStyle.borderRightWidth, calculatedStyle.borderRightStyle, calculatedStyle.borderRightColor);
        if (borderRightInfo) {
            this.result.rightBorder.copyFrom(borderRightInfo);
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightBorder, borderRightInfo.style != enums_1.BorderLineStyle.None);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importBottomBorder = function (colorProvider, calculatedStyle) {
        var borderBottomInfo = utils_1.HtmlImportUtils.getBorderInfo(colorProvider, calculatedStyle.borderBottomWidth, calculatedStyle.borderBottomStyle, calculatedStyle.borderBottomColor);
        if (borderBottomInfo) {
            this.result.bottomBorder.copyFrom(borderBottomInfo);
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBottomBorder, borderBottomInfo.style != enums_1.BorderLineStyle.None);
        }
    };
    HtmlImporterMaskedParagraphProperties.prototype.importLeftBorder = function (colorProvider, calculatedStyle) {
        var borderLeftInfo = utils_1.HtmlImportUtils.getBorderInfo(colorProvider, calculatedStyle.borderLeftWidth, calculatedStyle.borderLeftStyle, calculatedStyle.borderLeftColor);
        if (borderLeftInfo) {
            this.result.leftBorder.copyFrom(borderLeftInfo);
            this.result.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftBorder, borderLeftInfo.style != enums_1.BorderLineStyle.None);
        }
    };
    HtmlImporterMaskedParagraphProperties.MapAlignmentToType = new map_creator_1.MapCreator()
        .add("right", paragraph_properties_1.ParagraphAlignment.Right)
        .add("justify", paragraph_properties_1.ParagraphAlignment.Justify)
        .add("center", paragraph_properties_1.ParagraphAlignment.Center)
        .get();
    return HtmlImporterMaskedParagraphProperties;
}());
exports.HtmlImporterMaskedParagraphProperties = HtmlImporterMaskedParagraphProperties;
