"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var list_level_properties_1 = require("../../../core/model/numbering-lists/list-level-properties");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var runs_1 = require("../containers/runs");
var utils_1 = require("./utils");
var ParagraphListPropertiesUtils = (function () {
    function ParagraphListPropertiesUtils(importer, htmlImporterMaskedCharacterProperties) {
        this.htmlImporterMaskedCharacterProperties = htmlImporterMaskedCharacterProperties;
        this.importer = importer;
    }
    ParagraphListPropertiesUtils.prototype.import = function (element, interval) {
        this.listItemElement = dom_1.DomUtils.getParentByTagName(element, "LI");
        this.msoListAttr = element.outerHTML.match(/mso-list:\s*\w*\s*level[^ ]/gi);
        if (!this.listItemElement && !this.msoListAttr)
            return null;
        this.parentListElement = this.listItemElement ? ParagraphListPropertiesUtils.getParentListElement(this.listItemElement) : null;
        if (!this.parentListElement)
            return null;
        var listIndex = this.importListIndex();
        var listLevelIndex = this.importListLevelIndex();
        var listFormat;
        var displayFormatString;
        var maskedCharacterProperties;
        if (this.listItemElement) {
            listFormat = this.importListFormatByListItemElement();
            displayFormatString = this.importDisplayFormatStringByParentListElement(listFormat, listLevelIndex);
            maskedCharacterProperties = null;
        }
        else {
            var listTextElement = ParagraphListPropertiesUtils.getListTextElement(element);
            var listText = ParagraphListPropertiesUtils.getListText(listTextElement);
            listFormat = ParagraphListPropertiesUtils.importListFormatByReserveWay(listText);
            displayFormatString = ParagraphListPropertiesUtils.importDisplayFormatStringByReserveWay(listFormat, listLevelIndex, listText);
            maskedCharacterProperties = this.htmlImporterMaskedCharacterProperties.import(listTextElement, interval, this.importer.charPropsBundle.props);
            ParagraphListPropertiesUtils.removeSomeHtml(element, listTextElement, listText);
        }
        return new runs_1.ImportedParagraphListInfo(listIndex, listLevelIndex, listFormat, listFormat == list_level_properties_1.NumberingFormat.Bullet ? numbering_list_1.NumberingType.Bullet : numbering_list_1.NumberingType.MultiLevel, displayFormatString, maskedCharacterProperties);
    };
    ParagraphListPropertiesUtils.prototype.importListIndex = function () {
        if (this.msoListAttr && this.msoListAttr.length)
            return parseInt(this.msoListAttr[0].replace(/mso-list:\s*[A-Za-z]*(\d*)[\s\S]*/gi, '$1'));
        var mainParentListElement = this.getMainParentListElement();
        if (!mainParentListElement)
            return 0;
        var lists = dom_1.DomUtils.getChildNodes(mainParentListElement.parentNode, function (e) {
            return e.tagName == "UL" || e.tagName == "OL";
        });
        return list_1.ListUtils.accumulate(lists, 0, function (acc, list, index) {
            return acc + (list == mainParentListElement ? index : 0);
        });
    };
    ParagraphListPropertiesUtils.prototype.importListLevelIndex = function () {
        if (this.msoListAttr && this.msoListAttr.length)
            return parseInt(this.msoListAttr[0].replace(/mso-list:\s*\w*\s*level/gi, '')) - 1;
        var listLevelIndex = 0;
        var parentListItemElement = this.parentListElement ? dom_1.DomUtils.getParentByTagName(this.parentListElement, "LI") : null;
        while (parentListItemElement) {
            listLevelIndex++;
            parentListItemElement = dom_1.DomUtils.getParentByTagName(parentListItemElement.parentNode, "LI");
        }
        return listLevelIndex;
    };
    ParagraphListPropertiesUtils.prototype.importListFormatByListItemElement = function () {
        return ParagraphListPropertiesUtils.getListType(this.parentListElement);
    };
    ParagraphListPropertiesUtils.importListFormatByReserveWay = function (listText) {
        if (!listText)
            return list_level_properties_1.NumberingFormat.None;
        var encodedIndexText = encodeURI(listText);
        if (listText == "o" || encodedIndexText.indexOf("%B7") > -1 || encodedIndexText.indexOf("%A7") > -1)
            return list_level_properties_1.NumberingFormat.Bullet;
        if (/^(IX|IV|V?I{1,3})/.test(listText))
            return list_level_properties_1.NumberingFormat.UpperRoman;
        if (/^(ix|iv|v?i{1,3})/.test(listText))
            return list_level_properties_1.NumberingFormat.LowerRoman;
        if (/[0-9]/.test(listText))
            return list_level_properties_1.NumberingFormat.Decimal;
        if (/[a-z]/.test(listText))
            return list_level_properties_1.NumberingFormat.LowerLetter;
        if (/[A-Z]/.test(listText))
            return list_level_properties_1.NumberingFormat.UpperLetter;
        return list_level_properties_1.NumberingFormat.None;
    };
    ParagraphListPropertiesUtils.prototype.importDisplayFormatStringByParentListElement = function (listFormat, listLevelIndex) {
        var listElementParentList = ParagraphListPropertiesUtils.getParentListElement(this.parentListElement.parentNode);
        if (listElementParentList) {
            var parentListFormat = ParagraphListPropertiesUtils.getListType(listElementParentList);
            if (listFormat != parentListFormat)
                return "{" + listLevelIndex + "}";
        }
        return "";
    };
    ParagraphListPropertiesUtils.importDisplayFormatStringByReserveWay = function (listFormat, listLevelIndex, listText) {
        if (listFormat == list_level_properties_1.NumberingFormat.Bullet)
            return "";
        if (listText.indexOf(".") > -1)
            return list_1.ListUtils.accumulate(listText.split("."), "", function (acc, listItem, listIndex) {
                return listItem ? acc + "{" + listIndex + "}." : acc;
            });
        var matches = listText.match(/^(\W?)(\w+)(\W?)/);
        return matches && matches.length > 2 ? matches[1] + "{" + listLevelIndex + "}" + matches[3] : listText.charAt(0);
    };
    ParagraphListPropertiesUtils.prototype.getMainParentListElement = function () {
        var listElement = this.parentListElement ? this.parentListElement : null;
        var mainParentListElement = null;
        while (listElement) {
            mainParentListElement = listElement;
            listElement = ParagraphListPropertiesUtils.getParentListElement(listElement.parentNode);
        }
        return mainParentListElement;
    };
    ParagraphListPropertiesUtils.getListType = function (listElement) {
        return utils_1.HtmlImportUtils.getPropertyByMap(ParagraphListPropertiesUtils.MapListTypeToType, dom_1.DomUtils.getCurrentStyle(listElement).listStyleType, list_level_properties_1.NumberingFormat.None);
    };
    ParagraphListPropertiesUtils.getListTextElement = function (element) {
        var ignoreElements = dom_1.DomUtils.getNodes(element, function (e) { return e.outerHTML.match(/mso-list:Ignore/gi) != null; });
        var listTextElement = ignoreElements.length ? ignoreElements[0] : null;
        if (!listTextElement) {
            var whiteSpacesOnlyTextElements = dom_1.DomUtils.getNodes(element, function (e) {
                return dom_1.DomUtils.isTextNode(e) && e.nodeValue && !string_1.StringUtils.trim(e.nodeValue) ||
                    e.textContent && !string_1.StringUtils.trim(e.textContent) ||
                    e.innerText && !string_1.StringUtils.trim(e.innerText);
            });
            listTextElement = whiteSpacesOnlyTextElements.length ? whiteSpacesOnlyTextElements[0].previousSibling : (element.firstChild);
        }
        return listTextElement;
    };
    ParagraphListPropertiesUtils.getListText = function (listTextElement) {
        return listTextElement ? string_1.StringUtils.trim((listTextElement.nodeValue || dom_1.DomUtils.getInnerText(listTextElement)).split(" ")[0]) : "";
    };
    ParagraphListPropertiesUtils.getParentListElement = function (childElement) {
        return dom_1.DomUtils.getParentByTagName(childElement, "UL") || dom_1.DomUtils.getParentByTagName(childElement, "OL");
    };
    ParagraphListPropertiesUtils.removeSomeHtml = function (element, listTextElement, listText) {
        if (element.childNodes.length == 1)
            element.innerHTML = string_1.StringUtils.trimStart(element.innerHTML.replace(listText, ''));
        else {
            var listTextElementParent = listTextElement.parentNode;
            listTextElementParent.removeChild(listTextElement);
            listTextElementParent.innerHTML = listTextElementParent.innerHTML.replace(/^<([^\s>]+)(\s[^>]*)?>(\s|&nbsp;){2,}<\/\1>/g, '');
            if (listTextElement.parentNode != element)
                element.innerHTML = element.innerHTML.replace(/<([^\s>]+)(\s[^>]*)?><\/\1>/g, '');
        }
    };
    ParagraphListPropertiesUtils.MapListTypeToType = new map_creator_1.MapCreator()
        .add("decimal", list_level_properties_1.NumberingFormat.Decimal)
        .add("circle", list_level_properties_1.NumberingFormat.Bullet)
        .add("disc", list_level_properties_1.NumberingFormat.Bullet)
        .add("square", list_level_properties_1.NumberingFormat.Bullet)
        .add("lower-alpha", list_level_properties_1.NumberingFormat.LowerLetter)
        .add("lower-latin", list_level_properties_1.NumberingFormat.LowerLetter)
        .add("upper-alpha", list_level_properties_1.NumberingFormat.UpperLetter)
        .add("upper-latin", list_level_properties_1.NumberingFormat.UpperLetter)
        .add("lower-roman", list_level_properties_1.NumberingFormat.LowerRoman)
        .add("upper-roman", list_level_properties_1.NumberingFormat.UpperRoman)
        .get();
    return ParagraphListPropertiesUtils;
}());
exports.ParagraphListPropertiesUtils = ParagraphListPropertiesUtils;
