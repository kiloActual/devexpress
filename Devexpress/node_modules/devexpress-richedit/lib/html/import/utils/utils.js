"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var border_info_1 = require("../../../core/model/borders/border-info");
var enums_1 = require("../../../core/model/borders/enums");
var color_1 = require("../../../core/model/color/color");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var color_2 = require("@devexpress/utils/lib/utils/color");
var HtmlImportUtils = (function () {
    function HtmlImportUtils() {
    }
    HtmlImportUtils.getTableWidthUnit = function (stringValue) {
        if (!stringValue)
            return null;
        var unitTypeMatches = stringValue.match(/(px|in|cm|mm|pt|pc|em|ex|%)/g);
        var unitType = unitTypeMatches ? unitTypeMatches[0] : "px";
        var numberValue = parseFloat(stringValue.replace(unitType, ''));
        if (isNaN(numberValue))
            return null;
        switch (unitType) {
            case "%":
                return new table_units_1.TableWidthUnit().init(numberValue * table_units_1.TableWidthUnit.MUTLIPLIER_FOR_PERCENTS, table_units_1.TableWidthUnitType.FiftiethsOfPercent);
            case "px":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.pixelsToTwips(numberValue), table_units_1.TableWidthUnitType.ModelUnits);
            case "in":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.inchesToTwips(numberValue), table_units_1.TableWidthUnitType.ModelUnits);
            case "cm":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.centimetersToTwips(numberValue), table_units_1.TableWidthUnitType.ModelUnits);
            case "mm":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.centimetersToTwips(numberValue) * 10, table_units_1.TableWidthUnitType.ModelUnits);
            case "pt":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.pointsToTwips(numberValue), table_units_1.TableWidthUnitType.ModelUnits);
            case "pc":
                return new table_units_1.TableWidthUnit().init(unit_converter_1.UnitConverter.picasToTwips(numberValue), table_units_1.TableWidthUnitType.ModelUnits);
            case "em":
            case "ex":
            default:
                return new table_units_1.TableWidthUnit().init(0, table_units_1.TableWidthUnitType.Nil);
        }
    };
    HtmlImportUtils.getValueInTwips = function (stringValue) {
        var result = HtmlImportUtils.getTableWidthUnit(stringValue);
        if (result === null)
            return null;
        if (result.type == table_units_1.TableWidthUnitType.ModelUnits)
            return result.value;
        return 0;
    };
    HtmlImportUtils.getBorderInfo = function (colorProvider, borderWidth, borderStyle, borderColor) {
        if ((!borderWidth || !borderWidth.length) && (!borderStyle || !borderStyle.length) && (!borderColor || !borderColor.length))
            return null;
        var border = new border_info_1.BorderInfo();
        var width = this.getTableWidthUnit(borderWidth);
        if (width != null && width.type == table_units_1.TableWidthUnitType.ModelUnits)
            border.width = width.value;
        border.style = HtmlImportUtils.MapBorderStyleToType[borderStyle];
        if (border.style === undefined)
            border.style = enums_1.BorderLineStyle.None;
        var color = color_2.ColorUtils.fromString(borderColor);
        if (color != null)
            border.color = colorProvider.getModelColorFromRgba(color == color_1.ColorHelper.BLACK_COLOR ? 0 : color);
        return border;
    };
    HtmlImportUtils.importBorder = function (colorProvider, props, borders, mask, setBorder, borderWidth, borderStyle, borderColor) {
        var borderInfo = HtmlImportUtils.getBorderInfo(colorProvider, borderWidth, borderStyle, borderColor);
        if (borderInfo) {
            setBorder(borders, borderInfo.clone());
            props.setUseValue(mask, borderInfo.style != enums_1.BorderLineStyle.None);
        }
    };
    HtmlImportUtils.setBorders = function (colorProvider, props, borders, style, topMask, rightMask, bottomMask, leftMask) {
        HtmlImportUtils.importBorder(colorProvider, props, borders, topMask, function (brds, brd) { return brds.topBorder = brd; }, style.borderTopWidth, style.borderTopStyle, style.borderTopColor);
        HtmlImportUtils.importBorder(colorProvider, props, borders, rightMask, function (brds, brd) { return brds.rightBorder = brd; }, style.borderRightWidth, style.borderRightStyle, style.borderRightColor);
        HtmlImportUtils.importBorder(colorProvider, props, borders, bottomMask, function (brds, brd) { return brds.bottomBorder = brd; }, style.borderBottomWidth, style.borderBottomStyle, style.borderBottomColor);
        HtmlImportUtils.importBorder(colorProvider, props, borders, leftMask, function (brds, brd) { return brds.leftBorder = brd; }, style.borderLeftWidth, style.borderLeftStyle, style.borderLeftColor);
    };
    HtmlImportUtils.getPropertyByMap = function (map, elementBy, defaultValue) {
        var mapedElement = map[elementBy];
        return mapedElement !== undefined ? mapedElement : defaultValue;
    };
    HtmlImportUtils.MapBorderStyleToType = new map_creator_1.MapCreator()
        .add("dashed", enums_1.BorderLineStyle.Dashed)
        .add("dotted", enums_1.BorderLineStyle.Dotted)
        .add("double", enums_1.BorderLineStyle.Double)
        .add("inset", enums_1.BorderLineStyle.Inset)
        .add("outset", enums_1.BorderLineStyle.Outset)
        .add("solid", enums_1.BorderLineStyle.Single)
        .get();
    return HtmlImportUtils;
}());
exports.HtmlImportUtils = HtmlImportUtils;
