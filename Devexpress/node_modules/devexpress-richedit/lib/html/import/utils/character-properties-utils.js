"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("../../../core/model/character/enums");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var font_chooser_1 = require("../../../core/model/fonts/font-chooser");
var control_1 = require("../../../core/model/options/control");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var properties_bundle_1 = require("../../../core/rich-utils/properties-bundle");
var color_1 = require("@devexpress/utils/lib/utils/color");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var load_font_info_1 = require("../load-font-info");
var font_utils_1 = require("./font-utils");
var HtmlImporterMaskedCharacterProperties = (function () {
    function HtmlImporterMaskedCharacterProperties(importer, loadFontInfos, tempFontInfoCache, allowCreateNewFonts) {
        this.importer = importer;
        this.loadFontInfos = loadFontInfos;
        this.tempFontInfoCache = tempFontInfoCache;
        this.allowCreateNewFonts = allowCreateNewFonts;
    }
    Object.defineProperty(HtmlImporterMaskedCharacterProperties.prototype, "model", {
        get: function () { return this.importer.modelManager.model; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(HtmlImporterMaskedCharacterProperties.prototype, "controlOptions", {
        get: function () { return this.importer.modelManager.richOptions.control; },
        enumerable: true,
        configurable: true
    });
    ;
    HtmlImporterMaskedCharacterProperties.prototype.getBundleFrom = function (element, interval) {
        return new properties_bundle_1.MaskedCharacterPropertiesBundle(this.import(element, interval, this.importer.charPropsBundle.props), this.importer.charPropsBundle.style);
    };
    HtmlImporterMaskedCharacterProperties.prototype.import = function (element, interval, initialCharacterProperties) {
        this.initialCharacterProperties = initialCharacterProperties;
        this.result = initialCharacterProperties.clone();
        this.styledElement = dom_1.DomUtils.isHTMLElementNode(element) ? element : (element.parentElement || element.parentNode);
        if (this.styledElement !== element && this.styledElement.tagName.toUpperCase() == 'TD')
            return this.result;
        this.currentStyle = dom_1.DomUtils.getCurrentStyle(this.styledElement);
        if (!this.currentStyle)
            return this.result;
        this.importFontBold();
        this.importFontItalic();
        this.importAllCaps();
        this.importStrikeoutType();
        this.importUnderlineType();
        this.importForeColor();
        this.importBackColor();
        this.importFontInfo(interval);
        this.importFontSize();
        this.importHidden();
        this.importSuperscript();
        this.importSubscript();
        return this.result;
    };
    HtmlImporterMaskedCharacterProperties.prototype.importFontBold = function () {
        switch (this.currentStyle.fontWeight) {
            case "bold":
            case "700":
                this.result.fontBold = true;
                this.result.setUseValue(enums_1.CharacterPropertiesMask.UseFontBold, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importFontItalic = function () {
        if (this.currentStyle.fontStyle == "italic") {
            this.result.fontItalic = true;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseFontItalic, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importAllCaps = function () {
        if (this.currentStyle.textTransform == "uppercase") {
            this.result.allCaps = true;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseAllCaps, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importStrikeoutType = function () {
        if (/.*line-through.*/gi.test(this.currentStyle.textDecoration)) {
            this.result.fontStrikeoutType = enums_1.StrikeoutType.Single;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseFontStrikeoutType, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importUnderlineType = function () {
        if (/.*underline.*/gi.test(this.currentStyle.textDecoration)) {
            this.result.fontUnderlineType = enums_1.UnderlineType.Single;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseFontUnderlineType, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importForeColor = function () {
        if (this.styledElement.style.color !== "") {
            var foreColor = color_1.ColorUtils.fromString(this.currentStyle.color);
            if (foreColor != null) {
                this.result.textColor = color_model_info_1.ColorModelInfo.makeByColor(foreColor);
                this.result.setUseValue(enums_1.CharacterPropertiesMask.UseForeColorIndex, true);
            }
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importBackColor = function () {
        if (this.styledElement.style.backgroundColor !== "") {
            var backColor = color_1.ColorUtils.fromString(this.currentStyle.backgroundColor);
            if (backColor) {
                this.result.shadingInfo = shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(backColor));
                this.result.setUseValue(enums_1.CharacterPropertiesMask.UseShadingInfoIndex, true);
                this.result.setUseValue(enums_1.CharacterPropertiesMask.UseHighlightColorIndex, false);
            }
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importFontInfo = function (interval) {
        if (this.styledElement.style.fontFamily) {
            var cssFontFamily = this.currentStyle.fontFamily;
            var fontInfo = new font_chooser_1.FontChooser(this.model.cache.fontInfoCache).chooseByCssString(cssFontFamily);
            if (!fontInfo) {
                if (control_1.ControlOptions.isEnabled(this.controlOptions.characterFormatting) && this.allowCreateNewFonts) {
                    var fontName = dom_1.DomUtils.getFontFamiliesFromCssString(cssFontFamily)[0];
                    fontInfo = this.tempFontInfoCache.getItemByName(fontName);
                    if (!fontInfo) {
                        var sourceFont = this.initialCharacterProperties.fontInfo || this.model.defaultCharacterProperties.fontInfo;
                        fontInfo = sourceFont.clone();
                        fontInfo.name = fontName;
                        fontInfo.cssString = cssFontFamily;
                        this.tempFontInfoCache.getItem(fontInfo);
                    }
                    this.loadFontInfos.push(new load_font_info_1.LoadFontInfo(fontInfo, this.importer.subDocument, interval));
                }
                else
                    fontInfo = this.model.defaultCharacterProperties.fontInfo;
            }
            this.result.fontInfo = fontInfo;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseFontName, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importFontSize = function () {
        if (this.styledElement.style.fontSize) {
            var parentCurrentStyle = dom_1.DomUtils.getCurrentStyle(this.styledElement.parentElement || this.styledElement.parentNode);
            var fontSize = font_utils_1.HtmlImporterFontUtils.getFontSize(this.currentStyle.fontSize, parentCurrentStyle ? parentCurrentStyle.fontSize : null);
            if (fontSize != null && fontSize > 0) {
                this.result.fontSize = fontSize;
                this.result.setUseValue(enums_1.CharacterPropertiesMask.UseDoubleFontSize, true);
            }
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importHidden = function () {
        if (this.currentStyle.display == "none") {
            this.result.hidden = true;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseHidden, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importSuperscript = function () {
        if (this.currentStyle.verticalAlign == "super") {
            this.result.script = enums_1.CharacterFormattingScript.Superscript;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseScript, true);
        }
    };
    HtmlImporterMaskedCharacterProperties.prototype.importSubscript = function () {
        if (this.currentStyle.verticalAlign == "sub") {
            this.result.script = enums_1.CharacterFormattingScript.Subscript;
            this.result.setUseValue(enums_1.CharacterPropertiesMask.UseScript, true);
        }
    };
    return HtmlImporterMaskedCharacterProperties;
}());
exports.HtmlImporterMaskedCharacterProperties = HtmlImporterMaskedCharacterProperties;
