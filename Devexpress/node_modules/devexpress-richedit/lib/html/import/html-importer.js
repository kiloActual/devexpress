"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../base-utils/map-creator");
var columns_calculator_1 = require("../../core/layout-formatter/formatter/utils/columns-calculator");
var font_info_cache_1 = require("../../core/model/caches/hashed-caches/font-info-cache");
var run_type_1 = require("../../core/model/runs/run-type");
var log_1 = require("../../core/rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../core/rich-utils/debug/logger/base-logger/log-source");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var runs_1 = require("./containers/runs");
var html_model_inserter_1 = require("./html-model-inserter");
var a_1 = require("./importers/a");
var b_1 = require("./importers/b");
var br_1 = require("./importers/br");
var center_1 = require("./importers/center");
var cite_1 = require("./importers/cite");
var div_1 = require("./importers/div");
var em_1 = require("./importers/em");
var i_1 = require("./importers/i");
var img_1 = require("./importers/img");
var li_1 = require("./importers/li");
var ol_1 = require("./importers/ol");
var p_1 = require("./importers/p");
var pre_1 = require("./importers/pre");
var span_1 = require("./importers/span");
var table_1 = require("./importers/table");
var tbody_1 = require("./importers/tbody");
var td_1 = require("./importers/td");
var text_node_1 = require("./importers/text-node");
var tr_1 = require("./importers/tr");
var tt_1 = require("./importers/tt");
var ul_1 = require("./importers/ul");
var undefined_1 = require("./importers/undefined");
var character_properties_utils_1 = require("./utils/character-properties-utils");
var paragraph_list_properties_utils_1 = require("./utils/paragraph-list-properties-utils");
var rich_utils_1 = require("../../core/model/rich-utils");
var paragraph_properties_utils_1 = require("./utils/paragraph-properties-utils");
var LevelInfo = (function () {
    function LevelInfo(element, childElements, allowInsertRuns) {
        this.element = element;
        this.childElements = childElements;
        this.allowInsertRuns = allowInsertRuns;
    }
    LevelInfo.prototype.initTagImporter = function (importer) {
        if (dom_1.DomUtils.isTextNode(this.element))
            this.tagImporter = new text_node_1.HtmlTextNodeImporter(importer);
        else {
            var constr = importer.tagImporters[LevelInfo.getElementTag(this.element)];
            this.tagImporter = new (constr ? constr : undefined_1.HtmlUndefinedTagImporter)(importer);
        }
        return this;
    };
    LevelInfo.getElementTag = function (elem) {
        var tag = elem.tagName;
        return tag ? tag.toUpperCase() : "";
    };
    return LevelInfo;
}());
exports.LevelInfo = LevelInfo;
var HtmlImportData = (function () {
    function HtmlImportData(runsInfo, tablesInfo) {
        this.runsInfo = runsInfo;
        this.tablesInfo = tablesInfo;
    }
    return HtmlImportData;
}());
exports.HtmlImportData = HtmlImportData;
var HtmlImporter = (function () {
    function HtmlImporter(modelManager, measurer, subDocPosition, initElements, charPropsBundle) {
        this.fieldsId = 0;
        if (!HtmlImporter.importers) {
            HtmlImporter.importers = [
                a_1.HtmlATagImporter,
                b_1.HtmlBTagImporter,
                br_1.HtmlBrTagImporter,
                center_1.HtmlCenterTagImporter,
                cite_1.HtmlCiteTagImporter,
                div_1.HtmlDivTagImporter,
                em_1.HtmlEmTagImporter,
                i_1.HtmlITagImporter,
                img_1.HtmlImgTagImporter,
                li_1.HtmlLiTagImporter,
                ol_1.HtmlOlTagImporter,
                p_1.HtmlPTagImporter,
                table_1.HtmlTableTagImporter,
                tbody_1.HtmlTbodyTagImporter,
                p_1.HtmlH1TagImporter,
                p_1.HtmlH2TagImporter,
                p_1.HtmlH3TagImporter,
                p_1.HtmlH4TagImporter,
                p_1.HtmlH5TagImporter,
                p_1.HtmlH6TagImporter,
                pre_1.HtmlPreTagImporter,
                span_1.HtmlSpanTagImporter,
                tr_1.HtmlTrTagImporter,
                tt_1.HtmlTtTagImporter,
                td_1.HtmlTdTagImporter,
                td_1.HtmlThTagImporter,
                ul_1.HtmlUlTagImporter,
            ];
        }
        this.charPropsBundle = charPropsBundle;
        this.subDocPosition = subDocPosition;
        this.modelManager = modelManager;
        this.measurer = measurer;
        this.currPosition = this.subDocPosition.position;
        this.levelInfo = [new LevelInfo(null, initElements, true)];
        this.loadFontInfos = [];
        this.tempFontInfoCache = new font_info_cache_1.FontInfoCache(this.modelManager.model.cache.fontInfoCache.fontMeasurer);
        this.htmlImporterMaskedCharacterProperties =
            new character_properties_utils_1.HtmlImporterMaskedCharacterProperties(this, this.loadFontInfos, this.tempFontInfoCache, !modelManager.richOptions.fonts.limitedFonts);
        this.paragraphListpropertiesUtils = new paragraph_list_properties_utils_1.ParagraphListPropertiesUtils(this, this.htmlImporterMaskedCharacterProperties);
        this.tagImporters = {};
        for (var _i = 0, _a = HtmlImporter.importers; _i < _a.length; _i++) {
            var importerConst = _a[_i];
            this.tagImporters[new importerConst(this).elementTag()] = importerConst;
        }
    }
    Object.defineProperty(HtmlImporter.prototype, "currElement", {
        get: function () { return list_1.ListUtils.last(this.levelInfo).element; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(HtmlImporter.prototype, "currElementChilds", {
        get: function () { return list_1.ListUtils.last(this.levelInfo).childElements; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(HtmlImporter.prototype, "subDocument", {
        get: function () { return this.subDocPosition.subDocument; },
        enumerable: true,
        configurable: true
    });
    HtmlImporter.prototype.import = function () {
        var _this = this;
        this.importedRunsInfo = [];
        this.importedTablesInfo = [];
        list_1.ListUtils.clear(this.loadFontInfos);
        this.tempFontInfoCache.clear();
        var insertedInterval;
        this.modelManager.history.addTransaction(function () {
            var pos = _this.subDocPosition.position;
            _this.prevRunIsParagraph = pos == 0 ||
                (_this.subDocument.getRunByPosition(pos - 1).isParagraphOrSectionRun() &&
                    list_1.ListUtils.allOf(_this.subDocument.tables, function (tbl) { return tbl.getEndPosition() != pos; }));
            _this.convertChildElements();
            if (_this.importedRunsInfo.length)
                insertedInterval = new html_model_inserter_1.HtmlModelInserter(_this.modelManager, _this.subDocPosition, new HtmlImportData(_this.importedRunsInfo, _this.getSortedTables()), _this.charPropsBundle).insert();
            else
                insertedInterval = new fixed_1.FixedInterval(_this.subDocPosition.position, 0);
            for (var _i = 0, _a = _this.loadFontInfos; _i < _a.length; _i++) {
                var info = _a[_i];
                _this.modelManager.modelManipulator.font.loadFontInfo(info.fontInfo, info.subDocument, [info.applyNewFontOnIntervalsAfterLoad], _this.measurer);
            }
        });
        return insertedInterval;
    };
    HtmlImporter.prototype.convertChildElements = function () {
        for (var _i = 0, _a = this.currElementChilds; _i < _a.length; _i++) {
            var element = _a[_i];
            this.convertElement(element);
        }
    };
    HtmlImporter.prototype.getSortedTables = function () {
        return this.importedTablesInfo.sort(function (a, b) {
            var aInt = a.interval;
            var bInt = b.interval;
            var posDiff = aInt.start - bInt.start;
            if (posDiff)
                return posDiff;
            return aInt.containsInterval(bInt) ? -1 : 1;
        });
    };
    HtmlImporter.prototype.convertElement = function (element) {
        var currLevelInfo = new LevelInfo(element, element.childNodes, list_1.ListUtils.last(this.levelInfo).allowInsertRuns)
            .initTagImporter(this);
        this.levelInfo.push(currLevelInfo);
        var importer = currLevelInfo.tagImporter;
        this.putDownParentPropertiesToChild();
        if (importer.isAllowed())
            importer.importBefore();
        if (importer.isImportChilds())
            this.convertChildElements();
        if (importer.isAllowed())
            importer.importAfter();
        this.levelInfo.pop();
    };
    HtmlImporter.prototype.putDownParentPropertiesToChild = function () {
        if (!this.currElementChilds)
            return;
        var element = this.currElement;
        var missTag = HtmlImporter.MapMissTablePropertiesByTagNames[list_1.ListUtils.last(this.levelInfo).tagImporter.elementTag()];
        list_1.ListUtils.forEach(this.currElementChilds, function (childElement) {
            var childElemStyle = childElement.style;
            if (!childElemStyle)
                return;
            for (var prop in childElemStyle) {
                if (missTag && /^(border|background|marginLeft)/gi.test(prop))
                    continue;
                if (childElemStyle[prop] === "" && element.style[prop] !== "" && !(HtmlImporter.MapShorthandProperty[prop]))
                    childElemStyle[prop] = element.style[prop];
            }
        });
    };
    HtmlImporter.prototype.addRun = function (run, forceAdd) {
        if (forceAdd === void 0) { forceAdd = false; }
        if (forceAdd || list_1.ListUtils.last(this.levelInfo).allowInsertRuns) {
            this.importedRunsInfo.push(run);
            this.currPosition += run.runLength;
            this.prevRunIsParagraph = run.runType == run_type_1.RunType.ParagraphRun || run.runType == run_type_1.RunType.SectionRun;
        }
    };
    HtmlImporter.prototype.addParagraphRun = function (listInfo, element, isTableCellTag) {
        if (isTableCellTag === void 0) { isTableCellTag = false; }
        var htmlProperties = new paragraph_properties_utils_1.HtmlImporterMaskedParagraphProperties();
        var properties = htmlProperties.import(this.modelManager.model.colorProvider, element, isTableCellTag);
        this.removeAllTrailingLineBreaks();
        this.addRun(new runs_1.ImportedParagraphRunInfo(listInfo, this.charPropsBundle, properties));
    };
    HtmlImporter.prototype.removeAllTrailingLineBreaks = function () {
        var last = this.importedRunsInfo.length - 1;
        for (var i = last; i >= last - 1; i--) {
            var runInfo = this.importedRunsInfo[i];
            if (!(runInfo instanceof runs_1.ImportedTextRunInfo))
                return;
            if (runInfo.text !== rich_utils_1.RichUtils.specialCharacters.LineBreak)
                return;
            this.importedRunsInfo.pop();
        }
    };
    HtmlImporter.prototype.getLastImportedRun = function () {
        return list_1.ListUtils.last(this.importedRunsInfo);
    };
    HtmlImporter.prototype.columnSize = function () {
        var section = this.modelManager.model.getSectionByPosition(this.subDocPosition.position);
        return columns_calculator_1.ColumnCalculator.findMinimalColumnSize(section.sectionProperties)
            .applyConverter(unit_converter_1.UnitConverter.pixelsToTwips);
    };
    HtmlImporter.convertHtml = function (html) {
        log_1.Log.print(log_source_1.LogSource.HtmlImporter, "convertHtml", function () { return html; });
        html = html.replace(/<(\w[^>]*) lang=([^ |>]*)([^>]*)/gi, "<$1$3");
        html = html.replace(/\s*mso-bidi-font-family/gi, "font-family");
        html = html.replace(/\s*MARGIN: 0cm 0cm 0pt\s*;/gi, '');
        html = html.replace(/\s*MARGIN: 0cm 0cm 0pt\s*"/gi, "\"");
        html = html.replace(/\s*TEXT-INDENT: 0cm\s*;/gi, '');
        html = html.replace(/\s*TEXT-INDENT: 0cm\s*"/gi, "\"");
        html = html.replace(/\s*FONT-VARIANT: [^\s;]+;?"/gi, "\"");
        html = html.replace(/\s*tab-stops:[^;"]*;?/gi, '');
        html = html.replace(/\s*tab-stops:[^"]*/gi, '');
        html = html.replace(/<\w+:imagedata/gi, '<img');
        html = html.replace(/<p([^>]*)><o:[pP][^>]*>\s*<\/o:[pP]><\/p>(?=\s*<\/td>)/gi, '<p$1>&nbsp;<\/p>');
        html = html.replace(/<\/?\w+:[^>]*>/gi, '');
        html = html.replace(/<STYLE[^>]*>[\s\S]*?<\/STYLE[^>]*>/gi, '');
        html = html.replace(/<(?:META|LINK)[^>]*>\s*/gi, '');
        html = html.replace(/<\\?\?xml[^>]*>/gi, '');
        html = html.replace(/<o:[pP][^>]*>\s*<\/o:[pP]>/gi, '');
        html = html.replace(/<o:[pP][^>]*>.*?<\/o:[pP]>/gi, '&nbsp;');
        html = html.replace(/<st1:.*?>/gi, '');
        html = html.replace(/<\!--[\s\S]*?-->/g, '');
        html = html.replace(/\s*style="\s*"/gi, '');
        html = html.replace(/style=""/ig, "");
        html = html.replace(/style=''/ig, "");
        var stRegExp = new RegExp('(?:style=\\")([^\\"]*)(?:\\")', 'gi');
        html = html.replace(stRegExp, function (str) {
            str = str.replace(/&quot;/gi, "'");
            str = str.replace(/&#xA;/gi, " ");
            return str;
        });
        html = html.replace(/^\s|\s$/gi, '');
        html = html.replace(/<font[^>]*>([^<>]+)<\/font>/gi, '$1');
        html = html.replace(/<span\s*><span\s*>([^<>]+)<\/span><\/span>/ig, '$1');
        html = html.replace(/<span>([^<>]+)<\/span>/gi, '$1');
        html = html.replace(/<li([^>]*)>([^<>]+)<\/li>/gi, '<li$1><p>$2</p></li>');
        html = html.replace(/<li([^>]*)>(([^<>]*)<(?!p)[\s\S]*?)<\/li>/gi, '<li$1><p>$2</p></li>');
        html = html.replace(/<caption([^>]*)>[\s\S]*?<\/caption>/gi, '');
        var array = html.match(/<[^>]*style\s*=\s*[^>]*>/gi);
        if (array && array.length > 0) {
            for (var i = 0, elementHtml; elementHtml = array[i]; i++) {
                var fontFamilyArray = elementHtml.match(/\s*font-family\s*:\s*(([^;]*)([\"';\s)](?!>))|([^;"']*))/gi);
                if (fontFamilyArray && fontFamilyArray.length > 1) {
                    var commonValue = fontFamilyArray[0].replace(/font-family\s*:\s*([^;]*)[\"'; ]/gi, "$1");
                    var resultElementHtml = elementHtml;
                    for (var j = 0, fontFamily; fontFamily = fontFamilyArray[j]; j++)
                        resultElementHtml = resultElementHtml.replace(fontFamily, "font-family: " + commonValue + ";");
                    html = html.replace(elementHtml, resultElementHtml);
                }
            }
        }
        html = html.replace(/^\n|\n$/gi, '');
        html = html.replace(/(\n+(<br>)|(<\/p>|<br>)\n+)/gi, '$2$3');
        html = html.replace(/(\n+\s+)|(\s+\n+)/gi, ' ');
        html = html.replace(/\n+/gi, ' ');
        html = html.replace(/(<\/(?!(p)+)(\s*[^>]*)?>)<\/td>/gi, '$1<p>&nbsp;</p></td>');
        html = html.replace(/(<\/(?!(p)+)(\s*[^>]*)?>)<\/th>/gi, '$1<p>&nbsp;</p></th>');
        html = html.replace(/<script(\s[^>]*)?>[\s\S]*?<\/script>/gi, '');
        html = html.replace(/<u>([\s\S]*?)<\/u>/gi, '<span style="text-decoration: underline">$1</span>');
        html = html.replace(/<s>([\s\S]*?)<\/s>/gi, '<span style="text-decoration: line-through">$1</span>');
        html = html.replace(/<\/([^\s>]+)(\s[^>]*)?><br><\/([^\s>]+)(\s[^>]*)?>/gi, '');
        log_1.Log.print(log_source_1.LogSource.HtmlImporter, "convertHtml", function () { return html; });
        return html;
    };
    HtmlImporter.importers = null;
    HtmlImporter.MapMissTablePropertiesByTagNames = new map_creator_1.MapCreator()
        .add("TABLE", true)
        .add("TD", true)
        .add("TH", true)
        .get();
    HtmlImporter.MapShorthandProperty = new map_creator_1.MapCreator()
        .add("background", true)
        .add("border", true)
        .add("borderImage", true)
        .add("borderTop", true)
        .add("borderRight", true)
        .add("borderBottom", true)
        .add("borderLeft", true)
        .add("borderWidth", true)
        .add("borderColor", true)
        .add("borderStyle", true)
        .add("borderRadius", true)
        .add("font", true)
        .add("fontVariant", true)
        .add("listStyle", true)
        .add("margin", true)
        .add("padding", true)
        .add("transition", true)
        .add("transform", true)
        .add("listStyleType", true)
        .add("cssText", true)
        .get();
    return HtmlImporter;
}());
exports.HtmlImporter = HtmlImporter;
