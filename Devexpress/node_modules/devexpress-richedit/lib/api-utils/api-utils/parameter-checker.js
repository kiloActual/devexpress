"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@devexpress/utils/lib/constants");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var ApiParameterDescriptor = (function () {
    function ApiParameterDescriptor(parameterName, parameterType, typeAssertion, getResult) {
        this.parameterName = parameterName;
        this.parameterType = parameterType;
        this.typeAssertion = typeAssertion;
        this.getResult = getResult;
    }
    ApiParameterDescriptor.prototype.getStringRepresentation = function (canBeUndefined) {
        return this.parameterName + ": " + this.parameterType + (canBeUndefined ? '|undefined' : '');
    };
    return ApiParameterDescriptor;
}());
exports.ApiParameterDescriptor = ApiParameterDescriptor;
var ApiParametersChecker = (function () {
    function ApiParametersChecker() {
    }
    ApiParametersChecker.check = function (value, parameterIndex, canBeUndefined, pairs) {
        for (var _i = 0, pairs_1 = pairs; _i < pairs_1.length; _i++) {
            var pair = pairs_1[_i];
            if (pair.typeAssertion(value))
                return pair.getResult(value);
        }
        if (canBeUndefined && value === undefined)
            return undefined;
        ApiParametersChecker.showErrorString(parameterIndex, canBeUndefined, pairs);
    };
    ApiParametersChecker.showErrorString = function (parameterIndex, canBeUndefined, pairs) {
        var pairStringRepresentation = list_1.ListUtils.map(pairs, function (pair) { return pair.getStringRepresentation(canBeUndefined); });
        var parameterIndexAsString;
        switch (parameterIndex) {
            case 1:
                parameterIndexAsString = 'First';
                break;
            case 2:
                parameterIndexAsString = 'Second';
                break;
            case 3:
                parameterIndexAsString = 'Third';
                break;
            case 4:
                parameterIndexAsString = 'Fourth';
                break;
            case 5:
                parameterIndexAsString = 'Fifth';
                break;
            case 6:
                parameterIndexAsString = 'Sixth';
                break;
            case 7:
                parameterIndexAsString = 'Seventh';
                break;
            case 8:
                parameterIndexAsString = 'Eighth';
                break;
            case 9:
                parameterIndexAsString = 'Ninth';
                break;
            case 10:
                parameterIndexAsString = 'Tenth';
                break;
            default:
                parameterIndexAsString = 'One of the last';
                break;
        }
        throw new Error(parameterIndexAsString + " parameter must be one of [" + pairStringRepresentation.join(', ') + "]");
    };
    ApiParametersChecker.defaultDescriptor = function (getResult) {
        return new ApiParameterDescriptor('', '', function () { return true; }, getResult);
    };
    ApiParametersChecker.numberDescriptor = function (parameterName, getResult, minBound, maxBound) {
        if (minBound === void 0) { minBound = constants_1.Constants.MIN_SAFE_INTEGER; }
        if (maxBound === void 0) { maxBound = constants_1.Constants.MAX_SAFE_INTEGER; }
        return new ApiParameterDescriptor(parameterName, "number on interval [" + minBound + ", " + maxBound + "]", function (value) { return common_1.isNumber(value) && (value >= minBound && value < maxBound); }, getResult);
    };
    ApiParametersChecker.booleanDescriptor = function (parameterName, getResult) {
        return new ApiParameterDescriptor(parameterName, 'boolean', function (value) { return typeof value === 'boolean'; }, getResult);
    };
    ApiParametersChecker.arrayDescriptor = function (parameterName, getResult) {
        return new ApiParameterDescriptor(parameterName, 'array', function (value) { return value instanceof Array; }, getResult);
    };
    ApiParametersChecker.functionDescriptor = function (parameterName, getResult) {
        return new ApiParameterDescriptor(parameterName, 'function', function (value) { return typeof value === 'function'; }, getResult);
    };
    ApiParametersChecker.stringDescriptor = function (parameterName, getResult, canBeEmpty) {
        return new ApiParameterDescriptor(parameterName, 'string', function (value) { return (typeof value === 'string') && (canBeEmpty || !!value.length); }, getResult);
    };
    ApiParametersChecker.stringDescriptorPredefined = function (parameterName, map, canBeEmpty) {
        return new ApiParameterDescriptor(parameterName, "string of constants(" + string_1.StringMapUtils.toList(string_1.StringMapUtils.map(map, function (_e, key) { return "\"" + key + "\""; })).join(', ') + ")", function (value) { return (typeof value === 'string') && (canBeEmpty || !!value.length) && map[value] !== undefined; }, function (val) { return map[val]; });
    };
    ApiParametersChecker.regExpDescriptor = function (parameterName, getResult) {
        return new ApiParameterDescriptor(parameterName, 'RegExp', function (value) { return (typeof value === 'object'); }, getResult);
    };
    ApiParametersChecker.enumDescriptor = function (parameterName, getResult, enumTypeObj, enumTypeName) {
        return new ApiParameterDescriptor(parameterName, enumTypeName, function (value) { return enumTypeObj[value] !== undefined; }, getResult);
    };
    ApiParametersChecker.objectDescriptor = function (parameterName, objectTypeAsString, getResult) {
        return new ApiParameterDescriptor(parameterName, objectTypeAsString, function (value) { return typeof value === 'object'; }, getResult);
    };
    return ApiParametersChecker;
}());
exports.ApiParametersChecker = ApiParametersChecker;
