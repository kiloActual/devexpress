"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_format_1 = require("../core/document-format");
var formatter_manager_1 = require("../core/layout-formatter/managers/formatter-manager");
var document_layout_1 = require("../core/layout/document-layout");
var measurer_1 = require("../core/measurer/measurer");
var inner_client_properties_1 = require("../core/rich-utils/inner-client-properties");
var selection_base_1 = require("../core/selection/selection-base");
var string_resources_1 = require("../core/string-resources");
var views_settings_1 = require("../core/view-settings/views-settings");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var exporter_1 = require("../model-api/formats/exporter");
var importer_1 = require("../model-api/formats/importer");
var DocumentProcessorBase = (function () {
    function DocumentProcessorBase(richOptions) {
        this.selection = new selection_base_1.SelectionBase();
        this.onCalculateDocumentVariable = null;
        this.measurer = new measurer_1.Measurer('');
        this.modelManager = this.createModelManager(null, richOptions);
        this.innerClientProperties = new inner_client_properties_1.InnerClientProperties(new views_settings_1.ViewSettings());
    }
    DocumentProcessorBase.prototype.dispose = function () {
        this.measurer.dispose();
        if (this.layoutFormatterManager)
            this.layoutFormatterManager.dispose();
    };
    DocumentProcessorBase.prototype.openDocument = function (source, documentFormat, callback) {
        var file = typeof source == 'string' ? base64_1.Base64Utils.getFileFromBase64(source) : source;
        this.openDocumentInner(file, documentFormat, callback);
    };
    DocumentProcessorBase.prototype.openInnerDocument = function (model) {
        this.createModel(model);
    };
    DocumentProcessorBase.prototype.exportDocumentToBase64 = function (callback, documentFormat) {
        exporter_1.exportModelToBase64(this.modelManager.modelManipulator, this.exportFormat(documentFormat), callback);
    };
    DocumentProcessorBase.prototype.exportDocumentToBlob = function (callback, documentFormat) {
        exporter_1.exportModelToBlob(this.modelManager.modelManipulator, this.exportFormat(documentFormat), callback);
    };
    DocumentProcessorBase.prototype.openDocumentInner = function (file, format, callback) {
        var _this = this;
        if (this.activeDocumentImporter) {
            callback(false);
            return;
        }
        this.activeDocumentImporter = importer_1.createImporter(format);
        if (!this.activeDocumentImporter) {
            callback(false);
            return;
        }
        this.activeDocumentImporter.importFromFile(file, this.modelManager.richOptions, function (model, _formatImagesImporter) {
            _this.activeDocumentImporter = null;
            _this.createModel(model);
            callback(true);
        }, function (_reason) {
            _this.activeDocumentImporter = null;
            callback(false);
        });
    };
    DocumentProcessorBase.prototype.exportFormat = function (documentFormat) {
        return documentFormat === undefined || documentFormat === null ? document_format_1.DocumentFormat.OpenXml : documentFormat;
    };
    DocumentProcessorBase.prototype.createModel = function (model) {
        this.modelManager = this.createModelManager(model, this.modelManager.richOptions);
        var layout = new document_layout_1.DocumentLayout(new document_layout_1.AnchorObjectsPositionInfo(model));
        layout.pageColor = model.pageBackColor;
        this.layoutFormatterManager = new formatter_manager_1.FormatterManager(this.measurer, this.innerClientProperties, this.modelManager.model, layout, { activeSubDocument: model.mainSubDocument }, this.modelManager.richOptions.bookmarks, this.modelManager.richOptions.documentProtection, { getVisibleAreaHeight: function (_includeScrollBars) { return 500; } }, new string_resources_1.StringResources(), []);
        this.layoutFormatterManager.openDocument();
    };
    DocumentProcessorBase.prototype.beginUpdate = function () {
        this.layoutFormatterManager.beginUpdate();
    };
    DocumentProcessorBase.prototype.endUpdate = function () {
        this.layoutFormatterManager.endUpdate();
    };
    DocumentProcessorBase.prototype.invalidateLayoutAfterFontsLoaded = function () {
        if (this.measurer && this.layoutFormatterManager && this.layoutFormatterManager.invalidator) {
            this.measurer.clearCache();
            this.layoutFormatterManager.invalidator.onChangedAllLayout();
        }
    };
    return DocumentProcessorBase;
}());
exports.DocumentProcessorBase = DocumentProcessorBase;
