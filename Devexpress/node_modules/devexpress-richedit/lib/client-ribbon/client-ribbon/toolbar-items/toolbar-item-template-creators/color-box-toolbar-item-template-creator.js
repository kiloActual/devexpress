"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_box_1 = require("devextreme/ui/color_box");
var base_types_1 = require("./base-types");
var ColorBoxToolbarItemTemplateCreator = (function (_super) {
    tslib_1.__extends(ColorBoxToolbarItemTemplateCreator, _super);
    function ColorBoxToolbarItemTemplateCreator(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        return _this;
    }
    ColorBoxToolbarItemTemplateCreator.prototype.createTemplate = function () {
        var result = _super.prototype.createTemplate.call(this);
        result.widget = 'dxColorBox';
        var widgetOptions = this.getWidgetOptions();
        if (this.shouldCreateTextContentTemplate(this.options.itemOptions.textOptions))
            result.template = this.createTextContentTemplate(this.options.itemOptions.textOptions, widgetOptions, color_box_1.default);
        else
            result.options = widgetOptions;
        return result;
    };
    ColorBoxToolbarItemTemplateCreator.prototype.getWidgetOptions = function () {
        var _this = this;
        return {
            placeholder: '',
            focusStateEnabled: false,
            acceptCustomValue: false,
            mask: ' ',
            stylingMode: 'filled',
            hint: this.options.itemOptions.text,
            value: this.options.itemOptions.value,
            width: 75,
            onValueChanged: this.options.onValueChanged,
            onInitialized: this.options.onInitialized,
            onContentReady: function (e) {
                var element = e.element.querySelector ? e.element : e.element[0];
                element.querySelector('.dx-colorbox-color-result-preview')
                    .addEventListener('click', function () {
                    _this.options.onValueChanged({
                        component: e.component,
                        element: element,
                        model: e.model,
                        value: e.component.option('value')
                    });
                });
            },
            onOpened: this.options.onOpened,
            onClosed: this.options.onClosed,
            elementAttr: { class: this.getCssClass() }
        };
    };
    return ColorBoxToolbarItemTemplateCreator;
}(base_types_1.ToolbarItemTemplateCreator));
exports.ColorBoxToolbarItemTemplateCreator = ColorBoxToolbarItemTemplateCreator;
