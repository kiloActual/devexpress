"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var toolbar_interactive_item_1 = require("./toolbar-interactive-item");
var button_toolbar_item_template_creator_1 = require("./toolbar-item-template-creators/button-toolbar-item-template-creator");
var ToolbarButtonItem = (function (_super) {
    tslib_1.__extends(ToolbarButtonItem, _super);
    function ToolbarButtonItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolbarButtonItem.prototype.getBuildTemplateStrategy = function () {
        var _this = this;
        return new button_toolbar_item_template_creator_1.ButtonToolbarItemTemplateCreator({
            itemOptions: this.options,
            onInitialized: function (e) {
                _this.applyWidget(e);
                _this.setValue(_this.options.isToggleMode && _this.options.selected);
            },
            onClick: this.getOnClickHandler()
        });
    };
    ToolbarButtonItem.prototype.setValue = function (value) {
        if (!this.options.isToggleMode)
            return;
        var resolvedElement = this.getElement();
        resolvedElement[ToolbarButtonItem.ToggleButtonDataProperty] = value;
        if (value) {
            resolvedElement.classList.add(ToolbarButtonItem.ToggleStateClassName);
            resolvedElement.classList.add(ToolbarButtonItem.ButtonGroupItemClassName);
            resolvedElement.classList.add(ToolbarButtonItem.ItemSelectedClassName);
        }
        else {
            resolvedElement.classList.remove(ToolbarButtonItem.ToggleStateClassName);
            resolvedElement.classList.remove(ToolbarButtonItem.ButtonGroupItemClassName);
            resolvedElement.classList.remove(ToolbarButtonItem.ItemSelectedClassName);
        }
    };
    ToolbarButtonItem.prototype.getValue = function () {
        return this.options.isToggleMode
            ? this.getElement()[ToolbarButtonItem.ToggleButtonDataProperty]
            : null;
    };
    ToolbarButtonItem.prototype.getElement = function () {
        return (this.widget.element().classList ? this.widget.element() : this.widget.element()[0]);
    };
    ToolbarButtonItem.prototype.getOnClickHandler = function () {
        var _this = this;
        return this.onCommandExecuted ? function () {
            _this.setValue(!_this.getValue());
            _this.onCommandExecuted({
                item: _this,
                parameter: _this.getValue()
            });
        } : undefined;
    };
    ToolbarButtonItem.ToggleStateClassName = 'dx-r-toggle';
    ToolbarButtonItem.ButtonGroupItemClassName = 'dx-buttongroup-item';
    ToolbarButtonItem.ItemSelectedClassName = 'dx-item-selected';
    ToolbarButtonItem.ToggleButtonDataProperty = 'dx-ri-value';
    return ToolbarButtonItem;
}(toolbar_interactive_item_1.ToolbarInteractiveItem));
exports.ToolbarButtonItem = ToolbarButtonItem;
