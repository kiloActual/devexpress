"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var toolbar_interactive_item_1 = require("./toolbar-interactive-item");
var menu_toolbar_item_template_creator_1 = require("./toolbar-item-template-creators/menu-toolbar-item-template-creator");
var toolbar_sub_menu_item_1 = require("./toolbar-sub-menu-item");
var ToolbarMenuItem = (function (_super) {
    tslib_1.__extends(ToolbarMenuItem, _super);
    function ToolbarMenuItem(options, onCommandExecuted, onSubMenuItemCreated) {
        var _this = _super.call(this, options, onCommandExecuted) || this;
        _this.onSubMenuItemCreated = onSubMenuItemCreated;
        _this.items = {};
        _this.createSubMenuItems(options.items);
        return _this;
    }
    ToolbarMenuItem.prototype.getWidget = function () {
        return this.widget;
    };
    ToolbarMenuItem.prototype.getOptions = function () {
        return this.options;
    };
    ToolbarMenuItem.prototype.createSubMenuItems = function (items) {
        var _this = this;
        if (!items)
            return;
        items.forEach(function (i) {
            var subMenuItem = new toolbar_sub_menu_item_1.ToolbarSubMenuItem(i.name, _this);
            _this.onSubMenuItemCreated(subMenuItem);
            if (i.name)
                _this.items[i.name] = subMenuItem;
            _this.createSubMenuItems(i.items);
        });
        return;
    };
    ToolbarMenuItem.prototype.getBuildTemplateStrategy = function () {
        return new menu_toolbar_item_template_creator_1.MenuToolbarItemTemplateCreator({
            itemOptions: this.options,
            onInitialized: this.getOnInitializedHandler(),
            onItemRendered: this.getOnItemRenderedHandler(),
            onItemClick: this.getOnItemClickHandler()
        });
    };
    ToolbarMenuItem.prototype.setValue = function (_value) {
    };
    ToolbarMenuItem.prototype.getOnItemClickHandler = function () {
        var _this = this;
        return this.onCommandExecuted ? function (e) {
            _this.closeSubMenuIfRequired(e.component, e.itemData, e.itemElement);
            var subItem = e.itemData.name ? _this.items[e.itemData.name] : undefined;
            if (!subItem)
                return;
            _this.onCommandExecuted({
                item: subItem,
                parameter: null
            });
        } : undefined;
    };
    ToolbarMenuItem.prototype.closeSubMenuIfRequired = function (component, itemData, itemElement) {
        if (itemData.isRootElement && component._visibleSubmenu)
            window.setTimeout(function () { return component.unselectItem(itemElement[0] || itemElement); }, 0);
    };
    ToolbarMenuItem.prototype.getOnItemRenderedHandler = function () {
        var _this = this;
        return function (e) {
            var name = e.itemData.name;
            if (!name)
                return;
            var item = _this.items[name];
            var element = e.itemElement[0] ? e.itemElement[0] : e.itemElement;
            item.setElement(element);
        };
    };
    return ToolbarMenuItem;
}(toolbar_interactive_item_1.ToolbarInteractiveItem));
exports.ToolbarMenuItem = ToolbarMenuItem;
