"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var localization_1 = require("devextreme/localization");
var tab_panel_1 = require("devextreme/ui/tab_panel");
var toolbar_1 = require("devextreme/ui/toolbar");
var themes_1 = require("devextreme/viz/themes");
var toolbar_button_group_item_1 = require("./toolbar-items/toolbar-button-group-item");
var toolbar_button_item_1 = require("./toolbar-items/toolbar-button-item");
var toolbar_color_box_item_1 = require("./toolbar-items/toolbar-color-box-item");
var toolbar_menu_item_1 = require("./toolbar-items/toolbar-menu-item");
var toolbar_number_box_item_1 = require("./toolbar-items/toolbar-number-box-item");
var toolbar_select_box_item_1 = require("./toolbar-items/toolbar-select-box-item");
var toolbar_separator_item_1 = require("./toolbar-items/toolbar-separator-item");
var Ribbon = (function () {
    function Ribbon(options) {
        this.options = options;
        this.toolbars = [];
        this.toolBarItemsByName = {};
        this.contextItemIndexesByCategoryName = {};
    }
    Object.defineProperty(Ribbon.prototype, "element", {
        get: function () { return this.options.element; },
        enumerable: true,
        configurable: true
    });
    Ribbon.prototype.dispose = function () {
        this.tabPanel.dispose();
        this.toolbars.forEach(function (tb) { return tb.dispose(); });
        Ribbon.hideNode(this.options.element);
    };
    Ribbon.hideNode = function (node) {
        if (node) {
            var parentNode = node.parentNode;
            if (parentNode)
                parentNode.removeChild(node);
        }
    };
    Ribbon.prototype.shouldApplyLocalization = function (text, localizationId) {
        return !text && !!localizationId;
    };
    Ribbon.prototype.applyLocalizationId = function () {
        var _this = this;
        this.options.items.forEach(function (ribbonItem) {
            _this.applyLocalizationIdToRibbonItem(ribbonItem);
        });
        this.options.contextItemsCategories.forEach(function (category) {
            category.items.forEach(function (ribbonItem) {
                _this.applyLocalizationIdToRibbonItem(ribbonItem);
            });
        });
    };
    Ribbon.prototype.applyLocalizationIdToRibbonItem = function (ribbonItem) {
        if (this.shouldApplyLocalization(ribbonItem.title, ribbonItem.localizationId))
            ribbonItem.title = localization_1.formatMessage(ribbonItem.localizationId);
        this.applyLocalizationIdToRibbonItems(ribbonItem.items);
    };
    Ribbon.prototype.applyLocalizationIdToRibbonItems = function (items) {
        var _this = this;
        items.forEach(function (item) {
            switch (item.type) {
                case 'Button':
                    var button = item;
                    if (_this.shouldApplyLocalization(button.text, button.localizationId))
                        button.text = localization_1.formatMessage(button.localizationId);
                    break;
                case 'Menu':
                    var menu = item;
                    if (_this.shouldApplyLocalization(menu.text, menu.localizationId))
                        menu.text = localization_1.formatMessage(menu.localizationId);
                    _this.applyLocalizationIdToSubMenuItemOptions(menu.items);
                    break;
                case 'ButtonGroup':
                    break;
                case 'NumberBox':
                    var numberBox = item;
                    if (_this.shouldApplyLocalization(numberBox.text, numberBox.localizationId))
                        numberBox.text = localization_1.formatMessage(numberBox.localizationId);
                    break;
                case 'ColorBox':
                    var colorBox = item;
                    if (_this.shouldApplyLocalization(colorBox.text, colorBox.localizationId))
                        colorBox.text = localization_1.formatMessage(colorBox.localizationId);
                    break;
                case 'SelectBox':
                    var selectBox = item;
                    if (selectBox._localizeDataSourceItems)
                        selectBox.dataSource.forEach(function (style) {
                            if (style.localizationId) {
                                var localizedText = localization_1.formatMessage(style.localizationId);
                                style.text = style.text ? style.text + localizedText : localizedText;
                            }
                        });
                    break;
                default:
                    break;
            }
        });
    };
    Ribbon.prototype.applyLocalizationIdToSubMenuItemOptions = function (items) {
        var _this = this;
        items.forEach(function (item) {
            if (_this.shouldApplyLocalization(item.text, item.localizationId))
                item.text = localization_1.formatMessage(item.localizationId);
            if (item.items)
                _this.applyLocalizationIdToSubMenuItemOptions(item.items);
        });
    };
    Ribbon.prototype.render = function () {
        var _this = this;
        this.applyLocalizationId();
        this.tabPanel = new tab_panel_1.default(this.options.element, {
            dataSource: this.getRibbonItems().map(function (t, index) { return ({
                title: t.title,
                visible: t.visible,
                template: function () { return _this.createToolbar(t.items, index); }
            }); }),
            deferRendering: false,
            elementAttr: { class: "dx-ribbon " + themes_1.currentTheme() },
            focusStateEnabled: false,
            selectedIndex: this.options.activeTabIndex,
            loop: false,
            animationEnabled: false,
            swipeEnabled: false,
            showNavButtons: true,
            onTitleClick: this.options.onTitleClickHandler,
            onSelectionChanged: this.options.onSelectionChangedHandler
        });
    };
    Ribbon.prototype.getActiveTabIndex = function () {
        return this.tabPanel.option('selectedIndex');
    };
    Ribbon.prototype.setActiveTabIndex = function (index) {
        this.tabPanel.option('selectedIndex', index);
    };
    Ribbon.prototype.setItemVisible = function (itemIndex, visible) {
        return this.tabPanel.option("items[" + itemIndex + "].visible", visible);
    };
    Ribbon.prototype.getItemVisible = function (itemIndex) {
        return this.tabPanel.option("items[" + itemIndex + "].visible");
    };
    Ribbon.prototype.setContextItemsCategoryVisible = function (categoryName, visible) {
        var _this = this;
        var itemsIndexes = this.getContextItemsIndexes(categoryName);
        if (!itemsIndexes)
            return;
        var needResetActiveTab = false;
        var activeTabIndex = this.getActiveTabIndex();
        itemsIndexes.forEach(function (itemIndex) {
            if (_this.getItemVisible(itemIndex) !== visible) {
                if (activeTabIndex == itemIndex && !visible)
                    needResetActiveTab = true;
                _this.setItemVisible(itemIndex, visible);
            }
        });
        if (needResetActiveTab)
            this.setActiveTabIndex(this.options.activeTabIndex);
    };
    Ribbon.prototype.getContextItemsCategoryVisible = function (categoryName) {
        var itemsIndexes = this.getContextItemsIndexes(categoryName);
        if (!itemsIndexes || !itemsIndexes.length)
            return false;
        return this.getItemVisible(itemsIndexes[0]);
    };
    Ribbon.prototype.getContextItemsIndexes = function (categoryName) {
        return this.contextItemIndexesByCategoryName[categoryName];
    };
    Ribbon.prototype.getTabPanel = function () {
        return this.tabPanel;
    };
    Ribbon.prototype.getItems = function (name) {
        return name && this.toolBarItemsByName[name] ? this.toolBarItemsByName[name] : null;
    };
    Ribbon.prototype.adjustControl = function () {
        this.tabPanel._dimensionChanged();
        this.toolbars.forEach(function (t) { return t._dimensionChanged(); });
    };
    Ribbon.prototype.getRibbonItems = function () {
        var _this = this;
        var items = [].concat(this.options.items);
        if (this.options.contextItemsCategories) {
            this.options.contextItemsCategories.forEach(function (ci) {
                if (!_this.contextItemIndexesByCategoryName[ci.name])
                    _this.contextItemIndexesByCategoryName[ci.name] = [];
                ci.items.forEach(function (_cii, index) {
                    _this.contextItemIndexesByCategoryName[ci.name].push(index + items.length);
                });
                items = items.concat(ci.items.map(function (cii) { return ({
                    items: cii.items,
                    title: cii.title,
                    visible: false
                }); }));
            });
        }
        return items;
    };
    Ribbon.prototype.createToolbar = function (toolbarItems, tabIndex) {
        var _this = this;
        var element = document.createElement('div');
        var toolbarOptions = {
            dataSource: this.getToolbarItemTemplates(toolbarItems, tabIndex),
            onInitialized: function (e) { return _this.toolbars.push(e.component); },
            onItemRendered: function (e) {
                if (e.itemData.dxIsSeparator)
                    toolbar_separator_item_1.ToolbarSeparatorItem.prepareElement(e.itemElement);
            }
        };
        new toolbar_1.default(element, toolbarOptions);
        return element;
    };
    Ribbon.prototype.getToolbarItemTemplates = function (toolbarItems, tabIndex) {
        var _this = this;
        var items = [];
        toolbarItems.forEach(function (toolbarItem) {
            items = items.concat(_this.getToolbarItems(toolbarItem, tabIndex));
        });
        var templates = [];
        var prevItem;
        items.forEach(function (i) {
            if (i instanceof toolbar_separator_item_1.ToolbarSeparatorItem && (!prevItem || prevItem instanceof toolbar_separator_item_1.ToolbarSeparatorItem))
                return;
            templates.push(i.createToolbarItemTemplate());
            prevItem = i;
        });
        return templates;
    };
    Ribbon.prototype.getToolbarItems = function (options, tabIndex) {
        var result = [];
        if (options.beginGroup)
            result.push(new toolbar_separator_item_1.ToolbarSeparatorItem());
        result.push(this.interactiveToolbarItemFactory(options, tabIndex));
        return result;
    };
    Ribbon.prototype.interactiveToolbarItemFactory = function (options, tabIndex) {
        var _this = this;
        var item;
        switch (options.type) {
            case 'Button':
                item = new toolbar_button_item_1.ToolbarButtonItem(options, this.options.onCommandExecuted);
                break;
            case 'ButtonGroup':
                item = new toolbar_button_group_item_1.ToolbarButtonGroupItem(options, this.options.onCommandExecuted);
                break;
            case 'Menu':
                item = new toolbar_menu_item_1.ToolbarMenuItem(options, this.options.onCommandExecuted, function (i) {
                    _this.addItemToCache(i.name, i);
                    _this.raiseOnOnToolbarItemCreated(options, i, tabIndex);
                });
                break;
            case 'NumberBox':
                item = new toolbar_number_box_item_1.ToolbarNumberBoxItem(options, this.options.onCommandExecuted);
                break;
            case 'ColorBox':
                item = new toolbar_color_box_item_1.ToolbarColorBoxItem(options, this.options.onCommandExecuted, this.options.onOpened, this.options.onClosed);
                break;
            default:
                item = new toolbar_select_box_item_1.ToolbarSelectBoxItem(options, this.options.onCommandExecuted);
        }
        this.addItemToCache(options.name, item);
        this.raiseOnOnToolbarItemCreated(options, item, tabIndex);
        return item;
    };
    Ribbon.prototype.addItemToCache = function (name, item) {
        if (!name)
            return;
        if (!this.toolBarItemsByName[name])
            this.toolBarItemsByName[name] = [];
        this.toolBarItemsByName[name].push(item);
    };
    Ribbon.prototype.raiseOnOnToolbarItemCreated = function (options, item, tabIndex) {
        if (!this.options.onOnToolbarItemCreated)
            return;
        this.options.onOnToolbarItemCreated({
            options: options,
            item: item,
            tabIndex: tabIndex
        });
    };
    return Ribbon;
}());
exports.Ribbon = Ribbon;
