"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var point_1 = require("@devexpress/utils/lib/geometry/point");
var box_exporter_1 = require("./box-exporter");
var PdfLayoutRowExporter = (function () {
    function PdfLayoutRowExporter(doc, textFontMapCache, measurer) {
        this.doc = doc;
        this.boxExporter = new box_exporter_1.PdfBoxExporter(doc, textFontMapCache, measurer);
    }
    PdfLayoutRowExporter.prototype.export = function (row, columnOffset) {
        var rowOffset = point_1.Point.plus(columnOffset, row);
        rowOffset.y += row.getSpacingBefore();
        var baseLine = (row.baseLine - row.getSpacingBefore()) / (row.height - row.getSpacingBefore() - row.getSpacingAfter());
        var lastBoxIndexWhatCanStrikeoutAndUnderline = row.boxes.length - 1;
        for (var box = void 0; box = row.boxes[lastBoxIndexWhatCanStrikeoutAndUnderline]; lastBoxIndexWhatCanStrikeoutAndUnderline--)
            if (!box.renderNoStrikeoutAndNoUnderlineIfBoxInEndRow())
                break;
        if (row.numberingListBox) {
            this.doc.save();
            this.boxExporter.export(row, row.numberingListBox.textBox, 0, rowOffset, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline);
            if (row.numberingListBox.separatorBox)
                this.boxExporter.export(row, row.numberingListBox.separatorBox, 0, rowOffset, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline);
            this.doc.restore();
        }
        var lastVisibleBoxIndex = row.getLastVisibleBoxIndex();
        for (var boxIndex = 0; boxIndex <= lastVisibleBoxIndex; boxIndex++) {
            this.doc.save();
            this.boxExporter.export(row, row.boxes[boxIndex], boxIndex, rowOffset, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline);
            this.doc.restore();
        }
    };
    return PdfLayoutRowExporter;
}());
exports.PdfLayoutRowExporter = PdfLayoutRowExporter;
