"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_box_1 = require("../core/layout/main-structures/layout-boxes/layout-box");
var measure_info_1 = require("../core/measurer/measure-info");
var enums_1 = require("../core/model/character/enums");
var grabber_1 = require("../core/model/fonts/grabber");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var map_collector_1 = require("@devexpress/utils/lib/intervals/sparse/map-collector");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var character_properties_exporter_1 = require("./character-properties-exporter");
var PdfBoxExporter = (function () {
    function PdfBoxExporter(doc, textFontMapCache, measurer) {
        this.doc = doc;
        this.textFontMapCache = textFontMapCache;
        this.characterPropertiesExporter = new character_properties_exporter_1.PdfCharacterPropertiesExporter();
        this.measurer = measurer;
    }
    PdfBoxExporter.prototype.export = function (row, box, boxIndex, rowOffset, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline) {
        var boxY = box.getTop(row);
        var pos = point_1.Point.plus(rowOffset, new point_1.Point(box.x ? box.x : 0, boxY ? boxY : 0)).applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        var size = box.createSize().applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
        if (enum_1.EnumUtils.isAnyOf(box.getType(), layout_box_1.LayoutBoxType.Picture, layout_box_1.LayoutBoxType.AnchorPicture)) {
            var base64 = box.cacheInfo.base64;
            this.doc.image(base64, pos.x, pos.y, { width: size.width, height: size.height });
        }
        else {
            this.exportText(pos, size, grabber_1.LayoutFontsCollector.boxContent(box), box, boxIndex, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline);
        }
    };
    PdfBoxExporter.prototype.getTextPosition = function (box, baseLine, pos) {
        var cp = box.characterProperties;
        var fontSize = cp.fontSize;
        var script = cp.script;
        var offsetY = 0;
        if (script == enums_1.CharacterFormattingScript.Normal)
            offsetY = box.getAscent() - unit_converter_1.UnitConverter.pointsToPixels(baseLine * fontSize);
        else if (script == enums_1.CharacterFormattingScript.Subscript)
            offsetY = cp.fontSize * (1 - cp.fontInfo.scriptMultiplier);
        return new point_1.Point(pos.x, pos.y + offsetY);
    };
    PdfBoxExporter.prototype.createTextProperties = function (charProps, needUnderlineAndStrikeout, baseLine) {
        var textOptions = {};
        textOptions.lineGap = 0;
        if (needUnderlineAndStrikeout && charProps.fontUnderlineType)
            textOptions.underline = true;
        if (needUnderlineAndStrikeout && charProps.fontStrikeoutType)
            textOptions.strike = true;
        textOptions.baseline = -1 * charProps.fontSize * baseLine;
        textOptions.lineBreak = false;
        textOptions.width = constants_1.Constants.MAX_SAFE_INTEGER;
        return textOptions;
    };
    PdfBoxExporter.prototype.exportText = function (pos, size, text, box, boxIndex, baseLine, lastBoxIndexWhatCanStrikeoutAndUnderline) {
        var needUnderlineAndStrikeout = boxIndex <= lastBoxIndexWhatCanStrikeoutAndUnderline;
        var it = this.separateTextByFont(text, box.characterProperties);
        while (it.moveToNextInterval()) {
            var font = it.object;
            var currText = text.slice(it.interval.start, it.interval.end);
            if (it.numIntervals > 1) {
                var measureInfo = new measure_info_1.MeasureInfoText(currText, box.characterProperties);
                this.measurer.measure([measureInfo]);
                if (it.intervalIndex > 0)
                    pos.x += size.width;
                size = measureInfo.resultSize.applyConverter(unit_converter_1.UnitConverter.pixelsToPointsF);
            }
            if (font) {
                var cp = box.characterProperties;
                var fontSize = cp.script == enums_1.CharacterFormattingScript.Normal ? cp.fontSize : cp.fontSize * cp.fontInfo.scriptMultiplier;
                this.doc.font(font.cacheKey, undefined, fontSize);
                var textOptions = this.createTextProperties(cp, needUnderlineAndStrikeout, baseLine);
                this.characterPropertiesExporter.exportCharacterProperties(this.doc, box, pos, size, needUnderlineAndStrikeout);
                var textPos = this.getTextPosition(box, baseLine, pos);
                this.doc.text(currText, textPos.x, textPos.y, textOptions);
            }
            else {
                this.doc.rect(pos.x, pos.y, size.width, size.height).stroke();
            }
        }
    };
    PdfBoxExporter.prototype.separateTextByFont = function (text, charProps) {
        var textLen = text.length;
        var collElem = this.textFontMapCache.getItem(new grabber_1.LayoutFontsCollectorElement(charProps));
        var collector = new map_collector_1.SparseIntervalsMapCollector(function (a, b) { return a == b ? 0 : 1; }, new boundary_1.BoundaryInterval(0, 0));
        for (var i = 0; i < textLen; i++)
            collector.add(i, collElem.getFont(text[i]));
        return collector.getIterator();
    };
    return PdfBoxExporter;
}());
exports.PdfBoxExporter = PdfBoxExporter;
