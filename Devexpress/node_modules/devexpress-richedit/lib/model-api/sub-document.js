"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var document_format_1 = require("../core/document-format");
var character_properties_helper_1 = require("../core/model/character/character-properties-helper");
var insert_paragraph_manipulator_params_1 = require("../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_picture_manipulator_params_1 = require("../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var insert_text_manipulator_params_1 = require("../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var paragraph_properties_helper_1 = require("../core/model/paragraph/paragraph-properties-helper");
var rich_utils_1 = require("../core/model/rich-utils");
var run_type_1 = require("../core/model/runs/run-type");
var sub_document_1 = require("../core/model/sub-document");
var properties_bundle_1 = require("../core/rich-utils/properties-bundle");
var input_position_base_1 = require("../core/selection/input-position-base");
var selection_intervals_info_1 = require("../core/selection/selection-intervals-info");
var constants_1 = require("@devexpress/utils/lib/constants");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var math_1 = require("@devexpress/utils/lib/utils/math");
var api_utils_1 = require("./api-utils/api-utils");
var model_parameter_checker_1 = require("./api-utils/model-parameter-checker");
var character_properties_1 = require("./character-properties");
var bookmark_collection_1 = require("./collections/bookmark-collection");
var field_collection_1 = require("./collections/field-collection");
var hyperlink_collection_1 = require("./collections/hyperlink-collection");
var paragraph_collection_1 = require("./collections/paragraph-collection");
var range_permission_collection_1 = require("./collections/range-permission-collection");
var table_collection_1 = require("./collections/table/table-collection");
var importer_1 = require("./formats/importer");
var images_1 = require("./images/images");
var interval_1 = require("./interval");
var paragraph_1 = require("./paragraph");
var section_1 = require("./section");
var insert_text_1 = require("./api-utils/insert-text");
var SubDocumentTypeApi;
(function (SubDocumentTypeApi) {
    SubDocumentTypeApi[SubDocumentTypeApi["Main"] = 0] = "Main";
    SubDocumentTypeApi[SubDocumentTypeApi["Header"] = 1] = "Header";
    SubDocumentTypeApi[SubDocumentTypeApi["Footer"] = 2] = "Footer";
    SubDocumentTypeApi[SubDocumentTypeApi["TextBox"] = 3] = "TextBox";
})(SubDocumentTypeApi = exports.SubDocumentTypeApi || (exports.SubDocumentTypeApi = {}));
var HeaderFooterTypeApi;
(function (HeaderFooterTypeApi) {
    HeaderFooterTypeApi[HeaderFooterTypeApi["First"] = 0] = "First";
    HeaderFooterTypeApi[HeaderFooterTypeApi["Odd"] = 1] = "Odd";
    HeaderFooterTypeApi[HeaderFooterTypeApi["Even"] = 2] = "Even";
    HeaderFooterTypeApi[HeaderFooterTypeApi["Primary"] = 1] = "Primary";
})(HeaderFooterTypeApi = exports.HeaderFooterTypeApi || (exports.HeaderFooterTypeApi = {}));
var SectionBreakTypeApi;
(function (SectionBreakTypeApi) {
    SectionBreakTypeApi[SectionBreakTypeApi["NextPage"] = 0] = "NextPage";
    SectionBreakTypeApi[SectionBreakTypeApi["OddPage"] = 1] = "OddPage";
    SectionBreakTypeApi[SectionBreakTypeApi["EvenPage"] = 2] = "EvenPage";
    SectionBreakTypeApi[SectionBreakTypeApi["Continuous"] = 3] = "Continuous";
})(SectionBreakTypeApi = exports.SectionBreakTypeApi || (exports.SectionBreakTypeApi = {}));
var SubDocumentApi = (function () {
    function SubDocumentApi(processor, subDocument) {
        this._subDocument = subDocument;
        this._processor = processor;
    }
    Object.defineProperty(SubDocumentApi.prototype, "paragraphs", {
        get: function () {
            return new paragraph_collection_1.ParagraphCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "bookmarks", {
        get: function () {
            return new bookmark_collection_1.BookmarkCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "rangePermissions", {
        get: function () {
            return new range_permission_collection_1.RangePermissionCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "tables", {
        get: function () {
            return new table_collection_1.TableCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "fields", {
        get: function () {
            return new field_collection_1.FieldCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "hyperlinks", {
        get: function () {
            return new hyperlink_collection_1.HyperlinkCollection(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "images", {
        get: function () {
            return new images_1.ImagesApi(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "parentSubDocument", {
        get: function () {
            var info = this._subDocument.info;
            if (info.isTextBox)
                return new SubDocumentApi(this._processor, this._processor.modelManager.model.subDocuments[info.parentSubDocumentId]);
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "id", {
        get: function () {
            return this._subDocument.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "type", {
        get: function () {
            return this._subDocument.info.getType();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "interval", {
        get: function () {
            return new interval_1.IntervalApi(0, this._subDocument.getDocumentEndPosition());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentApi.prototype, "length", {
        get: function () {
            return this._subDocument.getDocumentEndPosition();
        },
        enumerable: true,
        configurable: true
    });
    SubDocumentApi.prototype.insertText = function (position, text) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        text = parameter_checker_1.ApiParametersChecker.check(text, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor('text', function (v) { return v; }, true)
        ]);
        return interval_1.convertToIntervalApi(insert_text_1.insertTextThroughApi(position, text, this._subDocument, this._processor, { wrapIntoBeginUpdate: true }));
    };
    SubDocumentApi.prototype.insertLineBreak = function (position) {
        return insertSpecialCharacter(position, rich_utils_1.RichUtils.specialCharacters.LineBreak, this._processor, this._subDocument);
    };
    SubDocumentApi.prototype.insertColumnBreak = function (position) {
        return insertSpecialCharacter(position, rich_utils_1.RichUtils.specialCharacters.ColumnBreak, this._processor, this._subDocument);
    };
    SubDocumentApi.prototype.insertPageBreak = function (position) {
        return insertSpecialCharacter(position, rich_utils_1.RichUtils.specialCharacters.PageBreak, this._processor, this._subDocument);
    };
    SubDocumentApi.prototype.insertSectionBreak = function (position, type) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        var secStartType = parameter_checker_1.ApiParametersChecker.check(type, 2, false, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('type', function (val) { return val; }, SectionBreakTypeApi, 'SectionBreakType')
        ]);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.beginUpdate();
        this._processor.modelManager.modelManipulator.section.insertSectionAndSetStartType(position, secStartType, inputPos.charPropsBundle);
        this._processor.endUpdate();
        return new section_1.SectionApi(this._processor, this._processor.modelManager.model.getSectionByPosition(position + 1));
    };
    SubDocumentApi.prototype.insertPicture = function (position, base64, size, callback) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        base64 = parameter_checker_1.ApiParametersChecker.check(base64, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor("base64", function (s) { return s; }, false)
        ]);
        size = parameter_checker_1.ApiParametersChecker.check(size, 3, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'Size', function (val) { return val; })
        ]);
        if (size) {
            parameter_checker_1.ApiParametersChecker.check(size.width, 3, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('size.width', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
            parameter_checker_1.ApiParametersChecker.check(size.height, 3, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('size.height', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
        }
        callback = parameter_checker_1.ApiParametersChecker.check(callback, 4, true, [
            parameter_checker_1.ApiParametersChecker.functionDescriptor('callback', function (val) { return val; })
        ]);
        if (!callback)
            callback = function () { };
        var imageCache = this._processor.modelManager.model.cache.imageCache;
        var cacheInfo = imageCache.createUnloadedByBase64OrUrl(base64);
        var actualSize = size ? new size_1.Size(size.width, size.height) : undefined;
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.beginUpdate();
        this._processor.modelManager.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo), image_loading_options_1.ImageLoadingOptions.initByActualSize(actualSize, function (picInterval, _cacheInfo) { return callback(interval_1.convertToIntervalApi(picInterval)); }));
        this._processor.endUpdate();
    };
    SubDocumentApi.prototype.insertParagraph = function (position) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition());
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.beginUpdate();
        this._processor.modelManager.modelManipulator.paragraph.insertParagraphViaHistory(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, new properties_bundle_1.MaskedParagraphPropertiesBundleFull(undefined, undefined, undefined, undefined), false));
        this._processor.endUpdate();
        return new paragraph_1.ParagraphApi(this._processor, this._subDocument.getParagraphByPosition(position));
    };
    SubDocumentApi.prototype.insertRtf = function (position, rtfText, callback) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        rtfText = parameter_checker_1.ApiParametersChecker.check(rtfText, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor("rtf", function (s) { return s; }, false)
        ]);
        callback = parameter_checker_1.ApiParametersChecker.check(callback, 3, true, [
            parameter_checker_1.ApiParametersChecker.functionDescriptor('callback', function (val) { return val; })
        ]);
        if (!callback)
            callback = function () { };
        importer_1.insertRtfInSubDocumentPublic(this._processor, this._subDocument, position, rtfText, function (interval, isRtfValid) { return callback(interval_1.convertToIntervalApi(interval), isRtfValid); });
    };
    SubDocumentApi.prototype.getRtf = function (interval) {
        var _this = this;
        var coreInterval;
        if (interval) {
            coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, true, [
                model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
            ]);
        }
        else {
            coreInterval = this._subDocument.interval;
        }
        return importer_1.getRtfFromSubDocumentPublic(this._processor.modelManager.richOptions, this._subDocument, coreInterval);
    };
    SubDocumentApi.prototype.insertContent = function (position, content, documentFormat, callback) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        content = parameter_checker_1.ApiParametersChecker.check(content, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor("contentAsBase64", function (s) { return s; }, false),
            parameter_checker_1.ApiParametersChecker.objectDescriptor("contentAsFile", "File", function (s) { return s; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor("contentAsBlob", "Blob", function (s) { return s; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor("contentAsArrayBuffer", "ArrayBuffer", function (s) { return s; }),
        ]);
        var coreDocumentFormat = parameter_checker_1.ApiParametersChecker.check(documentFormat, 3, false, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('documentFormat', function (val) { return val; }, document_format_1.DocumentFormat, 'DevExpress.RichEdit.DocumentFormat')
        ]);
        callback = parameter_checker_1.ApiParametersChecker.check(callback, 4, true, [
            parameter_checker_1.ApiParametersChecker.functionDescriptor('callback', function (val) { return val; })
        ]);
        if (!callback)
            callback = function () { };
        importer_1.insertContentInSubDocumentPublic(this._processor, this._subDocument, position, content, coreDocumentFormat, function (interval, isRtfValid) { return callback(interval_1.convertToIntervalApi(interval), isRtfValid); });
    };
    SubDocumentApi.prototype.deleteText = function (interval) {
        var _this = this;
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
        ]);
        if (coreInterval.length) {
            this._processor.beginUpdate();
            this._processor.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this._subDocument, coreInterval), true, false);
            this._processor.endUpdate();
        }
    };
    SubDocumentApi.prototype.getText = function (interval) {
        var _this = this;
        if (interval) {
            var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
                model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
            ]);
            return this._subDocument.getText(coreInterval);
        }
        else
            return this._subDocument.getText(this._subDocument.interval);
    };
    SubDocumentApi.prototype.getCharacterProperties = function (interval) {
        var _this = this;
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
        ]);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromInterval(this._subDocument, coreInterval));
        return character_properties_1.convertToCharacterPropertiesApi(inputPos.getMergedCharacterPropertiesRaw(), this._processor.modelManager.model.colorProvider);
    };
    SubDocumentApi.prototype.setCharacterProperties = function (interval, characterProperties) {
        var _this = this;
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
        ]);
        var propertiesCore = character_properties_1.convertFromCharacterPropertiesApi(characterProperties, this._processor.modelManager.model.cache.fontInfoCache, 2, true, {});
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(this._subDocument, [coreInterval]));
        this._processor.beginUpdate();
        new character_properties_helper_1.CharacterPropertiesApplier(this._processor.modelManager, inputPos, propertiesCore, this._subDocument, [coreInterval]).apply();
        this._processor.endUpdate();
    };
    SubDocumentApi.prototype.getParagraphProperties = function (interval) {
        var _this = this;
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
        ]);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(this._subDocument, [coreInterval]));
        return paragraph_1.convertToParagraphPropertiesApi(inputPos.getMergedParagraphPropertiesFull(), this._processor.modelManager.model.colorProvider);
    };
    SubDocumentApi.prototype.setParagraphProperties = function (interval, paragraphProperties) {
        var _this = this;
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); })
        ]);
        var propertiesCore = paragraph_1.convertFromParagraphPropertiesApi(paragraphProperties, 2);
        var inputPos = new input_position_base_1.InputPositionBase()
            .setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(this._subDocument, [coreInterval]));
        this._processor.beginUpdate();
        new paragraph_properties_helper_1.ParagraphPropertiesApplier(this._processor.modelManager, inputPos, propertiesCore, this._subDocument, [coreInterval]).apply();
        this._processor.endUpdate();
    };
    return SubDocumentApi;
}());
exports.SubDocumentApi = SubDocumentApi;
function insertSpecialCharacter(position, text, processor, subDocument) {
    position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
    ]);
    position = math_1.MathUtils.restrictValue(position, 0, subDocument.getDocumentEndPosition() - 1);
    var inputPos = new input_position_base_1.InputPositionBase().setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(subDocument, [new fixed_1.FixedInterval(position, 0)]));
    var result = processor.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, position), inputPos.charPropsBundle, run_type_1.RunType.TextRun, text));
    return interval_1.convertToIntervalApi(result.insertedInterval);
}
