"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bookmark_history_items_1 = require("../core/model/history/items/bookmark-history-items");
var api_utils_1 = require("./api-utils/api-utils");
var interval_1 = require("./interval");
var sub_document_1 = require("./sub-document");
var BookmarkApi = (function () {
    function BookmarkApi(processor, subDocument, bookmark) {
        this._bookmark = bookmark;
        this._subDocument = subDocument;
        this._processor = processor;
    }
    Object.defineProperty(BookmarkApi.prototype, "index", {
        get: function () {
            return api_utils_1.ApiUtils.getObject(this._subDocument.bookmarks, function (b) { return b.start; }, this._bookmark.start, this._bookmark);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkApi.prototype, "subDocument", {
        get: function () {
            return new sub_document_1.SubDocumentApi(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkApi.prototype, "interval", {
        get: function () {
            return new interval_1.IntervalApi(this._bookmark.start, this._bookmark.length);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkApi.prototype, "name", {
        get: function () { return this._bookmark.name; },
        enumerable: true,
        configurable: true
    });
    BookmarkApi.prototype.delete = function () {
        this._processor.modelManager.history.addAndRedo(new bookmark_history_items_1.DeleteBookmarkHistoryItem(this._processor.modelManager.modelManipulator, this._subDocument, this._bookmark.constBookmark));
    };
    return BookmarkApi;
}());
exports.BookmarkApi = BookmarkApi;
