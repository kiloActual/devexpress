"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_model_1 = require("../core/model/document-model");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var character_properties_1 = require("./character-properties");
var field_collection_1 = require("./collections/field-collection");
var fonts_collection_1 = require("./collections/fonts-collection");
var hyperlink_collection_1 = require("./collections/hyperlink-collection");
var numbered_list_collection_1 = require("./collections/numbered-list-collection");
var section_collection_1 = require("./collections/section-collection");
var sub_documents_collection_1 = require("./collections/sub-documents-collection");
var RichEditDocumentApi = (function () {
    function RichEditDocumentApi(processor) {
        this._processor = processor;
    }
    Object.defineProperty(RichEditDocumentApi.prototype, "fonts", {
        get: function () {
            return new fonts_collection_1.FontCollection(this._processor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "subDocuments", {
        get: function () {
            return new sub_documents_collection_1.SubDocumentCollection(this._processor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "sections", {
        get: function () {
            return new section_collection_1.SectionCollection(this._processor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "bookmarks", {
        get: function () {
            return this.subDocuments.main.bookmarks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "rangePermissions", {
        get: function () {
            return this.subDocuments.main.rangePermissions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "paragraphs", {
        get: function () {
            return this.subDocuments.main.paragraphs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "tables", {
        get: function () {
            return this.subDocuments.main.tables;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "fields", {
        get: function () {
            return new field_collection_1.FieldCollection(this._processor, this._processor.modelManager.model.mainSubDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "hyperlinks", {
        get: function () {
            return new hyperlink_collection_1.HyperlinkCollection(this._processor, this._processor.modelManager.model.mainSubDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "lists", {
        get: function () {
            return new numbered_list_collection_1.ListCollection(this._processor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "length", {
        get: function () {
            return this.subDocuments.main.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "interval", {
        get: function () { return this.subDocuments.main.interval; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RichEditDocumentApi.prototype, "isProtected", {
        get: function () {
            return this._processor.modelManager.model.isDocumentProtectionEnabled;
        },
        enumerable: true,
        configurable: true
    });
    RichEditDocumentApi.prototype.protect = function (password) {
        this._processor.modelManager.modelManipulator.documentProtectionProperties.enforceDocumentProtection(password);
    };
    RichEditDocumentApi.prototype.unprotect = function () {
        this._processor.modelManager.modelManipulator.documentProtectionProperties.forceRemoveDocumentProtection();
    };
    RichEditDocumentApi.prototype.checkProtectionPassword = function (password) {
        return this.isProtected ? this._processor.modelManager.model.checkDocumentProtectionPassword(password) : false;
    };
    RichEditDocumentApi.prototype.insertText = function (position, text) {
        return this.subDocuments.main.insertText(position, text);
    };
    RichEditDocumentApi.prototype.insertLineBreak = function (position) {
        return this.subDocuments.main.insertLineBreak(position);
    };
    RichEditDocumentApi.prototype.insertColumnBreak = function (position) {
        return this.subDocuments.main.insertColumnBreak(position);
    };
    RichEditDocumentApi.prototype.insertPageBreak = function (position) {
        return this.subDocuments.main.insertPageBreak(position);
    };
    RichEditDocumentApi.prototype.insertSectionBreak = function (position, type) {
        return this.subDocuments.main.insertSectionBreak(position, type);
    };
    RichEditDocumentApi.prototype.insertPicture = function (position, base64, size, callback) {
        this.subDocuments.main.insertPicture(position, base64, size, callback);
    };
    RichEditDocumentApi.prototype.insertParagraph = function (position) {
        return this.subDocuments.main.insertParagraph(position);
    };
    RichEditDocumentApi.prototype.deleteText = function (interval) {
        return this.subDocuments.main.deleteText(interval);
    };
    RichEditDocumentApi.prototype.getText = function (interval) {
        return this.subDocuments.main.getText(interval);
    };
    RichEditDocumentApi.prototype.getCharacterProperties = function (interval) {
        return this.subDocuments.main.getCharacterProperties(interval);
    };
    RichEditDocumentApi.prototype.setCharacterProperties = function (interval, characterProperties) {
        this.subDocuments.main.setCharacterProperties(interval, characterProperties);
    };
    RichEditDocumentApi.prototype.getParagraphProperties = function (interval) {
        return this.subDocuments.main.getParagraphProperties(interval);
    };
    RichEditDocumentApi.prototype.setParagraphProperties = function (interval, paragraphProperties) {
        this.subDocuments.main.setParagraphProperties(interval, paragraphProperties);
    };
    RichEditDocumentApi.prototype.getDefaultCharacterProperties = function () {
        return character_properties_1.convertToCharacterPropertiesApi(this._processor.modelManager.model.defaultCharacterProperties, this._processor.modelManager.model.colorProvider);
    };
    RichEditDocumentApi.prototype.setDefaultCharacterProperties = function (characterProperties) {
        var propertiesCore = character_properties_1.convertFromCharacterPropertiesApi(characterProperties, this._processor.modelManager.model.cache.fontInfoCache, 1, false, this._processor.modelManager.model.defaultCharacterProperties.clone());
        this._processor.beginUpdate();
        this._processor.modelManager.model.defaultCharacterProperties =
            this._processor.modelManager.model.cache.maskedCharacterPropertiesCache.getItem(propertiesCore);
        number_1.NumberMapUtils.forEach(this._processor.modelManager.model.subDocuments, function (sd) {
            return sd.resetMergedFormattingCache(document_model_1.ResetFormattingCacheType.All);
        });
        this._processor.endUpdate();
    };
    return RichEditDocumentApi;
}());
exports.RichEditDocumentApi = RichEditDocumentApi;
