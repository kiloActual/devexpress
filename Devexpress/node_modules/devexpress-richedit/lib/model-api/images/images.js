"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var anchor_info_1 = require("../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../core/model/floating-objects/enums");
var sizes_1 = require("../../core/model/floating-objects/sizes");
var insert_picture_manipulator_params_1 = require("../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var model_iterator_1 = require("../../core/model/model-iterator");
var run_type_1 = require("../../core/model/runs/run-type");
var shape_1 = require("../../core/model/shapes/shape");
var sub_document_1 = require("../../core/model/sub-document");
var input_position_base_1 = require("../../core/selection/input-position-base");
var selection_intervals_info_1 = require("../../core/selection/selection-intervals-info");
var constants_1 = require("@devexpress/utils/lib/constants");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var non_visual_drawing_object_info_1 = require("../../core/model/manipulators/picture-manipulator/non-visual-drawing-object-info");
var api_utils_1 = require("../api-utils/api-utils");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var floating_image_1 = require("./floating-image");
var image_enums_1 = require("./image-enums");
var image_iterator_1 = require("./image-iterator");
var inline_image_1 = require("./inline-image");
function getInlineImageApiFromRun(processor, subDocument, runInfo) {
    return new inline_image_1.InlineImageApi(processor, subDocument, runInfo.getAbsoluteRunPosition(), runInfo.run);
}
exports.getInlineImageApiFromRun = getInlineImageApiFromRun;
function getFloatingImageApiFromRun(processor, subDocument, runInfo) {
    return new floating_image_1.FloatingImageApi(processor, subDocument, runInfo.getAbsoluteRunPosition(), runInfo.run);
}
exports.getFloatingImageApiFromRun = getFloatingImageApiFromRun;
function getImageApiFromRun(processor, subDocument, runInfo) {
    if (runInfo.run.getType() == run_type_1.RunType.AnchoredPictureRun)
        return getFloatingImageApiFromRun(processor, subDocument, runInfo);
    if (runInfo.run.getType() == run_type_1.RunType.InlinePictureRun)
        return getInlineImageApiFromRun(processor, subDocument, runInfo);
    return null;
}
exports.getImageApiFromRun = getImageApiFromRun;
function getImagesByInterval(processor, subDocument, interval) {
    var result = [];
    var it = new model_iterator_1.ModelIterator(subDocument, false);
    it.setPosition(interval.start);
    var checkRun = function () {
        var img = getImageApiFromRun(processor, subDocument, it);
        if (img)
            result.push(img);
    };
    if (interval.length == 0) {
        checkRun();
    }
    else {
        var end = interval.end;
        do {
            checkRun();
        } while (it.moveToNextRun() && it.getAbsoluteRunPosition() < end);
    }
    return result;
}
var ImagesApi = (function () {
    function ImagesApi(processor, subDocument) {
        this._processor = processor;
        this._subDocument = subDocument;
    }
    ImagesApi.prototype.createInline = function (position, options) {
        var _this = this;
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        parameter_checker_1.ApiParametersChecker.check(options, 2, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('options', 'IInsertInlineImageOptionsApi', function (val) { return val; })
        ]);
        var source;
        if (options.base64) {
            source = parameter_checker_1.ApiParametersChecker.check(options.base64, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("options.base64", function (s) { return s; }, false)
            ]);
        }
        else if (options.url) {
            source = parameter_checker_1.ApiParametersChecker.check(options.url, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("options.url", function (s) { return s; }, false)
            ]);
        }
        else {
            throw new Error('options.base64 or options.url must be defined');
        }
        var size = parameter_checker_1.ApiParametersChecker.check(options.actualSize, 2, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('options.size', 'Size', function (val) { return val; })
        ]);
        if (size) {
            parameter_checker_1.ApiParametersChecker.check(size.width, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('options.size.width', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
            parameter_checker_1.ApiParametersChecker.check(size.height, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('options.size.height', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
        }
        var callback = parameter_checker_1.ApiParametersChecker.check(options.callback, 4, true, [
            parameter_checker_1.ApiParametersChecker.functionDescriptor('options.callback', function (val) { return val; })
        ]);
        if (!callback)
            callback = function () { };
        var imageCache = this._processor.modelManager.model.cache.imageCache;
        var cacheInfo = imageCache.createUnloadedByBase64OrUrl(source);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.beginUpdate();
        var info = insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo);
        info.containerProperties.description = options.description;
        this._processor.modelManager.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, info, image_loading_options_1.ImageLoadingOptions.initByActualSize(size ? new size_1.Size(size.width, size.height) : undefined, function (_picInterval, _cacheInfo) {
            return setTimeout(function () {
                callback(getInlineImageApiFromRun(_this._processor, _this._subDocument, _this._subDocument.getRunAndIndexesByPosition(position)));
            }, 0);
        }));
        this._processor.endUpdate();
        return getInlineImageApiFromRun(this._processor, this._subDocument, this._subDocument.getRunAndIndexesByPosition(position));
    };
    ImagesApi.prototype.createFloating = function (position, options) {
        var _this = this;
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('position', function (val) { return val; })
        ]);
        position = math_1.MathUtils.restrictValue(position, 0, this._subDocument.getDocumentEndPosition() - 1);
        parameter_checker_1.ApiParametersChecker.check(options, 2, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('options', 'IInsertFloatingImageOptionsApi', function (val) { return val; })
        ]);
        var imageCache = this._processor.modelManager.model.cache.imageCache;
        var cacheInfo;
        if (options.base64) {
            var source = parameter_checker_1.ApiParametersChecker.check(options.base64, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("options.base64", function (s) { return s; }, false)
            ]);
            cacheInfo = imageCache.createUnloadedInfoByBase64(source);
        }
        else if (options.url) {
            var source = parameter_checker_1.ApiParametersChecker.check(options.url, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("options.url", function (s) { return s; }, false)
            ]);
            cacheInfo = imageCache.createUnloadedInfoByUrl(source);
        }
        else {
            throw new Error('options.base64 or options.url must be defined');
        }
        var size = parameter_checker_1.ApiParametersChecker.check(options.actualSize, 2, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('options.size', 'Size', function (val) { return val; })
        ]);
        if (size) {
            parameter_checker_1.ApiParametersChecker.check(size.width, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('options.size.width', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
            parameter_checker_1.ApiParametersChecker.check(size.height, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('options.size.height', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
        }
        var callback = parameter_checker_1.ApiParametersChecker.check(options.callback, 4, true, [
            parameter_checker_1.ApiParametersChecker.functionDescriptor('options.callback', function (val) { return val; })
        ]);
        if (!callback)
            callback = function () { };
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.beginUpdate();
        var shape = new shape_1.Shape();
        if (common_1.isDefined(options.outlineWidth))
            shape.outlineWidth = options.outlineWidth;
        if (common_1.isDefined(options.outlineColor))
            shape.outlineColor = parameter_checker_1.ApiParametersChecker.check(options.outlineColor, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('options.outlineColor'));
        var anchorInfo = new anchor_info_1.AnchorInfo();
        if (common_1.isDefined(options.wrapSide))
            anchorInfo.wrapSide = options.wrapSide;
        var wrapType = common_1.isDefined(options.wrapType) ? options.wrapType : image_enums_1.WrapTypeApi.Square;
        switch (wrapType) {
            case image_enums_1.WrapTypeApi.BehindText: {
                anchorInfo.wrapType = enums_1.AnchorObjectTextWrapType.None;
                anchorInfo.isBehindDoc = true;
                break;
            }
            case image_enums_1.WrapTypeApi.InFrontOfText: {
                anchorInfo.wrapType = enums_1.AnchorObjectTextWrapType.None;
                anchorInfo.isBehindDoc = false;
                break;
            }
            default: {
                anchorInfo.wrapType = wrapType;
                anchorInfo.isBehindDoc = false;
            }
        }
        if (common_1.isDefined(options.distance)) {
            if (common_1.isDefined(options.distance.left))
                anchorInfo.leftDistance = options.distance.left;
            if (common_1.isDefined(options.distance.right))
                anchorInfo.rightDistance = options.distance.right;
            if (common_1.isDefined(options.distance.top))
                anchorInfo.topDistance = options.distance.top;
            if (common_1.isDefined(options.distance.bottom))
                anchorInfo.bottomDistance = options.distance.bottom;
        }
        var horizontalPosition = options.horizontalPosition;
        if (horizontalPosition)
            floating_image_1.applyHorizontalPosition(horizontalPosition, anchorInfo);
        var verticalPosition = options.verticalPosition;
        if (verticalPosition)
            floating_image_1.applyVerticalPosition(verticalPosition, anchorInfo);
        var anchorPictureInfo = new insert_picture_manipulator_params_1.AnchorPictureInfo(new sizes_1.PictureSize(true, 0, cacheInfo, new size_1.Size(100, 100)), shape, anchorInfo, new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo(), new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo());
        anchorPictureInfo.containerProperties.description = options.description;
        this._processor.modelManager.modelManipulator.picture.insertAnchoredPictureViaHistory(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, anchorPictureInfo, new image_loading_options_1.ImageLoadingOptions(false, size ? new size_1.Size(size.width, size.height) : undefined, function (_picInterval, _cacheInfo) {
            return setTimeout(function () {
                callback(getFloatingImageApiFromRun(_this._processor, _this._subDocument, _this._subDocument.getRunAndIndexesByPosition(position)));
            }, 0);
        }));
        this._processor.endUpdate();
        return getFloatingImageApiFromRun(this._processor, this._subDocument, this._subDocument.getRunAndIndexesByPosition(position));
    };
    ImagesApi.prototype.getIterator = function (startPosition) {
        if (startPosition === void 0) { startPosition = 0; }
        var pos = math_1.MathUtils.restrictValue(startPosition, 0, this._subDocument.getDocumentEndPosition() - 1);
        return new image_iterator_1.ImageIteratorApi(this._processor, this._subDocument, pos);
    };
    ImagesApi.prototype.getAllImages = function () {
        return getImagesByInterval(this._processor, this._subDocument, this._subDocument.interval);
    };
    ImagesApi.prototype.find = function (position) {
        var _this = this;
        var coreIntervals = list_1.ListUtils.map(parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (pos) { return [new fixed_1.FixedInterval(pos, 0)]; }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return [new fixed_1.FixedInterval(interval.start, interval.length)]; }),
            model_parameter_checker_1.ModelParametersChecker.intervalsDescriptor("intervals", function (apiIntervals) {
                return list_1.ListUtils.map(apiIntervals, function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); });
            })
        ]), function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); });
        return list_1.ListUtils.accumulate(coreIntervals, [], function (acc, interval) {
            return list_1.ListUtils.addListOnTail(acc, getImagesByInterval(_this._processor, _this._subDocument, interval));
        });
    };
    return ImagesApi;
}());
exports.ImagesApi = ImagesApi;
