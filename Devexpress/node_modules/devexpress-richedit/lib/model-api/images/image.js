"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var enums_1 = require("../../core/model/floating-objects/enums");
var change_rectangular_object_history_item_1 = require("../../core/model/history/items/change-rectangular-object-history-item");
var run_type_1 = require("../../core/model/runs/run-type");
var sub_document_1 = require("../../core/model/sub-document");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var mime_type_1 = require("@devexpress/utils/lib/utils/mime-type");
var interval_1 = require("../interval");
var size_2 = require("../size");
var image_enums_1 = require("./image-enums");
var images_1 = require("./images");
var size_3 = require("@devexpress/utils/lib/geometry/size");
var constants_1 = require("@devexpress/utils/lib/constants");
var ImageApi = (function () {
    function ImageApi(processor, subDocument, position, run) {
        this._processor = processor;
        this._subDocument = subDocument;
        this._position = position;
        this._run = run;
    }
    Object.defineProperty(ImageApi.prototype, "base64", {
        get: function () { return base64_1.Base64Utils.deleteDataUrlPrefix(this._run.info.cacheInfo.base64); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "url", {
        get: function () { return this._run.info.cacheInfo.imageUrl; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "interval", {
        get: function () { return new interval_1.IntervalApi(this._position, 1); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "isLoaded", {
        get: function () { return this._run.info.cacheInfo.isLoaded; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "extension", {
        get: function () {
            var mimeType = base64_1.Base64Utils.getKnownMimeType(this._run.info.cacheInfo.base64);
            return mimeType === mime_type_1.DxMimeType.Unknown ? '' : mime_type_1.MimeTypeUtils.typeToExtension(mimeType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "originalSize", {
        get: function () {
            var size = this._run.info.size.originalSize;
            return new size_2.SizeApi(size.width, size.height);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "actualSize", {
        get: function () {
            var size = this._run.info.size.actualSize;
            return new size_2.SizeApi(size.width, size.height);
        },
        set: function (value) {
            var size = parameter_checker_1.ApiParametersChecker.check(value, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'SizeApi', function (val) { return val; })
            ]);
            var oldSize = this._run.info.size;
            var newScale = size_1.Size.initByCommonAction(function (adp) { return adp(size) / adp(oldSize.originalSize) * 100; });
            if (this._run.getType() == run_type_1.RunType.InlinePictureRun) {
                this._processor.modelManager.history.addAndRedo(new change_rectangular_object_history_item_1.ChangeRectangularObjectScaleHistoryItem(this._processor.modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, new fixed_1.FixedInterval(this._position, 1)), newScale));
            }
            else {
                var newSize = oldSize.clone();
                newSize.scale = newScale;
                this._processor.modelManager.modelManipulator.picture.changePictureSize(this._subDocument, this._position, newSize);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ImageApi.prototype, "description", {
        get: function () { return this._run.info.containerProperties.description; },
        set: function (value) {
            this._processor.modelManager.modelManipulator.picture.changeDescription(this._subDocument, this._position, value);
        },
        enumerable: true,
        configurable: true
    });
    ImageApi.prototype.changeWrapType = function (wrapType) {
        if (wrapType == this.getWrapType())
            return this;
        this._processor.beginUpdate();
        var charPropsBundle = this._subDocument.getRunByPosition(this._position).getCharPropsBundle(this._processor.modelManager.model);
        if (wrapType == image_enums_1.WrapTypeApi.Inline)
            this._processor.modelManager.modelManipulator.picture.setFloatingObjectInlineTextWrapType(this._subDocument, this._position, charPropsBundle);
        else
            this._processor.modelManager.modelManipulator.picture.setFloatingObjectTextWrapType(this._subDocument, this._position, charPropsBundle, wrapType == image_enums_1.WrapTypeApi.BehindText, wrapType == image_enums_1.WrapTypeApi.BehindText || wrapType == image_enums_1.WrapTypeApi.InFrontOfText ?
                enums_1.AnchorObjectTextWrapType.None : wrapType);
        this._processor.endUpdate();
        return images_1.getImageApiFromRun(this._processor, this._subDocument, this._subDocument.getRunAndIndexesByPosition(this._position));
    };
    ImageApi.prototype.delete = function () {
        this._processor.beginUpdate();
        this._processor.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this._subDocument, new fixed_1.FixedInterval(this._position, 1)), false, false);
        this._processor.endUpdate();
    };
    ImageApi.prototype.onLoaded = function (callback) {
        var _this = this;
        this._processor.modelManager.modelManipulator.picture.loader
            .addLoadListener(this._run.cacheInfo, function () { return callback(_this); });
    };
    ImageApi.prototype.reload = function (base64, size) {
        base64 = parameter_checker_1.ApiParametersChecker.check(base64, 1, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor("base64", function (s) { return s; }, false)
        ]);
        size = parameter_checker_1.ApiParametersChecker.check(size, 2, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'Size', function (val) { return val; })
        ]);
        if (size) {
            parameter_checker_1.ApiParametersChecker.check(size.width, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('size.width', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
            parameter_checker_1.ApiParametersChecker.check(size.height, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('size.height', function (val) { return val; }, 1, constants_1.Constants.MAX_SAFE_INTEGER)
            ]);
        }
        this._processor.beginUpdate();
        try {
            this._processor.modelManager.modelManipulator.picture.reloadPicture(this._subDocument, this._position, base64, this.getSizeCore(size));
        }
        finally {
            this._processor.endUpdate();
        }
    };
    ImageApi.prototype.getSizeCore = function (size) {
        if (!size)
            return null;
        return new size_3.Size(size.width, size.height);
    };
    return ImageApi;
}());
exports.ImageApi = ImageApi;
