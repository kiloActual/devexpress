import { AnchoredPictureRun } from '../../core/model/runs/anchored-picture-run';
import { InlinePictureRun } from '../../core/model/runs/inline-picture-run';
import { SubDocument } from '../../core/model/sub-document';
import { IProcessor } from '../../core/processor';
import { IntervalApi } from '../interval';
import { SizeApi } from '../size';
import { FloatingImageApi } from './floating-image';
import { WrapTypeApi } from './image-enums';
import { InlineImageApi } from './inline-image';
export declare abstract class ImageApi {
    protected readonly _run: InlinePictureRun | AnchoredPictureRun;
    protected readonly _position: number;
    protected readonly _processor: IProcessor;
    protected readonly _subDocument: SubDocument;
    constructor(processor: IProcessor, subDocument: SubDocument, position: number, run: InlinePictureRun | AnchoredPictureRun);
    abstract getWrapType(): WrapTypeApi;
    changeWrapType(wrapType: WrapTypeApi): InlineImageApi | FloatingImageApi;
    delete(): void;
    onLoaded(callback: (image: ImageApi) => void): void;
    reload(base64: string, size?: SizeApi): void;
    private getSizeCore;
    readonly base64: string;
    readonly url: string | undefined;
    readonly interval: IntervalApi;
    readonly isLoaded: boolean;
    readonly extension: string;
    readonly originalSize: SizeApi;
    actualSize: SizeApi;
    description: string;
}
//# sourceMappingURL=image.d.ts.map
