"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var enums_1 = require("../../core/model/floating-objects/enums");
var common_1 = require("@devexpress/utils/lib/utils/common");
var api_utils_1 = require("../api-utils/api-utils");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var image_1 = require("./image");
var image_enums_1 = require("./image-enums");
var image_interfaces_1 = require("./image-interfaces");
function applyHorizontalPosition(position, anchorInfo) {
    if (common_1.isDefined(position.alignment)) {
        var alignmentPosition = position;
        anchorInfo.percentOffset.x = 0;
        anchorInfo.horizontalPositionAlignment = alignmentPosition.alignment;
        anchorInfo.horizontalPositionType = alignmentPosition.relativeTo;
        return true;
    }
    else if (common_1.isDefined(position.position)) {
        var absolutePosition = position;
        anchorInfo.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.None;
        anchorInfo.percentOffset.x = 0;
        anchorInfo.offset.x = absolutePosition.position;
        anchorInfo.horizontalPositionType = absolutePosition.relativeTo;
        return true;
    }
    else if (common_1.isDefined(position.relativePosition)) {
        var relativePosition = position;
        anchorInfo.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.None;
        anchorInfo.percentOffset.x = relativePosition.relativePosition;
        anchorInfo.horizontalPositionType = relativePosition.relativeTo;
        return true;
    }
    return false;
}
exports.applyHorizontalPosition = applyHorizontalPosition;
function applyVerticalPosition(position, anchorInfo) {
    if (common_1.isDefined(position.alignment)) {
        var alignmentPosition = position;
        anchorInfo.percentOffset.y = 0;
        anchorInfo.verticalPositionAlignment = alignmentPosition.alignment;
        anchorInfo.verticalPositionType = alignmentPosition.relativeTo;
        return true;
    }
    else if (common_1.isDefined(position.position)) {
        var absolutePosition = position;
        anchorInfo.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        anchorInfo.percentOffset.y = 0;
        anchorInfo.offset.y = absolutePosition.position;
        anchorInfo.verticalPositionType = absolutePosition.relativeTo;
        return true;
    }
    else if (common_1.isDefined(position.relativePosition)) {
        var relativePosition = position;
        anchorInfo.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        anchorInfo.percentOffset.y = relativePosition.relativePosition;
        anchorInfo.verticalPositionType = relativePosition.relativeTo;
        return true;
    }
    return false;
}
exports.applyVerticalPosition = applyVerticalPosition;
function setDistanceProperty(processor, subDocument, position, value, manipulator) {
    if (common_1.isDefined(value))
        processor.modelManager.modelManipulator.picture.changeNumberedShapeProperty(subDocument, position, value, manipulator);
}
var FloatingImageApi = (function (_super) {
    tslib_1.__extends(FloatingImageApi, _super);
    function FloatingImageApi(processor, subDocument, position, run) {
        return _super.call(this, processor, subDocument, position, run) || this;
    }
    Object.defineProperty(FloatingImageApi.prototype, "outlineColor", {
        get: function () { return api_utils_1.ApiUtils.internalColorToApiColor(this._run.info.shape.outlineColor); },
        set: function (value) {
            var color = parameter_checker_1.ApiParametersChecker.check(value, 1, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('value'));
            this._processor.beginUpdate();
            this._processor.modelManager.modelManipulator.picture.changeShapeOutlineColor(this._subDocument, this._position, color);
            this._processor.endUpdate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FloatingImageApi.prototype, "outlineWidth", {
        get: function () { return this._run.info.shape.outlineWidth; },
        set: function (value) {
            this._processor.beginUpdate();
            this._processor.modelManager.modelManipulator.picture.changeShapeOutlineWidth(this._subDocument, this._position, value);
            this._processor.endUpdate();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FloatingImageApi.prototype, "wrapSide", {
        get: function () { return this._run.anchorInfo.wrapSide; },
        set: function (wrapSide) {
            parameter_checker_1.ApiParametersChecker.check(wrapSide, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('wrapSide', 'WrapSide', function (val) { return val; })
            ]);
            if (this.wrapSide !== wrapSide)
                this._processor.modelManager.modelManipulator.picture.changeWrapSide(this._subDocument, this._position, wrapSide);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FloatingImageApi.prototype, "distance", {
        get: function () {
            var anchorInfo = this._run.anchorInfo;
            return {
                left: anchorInfo.leftDistance,
                top: anchorInfo.topDistance,
                right: anchorInfo.rightDistance,
                bottom: anchorInfo.bottomDistance
            };
        },
        set: function (value) {
            var history = this._processor.modelManager.history;
            this._processor.beginUpdate();
            history.beginTransaction();
            var anchorInfoManip = this._processor.modelManager.modelManipulator.floatingObject.anchorInfo;
            setDistanceProperty(this._processor, this._subDocument, this._position, value.left, anchorInfoManip.leftDistance);
            setDistanceProperty(this._processor, this._subDocument, this._position, value.top, anchorInfoManip.topDistance);
            setDistanceProperty(this._processor, this._subDocument, this._position, value.right, anchorInfoManip.rightDistance);
            setDistanceProperty(this._processor, this._subDocument, this._position, value.bottom, anchorInfoManip.bottomDistance);
            history.endTransaction();
            this._processor.endUpdate();
        },
        enumerable: true,
        configurable: true
    });
    FloatingImageApi.prototype.getHorizontalPosition = function () {
        var anchorInfo = this._run.anchorInfo;
        if (anchorInfo.isUsedHorizontalAlignment())
            return new image_interfaces_1.HorizontalAlignedPositionApi(anchorInfo.horizontalPositionType, anchorInfo.horizontalPositionAlignment);
        if (anchorInfo.isUsedHorizontalAbsolutePosition())
            return new image_interfaces_1.HorizontalAbsolutePositionApi(anchorInfo.horizontalPositionType, anchorInfo.offset.x);
        return new image_interfaces_1.HorizontalRelativePositionApi(anchorInfo.horizontalPositionType, anchorInfo.percentOffset.x);
    };
    FloatingImageApi.prototype.setHorizontalPosition = function (position) {
        parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IHorizontalAlignmentPosition', function (val) { return val; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IHorizontalAbsolutePosition', function (val) { return val; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IHorizontalRelativePosition', function (val) { return val; })
        ]);
        var newAnchorInfo = this._run.anchorInfo.clone();
        if (applyHorizontalPosition(position, newAnchorInfo)) {
            this._processor.beginUpdate();
            this._processor.modelManager.modelManipulator.picture.changeHorizontalPosition(this._subDocument, this._position, newAnchorInfo);
            this._processor.endUpdate();
        }
    };
    FloatingImageApi.prototype.getVerticalPosition = function () {
        var anchorInfo = this._run.anchorInfo;
        if (anchorInfo.isUsedVerticalAlignment())
            return new image_interfaces_1.VerticalAlignedPositionApi(anchorInfo.verticalPositionType, anchorInfo.verticalPositionAlignment);
        if (anchorInfo.isUsedVerticalAbsolutePosition())
            return new image_interfaces_1.VerticalAbsolutePositionApi(anchorInfo.verticalPositionType, anchorInfo.offset.y);
        return new image_interfaces_1.VerticalRelativePositionApi(anchorInfo.verticalPositionType, anchorInfo.percentOffset.y);
    };
    FloatingImageApi.prototype.setVerticalPosition = function (position) {
        parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IVerticalAlignmentPositionApi', function (val) { return val; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IVerticalAbsolutePositionApi', function (val) { return val; }),
            parameter_checker_1.ApiParametersChecker.objectDescriptor('position', 'IVerticalRelativePositionApi', function (val) { return val; })
        ]);
        var newAnchorInfo = this._run.anchorInfo.clone();
        if (applyVerticalPosition(position, newAnchorInfo))
            this._processor.modelManager.modelManipulator.picture.changeVerticalPosition(this._subDocument, this._position, newAnchorInfo);
    };
    FloatingImageApi.prototype.getWrapType = function () {
        var anchorInfo = this._run.anchorInfo;
        switch (anchorInfo.wrapType) {
            case enums_1.AnchorObjectTextWrapType.None:
                if (anchorInfo.isBehindDoc)
                    return image_enums_1.WrapTypeApi.BehindText;
                else
                    return image_enums_1.WrapTypeApi.InFrontOfText;
            case enums_1.AnchorObjectTextWrapType.Square:
                return image_enums_1.WrapTypeApi.Square;
            case enums_1.AnchorObjectTextWrapType.Through:
                return image_enums_1.WrapTypeApi.Through;
            case enums_1.AnchorObjectTextWrapType.Tight:
                return image_enums_1.WrapTypeApi.Tight;
            case enums_1.AnchorObjectTextWrapType.TopAndBottom:
                return image_enums_1.WrapTypeApi.TopAndBottom;
            default:
                return image_enums_1.WrapTypeApi.Square;
        }
    };
    ;
    return FloatingImageApi;
}(image_1.ImageApi));
exports.FloatingImageApi = FloatingImageApi;
