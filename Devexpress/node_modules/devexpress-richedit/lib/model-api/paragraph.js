"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var color_model_info_1 = require("../core/model/color/color-model-info");
var numbering_list_history_items_1 = require("../core/model/history/items/numbering-list-history-items");
var paragraph_properties_history_items_1 = require("../core/model/history/items/paragraph-properties-history-items");
var paragraph_properties_1 = require("../core/model/paragraph/paragraph-properties");
var paragraph_properties_helper_1 = require("../core/model/paragraph/paragraph-properties-helper");
var shading_info_1 = require("../core/model/shadings/shading-info");
var sub_document_1 = require("../core/model/sub-document");
var input_position_base_1 = require("../core/selection/input-position-base");
var selection_intervals_info_1 = require("../core/selection/selection-intervals-info");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var api_utils_1 = require("./api-utils/api-utils");
var model_parameter_checker_1 = require("./api-utils/model-parameter-checker");
var interval_1 = require("./interval");
var lists_1 = require("./lists/lists");
var ParagraphApi = (function () {
    function ParagraphApi(processor, paragraph) {
        this._processor = processor;
        this._paragraph = paragraph;
    }
    Object.defineProperty(ParagraphApi.prototype, "index", {
        get: function () {
            return this._paragraph.subDocument.getParagraphIndexByPosition(this._paragraph.interval.start);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParagraphApi.prototype, "interval", {
        get: function () {
            return interval_1.convertToIntervalApi(this._paragraph.interval);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParagraphApi.prototype, "properties", {
        get: function () {
            var parProps = this._paragraph.getParagraphMergedProperties().clone();
            return convertToParagraphPropertiesApi(parProps, this._processor.modelManager.model.colorProvider);
        },
        set: function (properties) {
            var propertiesCore = convertFromParagraphPropertiesApi(properties);
            var subDocument = this._paragraph.subDocument;
            var intervals = [this._paragraph.interval];
            var inputPos = new input_position_base_1.InputPositionBase()
                .setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(subDocument, intervals));
            new paragraph_properties_helper_1.ParagraphPropertiesApplier(this._processor.modelManager, inputPos, propertiesCore, subDocument, intervals).apply();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParagraphApi.prototype, "list", {
        get: function () {
            var list = this._processor.modelManager.model.numberingLists[this._paragraph.getNumberingListIndex()];
            return list ? new lists_1.ListApi(this._processor.modelManager, list) : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParagraphApi.prototype, "listLevel", {
        get: function () {
            return this._paragraph.listLevelIndex;
        },
        enumerable: true,
        configurable: true
    });
    ParagraphApi.prototype.addToList = function (list, targetListLevel) {
        var _this = this;
        if (targetListLevel === void 0) { targetListLevel = 0; }
        list = parameter_checker_1.ApiParametersChecker.check(list, 1, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('list', 'List', function (val) { return val; })
        ]);
        targetListLevel = parameter_checker_1.ApiParametersChecker.check(targetListLevel, 2, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('targetListLevel', function (val) { return val; }, 0, 8)
        ]);
        var subDocumentCore = this._paragraph.subDocument;
        var subDocInterval = new sub_document_1.SubDocumentInterval(subDocumentCore, new fixed_1.FixedInterval(this._paragraph.interval.start, 1));
        var parIndex = this.index;
        var parProps = this._paragraph.getParagraphMergedProperties();
        this._processor.beginUpdate();
        this._processor.modelManager.history.addTransaction(function () {
            _this._processor.modelManager.history.addAndRedo(new numbering_list_history_items_1.AddParagraphToListHistoryItem(_this._processor.modelManager.modelManipulator, subDocumentCore, parIndex, list.index, targetListLevel));
            _this._processor.modelManager.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(_this._processor.modelManager.modelManipulator, subDocInterval, parProps.leftIndent, false));
            _this._processor.modelManager.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(_this._processor.modelManager.modelManipulator, subDocInterval, parProps.firstLineIndent, false));
        });
        this._processor.endUpdate();
    };
    return ParagraphApi;
}());
exports.ParagraphApi = ParagraphApi;
var ParagraphAlignmentApi;
(function (ParagraphAlignmentApi) {
    ParagraphAlignmentApi[ParagraphAlignmentApi["Left"] = 0] = "Left";
    ParagraphAlignmentApi[ParagraphAlignmentApi["Right"] = 1] = "Right";
    ParagraphAlignmentApi[ParagraphAlignmentApi["Center"] = 2] = "Center";
    ParagraphAlignmentApi[ParagraphAlignmentApi["Justify"] = 3] = "Justify";
})(ParagraphAlignmentApi = exports.ParagraphAlignmentApi || (exports.ParagraphAlignmentApi = {}));
var ParagraphLineSpacingTypeApi;
(function (ParagraphLineSpacingTypeApi) {
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["Single"] = 0] = "Single";
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["Sesquialteral"] = 1] = "Sesquialteral";
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["Double"] = 2] = "Double";
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["Multiple"] = 3] = "Multiple";
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["Exactly"] = 4] = "Exactly";
    ParagraphLineSpacingTypeApi[ParagraphLineSpacingTypeApi["AtLeast"] = 5] = "AtLeast";
})(ParagraphLineSpacingTypeApi = exports.ParagraphLineSpacingTypeApi || (exports.ParagraphLineSpacingTypeApi = {}));
var ParagraphFirstLineIndentApi;
(function (ParagraphFirstLineIndentApi) {
    ParagraphFirstLineIndentApi[ParagraphFirstLineIndentApi["None"] = 0] = "None";
    ParagraphFirstLineIndentApi[ParagraphFirstLineIndentApi["Indented"] = 1] = "Indented";
    ParagraphFirstLineIndentApi[ParagraphFirstLineIndentApi["Hanging"] = 2] = "Hanging";
})(ParagraphFirstLineIndentApi = exports.ParagraphFirstLineIndentApi || (exports.ParagraphFirstLineIndentApi = {}));
var ParagraphPropertiesApi = (function () {
    function ParagraphPropertiesApi() {
    }
    return ParagraphPropertiesApi;
}());
exports.ParagraphPropertiesApi = ParagraphPropertiesApi;
function convertToParagraphPropertiesApi(properties, colorProvider) {
    var value = new ParagraphPropertiesApi();
    value.alignment = properties.alignment === undefined ?
        undefined :
        properties.alignment;
    value.contextualSpacing = properties.contextualSpacing;
    value.firstLineIndent = properties.firstLineIndent;
    value.firstLineIndentType = properties.firstLineIndentType === undefined ?
        undefined :
        properties.firstLineIndentType;
    value.keepLinesTogether = properties.keepLinesTogether;
    value.leftIndent = properties.leftIndent;
    value.lineSpacingType = properties.lineSpacingType === undefined ?
        undefined :
        properties.lineSpacingType;
    value.lineSpacing = properties.lineSpacing;
    value.outlineLevel = properties.outlineLevel;
    value.pageBreakBefore = properties.pageBreakBefore;
    value.rightIndent = properties.rightIndent;
    value.spacingAfter = properties.spacingAfter;
    value.spacingBefore = properties.spacingBefore;
    value.backColor = api_utils_1.ApiUtils.internalColorToApiColor(properties.shadingInfo.getActualColor(colorProvider));
    return value;
}
exports.convertToParagraphPropertiesApi = convertToParagraphPropertiesApi;
function convertFromParagraphPropertiesApi(properties, parameterIndex) {
    if (parameterIndex === void 0) { parameterIndex = 1; }
    properties = parameter_checker_1.ApiParametersChecker.check(properties, parameterIndex, false, [
        parameter_checker_1.ApiParametersChecker.objectDescriptor('properties', 'ParagraphProperties', function (val) { return val; })
    ]);
    var props = new paragraph_properties_1.ParagraphProperties();
    props.alignment = parameter_checker_1.ApiParametersChecker.check(properties.alignment, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.enumDescriptor('properties.alignment', function (val) { return val; }, ParagraphAlignmentApi, 'ParagraphAlignment')
    ]);
    props.contextualSpacing = parameter_checker_1.ApiParametersChecker.check(properties.contextualSpacing, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.contextualSpacing', function (val) { return val; })
    ]);
    props.firstLineIndent = parameter_checker_1.ApiParametersChecker.check(properties.firstLineIndent, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.firstLineIndent', function (val) { return val; })
    ]);
    props.firstLineIndentType = parameter_checker_1.ApiParametersChecker.check(properties.firstLineIndentType, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.enumDescriptor('properties.firstLineIndentType', function (val) { return val; }, ParagraphFirstLineIndentApi, 'ParagraphFirstLineIndent')
    ]);
    props.keepLinesTogether = parameter_checker_1.ApiParametersChecker.check(properties.keepLinesTogether, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.keepLinesTogether', function (val) { return val; })
    ]);
    props.leftIndent = parameter_checker_1.ApiParametersChecker.check(properties.leftIndent, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.leftIndent', function (val) { return val; })
    ]);
    props.outlineLevel = parameter_checker_1.ApiParametersChecker.check(properties.outlineLevel, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.outlineLevel', function (val) { return val; })
    ]);
    props.pageBreakBefore = parameter_checker_1.ApiParametersChecker.check(properties.pageBreakBefore, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.pageBreakBefore', function (val) { return val; })
    ]);
    props.rightIndent = parameter_checker_1.ApiParametersChecker.check(properties.rightIndent, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.rightIndent', function (val) { return val; })
    ]);
    props.spacingAfter = parameter_checker_1.ApiParametersChecker.check(properties.spacingAfter, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.spacingAfter', function (val) { return val; })
    ]);
    props.spacingBefore = parameter_checker_1.ApiParametersChecker.check(properties.spacingBefore, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.spacingBefore', function (val) { return val; })
    ]);
    var backColor = parameter_checker_1.ApiParametersChecker.check(properties.backColor, parameterIndex, true, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('properties.backColor'));
    props.shadingInfo = backColor === undefined ? undefined : shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(backColor));
    props.lineSpacingType = parameter_checker_1.ApiParametersChecker.check(properties.lineSpacingType, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.enumDescriptor('properties.lineSpacingType', function (val) { return val; }, ParagraphLineSpacingTypeApi, 'ParagraphLineSpacingType')
    ]);
    props.lineSpacing = parameter_checker_1.ApiParametersChecker.check(properties.lineSpacing, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.lineSpacing', function (val) { return val; })
    ]);
    return props;
}
exports.convertFromParagraphPropertiesApi = convertFromParagraphPropertiesApi;
