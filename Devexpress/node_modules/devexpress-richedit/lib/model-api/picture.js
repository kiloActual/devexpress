"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var anchor_info_1 = require("../core/model/floating-objects/anchor-info");
var sizes_1 = require("../core/model/floating-objects/sizes");
var change_rectangular_object_history_item_1 = require("../core/model/history/items/change-rectangular-object-history-item");
var anchor_info_property_history_item_1 = require("../core/model/history/items/floating-objects/anchor-info-property-history-item");
var change_anchored_picture_size_history_item_1 = require("../core/model/history/items/floating-objects/change-anchored-picture-size-history-item");
var insert_picture_manipulator_params_1 = require("../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var run_type_1 = require("../core/model/runs/run-type");
var shape_1 = require("../core/model/shapes/shape");
var sub_document_1 = require("../core/model/sub-document");
var input_position_base_1 = require("../core/selection/input-position-base");
var selection_intervals_info_1 = require("../core/selection/selection-intervals-info");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var anchor_info_2 = require("./anchor-info");
var api_utils_1 = require("./api-utils/api-utils");
var size_2 = require("./size");
var DrawingObjectBase = (function () {
    function DrawingObjectBase(modelManager, subDocument, run, position) {
        this._native = modelManager;
        this._subDocument = subDocument;
        this._run = run;
        this._position = position;
    }
    DrawingObjectBase.prototype.delete = function () {
        this._native.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this._subDocument, new fixed_1.FixedInterval(this._position, 1)), false, false);
    };
    Object.defineProperty(DrawingObjectBase.prototype, "anhorInfo", {
        get: function () {
            return this._getAnchorInfo();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingObjectBase.prototype, "anchorInfo", {
        set: function (info) {
            this._setAnchorInfo(info);
        },
        enumerable: true,
        configurable: true
    });
    DrawingObjectBase.prototype._getAnchorInfo = function () {
        var anchorInfo = this._run.anchorInfo;
        var result = new anchor_info_2.AnchorInfoApi();
        result.leftDistance = anchorInfo.leftDistance;
        result.rightDistance = anchorInfo.rightDistance;
        result.topDistance = anchorInfo.topDistance;
        result.bottomDistance = anchorInfo.bottomDistance;
        result.wrapType = anchorInfo.wrapType;
        result.wrapSide = anchorInfo.wrapSide;
        result.horizontalPositionType = anchorInfo.horizontalPositionType;
        result.horizontalPositionAlignment = anchorInfo.horizontalPositionAlignment;
        result.verticalPositionType = anchorInfo.verticalPositionType;
        result.verticalPositionAlignment = anchorInfo.verticalPositionAlignment;
        result.offset = anchorInfo.offset;
        result.percentOffset = anchorInfo.percentOffset;
        return result;
    };
    DrawingObjectBase.prototype._setAnchorInfo = function (info) {
        var coreInfo = this._checkParameters(info);
        var currentInfo = this._run.anchorInfo;
        var interval = new fixed_1.FixedInterval(this._position, 1);
        var history = this._native.history;
        var modelManipulator = this._native.modelManipulator;
        var anchorInfoManipulator = this._native.modelManipulator.floatingObject.anchorInfo;
        history.beginTransaction();
        if (coreInfo.horizontalPositionAlignment !== undefined && coreInfo.horizontalPositionAlignment != currentInfo.horizontalPositionAlignment)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.horizontalPositionAlignment, anchorInfoManipulator.horizontalPositionAlignment));
        if (coreInfo.horizontalPositionType !== undefined && coreInfo.horizontalPositionType != currentInfo.horizontalPositionType)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.horizontalPositionType, anchorInfoManipulator.horizontalPositionType));
        if (coreInfo.offset.x !== undefined && coreInfo.offset.x != currentInfo.offset.x)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.offset.x, anchorInfoManipulator.offsetX));
        if (coreInfo.percentOffset.x !== undefined && coreInfo.percentOffset.x != currentInfo.percentOffset.x)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.percentOffset.x, anchorInfoManipulator.percentOffsetX));
        if (coreInfo.verticalPositionAlignment !== undefined && coreInfo.verticalPositionAlignment != currentInfo.verticalPositionAlignment)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.verticalPositionAlignment, anchorInfoManipulator.verticalPositionAlignment));
        if (coreInfo.verticalPositionType !== undefined && coreInfo.verticalPositionType != currentInfo.verticalPositionType)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.verticalPositionType, anchorInfoManipulator.verticalPositionType));
        if (coreInfo.offset.y !== undefined && coreInfo.offset.y != currentInfo.offset.y)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.offset.y, anchorInfoManipulator.offsetY));
        if (coreInfo.percentOffset.y !== undefined && coreInfo.percentOffset.y != currentInfo.percentOffset.y)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.percentOffset.y, anchorInfoManipulator.percentOffsetY));
        if (coreInfo.wrapType !== undefined && coreInfo.wrapType !== null && coreInfo.wrapType != currentInfo.wrapType)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.wrapType, anchorInfoManipulator.wrapType));
        if (coreInfo.wrapSide !== undefined && coreInfo.wrapSide != currentInfo.wrapSide)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.wrapSide, anchorInfoManipulator.wrapSide));
        if (coreInfo.topDistance !== undefined && coreInfo.topDistance != currentInfo.topDistance)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.topDistance, anchorInfoManipulator.topDistance));
        if (coreInfo.bottomDistance !== undefined && coreInfo.bottomDistance != currentInfo.bottomDistance)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.bottomDistance, anchorInfoManipulator.bottomDistance));
        if (coreInfo.leftDistance !== undefined && coreInfo.leftDistance != currentInfo.leftDistance)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.leftDistance, anchorInfoManipulator.leftDistance));
        if (coreInfo.rightDistance !== undefined && coreInfo.rightDistance != currentInfo.rightDistance)
            history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), coreInfo.rightDistance, anchorInfoManipulator.rightDistance));
        history.endTransaction();
    };
    DrawingObjectBase.prototype._checkParameters = function (info) {
        api_utils_1.ApiUtils.assertObject(info, 'info');
        var result = this._run.anchorInfo;
        result.leftDistance = parameter_checker_1.ApiParametersChecker.check(info.leftDistance, 1, true, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('info.leftDistance', function (val) { return val; })
        ]);
        result.rightDistance = parameter_checker_1.ApiParametersChecker.check(info.rightDistance, 1, true, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('info.rightDistance', function (val) { return val; })
        ]);
        result.topDistance = parameter_checker_1.ApiParametersChecker.check(info.topDistance, 1, true, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('info.topDistance', function (val) { return val; })
        ]);
        result.bottomDistance = parameter_checker_1.ApiParametersChecker.check(info.bottomDistance, 1, true, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('info.bottomDistance', function (val) { return val; })
        ]);
        result.wrapType = parameter_checker_1.ApiParametersChecker.check(info.wrapType, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.wrapType', function (val) { return val; }, anchor_info_2.AnchorObjectTextWrapTypeApi, 'AnchorObjectTextWrapType')
        ]);
        result.wrapSide = parameter_checker_1.ApiParametersChecker.check(info.wrapType, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.wrapSide', function (val) { return val; }, anchor_info_2.AnchorObjectTextWrapSideApi, 'AnchorObjectTextWrapSide')
        ]);
        result.horizontalPositionAlignment = parameter_checker_1.ApiParametersChecker.check(info.horizontalPositionAlignment, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.horizontalPositionAlignment', function (val) { return val; }, anchor_info_2.AnchorObjectHorizontalPositionAlignmentApi, 'AnchorObjectHorizontalPositionAlignment')
        ]);
        result.horizontalPositionType = parameter_checker_1.ApiParametersChecker.check(info.horizontalPositionType, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.horizontalPositionType', function (val) { return val; }, anchor_info_2.AnchorObjectHorizontalPositionTypeApi, 'AnchorObjectHorizontalPositionType')
        ]);
        result.verticalPositionType = parameter_checker_1.ApiParametersChecker.check(info.verticalPositionType, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.verticalPositionType', function (val) { return val; }, anchor_info_2.AnchorObjectVerticalPositionTypeApi, 'AnchorObjectVerticalPositionType')
        ]);
        result.verticalPositionAlignment = parameter_checker_1.ApiParametersChecker.check(info.verticalPositionAlignment, 1, true, [
            parameter_checker_1.ApiParametersChecker.enumDescriptor('info.verticalPositionAlignment', function (val) { return val; }, anchor_info_2.AnchorObjectVerticalPositionAlignmentApi, 'AnchorObjectVerticalPositionAlignment')
        ]);
        result.offset = parameter_checker_1.ApiParametersChecker.check(info.offset, 1, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('info.offset', 'Offset', function (val) { return val; })
        ]);
        result.percentOffset = parameter_checker_1.ApiParametersChecker.check(info.percentOffset, 1, true, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('info.percentOffset', 'Offset', function (val) { return val; })
        ]);
        return result;
    };
    return DrawingObjectBase;
}());
exports.DrawingObjectBase = DrawingObjectBase;
var PictureApi = (function (_super) {
    tslib_1.__extends(PictureApi, _super);
    function PictureApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(PictureApi.prototype, "size", {
        get: function () {
            var size = this._run.size;
            var actualSize = new size_2.SizeApi((size.originalSize.width * size.scale.width) / 100, (size.originalSize.height * size.scale.height) / 100);
            var originalSize = new size_2.SizeApi(size.originalSize.width, size.originalSize.height);
            var result = new PictureSizeApi(originalSize, actualSize, size.lockAspectRatio);
            return result;
        },
        set: function (size) {
            size = parameter_checker_1.ApiParametersChecker.check(size, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'PictureSizeApi', function (v) { return v; })
            ]);
            var history = this._native.history;
            var interval = new fixed_1.FixedInterval(this._position, 1);
            this._native.history.beginTransaction();
            if (this._run.getType() === run_type_1.RunType.InlinePictureRun) {
                history.addAndRedo(new change_rectangular_object_history_item_1.ChangeRectangularObjectScaleHistoryItem(this._native.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), this._getScale(size)));
                history.addAndRedo(new change_rectangular_object_history_item_1.ChangeRectangularObjectLockAspectRatioHistoryItem(this._native.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), size.lockAspectRatio));
            }
            else
                history.addAndRedo(new change_anchored_picture_size_history_item_1.ChangeAnchoredPictureSizeHistoryItem(this._native.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), new sizes_1.PictureSize(size.lockAspectRatio, this._run.size.rotation, this._run.cacheInfo, this._getScale(size))));
            this._native.history.endTransaction();
        },
        enumerable: true,
        configurable: true
    });
    PictureApi.prototype._getAnchorInfo = function () {
        if (this._run.getType() === run_type_1.RunType.InlinePictureRun)
            return null;
        return _super.prototype._getAnchorInfo.call(this);
    };
    PictureApi.prototype.setAnchorInfo = function (info) {
        this._native.history.beginTransaction();
        if (this._run.getType() === run_type_1.RunType.InlinePictureRun) {
            var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, this._position));
            this._native.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this._subDocument, new fixed_1.FixedInterval(this._position, 1)), true, false);
            var anchorInfo = new anchor_info_1.AnchorInfo();
            anchorInfo.zOrder = this._native.modelManipulator.floatingObject.zOrder.getNewZOrder(this._subDocument);
            this._native.modelManipulator.picture.insertAnchoredPictureViaHistory(new sub_document_1.SubDocumentPosition(this._subDocument, this._position), inputPos.charPropsBundle, new insert_picture_manipulator_params_1.AnchorPictureInfo(this._run.size, new shape_1.Shape(), new anchor_info_1.AnchorInfo(), this._run.info.containerProperties.clone(), this._run.info.nonVisualDrawingProperties.clone()), new image_loading_options_1.ImageLoadingOptions(false));
            this._run = this._subDocument.getRunByPosition(this._position);
        }
        _super.prototype._setAnchorInfo.call(this, info);
        this._native.history.endTransaction();
    };
    PictureApi.prototype._getScale = function (size) {
        var scaleX = (size.actualSize.width / size.originalSize.width) * 100;
        var scaleY = (size.actualSize.height / size.originalSize.height) * 100;
        var scale = new size_1.Size(scaleX, scaleY);
        return scale;
    };
    return PictureApi;
}(DrawingObjectBase));
exports.PictureApi = PictureApi;
var PictureSizeApi = (function () {
    function PictureSizeApi(originalSize, actualSize, lockAspectRatio) {
        this.originalSize = originalSize;
        this.actualSize = actualSize;
        this.lockAspectRatio = lockAspectRatio;
    }
    return PictureSizeApi;
}());
exports.PictureSizeApi = PictureSizeApi;
