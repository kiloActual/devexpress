"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var character_properties_1 = require("../core/model/character/character-properties");
var enums_1 = require("../core/model/character/enums");
var color_model_info_1 = require("../core/model/color/color-model-info");
var shading_info_1 = require("../core/model/shadings/shading-info");
var api_utils_1 = require("./api-utils/api-utils");
var model_parameter_checker_1 = require("./api-utils/model-parameter-checker");
var CharacterPropertiesScriptApi;
(function (CharacterPropertiesScriptApi) {
    CharacterPropertiesScriptApi[CharacterPropertiesScriptApi["Normal"] = 0] = "Normal";
    CharacterPropertiesScriptApi[CharacterPropertiesScriptApi["Subscript"] = 1] = "Subscript";
    CharacterPropertiesScriptApi[CharacterPropertiesScriptApi["Superscript"] = 2] = "Superscript";
})(CharacterPropertiesScriptApi = exports.CharacterPropertiesScriptApi || (exports.CharacterPropertiesScriptApi = {}));
var CharacterPropertiesApi = (function () {
    function CharacterPropertiesApi() {
    }
    return CharacterPropertiesApi;
}());
exports.CharacterPropertiesApi = CharacterPropertiesApi;
function convertToCharacterPropertiesApi(properties, colorProvider) {
    var value = new CharacterPropertiesApi();
    value.allCaps = properties.allCaps;
    value.foreColor = properties.textColor === undefined ? undefined : api_utils_1.ApiUtils.internalColorToApiColor(properties.textColor.toRgb(colorProvider));
    value.fontName = properties.fontInfo ? properties.fontInfo.name : undefined;
    value.size = properties.fontSize;
    value.strikeout = properties.fontStrikeoutType === undefined ?
        undefined :
        properties.fontStrikeoutType !== enums_1.StrikeoutType.None;
    value.bold = properties.fontBold;
    value.italic = properties.fontItalic;
    value.underline = properties.fontUnderlineType === undefined ?
        undefined :
        properties.fontUnderlineType !== enums_1.UnderlineType.None;
    value.underlineColor = properties.underlineColor === undefined ? undefined : api_utils_1.ApiUtils.internalColorToApiColor(properties.underlineColor.toRgb(colorProvider));
    value.hidden = properties.hidden;
    value.script = properties.script;
    value.underlineWordsOnly = properties.underlineWordsOnly;
    value.backColor = properties.shadingInfo === undefined ? undefined : api_utils_1.ApiUtils.internalColorToApiColor(properties.shadingInfo.getActualColor(colorProvider));
    value.highlightColor = properties.highlightColor !== undefined ? api_utils_1.ApiUtils.internalColorToApiColor(properties.highlightColor.toRgb(colorProvider)) : undefined;
    return value;
}
exports.convertToCharacterPropertiesApi = convertToCharacterPropertiesApi;
function convertFromCharacterPropertiesApi(properties, fontInfoCache, parameterIndex, setRestAsUndefined, propsCoreTemplate) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    properties = parameter_checker_1.ApiParametersChecker.check(properties, parameterIndex, false, [
        parameter_checker_1.ApiParametersChecker.objectDescriptor('properties', 'CharacterProperties', function (val) { return val; })
    ]);
    if (!propsCoreTemplate)
        propsCoreTemplate = new character_properties_1.CharacterProperties();
    propsCoreTemplate.allCaps = (_a = parameter_checker_1.ApiParametersChecker.check(properties.allCaps, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.allCaps', function (val) { return val; })
    ])) !== null && _a !== void 0 ? _a : propsCoreTemplate.allCaps;
    propsCoreTemplate.fontBold = (_b = parameter_checker_1.ApiParametersChecker.check(properties.bold, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.bold', function (val) { return val; })
    ])) !== null && _b !== void 0 ? _b : propsCoreTemplate.fontBold;
    var textColor = parameter_checker_1.ApiParametersChecker.check(properties.foreColor, parameterIndex, true, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('properties.foreColor'));
    propsCoreTemplate.textColor = textColor === undefined ? propsCoreTemplate.textColor : color_model_info_1.ColorModelInfo.makeByColor(textColor);
    propsCoreTemplate.fontItalic = (_c = parameter_checker_1.ApiParametersChecker.check(properties.italic, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.italic', function (val) { return val; })
    ])) !== null && _c !== void 0 ? _c : propsCoreTemplate.fontItalic;
    propsCoreTemplate.fontInfo = (_d = parameter_checker_1.ApiParametersChecker.check(properties.fontName, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.stringDescriptor('properties.fontName', function (val) {
            var fontInfo = fontInfoCache.getItemByName(val);
            if (!fontInfo)
                throw Error('Unknown font name');
            return fontInfo;
        }, false)
    ])) !== null && _d !== void 0 ? _d : propsCoreTemplate.fontInfo;
    propsCoreTemplate.fontSize = (_e = parameter_checker_1.ApiParametersChecker.check(properties.size, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.size', function (val) { return val; }, 0, 601)
    ])) !== null && _e !== void 0 ? _e : propsCoreTemplate.fontSize;
    propsCoreTemplate.hidden = (_f = parameter_checker_1.ApiParametersChecker.check(properties.hidden, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.hidden', function (val) { return val; })
    ])) !== null && _f !== void 0 ? _f : propsCoreTemplate.hidden;
    var shadigInfoColor = parameter_checker_1.ApiParametersChecker.check(properties.backColor, parameterIndex, true, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('properties.backColor'));
    propsCoreTemplate.shadingInfo = shadigInfoColor === undefined ? propsCoreTemplate.shadingInfo :
        shading_info_1.ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(shadigInfoColor));
    propsCoreTemplate.script = (_g = parameter_checker_1.ApiParametersChecker.check(properties.script, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.enumDescriptor('properties.script', function (val) { return val; }, CharacterPropertiesScriptApi, 'CharacterPropertiesScript')
    ])) !== null && _g !== void 0 ? _g : propsCoreTemplate.script;
    var underlineColor = parameter_checker_1.ApiParametersChecker.check(properties.underlineColor, parameterIndex, true, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('properties.underlineColor'));
    propsCoreTemplate.underlineColor = underlineColor === undefined ? propsCoreTemplate.underlineColor : color_model_info_1.ColorModelInfo.makeByColor(underlineColor);
    propsCoreTemplate.underlineWordsOnly = (_h = parameter_checker_1.ApiParametersChecker.check(properties.underlineWordsOnly, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.underlineWordsOnly', function (val) { return val; })
    ])) !== null && _h !== void 0 ? _h : propsCoreTemplate.underlineWordsOnly;
    var strikeout = parameter_checker_1.ApiParametersChecker.check(properties.strikeout, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.strikeout', function (val) { return val; })
    ]);
    propsCoreTemplate.fontStrikeoutType = strikeout === true ? enums_1.StrikeoutType.Single : (strikeout === false ? enums_1.StrikeoutType.None : propsCoreTemplate.fontStrikeoutType);
    var underline = parameter_checker_1.ApiParametersChecker.check(properties.underline, parameterIndex, true, [
        parameter_checker_1.ApiParametersChecker.booleanDescriptor('properties.underline', function (val) { return val; })
    ]);
    propsCoreTemplate.fontUnderlineType = underline === true ? enums_1.UnderlineType.Single : (underline === false ? enums_1.UnderlineType.None : propsCoreTemplate.fontUnderlineType);
    var highlightColor = parameter_checker_1.ApiParametersChecker.check(properties.highlightColor, parameterIndex, true, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('properties.highlightColor'));
    propsCoreTemplate.highlightColor = highlightColor === undefined ? propsCoreTemplate.highlightColor : color_model_info_1.ColorModelInfo.makeByColor(highlightColor);
    if (setRestAsUndefined) {
        propsCoreTemplate.langInfo = undefined;
        propsCoreTemplate.strikeoutColor = undefined;
        propsCoreTemplate.noProof = undefined;
        propsCoreTemplate.compositeFontInfo = undefined;
    }
    return propsCoreTemplate;
}
exports.convertFromCharacterPropertiesApi = convertFromCharacterPropertiesApi;
