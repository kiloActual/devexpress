"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var color_1 = require("../../core/model/color/color");
var constants_1 = require("@devexpress/utils/lib/constants");
var color_2 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var ModelParametersChecker = (function () {
    function ModelParametersChecker() {
    }
    ModelParametersChecker.isInterval = function (value) {
        return typeof value === 'object' && typeof value.start === 'number' && typeof value.length === 'number';
    };
    ModelParametersChecker.intervalDescriptor = function (parameterName, getResult, minBound, maxBound) {
        if (minBound === void 0) { minBound = constants_1.Constants.MIN_SAFE_INTEGER; }
        if (maxBound === void 0) { maxBound = constants_1.Constants.MAX_SAFE_INTEGER; }
        return new parameter_checker_1.ApiParameterDescriptor(parameterName, "ASPx.Interval on interval [" + minBound + ", " + maxBound + ")", function (value) { return ModelParametersChecker.isInterval(value) && value.start >= minBound && value.start + value.length <= maxBound; }, getResult);
    };
    ModelParametersChecker.intervalsDescriptor = function (parameterName, getResult, minBound, maxBound) {
        if (minBound === void 0) { minBound = constants_1.Constants.MIN_SAFE_INTEGER; }
        if (maxBound === void 0) { maxBound = constants_1.Constants.MAX_SAFE_INTEGER; }
        return new parameter_checker_1.ApiParameterDescriptor(parameterName, "ASPx.Interval[] on interval [" + minBound + ", " + maxBound + ")", function (intervals) { return Array.isArray(intervals) && list_1.ListUtils.allOf(intervals, function (interval) {
            return ModelParametersChecker.isInterval(interval) && interval.start >= minBound && interval.start + interval.length <= maxBound;
        }); }, getResult);
    };
    ModelParametersChecker.colorDescriptors = function (parameterName) {
        return [
            new parameter_checker_1.ApiParameterDescriptor(parameterName, "\"Auto\"", function (value) { return typeof value === 'string' && value.toLowerCase() == 'auto'; }, function (_value) { return color_1.ColorHelper.AUTOMATIC_COLOR; }),
            new parameter_checker_1.ApiParameterDescriptor(parameterName, "\"NoColor\"", function (value) { return typeof value === 'string' && value.toLowerCase() == 'nocolor'; }, function (_value) { return color_1.ColorHelper.NO_COLOR; }),
            new parameter_checker_1.ApiParameterDescriptor(parameterName, 'KnownColorName(darkblue, darkcyan, etc)', function (value) { return typeof value === 'string' && color_2.ColorUtils.isKnownColorName(value); }, function (value) { return color_2.ColorUtils.fromString(color_2.ColorUtils.colorNames[value.toLowerCase()]); }),
            new parameter_checker_1.ApiParameterDescriptor(parameterName, '#354843|rgb(255,0,0)', function (value) {
                if (typeof value !== 'string')
                    return false;
                var val = color_2.ColorUtils.fromString(value.toLowerCase());
                return val !== null && val != undefined;
            }, function (value) { return color_2.ColorUtils.fromString(value.toLowerCase()); })
        ];
    };
    ModelParametersChecker.subDocumentById = function (subDocumentId, parameterIndex, canBeUndefined, model, defaultSubDocument, isShowErrorIfIdNotFound) {
        var pairs = [parameter_checker_1.ApiParametersChecker.numberDescriptor('subDocumentId', function (id) { return model.subDocuments[id]; })];
        var subDocument = parameter_checker_1.ApiParametersChecker.check(subDocumentId, parameterIndex, canBeUndefined, pairs);
        if (subDocument)
            return subDocument;
        if (subDocumentId === undefined)
            return defaultSubDocument;
        if (isShowErrorIfIdNotFound)
            parameter_checker_1.ApiParametersChecker.showErrorString(parameterIndex, canBeUndefined, pairs);
        return null;
    };
    return ModelParametersChecker;
}());
exports.ModelParametersChecker = ModelParametersChecker;
