"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../../core/model/color/color");
var model_iterator_1 = require("../../core/model/model-iterator");
var constants_1 = require("@devexpress/utils/lib/constants");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var color_2 = require("@devexpress/utils/lib/utils/color");
var common_1 = require("@devexpress/utils/lib/utils/common");
var math_1 = require("@devexpress/utils/lib/utils/math");
var search_1 = require("@devexpress/utils/lib/utils/search");
var ApiUtils = (function () {
    function ApiUtils() {
    }
    ApiUtils.getObject = function (objs, getStartPos, toFind, templateObj) {
        var startIndex = search_1.SearchUtils.normedInterpolationIndexOf(objs, getStartPos, toFind);
        for (var i = startIndex, obj = void 0; (obj = objs[i]) && (getStartPos(obj) == toFind); i--)
            if (obj.equals(templateObj))
                return i;
        for (var i = startIndex + 1, obj = void 0; (obj = objs[i]) && (getStartPos(obj) == toFind); i++)
            if (obj.equals(templateObj))
                return i;
        return -1;
    };
    ApiUtils.getAllRunsByFullSearch = function (sd, callback) {
        var it = new model_iterator_1.ModelIterator(sd, false);
        it.setPosition(0);
        do {
            if (callback(it))
                return it;
        } while (it.moveToNextRun());
        return null;
    };
    ApiUtils.internalColorToApiColor = function (color) {
        if (color === undefined)
            return undefined;
        if (color === color_1.ColorHelper.AUTOMATIC_COLOR)
            return 'Auto';
        if (color === color_1.ColorHelper.NO_COLOR)
            return 'NoColor';
        return color_2.ColorUtils.colorToHash(color).toUpperCase();
    };
    ApiUtils.assertObject = function (value, parameter) {
        if (typeof value !== 'object')
            throw new Error(parameter + ' must be object');
    };
    ApiUtils.assertBoolean = function (value, parameter) {
        if (typeof value !== 'boolean')
            throw new Error(parameter + ' must be boolean or undefined');
    };
    ApiUtils.assertArray = function (value, parameter) {
        if (!(value instanceof Array))
            throw new Error(parameter + ' must be array or undefined');
    };
    ApiUtils.assertNumber = function (value, parameter) {
        if (!common_1.isNumber(value))
            throw new Error(parameter + ' must be number or undefined');
    };
    ApiUtils.assertNonNegativeNumber = function (value, parameter) {
        ApiUtils.assertNumber(value, parameter);
        if (value < 0)
            throw new Error(parameter + ' must be non-negative');
    };
    ApiUtils.assertNumberByBounds = function (value, minValue, maxValue, parameter) {
        ApiUtils.assertNumber(value, parameter);
        if (value < minValue || value > maxValue)
            throw new Error(parameter + " must be between " + minValue + " and " + maxValue);
    };
    ApiUtils.assertPositiveNumber = function (value, parameter) {
        ApiUtils.assertNumber(value, parameter);
        if (value <= 0)
            throw new Error(parameter + ' must be positive');
    };
    ApiUtils.assertFunction = function (value, parameter) {
        if (typeof value !== 'function')
            throw new Error(parameter + ' must be function');
    };
    ApiUtils.assertString = function (value, notEmpty, parameter) {
        if (typeof value !== 'string')
            throw new Error(parameter + ' must be string or undefined');
        if (notEmpty && !value)
            throw new Error(parameter + ' must be non-empty or undefined');
    };
    ApiUtils.assertAndConvertColor = function (value, allowNull, parameter) {
        var typeMessage = parameter + " must be string" + (allowNull ? ' or null' : '');
        if (value === undefined)
            throw new Error(typeMessage);
        if (value === null || value === '') {
            if (allowNull)
                return null;
            throw new Error(typeMessage);
        }
        if (typeof value !== 'string')
            throw new Error(typeMessage);
        if (color_2.ColorUtils.colorNames[value])
            value = color_2.ColorUtils.colorNames[value];
        else if (value.length !== 4 && value.length !== 7 && value.charAt(0) != '#')
            throw new Error(parameter + ' must be hash code or a known color');
        if (value.toLocaleLowerCase() === 'auto')
            return null;
        var color = color_2.ColorUtils.fromString(value);
        if (color === null)
            throw new Error(parameter + " is unknown color (" + value + ")");
        return color;
    };
    ApiUtils.assertFile = function (value, parameter) {
        if (typeof value === 'string') {
            if (value.length > 0)
                return;
        }
        throw new Error(parameter + ' must be non-empty string or File');
    };
    ApiUtils.assertEnum = function (value, enumType, enumTypeName, parameter) {
        if (enumType[value] === undefined)
            throw new Error(parameter + ' must be ' + enumTypeName);
    };
    ApiUtils.isNullOrEmptyString = function (value) {
        return value === null || value === '';
    };
    return ApiUtils;
}());
exports.ApiUtils = ApiUtils;
function getRestrictedInterval(interval, minBound, maxBound) {
    if (minBound === void 0) { minBound = constants_1.Constants.MIN_SAFE_INTEGER; }
    if (maxBound === void 0) { maxBound = constants_1.Constants.MAX_SAFE_INTEGER; }
    var end = math_1.MathUtils.restrictValue(interval.start + interval.length, minBound, maxBound);
    var start = math_1.MathUtils.restrictValue(interval.start, minBound, maxBound);
    return fixed_1.FixedInterval.fromPositions(start, Math.max(start, end));
}
exports.getRestrictedInterval = getRestrictedInterval;
