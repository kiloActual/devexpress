"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var bookmarks_1 = require("../../core/model/bookmarks");
var bookmark_history_items_1 = require("../../core/model/history/items/bookmark-history-items");
var bookmarks_manipulator_1 = require("../../core/model/manipulators/bookmarks-manipulator");
var constants_1 = require("@devexpress/utils/lib/constants");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var bookmark_finder_1 = require("../api-utils/bookmark-finder");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var bookmark_1 = require("../bookmark");
var collection_1 = require("./collection");
var BookmarkCollection = (function (_super) {
    tslib_1.__extends(BookmarkCollection, _super);
    function BookmarkCollection(processor, subDocument) {
        var _this = _super.call(this, processor) || this;
        _this._subDocument = subDocument;
        return _this;
    }
    BookmarkCollection.prototype.find = function (position) {
        var _this = this;
        var sd = this._subDocument;
        return list_1.ListUtils.map(parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (pos) { return sd.findBookmarkByInterval([new fixed_1.FixedInterval(pos, 0)]); }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return sd.findBookmarkByInterval([new fixed_1.FixedInterval(interval.start, interval.length)]); }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            model_parameter_checker_1.ModelParametersChecker.intervalsDescriptor("intervals", function (apiIntervals) {
                return sd.findBookmarkByInterval(list_1.ListUtils.map(apiIntervals, function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); }));
            }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            parameter_checker_1.ApiParametersChecker.stringDescriptor("name", function (name) {
                return bookmark_finder_1.findBookmarkByName(_this._subDocument.documentModel, function (bkm) { return bkm.name == name; });
            }, false),
            parameter_checker_1.ApiParametersChecker.regExpDescriptor('regexp', function (regexp) {
                return bookmark_finder_1.findBookmarkByName(_this._subDocument.documentModel, function (bkm) { return regexp.test(bkm.name); });
            })
        ]), function (b) { return _this._getItem(b); });
    };
    BookmarkCollection.prototype.create = function (interval, name) {
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); }),
        ]);
        name = parameter_checker_1.ApiParametersChecker.check(name, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor("name", function (v) { return v; }, false)
        ]);
        if (!bookmarks_1.Bookmark.isValidName(name, true))
            return;
        var modelManager = this._processor.modelManager;
        modelManager.history.beginTransaction();
        var bkmInfo = bookmarks_manipulator_1.BookmarksManipulator.findBookmark(modelManager.model.subDocuments, name);
        if (bkmInfo)
            modelManager.history.addAndRedo(new bookmark_history_items_1.DeleteBookmarkHistoryItem(modelManager.modelManipulator, bkmInfo.subDocument, bkmInfo.bookmark.constBookmark));
        modelManager.history.addAndRedo(new bookmark_history_items_1.CreateBookmarkHistoryItem(modelManager.modelManipulator, this._subDocument, new bookmarks_1.ConstBookmark(coreInterval, name)));
        modelManager.history.endTransaction();
        bkmInfo = bookmarks_manipulator_1.BookmarksManipulator.findBookmark(modelManager.model.subDocuments, name);
        return this._getItem(bkmInfo.bookmark);
    };
    BookmarkCollection.prototype._getItem = function (coreItem) {
        return new bookmark_1.BookmarkApi(this._processor, this._subDocument, coreItem);
    };
    BookmarkCollection.prototype._getCoreItems = function () {
        return this._subDocument.bookmarks;
    };
    return BookmarkCollection;
}(collection_1.Collection));
exports.BookmarkCollection = BookmarkCollection;
