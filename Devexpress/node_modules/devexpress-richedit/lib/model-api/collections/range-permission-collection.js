"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var range_permission_history_item_1 = require("../../core/model/history/items/range-permission-history-item");
var range_permissions_1 = require("../../core/model/range-permissions");
var constants_1 = require("@devexpress/utils/lib/constants");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var range_permission_finder_1 = require("../api-utils/range-permission-finder");
var range_permission_1 = require("../range-permission");
var collection_1 = require("./collection");
var RangePermissionCollection = (function (_super) {
    tslib_1.__extends(RangePermissionCollection, _super);
    function RangePermissionCollection(processor, subDocument) {
        var _this = _super.call(this, processor) || this;
        _this._subDocument = subDocument;
        return _this;
    }
    RangePermissionCollection.prototype.protectRange = function (intervals, userName, group) {
        var _this = this;
        if (userName === void 0) { userName = ''; }
        if (group === void 0) { group = range_permissions_1.RangePermission.EVERYONE_GROUP_NAME; }
        var modelManager = this._processor.modelManager;
        modelManager.history.beginTransaction();
        var modelIntervals = list_1.ListUtils.map(intervals, function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); });
        var mergedIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(modelIntervals, true);
        var startPosition = 0;
        var endPosition = 0;
        var result = [];
        list_1.ListUtils.forEach(mergedIntervals, function (interval) {
            endPosition = interval.start + 1;
            var length = endPosition - startPosition;
            if (length)
                result.push(_this.create({ start: startPosition, length: length }, userName, group));
            startPosition = interval.end;
        });
        endPosition = this._subDocument.interval.end;
        var length = endPosition - startPosition;
        if (length)
            result.push(this.create({ start: startPosition, length: length }, userName, group));
        modelManager.history.endTransaction();
        return result;
    };
    RangePermissionCollection.prototype.find = function (options) {
        var _this = this;
        var sd = this._subDocument;
        parameter_checker_1.ApiParametersChecker.objectDescriptor('options', 'DevExpress.RichEdit.IRangePermissionSearchOptions', function (opt) { return opt; });
        var permissions = common_1.isDefined(options.position) ?
            findByPosition(options.position, true, sd.rangePermissions) : sd.rangePermissions;
        var permissionCurentUser = common_1.isDefined(options.userName) ?
            findByUserName(options.userName, permissions) : permissions;
        var result = common_1.isDefined(options.group) ?
            findByGroup(options.group, permissions) : permissionCurentUser;
        return list_1.ListUtils.map(result, function (permission) { return _this._getItem(permission); });
    };
    RangePermissionCollection.prototype.isAllowEdit = function (position) {
        var coreIntervals = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (pos) { return [new fixed_1.FixedInterval(pos, 0)]; }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return [new fixed_1.FixedInterval(interval.start, interval.length)]; }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
            model_parameter_checker_1.ModelParametersChecker.intervalsDescriptor("intervals", function (apiIntervals) {
                return list_1.ListUtils.map(apiIntervals, function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); });
            }, 0, constants_1.Constants.MAX_SAFE_INTEGER)
        ]);
        return this._subDocument.isEditable(coreIntervals);
    };
    RangePermissionCollection.prototype.create = function (interval, userName, group) {
        if (userName === void 0) { userName = ''; }
        if (group === void 0) { group = range_permissions_1.RangePermission.EVERYONE_GROUP_NAME; }
        var coreInterval = parameter_checker_1.ApiParametersChecker.check(interval, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); }),
        ]);
        var modelManager = this._processor.modelManager;
        modelManager.history.addAndRedo(new range_permission_history_item_1.CreateRangePermissionHistoryItem(modelManager.modelManipulator, this._subDocument, new range_permissions_1.ConstRangePermission(coreInterval, userName, group)));
        var rangePermission = range_permission_finder_1.findRangePermission(this._subDocument.rangePermissions, coreInterval, userName, group);
        return this._getItem(rangePermission);
    };
    RangePermissionCollection.prototype._getItem = function (coreItem) {
        return new range_permission_1.RangePermissionApi(this._processor, this._subDocument, coreItem);
    };
    RangePermissionCollection.prototype._getCoreItems = function () {
        return this._subDocument.rangePermissions;
    };
    return RangePermissionCollection;
}(collection_1.Collection));
exports.RangePermissionCollection = RangePermissionCollection;
function findByPosition(position, canBeUndefined, sourceCollection) {
    return list_1.ListUtils.map(parameter_checker_1.ApiParametersChecker.check(position, 1, canBeUndefined, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (pos) { return range_permission_finder_1.findRangePermissionsByIntervals(sourceCollection, [new fixed_1.FixedInterval(pos, 0)]); }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
        model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return range_permission_finder_1.findRangePermissionsByIntervals(sourceCollection, [new fixed_1.FixedInterval(interval.start, interval.length)]); }, 0, constants_1.Constants.MAX_SAFE_INTEGER),
        model_parameter_checker_1.ModelParametersChecker.intervalsDescriptor("intervals", function (apiIntervals) {
            return range_permission_finder_1.findRangePermissionsByIntervals(sourceCollection, list_1.ListUtils.map(apiIntervals, function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); }));
        }, 0, constants_1.Constants.MAX_SAFE_INTEGER)
    ]), function (b) { return b; });
}
function findByUserName(value, permissions) {
    return list_1.ListUtils.map(parameter_checker_1.ApiParametersChecker.check(value, 1, true, [
        parameter_checker_1.ApiParametersChecker.stringDescriptor("userName", function (userName) {
            return range_permission_finder_1.findRangePermissions(permissions, function (permission) { return permission.userName == userName; });
        }, false),
        parameter_checker_1.ApiParametersChecker.regExpDescriptor('regexp', function (regexp) {
            return range_permission_finder_1.findRangePermissions(permissions, function (permission) { return regexp.test(permission.userName); });
        })
    ]), function (b) { return b; });
}
function findByGroup(value, permissions) {
    return list_1.ListUtils.map(parameter_checker_1.ApiParametersChecker.check(value, 1, true, [
        parameter_checker_1.ApiParametersChecker.stringDescriptor("group", function (group) {
            return range_permission_finder_1.findRangePermissions(permissions, function (permission) { return permission.group == group; });
        }, false),
        parameter_checker_1.ApiParametersChecker.regExpDescriptor('regexp', function (regexp) {
            return range_permission_finder_1.findRangePermissions(permissions, function (permission) { return regexp.test(permission.group); });
        })
    ]), function (b) { return b; });
}
