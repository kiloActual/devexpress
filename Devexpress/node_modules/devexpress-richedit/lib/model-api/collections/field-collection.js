"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var field_1 = require("../../core/model/fields/field");
var tree_creator_1 = require("../../core/model/fields/tree-creator");
var field_insert_history_item_1 = require("../../core/model/history/items/field-insert-history-item");
var insert_text_history_item_1 = require("../../core/model/history/items/insert-text-history-item");
var fields_manipulator_1 = require("../../core/model/manipulators/fields-manipulator");
var insert_text_manipulator_params_1 = require("../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../../core/model/runs/run-type");
var sub_document_1 = require("../../core/model/sub-document");
var input_position_base_1 = require("../../core/selection/input-position-base");
var selection_intervals_info_1 = require("../../core/selection/selection-intervals-info");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var math_1 = require("@devexpress/utils/lib/utils/math");
var api_utils_1 = require("../api-utils/api-utils");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var field_2 = require("../field");
var collection_1 = require("./collection");
var FieldCollection = (function (_super) {
    tslib_1.__extends(FieldCollection, _super);
    function FieldCollection(processor, subDocument) {
        var _this = _super.call(this, processor) || this;
        _this._subDocument = subDocument;
        return _this;
    }
    FieldCollection.prototype.create = function (position, code) {
        var _this = this;
        var codeInterval = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("codeInterval", function (interval) { return api_utils_1.getRestrictedInterval(interval, 0, _this._subDocument.getDocumentEndPosition()); }),
            parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (n) { return new fixed_1.FixedInterval(math_1.MathUtils.restrictValue(n, 0, _this._subDocument.getDocumentEndPosition() - 1), 0); }),
        ]);
        if (common_1.isNumber(position))
            code = parameter_checker_1.ApiParametersChecker.check(code, 2, true, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("code", function (s) { return s; }, true)
            ]);
        else
            code = undefined;
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(new selection_intervals_info_1.SelectionIntervalsInfo(this._subDocument, [new fixed_1.FixedInterval(codeInterval.start, 0)]));
        this._processor.beginUpdate();
        this._processor.modelManager.history.beginTransaction();
        this._processor.modelManager.history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(this._processor.modelManager.modelManipulator, this._subDocument, codeInterval.start, codeInterval.length, 0, true, inputPos.charPropsBundle));
        if (code) {
            this._processor.modelManager.history.addAndRedo(new insert_text_history_item_1.InsertTextHistoryItem(this._processor.modelManager.modelManipulator, new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this._subDocument, codeInterval.start + 1), inputPos.charPropsBundle, run_type_1.RunType.TextRun, code)));
        }
        this._processor.modelManager.history.endTransaction();
        this._processor.endUpdate();
        return this._getItem(this._subDocument.fields[field_1.Field.binaryIndexOf(this._subDocument.fields, codeInterval.start + 1)]);
    };
    FieldCollection.prototype.createMergeField = function (position, name) {
        return this.create(position, "MERGEFIELD \"" + name + "\"");
    };
    FieldCollection.prototype.find = function (position) {
        var _this = this;
        var interval = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor("position", function (n) { return new fixed_1.FixedInterval(n, 0); }),
            model_parameter_checker_1.ModelParametersChecker.intervalDescriptor("interval", function (interval) { return new fixed_1.FixedInterval(interval.start, interval.length); })
        ]);
        return findFields(this._subDocument.fields, interval).map(function (f) { return _this._getItem(f); });
    };
    FieldCollection.prototype.showAllFieldResults = function (doInAllSubDocuments) {
        this._showAllFieldCodesCore(doInAllSubDocuments, false);
    };
    FieldCollection.prototype.showAllFieldCodes = function (doInAllSubDocuments) {
        this._showAllFieldCodesCore(doInAllSubDocuments, true);
    };
    FieldCollection.prototype.updateAllFields = function (callback, options) {
        var _this = this;
        if (callback)
            callback = parameter_checker_1.ApiParametersChecker.check(callback, 1, true, [
                parameter_checker_1.ApiParametersChecker.functionDescriptor('callback', function (val) { return val; })
            ]);
        if (options)
            options = parameter_checker_1.ApiParametersChecker.check(options, 2, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('options', 'UpdateFieldsOptions', function (val) { return val; })
            ]);
        else
            options = new UpdateFieldsOptionsApi(true, true);
        var sdInfo = options.doInAllSubDocuments ?
            number_1.NumberMapUtils.toListBy(this._processor.modelManager.model.subDocuments, function (sd) { return new sub_document_1.SubDocumentIntervals(sd, [sd.interval]); }) :
            [new sub_document_1.SubDocumentIntervals(this._subDocument, [this._subDocument.interval])];
        this._processor.beginUpdate();
        this._processor.modelManager.history.beginTransaction();
        return this._processor.modelManager.modelManipulator.field.updateFields(this._processor.layoutFormatterManager, this._processor.createFieldRequestManager(), new fields_manipulator_1.UpdateFieldsManipulatorParams(sdInfo, function () {
            _this._processor.modelManager.history.endTransaction();
            _this._processor.endUpdate();
            if (callback)
                callback();
        }, new tree_creator_1.UpdateFieldsOptions(options.updateTocFields)));
    };
    FieldCollection.prototype._showAllFieldCodesCore = function (doInAllSubDocuments, showCode) {
        if (doInAllSubDocuments === void 0) { doInAllSubDocuments = true; }
        doInAllSubDocuments = parameter_checker_1.ApiParametersChecker.check(doInAllSubDocuments, 1, true, [
            parameter_checker_1.ApiParametersChecker.booleanDescriptor('doInAllSubDocuments', function (val) { return val; })
        ]);
        var subDocumentsList = doInAllSubDocuments ?
            number_1.NumberMapUtils.toList(this._processor.modelManager.model.subDocuments) :
            [this._subDocument];
        this._processor.beginUpdate();
        this._processor.modelManager.modelManipulator.field.setAllFieldsShowCode(showCode, subDocumentsList);
        this._processor.endUpdate();
    };
    FieldCollection.prototype._getItem = function (coreItem) {
        return new field_2.FieldApi(this._processor, this._subDocument, coreItem);
    };
    FieldCollection.prototype._getCoreItems = function () {
        return this._subDocument.fields;
    };
    return FieldCollection;
}(collection_1.Collection));
exports.FieldCollection = FieldCollection;
var UpdateFieldsOptionsApi = (function () {
    function UpdateFieldsOptionsApi(doInAllSubDocuments, updateTocFields) {
        if (doInAllSubDocuments === void 0) { doInAllSubDocuments = true; }
        if (updateTocFields === void 0) { updateTocFields = true; }
        this.doInAllSubDocuments = doInAllSubDocuments;
        this.updateTocFields = updateTocFields;
    }
    return UpdateFieldsOptionsApi;
}());
exports.UpdateFieldsOptionsApi = UpdateFieldsOptionsApi;
function findFields(fields, interval) {
    if (fields.length == 0)
        return [];
    var fieldIndex = fields[Math.max(0, field_1.Field.normedBinaryIndexOf(fields, interval.start))].getAbsolutelyTopLevelField().index;
    var resultFields = [];
    for (var field = void 0; field = fields[fieldIndex]; fieldIndex++) {
        var fieldInterval = field.getAllFieldInterval();
        var intersection = algorithms_1.IntervalAlgorithms.getIntersection(fieldInterval, interval);
        if (intersection && (!!intersection.length || fieldInterval.contains(intersection.start)))
            resultFields.push(field);
        else if (!field.parent && field.getFieldStartPosition() >= interval.end)
            break;
    }
    return resultFields;
}
exports.findFields = findFields;
