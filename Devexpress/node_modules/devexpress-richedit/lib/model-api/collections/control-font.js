"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var control_font_1 = require("../../core/model/fonts/control-font");
var font_face_descriptors_1 = require("../../core/model/fonts/font-face-descriptors");
var grabber_1 = require("../../core/model/fonts/grabber");
var loader_1 = require("../../core/model/fonts/loader");
var control_font_2 = require("../fonts/control-font");
var collection_1 = require("./collection");
var ControlFontCollection = (function (_super) {
    tslib_1.__extends(ControlFontCollection, _super);
    function ControlFontCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControlFontCollection.prototype.createAllFontsFromCurrentLayout = function () {
        new grabber_1.LayoutFontsCollector(this._processor.modelManager.model.cache, this._processor.layoutFormatterManager.layout, this._processor.modelManager.richOptions.fonts.mappings.defaultFontName)
            .collect();
    };
    ControlFontCollection.prototype.load = function (reloadFailed, callback) {
        var _this = this;
        if (reloadFailed === void 0) { reloadFailed = false; }
        if (!callback)
            callback = function () { };
        var modelManager = this._processor.modelManager;
        var loader = new loader_1.ControlFontsLoader(modelManager.model.cache.controlFontsCache, modelManager.richOptions.fonts, false);
        var status = [control_font_1.FontLoadStatus.Unloaded];
        if (reloadFailed)
            status.push(control_font_1.FontLoadStatus.Error);
        loader.loadFonts(modelManager.model.cache.controlFontsCache.list, status, function () {
            if (loader.needInvalidateLayout)
                _this._processor.invalidateLayoutAfterFontsLoaded();
            callback();
        });
    };
    ControlFontCollection.prototype.create = function (fontFamily, descriptors) {
        return this._getItem(this._processor.modelManager.model.cache.controlFontsCache.addFont(new control_font_1.ControlFont(fontFamily, font_face_descriptors_1.FontFaceDescriptors.create(descriptors))));
    };
    ControlFontCollection.prototype._getItem = function (font) {
        return new control_font_2.ControlFontApi(this._processor, font);
    };
    ControlFontCollection.prototype._getCoreItems = function () {
        return this._processor.modelManager.model.cache.controlFontsCache.list;
    };
    return ControlFontCollection;
}(collection_1.Collection));
exports.ControlFontCollection = ControlFontCollection;
