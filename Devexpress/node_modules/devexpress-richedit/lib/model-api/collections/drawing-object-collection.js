"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var color_1 = require("../../core/model/color/color");
var anchor_info_1 = require("../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../core/model/floating-objects/enums");
var sizes_1 = require("../../core/model/floating-objects/sizes");
var text_box_properties_1 = require("../../core/model/floating-objects/text-box-properties");
var insert_picture_manipulator_params_1 = require("../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var non_visual_drawing_object_info_1 = require("../../core/model/manipulators/picture-manipulator/non-visual-drawing-object-info");
var text_box_manipulator_1 = require("../../core/model/manipulators/text-box-manipulator");
var run_type_1 = require("../../core/model/runs/run-type");
var shape_1 = require("../../core/model/shapes/shape");
var sub_document_1 = require("../../core/model/sub-document");
var input_position_base_1 = require("../../core/selection/input-position-base");
var selection_intervals_info_1 = require("../../core/selection/selection-intervals-info");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var color_2 = require("@devexpress/utils/lib/utils/color");
var interval_1 = require("../interval");
var picture_1 = require("../picture");
var text_box_1 = require("../text-box");
var drawing_object_collection_base_1 = require("./drawing-object-collection-base");
var PictureCollection = (function (_super) {
    tslib_1.__extends(PictureCollection, _super);
    function PictureCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PictureCollection.prototype.create = function (position, base64, size, callback) {
        if (callback === void 0) { callback = function () { }; }
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('start', function (v) { return v; }, 0, this._subDocument.getDocumentEndPosition() - 1)
        ]);
        base64 = parameter_checker_1.ApiParametersChecker.check(base64, 2, false, [
            parameter_checker_1.ApiParametersChecker.stringDescriptor('base64', function (v) { return v; }, false)
        ]);
        var coreSize = parameter_checker_1.ApiParametersChecker.check(size, 3, false, [
            parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'SizeApi', function (v) { return new size_1.Size(v.width, v.height); })
        ]);
        var origSize = new size_1.Size(coreSize.width, coreSize.height);
        var cacheInfo = this._processor.modelManager.model.cache.imageCache.createUnloadedByBase64OrUrl(base64, origSize);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.modelManager.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo), new image_loading_options_1.ImageLoadingOptions(false, coreSize, function () { return callback(new interval_1.IntervalApi(position, 1)); }));
    };
    Object.defineProperty(PictureCollection.prototype, "_runTypes", {
        get: function () {
            return [run_type_1.RunType.AnchoredPictureRun, run_type_1.RunType.InlinePictureRun];
        },
        enumerable: true,
        configurable: true
    });
    PictureCollection.prototype._getItem = function (coreItem) {
        return new picture_1.PictureApi(this._processor.modelManager, this._subDocument, coreItem.run, coreItem.position);
    };
    return PictureCollection;
}(drawing_object_collection_base_1.DrawingObjectCollectionBase));
exports.PictureCollection = PictureCollection;
var TextBoxCollection = (function (_super) {
    tslib_1.__extends(TextBoxCollection, _super);
    function TextBoxCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextBoxCollection.prototype.create = function (position) {
        position = parameter_checker_1.ApiParametersChecker.check(position, 1, false, [
            parameter_checker_1.ApiParametersChecker.numberDescriptor('start', function (v) { return v; }, 0, this._subDocument.getDocumentEndPosition())
        ]);
        var topBottomMargin = unit_converter_1.UnitConverter.inchesToTwips(0.05);
        var leftRightMargin = unit_converter_1.UnitConverter.inchesToTwips(0.1);
        var absoluteSize = new size_1.Size(unit_converter_1.UnitConverter.inchesToTwips(2), unit_converter_1.UnitConverter.inchesToTwips(0.3));
        var relativeSize = new size_1.Size(sizes_1.AnchorTextBoxSize.RELATIVE_COEFF * 0.40, sizes_1.AnchorTextBoxSize.RELATIVE_COEFF * 0.2);
        var size = new sizes_1.AnchorTextBoxSize(false, 0, absoluteSize, relativeSize, enums_1.RelativeWidthType.Page, enums_1.RelativeHeightType.Page, false, false);
        var contentMargins = new margins_1.Margins(leftRightMargin, leftRightMargin, topBottomMargin, topBottomMargin);
        var textBoxProperties = new text_box_properties_1.TextBoxProperties(contentMargins);
        var anchorInfo = new anchor_info_1.AnchorInfo();
        anchorInfo.zOrder = this._processor.modelManager.modelManipulator.floatingObject.zOrder.getNewZOrder(this._subDocument);
        var inputPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(this._subDocument, position));
        this._processor.modelManager.modelManipulator.textBox.insertAnchoredTextBoxViaHistoty(new sub_document_1.SubDocumentPosition(this._subDocument, position), inputPos.charPropsBundle, new text_box_manipulator_1.BaseTextBoxInfo(null, size, new shape_1.Shape(color_2.ColorUtils.fromString(color_2.ColorUtils.colorNames.white), color_1.ColorHelper.BLACK_COLOR, unit_converter_1.UnitConverter.pointsToTwips(3.0 / 4)), anchorInfo, textBoxProperties, new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo()));
        var textBoxRun = this._subDocument.getRunByPosition(position);
        return new text_box_1.TextBoxApi(this._processor.modelManager, this._subDocument, textBoxRun, position);
    };
    Object.defineProperty(TextBoxCollection.prototype, "_runTypes", {
        get: function () {
            return [run_type_1.RunType.AnchoredTextBoxRun];
        },
        enumerable: true,
        configurable: true
    });
    TextBoxCollection.prototype._getItem = function (coreItem) {
        return new text_box_1.TextBoxApi(this._processor.modelManager, this._subDocument, coreItem.run, coreItem.position);
    };
    return TextBoxCollection;
}(drawing_object_collection_base_1.DrawingObjectCollectionBase));
exports.TextBoxCollection = TextBoxCollection;
