"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var model_font_1 = require("../fonts/model-font");
var collection_1 = require("./collection");
var FontCollection = (function (_super) {
    tslib_1.__extends(FontCollection, _super);
    function FontCollection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FontCollection.prototype._getItem = function (internalItem) {
        return new model_font_1.ModelFontApi(this._processor, internalItem);
    };
    FontCollection.prototype._getCoreItems = function () {
        return this._processor.modelManager.model.cache.fontInfoCache.getAllFonts();
    };
    FontCollection.prototype.getByName = function (name) {
        var coreFont = this._processor.modelManager.model.cache.fontInfoCache.getItemByName(name);
        return coreFont ? this._getItem(coreFont) : null;
    };
    FontCollection.prototype.create = function (name, cssName) {
        if (this._processor.modelManager.richOptions.fonts.limitedFonts) {
            console.warn("Font creation is prohibited.");
            return null;
        }
        return this._getItem(this._processor.modelManager.modelManipulator.font.addFontByName(name, cssName));
    };
    FontCollection.prototype.getAllFontNames = function () {
        return this._processor.modelManager.model.cache.fontInfoCache.getFontNames();
    };
    return FontCollection;
}(collection_1.Collection));
exports.FontCollection = FontCollection;
