"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var enums_1 = require("../core/model/floating-objects/enums");
var change_anchored_text_box_size_history_item_1 = require("../core/model/history/items/floating-objects/change-anchored-text-box-size-history-item");
var change_text_box_properties_history_item_1 = require("../core/model/history/items/floating-objects/change-text-box-properties-history-item");
var sub_document_1 = require("../core/model/sub-document");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var picture_1 = require("./picture");
var size_2 = require("./size");
var TextBoxApi = (function (_super) {
    tslib_1.__extends(TextBoxApi, _super);
    function TextBoxApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TextBoxApi.prototype, "size", {
        get: function () {
            var size = this._run.size;
            var absoluteSize = new size_2.SizeApi(size.absoluteSize.width, size.absoluteSize.height);
            var relativeSize = new size_2.SizeApi(size.relativeSize.width, size.relativeSize.height);
            return new TextBoxSizeApi(absoluteSize, relativeSize, size.relativeWidthType, size.relativeHeightType);
        },
        set: function (size) {
            size = parameter_checker_1.ApiParametersChecker.check(size, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('size', 'TextBoxSize', function (val) { return val; })
            ]);
            var sizeCore = this._run.size.clone();
            var interval = new fixed_1.FixedInterval(this._position, 1);
            sizeCore.absoluteSize = parameter_checker_1.ApiParametersChecker.check(size.absoluteSize, 1, true, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('size.absoluteSize', 'Size', function (val) { return new size_1.Size(val.width, val.height); })
            ]);
            sizeCore.relativeSize = parameter_checker_1.ApiParametersChecker.check(size.relativeSize, 1, true, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('size.relativeSize', 'Size', function (val) { return new size_1.Size(val.width, val.height); })
            ]);
            sizeCore.relativeWidthType = parameter_checker_1.ApiParametersChecker.check(size.relativeWidthType, 1, true, [
                parameter_checker_1.ApiParametersChecker.enumDescriptor('size.relativeWidthType', function (val) { return val; }, enums_1.RelativeWidthType, 'RelativeWidthType')
            ]);
            sizeCore.relativeHeightType = parameter_checker_1.ApiParametersChecker.check(size.relativeHeightType, 1, true, [
                parameter_checker_1.ApiParametersChecker.enumDescriptor('size.relativeHeightType', function (val) { return val; }, enums_1.RelativeHeightType, 'RelativeHeightType')
            ]);
            this._native.history.addAndRedo(new change_anchored_text_box_size_history_item_1.ChangeAnchoredTextBoxSizeHistoryItem(this._native.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), sizeCore));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextBoxApi.prototype, "properties", {
        get: function () {
            var result = new TextBoxPropertiesApi();
            var prop = this._run.textBoxProperties;
            result.margins = new size_2.MarginsApi(prop.leftMargin, prop.rightMargin, prop.topMargin, prop.bottomMargin);
            result.verticalAlignment = prop.verticalAlignment;
            return result;
        },
        set: function (properties) {
            properties = parameter_checker_1.ApiParametersChecker.check(properties, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor('settings', 'TextBoxProperties', function (val) { return val; })
            ]);
            var interval = new fixed_1.FixedInterval(this._position, 1);
            var textBoxProperties = this._run.textBoxProperties.clone();
            textBoxProperties.topMargin = parameter_checker_1.ApiParametersChecker.check(properties.margins.top, 1, true, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.margins.top', function (val) { return val; })
            ]);
            textBoxProperties.bottomMargin = parameter_checker_1.ApiParametersChecker.check(properties.margins.bottom, 1, true, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.margins.bottom', function (val) { return val; })
            ]);
            textBoxProperties.leftMargin = parameter_checker_1.ApiParametersChecker.check(properties.margins.left, 1, true, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.margins.left', function (val) { return val; })
            ]);
            textBoxProperties.rightMargin = parameter_checker_1.ApiParametersChecker.check(properties.margins.right, 1, true, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('properties.margins.right', function (val) { return val; })
            ]);
            textBoxProperties.verticalAlignment = parameter_checker_1.ApiParametersChecker.check(properties.verticalAlignment, 1, true, [
                parameter_checker_1.ApiParametersChecker.enumDescriptor('properties.verticalAlignment', function (val) { return val; }, enums_1.DrawingTextAnchoringType, 'DrawingTextAnchoringType')
            ]);
            this._native.history.addAndRedo(new change_text_box_properties_history_item_1.ChangeTextBoxPropertiesHistoryItem(this._native.modelManipulator, new sub_document_1.SubDocumentInterval(this._subDocument, interval), textBoxProperties));
        },
        enumerable: true,
        configurable: true
    });
    return TextBoxApi;
}(picture_1.DrawingObjectBase));
exports.TextBoxApi = TextBoxApi;
var TextBoxSizeApi = (function () {
    function TextBoxSizeApi(absoluteSize, relativeSize, relativeWidthType, relativeHeightType) {
        this.absoluteSize = absoluteSize;
        this.relativeSize = relativeSize;
        this.relativeHeightType = relativeHeightType;
        this.relativeWidthType = relativeWidthType;
    }
    return TextBoxSizeApi;
}());
exports.TextBoxSizeApi = TextBoxSizeApi;
var TextBoxPropertiesApi = (function () {
    function TextBoxPropertiesApi() {
    }
    return TextBoxPropertiesApi;
}());
exports.TextBoxPropertiesApi = TextBoxPropertiesApi;
var DrawingTextAnchoringTypeApi;
(function (DrawingTextAnchoringTypeApi) {
    DrawingTextAnchoringTypeApi[DrawingTextAnchoringTypeApi["Bottom"] = 1] = "Bottom";
    DrawingTextAnchoringTypeApi[DrawingTextAnchoringTypeApi["Center"] = 2] = "Center";
    DrawingTextAnchoringTypeApi[DrawingTextAnchoringTypeApi["Distributed"] = 3] = "Distributed";
    DrawingTextAnchoringTypeApi[DrawingTextAnchoringTypeApi["Justified"] = 4] = "Justified";
    DrawingTextAnchoringTypeApi[DrawingTextAnchoringTypeApi["Top"] = 5] = "Top";
})(DrawingTextAnchoringTypeApi = exports.DrawingTextAnchoringTypeApi || (exports.DrawingTextAnchoringTypeApi = {}));
var RelativeWidthTypeApi;
(function (RelativeWidthTypeApi) {
    RelativeWidthTypeApi[RelativeWidthTypeApi["Margin"] = 0] = "Margin";
    RelativeWidthTypeApi[RelativeWidthTypeApi["Page"] = 1] = "Page";
    RelativeWidthTypeApi[RelativeWidthTypeApi["LeftMargin"] = 2] = "LeftMargin";
    RelativeWidthTypeApi[RelativeWidthTypeApi["RightMargin"] = 3] = "RightMargin";
    RelativeWidthTypeApi[RelativeWidthTypeApi["InsideMargin"] = 4] = "InsideMargin";
    RelativeWidthTypeApi[RelativeWidthTypeApi["OutsideMargin"] = 5] = "OutsideMargin";
})(RelativeWidthTypeApi = exports.RelativeWidthTypeApi || (exports.RelativeWidthTypeApi = {}));
var RelativeHeightTypeApi;
(function (RelativeHeightTypeApi) {
    RelativeHeightTypeApi[RelativeHeightTypeApi["Margin"] = 0] = "Margin";
    RelativeHeightTypeApi[RelativeHeightTypeApi["Page"] = 1] = "Page";
    RelativeHeightTypeApi[RelativeHeightTypeApi["TopMargin"] = 2] = "TopMargin";
    RelativeHeightTypeApi[RelativeHeightTypeApi["BottomMargin"] = 3] = "BottomMargin";
    RelativeHeightTypeApi[RelativeHeightTypeApi["InsideMargin"] = 4] = "InsideMargin";
    RelativeHeightTypeApi[RelativeHeightTypeApi["OutsideMargin"] = 5] = "OutsideMargin";
})(RelativeHeightTypeApi = exports.RelativeHeightTypeApi || (exports.RelativeHeightTypeApi = {}));
