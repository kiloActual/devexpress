"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var parameter_checker_1 = require("../api-utils/api-utils/parameter-checker");
var field_1 = require("../core/model/fields/field");
var field_context_menu_helper_1 = require("../core/model/fields/field-context-menu-helper");
var tree_creator_1 = require("../core/model/fields/tree-creator");
var fields_manipulator_1 = require("../core/model/manipulators/fields-manipulator");
var sub_document_1 = require("../core/model/sub-document");
var interval_1 = require("./interval");
var sub_document_2 = require("./sub-document");
var FieldNameApi;
(function (FieldNameApi) {
    FieldNameApi[FieldNameApi["Unknown"] = 0] = "Unknown";
    FieldNameApi[FieldNameApi["Time"] = 1] = "Time";
    FieldNameApi[FieldNameApi["Date"] = 2] = "Date";
    FieldNameApi[FieldNameApi["Page"] = 3] = "Page";
    FieldNameApi[FieldNameApi["NumPages"] = 4] = "NumPages";
    FieldNameApi[FieldNameApi["MergeField"] = 5] = "MergeField";
    FieldNameApi[FieldNameApi["DocVariable"] = 6] = "DocVariable";
    FieldNameApi[FieldNameApi["Hyperlink"] = 7] = "Hyperlink";
    FieldNameApi[FieldNameApi["Seq"] = 8] = "Seq";
    FieldNameApi[FieldNameApi["Tc"] = 9] = "Tc";
    FieldNameApi[FieldNameApi["PageRef"] = 10] = "PageRef";
    FieldNameApi[FieldNameApi["Toc"] = 11] = "Toc";
    FieldNameApi[FieldNameApi["FillIn"] = 12] = "FillIn";
})(FieldNameApi = exports.FieldNameApi || (exports.FieldNameApi = {}));
var FieldApi = (function () {
    function FieldApi(processor, subDocument, field) {
        this._processor = processor;
        this._field = field;
        this._subDocument = subDocument;
    }
    Object.defineProperty(FieldApi.prototype, "index", {
        get: function () {
            return this._field.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "interval", {
        get: function () {
            return interval_1.convertToIntervalApi(this._field.getAllFieldInterval());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "codeInterval", {
        get: function () {
            return interval_1.convertToIntervalApi(this._field.getCodeInterval());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "subDocument", {
        get: function () {
            return new sub_document_2.SubDocumentApi(this._processor, this._subDocument);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "resultInterval", {
        get: function () {
            return interval_1.convertToIntervalApi(this._field.getResultInterval());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "isShowCode", {
        get: function () {
            return this._field.showCode;
        },
        set: function (val) {
            this._processor.modelManager.modelManipulator.field.setFieldShowCode(this._subDocument, this._field, !!val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "isHyperlink", {
        get: function () {
            return this._field.isHyperlinkField();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldApi.prototype, "name", {
        get: function () {
            var parser = tree_creator_1.FieldsWaitingForUpdate.getParser(this._processor.modelManager, this._processor.layoutFormatterManager, null, this._subDocument, this._field);
            return parser ? parser.name : FieldNameApi.Unknown;
        },
        enumerable: true,
        configurable: true
    });
    FieldApi.prototype.delete = function () {
        this._processor.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this._subDocument, this._field.getAllFieldInterval()), true, false);
    };
    FieldApi.prototype.update = function (callback) {
        var _this = this;
        callback = callback ?
            parameter_checker_1.ApiParametersChecker.check(callback, 1, false, [
                parameter_checker_1.ApiParametersChecker.functionDescriptor('callback', function (val) { return val; })
            ]) :
            function () { };
        this._processor.modelManager.history.beginTransaction();
        this._processor.beginUpdate();
        return this._processor.modelManager.modelManipulator.field.updateFields(this._processor.layoutFormatterManager, this._processor.createFieldRequestManager(), new fields_manipulator_1.UpdateFieldsManipulatorParams([new sub_document_1.SubDocumentIntervals(this._subDocument, [this._field.getAllFieldInterval()])], function () {
            _this._processor.endUpdate();
            _this._processor.modelManager.history.endTransaction();
            callback(_this);
        }, new tree_creator_1.UpdateFieldsOptions()));
    };
    return FieldApi;
}());
exports.FieldApi = FieldApi;
var HyperlinkApi = (function (_super) {
    tslib_1.__extends(HyperlinkApi, _super);
    function HyperlinkApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(HyperlinkApi.prototype, "hyperlinkInfo", {
        get: function () {
            var coreInfo = this._field.getHyperlinkInfo();
            return new HyperlinkInfoApi(field_context_menu_helper_1.FieldContextMenuHelper.getHyperlinkResultText(this._subDocument, this._field), coreInfo.uri, coreInfo.anchor, coreInfo.tip);
        },
        set: function (hyperlinkInfo) {
            hyperlinkInfo = parameter_checker_1.ApiParametersChecker.check(hyperlinkInfo, 1, false, [
                parameter_checker_1.ApiParametersChecker.objectDescriptor("info", "HyperlinkInfo", function (v) { return v; })
            ]);
            var uri = parameter_checker_1.ApiParametersChecker.check(hyperlinkInfo.url, 1, true, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("hyperlinkInfo.url", function (v) { return v ? v : ""; }, true)
            ]);
            var tip = parameter_checker_1.ApiParametersChecker.check(hyperlinkInfo.tooltip, 1, true, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("hyperlinkInfo.tooltip", function (v) { return v ? v : ""; }, true)
            ]);
            var anchor = parameter_checker_1.ApiParametersChecker.check(hyperlinkInfo.bookmark, 1, true, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("hyperlinkInfo.bookmark", function (v) { return v ? v : ""; }, true)
            ]);
            var shownText = parameter_checker_1.ApiParametersChecker.check(hyperlinkInfo.text, 1, true, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor("hyperlinkInfo.text", function (v) { return v ? v : ""; }, true)
            ]);
            var hyperlinkInfoCore = new field_1.HyperlinkInfo(uri, anchor, tip, false);
            this._processor.modelManager.modelManipulator.field.setHyperlinkInfoWithReplaceResultAndCode(this._subDocument, this.index, hyperlinkInfoCore, shownText);
        },
        enumerable: true,
        configurable: true
    });
    return HyperlinkApi;
}(FieldApi));
exports.HyperlinkApi = HyperlinkApi;
var HyperlinkInfoApi = (function () {
    function HyperlinkInfoApi(text, url, bookmark, tooltip) {
        this.url = url;
        this.bookmark = bookmark;
        this.tooltip = tooltip;
        this.text = text;
    }
    return HyperlinkInfoApi;
}());
exports.HyperlinkInfoApi = HyperlinkInfoApi;
