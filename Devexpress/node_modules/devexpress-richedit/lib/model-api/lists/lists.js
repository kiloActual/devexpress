"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var color_model_info_1 = require("../../core/model/color/color-model-info");
var list_level_character_properties_history_items_1 = require("../../core/model/history/items/list-level-character-properties-history-items");
var list_level_paragraph_properties_history_items_1 = require("../../core/model/history/items/list-level-paragraph-properties-history-items");
var list_level_properties_history_items_1 = require("../../core/model/history/items/list-level-properties-history-items");
var color_1 = require("@devexpress/utils/lib/utils/color");
var api_utils_1 = require("../api-utils/api-utils");
var model_parameter_checker_1 = require("../api-utils/model-parameter-checker");
var paragraph_1 = require("../paragraph");
var enums_1 = require("./enums");
var list_level_settings_1 = require("./list-level-settings");
var ListApi = (function () {
    function ListApi(native, list) {
        this._native = native;
        this._list = list;
    }
    Object.defineProperty(ListApi.prototype, "index", {
        get: function () {
            return this._native.model.numberingLists.indexOf(this._list);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListApi.prototype, "type", {
        get: function () {
            return enums_1.ListTypeApiConverter.toApiEnum(this._list.getListType());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListApi.prototype, "levelProperties", {
        get: function () {
            var abstractNumberingList = this._list.getAbstractNumberingList();
            var value = [];
            for (var i = 0; i < abstractNumberingList.levels.length; i++) {
                var levelSettings = new list_level_settings_1.ListLevelSettingsApi();
                var listLevel = abstractNumberingList.levels[i];
                var listLevelProperties = listLevel.getListLevelProperties();
                var paragraphProperties = listLevel.getParagraphProperties();
                var characterProperties = listLevel.getCharacterProperties();
                levelSettings.displayFormatString = listLevelProperties.displayFormatString;
                levelSettings.format = listLevelProperties.format;
                levelSettings.start = listLevelProperties.start;
                levelSettings.alignment = listLevelProperties.alignment;
                levelSettings.separator = listLevelProperties.separator;
                levelSettings.leftIndent = paragraphProperties.leftIndent;
                levelSettings.firstLineIndent = paragraphProperties.firstLineIndent;
                levelSettings.firstLineIndentType = paragraphProperties.firstLineIndentType;
                levelSettings.fontName = characterProperties.fontInfo.name;
                var foreColor = characterProperties.textColor.toRgb(this._native.model.colorProvider);
                levelSettings.fontColor = color_1.ColorUtils.colorToHash(foreColor);
                levelSettings.fontSize = characterProperties.fontSize;
                levelSettings.fontBold = characterProperties.fontBold;
                levelSettings.fontItalic = characterProperties.fontItalic;
                value.push(levelSettings);
            }
            return value;
        },
        set: function (settings) {
            if (settings.length !== 9)
                throw new Error("listLevelSettings must have 9 elements");
            var modelManipulator = this._native.modelManipulator;
            var abstractNumberingListIndex = this._list.abstractNumberingListIndex;
            var initSettings = this.levelProperties;
            this._native.history.beginTransaction();
            for (var i = 0, listLevel = void 0; listLevel = settings[i]; i++) {
                var initLevel = initSettings[i];
                if (listLevel.alignment !== undefined && listLevel.alignment != initLevel.alignment) {
                    api_utils_1.ApiUtils.assertEnum(listLevel.alignment, enums_1.ListLevelNumberAlignmentApi, "ListLevelNumberAlignment", "listLevelSettings[" + i + "].alignment");
                    this._native.history.addAndRedo(new list_level_properties_history_items_1.ListLevelAlignmentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.alignment));
                }
                if (listLevel.displayFormatString !== undefined && listLevel.displayFormatString !== initLevel.displayFormatString) {
                    api_utils_1.ApiUtils.assertString(listLevel.displayFormatString, false, "listLevelSettings[" + i + "].displayFormatString");
                    this._native.history.addAndRedo(new list_level_properties_history_items_1.ListLevelDisplayFormatStringHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.displayFormatString));
                }
                if (listLevel.firstLineIndent !== undefined && listLevel.firstLineIndent !== initLevel.firstLineIndent) {
                    api_utils_1.ApiUtils.assertNumber(listLevel.firstLineIndent, "listLevelSettings[" + i + "].firstLineIndent");
                    this._native.history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphFirstLineIndentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.firstLineIndent, true));
                }
                if (listLevel.firstLineIndentType !== undefined && listLevel.firstLineIndentType !== initLevel.firstLineIndentType) {
                    api_utils_1.ApiUtils.assertEnum(listLevel.firstLineIndentType, paragraph_1.ParagraphFirstLineIndentApi, "ParagraphFirstLineIndent", "listLevelSettings[" + i + "].firstLineIndentType");
                    this._native.history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphFirstLineIndentTypeHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.firstLineIndentType, true));
                }
                if (listLevel.fontBold !== undefined && listLevel.fontBold !== initLevel.fontBold) {
                    api_utils_1.ApiUtils.assertBoolean(listLevel.fontBold, "listLevelSettings[" + i + "].fontBold");
                    this._native.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontBoldHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.fontBold, true));
                }
                if (listLevel.fontColor !== undefined && listLevel.fontColor !== initLevel.fontColor) {
                    var coreColor = parameter_checker_1.ApiParametersChecker.check(listLevel.fontColor, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors("listLevelSettings[" + i + "].fontColor"));
                    this._native.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontTextColorHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, color_model_info_1.ColorModelInfo.makeByColor(coreColor), true));
                }
                if (listLevel.fontItalic !== undefined && listLevel.fontItalic !== initLevel.fontItalic) {
                    api_utils_1.ApiUtils.assertBoolean(listLevel.fontItalic, "listLevelSettings[" + i + "].fontItalic");
                    this._native.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontItalicHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.fontItalic, true));
                }
                if (listLevel.fontName !== undefined && listLevel.fontName !== initLevel.fontName) {
                    api_utils_1.ApiUtils.assertString(listLevel.fontName, true, "listLevelSettings[" + i + "].fontName");
                    this._native.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontNameHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, this._native.model.cache.fontInfoCache.getItemByName(listLevel.fontName), true));
                }
                if (listLevel.fontSize !== undefined && listLevel.fontSize !== initLevel.fontSize) {
                    api_utils_1.ApiUtils.assertPositiveNumber(listLevel.fontSize, "listLevelSettings[" + i + "].fontSize");
                    this._native.history.addAndRedo(new list_level_character_properties_history_items_1.ListLevelFontSizeHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.fontSize, true));
                }
                if (listLevel.format !== undefined && listLevel.format !== initLevel.format) {
                    api_utils_1.ApiUtils.assertEnum(listLevel.format, enums_1.ListLevelFormatApi, "ListLevelFormat", "listLevelSettings[" + i + "].format");
                    this._native.history.addAndRedo(new list_level_properties_history_items_1.ListLevelFormatHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.format));
                }
                if (listLevel.leftIndent !== undefined && listLevel.leftIndent !== initLevel.leftIndent) {
                    api_utils_1.ApiUtils.assertNonNegativeNumber(listLevel.leftIndent, "listLevelSettings[" + i + "].leftIndent");
                    this._native.history.addAndRedo(new list_level_paragraph_properties_history_items_1.ListLevelParagraphLeftIndentHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.leftIndent, true));
                }
                if (listLevel.separator !== undefined && listLevel.separator !== initLevel.separator) {
                    api_utils_1.ApiUtils.assertString(listLevel.separator, false, "listLevelSettings[" + i + "].separator");
                    this._native.history.addAndRedo(new list_level_properties_history_items_1.ListLevelSeparatorHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.separator));
                }
                if (listLevel.start !== undefined && listLevel.start !== initLevel.start) {
                    api_utils_1.ApiUtils.assertNumber(listLevel.start, "listLevelSettings[" + i + "].start");
                    this._native.history.addAndRedo(new list_level_properties_history_items_1.ListLevelStartHistoryItem(modelManipulator, true, abstractNumberingListIndex, i, listLevel.start));
                }
            }
            this._native.history.endTransaction();
        },
        enumerable: true,
        configurable: true
    });
    return ListApi;
}());
exports.ListApi = ListApi;
