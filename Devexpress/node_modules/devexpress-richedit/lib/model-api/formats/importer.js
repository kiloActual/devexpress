"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_format_1 = require("../../core/document-format");
var model_manager_1 = require("../../core/model-manager");
var create_range_copy_operation_1 = require("../../core/model/manipulators/range/create-range-copy-operation");
var sub_document_1 = require("../../core/model/sub-document");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var errors_1 = require("@devexpress/utils/lib/errors");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var common_1 = require("@devexpress/utils/lib/utils/common");
var importer_1 = require("../../docx/import/importer");
var importer_options_1 = require("../../docx/import/importer-options");
var exporter_1 = require("../../rtf/export/exporter");
var rtf_document_exporter_options_1 = require("../../rtf/export/rtf-document-exporter-options");
var importer_options_2 = require("../../rtf/import/importer-options");
var rtf_importer_1 = require("../../rtf/import/rtf-importer");
var txt_importer_1 = require("../../txt/txt-importer");
function createImporter(format, throwInvalidFile) {
    if (throwInvalidFile === void 0) { throwInvalidFile = function (reason) {
        throw new Error(errors_1.Errors.InternalException + " " + reason);
    }; }
    switch (format) {
        case document_format_1.DocumentFormat.OpenXml: return new importer_1.Importer(new importer_options_1.ImporterOptions(throwInvalidFile));
        case document_format_1.DocumentFormat.Rtf: return new rtf_importer_1.RtfImporter(new importer_options_2.RtfImporterOptions(throwInvalidFile));
        case document_format_1.DocumentFormat.PlainText: return new txt_importer_1.TxtImporter();
        default:
            console.log('Unsupported format');
            return null;
    }
}
exports.createImporter = createImporter;
function insertRtfInSubDocumentPublic(processor, subDocument, position, rtf, callback) {
    var options = new importer_options_2.RtfImporterOptions(function () { });
    new rtf_importer_1.RtfImporter(options).importFromString(rtf, processor.modelManager.richOptions, getAfterInsertCallback(processor, subDocument, position, callback), getAfterInsertReject(callback));
}
exports.insertRtfInSubDocumentPublic = insertRtfInSubDocumentPublic;
function insertContentInSubDocumentPublic(processor, subDocument, position, content, documentFormat, callback) {
    if (content instanceof ArrayBuffer)
        content = base64_1.Base64Utils.fromArrayBuffer(content);
    if (common_1.isString(content))
        content = base64_1.Base64Utils.getFileFromBase64(content);
    var importer = createImporter(documentFormat, function () { });
    if (!importer)
        throw new Error('Unknown document format');
    importer.importFromFile(content, processor.modelManager.richOptions, getAfterInsertCallback(processor, subDocument, position, callback), getAfterInsertReject(callback));
}
exports.insertContentInSubDocumentPublic = insertContentInSubDocumentPublic;
function getAfterInsertCallback(processor, subDocument, position, callback) {
    return function (model, formatImagesImporter) {
        formatImagesImporter.whenAllPicturesLoaded(function (_success) {
            processor.beginUpdate();
            var interval = processor.modelManager.modelManipulator.subDocument.insertSubDocument(new sub_document_1.SubDocumentPosition(subDocument, position), new sub_document_1.SubDocumentInterval(model.mainSubDocument, model.mainSubDocument.interval));
            model.updateHyperlinkFields(processor, subDocument, interval);
            processor.endUpdate();
            callback(interval, true);
        }, 5000);
        var clientModelManager = new model_manager_1.ClientModelManager(model, processor.modelManager.richOptions, new batch_updatable_1.EmptyBatchUpdatableObject());
        formatImagesImporter.import(clientModelManager.modelManipulator);
    };
}
function getAfterInsertReject(callback) {
    return function (_reason) {
        callback(null, false);
    };
}
function getRtfFromSubDocumentPublic(richOptions, subDocument, coreInterval) {
    var rangeCopy = create_range_copy_operation_1.RangeCopy.create(new sub_document_1.SubDocumentIntervals(subDocument, [coreInterval]));
    var newModelManager = new model_manager_1.ClientModelManager(rangeCopy.model, richOptions, new batch_updatable_1.EmptyBatchUpdatableObject());
    return new exporter_1.RtfExporter(newModelManager.modelManipulator, new rtf_document_exporter_options_1.RtfDocumentExporterOptions()).exportAsString();
}
exports.getRtfFromSubDocumentPublic = getRtfFromSubDocumentPublic;
