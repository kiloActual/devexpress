"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var images_import_1 = require("../../../core/formats/utils/images-import");
var anchor_info_1 = require("../../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../../core/model/floating-objects/enums");
var sizes_1 = require("../../../core/model/floating-objects/sizes");
var text_box_properties_1 = require("../../../core/model/floating-objects/text-box-properties");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var non_visual_drawing_object_info_1 = require("../../../core/model/manipulators/picture-manipulator/non-visual-drawing-object-info");
var rich_utils_1 = require("../../../core/model/rich-utils");
var anchored_picture_run_1 = require("../../../core/model/runs/anchored-picture-run");
var anchored_text_box_run_1 = require("../../../core/model/runs/anchored-text-box-run");
var shape_1 = require("../../../core/model/shapes/shape");
var sub_document_1 = require("../../../core/model/sub-document");
var properties_bundle_1 = require("../../../core/rich-utils/properties-bundle");
var constants_1 = require("@devexpress/utils/lib/constants");
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var ShapeType;
(function (ShapeType) {
    ShapeType[ShapeType["None"] = -1] = "None";
    ShapeType[ShapeType["PictureFrame"] = 75] = "PictureFrame";
    ShapeType[ShapeType["TextBox"] = 202] = "TextBox";
})(ShapeType = exports.ShapeType || (exports.ShapeType = {}));
var FloatingObjectImportInfo = (function () {
    function FloatingObjectImportInfo(data) {
        this.size = new sizes_1.AnchorTextBoxSize(true, 0, new size_1.Size(constants_1.Constants.MIN_SAFE_INTEGER, constants_1.Constants.MIN_SAFE_INTEGER), new size_1.Size(0, 0), enums_1.RelativeWidthType.Page, enums_1.RelativeHeightType.Page, true, true);
        this.imageId = null;
        this.subDocId = -1;
        this.data = data;
        this.anchorInfo = new anchor_info_1.AnchorInfo();
        this.anchorInfo.wrapType = enums_1.AnchorObjectTextWrapType.None;
        this.anchorInfo.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.None;
        this.anchorInfo.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        this.shape = new shape_1.Shape();
        this.textBoxProperties = new text_box_properties_1.TextBoxProperties(new margins_1.Margins(144, 144, 72, 72));
        this.constainerProperties = new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo();
        this.objectNonVisualProperties = new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo();
    }
    FloatingObjectImportInfo.prototype.insertFloatingObject = function (imageCache) {
        if (!this.isFloatingObject)
            return null;
        var pos = this.data.subDocumentInfo.positionImporter.currPosition;
        var paragraph = this.data.subDocumentInfo.paragraphImporter.paragraph;
        var characterStyle = this.data.subDocumentInfo.characterImporter.style;
        var maskedCharacterProperties = this.data.subDocumentInfo.characterImporter.properties;
        switch (this.shapeType) {
            case ShapeType.TextBox: {
                if (this.subDocId < 0)
                    return null;
                var run = new anchored_text_box_run_1.AnchoredTextBoxRun(pos, paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle), this.shape.clone(), this.subDocId, this.size.clone(), this.anchorInfo.clone(), -1, this.textBoxProperties.clone());
                this.data.subDocumentInfo.characterImporter.addRun(run, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
                run.containerProperties.copyFrom(this.constainerProperties);
                return run;
            }
            default: {
                if (this.imageId === null)
                    return null;
                var cacheInfo = imageCache.getPictureData(this.imageId);
                var run = new anchored_picture_run_1.AnchoredPictureRun(pos, paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle), new insert_picture_manipulator_params_1.AnchorPictureInfo(new sizes_1.PictureSize(this.size.lockAspectRatio, this.size.rotation, cacheInfo, new size_1.Size(100, 100)), this.shape.clone(), this.anchorInfo.clone(), this.constainerProperties, this.objectNonVisualProperties), -1);
                this.data.subDocumentInfo.characterImporter.addRun(run, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
                this.data.formatImagesImporter.registerImageRun(new images_import_1.FormatImagesImporterData(new sub_document_1.SubDocumentPosition(this.data.subDocument, pos), image_loading_options_1.ImageLoadingOptions.initByActualSize(this.size.absoluteSize), run));
                return run;
            }
        }
        return null;
    };
    return FloatingObjectImportInfo;
}());
exports.FloatingObjectImportInfo = FloatingObjectImportInfo;
