"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_1 = require("../../../core/model/tables/main-structures/table");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var bookmark_importer_1 = require("../importers/bookmark-importer");
var character_importer_1 = require("../importers/character-importer");
var comments_importer_1 = require("../importers/comments-importer");
var field_importer_1 = require("../importers/field-importer");
var paragraph_importer_1 = require("../importers/paragraph-importer");
var position_importer_1 = require("../importers/position-importer");
var range_permission_importer_1 = require("../importers/range-permission-importer");
var table_importer_1 = require("../importers/table-importer");
var ImportSubDocumentInfo = (function () {
    function ImportSubDocumentInfo(data, subDocument, comments, activeComment) {
        if (comments === void 0) { comments = {}; }
        if (activeComment === void 0) { activeComment = null; }
        this.data = data;
        this.subDocument = subDocument;
        this.comments = comments;
        this.activeComment = activeComment;
        this.tableStack = new stack_1.Stack();
        this.fieldInfoStack = new stack_1.Stack();
        this.positionImporter = new position_importer_1.PositionImporter(this.data);
        this.characterImporter = new character_importer_1.CharacterImporter(this.data);
        this.paragraphImporter = new paragraph_importer_1.ParagraphImporter(this.data);
        this.bookmarkImporter = new bookmark_importer_1.BookmarkImporter(this.data);
        this.commentsImporter = new comments_importer_1.CommentsImporter(this.data);
        this.fieldImporter = new field_importer_1.FieldImporter(this.data);
        this.rangePermissionImporter = new range_permission_importer_1.RangePermissionImporter(this.data);
        this.tableImporter = new table_importer_1.TableImporter(this.data);
    }
    ImportSubDocumentInfo.prototype.endImport = function () {
        this.rangePermissionImporter.insertRangePermissions();
        this.fieldImporter.deleteInvalidFieldsInfo();
        table_1.Table.sort(this.subDocument.tables);
        table_1.Table.fillTableByLevels(this.subDocument);
        this.bookmarkImporter.insertBookmarks();
        if (!this.subDocument.paragraphs.length)
            this.data.subDocumentInfo.paragraphImporter.insertParagraph();
    };
    return ImportSubDocumentInfo;
}());
exports.ImportSubDocumentInfo = ImportSubDocumentInfo;
