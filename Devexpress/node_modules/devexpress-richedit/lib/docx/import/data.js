"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var images_import_1 = require("../../core/formats/utils/images-import");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var list_1 = require("@devexpress/utils/lib/utils/list");
var constants_1 = require("../utils/constants");
var progress_indication_1 = require("../utils/progress-indication");
var xml_reader_1 = require("../zip/xml-reader");
var alt_chunk_importer_1 = require("./importers/alt-chunk-importer");
var core_properties_importer_1 = require("./importers/core-properties-importer");
var custom_properties_importer_1 = require("./importers/custom-properties-importer");
var end_notes_importer_1 = require("./importers/end-notes-importer");
var foot_notes_importer_1 = require("./importers/foot-notes-importer");
var header_footer_importer_1 = require("./importers/header-footer-importer");
var numbering_list_importer_1 = require("./importers/numbering-list-importer");
var section_importer_1 = require("./importers/section-importer");
var settings_importer_1 = require("./importers/settings-importer");
var styles_importer_1 = require("./importers/styles-importer");
var themes_importer_1 = require("./importers/themes-importer");
var web_settings_importer_1 = require("./importers/web-settings-importer");
var import_sub_document_info_1 = require("./model/import-sub-document-info");
var reader_helper_1 = require("./utils/reader-helper");
var relations_collection_1 = require("./utils/relations-collection");
var DestinationStack = (function (_super) {
    tslib_1.__extends(DestinationStack, _super);
    function DestinationStack() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DestinationStack.prototype.getThis = function () {
        return this.last.peek();
    };
    return DestinationStack;
}(stack_1.Stack));
exports.DestinationStack = DestinationStack;
var Data = (function () {
    function Data(options, archiveData, documentModel) {
        this.imageRelationToCacheMap = {};
        this.options = options;
        this.archiveData = archiveData;
        this.documentModel = documentModel;
        this.formatImagesImporter = new images_import_1.FormatImagesImporter();
        this.stylesImporter = new styles_importer_1.StylesImporter(this);
        this.stylesImporter.presetDefaultProperties();
        this.subDocumentsInfoStack = new stack_1.Stack();
        this.pushCurrentSubDocument(this.documentModel.mainSubDocument);
        this.progressIndication = new progress_indication_1.ProgressIndication();
        this.constants = new constants_1.DocxConstants();
        this.readerHelper = new reader_helper_1.ReaderHelper(this);
        this.relationsStack = new stack_1.Stack();
        this.corePropertiesImporter = new core_properties_importer_1.CorePropertiesImporter(this);
        this.customPropertiesImporter = new custom_properties_importer_1.CustomPropertiesImporter(this);
        this.endNotesImporter = new end_notes_importer_1.EndNotesImporter(this);
        this.footNotesImporter = new foot_notes_importer_1.FootNotesImporter(this);
        this.numberingListImporter = new numbering_list_importer_1.NumberingListImporter(this);
        this.settingsImporter = new settings_importer_1.SettingsImporter(this);
        this.themesImporter = new themes_importer_1.ThemesImporter(this);
        this.webSettingsImporter = new web_settings_importer_1.WebSettingsImporter(this);
        this.headerFooterImporter = new header_footer_importer_1.HeaderFooterImporter(this);
        this.sectionImporter = new section_importer_1.SectionImporter(this);
        this.altChunkImporter = new alt_chunk_importer_1.AltChunkImporter(this);
        this.destinationStack = new DestinationStack();
    }
    Object.defineProperty(Data.prototype, "subDocumentInfo", {
        get: function () { return this.subDocumentsInfoStack.last; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Data.prototype, "subDocument", {
        get: function () { return this._subDocument; },
        enumerable: true,
        configurable: true
    });
    Data.prototype.fixLastParagraph = function () {
        if (this.shouldFixLastParagraph()) {
        }
    };
    Data.prototype.addRelations = function (filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rel;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rel = new relations_collection_1.RelationsCollection(this);
                        return [4, rel.init(filePath)];
                    case 1:
                        _a.sent();
                        this.relationsStack.push(rel);
                        return [2, rel];
                }
            });
        });
    };
    Data.prototype.pushCurrentSubDocument = function (subDocument) {
        this._subDocument = subDocument;
        this.subDocumentsInfoStack.push(new import_sub_document_info_1.ImportSubDocumentInfo(this, subDocument, {}, null));
    };
    Data.prototype.popCurrentSubDocument = function () {
        var oldInfo = this.subDocumentsInfoStack.last;
        oldInfo.endImport();
        this.subDocumentsInfoStack.pop();
        this._subDocument = this.subDocumentsInfoStack.last ? this.subDocumentsInfoStack.last.subDocument : null;
        return oldInfo.subDocument;
    };
    Data.prototype.importContent = function (reader, initialDestination) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var destinationCount;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        destinationCount = this.destinationStack.count;
                        this.destinationStack.push(initialDestination);
                        _a.label = 1;
                    case 1:
                        if (!reader.read()) return [3, 3];
                        return [4, this.destinationStack.last.process(reader)];
                    case 2:
                        _a.sent();
                        return [3, 1];
                    case 3:
                        if (reader.state == xml_reader_1.XmlReaderState.Error) {
                            this.options.throwInvalidFile('Invalid file');
                            return [2, false];
                        }
                        while (this.destinationStack.count > destinationCount)
                            this.destinationStack.pop();
                        return [2, true];
                }
            });
        });
    };
    Data.prototype.shouldFixLastParagraph = function () {
        return this.subDocument.paragraphs.length > 1 &&
            list_1.ListUtils.last(this.subDocument.paragraphs).isEmpty && true;
    };
    return Data;
}());
exports.Data = Data;
