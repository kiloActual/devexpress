"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var images_import_1 = require("../../../../core/formats/utils/images-import");
var enums_1 = require("../../../../core/model/floating-objects/enums");
var insert_picture_manipulator_params_1 = require("../../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var inline_picture_run_1 = require("../../../../core/model/runs/inline-picture-run");
var sub_document_1 = require("../../../../core/model/sub-document");
var errors_1 = require("@devexpress/utils/lib/errors");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var inline_picture_css_parser_1 = require("../../css-engine/inline-picture-css-parser");
var floating_object_import_info_1 = require("../../model/floating-object-import-info");
var destination_1 = require("../destination");
var v_mlshape_destination_1 = require("../vml/v-mlshape-destination");
var InlineObjectDestination = (function (_super) {
    tslib_1.__extends(InlineObjectDestination, _super);
    function InlineObjectDestination(data) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = new floating_object_import_info_1.FloatingObjectImportInfo(_this.data);
        return _this;
    }
    Object.defineProperty(InlineObjectDestination.prototype, "elementHandlerTable", {
        get: function () {
            return InlineObjectDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    InlineObjectDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    InlineObjectDestination.prototype.processElementClose = function (_reader) {
        if (this.floatingObjectImportInfo.shapeType == floating_object_import_info_1.ShapeType.TextBox && this.floatingObjectImportInfo.subDocId >= 0) {
            this.floatingObjectImportInfo.isFloatingObject = true;
            this.importFloatingObject(this.getCssParser(new size_1.Size(0, 0)));
            this.floatingObjectImportInfo.insertFloatingObject(this.documentModel.cache.imageCache);
        }
        else {
            if (this.floatingObjectImportInfo.imageId === null)
                return;
            var cssParser = this.getCssParser(new size_1.Size(0, 0));
            var imageRun = void 0;
            this.importFloatingObject(this.getCssParser(new size_1.Size(0, 0)));
            if (cssParser.position != 'absolute') {
                var cacheInfo = this.documentModel.cache.imageCache.getPictureData(this.floatingObjectImportInfo.imageId);
                if (!cacheInfo)
                    throw new Error(errors_1.Errors.InternalException);
                var pos = this.data.subDocumentInfo.positionImporter.currPosition;
                imageRun = new inline_picture_run_1.InlinePictureRun(pos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo));
                this.data.subDocumentInfo.characterImporter.addRun(imageRun, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
                this.data.formatImagesImporter.registerImageRun(new images_import_1.FormatImagesImporterData(new sub_document_1.SubDocumentPosition(this.data.subDocument, pos), image_loading_options_1.ImageLoadingOptions.initByActualSize(this.floatingObjectImportInfo.size.absoluteSize), imageRun));
                imageRun.info.containerProperties.copyFrom(this.floatingObjectImportInfo.constainerProperties);
                imageRun.info.nonVisualDrawingProperties.copyFrom(this.floatingObjectImportInfo.objectNonVisualProperties);
            }
            else {
                this.floatingObjectImportInfo.isFloatingObject = true;
                imageRun = this.floatingObjectImportInfo.insertFloatingObject(this.documentModel.cache.imageCache);
            }
        }
    };
    InlineObjectDestination.prototype.getCssParser = function (size) {
        var cssParser = new inline_picture_css_parser_1.InlinePictureCssParser(this.data.documentModel, this.data.readerHelper, size);
        try {
            cssParser.parseAttribute(this.style);
        }
        catch (_a) { }
        return cssParser;
    };
    InlineObjectDestination.prototype.importFloatingObject = function (cssParser) {
        this.floatingObjectImportInfo.anchorInfo.zOrder = cssParser.zOrder;
        this.floatingObjectImportInfo.size.absoluteSize = new size_1.Size(cssParser.size.width, cssParser.size.height);
        this.floatingObjectImportInfo.anchorInfo.topDistance = cssParser.topDistance;
        this.floatingObjectImportInfo.anchorInfo.bottomDistance = cssParser.bottomDistance;
        this.floatingObjectImportInfo.anchorInfo.leftDistance = cssParser.leftDistance;
        this.floatingObjectImportInfo.anchorInfo.rightDistance = cssParser.rightDistance;
        this.floatingObjectImportInfo.anchorInfo.offset = cssParser.offset;
        if (cssParser.horizontalPositionAlignment != undefined &&
            cssParser.horizontalPositionAlignment != enums_1.AnchorObjectHorizontalPositionAlignment.None)
            this.floatingObjectImportInfo.anchorInfo.horizontalPositionAlignment = cssParser.horizontalPositionAlignment;
        if (cssParser.verticalPositionAlignment != undefined && cssParser.verticalPositionAlignment != enums_1.AnchorObjectVerticalPositionAlignment.None)
            this.floatingObjectImportInfo.anchorInfo.verticalPositionAlignment = cssParser.verticalPositionAlignment;
        if (cssParser.useRelativeWidth) {
            this.floatingObjectImportInfo.size.relativeSize.width = cssParser.widthPercent;
            this.floatingObjectImportInfo.size.relativeWidthType = cssParser.fromWidth;
        }
        if (cssParser.useRelativeHeight) {
            this.floatingObjectImportInfo.size.relativeSize.height = cssParser.heightPercent;
            this.floatingObjectImportInfo.size.relativeHeightType = cssParser.fromHeight;
        }
        if (cssParser.horizontalPositionType)
            this.floatingObjectImportInfo.anchorInfo.horizontalPositionType = this.convertToHorizontalPositionType(cssParser.horizontalPositionType);
        if (cssParser.verticalPositionType)
            this.floatingObjectImportInfo.anchorInfo.verticalPositionType = this.convertToVerticalPositionType(cssParser.verticalPositionType);
        if (cssParser.textBoxVerticalAlignment && cssParser.textBoxVerticalAlignment != enums_1.DrawingTextAnchoringType.Top)
            this.floatingObjectImportInfo.textBoxProperties.verticalAlignment = cssParser.textBoxVerticalAlignment;
        if (cssParser.useWrapText)
            this.floatingObjectImportInfo.textBoxProperties.wrapText = cssParser.wrapText;
        if (cssParser.useRotation)
            this.floatingObjectImportInfo.size.rotation = cssParser.rotation;
    };
    InlineObjectDestination.prototype.convertToHorizontalPositionType = function (value) {
        var result = string_1.StringMapUtils.elementBy(translation_tables_1.TranslationTables.horizontalPositionTypeAttributeTable.importMap, function (elem) { return elem.mlValue.openXmlValue == value; });
        return result === null ? enums_1.AnchorObjectHorizontalPositionType.Column : result.modelValue;
    };
    InlineObjectDestination.prototype.convertToVerticalPositionType = function (value) {
        var result = string_1.StringMapUtils.elementBy(translation_tables_1.TranslationTables.verticalPositionTypeAttributeTable.importMap, function (elem) { return elem.mlValue.openXmlValue == value; });
        return result === null ? enums_1.AnchorObjectVerticalPositionType.Paragraph : result.modelValue;
    };
    InlineObjectDestination.handlerTable = new map_creator_1.MapCreator()
        .add('shape', function (data) { return new v_mlshape_destination_1.VMLShapeDestination(data, InlineObjectDestination.getThis(data)); })
        .add('rect', function (data) { return new v_mlshape_destination_1.VMLShapeDestination(data, InlineObjectDestination.getThis(data)); })
        .get();
    return InlineObjectDestination;
}(destination_1.ElementDestination));
exports.InlineObjectDestination = InlineObjectDestination;
