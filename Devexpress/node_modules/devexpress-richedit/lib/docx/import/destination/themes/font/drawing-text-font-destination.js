"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var drawing_text_font_1 = require("../../../../../core/model/drawing/drawing-text-font");
var constants_1 = require("@devexpress/utils/lib/constants");
var string_1 = require("@devexpress/utils/lib/utils/string");
var destination_1 = require("../../destination");
var DrawingTextFontDestination = (function (_super) {
    tslib_1.__extends(DrawingTextFontDestination, _super);
    function DrawingTextFontDestination(data, textFont) {
        var _this = _super.call(this, data) || this;
        _this.textFont = textFont;
        return _this;
    }
    DrawingTextFontDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var typeface, panose, pitchFamily, charset;
            return tslib_1.__generator(this, function (_a) {
                typeface = this.data.readerHelper.readAttribute(reader, 'typeface');
                if (!string_1.StringUtils.isNullOrEmpty(typeface))
                    this.textFont.typeface = typeface;
                panose = this.data.readerHelper.readAttribute(reader, 'panose');
                if (!string_1.StringUtils.isNullOrEmpty(panose) && panose.length != 20)
                    this.data.options.throwInvalidFile('Invalid fonts');
                if (!string_1.StringUtils.isNullOrEmpty(panose))
                    this.textFont.panose = panose;
                pitchFamily = this.data.readerHelper.getIntegerValue(reader, 'pitchFamily', drawing_text_font_1.DrawingTextFont.DefaultPitchFamily);
                if (Math.abs(pitchFamily) > constants_1.Constants.MAX_BYTE)
                    this.data.options.throwInvalidFile('Invalid fonts');
                this.textFont.pitchFamily = pitchFamily;
                charset = this.data.readerHelper.getIntegerValue(reader, 'charset', drawing_text_font_1.DrawingTextFont.DefaultCharset);
                if (Math.abs(charset) > constants_1.Constants.MAX_BYTE)
                    this.data.options.throwInvalidFile('Invalid fonts');
                this.textFont.charset = charset;
                return [2];
            });
        });
    };
    return DrawingTextFontDestination;
}(destination_1.LeafElementDestination));
exports.DrawingTextFontDestination = DrawingTextFontDestination;
