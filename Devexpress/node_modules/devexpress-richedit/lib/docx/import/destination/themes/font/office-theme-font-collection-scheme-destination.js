"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../../base-utils/map-creator");
var string_1 = require("@devexpress/utils/lib/utils/string");
var destination_1 = require("../../destination");
var drawing_text_font_destination_1 = require("./drawing-text-font-destination");
var office_theme_supplemental_font_scheme_destination_1 = require("./office-theme-supplemental-font-scheme-destination");
var OfficeThemeFontCollectionSchemeDestination = (function (_super) {
    tslib_1.__extends(OfficeThemeFontCollectionSchemeDestination, _super);
    function OfficeThemeFontCollectionSchemeDestination(data, fontPart) {
        var _this = _super.call(this, data) || this;
        _this.hasLatin = false;
        _this.hasEastAsian = false;
        _this.hasComplexScript = false;
        _this.fontPart = fontPart;
        return _this;
    }
    Object.defineProperty(OfficeThemeFontCollectionSchemeDestination.prototype, "elementHandlerTable", {
        get: function () {
            return OfficeThemeFontCollectionSchemeDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfficeThemeFontCollectionSchemeDestination.prototype, "latin", {
        get: function () {
            return this.fontPart.latin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfficeThemeFontCollectionSchemeDestination.prototype, "eastAsian", {
        get: function () {
            return this.fontPart.eastAsian;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfficeThemeFontCollectionSchemeDestination.prototype, "complexScript", {
        get: function () {
            return this.fontPart.complexScript;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OfficeThemeFontCollectionSchemeDestination.prototype, "fonts", {
        get: function () {
            return this.fontPart.supplementalFonts;
        },
        enumerable: true,
        configurable: true
    });
    OfficeThemeFontCollectionSchemeDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    OfficeThemeFontCollectionSchemeDestination.prototype.processElementClose = function (_reader) {
        this.fontPart.isValid = this.hasLatin && this.hasEastAsian && this.hasComplexScript &&
            !string_1.StringUtils.isNullOrEmpty(this.latin.typeface) && this.eastAsian.typeface != null && this.complexScript.typeface != null;
    };
    OfficeThemeFontCollectionSchemeDestination.handlerTable = new map_creator_1.MapCreator()
        .add('latin', function (data) {
        var destination = OfficeThemeFontCollectionSchemeDestination.getThis(data);
        destination.hasLatin = true;
        return new drawing_text_font_destination_1.DrawingTextFontDestination(data, destination.latin);
    })
        .add('ea', function (data) {
        var destination = OfficeThemeFontCollectionSchemeDestination.getThis(data);
        destination.hasEastAsian = true;
        return new drawing_text_font_destination_1.DrawingTextFontDestination(data, destination.eastAsian);
    })
        .add('cs', function (data) {
        var destination = OfficeThemeFontCollectionSchemeDestination.getThis(data);
        destination.hasComplexScript = true;
        return new drawing_text_font_destination_1.DrawingTextFontDestination(data, destination.complexScript);
    })
        .add('font', function (data) {
        return new office_theme_supplemental_font_scheme_destination_1.OfficeThemeSupplementalFontSchemeDestination(data, OfficeThemeFontCollectionSchemeDestination.getThis(data).fontPart);
    })
        .get();
    return OfficeThemeFontCollectionSchemeDestination;
}(destination_1.ElementDestination));
exports.OfficeThemeFontCollectionSchemeDestination = OfficeThemeFontCollectionSchemeDestination;
