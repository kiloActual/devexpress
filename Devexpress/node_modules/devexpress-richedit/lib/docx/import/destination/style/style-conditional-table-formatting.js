"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var table_base_structures_1 = require("../../../../core/model/tables/secondary-structures/table-base-structures");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var open_xml_style_conditional_table_formatting_info_1 = require("../../model/open-xml-style-conditional-table-formatting-info");
var style_destination_base_1 = require("./style-destination-base");
var StyleConditionalTableFormatting = (function (_super) {
    tslib_1.__extends(StyleConditionalTableFormatting, _super);
    function StyleConditionalTableFormatting() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.conditionType = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        return _this;
    }
    Object.defineProperty(StyleConditionalTableFormatting.prototype, "elementHandlerTable", {
        get: function () {
            return style_destination_base_1.StyleDestinationBase.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    StyleConditionalTableFormatting.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value;
            return tslib_1.__generator(this, function (_a) {
                _super.prototype.processElementOpen.call(this, reader);
                value = reader.getAttributeNS('type', this.data.constants.wordProcessingNamespaceConst);
                this.conditionType = !string_1.StringUtils.isNullOrEmpty(value) ?
                    this.data.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.conditionalTableStyleFormattingTypesTable.importMap, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable) :
                    table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
                return [2];
            });
        });
    };
    StyleConditionalTableFormatting.prototype.processElementClose = function (reader) {
        _super.prototype.processElementClose.call(this, reader);
        var result = new open_xml_style_conditional_table_formatting_info_1.OpenXmlStyleConditionalTableFormattingInfo();
        result.conditionType = this.conditionType;
        result.characterFormatting = this.characterFormatting;
        result.paragraphFormatting = this.paragraphFormatting;
        result.tableProperties = this.tableProperties;
        result.tableCellProperties = this.tableCellProperties;
        result.tableRowProperties = this.tableRowProperties;
        result.tabs = this.tabs;
        this.data.stylesImporter.tableManager.conditionalTableFormattingInfoList.push(result);
    };
    StyleConditionalTableFormatting.condtionTypesTable = new map_creator_1.MapCreator()
        .add('band1Horz', table_base_structures_1.ConditionalTableStyleFormatting.OddRowBanding)
        .add('band1Vert', table_base_structures_1.ConditionalTableStyleFormatting.OddColumnBanding)
        .add('band2Horz', table_base_structures_1.ConditionalTableStyleFormatting.EvenRowBanding)
        .add('band2Vert', table_base_structures_1.ConditionalTableStyleFormatting.EvenColumnBanding)
        .add('firstCol', table_base_structures_1.ConditionalTableStyleFormatting.FirstColumn)
        .add('firstRow', table_base_structures_1.ConditionalTableStyleFormatting.FirstRow)
        .add('lastCol', table_base_structures_1.ConditionalTableStyleFormatting.LastColumn)
        .add('lastRow', table_base_structures_1.ConditionalTableStyleFormatting.LastRow)
        .add('neCell', table_base_structures_1.ConditionalTableStyleFormatting.TopRightCell)
        .add('nwCell', table_base_structures_1.ConditionalTableStyleFormatting.TopLeftCell)
        .add('seCell', table_base_structures_1.ConditionalTableStyleFormatting.BottomRightCell)
        .add('swCell', table_base_structures_1.ConditionalTableStyleFormatting.BottomLeftCell)
        .add('wholeTable', table_base_structures_1.ConditionalTableStyleFormatting.WholeTable)
        .get();
    return StyleConditionalTableFormatting;
}(style_destination_base_1.StyleDestinationBase));
exports.StyleConditionalTableFormatting = StyleConditionalTableFormatting;
