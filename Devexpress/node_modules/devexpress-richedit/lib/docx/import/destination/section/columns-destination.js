"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var constants_1 = require("@devexpress/utils/lib/constants");
var destination_1 = require("../destination");
var column_destination_1 = require("./column-destination");
var ColumnsDestination = (function (_super) {
    tslib_1.__extends(ColumnsDestination, _super);
    function ColumnsDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ColumnsDestination.prototype, "elementHandlerTable", {
        get: function () {
            return ColumnsDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColumnsDestination.prototype, "secProps", {
        get: function () {
            return this.data.sectionImporter.properties;
        },
        enumerable: true,
        configurable: true
    });
    ColumnsDestination.onColumn = function (data) {
        var columnInfos = ColumnsDestination.getThis(data).columnInfos;
        return columnInfos ? new column_destination_1.ColumnDestination(data, columnInfos) : null;
    };
    ColumnsDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    ColumnsDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var columnCount, spacing;
            return tslib_1.__generator(this, function (_a) {
                this.secProps.equalWidthColumns = this.data.readerHelper.getWpSTOnOffValue(reader, 'equalWidth', false);
                columnCount = this.data.readerHelper.getWpSTIntegerValue(reader, 'num', constants_1.Constants.MIN_SAFE_INTEGER);
                if (columnCount > 0)
                    this.secProps.columnCount = columnCount;
                spacing = this.data.readerHelper.getWpSTIntegerValue(reader, 'space', constants_1.Constants.MIN_SAFE_INTEGER);
                if (spacing != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.secProps.space = spacing;
                if (!this.secProps.equalWidthColumns)
                    this.columnInfos = this.secProps.columnsInfo;
                return [2];
            });
        });
    };
    ColumnsDestination.prototype.processElementClose = function (_reader) {
        if (this.columnInfos) {
            if (this.columnInfos.length > 0)
                this.secProps.columnsInfo = this.columnInfos;
            else
                this.secProps.equalWidthColumns = true;
            this.columnInfos = null;
        }
    };
    ColumnsDestination.handlerTable = new map_creator_1.MapCreator()
        .add('col', ColumnsDestination.onColumn)
        .get();
    return ColumnsDestination;
}(destination_1.ElementDestination));
exports.ColumnsDestination = ColumnsDestination;
