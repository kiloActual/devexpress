"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var enums_1 = require("../../../../core/model/floating-objects/enums");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var destination_1 = require("../destination");
var DrawingAnchorPositionBaseDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorPositionBaseDestination, _super);
    function DrawingAnchorPositionBaseDestination(data, anchorDestination) {
        var _this = _super.call(this, data) || this;
        _this.offset = Number.MIN_VALUE;
        _this.percentOffset = Number.MIN_VALUE;
        _this.anchorDestination = anchorDestination;
        return _this;
    }
    Object.defineProperty(DrawingAnchorPositionBaseDestination.prototype, "elementHandlerTable", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorPositionBaseDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorPositionBaseDestination.onPositionOffset = function (data, _reader) {
        return new DrawingAnchorPositionOffsetDestination(data, DrawingAnchorPositionBaseDestination.getThis(data));
    };
    DrawingAnchorPositionBaseDestination.onPositionPercentOffset = function (data, _reader) {
        return new DrawingAnchorPositionPercentOffsetDestination(data, DrawingAnchorPositionBaseDestination.getThis(data));
    };
    DrawingAnchorPositionBaseDestination.prototype.processElementClose = function (reader) {
        if (this.anchorDestination.useSimplePosition)
            return;
        this.processElementCloseCore(reader);
    };
    DrawingAnchorPositionBaseDestination.prototype.processElementCloseCore = function (_reader) { throw new Error('not implemented'); };
    return DrawingAnchorPositionBaseDestination;
}(destination_1.ElementDestination));
exports.DrawingAnchorPositionBaseDestination = DrawingAnchorPositionBaseDestination;
var DrawingAnchorHorizontalPositionDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorHorizontalPositionDestination, _super);
    function DrawingAnchorHorizontalPositionDestination(data, anchorDestination) {
        return _super.call(this, data, anchorDestination) || this;
    }
    Object.defineProperty(DrawingAnchorHorizontalPositionDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingAnchorHorizontalPositionDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorHorizontalPositionDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorHorizontalPositionDestination.onHorizontalAlignment = function (data, _reader) {
        return new DrawingAnchorPositionHorizontalAlignmentDestination(data, DrawingAnchorHorizontalPositionDestination.getThis(data));
    };
    DrawingAnchorHorizontalPositionDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value;
            return tslib_1.__generator(this, function (_a) {
                value = reader.getAttribute('relativeFrom');
                this.relativeTo = this.data.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectHorizontalPositionTypeTable.importMap, enums_1.AnchorObjectHorizontalPositionType.Page);
                return [2];
            });
        });
    };
    DrawingAnchorHorizontalPositionDestination.prototype.processElementCloseCore = function (_reader) {
        var obj = this.anchorDestination.floatingObject;
        var point = obj.offset.clone();
        point.x = this.anchorDestination.convertEmuToDocumentUnits(this.offset);
        if (this.offset != Number.MIN_VALUE)
            obj.offset = point;
        var percentOffset = obj.percentOffset.clone();
        percentOffset.x = this.percentOffset;
        if (this.percentOffset != Number.MIN_VALUE)
            obj.percentOffset = percentOffset;
        if (this.alignment != null && obj.horizontalPositionAlignment != this.alignment)
            obj.horizontalPositionAlignment = this.alignment;
        if (obj.horizontalPositionType != this.relativeTo)
            obj.horizontalPositionType = this.relativeTo;
    };
    DrawingAnchorHorizontalPositionDestination.handlerTable = new map_creator_1.MapCreator()
        .add('posOffset', DrawingAnchorHorizontalPositionDestination.onPositionOffset)
        .add('pctPosHOffset', DrawingAnchorHorizontalPositionDestination.onPositionPercentOffset)
        .add('align', DrawingAnchorHorizontalPositionDestination.onHorizontalAlignment)
        .get();
    return DrawingAnchorHorizontalPositionDestination;
}(DrawingAnchorPositionBaseDestination));
exports.DrawingAnchorHorizontalPositionDestination = DrawingAnchorHorizontalPositionDestination;
var DrawingAnchorVerticalPositionDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorVerticalPositionDestination, _super);
    function DrawingAnchorVerticalPositionDestination(data, anchorDestination) {
        return _super.call(this, data, anchorDestination) || this;
    }
    Object.defineProperty(DrawingAnchorVerticalPositionDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingAnchorVerticalPositionDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorVerticalPositionDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorVerticalPositionDestination.onVerticalAlignment = function (data, _reader) {
        return new DrawingAnchorPositionVerticalAlignmentDestination(data, DrawingAnchorVerticalPositionDestination.getThis(data));
    };
    DrawingAnchorVerticalPositionDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value;
            return tslib_1.__generator(this, function (_a) {
                value = reader.getAttribute('relativeFrom');
                this.relativeTo = this.data.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectVerticalPositionTypeTable.importMap, enums_1.AnchorObjectVerticalPositionType.Page);
                return [2];
            });
        });
    };
    DrawingAnchorVerticalPositionDestination.prototype.processElementCloseCore = function (_reader) {
        var obj = this.anchorDestination.floatingObject;
        var point = obj.offset.clone();
        point.y = this.anchorDestination.convertEmuToDocumentUnits(this.offset);
        if (this.offset != Number.MIN_VALUE)
            obj.offset = point;
        var percentOffset = obj.percentOffset.clone();
        percentOffset.y = this.percentOffset;
        if (this.percentOffset != Number.MIN_VALUE)
            obj.percentOffset = percentOffset;
        if (this.alignment != null && obj.verticalPositionAlignment != this.alignment)
            obj.verticalPositionAlignment = this.alignment;
        if (obj.verticalPositionType != this.relativeTo)
            obj.verticalPositionType = this.relativeTo;
    };
    DrawingAnchorVerticalPositionDestination.handlerTable = new map_creator_1.MapCreator()
        .add('posOffset', DrawingAnchorVerticalPositionDestination.onPositionOffset)
        .add('pctPosVOffset', DrawingAnchorVerticalPositionDestination.onPositionPercentOffset)
        .add('align', DrawingAnchorVerticalPositionDestination.onVerticalAlignment)
        .get();
    return DrawingAnchorVerticalPositionDestination;
}(DrawingAnchorPositionBaseDestination));
exports.DrawingAnchorVerticalPositionDestination = DrawingAnchorVerticalPositionDestination;
var DrawingAnchorPositionOffsetDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorPositionOffsetDestination, _super);
    function DrawingAnchorPositionOffsetDestination(data, positionDestination) {
        var _this = _super.call(this, data) || this;
        _this.positionDestination = positionDestination;
        return _this;
    }
    DrawingAnchorPositionOffsetDestination.prototype.processText = function (reader) {
        this.positionDestination.offset = this.data.readerHelper.getIntegerValueCore(reader.value, 0);
        return true;
    };
    return DrawingAnchorPositionOffsetDestination;
}(destination_1.LeafElementDestination));
exports.DrawingAnchorPositionOffsetDestination = DrawingAnchorPositionOffsetDestination;
var DrawingAnchorPositionPercentOffsetDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorPositionPercentOffsetDestination, _super);
    function DrawingAnchorPositionPercentOffsetDestination(data, positionDestination) {
        var _this = _super.call(this, data) || this;
        _this.positionDestination = positionDestination;
        return _this;
    }
    DrawingAnchorPositionPercentOffsetDestination.prototype.processText = function (reader) {
        var text = reader.value;
        if (!string_1.StringUtils.isNullOrEmpty(text))
            this.positionDestination.percentOffset = this.data.readerHelper.getIntegerValueCore(text, 0);
        return true;
    };
    return DrawingAnchorPositionPercentOffsetDestination;
}(destination_1.LeafElementDestination));
exports.DrawingAnchorPositionPercentOffsetDestination = DrawingAnchorPositionPercentOffsetDestination;
var DrawingAnchorPositionHorizontalAlignmentDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorPositionHorizontalAlignmentDestination, _super);
    function DrawingAnchorPositionHorizontalAlignmentDestination(data, positionDestination) {
        var _this = _super.call(this, data) || this;
        _this.positionDestination = positionDestination;
        return _this;
    }
    DrawingAnchorPositionHorizontalAlignmentDestination.prototype.processText = function (reader) {
        var text = reader.value;
        if (!string_1.StringUtils.isNullOrEmpty(text))
            this.positionDestination.alignment = this.data.readerHelper.getWpEnumValueCore(text, translation_tables_1.TranslationTables.floatingObjectHorizontalPositionAlignmentTable.importMap, enums_1.AnchorObjectHorizontalPositionAlignment.Left);
        return true;
    };
    return DrawingAnchorPositionHorizontalAlignmentDestination;
}(destination_1.LeafElementDestination));
exports.DrawingAnchorPositionHorizontalAlignmentDestination = DrawingAnchorPositionHorizontalAlignmentDestination;
var DrawingAnchorPositionVerticalAlignmentDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorPositionVerticalAlignmentDestination, _super);
    function DrawingAnchorPositionVerticalAlignmentDestination(data, positionDestination) {
        var _this = _super.call(this, data) || this;
        _this.positionDestination = positionDestination;
        return _this;
    }
    DrawingAnchorPositionVerticalAlignmentDestination.prototype.processText = function (reader) {
        var text = reader.value;
        if (!string_1.StringUtils.isNullOrEmpty(text))
            this.positionDestination.alignment = this.data.readerHelper.getWpEnumValueCore(text, translation_tables_1.TranslationTables.floatingObjectVerticalPositionAlignmentTable.importMap, enums_1.AnchorObjectVerticalPositionAlignment.Top);
        return true;
    };
    return DrawingAnchorPositionVerticalAlignmentDestination;
}(destination_1.LeafElementDestination));
exports.DrawingAnchorPositionVerticalAlignmentDestination = DrawingAnchorPositionVerticalAlignmentDestination;
