"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var images_import_1 = require("../../../../core/formats/utils/images-import");
var enums_1 = require("../../../../core/model/enums");
var field_1 = require("../../../../core/model/fields/field");
var enums_2 = require("../../../../core/model/floating-objects/enums");
var insert_picture_manipulator_params_1 = require("../../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var inline_picture_run_1 = require("../../../../core/model/runs/inline-picture-run");
var text_run_1 = require("../../../../core/model/runs/text-run");
var sub_document_1 = require("../../../../core/model/sub-document");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var constants_2 = require("../../../utils/constants");
var string_value_parser_1 = require("../../../utils/string-value-parser");
var units_converter_1 = require("../../../utils/units-converter");
var floating_object_import_info_1 = require("../../model/floating-object-import-info");
var destination_1 = require("../destination");
var alt_chunk_destination_1 = require("../document/alt-chunk-destination");
var body_destination_base_1 = require("../document/body-destination-base");
var paragraph_destination_1 = require("../paragraph/paragraph-destination");
var table_destination_1 = require("../table/table/table-destination");
var drawing_anchor_position_destination_1 = require("./drawing-anchor-position-destination");
var drawing_anchor_relative_size_destination_1 = require("./drawing-anchor-relative-size-destination");
var drawing_anchor_wrap_destination_1 = require("./drawing-anchor-wrap-destination");
var non_visual_pucture_properties_destination_1 = require("./non-visual-pucture-properties-destination");
var shape_properties_destination_1 = require("./shape-properties-destination");
var DrawingDestination = (function (_super) {
    tslib_1.__extends(DrawingDestination, _super);
    function DrawingDestination(data) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = new floating_object_import_info_1.FloatingObjectImportInfo(data);
        return _this;
    }
    Object.defineProperty(DrawingDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingDestination.prototype, "imageId", {
        get: function () {
            return this.floatingObjectImportInfo.imageId;
        },
        enumerable: true,
        configurable: true
    });
    DrawingDestination.onInline = function (data, _reader) {
        DrawingDestination.getThis(data).floatingObjectImportInfo.isFloatingObject = false;
        return new DrawingInlineDestination(data, DrawingDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingDestination.onAnchor = function (data, _reader) {
        DrawingDestination.getThis(data).floatingObjectImportInfo.isFloatingObject = true;
        return new DrawingAnchorDestination(data, DrawingDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingDestination.prototype.processElementClose = function (_reader) {
        var _this = this;
        if (!this.floatingObjectImportInfo.isFloatingObject) {
            if (this.imageId === null)
                return;
            var insertPicture_1 = function () {
                var cacheInfo = _this.data.documentModel.cache.imageCache.getPictureData(_this.imageId);
                var pos = _this.data.subDocumentInfo.positionImporter.currPosition;
                var imageRun = new inline_picture_run_1.InlinePictureRun(pos, _this.data.subDocumentInfo.paragraphImporter.paragraph, _this.data.subDocumentInfo.characterImporter.charPropsBundle, insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo));
                _this.data.subDocumentInfo.characterImporter.addRun(imageRun, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
                _this.data.formatImagesImporter.registerImageRun(new images_import_1.FormatImagesImporterData(new sub_document_1.SubDocumentPosition(_this.data.subDocument, pos), image_loading_options_1.ImageLoadingOptions.initByActualSize(_this.floatingObjectImportInfo.size.absoluteSize), imageRun));
                imageRun.info.containerProperties.copyFrom(_this.floatingObjectImportInfo.constainerProperties);
                imageRun.info.nonVisualDrawingProperties.copyFrom(_this.floatingObjectImportInfo.objectNonVisualProperties);
            };
            if (this.floatingObjectImportInfo.hyperlinkInfo) {
                this.data.subDocumentInfo.fieldImporter.insertFullField(function () {
                    var codePos = _this.data.subDocumentInfo.positionImporter.currPosition;
                    var code = field_1.HyperlinkInfo.getNewCodeText(_this.floatingObjectImportInfo.hyperlinkInfo);
                    var codeRun = new text_run_1.TextRun(codePos, code.length, _this.data.subDocumentInfo.paragraphImporter.paragraph, _this.data.subDocumentInfo.characterImporter.charPropsBundle);
                    _this.data.subDocumentInfo.characterImporter.addRunAtPos(codeRun, code, codePos);
                }, function () {
                    insertPicture_1();
                }, this.floatingObjectImportInfo.hyperlinkInfo);
            }
            else {
                insertPicture_1();
            }
        }
        else {
            this.floatingObjectImportInfo.insertFloatingObject(this.documentModel.cache.imageCache);
        }
    };
    DrawingDestination.handlerTable = new map_creator_1.MapCreator()
        .add('inline', DrawingDestination.onInline)
        .add('anchor', DrawingDestination.onAnchor)
        .get();
    return DrawingDestination;
}(destination_1.ElementDestination));
exports.DrawingDestination = DrawingDestination;
var DrawingInlineDestination = (function (_super) {
    tslib_1.__extends(DrawingInlineDestination, _super);
    function DrawingInlineDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(DrawingInlineDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingInlineDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingInlineDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingInlineDestination.onExtent = function (data, _reader) {
        return new DrawingInlineExtentDestination(data, DrawingInlineDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineDestination.onGraphic = function (data, _reader) {
        return new DrawingInlineGraphicDestination(data, DrawingInlineDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineDestination.onDocumentProperties = function (data, _reader) {
        var floatingObjectImportInfo = DrawingInlineDestination.getThis(data).floatingObjectImportInfo;
        return new DrawingAnchorDocumentPropertiesDestination(data, floatingObjectImportInfo, floatingObjectImportInfo.constainerProperties);
    };
    DrawingInlineDestination.handlerTable = new map_creator_1.MapCreator()
        .add('extent', DrawingInlineDestination.onExtent)
        .add('graphic', DrawingInlineDestination.onGraphic)
        .add('docPr', DrawingInlineDestination.onDocumentProperties)
        .get();
    return DrawingInlineDestination;
}(destination_1.ElementDestination));
exports.DrawingInlineDestination = DrawingInlineDestination;
var DrawingAnchorDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorDestination, _super);
    function DrawingAnchorDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(DrawingAnchorDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingAnchorDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingAnchorDestination.prototype, "floatingObject", {
        get: function () {
            return this.floatingObjectImportInfo.anchorInfo;
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorDestination.onExtent = function (data, _reader) {
        return new DrawingInlineExtentDestination(data, DrawingAnchorDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingAnchorDestination.onGraphic = function (data, _reader) {
        return new DrawingInlineGraphicDestination(data, DrawingAnchorDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingAnchorDestination.onSimplePosition = function (data, _reader) {
        return new DrawingAnchorSimplePositionDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onAnchorHorizontalRelativeSize = function (data, _reader) {
        return new drawing_anchor_relative_size_destination_1.DrawingAnchorHorizontalRelativeSizeDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onAnchorVerticalRelativeSize = function (data, _reader) {
        return new drawing_anchor_relative_size_destination_1.DrawingAnchorVerticalRelativeSizeDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onHorizontalPosition = function (data, _reader) {
        return new drawing_anchor_position_destination_1.DrawingAnchorHorizontalPositionDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onVerticalPosition = function (data, _reader) {
        return new drawing_anchor_position_destination_1.DrawingAnchorVerticalPositionDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onWrapNone = function (data, _reader) {
        return new drawing_anchor_wrap_destination_1.DrawingAnchorWrapNoneDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onWrapSquare = function (data, _reader) {
        return new drawing_anchor_wrap_destination_1.DrawingAnchorWrapSquareDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onWrapThrough = function (data, _reader) {
        return new drawing_anchor_wrap_destination_1.DrawingAnchorWrapThroughDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onWrapTight = function (data, _reader) {
        return new drawing_anchor_wrap_destination_1.DrawingAnchorWrapTightDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onWrapTopAndBottom = function (data, _reader) {
        return new drawing_anchor_wrap_destination_1.DrawingAnchorWrapTopAndBottomDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onCNvGraphicFramePr = function (data, _reader) {
        return new DrawingAnchorGraphicFramePropertyDestination(data, DrawingAnchorDestination.getThis(data));
    };
    DrawingAnchorDestination.onAnchorDocumentProperties = function (data, _reader) {
        var floatingObjectImportInfo = DrawingAnchorDestination.getThis(data).floatingObjectImportInfo;
        return new DrawingAnchorDocumentPropertiesDestination(data, floatingObjectImportInfo, floatingObjectImportInfo.constainerProperties);
    };
    DrawingAnchorDestination.prototype.isChoiceNamespaceSupported = function (requeriesNamespaceUri) {
        if (comparers_1.Comparers.stringIgnoreCase(requeriesNamespaceUri, this.data.constants.namespaces[constants_2.DocxNsType.Wp14].namespace) == 0)
            return true;
        return _super.prototype.isChoiceNamespaceSupported.call(this, requeriesNamespaceUri);
    };
    DrawingAnchorDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var obj, value;
            return tslib_1.__generator(this, function (_a) {
                obj = this.floatingObject;
                value = this.data.readerHelper.getIntegerValue(reader, 'distT', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    obj.topDistance = this.convertEmuToDocumentUnits(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'distB', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    obj.bottomDistance = this.convertEmuToDocumentUnits(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'distL', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    obj.leftDistance = this.convertEmuToDocumentUnits(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'distR', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    obj.rightDistance = this.convertEmuToDocumentUnits(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'relativeHeight', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    obj.zOrder = Math.max(value, 0);
                this.useSimplePosition = this.data.readerHelper.getOnOffValue(reader, 'simplePos', false);
                if (this.data.readerHelper.getOnOffValue(reader, 'allowOverlap', false))
                    obj.allowOverlap = true;
                if (this.data.readerHelper.getOnOffValue(reader, 'behindDoc', false))
                    obj.isBehindDoc = true;
                if (this.data.readerHelper.getOnOffValue(reader, 'hidden', false))
                    obj.hidden = true;
                if (this.data.readerHelper.getOnOffValue(reader, 'layoutInCell', false))
                    obj.layoutTableCell = true;
                if (this.data.readerHelper.getOnOffValue(reader, 'locked', false))
                    obj.locked = true;
                return [2];
            });
        });
    };
    DrawingAnchorDestination.prototype.convertEmuToDocumentUnits = function (value) {
        return Math.round(unit_converter_1.UnitConverter.centimetersToTwipsF(value / 36000.0 / 10));
    };
    DrawingAnchorDestination.handlerTable = new map_creator_1.MapCreator()
        .add('extent', DrawingAnchorDestination.onExtent)
        .add('graphic', DrawingAnchorDestination.onGraphic)
        .add('simplePos', DrawingAnchorDestination.onSimplePosition)
        .add('positionH', DrawingAnchorDestination.onHorizontalPosition)
        .add('positionV', DrawingAnchorDestination.onVerticalPosition)
        .add('wrapNone', DrawingAnchorDestination.onWrapNone)
        .add('wrapSquare', DrawingAnchorDestination.onWrapSquare)
        .add('wrapThrough', DrawingAnchorDestination.onWrapThrough)
        .add('wrapTight', DrawingAnchorDestination.onWrapTight)
        .add('wrapTopAndBottom', DrawingAnchorDestination.onWrapTopAndBottom)
        .add('cNvGraphicFramePr', DrawingAnchorDestination.onCNvGraphicFramePr)
        .add('docPr', DrawingAnchorDestination.onAnchorDocumentProperties)
        .add('sizeRelH', DrawingAnchorDestination.onAnchorHorizontalRelativeSize)
        .add('sizeRelV', DrawingAnchorDestination.onAnchorVerticalRelativeSize)
        .get();
    return DrawingAnchorDestination;
}(destination_1.ElementDestination));
exports.DrawingAnchorDestination = DrawingAnchorDestination;
var DrawingAnchorGraphicFramePropertyDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorGraphicFramePropertyDestination, _super);
    function DrawingAnchorGraphicFramePropertyDestination(data, anchorDestination) {
        var _this = _super.call(this, data) || this;
        _this.size = anchorDestination.floatingObjectImportInfo.size;
        return _this;
    }
    Object.defineProperty(DrawingAnchorGraphicFramePropertyDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingAnchorGraphicFramePropertyDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorGraphicFramePropertyDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorGraphicFramePropertyDestination.onGraphicFrameLocks = function (data, _reader) {
        return new DrawingGraphicFrameLocksDestination(data, DrawingAnchorGraphicFramePropertyDestination.getThis(data));
    };
    DrawingAnchorGraphicFramePropertyDestination.handlerTable = new map_creator_1.MapCreator()
        .add('graphicFrameLocks', DrawingAnchorGraphicFramePropertyDestination.onGraphicFrameLocks)
        .get();
    return DrawingAnchorGraphicFramePropertyDestination;
}(destination_1.ElementDestination));
exports.DrawingAnchorGraphicFramePropertyDestination = DrawingAnchorGraphicFramePropertyDestination;
var DrawingGraphicFrameLocksDestination = (function (_super) {
    tslib_1.__extends(DrawingGraphicFrameLocksDestination, _super);
    function DrawingGraphicFrameLocksDestination(data, anchorDestination) {
        var _this = _super.call(this, data) || this;
        _this.size = anchorDestination.size;
        return _this;
    }
    DrawingGraphicFrameLocksDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var obj, value;
            return tslib_1.__generator(this, function (_a) {
                obj = this.size;
                value = reader.getAttribute('noChangeAspect');
                if (!string_1.StringUtils.isNullOrEmpty(value))
                    obj.lockAspectRatio = this.data.readerHelper.getOnOffValueBool(value, false);
                return [2];
            });
        });
    };
    return DrawingGraphicFrameLocksDestination;
}(destination_1.LeafElementDestination));
exports.DrawingGraphicFrameLocksDestination = DrawingGraphicFrameLocksDestination;
var DrawingInlineExtentDestination = (function (_super) {
    tslib_1.__extends(DrawingInlineExtentDestination, _super);
    function DrawingInlineExtentDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    DrawingInlineExtentDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cx, cy;
            return tslib_1.__generator(this, function (_a) {
                cx = reader.getAttribute('cx');
                cy = reader.getAttribute('cy');
                this.floatingObjectImportInfo.size.setUseAbsoluteHeight(true);
                this.floatingObjectImportInfo.size.setUseAbsoluteWidth(true);
                this.floatingObjectImportInfo.size.absoluteSize.width =
                    Math.round(unit_converter_1.UnitConverter.centimetersToTwips(this.data.readerHelper.getIntegerValueCore(cx, 0) / 36000.0 / 10));
                this.floatingObjectImportInfo.size.absoluteSize.height =
                    Math.round(unit_converter_1.UnitConverter.centimetersToTwips(this.data.readerHelper.getIntegerValueCore(cy, 0) / 36000.0 / 10));
                return [2];
            });
        });
    };
    return DrawingInlineExtentDestination;
}(destination_1.LeafElementDestination));
exports.DrawingInlineExtentDestination = DrawingInlineExtentDestination;
var DrawingAnchorDocumentPropertiesDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorDocumentPropertiesDestination, _super);
    function DrawingAnchorDocumentPropertiesDestination(data, floatingObjectImportInfo, nonVisualProperties) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        _this.nonVisualProperties = nonVisualProperties;
        return _this;
    }
    Object.defineProperty(DrawingAnchorDocumentPropertiesDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingAnchorDocumentPropertiesDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingAnchorDocumentPropertiesDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingAnchorDocumentPropertiesDestination.onHyperlinkClick = function (data, _reader) {
        var hyperlinkInfo = new field_1.HyperlinkInfo('', '', '', false);
        DrawingAnchorDocumentPropertiesDestination.getThis(data).floatingObjectImportInfo.hyperlinkInfo = hyperlinkInfo;
        return new HyperlinkClickDestination(data, hyperlinkInfo);
    };
    DrawingAnchorDocumentPropertiesDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var name, id, description, title;
            return tslib_1.__generator(this, function (_a) {
                name = reader.getAttribute('name');
                if (!string_1.StringUtils.isNullOrEmpty(name))
                    this.nonVisualProperties.name = name;
                id = this.data.readerHelper.getIntegerValue(reader, 'id', Number.MIN_VALUE);
                if (id != Number.MIN_VALUE)
                    this.nonVisualProperties.id = id;
                description = reader.getAttribute('descr');
                if (!string_1.StringUtils.isNullOrEmpty(description))
                    this.nonVisualProperties.description = description;
                title = reader.getAttribute('title');
                if (!string_1.StringUtils.isNullOrEmpty(title))
                    this.nonVisualProperties.title = title;
                return [2];
            });
        });
    };
    DrawingAnchorDocumentPropertiesDestination.handlerTable = new map_creator_1.MapCreator()
        .add('hlinkClick', DrawingAnchorDocumentPropertiesDestination.onHyperlinkClick)
        .get();
    return DrawingAnchorDocumentPropertiesDestination;
}(destination_1.ElementDestination));
exports.DrawingAnchorDocumentPropertiesDestination = DrawingAnchorDocumentPropertiesDestination;
var HyperlinkClickDestination = (function (_super) {
    tslib_1.__extends(HyperlinkClickDestination, _super);
    function HyperlinkClickDestination(data, hyperlinkInfo) {
        var _this = _super.call(this, data) || this;
        _this.hyperlinkInfo = hyperlinkInfo;
        return _this;
    }
    HyperlinkClickDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tooltip, relId, relation, target, charIndex;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tooltip = reader.getAttribute('tooltip');
                        if (!string_1.StringUtils.isNullOrEmpty(tooltip))
                            this.hyperlinkInfo.tip = tooltip;
                        return [4, reader.getAttributeNS('id', this.data.constants.relsNamespaceConst)];
                    case 1:
                        relId = _a.sent();
                        if (!string_1.StringUtils.isNullOrEmpty(relId)) {
                            relation = this.data.relationsStack.last.lookupRelationById(relId);
                            if (relation != null) {
                                target = relation.target;
                                if (relation.targetMode == 'External')
                                    this.hyperlinkInfo.uri = target;
                                else {
                                    charIndex = target.indexOf('#');
                                    this.hyperlinkInfo.anchor = target.substring(charIndex);
                                }
                            }
                        }
                        return [2];
                }
            });
        });
    };
    return HyperlinkClickDestination;
}(destination_1.LeafElementDestination));
exports.HyperlinkClickDestination = HyperlinkClickDestination;
var DrawingInlineGraphicDestination = (function (_super) {
    tslib_1.__extends(DrawingInlineGraphicDestination, _super);
    function DrawingInlineGraphicDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(DrawingInlineGraphicDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingInlineGraphicDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingInlineGraphicDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingInlineGraphicDestination.onGraphicData = function (data, _reader) {
        return new DrawingInlineGraphicDataDestination(data, DrawingInlineGraphicDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDestination.handlerTable = new map_creator_1.MapCreator()
        .add('graphicData', DrawingInlineGraphicDestination.onGraphicData)
        .get();
    return DrawingInlineGraphicDestination;
}(destination_1.ElementDestination));
exports.DrawingInlineGraphicDestination = DrawingInlineGraphicDestination;
var DrawingInlineGraphicDataDestination = (function (_super) {
    tslib_1.__extends(DrawingInlineGraphicDataDestination, _super);
    function DrawingInlineGraphicDataDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(DrawingInlineGraphicDataDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingInlineGraphicDataDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingInlineGraphicDataDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingInlineGraphicDataDestination.onPicture = function (data, _reader) {
        return new DrawingInlineGraphicDataPictureDestination(data, DrawingInlineGraphicDataDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDataDestination.onWordProcessingShape = function (data, _reader) {
        return new WordProcessingShapeDestination(data, DrawingInlineGraphicDataDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDataDestination.onDrawingGroupShape = function (data, _reader) {
        return new DrawingGroupShapeDestination(data, DrawingInlineGraphicDataDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDataDestination.handlerTable = new map_creator_1.MapCreator()
        .add('pic', DrawingInlineGraphicDataDestination.onPicture)
        .add('wsp', DrawingInlineGraphicDataDestination.onWordProcessingShape)
        .add('wgp', DrawingInlineGraphicDataDestination.onDrawingGroupShape)
        .get();
    return DrawingInlineGraphicDataDestination;
}(destination_1.ElementDestination));
exports.DrawingInlineGraphicDataDestination = DrawingInlineGraphicDataDestination;
var DrawingGroupShapeDestination = (function (_super) {
    tslib_1.__extends(DrawingGroupShapeDestination, _super);
    function DrawingGroupShapeDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DrawingGroupShapeDestination;
}(DrawingInlineGraphicDataDestination));
exports.DrawingGroupShapeDestination = DrawingGroupShapeDestination;
var DrawingInlineGraphicDataPictureDestination = (function (_super) {
    tslib_1.__extends(DrawingInlineGraphicDataPictureDestination, _super);
    function DrawingInlineGraphicDataPictureDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(DrawingInlineGraphicDataPictureDestination.prototype, "elementHandlerTable", {
        get: function () {
            return DrawingInlineGraphicDataPictureDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    DrawingInlineGraphicDataPictureDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    DrawingInlineGraphicDataPictureDestination.onPictureNonVisualProperties = function (data, _reader) {
        return new non_visual_pucture_properties_destination_1.NonVisualPicturePropertiesDestination(data, DrawingInlineGraphicDataPictureDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDataPictureDestination.onBlipFill = function (data, _reader) {
        return new PictureBlipFillDestination(data, DrawingInlineGraphicDataPictureDestination.getThis(data).floatingObjectImportInfo);
    };
    DrawingInlineGraphicDataPictureDestination.onShapeProperties = function (data, _reader) {
        var dest = DrawingInlineGraphicDataPictureDestination.getThis(data);
        return new shape_properties_destination_1.WordProcessingShapePropertiesDestination(data, dest.floatingObjectImportInfo.shape, dest.floatingObjectImportInfo.size);
    };
    DrawingInlineGraphicDataPictureDestination.onAlternateContent = function (data, _reader) {
        return DrawingInlineGraphicDataPictureDestination.getThis(data);
    };
    DrawingInlineGraphicDataPictureDestination.onChoice = function (data, _reader) {
        return DrawingInlineGraphicDataPictureDestination.getThis(data);
    };
    DrawingInlineGraphicDataPictureDestination.onFallback = function (data, _reader) {
        return DrawingInlineGraphicDataPictureDestination.getThis(data);
    };
    DrawingInlineGraphicDataPictureDestination.handlerTable = new map_creator_1.MapCreator()
        .add('nvPicPr', DrawingInlineGraphicDataPictureDestination.onPictureNonVisualProperties)
        .add('blipFill', DrawingInlineGraphicDataPictureDestination.onBlipFill)
        .add('AlternateContent', DrawingInlineGraphicDataPictureDestination.onAlternateContent)
        .add('Choice', DrawingInlineGraphicDataPictureDestination.onChoice)
        .add('Fallback', DrawingInlineGraphicDataPictureDestination.onFallback)
        .add('spPr', DrawingInlineGraphicDataPictureDestination.onShapeProperties)
        .get();
    return DrawingInlineGraphicDataPictureDestination;
}(destination_1.ElementDestination));
exports.DrawingInlineGraphicDataPictureDestination = DrawingInlineGraphicDataPictureDestination;
var PictureBlipFillDestination = (function (_super) {
    tslib_1.__extends(PictureBlipFillDestination, _super);
    function PictureBlipFillDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(PictureBlipFillDestination.prototype, "elementHandlerTable", {
        get: function () {
            return PictureBlipFillDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    PictureBlipFillDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    PictureBlipFillDestination.onBlip = function (data, _reader) {
        return new PictureBlipDestination(data, PictureBlipFillDestination.getThis(data).floatingObjectImportInfo);
    };
    PictureBlipFillDestination.onSourceRect = function (data, _reader) {
        return new SourceRectDestination(data, PictureBlipFillDestination.getThis(data).floatingObjectImportInfo);
    };
    PictureBlipFillDestination.handlerTable = new map_creator_1.MapCreator()
        .add('blip', PictureBlipFillDestination.onBlip)
        .add('srcRect', PictureBlipFillDestination.onSourceRect)
        .get();
    return PictureBlipFillDestination;
}(destination_1.ElementDestination));
exports.PictureBlipFillDestination = PictureBlipFillDestination;
var PictureBlipDestination = (function (_super) {
    tslib_1.__extends(PictureBlipDestination, _super);
    function PictureBlipDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    PictureBlipDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, imageId_1, imageId;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = reader.getAttributeNS('embed', this.data.constants.relsNamespaceConst);
                        if (!!string_1.StringUtils.isNullOrEmpty(id)) return [3, 4];
                        return [4, this.data.relationsStack.last.lookupImageByRelationId(id, 'word')];
                    case 1:
                        imageId_1 = _a.sent();
                        if (!(imageId_1 == null)) return [3, 3];
                        return [4, this.data.relationsStack.last.lookupImageByRelationId(id, '')];
                    case 2:
                        imageId_1 = _a.sent();
                        _a.label = 3;
                    case 3:
                        if (imageId_1 != null)
                            this.floatingObjectImportInfo.imageId = imageId_1;
                        return [2];
                    case 4:
                        id = reader.getAttributeNS("link", this.data.constants.relsNamespaceConst);
                        if (string_1.StringUtils.isNullOrEmpty(id))
                            return [2];
                        return [4, this.data.relationsStack.last.lookupExternalImageByRelationId(id)];
                    case 5:
                        imageId = _a.sent();
                        if (imageId)
                            this.floatingObjectImportInfo.imageId = imageId;
                        return [2];
                }
            });
        });
    };
    return PictureBlipDestination;
}(destination_1.LeafElementDestination));
exports.PictureBlipDestination = PictureBlipDestination;
var SourceRectDestination = (function (_super) {
    tslib_1.__extends(SourceRectDestination, _super);
    function SourceRectDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    SourceRectDestination.prototype.processElementOpen = function (_reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2];
            });
        });
    };
    SourceRectDestination.prototype.getThousandthOfPercentValue = function (reader, attributeName, defaultValue) {
        var value = reader.getAttribute(attributeName);
        if (string_1.StringUtils.isNullOrEmpty(value))
            return defaultValue;
        if (value[value.length - 1] == '%') {
            return this.getPercentValue(value, defaultValue);
        }
        else {
            return this.data.readerHelper.getIntegerValueCore(value, defaultValue);
        }
    };
    SourceRectDestination.prototype.getPercentValue = function (value, defaultValue) {
        value = value.substr(0, value.length - 1);
        var percent;
        try {
            percent = parseFloat(value);
        }
        catch (_a) { }
        if (percent)
            return Math.round(percent * 1000);
        else
            return defaultValue;
    };
    return SourceRectDestination;
}(destination_1.LeafElementDestination));
exports.SourceRectDestination = SourceRectDestination;
var DrawingAnchorSimplePositionDestination = (function (_super) {
    tslib_1.__extends(DrawingAnchorSimplePositionDestination, _super);
    function DrawingAnchorSimplePositionDestination(data, anchorDestination) {
        var _this = _super.call(this, data) || this;
        _this.anchorDestination = anchorDestination;
        return _this;
    }
    DrawingAnchorSimplePositionDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var x, y;
            return tslib_1.__generator(this, function (_a) {
                if (!this.anchorDestination.useSimplePosition)
                    return [2];
                x = this.data.readerHelper.getIntegerValue(reader, 'x', Number.MIN_VALUE);
                y = this.data.readerHelper.getIntegerValue(reader, 'y', Number.MIN_VALUE);
                if (x != Number.MIN_VALUE && y != Number.MIN_VALUE) {
                    x = this.anchorDestination.convertEmuToDocumentUnits(x);
                    y = this.anchorDestination.convertEmuToDocumentUnits(y);
                    this.anchorDestination.floatingObject.offset = new point_1.Point(x, y);
                    this.anchorDestination.floatingObject.horizontalPositionType = enums_2.AnchorObjectHorizontalPositionType.Page;
                    this.anchorDestination.floatingObject.verticalPositionType = enums_2.AnchorObjectVerticalPositionType.Page;
                    this.anchorDestination.floatingObject.horizontalPositionAlignment = enums_2.AnchorObjectHorizontalPositionAlignment.Left;
                    this.anchorDestination.floatingObject.verticalPositionAlignment = enums_2.AnchorObjectVerticalPositionAlignment.Top;
                }
                return [2];
            });
        });
    };
    return DrawingAnchorSimplePositionDestination;
}(destination_1.LeafElementDestination));
exports.DrawingAnchorSimplePositionDestination = DrawingAnchorSimplePositionDestination;
var WordProcessingShapeDestination = (function (_super) {
    tslib_1.__extends(WordProcessingShapeDestination, _super);
    function WordProcessingShapeDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        return _this;
    }
    Object.defineProperty(WordProcessingShapeDestination.prototype, "elementHandlerTable", {
        get: function () {
            return WordProcessingShapeDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    WordProcessingShapeDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    WordProcessingShapeDestination.onTextBox = function (data, _reader) {
        return new TextBoxDestination(data, WordProcessingShapeDestination.getThis(data).floatingObjectImportInfo);
    };
    WordProcessingShapeDestination.onTextBoxProperties = function (data, _reader) {
        return new TextBoxPropertiesDestination(data, WordProcessingShapeDestination.getThis(data).floatingObjectImportInfo.textBoxProperties);
    };
    WordProcessingShapeDestination.onNonVisualDrawingProperties = function (data, _reader) {
        var floatingObjectImportInfo = WordProcessingShapeDestination.getThis(data).floatingObjectImportInfo;
        return new DrawingAnchorDocumentPropertiesDestination(data, floatingObjectImportInfo, floatingObjectImportInfo.constainerProperties);
    };
    WordProcessingShapeDestination.onShapeProperties = function (data, _reader) {
        var dest = WordProcessingShapeDestination.getThis(data);
        return new shape_properties_destination_1.WordProcessingShapePropertiesDestination(data, dest.floatingObjectImportInfo.shape, dest.floatingObjectImportInfo.size);
    };
    WordProcessingShapeDestination.handlerTable = new map_creator_1.MapCreator()
        .add('txbx', WordProcessingShapeDestination.onTextBox)
        .add("cNvPr", WordProcessingShapeDestination.onNonVisualDrawingProperties)
        .add('bodyPr', WordProcessingShapeDestination.onTextBoxProperties)
        .add('spPr', WordProcessingShapeDestination.onShapeProperties)
        .get();
    return WordProcessingShapeDestination;
}(destination_1.ElementDestination));
exports.WordProcessingShapeDestination = WordProcessingShapeDestination;
var TextBoxDestination = (function (_super) {
    tslib_1.__extends(TextBoxDestination, _super);
    function TextBoxDestination(data, floatingObjectImportInfo) {
        var _this = _super.call(this, data) || this;
        _this.floatingObjectImportInfo = floatingObjectImportInfo;
        _this.floatingObjectImportInfo.shapeType = floating_object_import_info_1.ShapeType.TextBox;
        _this.data.pushCurrentSubDocument(_this.documentModel.createSubDocument(enums_1.SubDocumentInfoType.TextBox, _this.data.subDocument.id, true));
        return _this;
    }
    Object.defineProperty(TextBoxDestination.prototype, "elementHandlerTable", {
        get: function () {
            return TextBoxDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    TextBoxDestination.onTextBoxContent = function (data, _reader) {
        return new TextBoxContentDestination(data);
    };
    TextBoxDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var style, inset, textBoxProperties, margins;
            return tslib_1.__generator(this, function (_a) {
                style = reader.getAttribute('style');
                inset = reader.getAttribute('inset');
                textBoxProperties = this.floatingObjectImportInfo.textBoxProperties;
                if (!string_1.StringUtils.isNullOrEmpty(style))
                    textBoxProperties.resizeShapeToFitText = this.getResizeShapeToFitText(style);
                if (string_1.StringUtils.isNullOrEmpty(inset))
                    return [2];
                margins = this.getMargins(inset);
                textBoxProperties.leftMargin = this.getValidMarginValue(margins[0], 144);
                textBoxProperties.rightMargin = this.getValidMarginValue(margins[1], 144);
                textBoxProperties.topMargin = this.getValidMarginValue(margins[2], 72);
                textBoxProperties.bottomMargin = this.getValidMarginValue(margins[3], 72);
                return [2];
            });
        });
    };
    TextBoxDestination.prototype.processElementClose = function (_reader) {
        this.floatingObjectImportInfo.subDocId = this.data.subDocument.id;
        this.data.popCurrentSubDocument();
    };
    TextBoxDestination.prototype.getMargins = function (strMargins) {
        var result = new Array(4);
        var margins = strMargins.split(',');
        for (var i = 0; i < margins.length; i++)
            result[i] = this.getFloatValue(margins[i]);
        if (margins.length < 4)
            for (var i = margins.length; i < result.length; i++)
                result[i] = 72 + ((i < 2) ? 72 : 0);
        return result;
    };
    TextBoxDestination.prototype.getResizeShapeToFitText = function (style) {
        return style.substring(style.length - 1) == 't';
    };
    TextBoxDestination.prototype.getValidMarginValue = function (value, defaultValue) {
        if (value < 0)
            return defaultValue;
        else
            return value;
    };
    TextBoxDestination.prototype.getFloatValue = function (numb) {
        var valueUnit = string_value_parser_1.StringValueParser.parse(numb);
        if (valueUnit.isEmpty || valueUnit.value == undefined)
            return Number.MIN_VALUE;
        return units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueUnit);
    };
    TextBoxDestination.handlerTable = new map_creator_1.MapCreator()
        .add('txbxContent', TextBoxDestination.onTextBoxContent)
        .get();
    return TextBoxDestination;
}(destination_1.ElementDestination));
exports.TextBoxDestination = TextBoxDestination;
var TextBoxContentDestination = (function (_super) {
    tslib_1.__extends(TextBoxContentDestination, _super);
    function TextBoxContentDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TextBoxContentDestination.prototype, "elementHandlerTable", {
        get: function () {
            return TextBoxContentDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    TextBoxContentDestination.handlerTable = new map_creator_1.MapCreator()
        .add('p', function (data) { return new paragraph_destination_1.ParagraphDestination(data); })
        .add('tbl', function (data) { return new table_destination_1.TableDestination(data); })
        .add('bookmarkStart', body_destination_base_1.BodyDestinationBase.onBookmarkStart)
        .add('bookmarkEnd', body_destination_base_1.BodyDestinationBase.onBookmarkEnd)
        .add('permStart', body_destination_base_1.BodyDestinationBase.onRangePermissionStart)
        .add('permEnd', body_destination_base_1.BodyDestinationBase.onRangePermissionEnd)
        .add('sdt', body_destination_base_1.BodyDestinationBase.onStructuredDocument)
        .add('altChunk', function (data) { return new alt_chunk_destination_1.AltChunkDestination(data); })
        .add('customXml', body_destination_base_1.BodyDestinationBase.onCustomXml)
        .add('del', body_destination_base_1.BodyDestinationBase.onDeleted)
        .add('ins', body_destination_base_1.BodyDestinationBase.onInserted)
        .get();
    return TextBoxContentDestination;
}(body_destination_base_1.BodyDestinationBase));
exports.TextBoxContentDestination = TextBoxContentDestination;
var TextBoxPropertiesDestination = (function (_super) {
    tslib_1.__extends(TextBoxPropertiesDestination, _super);
    function TextBoxPropertiesDestination(data, textBoxProperties) {
        var _this = _super.call(this, data) || this;
        _this.textBoxProperties = textBoxProperties;
        return _this;
    }
    Object.defineProperty(TextBoxPropertiesDestination.prototype, "elementHandlerTable", {
        get: function () {
            return TextBoxPropertiesDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    TextBoxPropertiesDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    TextBoxPropertiesDestination.onDisableAutoFit = function (data, _reader) {
        TextBoxPropertiesDestination.getThis(data).textBoxProperties.resizeShapeToFitText = false;
        return null;
    };
    TextBoxPropertiesDestination.onEnableAutoFit = function (data, _reader) {
        TextBoxPropertiesDestination.getThis(data).textBoxProperties.resizeShapeToFitText = true;
        return null;
    };
    TextBoxPropertiesDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value, wrapType, upright, invalidValue, verticalAlignment;
            return tslib_1.__generator(this, function (_a) {
                value = this.data.readerHelper.getIntegerValue(reader, 'lIns', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    this.textBoxProperties.leftMargin = unit_converter_1.UnitConverter.emuToTwips(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'rIns', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    this.textBoxProperties.rightMargin = unit_converter_1.UnitConverter.emuToTwips(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'tIns', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    this.textBoxProperties.topMargin = unit_converter_1.UnitConverter.emuToTwips(value);
                value = this.data.readerHelper.getIntegerValue(reader, 'bIns', Number.MIN_VALUE);
                if (value != Number.MIN_VALUE)
                    this.textBoxProperties.bottomMargin = unit_converter_1.UnitConverter.emuToTwips(value);
                wrapType = reader.getAttribute('wrap');
                if (wrapType == 'square')
                    this.textBoxProperties.wrapText = true;
                else if (wrapType == 'none')
                    this.textBoxProperties.wrapText = false;
                upright = reader.getAttribute('upright');
                if (!string_1.StringUtils.isNullOrEmpty(upright))
                    this.textBoxProperties.upright = this.data.readerHelper.getOnOffValueBool(upright, this.textBoxProperties.upright);
                invalidValue = (-1);
                verticalAlignment = this.data.readerHelper.getWpEnumValue(reader, 'anchor', translation_tables_1.TranslationTables.drawingTextAnchoringType.importMap, invalidValue);
                if (verticalAlignment != invalidValue)
                    this.textBoxProperties.verticalAlignment = verticalAlignment;
                return [2];
            });
        });
    };
    TextBoxPropertiesDestination.handlerTable = new map_creator_1.MapCreator()
        .add('noAutofit', TextBoxPropertiesDestination.onDisableAutoFit)
        .add('spAutoFit', TextBoxPropertiesDestination.onEnableAutoFit)
        .get();
    return TextBoxPropertiesDestination;
}(destination_1.ElementDestination));
exports.TextBoxPropertiesDestination = TextBoxPropertiesDestination;
var GraphicFrameDestination = (function (_super) {
    tslib_1.__extends(GraphicFrameDestination, _super);
    function GraphicFrameDestination(data, size) {
        var _this = _super.call(this, data) || this;
        _this.size = size;
        return _this;
    }
    GraphicFrameDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var value;
            return tslib_1.__generator(this, function (_a) {
                value = this.data.readerHelper.getIntegerValue(reader, 'rot', constants_1.Constants.MIN_SAFE_INTEGER);
                if (value != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.size.rotation = value;
                return [2];
            });
        });
    };
    return GraphicFrameDestination;
}(destination_1.LeafElementDestination));
exports.GraphicFrameDestination = GraphicFrameDestination;
