"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("@devexpress/utils/lib/constants");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var table_border_element_destination_base_1 = require("./table-border-element-destination-base");
var TableBorderElementDestination = (function (_super) {
    tslib_1.__extends(TableBorderElementDestination, _super);
    function TableBorderElementDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBorderElementDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var borderLineStyle, color, frame, shadow, space, size;
            return tslib_1.__generator(this, function (_a) {
                borderLineStyle = this.data.readerHelper.getWpEnumOnOffNullValue(reader, 'val', translation_tables_1.TranslationTables.borderLineStyleTable.importMap);
                if (borderLineStyle != null)
                    this.setBorderLineStyle(borderLineStyle);
                color = this.data.readerHelper.getWpSTColorOrNullValue(reader, 'color');
                if (color != null) {
                    this.border.color = this.getColor(reader);
                    this.properties.setValue(this.desc, this.border);
                }
                frame = this.data.readerHelper.getWpSTOnOffNullValue(reader, 'frame');
                if (frame != null) {
                    this.border.frame = frame;
                    this.properties.setValue(this.desc, this.border);
                }
                shadow = this.data.readerHelper.getWpSTOnOffNullValue(reader, 'shadow');
                if (shadow != null) {
                    this.border.shadow = shadow;
                    this.properties.setValue(this.desc, this.border);
                }
                space = this.data.readerHelper.getWpSTIntegerValue(reader, 'space', constants_1.Constants.MIN_SAFE_INTEGER);
                if (space != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.setBorderOffset(space);
                size = this.data.readerHelper.getWpSTIntegerValue(reader, 'sz', constants_1.Constants.MIN_SAFE_INTEGER);
                if (size != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.setBorderWidth(size);
                return [2];
            });
        });
    };
    return TableBorderElementDestination;
}(table_border_element_destination_base_1.TableBorderElementDestinationBase));
exports.TableBorderElementDestination = TableBorderElementDestination;
