"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../core/model/borders/enums");
var dx_color_1 = require("../../../../core/model/color/dx-color");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var table_border_element_destination_base_1 = require("./table-border-element-destination-base");
var TableCellBorderElementDestination = (function (_super) {
    tslib_1.__extends(TableCellBorderElementDestination, _super);
    function TableCellBorderElementDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableCellBorderElementDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var borderLineStyle, color, colorModel, frame, shadow, offset, width, isDefaultValue;
            return tslib_1.__generator(this, function (_a) {
                borderLineStyle = this.data.readerHelper.getWpEnumValue(reader, 'val', translation_tables_1.TranslationTables.borderLineStyleTable.importMap, enums_1.BorderLineStyle.None);
                color = this.data.readerHelper.getWpSTColorValue(reader, 'color');
                colorModel = this.getColor(reader);
                frame = this.data.readerHelper.getWpSTOnOffValue(reader, 'frame', false);
                shadow = this.data.readerHelper.getWpSTOnOffValue(reader, 'shadow', false);
                offset = this.data.readerHelper.getWpSTIntegerValue(reader, 'space', 0);
                width = this.data.readerHelper.getWpSTIntegerValue(reader, 'sz', 0);
                isDefaultValue = borderLineStyle == enums_1.BorderLineStyle.None && color == dx_color_1.DXColor.empty &&
                    frame == false && shadow == false && offset == 0 && width == 0;
                if (!isDefaultValue) {
                    this.border.color = colorModel;
                    this.border.frame = frame;
                    this.border.shadow = shadow;
                    this.setBorderOffset(offset);
                    this.setBorderWidth(width);
                    this.setBorderLineStyle(borderLineStyle);
                }
                return [2];
            });
        });
    };
    return TableCellBorderElementDestination;
}(table_border_element_destination_base_1.TableBorderElementDestinationBase));
exports.TableCellBorderElementDestination = TableCellBorderElementDestination;
