"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var import_range_permission_info_1 = require("../../model/import-range-permission-info");
var destination_1 = require("../destination");
var RangePermissionElementDestination = (function (_super) {
    tslib_1.__extends(RangePermissionElementDestination, _super);
    function RangePermissionElementDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RangePermissionElementDestination.createActualGroupNames = function () {
        var result = {};
        string_1.StringMapUtils.forEach(RangePermissionElementDestination.predefinedGroupNames, function (value, key) { return result[value] = key; });
        return result;
    };
    RangePermissionElementDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, rangePermission, userName, group;
            return tslib_1.__generator(this, function (_a) {
                id = reader.getAttributeNS('id', this.data.constants.wordProcessingNamespaceConst);
                if (id != null)
                    id = string_2.StringUtils.trim(id);
                if (string_2.StringUtils.isNullOrEmpty(id))
                    return [2];
                rangePermission = this.data.subDocumentInfo.rangePermissionImporter.rangePermissions[id];
                if (!rangePermission)
                    this.data.subDocumentInfo.rangePermissionImporter.rangePermissions[id] = rangePermission = new import_range_permission_info_1.ImportRangePermissionInfo();
                userName = reader.getAttributeNS('ed', this.data.constants.wordProcessingNamespaceConst);
                if (!string_2.StringUtils.isNullOrEmpty(userName)) {
                    userName = string_2.StringUtils.trim(userName);
                    rangePermission.userName = userName;
                }
                group = reader.getAttributeNS('edGrp', this.data.constants.wordProcessingNamespaceConst);
                if (!string_2.StringUtils.isNullOrEmpty(group)) {
                    group = string_2.StringUtils.trim(group);
                    rangePermission.group = this.getActualGroupName(group);
                }
                this.assignRangePermissionProperties(rangePermission, reader);
                return [2];
            });
        });
    };
    RangePermissionElementDestination.prototype.getActualGroupName = function (value) {
        var foundName = RangePermissionElementDestination.actualGroupNames[value];
        return foundName === undefined ? value : foundName;
    };
    RangePermissionElementDestination.prototype.getLastRowIndexFromTable = function (table) {
        return Math.max(0, table.rows.length - 1);
    };
    RangePermissionElementDestination.predefinedGroupNames = new map_creator_1.MapCreator()
        .add('Everyone', 'everyone')
        .add('Current User', 'current')
        .add('Editors', 'editors')
        .add('Owners', 'owners')
        .add('Contributors', 'contributors')
        .add('Administrators', 'administrators')
        .get();
    RangePermissionElementDestination.actualGroupNames = RangePermissionElementDestination.createActualGroupNames();
    return RangePermissionElementDestination;
}(destination_1.LeafElementDestination));
exports.RangePermissionElementDestination = RangePermissionElementDestination;
