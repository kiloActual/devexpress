"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var paragraph_properties_1 = require("../../../../../core/model/paragraph/paragraph-properties");
var constants_1 = require("@devexpress/utils/lib/constants");
var word_processing_mlvalue_1 = require("../../../../translation-table/word-processing-mlvalue");
var paragraph_formatting_leaf_element_destination_1 = require("../paragraph-formatting-leaf-element-destination");
var ParagraphSpacingDestination = (function (_super) {
    tslib_1.__extends(ParagraphSpacingDestination, _super);
    function ParagraphSpacingDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphSpacingDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var spacingAfter, spacingBefore, lineSpacing, attribute, lineSpacingRule;
            return tslib_1.__generator(this, function (_a) {
                spacingAfter = this.data.readerHelper.getWpSTIntegerValue(reader, 'after', constants_1.Constants.MIN_SAFE_INTEGER);
                if (spacingAfter >= 0)
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingAfter, spacingAfter);
                spacingBefore = this.data.readerHelper.getWpSTIntegerValue(reader, 'before', constants_1.Constants.MIN_SAFE_INTEGER);
                if (spacingBefore >= 0)
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingBefore, spacingBefore);
                this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.beforeAutoSpacing, spacingBefore == -1 ||
                    this.data.readerHelper.getWpSTOnOffValue(reader, new word_processing_mlvalue_1.WordProcessingMLValue('beforeAutospacing', 'before-autospacing').openXmlValue, false));
                this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.afterAutoSpacing, spacingAfter == -1 ||
                    this.data.readerHelper.getWpSTOnOffValue(reader, new word_processing_mlvalue_1.WordProcessingMLValue('afterAutospacing', 'after-autospacing').openXmlValue, false));
                lineSpacing = this.data.readerHelper.getWpSTIntegerValue(reader, 'line', constants_1.Constants.MIN_SAFE_INTEGER);
                if (lineSpacing != constants_1.Constants.MIN_SAFE_INTEGER && lineSpacing > 0) {
                    attribute = new word_processing_mlvalue_1.WordProcessingMLValue('lineRule', 'line-rule');
                    lineSpacingRule = reader.getAttributeNS(attribute.openXmlValue, this.data.constants.wordProcessingNamespaceConst);
                    this.applyLineSpacingValue(lineSpacing, lineSpacingRule);
                }
                else if (lineSpacing != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Single);
                return [2];
            });
        });
    };
    ParagraphSpacingDestination.prototype.getDescriptor = function () {
        return paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacingType;
    };
    ParagraphSpacingDestination.prototype.applyLineSpacingValue = function (lineSpacing, lineSpacingRule) {
        switch (lineSpacingRule) {
            case 'at-least':
            case 'atLeast':
                this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.AtLeast);
                this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing, lineSpacing);
                break;
            case 'exact':
                this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Exactly);
                this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing, lineSpacing);
                break;
            default:
                if (lineSpacing == 240)
                    this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Single);
                else if (lineSpacing == 360)
                    this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral);
                else if (lineSpacing == 480)
                    this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Double);
                else {
                    this.setProperty(paragraph_properties_1.ParagraphLineSpacingType.Multiple);
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing, lineSpacing / 240.0);
                }
                break;
        }
    };
    return ParagraphSpacingDestination;
}(paragraph_formatting_leaf_element_destination_1.ParagraphFormattingLeafElementDestination));
exports.ParagraphSpacingDestination = ParagraphSpacingDestination;
