"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var border_info_1 = require("../../../../../../core/model/borders/border-info");
var enums_1 = require("../../../../../../core/model/borders/enums");
var color_model_info_1 = require("../../../../../../core/model/color/color-model-info");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var translation_tables_1 = require("../../../../../translation-table/translation-tables");
var open_xml_color_import_helper_1 = require("../../../../color/open-xml-color-import-helper");
var paragraph_formatting_leaf_element_destination_1 = require("../../paragraph-formatting-leaf-element-destination");
var ParagraphBorderDestination = (function (_super) {
    tslib_1.__extends(ParagraphBorderDestination, _super);
    function ParagraphBorderDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphBorderDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var borderLineStyle, colorModelInfo, frame, shadow, isDefaultValue, border, offset, width;
            return tslib_1.__generator(this, function (_a) {
                borderLineStyle = this.data.readerHelper.getWpEnumValue(reader, 'val', translation_tables_1.TranslationTables.borderLineStyleTable.importMap, enums_1.BorderLineStyle.None);
                colorModelInfo = this.data.documentModel.cache.colorModelInfoCache.getItem(open_xml_color_import_helper_1.OpenXmlColorImportHelper.createColorModelInfo(this.data, reader, 'color'));
                frame = this.data.readerHelper.getWpSTOnOffValue(reader, 'frame', false);
                shadow = this.data.readerHelper.getWpSTOnOffValue(reader, 'shadow', false);
                isDefaultValue = borderLineStyle == enums_1.BorderLineStyle.None && colorModelInfo.equals(color_model_info_1.ColorModelInfo.empty) &&
                    frame == false && shadow == false;
                border = new border_info_1.BorderInfo();
                if (!isDefaultValue) {
                    border.style = borderLineStyle;
                    border.color = colorModelInfo;
                    border.frame = frame;
                    border.shadow = shadow;
                }
                offset = this.data.readerHelper.getWpSTIntegerValue(reader, 'space');
                if (offset != constants_1.Constants.MIN_SAFE_INTEGER)
                    border.offset = unit_converter_1.UnitConverter.pointsToTwips(offset);
                width = this.data.readerHelper.getWpSTIntegerValue(reader, 'sz');
                if (width != constants_1.Constants.MIN_SAFE_INTEGER)
                    border.width = unit_converter_1.UnitConverter.pointsToTwipsF(width * 0.125);
                this.setProperty(border);
                return [2];
            });
        });
    };
    return ParagraphBorderDestination;
}(paragraph_formatting_leaf_element_destination_1.ParagraphFormattingLeafElementDestination));
exports.ParagraphBorderDestination = ParagraphBorderDestination;
