"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var paragraph_properties_1 = require("../../../../../core/model/paragraph/paragraph-properties");
var constants_1 = require("@devexpress/utils/lib/constants");
var word_processing_mlvalue_1 = require("../../../../translation-table/word-processing-mlvalue");
var paragraph_formatting_leaf_element_destination_1 = require("../paragraph-formatting-leaf-element-destination");
var ParagraphIndentsDestination = (function (_super) {
    tslib_1.__extends(ParagraphIndentsDestination, _super);
    function ParagraphIndentsDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphIndentsDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var left, right, firstLineAttributeName, firstLine, hanging;
            return tslib_1.__generator(this, function (_a) {
                left = this.data.readerHelper.getWpSTIntegerValue(reader, 'left', constants_1.Constants.MIN_SAFE_INTEGER);
                if (left == constants_1.Constants.MIN_SAFE_INTEGER)
                    left = this.data.readerHelper.getWpSTIntegerValue(reader, 'start', constants_1.Constants.MIN_SAFE_INTEGER);
                if (left != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.leftIndent, left);
                right = this.data.readerHelper.getWpSTIntegerValue(reader, 'right', constants_1.Constants.MIN_SAFE_INTEGER);
                if (right == constants_1.Constants.MIN_SAFE_INTEGER)
                    right = this.data.readerHelper.getWpSTIntegerValue(reader, 'end', constants_1.Constants.MIN_SAFE_INTEGER);
                if (right != constants_1.Constants.MIN_SAFE_INTEGER)
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.rightIndent, right);
                firstLineAttributeName = new word_processing_mlvalue_1.WordProcessingMLValue('firstLine', 'first-line');
                firstLine = this.data.readerHelper.getWpSTIntegerValue(reader, firstLineAttributeName.openXmlValue, constants_1.Constants.MIN_SAFE_INTEGER);
                if (firstLine != constants_1.Constants.MIN_SAFE_INTEGER) {
                    if (firstLine > 0)
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.Indented);
                    else if (firstLine < 0)
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.Hanging);
                    else
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.None);
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, Math.abs(firstLine));
                }
                hanging = this.data.readerHelper.getWpSTIntegerValue(reader, 'hanging', constants_1.Constants.MIN_SAFE_INTEGER);
                if (hanging != constants_1.Constants.MIN_SAFE_INTEGER) {
                    if (hanging > 0)
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.Hanging);
                    else if (hanging < 0)
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.Indented);
                    else
                        this.setProperty(paragraph_properties_1.ParagraphFirstLineIndent.None);
                    this.paragraphProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, Math.abs(hanging));
                }
                return [2];
            });
        });
    };
    ParagraphIndentsDestination.prototype.getDescriptor = function () {
        return paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType;
    };
    return ParagraphIndentsDestination;
}(paragraph_formatting_leaf_element_destination_1.ParagraphFormattingLeafElementDestination));
exports.ParagraphIndentsDestination = ParagraphIndentsDestination;
