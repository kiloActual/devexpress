"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../../../base-utils/map-creator");
var errors_1 = require("@devexpress/utils/lib/errors");
var paragraph_formatting_leaf_element_destination_1 = require("../../paragraph-formatting-leaf-element-destination");
var between_border_destination_1 = require("./between-border-destination");
var bottom_border_destination_1 = require("./bottom-border-destination");
var left_border_destination_1 = require("./left-border-destination");
var right_border_destination_1 = require("./right-border-destination");
var top_border_destination_1 = require("./top-border-destination");
var ParagraphBordersDestination = (function (_super) {
    tslib_1.__extends(ParagraphBordersDestination, _super);
    function ParagraphBordersDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphBordersDestination.getThis = function (data) {
        return data.destinationStack.getThis();
    };
    Object.defineProperty(ParagraphBordersDestination.prototype, "elementHandlerTable", {
        get: function () {
            return ParagraphBordersDestination.handlerTable;
        },
        enumerable: true,
        configurable: true
    });
    ParagraphBordersDestination.prototype.getDescriptor = function () {
        throw new Error(errors_1.Errors.InternalException);
    };
    ParagraphBordersDestination.handlerTable = new map_creator_1.MapCreator()
        .add('top', function (data, _reader) { return new top_border_destination_1.ParagraphTopBorderDestination(data, ParagraphBordersDestination.getThis(data).paragraphProperties); })
        .add('left', function (data, _reader) { return new left_border_destination_1.ParagraphLeftBorderDestination(data, ParagraphBordersDestination.getThis(data).paragraphProperties); })
        .add('bottom', function (data, _reader) { return new bottom_border_destination_1.ParagraphBottomBorderDestination(data, ParagraphBordersDestination.getThis(data).paragraphProperties); })
        .add('right', function (data, _reader) { return new right_border_destination_1.ParagraphRightBorderDestination(data, ParagraphBordersDestination.getThis(data).paragraphProperties); })
        .add('between', function (data, _reader) { return new between_border_destination_1.ParagraphBetweenBorderDestination(data, ParagraphBordersDestination.getThis(data).paragraphProperties); })
        .get();
    return ParagraphBordersDestination;
}(paragraph_formatting_leaf_element_destination_1.ParagraphFormattingLeafElementDestination));
exports.ParagraphBordersDestination = ParagraphBordersDestination;
