"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_property_descriptor_1 = require("../../../../../core/model/character/character-property-descriptor");
var string_1 = require("@devexpress/utils/lib/utils/string");
var word_processing_mlvalue_1 = require("../../../../translation-table/word-processing-mlvalue");
var constants_1 = require("../../../../utils/constants");
var character_formatting_leaf_element_destination_1 = require("../character-formatting-leaf-element-destination");
var FontNameDestination = (function (_super) {
    tslib_1.__extends(FontNameDestination, _super);
    function FontNameDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FontNameDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fontName, fontInfo;
            return tslib_1.__generator(this, function (_a) {
                fontName = this.readFontName(reader);
                if (!string_1.StringUtils.isNullOrEmpty(fontName)) {
                    fontInfo = this.documentModel.cache.fontInfoCache.getItemByName(fontName);
                    this.setProperty(fontInfo ? fontInfo : this.documentModel.cache.fontInfoCache.addFont(fontName, fontName));
                }
                return [2];
            });
        });
    };
    FontNameDestination.prototype.getDescriptor = function () {
        return character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo;
    };
    FontNameDestination.prototype.readFontName = function (reader) {
        var value = reader.getAttributeNS('ascii', this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].namespace);
        if (!string_1.StringUtils.isNullOrEmpty(value))
            return value;
        var attribute = new word_processing_mlvalue_1.WordProcessingMLValue('hAnsi', 'h-ansi');
        value = reader.getAttributeNS(attribute.openXmlValue, this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].namespace);
        return string_1.StringUtils.isNullOrEmpty(value) ? '' : value;
    };
    return FontNameDestination;
}(character_formatting_leaf_element_destination_1.CharacterFormattingLeafElementDestination));
exports.FontNameDestination = FontNameDestination;
