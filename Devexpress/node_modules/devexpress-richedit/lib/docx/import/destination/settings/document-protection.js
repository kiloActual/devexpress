"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var json_document_enums_1 = require("../../../../core/model/json/enums/json-document-enums");
var document_protection_1 = require("../../../../core/model/options/document-protection");
var string_1 = require("@devexpress/utils/lib/utils/string");
var destination_1 = require("../destination");
var Base64Binary = (function () {
    function Base64Binary() {
    }
    Base64Binary.decodeArrayBuffer = function (base64) {
        var arrayBuffer = new ArrayBuffer((base64.length / 4) * 3);
        Base64Binary.decode(base64, arrayBuffer);
        return arrayBuffer;
    };
    Base64Binary.decode = function (base64, arrayBuffer) {
        if (arrayBuffer === void 0) { arrayBuffer = null; }
        var input = Base64Binary.removePaddingChars(base64);
        input = Base64Binary.removePaddingChars(input);
        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
        var bytes = input.length / 4 * 3;
        var uarray = arrayBuffer ? new Uint8Array(arrayBuffer) : new Uint8Array(bytes);
        for (var i = 0, j = 0; i < bytes; i += 3) {
            var enc1 = Base64Binary._keyStr.indexOf(input.charAt(j++));
            var enc2 = Base64Binary._keyStr.indexOf(input.charAt(j++));
            var enc3 = Base64Binary._keyStr.indexOf(input.charAt(j++));
            var enc4 = Base64Binary._keyStr.indexOf(input.charAt(j++));
            var chr1 = (enc1 << 2) | (enc2 >> 4);
            var chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            var chr3 = ((enc3 & 3) << 6) | enc4;
            uarray[i] = chr1;
            if (enc3 != 64)
                uarray[i + 1] = chr2;
            if (enc4 != 64)
                uarray[i + 2] = chr3;
        }
        return uarray;
    };
    Base64Binary.getBitesFromInt = function (num) {
        var arr = new ArrayBuffer(4);
        var view = new DataView(arr);
        view.setInt32(0, num, false);
        return new Uint8Array(arr);
    };
    Base64Binary.removePaddingChars = function (input) {
        var lkey = Base64Binary._keyStr.indexOf(input.charAt(input.length - 1));
        return lkey == 64 ? input.substring(0, input.length - 1) : input;
    };
    Base64Binary._keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    return Base64Binary;
}());
exports.Base64Binary = Base64Binary;
var DocumentProtectionDestination = (function (_super) {
    tslib_1.__extends(DocumentProtectionDestination, _super);
    function DocumentProtectionDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DocumentProtectionDestination.prototype.processElementOpen = function (reader) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var properties, passHash, salt, unprotectPassword, hash, value, cryptProviderType, edit;
            return tslib_1.__generator(this, function (_a) {
                properties = this.data.documentModel.documentProtectionProperties =
                    new document_protection_1.DocumentProtectionProperties();
                passHash = this.data.readerHelper.readAttribute(reader, 'hash');
                if (!string_1.StringUtils.isNullOrEmpty(passHash))
                    properties.passwordHash = Base64Binary.decode(passHash);
                salt = this.data.readerHelper.readAttribute(reader, 'salt');
                if (!string_1.StringUtils.isNullOrEmpty(salt))
                    properties.passwordPrefix = Base64Binary.decode(salt);
                unprotectPassword = this.data.readerHelper.readAttribute(reader, 'unprotectPassword');
                if (!string_1.StringUtils.isNullOrEmpty(unprotectPassword)) {
                    if (unprotectPassword != '00000000') {
                        hash = parseInt(unprotectPassword, 16);
                        if (!isNaN(hash)) {
                            value = hash;
                            hash = ((value << 24) & 0xFF000000) | ((value << 8) & 0x00FF0000) | ((value >> 8) & 0x0000FF00) | ((value >> 24) & 0x000000FF);
                            properties.word2003PasswordHash = Base64Binary.getBitesFromInt(hash);
                        }
                    }
                }
                cryptProviderType = this.data.readerHelper.readAttribute(reader, "cryptProviderType");
                if (!string_1.StringUtils.isNullOrEmpty(cryptProviderType))
                    properties.cryptProviderType = cryptProviderType == "rsaAES" ? document_protection_1.CryptProviderType.RsaAES : document_protection_1.CryptProviderType.RsaFull;
                edit = this.data.readerHelper.readAttribute(reader, 'edit');
                if (edit == 'readOnly' || edit == 'read-only')
                    properties.protectionType = json_document_enums_1.DocumentProtectionType.ReadOnly;
                if (edit == 'comments')
                    properties.protectionType = json_document_enums_1.DocumentProtectionType.AllowComments;
                properties.enforceProtection = this.data.readerHelper.getWpSTOnOffValue(reader, 'enforcement', false);
                properties.hashAlgorithmType = this.data.readerHelper.getWpSTIntegerValue(reader, 'cryptAlgorithmSid', 0);
                properties.hashIterationCount = this.data.readerHelper.getWpSTIntegerValue(reader, 'cryptSpinCount', 1);
                return [2];
            });
        });
    };
    return DocumentProtectionDestination;
}(destination_1.LeafElementDestination));
exports.DocumentProtectionDestination = DocumentProtectionDestination;
