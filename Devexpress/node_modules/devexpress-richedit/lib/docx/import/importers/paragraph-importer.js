"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var character_properties_1 = require("../../../core/model/character/character-properties");
var paragraph_1 = require("../../../core/model/paragraph/paragraph");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var rich_utils_1 = require("../../../core/model/rich-utils");
var simple_runs_1 = require("../../../core/model/runs/simple-runs");
var properties_bundle_1 = require("../../../core/rich-utils/properties-bundle");
var constants_1 = require("@devexpress/utils/lib/constants");
var list_1 = require("@devexpress/utils/lib/utils/list");
var ParagraphImporter = (function () {
    function ParagraphImporter(data) {
        this.paraId = constants_1.Constants.MIN_SAFE_INTEGER;
        this.data = data;
        this.createParagraph();
    }
    ParagraphImporter.prototype.resetProperties = function () {
        this.properties = paragraph_properties_1.MaskedParagraphProperties.createDefault(this.data.documentModel);
        return this;
    };
    ParagraphImporter.prototype.resetStyle = function () {
        this.style = this.data.stylesImporter.paragraphManager.defaultStyle;
        return this;
    };
    ParagraphImporter.prototype.resetTabs = function () {
        this.tabs = new paragraph_style_1.TabProperties();
        return this;
    };
    ParagraphImporter.prototype.resetParMarkCharacterStyle = function () {
        this.parMarkCharacterStyle = this.data.documentModel.characterStyles[0];
        return this;
    };
    ParagraphImporter.prototype.resetParMarkCharProperties = function () {
        this.parMarkCharProperties = character_properties_1.MaskedCharacterProperties.createDefault(this.data.documentModel);
        return this;
    };
    ParagraphImporter.prototype.createParagraph = function () {
        this.resetProperties()
            .resetStyle()
            .resetTabs()
            .resetParMarkCharProperties()
            .resetParMarkCharacterStyle();
        var lastPar = list_1.ListUtils.last(this.data.subDocument.paragraphs);
        this.paragraph = new paragraph_1.Paragraph(this.data.subDocument, this.data.subDocument.positionManager.registerPosition(lastPar ? lastPar.getEndPosition() : 0), 0, null, null);
        return this.paragraph;
    };
    ParagraphImporter.prototype.insertParagraph = function (asSectionRun) {
        if (asSectionRun === void 0) { asSectionRun = false; }
        var paragraph = this.paragraph;
        this.data.subDocumentInfo.characterImporter.addRun(new (asSectionRun ? simple_runs_1.SectionRun : simple_runs_1.ParagraphRun)(this.data.subDocumentInfo.positionImporter.currPosition, paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(this.parMarkCharProperties, this.parMarkCharacterStyle)), (asSectionRun ? rich_utils_1.RichUtils.specialCharacters.SectionMark : rich_utils_1.RichUtils.specialCharacters.ParagraphMark));
        this.data.subDocument.paragraphs.push(paragraph);
        paragraph.length = this.data.subDocumentInfo.positionImporter.currPosition - paragraph.startLogPosition.value;
        this.applyParagraphProperties();
        this.createParagraph();
        return paragraph;
    };
    ParagraphImporter.prototype.applyParagraphProperties = function () {
        this.paragraph.paragraphStyle = this.style;
        this.paragraph.numberingListIndex = this.style.numberingListIndex;
        this.paragraph.listLevelIndex = this.style.listLevelIndex;
        this.paragraph.maskedParagraphProperties = this.data.documentModel.cache.maskedParagraphPropertiesCache.getItem(this.properties.clone());
        this.paragraph.tabs = this.tabs.clone();
    };
    return ParagraphImporter;
}());
exports.ParagraphImporter = ParagraphImporter;
