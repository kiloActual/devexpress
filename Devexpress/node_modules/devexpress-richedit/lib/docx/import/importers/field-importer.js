"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var field_1 = require("../../../core/model/fields/field");
var rich_utils_1 = require("../../../core/model/rich-utils");
var simple_runs_1 = require("../../../core/model/runs/simple-runs");
var list_1 = require("@devexpress/utils/lib/utils/list");
var FieldImporter = (function () {
    function FieldImporter(data) {
        this.currIndex = 0;
        this.data = data;
    }
    Object.defineProperty(FieldImporter.prototype, "fieldInfoStack", {
        get: function () { return this.data.subDocumentInfo.fieldInfoStack; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImporter.prototype, "lastField", {
        get: function () { return this.fieldInfoStack.last; },
        enumerable: true,
        configurable: true
    });
    FieldImporter.prototype.applyToLastField = function (action) {
        var lastField = this.lastField;
        if (lastField)
            action(lastField);
    };
    FieldImporter.prototype.finishImport = function () {
    };
    FieldImporter.prototype.processFieldBegin = function (fieldInfo) {
        var pos = this.data.subDocumentInfo.positionImporter.currPosition;
        fieldInfo.startPos = pos;
        this.data.subDocumentInfo.characterImporter.addRun(new simple_runs_1.FieldCodeStartRun(pos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle), rich_utils_1.RichUtils.specialCharacters.FieldCodeStartRun);
        this.fieldInfoStack.push(fieldInfo);
    };
    FieldImporter.prototype.processFieldSeparator = function (fieldInfo) {
        var pos = this.data.subDocumentInfo.positionImporter.currPosition;
        fieldInfo.codeEndPos = pos;
        this.data.subDocumentInfo.characterImporter.addRun(new simple_runs_1.FieldCodeEndRun(pos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle), rich_utils_1.RichUtils.specialCharacters.FieldCodeEndRun);
    };
    FieldImporter.prototype.processFieldEnd = function (fieldInfo) {
        if (fieldInfo.codeEndPos <= fieldInfo.startPos)
            this.processFieldSeparator(fieldInfo);
        var pos = this.data.subDocumentInfo.positionImporter.currPosition;
        fieldInfo.resultEndIndexPos = pos + 1;
        this.data.subDocumentInfo.characterImporter.addRun(new simple_runs_1.FieldResultEndRun(pos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle), rich_utils_1.RichUtils.specialCharacters.FieldResultEndRun);
        return this.finishField(fieldInfo);
    };
    FieldImporter.prototype.insertHyperlinkInstruction = function (info) {
        this.fieldInfoStack.last.hyperlinkInfo = info;
    };
    FieldImporter.prototype.deleteInvalidFieldsInfo = function () {
        while (this.fieldInfoStack.count > 0) {
            var fieldInfo = this.fieldInfoStack.pop();
            if (fieldInfo.codeEndPos != -1)
                this.data.subDocumentInfo.characterImporter.deleteOneSimpleRun(fieldInfo.codeEndPos);
            this.data.subDocumentInfo.characterImporter.deleteOneSimpleRun(fieldInfo.startPos);
        }
    };
    FieldImporter.prototype.finishField = function (fieldInfo) {
        var subDocument = this.data.subDocument;
        var field = new field_1.Field(subDocument.positionManager, fieldInfo.index, fieldInfo.startPos, fieldInfo.codeEndPos, fieldInfo.resultEndIndexPos, false, fieldInfo.hyperlinkInfo);
        list_1.ListUtils.forEach(fieldInfo.nestedFields, function (f) { return f.parent = field; });
        field.disableUpdate = fieldInfo.disableUpdate;
        field.hideByParent = fieldInfo.hideByParent;
        field.locked = fieldInfo.locked;
        subDocument.fields[fieldInfo.index] = field;
        this.fieldInfoStack.pop();
        return field;
    };
    FieldImporter.prototype.insertFullField = function (insertCode, insertResult, hyperlinkInfo) {
        this.data.subDocumentInfo.fieldImporter.currIndex++;
        var startFieldPos = this.data.subDocumentInfo.positionImporter.currPosition;
        var fieldCodeStartRun = new simple_runs_1.FieldCodeStartRun(startFieldPos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle);
        this.data.subDocumentInfo.characterImporter.addRun(fieldCodeStartRun, rich_utils_1.RichUtils.specialCharacters.FieldCodeStartRun);
        insertCode();
        var separatorPos = this.data.subDocumentInfo.positionImporter.currPosition;
        var fieldCodeEndRun = new simple_runs_1.FieldCodeEndRun(separatorPos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle);
        this.data.subDocumentInfo.characterImporter.addRun(fieldCodeEndRun, rich_utils_1.RichUtils.specialCharacters.FieldCodeEndRun);
        insertResult();
        var endPos = this.data.subDocumentInfo.positionImporter.currPosition;
        var fieldResultEndRun = new simple_runs_1.FieldResultEndRun(endPos, this.data.subDocumentInfo.paragraphImporter.paragraph, this.data.subDocumentInfo.characterImporter.charPropsBundle);
        this.data.subDocumentInfo.characterImporter.addRun(fieldResultEndRun, rich_utils_1.RichUtils.specialCharacters.FieldResultEndRun);
        var fields = this.data.subDocument.fields;
        var newFieldIndex = fields.length;
        var newField = new field_1.Field(this.data.subDocument.positionManager, newFieldIndex, startFieldPos, separatorPos, endPos + 1, false, hyperlinkInfo);
        field_1.Field.addField(fields, newField);
    };
    return FieldImporter;
}());
exports.FieldImporter = FieldImporter;
