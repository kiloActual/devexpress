"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_1 = require("../../../core/model/character/character-properties");
var character_property_descriptor_1 = require("../../../core/model/character/character-property-descriptor");
var character_style_1 = require("../../../core/model/character/character-style");
var enums_1 = require("../../../core/model/character/enums");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var numbering_list_style_1 = require("../../../core/model/numbering-lists/numbering-list-style");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var table_cell_properties_1 = require("../../../core/model/tables/properties/table-cell-properties");
var table_properties_1 = require("../../../core/model/tables/properties/table-properties");
var table_row_properties_1 = require("../../../core/model/tables/properties/table-row-properties");
var table_cell_style_1 = require("../../../core/model/tables/styles/table-cell-style");
var table_conditional_style_1 = require("../../../core/model/tables/styles/table-conditional-style");
var table_style_1 = require("../../../core/model/tables/styles/table-style");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var styles_manager_1 = require("../../../core/model/styles-manager");
var OpenXmlStyleInfo = (function () {
    function OpenXmlStyleInfo() {
        this.id = '';
        this.name = '';
        this.parentId = '';
        this.linkedId = '';
        this.semiHidden = false;
        this.hidden = false;
        this.nextId = '';
        this.isDefault = false;
        this.qFormat = false;
        this.numberingId = -1;
    }
    return OpenXmlStyleInfo;
}());
exports.OpenXmlStyleInfo = OpenXmlStyleInfo;
var StyleManager = (function () {
    function StyleManager(data) {
        this.isDefaultProcessed = false;
        this.info = {};
        this.registered = {};
        this.data = data;
        this.defaultStyle = this.getDefault();
    }
    StyleManager.prototype.startImport = function () {
        this.currInfo = new OpenXmlStyleInfo();
    };
    StyleManager.prototype.endImport = function (dest) {
        if (string_2.StringUtils.isNullOrEmpty(this.currInfo.id))
            return null;
        this.info[this.currInfo.id] = this.currInfo;
        this.registered[this.currInfo.name] = true;
        return this.currInfo.style = this.addStyle(dest);
    };
    StyleManager.prototype.getNumberingListIndex = function (numberingId) {
        if (!numberingId)
            return -1;
        var info = this.data.stylesImporter.listInfos[numberingId];
        return info ? info.listIndex : -1;
    };
    StyleManager.prototype.addInfo = function (styleInfo, styleName) {
        this.info[styleInfo.id] = styleInfo;
        this.registered[styleName] = true;
    };
    StyleManager.prototype.getStyleById = function (styleId) {
        var styleInfo = this.getStyleInfoCore(styleId);
        return styleInfo ? styleInfo.style : null;
    };
    StyleManager.prototype.getInfoById = function (styleId) {
        var styleInfo = this.getStyleInfoCore(styleId);
        return styleInfo ? styleInfo : null;
    };
    StyleManager.prototype.isRegistered = function (styleName) {
        return !!this.registered[styleName];
    };
    StyleManager.prototype.determineParents = function () {
        var _this = this;
        string_1.StringMapUtils.forEach(this.info, function (styleInfo) {
            return styleInfo.style.parent = _this.getStyleById(styleInfo.parentId);
        });
    };
    StyleManager.prototype.foreachInfo = function (action) {
        string_1.StringMapUtils.forEach(this.info, function (info) { return action(info); });
    };
    StyleManager.prototype.addStyle = function (dest) {
        if (this.currInfo.isDefault && !this.isDefaultProcessed) {
            this.isDefaultProcessed = true;
            if (this.defaultStyle.styleName === this.currInfo.name)
                this.applyProperties(dest, this.defaultStyle);
            else
                this.defaultStyle = this.addToModel(this.applyProperties(dest, this.createEmpty()));
            return this.defaultStyle;
        }
        else {
            var style = this.getFromModelByName(this.currInfo.name);
            if (style && style.id && style.id != this.currInfo.id) {
                this.currInfo.name = this.currInfo.id;
                style = this.getFromModelByName(this.currInfo.name);
            }
            return style ?
                this.applyProperties(dest, style) :
                this.addToModel(this.applyProperties(dest, this.createEmpty()));
        }
    };
    StyleManager.prototype.applyPropertiesBase = function (style) {
        style.styleName = this.currInfo.name;
        style.semihidden = this.currInfo.semiHidden;
        style.hidden = this.currInfo.hidden;
        style.primary = this.currInfo.qFormat;
        style.id = this.currInfo.id;
    };
    StyleManager.prototype.getStyleInfoCore = function (id) {
        return string_2.StringUtils.isNullOrEmpty(id) ? null : this.info[id];
    };
    return StyleManager;
}());
exports.StyleManager = StyleManager;
var ParagraphStyleManager = (function (_super) {
    tslib_1.__extends(ParagraphStyleManager, _super);
    function ParagraphStyleManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphStyleManager.prototype.getDefault = function () { return this.data.documentModel.getDefaultParagraphStyle(); };
    ParagraphStyleManager.prototype.getFromModelByName = function (name) { return this.data.documentModel.stylesManager.getParagraphStyleByName(name); };
    ParagraphStyleManager.prototype.createEmpty = function () { return new paragraph_style_1.ParagraphStyle('', '', false, false, false, false, null, null, null, false, -1, -1, ''); };
    ParagraphStyleManager.prototype.addToModel = function (style) { return this.data.documentModel.stylesManager.addParagraphStyle(style); };
    ParagraphStyleManager.prototype.applyProperties = function (dest, style) {
        this.applyPropertiesBase(style);
        style.localizedName = styles_manager_1.StylesManager.getPresetParagraphStyleLocalizedName(style.styleName);
        style.numberingListIndex = this.getNumberingListIndex(dest.numberingId);
        style.listLevelIndex = dest.listLevelIndex;
        style.maskedCharacterProperties = dest.characterFormatting.clone();
        style.maskedParagraphProperties = dest.paragraphFormatting.clone();
        style.tabs = dest.tabs;
        if (this.currInfo.numberingId == numbering_list_1.NumberingList.NoNumberingListIndex)
            style.numberingListIndex = numbering_list_1.NumberingList.NoNumberingListIndex;
        return style;
    };
    return ParagraphStyleManager;
}(StyleManager));
exports.ParagraphStyleManager = ParagraphStyleManager;
var CharacterStyleManager = (function (_super) {
    tslib_1.__extends(CharacterStyleManager, _super);
    function CharacterStyleManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CharacterStyleManager.prototype.getDefault = function () { return this.data.documentModel.getDefaultCharacterStyle(); };
    CharacterStyleManager.prototype.getFromModelByName = function (name) { return this.data.documentModel.stylesManager.getCharacterStyleByName(name); };
    CharacterStyleManager.prototype.createEmpty = function () { return new character_style_1.CharacterStyle('', '', false, false, false, false, null, ''); };
    CharacterStyleManager.prototype.addToModel = function (style) { return this.data.documentModel.stylesManager.addCharacterStyle(style); };
    CharacterStyleManager.prototype.applyProperties = function (dest, style) {
        this.applyPropertiesBase(style);
        style.maskedCharacterProperties = dest.characterFormatting.clone();
        style.localizedName = styles_manager_1.StylesManager.getPresetCharacterStyleLocalizedName(style.styleName);
        return style;
    };
    return CharacterStyleManager;
}(StyleManager));
exports.CharacterStyleManager = CharacterStyleManager;
var TableStyleManager = (function (_super) {
    tslib_1.__extends(TableStyleManager, _super);
    function TableStyleManager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.conditionalTableFormattingInfoList = [];
        return _this;
    }
    TableStyleManager.prototype.getDefault = function () { return this.data.documentModel.getDefaultTableStyle(); };
    TableStyleManager.prototype.getFromModelByName = function (name) { return this.data.documentModel.stylesManager.getTableStyleByName(name); };
    TableStyleManager.prototype.createEmpty = function () {
        return new table_style_1.TableStyle('', '', false, false, false, false, {}, new table_conditional_style_1.TableConditionalStyle(null, null, null, null, null, null), '');
    };
    TableStyleManager.prototype.addToModel = function (style) { return this.data.documentModel.stylesManager.addTableStyle(style); };
    TableStyleManager.prototype.applyProperties = function (dest, style) {
        this.applyPropertiesBase(style);
        style.localizedName = styles_manager_1.StylesManager.getPresetTableStyleLocalizedName(style.styleName);
        var isNormalTableStyle = style.styleName == table_style_1.TableStyle.DEFAULT_STYLENAME;
        if ((isNormalTableStyle &&
            (dest.tableProperties.getUseValue(table_properties_1.TablePropertiesMask.UseLeftMargin) ||
                dest.tableProperties.getUseValue(table_properties_1.TablePropertiesMask.UseRightMargin) ||
                dest.tableProperties.getUseValue(table_properties_1.TablePropertiesMask.UseBottomMargin) ||
                dest.tableProperties.getUseValue(table_properties_1.TablePropertiesMask.UseTopMargin)))
            || !isNormalTableStyle)
            style.baseConditionalStyle.tableProperties = dest.tableProperties.clone();
        style.baseConditionalStyle.tableRowProperties = dest.tableRowProperties.clone();
        style.baseConditionalStyle.tableCellProperties = dest.tableCellProperties.clone();
        style.baseConditionalStyle.maskedCharacterProperties = dest.characterFormatting.clone();
        style.baseConditionalStyle.maskedParagraphProperties = dest.paragraphFormatting.clone();
        style.baseConditionalStyle.tabs = dest.tabs.clone();
        for (var _i = 0, _a = this.conditionalTableFormattingInfoList; _i < _a.length; _i++) {
            var ctf = _a[_i];
            style.conditionalStyles[ctf.conditionType] = new table_conditional_style_1.TableConditionalStyle(ctf.tableProperties.clone(), ctf.tableRowProperties.clone(), ctf.tableCellProperties.clone(), ctf.paragraphFormatting.clone(), ctf.characterFormatting.clone(), ctf.tabs.clone());
        }
        return style;
    };
    return TableStyleManager;
}(StyleManager));
exports.TableStyleManager = TableStyleManager;
var TableCellStyleManager = (function (_super) {
    tslib_1.__extends(TableCellStyleManager, _super);
    function TableCellStyleManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableCellStyleManager.prototype.getDefault = function () { return this.data.documentModel.getDefaultTableCellStyle(); };
    TableCellStyleManager.prototype.getFromModelByName = function (name) { return this.data.documentModel.stylesManager.getTableCellStyleByName(name); };
    TableCellStyleManager.prototype.createEmpty = function () { return new table_cell_style_1.TableCellStyle('', '', false, false, false, false, null, null); };
    TableCellStyleManager.prototype.addToModel = function (style) { return this.data.documentModel.stylesManager.addTableCellStyle(style); };
    TableCellStyleManager.prototype.applyProperties = function (dest, style) {
        this.applyPropertiesBase(style);
        style.tableCellProperties = dest.tableCellProperties.clone();
        style.characterProperties = dest.characterFormatting.clone();
        return style;
    };
    return TableCellStyleManager;
}(StyleManager));
exports.TableCellStyleManager = TableCellStyleManager;
var NumberingListStyleManager = (function (_super) {
    tslib_1.__extends(NumberingListStyleManager, _super);
    function NumberingListStyleManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NumberingListStyleManager.prototype.getDefault = function () { return this.createEmpty(); };
    NumberingListStyleManager.prototype.getFromModelByName = function (name) { return this.data.documentModel.stylesManager.getNumberingListStyleByName(name); };
    NumberingListStyleManager.prototype.createEmpty = function () { return new numbering_list_style_1.NumberingListStyle('', '', false, false, false, false, -1); };
    NumberingListStyleManager.prototype.addToModel = function (style) {
        var id = this.data.documentModel.numberingListStyles.push(style) - 1;
        return this.data.documentModel.numberingListStyles[id];
    };
    NumberingListStyleManager.prototype.removeFromModel = function (style) {
        var index = this.data.documentModel.numberingListStyles.indexOf(style);
        if (index && index >= 0)
            this.data.documentModel.numberingListStyles.splice(index, 1);
    };
    NumberingListStyleManager.prototype.applyProperties = function (dest, style) {
        this.applyPropertiesBase(style);
        style.numberingListIndex = this.getNumberingListIndex(dest.numberingId);
        style.isDefault = this.currInfo.isDefault;
        return style;
    };
    NumberingListStyleManager.prototype.addStyle = function (dest) {
        var style = this.getFromModelByName(this.currInfo.name);
        if (style)
            return style;
        return this.addToModel(this.applyProperties(dest, this.createEmpty()));
    };
    return NumberingListStyleManager;
}(StyleManager));
exports.NumberingListStyleManager = NumberingListStyleManager;
var StylesImporter = (function () {
    function StylesImporter(data) {
        this.data = data;
        this.paragraphManager = new ParagraphStyleManager(data);
        this.characterManager = new CharacterStyleManager(data);
        this.tableManager = new TableStyleManager(data);
        this.tableCellManager = new TableCellStyleManager(data);
        this.numberingListManager = new NumberingListStyleManager(data);
        this.abstractListInfos = {};
        this.listInfos = {};
        this.deferredStyles = [];
        this.numberingStyleInfos = {};
    }
    StylesImporter.prototype.findNumberingListInfoById = function (id) {
        return this.listInfos[id];
    };
    StylesImporter.prototype.addListInfo = function (listInfo) {
        this.listInfos[listInfo.id] = listInfo;
    };
    StylesImporter.prototype.addAbstractListInfo = function (abstractListInfo) {
        this.abstractListInfos[abstractListInfo.abstractNumberingListId] = abstractListInfo;
    };
    StylesImporter.prototype.addNumberingListStyleInfo = function (styleInfo) {
        this.numberingStyleInfos[styleInfo.id] = styleInfo;
    };
    StylesImporter.prototype.presetDefaultStyles = function () {
        var emptyCharProps = this.data.documentModel.defaultCharacterProperties.clone();
        emptyCharProps.setUseValue(enums_1.CharacterPropertiesMask.UseAll, false);
        var emptyParProps = this.data.documentModel.defaultParagraphProperties.clone();
        emptyParProps.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAll, false);
        var tblProps = new table_properties_1.TableProperties();
        tblProps.setUseValue(table_properties_1.TablePropertiesMask.UseAll, false);
        var tblRowProps = new table_row_properties_1.TableRowProperties();
        tblRowProps.setUseValue(table_row_properties_1.TableRowPropertiesMask.UseAll, false);
        var tblCellProps = new table_cell_properties_1.TableCellProperties();
        tblCellProps.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseAll, false);
        this.data.documentModel.stylesManager.addCharacterStyle(new character_style_1.CharacterStyle(character_style_1.CharacterStyle.defaultParagraphCharacterStyleName, character_style_1.CharacterStyle.defaultParagraphCharacterStyleName, false, false, false, true, emptyCharProps));
        this.data.documentModel.stylesManager.addParagraphStyle(new paragraph_style_1.ParagraphStyle(paragraph_style_1.ParagraphStyle.normalStyleName, paragraph_style_1.ParagraphStyle.normalStyleName, false, false, false, true, emptyCharProps, emptyParProps, new paragraph_style_1.TabProperties(), false, numbering_list_1.NumberingList.NumberingListNotSettedIndex, 0, ''));
        this.data.documentModel.stylesManager.addTableStyle(new table_style_1.TableStyle(table_style_1.TableStyle.DEFAULT_STYLENAME, table_style_1.TableStyle.DEFAULT_STYLENAME, false, false, true, true, {}, new table_conditional_style_1.TableConditionalStyle(tblProps, tblRowProps, tblCellProps, emptyParProps, emptyCharProps, new paragraph_style_1.TabProperties()), ''));
        this.data.documentModel.stylesManager.addTableCellStyle(new table_cell_style_1.TableCellStyle(table_cell_style_1.TableCellStyle.DEFAULT_STYLENAME, table_cell_style_1.TableCellStyle.DEFAULT_STYLENAME, false, false, false, true, tblCellProps, emptyCharProps));
    };
    StylesImporter.prototype.determineParents = function () {
        this.characterManager.determineParents();
        this.paragraphManager.determineParents();
        this.tableManager.determineParents();
        this.tableCellManager.determineParents();
        this.numberingListManager.determineParents();
    };
    StylesImporter.prototype.linkStyles = function () {
        var _this = this;
        this.characterManager.foreachInfo(function (charInfo) {
            var parStyle = _this.paragraphManager.getStyleById(charInfo.linkedId);
            if (parStyle) {
                parStyle.linkedStyle = charInfo.style;
                charInfo.style.linkedStyle = parStyle;
            }
        });
        this.paragraphManager.foreachInfo(function (parInfo) {
            return parInfo.style.nextParagraphStyle = _this.paragraphManager.getStyleById(parInfo.nextId);
        });
    };
    StylesImporter.prototype.presetDefaultProperties = function () {
        if (!this.data.documentModel.defaultCharacterProperties) {
            var prop_1 = new character_properties_1.MaskedCharacterProperties();
            list_1.ListUtils.forEach(character_property_descriptor_1.CharacterPropertyDescriptor.ALL_FIELDS, function (desc) { return desc.setProp(prop_1, desc.defaultValue); });
            prop_1.fontInfo = prop_1.fontInfo.clone();
            prop_1.fontInfo.measurer = this.data.documentModel.cache.fontInfoCache.fontMeasurer;
            prop_1.useValue = enums_1.CharacterPropertiesMask.UseAll;
            this.data.documentModel.defaultCharacterProperties = prop_1;
        }
        if (!this.data.documentModel.defaultParagraphProperties) {
            var prop_2 = new paragraph_properties_1.MaskedParagraphProperties();
            list_1.ListUtils.forEach(paragraph_properties_1.ParagraphPropertyDescriptor.ALL_FIELDS, function (desc) { return desc.setProp(prop_2, desc.defaultValue); });
            prop_2.useValue = paragraph_properties_1.ParagraphPropertiesMask.UseAll;
            this.data.documentModel.defaultParagraphProperties = prop_2;
        }
        if (!this.data.documentModel.defaultTableProperties) {
            var prop = new table_properties_1.TableProperties();
            prop.setUseValue(table_properties_1.TablePropertiesMask.UseAll, false);
            this.data.documentModel.defaultTableProperties = prop;
        }
        if (!this.data.documentModel.defaultTableRowProperties) {
            var prop = new table_row_properties_1.TableRowProperties();
            prop.setUseValue(table_row_properties_1.TableRowPropertiesMask.UseAll, false);
            this.data.documentModel.defaultTableRowProperties = prop;
        }
        if (!this.data.documentModel.defaultTableCellProperties) {
            var prop = new table_cell_properties_1.TableCellProperties();
            prop.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseAll, false);
            this.data.documentModel.defaultTableCellProperties = prop;
        }
    };
    StylesImporter.prototype.createNumberingLists = function (documentModel) {
        var _this = this;
        var innerId = 1;
        number_1.NumberMapUtils.forEach(this.listInfos, function (listInfo) {
            var abstractNumberingInfo = _this.findAbstractListInfosById(listInfo.abstractNumberingListId);
            if (abstractNumberingInfo != null) {
                var list = new numbering_list_1.NumberingList(documentModel, abstractNumberingInfo.abstractNumberingIndex);
                list.innerId = listInfo.id;
                var count = listInfo.levelOverrides.length;
                for (var i = 0; i < count; i++) {
                    var listLevelOverride = listInfo.levelOverrides[i];
                    list.levels[listLevelOverride.levelIndex] = listLevelOverride.getOverrideListLevelCore(list.levels[listLevelOverride.levelIndex]);
                }
                listInfo.listIndex = documentModel.numberingLists.length;
                documentModel.numberingLists.push(list);
                if (list.innerId == -1) {
                    while (list_1.ListUtils.elementBy(documentModel.numberingLists, function (list) { return list.innerId == innerId; }))
                        innerId++;
                    list.innerId = innerId++;
                }
                list.deleted = false;
            }
        });
    };
    StylesImporter.prototype.findAbstractListInfosById = function (abstractNumberingListId) {
        return this.abstractListInfos[abstractNumberingListId];
    };
    return StylesImporter;
}());
exports.StylesImporter = StylesImporter;
