"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var enums_1 = require("../../../core/model/floating-objects/enums");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../translation-table/translation-tables");
var string_value_parser_1 = require("../../utils/string-value-parser");
var units_converter_1 = require("../../utils/units-converter");
var InlinePictureCssParser = (function () {
    function InlinePictureCssParser(documentModel, readerHelper, originalSize) {
        this.documentModel = documentModel;
        this.readerHelper = readerHelper;
        this.originalSize = originalSize;
        this.size = originalSize;
        this.cssKeywordTable = this.createCssKeywordTable();
        this.topDistance = 0;
        this.bottomDistance = 0;
        this.leftDistance = 180;
        this.rightDistance = 180;
        this.fromWidth = enums_1.RelativeWidthType.Page;
        this.fromHeight = enums_1.RelativeHeightType.Page;
        this.offset = new point_1.Point(0, 0);
    }
    InlinePictureCssParser.prototype.parseAttribute = function (style) {
        var _this = this;
        var attributes = style.split(';');
        list_1.ListUtils.forEach(attributes, function (attr) {
            var pair = attr.split(':');
            var key = pair[0].toUpperCase();
            var value = pair[1];
            var handler = _this.cssKeywordTable[key];
            if (handler)
                handler(value);
        });
    };
    InlinePictureCssParser.prototype.getFloatingObjectHorizontalPositionAlignment = function (value) {
        return this.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectHorizontalPositionAlignmentTable.importMap, enums_1.AnchorObjectHorizontalPositionAlignment.None);
    };
    InlinePictureCssParser.prototype.getFloatingObjectVerticalPositionAlignment = function (value) {
        return this.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectVerticalPositionAlignmentTable.importMap, enums_1.AnchorObjectVerticalPositionAlignment.None);
    };
    InlinePictureCssParser.prototype.getWrapText = function (value) {
        return value == 'square';
    };
    InlinePictureCssParser.prototype.getFloatingObjectVerticalAlignment = function (value) {
        return this.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.drawingTextAnchoringType.importMap, enums_1.DrawingTextAnchoringType.Top);
    };
    InlinePictureCssParser.prototype.getFloatingObjectRelativeFromHorizontal = function (value) {
        return this.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectCssRelativeFromHorizontalTable.importMap, enums_1.RelativeWidthType.Margin);
    };
    InlinePictureCssParser.prototype.getFloatingObjectRelativeFromVertical = function (value) {
        return this.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.floatingObjectCssRelativeFromVerticalTable.importMap, enums_1.RelativeHeightType.Margin);
    };
    InlinePictureCssParser.prototype.getPercentValue = function (value) {
        value = value.trim();
        if (string_1.StringUtils.endsAt(value, '%')) {
            try {
                var result = parseFloat(value.substr(0, value.length - 1));
                if (result)
                    return result * 1000;
            }
            catch (_a) { }
        }
        else {
            try {
                var result = parseInt(value, 10);
                if (result)
                    return result * 1000;
            }
            catch (_b) { }
        }
        return 100 * 1000;
    };
    InlinePictureCssParser.prototype.cssWidth = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        if (valueInfo.unit === '%')
            value = value * this.originalSize.width;
        this.size.width = value;
    };
    InlinePictureCssParser.prototype.cssHeight = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        if (valueInfo.unit === '%')
            value = value * this.originalSize.height;
        this.size.height = value;
    };
    InlinePictureCssParser.prototype.cssVerticalPositionType = function (propertiesValue) {
        this.verticalPositionType = propertiesValue;
    };
    InlinePictureCssParser.prototype.cssHorizontalPositionType = function (propertiesValue) {
        this.horizontalPositionType = propertiesValue;
    };
    InlinePictureCssParser.prototype.cssHorizontalPositionAlignment = function (propertiesValue) {
        this.horizontalPositionAlignment = this.getFloatingObjectHorizontalPositionAlignment(propertiesValue);
    };
    InlinePictureCssParser.prototype.cssVerticalPositionAlignment = function (propertiesValue) {
        this.verticalPositionAlignment = this.getFloatingObjectVerticalPositionAlignment(propertiesValue);
    };
    InlinePictureCssParser.prototype.cssTextBoxVerticalAlignment = function (propertiesValue) {
        this.textBoxVerticalAlignment = this.getFloatingObjectVerticalAlignment(propertiesValue);
    };
    InlinePictureCssParser.prototype.cssTextBoxWrapType = function (propertiesValue) {
        this.wrapText = this.getWrapText(propertiesValue);
        this.useWrapText = true;
    };
    InlinePictureCssParser.prototype.cssZOrder = function (propertiesValue) {
        this.zOrder = Math.max(parseInt(propertiesValue, 10), 0);
    };
    InlinePictureCssParser.prototype.cssTopDistance = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.topDistance = value;
    };
    InlinePictureCssParser.prototype.cssLeftDistance = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.leftDistance = value;
    };
    InlinePictureCssParser.prototype.cssRightDistance = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.rightDistance = value;
    };
    InlinePictureCssParser.prototype.cssBottomDistance = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.bottomDistance = value;
    };
    InlinePictureCssParser.prototype.cssMsoWidthPercent = function (propertiesValue) {
        this.widthPercent = this.getPercentValue(propertiesValue);
        this.useRelativeWidth = true;
    };
    InlinePictureCssParser.prototype.cssMsoHeightPercent = function (propertiesValue) {
        this.heightPercent = this.getPercentValue(propertiesValue);
        this.useRelativeHeight = true;
    };
    InlinePictureCssParser.prototype.cssMsoWidthRelative = function (propertiesValue) {
        this.fromWidth = this.getFloatingObjectRelativeFromHorizontal(propertiesValue);
        this.useRelativeWidth = true;
    };
    InlinePictureCssParser.prototype.cssMsoHeightRelative = function (propertiesValue) {
        this.fromHeight = this.getFloatingObjectRelativeFromVertical(propertiesValue);
        this.useRelativeHeight = true;
    };
    InlinePictureCssParser.prototype.cssPosition = function (value) {
        this.position = value;
    };
    InlinePictureCssParser.prototype.cssOffsetX = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.offset.x = value;
    };
    InlinePictureCssParser.prototype.cssOffsetY = function (propertiesValue) {
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        var value = units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo);
        this.offset.y = value;
    };
    InlinePictureCssParser.prototype.cssRotation = function (propertiesValue) {
        this.useRotation = true;
        var valueInfo = string_value_parser_1.StringValueParser.parse(propertiesValue);
        this.rotation = units_converter_1.UnitsConverter.rotationUnitToModelUnits(valueInfo);
    };
    InlinePictureCssParser.prototype.createCssKeywordTable = function () {
        var _this = this;
        var cssKeywordTable = new map_creator_1.MapCreator()
            .add('width'.toUpperCase(), function (value) { return _this.cssWidth(value); })
            .add('height'.toUpperCase(), function (value) { return _this.cssHeight(value); })
            .add('z-index'.toUpperCase(), function (value) { return _this.cssZOrder(value); })
            .add('mso-wrap-distance-top'.toUpperCase(), function (value) { return _this.cssTopDistance(value); })
            .add('mso-wrap-distance-left'.toUpperCase(), function (value) { return _this.cssLeftDistance(value); })
            .add('mso-wrap-distance-right'.toUpperCase(), function (value) { return _this.cssRightDistance(value); })
            .add('mso-wrap-distance-bottom'.toUpperCase(), function (value) { return _this.cssBottomDistance(value); })
            .add('margin-left'.toUpperCase(), function (value) { return _this.cssOffsetX(value); })
            .add('margin-top'.toUpperCase(), function (value) { return _this.cssOffsetY(value); })
            .add('mso-position-horizontal'.toUpperCase(), function (value) { return _this.cssHorizontalPositionAlignment(value); })
            .add('mso-position-vertical'.toUpperCase(), function (value) { return _this.cssVerticalPositionAlignment(value); })
            .add('mso-position-vertical-relative'.toUpperCase(), function (value) { return _this.cssVerticalPositionType(value); })
            .add('mso-position-horizontal-relative'.toUpperCase(), function (value) { return _this.cssHorizontalPositionType(value); })
            .add('v-text-anchor'.toUpperCase(), function (value) { return _this.cssTextBoxVerticalAlignment(value); })
            .add('mso-wrap-style'.toUpperCase(), function (value) { return _this.cssTextBoxWrapType(value); })
            .add('rotation'.toUpperCase(), function (value) { return _this.cssRotation(value); })
            .add('mso-width-percent'.toUpperCase(), function (value) { return _this.cssMsoWidthPercent(value); })
            .add('mso-height-percent'.toUpperCase(), function (value) { return _this.cssMsoHeightPercent(value); })
            .add('mso-width-relative'.toUpperCase(), function (value) { return _this.cssMsoWidthRelative(value); })
            .add('mso-height-relative'.toUpperCase(), function (value) { return _this.cssMsoHeightRelative(value); })
            .add('position'.toUpperCase(), function (value) { return _this.cssPosition(value); })
            .get();
        return cssKeywordTable;
    };
    return InlinePictureCssParser;
}());
exports.InlinePictureCssParser = InlinePictureCssParser;
