import { DocumentModel } from '../../../core/model/document-model';
import { AnchorObjectHorizontalPositionAlignment, AnchorObjectVerticalPositionAlignment, DrawingTextAnchoringType, RelativeHeightType, RelativeWidthType } from '../../../core/model/floating-objects/enums';
import { Point } from '@devexpress/utils/lib/geometry/point';
import { Size } from '@devexpress/utils/lib/geometry/size';
import { ReaderHelper } from '../utils/reader-helper';
export declare class InlinePictureCssParser {
    documentModel: DocumentModel;
    readerHelper: ReaderHelper;
    originalSize: Size;
    topDistance: number;
    leftDistance: number;
    rightDistance: number;
    bottomDistance: number;
    horizontalPositionAlignment: AnchorObjectHorizontalPositionAlignment;
    verticalPositionAlignment: AnchorObjectVerticalPositionAlignment;
    textBoxVerticalAlignment: DrawingTextAnchoringType;
    wrapText: boolean;
    useWrapText: boolean;
    horizontalPositionType: string;
    verticalPositionType: string;
    offset: Point;
    size: Size;
    zOrder: number;
    rotation: number;
    useRotation: boolean;
    widthPercent: number;
    fromWidth: RelativeWidthType;
    useRelativeWidth: boolean;
    heightPercent: number;
    fromHeight: RelativeHeightType;
    useRelativeHeight: boolean;
    position: string;
    private cssKeywordTable;
    constructor(documentModel: DocumentModel, readerHelper: ReaderHelper, originalSize: Size);
    parseAttribute(style: string): void;
    getFloatingObjectHorizontalPositionAlignment(value: string): AnchorObjectHorizontalPositionAlignment;
    getFloatingObjectVerticalPositionAlignment(value: string): AnchorObjectVerticalPositionAlignment;
    getWrapText(value: string): boolean;
    getFloatingObjectVerticalAlignment(value: string): DrawingTextAnchoringType;
    getFloatingObjectRelativeFromHorizontal(value: string): RelativeWidthType;
    getFloatingObjectRelativeFromVertical(value: string): RelativeHeightType;
    getPercentValue(value: string): number;
    protected cssWidth(propertiesValue: string): void;
    protected cssHeight(propertiesValue: string): void;
    protected cssVerticalPositionType(propertiesValue: string): void;
    protected cssHorizontalPositionType(propertiesValue: string): void;
    protected cssHorizontalPositionAlignment(propertiesValue: string): void;
    protected cssVerticalPositionAlignment(propertiesValue: string): void;
    protected cssTextBoxVerticalAlignment(propertiesValue: string): void;
    protected cssTextBoxWrapType(propertiesValue: string): void;
    protected cssZOrder(propertiesValue: string): void;
    protected cssTopDistance(propertiesValue: string): void;
    protected cssLeftDistance(propertiesValue: string): void;
    protected cssRightDistance(propertiesValue: string): void;
    protected cssBottomDistance(propertiesValue: string): void;
    protected cssMsoWidthPercent(propertiesValue: string): void;
    protected cssMsoHeightPercent(propertiesValue: string): void;
    protected cssMsoWidthRelative(propertiesValue: string): void;
    protected cssMsoHeightRelative(propertiesValue: string): void;
    protected cssPosition(value: string): void;
    protected cssOffsetX(propertiesValue: string): void;
    protected cssOffsetY(propertiesValue: string): void;
    protected cssRotation(propertiesValue: string): void;
    private createCssKeywordTable;
}
//# sourceMappingURL=inline-picture-css-parser.d.ts.map
