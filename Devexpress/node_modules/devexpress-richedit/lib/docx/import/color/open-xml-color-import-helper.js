"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var theme_color_index_calculator_1 = require("../../../core/formats/utils/color/theme-color-index-calculator");
var tint_and_shade_calculator_1 = require("../../../core/formats/utils/color/tint-and-shade-calculator");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var dx_color_1 = require("../../../core/model/color/dx-color");
var enums_1 = require("../../../core/model/color/enums");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../translation-table/translation-tables");
var OpenXmlColorImportHelper = (function () {
    function OpenXmlColorImportHelper() {
    }
    OpenXmlColorImportHelper.createColorModelInfo = function (data, reader, attribute, allowNoColor) {
        if (allowNoColor === void 0) { allowNoColor = false; }
        var themeValue = data.readerHelper.getWpEnumValue(reader, 'themeColor', translation_tables_1.TranslationTables.themeColorValueTable.importMap, enums_1.ThemeColorValues.None);
        if (themeValue != enums_1.ThemeColorValues.None) {
            var themeColorIndex = theme_color_index_calculator_1.ThemeColorIndexCalculator.calculateThemeColorIndex(themeValue);
            return themeColorIndex != enums_1.ThemeColorIndexConstants.None ?
                color_model_info_1.ColorModelInfo.makeByThemeColorIndex(themeColorIndex, OpenXmlColorImportHelper.getTint(data, reader, 'themeTint', 'themeShade')) :
                color_model_info_1.ColorModelInfo.makeByThemeColorIndex(dx_color_1.DXColor.empty);
        }
        else {
            var color = this.tryConvertAttributeToColor(data, reader, attribute);
            return color !== null ?
                color_model_info_1.ColorModelInfo.makeByColor(color) :
                (allowNoColor ? null : color_model_info_1.ColorModelInfo.makeByColor(dx_color_1.DXColor.empty));
        }
    };
    OpenXmlColorImportHelper.tryConvertAttributeToColor = function (data, reader, attribute) {
        var result = dx_color_1.DXColor.empty;
        var value = data.readerHelper.readAttribute(reader, attribute);
        if (value == 'auto')
            return result;
        if (value != null)
            result = data.readerHelper.parseColor(value, dx_color_1.DXColor.empty);
        if (result == dx_color_1.DXColor.empty)
            result = data.readerHelper.getWpSTColorValue(reader, attribute, dx_color_1.DXColor.empty);
        if (result == dx_color_1.DXColor.empty) {
            result = data.readerHelper.getWpEnumValueCore(value, translation_tables_1.TranslationTables.predefinedBackgroundColors.importMap, dx_color_1.DXColor.empty);
            return result != dx_color_1.DXColor.empty ? result : null;
        }
        return result;
    };
    OpenXmlColorImportHelper.createFillInfo = function (data, reader) {
        var tint = OpenXmlColorImportHelper.getTint(data, reader, 'themeFillTint', 'themeFillShade');
        var themeValue = data.readerHelper.getWpEnumValue(reader, 'themeFill', translation_tables_1.TranslationTables.themeColorValueTable.importMap, enums_1.ThemeColorValues.None);
        if (themeValue != enums_1.ThemeColorValues.None) {
            var themeColorIndex = theme_color_index_calculator_1.ThemeColorIndexCalculator.calculateThemeColorIndex(themeValue);
            if (themeColorIndex != enums_1.ThemeColorIndexConstants.None)
                return color_model_info_1.ColorModelInfo.makeByThemeColorIndex(themeColorIndex, tint);
        }
        return color_model_info_1.ColorModelInfo.makeByColor(data.readerHelper.getWpSTColorValue(reader, 'fill', dx_color_1.DXColor.empty), tint);
    };
    OpenXmlColorImportHelper.getTint = function (data, reader, tintAttrName, shadeTintName) {
        var themeFillTint = data.readerHelper.readAttribute(reader, tintAttrName);
        if (!string_1.StringUtils.isNullOrEmpty(themeFillTint))
            return tint_and_shade_calculator_1.TintAndShadeCalculator.calculateTint(data.readerHelper.convertToInt(themeFillTint));
        var themeFillShade = data.readerHelper.readAttribute(reader, shadeTintName);
        if (!string_1.StringUtils.isNullOrEmpty(themeFillShade))
            return tint_and_shade_calculator_1.TintAndShadeCalculator.modifyShadeToTint(data.readerHelper.convertToInt(themeFillShade));
        return 0;
    };
    return OpenXmlColorImportHelper;
}());
exports.OpenXmlColorImportHelper = OpenXmlColorImportHelper;
