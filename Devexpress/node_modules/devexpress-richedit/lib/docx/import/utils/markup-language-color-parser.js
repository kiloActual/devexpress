"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("../../../core/model/color/color");
var dx_color_1 = require("../../../core/model/color/dx-color");
var rich_utils_1 = require("../../../core/model/rich-utils");
var color_2 = require("@devexpress/utils/lib/utils/color");
var string_1 = require("@devexpress/utils/lib/utils/string");
var MarkupLanguageColorParser = (function () {
    function MarkupLanguageColorParser() {
    }
    MarkupLanguageColorParser.parseColor = function (value) {
        var colorName = '';
        if (value[0] == '#') {
            var indexStart = value.indexOf('[');
            var indexEnd = value.indexOf(']');
            if (indexStart >= 0 && indexEnd >= 0 && indexStart < indexEnd)
                value = (value.slice(0, indexStart) + value.slice(indexEnd + 1)).trim();
            colorName = value.substr(1);
            switch (colorName.length) {
                case 8: return MarkupLanguageColorParser.getColorByArgb(colorName);
                case 4: return MarkupLanguageColorParser.getColorByArgb(string_1.StringUtils.repeat(colorName.charAt(0), 2) +
                    string_1.StringUtils.repeat(colorName.charAt(1), 2) +
                    string_1.StringUtils.repeat(colorName.charAt(2), 2) +
                    string_1.StringUtils.repeat(colorName.charAt(3), 2));
                case 6: return MarkupLanguageColorParser.getColorByRgb(colorName);
                case 3: return MarkupLanguageColorParser.getColorByRgb(string_1.StringUtils.repeat(colorName.charAt(0), 2) +
                    string_1.StringUtils.repeat(colorName.charAt(1), 2) +
                    string_1.StringUtils.repeat(colorName.charAt(2), 2));
                default: return MarkupLanguageColorParser.getColorByName(value);
            }
        }
        if (value.length == 6 && !color_2.ColorUtils.colorNames[value]) {
            var color = MarkupLanguageColorParser.getColorByRgb(value);
            if (color != dx_color_1.DXColor.empty)
                return color;
        }
        if (string_1.StringUtils.startsAt(value.toLowerCase(), 'rgb(')) {
            var result = MarkupLanguageColorParser.parseRGB(value.substr(4));
            if (result != dx_color_1.DXColor.empty)
                return result;
        }
        return MarkupLanguageColorParser.getColorByName(value);
    };
    MarkupLanguageColorParser.getColorByName = function (value) {
        var color = dx_color_1.DXColor.fromName(value);
        return color === color_1.ColorHelper.AUTOMATIC_COLOR ? dx_color_1.DXColor.empty : color;
    };
    MarkupLanguageColorParser.getColor = function (colorName, startIndex) {
        var sr = colorName.substr(startIndex, 2);
        var color = parseInt(sr, 16);
        return color == 0 && sr != '00' ? -1 : color;
    };
    MarkupLanguageColorParser.getColorByRgb = function (colorName, a) {
        if (a === void 0) { a = 255; }
        var r = MarkupLanguageColorParser.getColor(colorName, 0);
        var g = MarkupLanguageColorParser.getColor(colorName, 2);
        var b = MarkupLanguageColorParser.getColor(colorName, 4);
        return r != -1 && g != -1 && b != -1 ? (a << 24) | (r << 16) | (g << 8) | b : dx_color_1.DXColor.empty;
    };
    MarkupLanguageColorParser.getColorByArgb = function (colorName) {
        var a = MarkupLanguageColorParser.getColor(colorName, 0);
        var r = MarkupLanguageColorParser.getColor(colorName, 2);
        var g = MarkupLanguageColorParser.getColor(colorName, 4);
        var b = MarkupLanguageColorParser.getColor(colorName, 6);
        return a != -1 && r != -1 && g != -1 && b != -1 ? (a << 24) | (r << 16) | (g << 8) | b : dx_color_1.DXColor.empty;
    };
    MarkupLanguageColorParser.parseRGB = function (value) {
        var rgb = '';
        var colors = [];
        for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
            var val = value_1[_i];
            if (val != ',' && val != ')') {
                if (!rich_utils_1.RichUtils.isWhitespace.test(val))
                    rgb += val;
            }
            else {
                var color = parseInt(rgb, 10);
                if (!isNaN(color))
                    colors.push(color);
                rgb = '';
            }
        }
        return colors.length == 3 ? (255 << 24) | (colors[0] << 16) | (colors[1] << 8) | colors[2] : dx_color_1.DXColor.empty;
    };
    return MarkupLanguageColorParser;
}());
exports.MarkupLanguageColorParser = MarkupLanguageColorParser;
