"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lang_info_1 = require("../../../core/model/character/lang-info");
var dx_color_1 = require("../../../core/model/color/dx-color");
var culture_info_1 = require("../../../core/model/themes/culture-info");
var constants_1 = require("@devexpress/utils/lib/constants");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var constants_2 = require("../../utils/constants");
var string_value_parser_1 = require("../../utils/string-value-parser");
var units_converter_1 = require("../../utils/units-converter");
var xml_chars_decoder_1 = require("../../utils/xml-chars-decoder");
var culture_info_helper_1 = require("./culture-info-helper");
var markup_language_color_parser_1 = require("./markup-language-color-parser");
var ReaderHelper = (function () {
    function ReaderHelper(data) {
        this.data = data;
    }
    ReaderHelper.prototype.searchInTable = function (value, table, defaultValue, extendedSearch) {
        if (extendedSearch === void 0) { extendedSearch = true; }
        var val = table[value];
        if (val !== undefined)
            return val.modelValue;
        if (extendedSearch) {
            var foundByBruteForce = string_1.StringMapUtils.elementBy(table, function (elem) {
                return elem.mlValue.openXmlValue == value || elem.mlValue.wordMLValue == value;
            });
            return foundByBruteForce !== null ? foundByBruteForce.modelValue : defaultValue;
        }
        return defaultValue;
    };
    ReaderHelper.prototype.readAttribute = function (reader, attributeName) {
        var result = reader.getAttributeNS(attributeName, this.data.constants.namespaces[constants_2.DocxNsType.WordProcessing].namespace);
        return string_2.StringUtils.isNullOrEmpty(result) ? reader.getAttribute(attributeName) : result;
    };
    ReaderHelper.prototype.readAttributeWithNs = function (reader, attributeName, ns) {
        return reader.getAttributeNS(attributeName, ns);
    };
    ReaderHelper.prototype.isBool = function (value) { return value == 't'; };
    ReaderHelper.prototype.isBoolStrict = function (value) {
        if (value == '1' || value == 'on' || value == 'true' || value == 't')
            return true;
        if (value == '0' || value == 'off' || value == 'false' || value == 'f')
            return false;
        this.data.options.throwInvalidFile('Not expected Bool value');
        return false;
    };
    ReaderHelper.prototype.decodeXmlChars = function (val) {
        return xml_chars_decoder_1.XmlCharsDecoder.decode(val);
    };
    ReaderHelper.prototype.getWpSTOnOffValue = function (reader, attributeName, defaultValue) {
        if (defaultValue === void 0) { defaultValue = true; }
        var value = this.readAttribute(reader, attributeName);
        return this.getOnOffValueBool(value, defaultValue);
    };
    ReaderHelper.prototype.getOnOffValue = function (reader, attributeName, defaultValue) {
        if (defaultValue === void 0) { defaultValue = true; }
        var value = reader.getAttributeNS(attributeName, null);
        return this.getOnOffValueBool(value, defaultValue);
    };
    ReaderHelper.prototype.getOnOffValueBool = function (value, defaultValue) {
        return string_2.StringUtils.isNullOrEmpty(value) ? defaultValue : this.isBoolStrict(value);
    };
    ReaderHelper.prototype.getWpSTOnOffNullValue = function (reader, attributeName) {
        return string_2.StringUtils.isNullOrEmpty(reader.getAttribute(attributeName)) ?
            null :
            this.getWpSTOnOffValue(reader, attributeName);
    };
    ReaderHelper.prototype.getWpSTIntegerValue = function (reader, attributeName, defaultValue, radix) {
        if (defaultValue === void 0) { defaultValue = constants_1.Constants.MIN_SAFE_INTEGER; }
        if (radix === void 0) { radix = 10; }
        var value = this.readAttribute(reader, attributeName);
        return this.getIntegerValueCore(value, defaultValue, radix);
    };
    ReaderHelper.prototype.getIntegerValueInPoints = function (reader, attributeName, defaultValue) {
        var value = reader.getAttribute(attributeName);
        return string_2.StringUtils.isNullOrEmpty(value) ?
            constants_1.Constants.MIN_SAFE_INTEGER :
            this.getIntegerValueCore(value.replace('pt', ''), defaultValue);
    };
    ReaderHelper.prototype.getIntegerValue = function (reader, attributeName, defaultValue) {
        var value = reader.getAttribute(attributeName);
        return this.getIntegerValueCore(value, defaultValue);
    };
    ReaderHelper.prototype.parseIntStrict = function (value, radix) {
        if (/^(\-|\+)?([0-9]+|Infinity)$/.test(value))
            return parseInt(value, radix);
        return NaN;
    };
    ReaderHelper.prototype.parseFloatStrict = function (value) {
        if (/^(\-|\+)?([0-9.,]+|Infinity)$/.test(value))
            return Number(value);
        return NaN;
    };
    ReaderHelper.prototype.getIntegerValueCore = function (value, defaultValue, radix) {
        if (radix === void 0) { radix = 10; }
        if (string_2.StringUtils.isNullOrEmpty(value))
            return defaultValue;
        var intResultStrict = this.parseIntStrict(value, radix);
        if (!isNaN(intResultStrict))
            return intResultStrict;
        var floatResultStrict = this.parseFloatStrict(value);
        if (!isNaN(floatResultStrict))
            return floatResultStrict;
        if (this.data.constants.strictMode) {
            var valueInfo = string_value_parser_1.StringValueParser.parse(value);
            return Math.round(units_converter_1.UnitsConverter.valueUnitToModelUnitsF(valueInfo));
        }
        if (this.data.options.allowIntPercentage && string_2.StringUtils.endsAt(value, '%')) {
            value = value.substring(0, value.length - 1);
            var val = parseInt(value, 10);
            if (!isNaN(val))
                return val * 1000;
        }
        if (this.data.options.ignoreParseErrors)
            return defaultValue;
        var intResult = parseInt(value, radix);
        if (!isNaN(intResult))
            return intResult;
        var floatResult = parseFloat(value);
        if (!isNaN(floatResult))
            return floatResult;
        this.data.options.throwInvalidFile('Not expected integer value');
        return null;
    };
    ReaderHelper.prototype.getIntegerNullableValue = function (reader, attr) {
        var value = this.readAttribute(reader, attr);
        return string_2.StringUtils.isNullOrEmpty(value) ?
            null :
            this.getIntegerValueCore(value, constants_1.Constants.MIN_SAFE_INTEGER);
    };
    ReaderHelper.prototype.getFloatValueInPoints = function (reader, attributeName, defaultValue) {
        var value = reader.getAttribute(attributeName);
        return string_2.StringUtils.isNullOrEmpty(value) ?
            constants_1.Constants.MIN_SAFE_INTEGER :
            this.getFloatValue(value.replace('pt', ''), defaultValue);
    };
    ReaderHelper.prototype.getFloatValue = function (value, defaultValue) {
        if (string_2.StringUtils.isNullOrEmpty(value))
            return defaultValue;
        var res = parseFloat(value);
        return isNaN(res) ? constants_1.Constants.MIN_SAFE_INTEGER : res;
    };
    ReaderHelper.prototype.getWpEnumValue = function (reader, attributeName, table, defaultValue, ns) {
        var value = ns == undefined ?
            this.readAttribute(reader, attributeName) :
            this.readAttributeWithNs(reader, attributeName, ns);
        return string_2.StringUtils.isNullOrEmpty(value) ? defaultValue : this.getWpEnumValueCore(value, table, defaultValue);
    };
    ReaderHelper.prototype.getWpEnumValueCore = function (value, table, defaultValue) {
        return this.searchInTable(value, table, defaultValue, true);
    };
    ReaderHelper.prototype.getWpEnumOnOffNullValue = function (reader, attributeName, table) {
        var value = this.readAttribute(reader, attributeName);
        return string_2.StringUtils.isNullOrEmpty(value) ? null : this.getWpEnumOnOffNullValueCore(value, table);
    };
    ReaderHelper.prototype.getWpSTColorOrNullValue = function (reader, attributeName) {
        var value = reader.getAttributeNS(attributeName, this.data.constants.namespaces[constants_2.DocxNsType.WordProcessing].namespace);
        if (string_2.StringUtils.isNullOrEmpty(value))
            return null;
        return this.parseColor(value, dx_color_1.DXColor.empty);
    };
    ReaderHelper.prototype.getWpSTColorValue = function (reader, attributeName, defaultValue) {
        if (defaultValue === void 0) { defaultValue = dx_color_1.DXColor.empty; }
        var value = reader.getAttributeNS(attributeName, this.data.constants.namespaces[constants_2.DocxNsType.WordProcessing].namespace);
        return string_2.StringUtils.isNullOrEmpty(value) ? defaultValue : this.parseColor(value, defaultValue);
    };
    ReaderHelper.prototype.parseColor = function (value, defaultValue) {
        if (value == 'auto')
            return defaultValue;
        var result = markup_language_color_parser_1.MarkupLanguageColorParser.parseColor(value);
        return result == dx_color_1.DXColor.empty ? defaultValue : result;
    };
    ReaderHelper.prototype.convertToInt = function (value) {
        return this.getIntegerValueCore(value, constants_1.Constants.MIN_SAFE_INTEGER, 16);
    };
    ReaderHelper.prototype.readLanguage = function (reader) {
        var bidi = this.createCultureInfoFromString(reader.getAttributeNS('bidi', this.data.constants.wordProcessingNamespaceConst));
        var eastAsia = this.createCultureInfoFromString(reader.getAttributeNS('eastAsia', this.data.constants.wordProcessingNamespaceConst));
        var latin = this.createCultureInfoFromString(reader.getAttributeNS('val', this.data.constants.wordProcessingNamespaceConst));
        return new lang_info_1.LangInfo(bidi ? bidi.name : null, eastAsia ? eastAsia.name : null, latin ? latin.name : null);
    };
    ReaderHelper.prototype.getWpEnumOnOffNullValueCore = function (value, table) {
        return this.searchInTable(value, table, null, false);
    };
    ReaderHelper.prototype.createCultureInfoFromString = function (value) {
        try {
            if (!string_2.StringUtils.isNullOrEmpty(value)) {
                if (comparers_1.Comparers.string(value, 'x-none') == 0)
                    return null;
                var cultureId = parseInt(value, 10);
                return isNaN(cultureId) ? new culture_info_1.CultureInfo(value) : culture_info_helper_1.CultureInfoHelper.createCultureInfo(cultureId);
            }
        }
        catch (err) { }
        return null;
    };
    return ReaderHelper;
}());
exports.ReaderHelper = ReaderHelper;
