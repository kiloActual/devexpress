"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var extension_helper_1 = require("../../../core/formats/utils/extension-helper");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var path_helper_1 = require("../../utils/path-helper");
var string_extensions_1 = require("../../utils/string-extensions");
var relationships_destination_1 = require("../destination/relationships/relationships-destination");
var RelationsCollection = (function () {
    function RelationsCollection(data) {
        this.data = data;
        this.list = [];
    }
    RelationsCollection.prototype.init = function (path) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var reader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.data.archiveData.getXmlReader(path)];
                    case 1:
                        reader = _a.sent();
                        if (!reader)
                            return [2];
                        if (!reader.readToFollowingNS('Relationships', this.data.constants.rels.packageRelsNamespace)) return [3, 3];
                        return [4, this.data.importContent(reader, new relationships_destination_1.RelationshipsDestination(this.data, this))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    RelationsCollection.prototype.add = function (rel) {
        this.list.push(rel);
    };
    RelationsCollection.prototype.lookupRelationById = function (id) {
        return list_1.ListUtils.elementBy(this.list, function (rel) { return rel.id == id; });
    };
    RelationsCollection.prototype.lookupRelationByType = function (type) {
        return list_1.ListUtils.elementBy(this.list, function (rel) { return rel.type == type; });
    };
    RelationsCollection.prototype.lookupRelationByTargetAndType = function (target, type) {
        return list_1.ListUtils.elementBy(this.list, function (rel) { return rel.target == target && rel.type == type; });
    };
    RelationsCollection.prototype.generateId = function () {
        return "rId" + (this.list.length + 1);
    };
    RelationsCollection.prototype.lookupExternalRelationById = function (relationId) {
        var relation = this.lookupRelationById(relationId);
        return !relation.targetMode || string_extensions_1.StringExtensions.compareInvariantCultureIgnoreCase(relation.targetMode, 'external') != 0 ? null : relation;
    };
    RelationsCollection.prototype.lookupRelationTargetById = function (id, rootFolder, defaultFileName) {
        var relation = this.lookupRelationById(id);
        return path_helper_1.PathHelper.normalize(this.calculateRelationTargetCore(relation, rootFolder, defaultFileName));
    };
    RelationsCollection.prototype.lookupPackageFileStreamByRelationId = function (relationId, rootFolder) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fileName;
            return tslib_1.__generator(this, function (_a) {
                fileName = this.lookupRelationTargetById(relationId, rootFolder, '');
                return [2, this.data.archiveData.getXmlReader(fileName)];
            });
        });
    };
    RelationsCollection.prototype.lookupRelationTargetByType = function (type, rootFolder, defaultFileName) {
        var relation = this.lookupRelationByType(type);
        if (!relation) {
            relation = this.lookupRelationByType(this.data.constants.translateToStrict(type));
            if (relation != null)
                this.data.constants.setStrictOpenXml();
        }
        return path_helper_1.PathHelper.normalize(this.calculateRelationTargetCore(relation, rootFolder, defaultFileName));
    };
    RelationsCollection.prototype.lookupExternalImageByRelationId = function (relationId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var relation, imgInfo;
            return tslib_1.__generator(this, function (_a) {
                relation = this.lookupExternalRelationById(relationId);
                if (!relation)
                    return [2, null];
                imgInfo = this.data.documentModel.cache.imageCache.createUnloadedInfoByUrl(relation.target);
                this.data.imageRelationToCacheMap[relation.target] = imgInfo.tmpId;
                return [2, imgInfo.tmpId];
            });
        });
    };
    RelationsCollection.prototype.lookupImageByRelationId = function (relationId, rootFolder) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fileName, base64Data, prefix, imgInfo;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileName = this.lookupRelationTargetById(relationId, rootFolder, '');
                        if (string_1.StringUtils.startsAt(fileName, '/'))
                            fileName = fileName.substring(1);
                        if (this.data.imageRelationToCacheMap[fileName])
                            return [2, this.data.imageRelationToCacheMap[fileName]];
                        return [4, this.data.archiveData.getBase64(fileName)];
                    case 1:
                        base64Data = _a.sent();
                        if (!base64Data)
                            return [2, null];
                        prefix = extension_helper_1.ExtensionHelper.makeBase64UriPrefix(extension_helper_1.ExtensionHelper.convertExtensionToMimeType(path_helper_1.PathHelper.getFileExtension(fileName)));
                        imgInfo = this.data.documentModel.cache.imageCache.createUnloadedInfoByBase64(prefix + base64Data);
                        this.data.imageRelationToCacheMap[fileName] = imgInfo.tmpId;
                        return [2, imgInfo.tmpId];
                }
            });
        });
    };
    RelationsCollection.prototype.calculateRelationTargetCore = function (relation, rootFolder, defaultFileName) {
        if (relation == null)
            return string_1.StringUtils.isNullOrEmpty(rootFolder) ? defaultFileName : rootFolder + '/' + defaultFileName;
        if (string_1.StringUtils.startsAt(relation.target, '/'))
            return relation.target;
        return string_1.StringUtils.isNullOrEmpty(rootFolder) ? relation.target : rootFolder + '/' + relation.target;
    };
    return RelationsCollection;
}());
exports.RelationsCollection = RelationsCollection;
