"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_importer_errors_1 = require("../../core/formats/document-importer-errors");
var section_restorer_1 = require("../../core/formats/model-restorer/section-restorer");
var table_restorer_1 = require("../../core/formats/model-restorer/table-restorer");
var creator_1 = require("../../core/model/creator/creator");
var options_1 = require("../../core/model/creator/options");
var check_all_1 = require("../../core/model/model-checks/check-all");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var path_helper_1 = require("../utils/path-helper");
var zip_reader_1 = require("../zip/zip-reader");
var data_1 = require("./data");
var document_destination_1 = require("./destination/document/document-destination");
var numberings_destination_1 = require("./destination/numbering/numberings-destination");
var settings_1 = require("./destination/settings/settings");
var styles_destination_1 = require("./destination/style/styles-destination");
var office_theme_destination_1 = require("./destination/themes/office-theme-destination");
var Importer = (function () {
    function Importer(options) {
        this.asyncImportFromFile = true;
        this.options = options;
    }
    Importer.prototype.importFromFile = function (blob, modelOptions, callback, reject) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modelCreatorOptions, archiveData, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.reject = reject;
                        this.callback = callback;
                        modelCreatorOptions = new options_1.ModelCreatorOptions();
                        modelCreatorOptions.addParagraph = false;
                        modelCreatorOptions.addSection = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        archiveData = new zip_reader_1.ArchiveData(this.options);
                        return [4, archiveData.init(blob)];
                    case 2:
                        _a.sent();
                        this.data = new data_1.Data(this.options, archiveData, new creator_1.ModelCreator(modelCreatorOptions).createModel(modelOptions).fillModel());
                        if (!blob.size)
                            throw new Error("Empty file");
                        return [4, this.importRootRelations()];
                    case 3:
                        _a.sent();
                        return [4, this.importMainSubDocument()];
                    case 4:
                        _a.sent();
                        table_restorer_1.TableRestorer.paragraphMarkBetween(this.data.documentModel);
                        table_restorer_1.TableRestorer.fixAllTables(this.data.documentModel);
                        section_restorer_1.SectionRestorer.fixLastSection(this.data.documentModel);
                        table_restorer_1.TableRestorer.fixLastParagraphs(this.data.documentModel);
                        if (!new check_all_1.ModelChecker(this.data.documentModel).checkAll())
                            throw new Error();
                        return [3, 6];
                    case 5:
                        err_1 = _a.sent();
                        this.reject(document_importer_errors_1.DocumentImporterErrors.OpenXmlImportError);
                        return [2];
                    case 6:
                        this.callback(this.data.documentModel, this.data.formatImagesImporter);
                        return [2];
                }
            });
        });
    };
    Importer.prototype.importRootRelations = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2, this.data.addRelations('_rels/.rels')];
            });
        });
    };
    Importer.prototype.importMainSubDocument = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var documentFileName, documentReader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        documentFileName = this.data.relationsStack.last.lookupRelationTargetByType(this.data.constants.rels.officeDocumentType, '', 'document.xml');
                        this.data.documentRootFolder = path_helper_1.PathHelper.getDir(documentFileName);
                        return [4, this.data.addRelations(this.data.documentRootFolder + "/_rels/" + path_helper_1.PathHelper.getFileName(documentFileName) + ".rels")];
                    case 1:
                        _a.sent();
                        return [4, this.importSettings()];
                    case 2:
                        _a.sent();
                        return [4, this.importThemes()];
                    case 3:
                        _a.sent();
                        return [4, this.importNumbering()];
                    case 4:
                        _a.sent();
                        return [4, this.importStyles()];
                    case 5:
                        _a.sent();
                        this.linkNumberingListStyles();
                        return [4, this.data.archiveData.getXmlReader(documentFileName)];
                    case 6:
                        documentReader = _a.sent();
                        if (!documentReader.readToFollowingNS('document', this.data.constants.wordProcessingNamespaceConst)) return [3, 8];
                        return [4, this.data.importContent(documentReader, new document_destination_1.DocumentDestination(this.data))];
                    case 7:
                        _a.sent();
                        this.data.sectionImporter.finishSection();
                        this.data.popCurrentSubDocument();
                        return [3, 9];
                    case 8:
                        this.data.options.throwInvalidFile('Not found document element');
                        _a.label = 9;
                    case 9:
                        this.data.relationsStack.pop();
                        return [2];
                }
            });
        });
    };
    Importer.prototype.importStyles = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var styleFileName, stylesReader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        styleFileName = this.data.relationsStack.last.lookupRelationTargetByType(this.data.constants.rels.officeStylesType, this.data.documentRootFolder, 'styles.xml');
                        return [4, this.data.archiveData.getXmlReader(styleFileName)];
                    case 1:
                        stylesReader = _a.sent();
                        if (!(stylesReader && stylesReader.readToFollowingNS('styles', this.data.constants.wordProcessingNamespaceConst))) return [3, 3];
                        this.data.stylesImporter.presetDefaultStyles();
                        return [4, this.data.importContent(stylesReader, new styles_destination_1.StylesDestination(this.data))];
                    case 2:
                        _a.sent();
                        this.data.stylesImporter.determineParents();
                        this.data.stylesImporter.linkStyles();
                        return [3, 4];
                    case 3:
                        this.data.options.throwInvalidFile('Not found style element');
                        _a.label = 4;
                    case 4: return [2];
                }
            });
        });
    };
    Importer.prototype.importThemes = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var themeFileName, themesReader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        themeFileName = this.data.relationsStack.last.lookupRelationTargetByType(this.data.constants.rels.officeThemesType, this.data.documentRootFolder, 'theme/theme1.xml');
                        return [4, this.data.addRelations(this.data.documentRootFolder + "/_rels/theme/theme1.xml.rels")];
                    case 1:
                        _a.sent();
                        return [4, this.data.archiveData.getXmlReader(themeFileName)];
                    case 2:
                        themesReader = _a.sent();
                        if (!(themesReader && themesReader.readToFollowingNS('theme', this.data.constants.drawingMLNamespaceConst))) return [3, 4];
                        return [4, this.data.importContent(themesReader, new office_theme_destination_1.OfficeThemeDestination(this.data))];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        this.data.relationsStack.pop();
                        return [2];
                }
            });
        });
    };
    Importer.prototype.importNumbering = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var numberingFileName, numberingReader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        numberingFileName = this.data.relationsStack.last.lookupRelationTargetByType(this.data.constants.rels.officeNumberingType, this.data.documentRootFolder, 'numbering.xml');
                        return [4, this.data.archiveData.getXmlReader(numberingFileName)];
                    case 1:
                        numberingReader = _a.sent();
                        if (!(numberingReader && numberingReader.readToFollowingNS('numbering', this.data.constants.wordProcessingNamespaceConst))) return [3, 3];
                        return [4, this.data.importContent(numberingReader, new numberings_destination_1.NumberingsDestination(this.data))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.data.stylesImporter.createNumberingLists(this.data.documentModel);
                        return [2];
                }
            });
        });
    };
    Importer.prototype.importSettings = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fileName, reader;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fileName = this.data.relationsStack.last.lookupRelationTargetByType(this.data.constants.rels.officeDocumentSettings, this.data.documentRootFolder, 'settings.xml');
                        return [4, this.data.archiveData.getXmlReader(fileName)];
                    case 1:
                        reader = _a.sent();
                        if (!(reader && reader.readToFollowingNS('settings', this.data.constants.wordProcessingNamespaceConst))) return [3, 3];
                        return [4, this.data.importContent(reader, new settings_1.DocumentSettingsDestination(this.data))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2];
                }
            });
        });
    };
    Importer.prototype.linkNumberingListStyles = function () {
        var _this = this;
        string_1.StringMapUtils.forEach(this.data.stylesImporter.abstractListInfos, function (info) {
            if (info.numberingStyleReferenceIndex != null) {
                var abstractNumList = _this.data.documentModel.abstractNumberingLists[info.abstractNumberingIndex];
                var style = _this.data.stylesImporter.numberingListManager.getStyleById(info.numberingStyleReferenceIndex);
                var abstractRefNumList_1 = _this.data.documentModel.abstractNumberingLists[_this.data.documentModel.numberingLists[style.numberingListIndex].abstractNumberingListIndex];
                list_1.ListUtils.forEach(abstractNumList.levels, function (level, index) {
                    level.copyFrom(abstractRefNumList_1.levels[index]);
                });
            }
        });
    };
    return Importer;
}());
exports.Importer = Importer;
