"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var log_1 = require("../../core/rich-utils/debug/logger/base-logger/log");
var browser_1 = require("@devexpress/utils/lib/browser");
var errors_1 = require("@devexpress/utils/lib/errors");
var string_1 = require("@devexpress/utils/lib/utils/string");
var constants_1 = require("../utils/constants");
var XmlWriter = (function () {
    function XmlWriter(constants) {
        this.rootNamespaces = [];
        this.constants = constants;
    }
    XmlWriter.prototype.initNS = function (rootElementName, rootElementNamespace) {
        this.dom = document.implementation.createDocument(rootElementNamespace, rootElementName, null);
        this.curr = this.dom.documentElement;
        return this;
    };
    XmlWriter.prototype.convertToString = function () {
        var result = new XMLSerializer().serializeToString(this.dom.documentElement);
        if (browser_1.Browser.IE) {
            var additionalMarkup = [];
            var firstTagXml = result.match(/\<.*?\>/)[0];
            for (var _i = 0, _a = this.rootNamespaces; _i < _a.length; _i++) {
                var nsInfo = _a[_i];
                var nsXmlDescription = "xmlns:" + nsInfo.prefix + "=\"" + nsInfo.namespace + "\"";
                if (firstTagXml.search(nsXmlDescription) == -1)
                    additionalMarkup.push(nsXmlDescription);
            }
            return result
                .replace(/xmlns.*?\".*?\"/, "$& " + additionalMarkup.join(' ') + " ")
                .replace('xmlns:xml="http://www.w3.org/XML/1998/namespace"', '');
        }
        return result;
    };
    XmlWriter.prototype.addNamespaceToRootElement = function (type) {
        var nsInfo = this.constants.namespaces[type];
        this.rootNamespaces.push(nsInfo);
        this.dom.documentElement.setAttributeNS('http://www.w3.org/2000/xmlns/', "xmlns" + (string_1.StringUtils.isNullOrEmpty(nsInfo.prefix) ? '' : ":" + nsInfo.prefix), nsInfo.namespace);
    };
    XmlWriter.prototype.elementStart = function (name) {
        this.curr = this.curr.appendChild(this.dom.createElementNS(this.curr.namespaceURI, this.prefixPlusLocalName(this.constants.mapNamespaceToPrefix[this.curr.namespaceURI], name)));
        return this;
    };
    XmlWriter.prototype.elementStartNS = function (docxType, localName) {
        var nsInfo = this.constants.namespaces[docxType];
        this.curr = this.curr.appendChild(this.dom.createElementNS(nsInfo.namespace, this.prefixPlusLocalName(nsInfo.prefix, localName)));
        return this;
    };
    XmlWriter.prototype.endElement = function () {
        this.curr = this.curr.parentNode;
        return this;
    };
    XmlWriter.prototype.attr = function (attrName, value) {
        this.curr.setAttribute(attrName, value);
        return this;
    };
    XmlWriter.prototype.attrNS = function (docxType, attrName, value) {
        var nsInfo = this.constants.namespaces[docxType];
        this.curr.setAttributeNS(nsInfo.namespace, this.prefixPlusLocalName(nsInfo.prefix, attrName), value);
        return this;
    };
    XmlWriter.prototype.writeString = function (text) {
        this.curr.appendChild(this.dom.createTextNode(text));
        return this;
    };
    XmlWriter.prototype.writeRaw = function (str) {
        var nodeList = new DOMParser().parseFromString(str, constants_1.ContentType.xml).documentElement.childNodes;
        for (var ind = nodeList.length; ind > 0; ind--)
            this.curr.appendChild(nodeList[0]);
    };
    XmlWriter.prototype.writeWpEmptyElement = function (tag) {
        this.writeWpStartElement(tag);
        this.endElement();
    };
    XmlWriter.prototype.writeWpStartElement = function (tag) {
        this.elementStartNS(constants_1.DocxNsType.WordProcessing, tag);
    };
    XmlWriter.prototype.writeWpsStartElement = function (tag) {
        this.elementStartNS(constants_1.DocxNsType.Wps, tag);
    };
    XmlWriter.prototype.writeWpDrawingStartElement = function (name) {
        this.elementStartNS(constants_1.DocxNsType.WordProcessingDrawing, name);
    };
    XmlWriter.prototype.writeDrawingStartElement = function (name) {
        this.elementStartNS(constants_1.DocxNsType.DrawingML, name);
    };
    XmlWriter.prototype.writeWp14DrawingStartElement = function (name) {
        this.elementStartNS(constants_1.DocxNsType.WordProcessingDrawing14, name);
    };
    XmlWriter.prototype.writeMcStartElement = function (name) {
        this.elementStartNS(constants_1.DocxNsType.MC, name);
    };
    XmlWriter.prototype.writePicDrawingStartElement = function (name) {
        this.elementStartNS(constants_1.DocxNsType.DrawingMLPicture, name);
    };
    XmlWriter.prototype.writeWpStringValue = function (tag, value) {
        this.writeWpStartElement(tag);
        this.attrNS(constants_1.DocxNsType.WordProcessing, 'val', value);
        this.endElement();
    };
    XmlWriter.prototype.writeWpBoolValue = function (tag, value) {
        this.writeWpStringValue(tag, this.convertBoolToString(value));
    };
    XmlWriter.prototype.writeWpBoolValueAsTag = function (tag, value) {
        if (value) {
            this.writeWpStartElement(tag);
            this.endElement();
        }
    };
    XmlWriter.prototype.writeWpIntValue = function (tag, value) {
        this.writeWpStringValue(tag, value.toString());
    };
    XmlWriter.prototype.writeWpStringAttr = function (attrName, value) {
        var nsInfo = this.constants.namespaces[constants_1.DocxNsType.WordProcessing];
        this.curr.setAttributeNS(nsInfo.namespace, this.prefixPlusLocalName(nsInfo.prefix, attrName), value);
    };
    XmlWriter.prototype.writeWpBoolAttr = function (attr, value) {
        this.writeWpStringAttr(attr, this.convertBoolToString(value));
    };
    XmlWriter.prototype.writeWpIntAttr = function (attr, value) {
        this.writeWpStringAttr(attr, value.toString());
    };
    XmlWriter.prototype.writeDCEmptyElement = function (tag) {
        this.elementStartNS(constants_1.DocxNsType.DC, tag);
        this.endElement();
    };
    XmlWriter.prototype.writeCPEmptyElement = function (tag) {
        this.elementStartNS(constants_1.DocxNsType.CP, tag);
        this.endElement();
    };
    XmlWriter.prototype.writeBoolValue = function (tag, value) {
        this.attr(tag, this.convertBoolToString(value));
    };
    XmlWriter.prototype.writeIntValue = function (tag, value) {
        var intValue = Math.floor(value);
        if (log_1.Log.isDebug && intValue !== value)
            throw new Error(errors_1.Errors.InternalException);
        this.attr(tag, intValue.toString());
    };
    XmlWriter.prototype.writeWpEmptyOrFalseValue = function (tag, value) {
        if (value)
            this.writeWpEmptyElement(tag);
        else
            this.writeWpBoolValue(tag, false);
    };
    XmlWriter.prototype.prefixPlusLocalName = function (prefix, localName) {
        return string_1.StringUtils.isNullOrEmpty(prefix) ? localName : prefix + ":" + localName;
    };
    XmlWriter.prototype.convertBoolToString = function (value) {
        return value ? '1' : '0';
    };
    return XmlWriter;
}());
exports.XmlWriter = XmlWriter;
