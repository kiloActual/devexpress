"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var JSZip = require("jszip");
var xml_reader_1 = require("./xml-reader");
var ArchiveData = (function () {
    function ArchiveData(options) {
        this.options = options;
        this.entryMap = {};
    }
    ArchiveData.prototype.init = function (blob) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var that, zip, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        that = this;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, JSZip.loadAsync(blob, {})];
                    case 2:
                        zip = _a.sent();
                        zip.forEach(function (relativePath, zipEntry) {
                            that.entryMap[relativePath] = zipEntry;
                        });
                        return [3, 4];
                    case 3:
                        err_1 = _a.sent();
                        console.log("Cannot open file: " + err_1);
                        return [3, 4];
                    case 4: return [2];
                }
            });
        });
    };
    ArchiveData.prototype.getXmlReader = function (filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entry, _a, err_2;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        entry = this.entryMap[filePath];
                        if (!entry)
                            return [2, null];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = xml_reader_1.XmlReader.bind;
                        return [4, entry.async('text')];
                    case 2: return [2, new (_a.apply(xml_reader_1.XmlReader, [void 0, _b.sent(), this.options, filePath]))()];
                    case 3:
                        err_2 = _b.sent();
                        return [2, null];
                    case 4: return [2];
                }
            });
        });
    };
    ArchiveData.prototype.getBase64 = function (filePath) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entry, err_3;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entry = this.entryMap[filePath];
                        if (!entry)
                            return [2, null];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4, entry.async('base64')];
                    case 2: return [2, _a.sent()];
                    case 3:
                        err_3 = _a.sent();
                        console.log("Cannot get base46: " + err_3);
                        return [2, null];
                    case 4: return [2];
                }
            });
        });
    };
    return ArchiveData;
}());
exports.ArchiveData = ArchiveData;
