"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var relative_rect_1 = require("../../../base-utils/relative-rect");
var enums_1 = require("../../../core/model/floating-objects/enums");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var InlineDrawingObject = (function () {
    function InlineDrawingObject(run) {
        this.run = run;
    }
    Object.defineProperty(InlineDrawingObject.prototype, "fillColor", {
        get: function () { return this.run.shape.fillColor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "isFloatingObject", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "containerProperties", {
        get: function () { return this.run.info.containerProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "nonVisualDrawingObjectProperties", {
        get: function () { return this.run.info.nonVisualDrawingProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "actualSize", {
        get: function () { return this.run.size.actualSize; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "rotation", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "lockAspectRatio", {
        get: function () { return this.run.size.lockAspectRatio; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "allowOverlap", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "isBehindDoc", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "layoutInTableCell", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "locked", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "zOrder", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useBottomDistance", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "bottomDistance", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useLeftDistance", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "leftDistance", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useRightDistance", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "rightDistance", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useTopDistance", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "topDistance", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useHidden", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "hidden", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "horizontalPositionAlignment", {
        get: function () { return enums_1.AnchorObjectHorizontalPositionAlignment.None; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "horizontalPositionType", {
        get: function () { return enums_1.AnchorObjectHorizontalPositionType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "usePercentOffset", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "verticalPositionAlignment", {
        get: function () { return enums_1.AnchorObjectVerticalPositionAlignment.None; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "verticalPositionType", {
        get: function () { return enums_1.AnchorObjectVerticalPositionType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useLockAspectRatio", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useRotation", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "textWrapType", {
        get: function () { return enums_1.AnchorObjectTextWrapType.None; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "textWrapSide", {
        get: function () { return enums_1.AnchorObjectTextWrapSide.Left; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "shape", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useRelativeWidth", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "useRelativeHeight", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "relativeSize", {
        get: function () { return new size_1.Size(0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "relativeHeightType", {
        get: function () { return enums_1.RelativeHeightType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "relativeWidthType", {
        get: function () { return enums_1.RelativeWidthType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "offset", {
        get: function () { return new point_1.Point(0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "percentOffset", {
        get: function () { return new point_1.Point(0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "hyperlinkInfo", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "sourceRect", {
        get: function () { return new relative_rect_1.RelativeRect(0, 0, 0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InlineDrawingObject.prototype, "isTextBox", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    return InlineDrawingObject;
}());
exports.InlineDrawingObject = InlineDrawingObject;
var AnchoredDrawingObject = (function () {
    function AnchoredDrawingObject(run) {
        this.run = run;
    }
    Object.defineProperty(AnchoredDrawingObject.prototype, "fillColor", {
        get: function () { return this.run.shape.fillColor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "isFloatingObject", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "containerProperties", {
        get: function () {
            return this.isTextBox ? this.run.containerProperties :
                this.run.info.containerProperties;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "nonVisualDrawingObjectProperties", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "actualSize", {
        get: function () { return this.run.size.actualSize; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "rotation", {
        get: function () { return this.run.size.rotation; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "lockAspectRatio", {
        get: function () { return this.run.size.lockAspectRatio; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "allowOverlap", {
        get: function () { return this.run.anchorInfo.allowOverlap; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "isBehindDoc", {
        get: function () { return this.run.anchorInfo.isBehindDoc; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "layoutInTableCell", {
        get: function () { return this.run.anchorInfo.layoutTableCell; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "locked", {
        get: function () { return this.run.anchorInfo.locked; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "zOrder", {
        get: function () { return this.run.anchorInfo.zOrder; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useBottomDistance", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "bottomDistance", {
        get: function () { return this.run.anchorInfo.bottomDistance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useLeftDistance", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "leftDistance", {
        get: function () { return this.run.anchorInfo.leftDistance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useRightDistance", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "rightDistance", {
        get: function () { return this.run.anchorInfo.rightDistance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useTopDistance", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "topDistance", {
        get: function () { return this.run.anchorInfo.topDistance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useHidden", {
        get: function () { return this.run.anchorInfo.hidden; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "hidden", {
        get: function () { return this.run.anchorInfo.hidden; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "horizontalPositionAlignment", {
        get: function () { return this.run.anchorInfo.horizontalPositionAlignment; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "horizontalPositionType", {
        get: function () { return this.run.anchorInfo.horizontalPositionType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "usePercentOffset", {
        get: function () { return this.run.anchorInfo.percentOffset.x > 0 || this.run.anchorInfo.percentOffset.y > 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "verticalPositionAlignment", {
        get: function () { return this.run.anchorInfo.verticalPositionAlignment; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "verticalPositionType", {
        get: function () { return this.run.anchorInfo.verticalPositionType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useLockAspectRatio", {
        get: function () { return this.run.size.lockAspectRatio; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useRotation", {
        get: function () { return !!this.run.size.rotation; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "textWrapType", {
        get: function () { return this.run.anchorInfo.wrapType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "textWrapSide", {
        get: function () { return this.run.anchorInfo.wrapSide; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "shape", {
        get: function () { return this.run.shape; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useRelativeWidth", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "useRelativeHeight", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "relativeSize", {
        get: function () { return new size_1.Size(0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "relativeHeightType", {
        get: function () { return enums_1.RelativeHeightType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "relativeWidthType", {
        get: function () { return enums_1.RelativeWidthType.Page; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "offset", {
        get: function () { return this.run.anchorInfo.offset; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "percentOffset", {
        get: function () { return this.run.anchorInfo.percentOffset; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "hyperlinkInfo", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "sourceRect", {
        get: function () { return new relative_rect_1.RelativeRect(0, 0, 0, 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingObject.prototype, "isTextBox", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    return AnchoredDrawingObject;
}());
exports.AnchoredDrawingObject = AnchoredDrawingObject;
var AnchoredDrawingPictureObject = (function (_super) {
    tslib_1.__extends(AnchoredDrawingPictureObject, _super);
    function AnchoredDrawingPictureObject(run) {
        return _super.call(this, run) || this;
    }
    return AnchoredDrawingPictureObject;
}(AnchoredDrawingObject));
exports.AnchoredDrawingPictureObject = AnchoredDrawingPictureObject;
var AnchoredDrawingTextObject = (function (_super) {
    tslib_1.__extends(AnchoredDrawingTextObject, _super);
    function AnchoredDrawingTextObject(run) {
        return _super.call(this, run) || this;
    }
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "actualSize", {
        get: function () { return new size_1.Size(this.run.size.absoluteSize.width, this.run.size.absoluteSize.height); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "useRelativeWidth", {
        get: function () { return !this.run.size.useAbsoluteWidth(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "useRelativeHeight", {
        get: function () { return !this.run.size.useAbsoluteHeight(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "relativeSize", {
        get: function () { return this.run.size.relativeSize; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "relativeHeightType", {
        get: function () { return this.run.size.relativeHeightType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "relativeWidthType", {
        get: function () { return this.run.size.relativeWidthType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "textBoxProperties", {
        get: function () { return this.run.textBoxProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnchoredDrawingTextObject.prototype, "isTextBox", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    return AnchoredDrawingTextObject;
}(AnchoredDrawingObject));
exports.AnchoredDrawingTextObject = AnchoredDrawingTextObject;
