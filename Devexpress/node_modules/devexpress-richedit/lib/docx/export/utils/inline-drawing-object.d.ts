import { RelativeRect } from '../../../base-utils/relative-rect';
import { HyperlinkInfo } from '../../../core/model/fields/field';
import { AnchorObjectHorizontalPositionAlignment, AnchorObjectHorizontalPositionType, AnchorObjectTextWrapSide, AnchorObjectTextWrapType, AnchorObjectVerticalPositionAlignment, AnchorObjectVerticalPositionType, RelativeHeightType, RelativeWidthType } from '../../../core/model/floating-objects/enums';
import { TextBoxProperties } from '../../../core/model/floating-objects/text-box-properties';
import { NonVisualDrawingObjectInfo } from '../../../core/model/manipulators/picture-manipulator/non-visual-drawing-object-info';
import { AnchoredPictureRun } from '../../../core/model/runs/anchored-picture-run';
import { AnchoredTextBoxRun } from '../../../core/model/runs/anchored-text-box-run';
import { InlinePictureRun } from '../../../core/model/runs/inline-picture-run';
import { Shape } from '../../../core/model/shapes/shape';
import { Point } from '@devexpress/utils/lib/geometry/point';
import { Size } from '@devexpress/utils/lib/geometry/size';
export interface IOpenXMLDrawingObject {
    isFloatingObject: boolean;
    containerProperties: NonVisualDrawingObjectInfo;
    nonVisualDrawingObjectProperties: NonVisualDrawingObjectInfo;
    actualSize: Size;
    rotation: number;
    lockAspectRatio: boolean;
    allowOverlap: boolean;
    isBehindDoc: boolean;
    layoutInTableCell: boolean;
    locked: boolean;
    zOrder: number;
    useBottomDistance: boolean;
    bottomDistance: number;
    useLeftDistance: boolean;
    leftDistance: number;
    useRightDistance: boolean;
    rightDistance: number;
    useTopDistance: boolean;
    topDistance: number;
    useHidden: boolean;
    hidden: boolean;
    horizontalPositionAlignment: AnchorObjectHorizontalPositionAlignment;
    horizontalPositionType: AnchorObjectHorizontalPositionType;
    usePercentOffset: boolean;
    verticalPositionAlignment: AnchorObjectVerticalPositionAlignment;
    verticalPositionType: AnchorObjectVerticalPositionType;
    useLockAspectRatio: boolean;
    useRotation: boolean;
    textWrapType: AnchorObjectTextWrapType;
    textWrapSide: AnchorObjectTextWrapSide;
    shape: Shape;
    useRelativeWidth: boolean;
    useRelativeHeight: boolean;
    relativeSize: Size;
    relativeHeightType: RelativeHeightType;
    relativeWidthType: RelativeWidthType;
    offset: Point;
    percentOffset: Point;
    hyperlinkInfo: HyperlinkInfo;
    sourceRect: RelativeRect;
    isTextBox: boolean;
}
export declare class InlineDrawingObject implements IOpenXMLDrawingObject {
    private run;
    constructor(run: InlinePictureRun);
    readonly fillColor: number;
    readonly isFloatingObject: boolean;
    readonly containerProperties: NonVisualDrawingObjectInfo;
    readonly nonVisualDrawingObjectProperties: NonVisualDrawingObjectInfo;
    readonly actualSize: Size;
    readonly rotation: number;
    readonly lockAspectRatio: boolean;
    readonly allowOverlap: boolean;
    readonly isBehindDoc: boolean;
    readonly layoutInTableCell: boolean;
    readonly locked: boolean;
    readonly zOrder: number;
    readonly useBottomDistance: boolean;
    readonly bottomDistance: number;
    readonly useLeftDistance: boolean;
    readonly leftDistance: number;
    readonly useRightDistance: boolean;
    readonly rightDistance: number;
    readonly useTopDistance: boolean;
    readonly topDistance: number;
    readonly useHidden: boolean;
    readonly hidden: boolean;
    readonly horizontalPositionAlignment: AnchorObjectHorizontalPositionAlignment;
    readonly horizontalPositionType: AnchorObjectHorizontalPositionType;
    readonly usePercentOffset: boolean;
    readonly verticalPositionAlignment: AnchorObjectVerticalPositionAlignment;
    readonly verticalPositionType: AnchorObjectVerticalPositionType;
    readonly useLockAspectRatio: boolean;
    readonly useRotation: boolean;
    readonly textWrapType: AnchorObjectTextWrapType;
    readonly textWrapSide: AnchorObjectTextWrapSide;
    readonly shape: Shape;
    readonly useRelativeWidth: boolean;
    readonly useRelativeHeight: boolean;
    readonly relativeSize: Size;
    readonly relativeHeightType: RelativeHeightType;
    readonly relativeWidthType: RelativeWidthType;
    readonly offset: Point;
    readonly percentOffset: Point;
    readonly hyperlinkInfo: HyperlinkInfo;
    readonly sourceRect: RelativeRect;
    readonly isTextBox: boolean;
}
export declare class AnchoredDrawingObject<TRun extends AnchoredPictureRun | AnchoredTextBoxRun> implements IOpenXMLDrawingObject {
    protected run: TRun;
    constructor(run: TRun);
    readonly fillColor: number;
    readonly isFloatingObject: boolean;
    readonly containerProperties: NonVisualDrawingObjectInfo;
    readonly nonVisualDrawingObjectProperties: NonVisualDrawingObjectInfo;
    readonly actualSize: Size;
    readonly rotation: number;
    readonly lockAspectRatio: boolean;
    readonly allowOverlap: boolean;
    readonly isBehindDoc: boolean;
    readonly layoutInTableCell: boolean;
    readonly locked: boolean;
    readonly zOrder: number;
    readonly useBottomDistance: boolean;
    readonly bottomDistance: number;
    readonly useLeftDistance: boolean;
    readonly leftDistance: number;
    readonly useRightDistance: boolean;
    readonly rightDistance: number;
    readonly useTopDistance: boolean;
    readonly topDistance: number;
    readonly useHidden: boolean;
    readonly hidden: boolean;
    readonly horizontalPositionAlignment: AnchorObjectHorizontalPositionAlignment;
    readonly horizontalPositionType: AnchorObjectHorizontalPositionType;
    readonly usePercentOffset: boolean;
    readonly verticalPositionAlignment: AnchorObjectVerticalPositionAlignment;
    readonly verticalPositionType: AnchorObjectVerticalPositionType;
    readonly useLockAspectRatio: boolean;
    readonly useRotation: boolean;
    readonly textWrapType: AnchorObjectTextWrapType;
    readonly textWrapSide: AnchorObjectTextWrapSide;
    readonly shape: Shape;
    readonly useRelativeWidth: boolean;
    readonly useRelativeHeight: boolean;
    readonly relativeSize: Size;
    readonly relativeHeightType: RelativeHeightType;
    readonly relativeWidthType: RelativeWidthType;
    readonly offset: Point;
    readonly percentOffset: Point;
    readonly hyperlinkInfo: HyperlinkInfo;
    readonly sourceRect: RelativeRect;
    readonly isTextBox: boolean;
}
export declare class AnchoredDrawingPictureObject extends AnchoredDrawingObject<AnchoredPictureRun> {
    constructor(run: AnchoredPictureRun);
}
export declare class AnchoredDrawingTextObject extends AnchoredDrawingObject<AnchoredTextBoxRun> {
    constructor(run: AnchoredTextBoxRun);
    readonly actualSize: Size;
    readonly useRelativeWidth: boolean;
    readonly useRelativeHeight: boolean;
    readonly relativeSize: Size;
    readonly relativeHeightType: RelativeHeightType;
    readonly relativeWidthType: RelativeWidthType;
    readonly textBoxProperties: TextBoxProperties;
    readonly isTextBox: boolean;
}
//# sourceMappingURL=inline-drawing-object.d.ts.map
