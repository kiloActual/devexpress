"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("../../utils/constants");
var base_1 = require("./base");
var CorePropertiesExporter = (function (_super) {
    tslib_1.__extends(CorePropertiesExporter, _super);
    function CorePropertiesExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CorePropertiesExporter.prototype, "filePath", {
        get: function () { return 'docProps/core.xml'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CorePropertiesExporter.prototype, "rootElement", {
        get: function () { return 'coreProperties'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CorePropertiesExporter.prototype, "rootNSPrefix", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.CP].prefix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CorePropertiesExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.CP].namespace; },
        enumerable: true,
        configurable: true
    });
    CorePropertiesExporter.prototype.fillWriter = function () {
        this.registerNamespaces();
        this.writer.writeDCEmptyElement('title');
        this.writer.writeDCEmptyElement('subject');
        this.writer.writeDCEmptyElement('creator');
        this.writer.writeCPEmptyElement('keywords');
        this.writer.writeDCEmptyElement('description');
        this.writer.writeCPEmptyElement('lastModifiedBy');
        this.writer.elementStartNS(constants_1.DocxNsType.CP, 'revision');
        this.writer.writeString('1');
        this.writer.endElement();
        var date = this.getDateTime();
        this.writer.elementStartNS(constants_1.DocxNsType.DcTerms, 'created');
        this.writer.attrNS(constants_1.DocxNsType.Xsi, 'type', 'dcterms:W3CDTF');
        this.writer.writeString(date);
        this.writer.endElement();
        this.writer.elementStartNS(constants_1.DocxNsType.DcTerms, 'modified');
        this.writer.attrNS(constants_1.DocxNsType.Xsi, 'type', 'dcterms:W3CDTF');
        this.writer.writeString(date);
        this.writer.endElement();
    };
    CorePropertiesExporter.prototype.registerNamespaces = function () {
        this.writer.addNamespaceToRootElement(constants_1.DocxNsType.DC);
        this.writer.addNamespaceToRootElement(constants_1.DocxNsType.DcTerms);
        this.writer.addNamespaceToRootElement(constants_1.DocxNsType.DcmiType);
        this.writer.addNamespaceToRootElement(constants_1.DocxNsType.Xsi);
    };
    CorePropertiesExporter.prototype.getDateTime = function () {
        var date = new Date();
        var dateString = date.getFullYear() + '-' + this.getLastTwoSlice(date.getMonth() + 1) + '-' + this.getLastTwoSlice(date.getDate());
        var timeString = 'T' + this.getLastTwoSlice(date.getHours()) + ':' + this.getLastTwoSlice(date.getMinutes()) + ':' + this.getLastTwoSlice(date.getSeconds()) + 'Z';
        return dateString + timeString;
    };
    CorePropertiesExporter.prototype.getLastTwoSlice = function (value) {
        return ('0' + value).slice(-2);
    };
    return CorePropertiesExporter;
}(base_1.ExporterBaseWithRootElement));
exports.CorePropertiesExporter = CorePropertiesExporter;
