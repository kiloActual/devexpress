"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var constants_1 = require("../../utils/constants");
var base_1 = require("./base");
var numberings_1 = require("./numberings");
var ContentTypesExporter = (function (_super) {
    tslib_1.__extends(ContentTypesExporter, _super);
    function ContentTypesExporter(data) {
        var _this = _super.call(this, data) || this;
        _this.usedContentTypes = {};
        _this.overriddenContentTypes = {};
        _this.registerContentType('rels', constants_1.ContentType.relations);
        _this.registerContentType('xml', constants_1.ContentType.xml);
        _this.registerContentTypeOverride('/word/document.xml', constants_1.ContentType.mainDocument);
        if (numberings_1.NumberingsExporter.shouldExportNumbering(data.model))
            _this.registerContentTypeOverride('/word/numbering.xml', constants_1.ContentType.numbering);
        _this.registerContentTypeOverride('/word/styles.xml', constants_1.ContentType.styles);
        _this.registerContentTypeOverride('/word/settings.xml', constants_1.ContentType.settings);
        _this.registerContentTypeOverride('/docProps/core.xml', constants_1.ContentType.coreProperties);
        return _this;
    }
    Object.defineProperty(ContentTypesExporter.prototype, "filePath", {
        get: function () { return '[Content_Types].xml'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContentTypesExporter.prototype, "rootElement", {
        get: function () { return 'Types'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContentTypesExporter.prototype, "rootNSPrefix", {
        get: function () { return ''; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContentTypesExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.ContentTypes].namespace; },
        enumerable: true,
        configurable: true
    });
    ContentTypesExporter.prototype.registerContentTypeOverride = function (partName, contentType) {
        this.overriddenContentTypes[partName] = contentType;
    };
    ContentTypesExporter.prototype.registerContentType = function (partName, contentType) {
        this.usedContentTypes[partName] = contentType;
    };
    ContentTypesExporter.prototype.fillWriter = function () {
        var _this = this;
        string_1.StringMapUtils.forEach(this.usedContentTypes, function (contentType, extension) {
            _this.writer.elementStart('Default');
            _this.writer.attr('Extension', extension);
            _this.writer.attr('ContentType', contentType);
            _this.writer.endElement();
        });
        string_1.StringMapUtils.forEach(this.overriddenContentTypes, function (contentType, partName) {
            _this.writer.elementStart('Override');
            _this.writer.attr('PartName', partName);
            _this.writer.attr('ContentType', contentType);
            _this.writer.endElement();
        });
    };
    return ContentTypesExporter;
}(base_1.ExporterBaseWithRootElement));
exports.ContentTypesExporter = ContentTypesExporter;
