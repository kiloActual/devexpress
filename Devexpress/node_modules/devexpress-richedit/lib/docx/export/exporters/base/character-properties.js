"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_style_1 = require("../../../../core/model/character/character-style");
var enums_1 = require("../../../../core/model/character/enums");
var color_1 = require("../../../../core/model/color/color");
var dx_color_1 = require("../../../../core/model/color/dx-color");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var word_processing_mlvalue_1 = require("../../../translation-table/word-processing-mlvalue");
var writer_helper_1 = require("../../utils/writer-helper");
var base_1 = require("../base");
var CharacterPropertiesExporter = (function (_super) {
    tslib_1.__extends(CharacterPropertiesExporter, _super);
    function CharacterPropertiesExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CharacterPropertiesExporter.prototype, "colorProvider", {
        get: function () { return this.data.model.colorProvider; },
        enumerable: true,
        configurable: true
    });
    CharacterPropertiesExporter.convertScript = function (script) {
        switch (script) {
            case enums_1.CharacterFormattingScript.Subscript: return 'subscript';
            case enums_1.CharacterFormattingScript.Superscript: return 'superscript';
            default:
            case enums_1.CharacterFormattingScript.Normal: return 'baseline';
        }
    };
    CharacterPropertiesExporter.prototype.exportRunPropertiesCore = function (props) {
        this.fontName(props);
        this.bold(props);
        this.italic(props);
        this.allCaps(props);
        this.strikeout(props);
        this.noProof(props);
        this.hidden(props);
        this.foreColor(props);
        this.doubleFontSize(props);
        this.fontUnderline(props);
        this.backColor(props);
        this.fontScript(props);
        this.rightToLeft(props);
        this.langInfo(props);
    };
    CharacterPropertiesExporter.prototype.exportStyleCharacterProperties = function (props) {
        this.writer.writeWpStartElement('rPr');
        this.exportRunPropertiesCore(props);
        this.writer.endElement();
    };
    CharacterPropertiesExporter.prototype.exportRunProperties = function (run) {
        if (this.shouldExportRunProperties(run)) {
            this.writer.writeWpStartElement('rPr');
            if (run.characterStyle.styleName != character_style_1.CharacterStyle.defaultParagraphCharacterStyleName)
                this.writer.writeWpStringValue('rStyle', this.data.charStyleExporter.getStyleId(this.data.model.stylesManager.characterStyleNameToIndex[run.characterStyle.styleName]));
            this.exportRunPropertiesCore(run.maskedCharacterProperties);
            this.writer.endElement();
        }
    };
    CharacterPropertiesExporter.prototype.shouldExportRunProperties = function (run) {
        var props = run.maskedCharacterProperties;
        return props.getUseValue(enums_1.CharacterPropertiesMask.UseFontName) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseDoubleFontSize) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseFontBold) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseFontItalic) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseFontUnderlineType) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseUnderlineWordsOnly) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseFontStrikeoutType) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseAllCaps) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseForeColorIndex) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseShadingInfoIndex) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseHighlightColorIndex) ||
            (props.getUseValue(enums_1.CharacterPropertiesMask.UseUnderlineColorIndex) &&
                !dx_color_1.DXColor.isTransparentOrEmpty(props.underlineColor.toRgb(this.colorProvider))) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseScript) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseHidden) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseLangInfo) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseRightToLeft) ||
            props.getUseValue(enums_1.CharacterPropertiesMask.UseNoProof) ||
            run.characterStyle.styleName != character_style_1.CharacterStyle.defaultParagraphCharacterStyleName;
    };
    CharacterPropertiesExporter.prototype.fontName = function (props) {
        if (!props.getUseValue(enums_1.CharacterPropertiesMask.UseFontName) || !props.fontInfo)
            return;
        this.writer.writeWpStartElement('rFonts');
        var fontName = props.fontInfo.name;
        this.writer.writeWpStringAttr('ascii', fontName);
        this.writer.writeWpStringAttr(new word_processing_mlvalue_1.WordProcessingMLValue('hAnsi').openXmlValue, fontName);
        this.writer.endElement();
    };
    CharacterPropertiesExporter.prototype.bold = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseFontBold))
            this.writer.writeWpBoolValue('b', props.fontBold);
    };
    CharacterPropertiesExporter.prototype.italic = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseFontItalic))
            this.writer.writeWpBoolValue('i', props.fontItalic);
    };
    CharacterPropertiesExporter.prototype.allCaps = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseAllCaps))
            this.writer.writeWpBoolValue('caps', props.allCaps);
    };
    CharacterPropertiesExporter.prototype.strikeout = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseFontStrikeoutType)) {
            switch (props.fontStrikeoutType) {
                case enums_1.StrikeoutType.Double:
                    this.writer.writeWpBoolValue('dstrike', true);
                    break;
                case enums_1.StrikeoutType.None:
                    this.writer.writeWpBoolValue('strike', false);
                    break;
                default:
                    this.writer.writeWpBoolValue('strike', true);
                    break;
            }
        }
    };
    CharacterPropertiesExporter.prototype.noProof = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseNoProof)) {
            this.writer.writeWpStartElement('noProof');
            this.writer.writeWpBoolAttr('val', props.noProof);
            this.writer.endElement();
        }
    };
    CharacterPropertiesExporter.prototype.hidden = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseHidden))
            this.writer.writeWpBoolValue('vanish', props.hidden);
    };
    CharacterPropertiesExporter.prototype.doubleFontSize = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseDoubleFontSize))
            this.writer.writeWpIntValue('sz', props.fontSize * 2);
    };
    CharacterPropertiesExporter.prototype.fontScript = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseScript))
            this.writer.writeWpStringValue('vertAlign', CharacterPropertiesExporter.convertScript(props.script));
    };
    CharacterPropertiesExporter.prototype.rightToLeft = function (_props) {
    };
    CharacterPropertiesExporter.prototype.langInfo = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseLangInfo)) {
            this.writer.writeWpStartElement('lang');
            if (props.langInfo.latin)
                this.writer.writeWpStringAttr('val', props.langInfo.latin);
            if (props.langInfo.bidi)
                this.writer.writeWpStringAttr('bidi', props.langInfo.bidi);
            if (props.langInfo.eastAsia)
                this.writer.writeWpStringAttr('eastAsia', props.langInfo.eastAsia);
            this.writer.endElement();
        }
    };
    CharacterPropertiesExporter.prototype.fontUnderline = function (props) {
        var useUnderlineType = props.getUseValue(enums_1.CharacterPropertiesMask.UseFontUnderlineType);
        var useUnderlineWordsOnly = props.getUseValue(enums_1.CharacterPropertiesMask.UseUnderlineWordsOnly);
        var useUnderlineColorIndex = props.getUseValue(enums_1.CharacterPropertiesMask.UseUnderlineColorIndex);
        var underlineColor = useUnderlineColorIndex ? props.underlineColor.toRgb(this.colorProvider) : null;
        if (useUnderlineType || useUnderlineWordsOnly ||
            (useUnderlineColorIndex && !dx_color_1.DXColor.isTransparentOrEmpty(underlineColor))) {
            this.writer.writeWpStartElement('u');
            if (useUnderlineWordsOnly && props.underlineWordsOnly &&
                useUnderlineType && props.fontUnderlineType == enums_1.UnderlineType.Single)
                this.writer.writeWpStringAttr('val', 'words');
            else if (useUnderlineType)
                this.writer.writeWpStringAttr('val', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.underlineTables, props.fontUnderlineType, enums_1.UnderlineType.Single));
            if (useUnderlineColorIndex && !dx_color_1.DXColor.isTransparentOrEmpty(underlineColor))
                this.data.colorExporter.exportColorInfo(props.underlineColor, 'color', false);
            this.writer.endElement();
        }
    };
    CharacterPropertiesExporter.prototype.backColor = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseHighlightColorIndex)) {
            var highlightColor = props.highlightColor.toRgb(this.colorProvider);
            if (!dx_color_1.DXColor.isTransparentOrEmpty(highlightColor) && highlightColor != color_1.ColorHelper.NO_COLOR)
                this.writer.writeWpStringValue('highlight', this.data.colorExporter.convertHighlightColorToString(props.highlightColor.toRgb(this.colorProvider)));
        }
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseHighlightColorIndex) &&
            (props.shadingInfo.getActualColor(this.colorProvider) != color_1.ColorHelper.NO_COLOR))
            this.data.colorExporter.exportShadingCore(props.shadingInfo, true);
    };
    CharacterPropertiesExporter.prototype.foreColor = function (props) {
        if (props.getUseValue(enums_1.CharacterPropertiesMask.UseForeColorIndex)) {
            this.writer.writeWpStartElement('color');
            this.data.colorExporter.exportColorInfo(props.textColor, 'val', true);
            this.writer.endElement();
        }
    };
    return CharacterPropertiesExporter;
}(base_1.BaseExporter));
exports.CharacterPropertiesExporter = CharacterPropertiesExporter;
