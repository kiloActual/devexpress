"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var constants_1 = require("../../../utils/constants");
var base_1 = require("../base");
var TextExporter = (function (_super) {
    tslib_1.__extends(TextExporter, _super);
    function TextExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextExporter.prototype.exportTextRunCore = function (runText) {
        var from = 0;
        var count = runText.length;
        for (var i = 0; i < count; i++) {
            var character = runText[i];
            var runBreakValue = translation_tables_1.TranslationTables.runBreaksTable.exportMap[character.charCodeAt(0)];
            if (runBreakValue) {
                this.exportTextCorePartial(runText, from, i - from);
                from = i + 1;
                this.exportBreak(runBreakValue.mlValue.openXmlValue);
            }
            else {
                if (character == rich_utils_1.RichUtils.specialCharacters.TabMark) {
                    this.exportTextCorePartial(runText, from, i - from);
                    from = i + 1;
                    this.writer.writeWpStartElement('tab');
                    this.writer.endElement();
                }
            }
        }
        this.exportTextCorePartial(runText, from, count - from);
    };
    TextExporter.prototype.removeSpecialSymbols = function (text) {
        if (!this.containsSpecialSymbols(text))
            return text;
        var result = [];
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var charCode = ch.charCodeAt(0);
            if (charCode > TextExporter.lastLowSpecial && charCode < TextExporter.firstHighSpecial || ch == '\x09' || ch == '\x0A' || ch == '\x0D')
                result.push(ch);
        }
        return result.join('');
    };
    TextExporter.prototype.exportTextCorePartial = function (runText, from, length) {
        if (length > 0)
            this.exportTextCore(from == 0 && length == runText.length ? runText : runText.substr(from, length));
    };
    TextExporter.prototype.exportTextCore = function (runText) {
        if (string_1.StringUtils.isNullOrEmpty(runText))
            return;
        runText = this.removeSpecialSymbols(runText);
        if (string_1.StringUtils.isNullOrEmpty(runText))
            return;
        this.writer.writeWpStartElement(this.getTextTag());
        if (/ /.test(runText))
            this.writer.attrNS(constants_1.DocxNsType.Xml, 'space', 'preserve');
        this.writer.writeString(runText);
        this.writer.endElement();
    };
    TextExporter.prototype.exportBreak = function (value) {
        this.writer.elementStartNS(constants_1.DocxNsType.WordProcessing, 'br');
        this.writer.writeWpStringAttr('type', value);
        this.writer.endElement();
    };
    TextExporter.prototype.getTextTag = function () {
        return this.data.subDocumentExporter.fieldCodeDepth == 0 ? 't' : 'instrText';
    };
    TextExporter.prototype.containsSpecialSymbols = function (text) {
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var charCode = ch.charCodeAt(0);
            if ((charCode <= TextExporter.lastLowSpecial || charCode >= TextExporter.firstHighSpecial) &&
                ch != '\x09' && ch != '\x0A' && ch != '\x0D')
                return true;
        }
        return false;
    };
    TextExporter.lastLowSpecial = '\u001f'.charCodeAt(0);
    TextExporter.firstHighSpecial = '\uffff'.charCodeAt(0);
    return TextExporter;
}(base_1.BaseExporter));
exports.TextExporter = TextExporter;
