"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_index_constants_1 = require("../../../../core/formats/utils/numbering-list-index-constants");
var layout_tab_space_box_1 = require("../../../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var enums_1 = require("../../../../core/model/borders/enums");
var numbering_list_1 = require("../../../../core/model/numbering-lists/numbering-list");
var paragraph_1 = require("../../../../core/model/paragraph/paragraph");
var paragraph_properties_1 = require("../../../../core/model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../../../core/model/paragraph/paragraph-style");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var word_processing_mlvalue_1 = require("../../../translation-table/word-processing-mlvalue");
var writer_helper_1 = require("../../utils/writer-helper");
var base_1 = require("../base");
var sections_1 = require("./sections");
var ParagraphPropertiesExporter = (function (_super) {
    tslib_1.__extends(ParagraphPropertiesExporter, _super);
    function ParagraphPropertiesExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphPropertiesExporter.convertLineSpacingValue = function (lineSpacing, value) {
        if (lineSpacing == paragraph_properties_1.ParagraphLineSpacingType.AtLeast || lineSpacing == paragraph_properties_1.ParagraphLineSpacingType.Exactly)
            return Math.round(value);
        else {
            if (lineSpacing == paragraph_properties_1.ParagraphLineSpacingType.Single)
                value = 1;
            else if (lineSpacing == paragraph_properties_1.ParagraphLineSpacingType.Double)
                value = 2;
            else if (lineSpacing == paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral)
                value = 1.5;
            return Math.round(value * 240);
        }
    };
    ParagraphPropertiesExporter.shouldExportParagraphBorder = function (defaultParagraphProperties, borderInfo) {
        return borderInfo && (!defaultParagraphProperties || borderInfo.style != enums_1.BorderLineStyle.None || borderInfo.width != 0);
    };
    ParagraphPropertiesExporter.prototype.exportParagraphPropertiesCore = function (props, numberingListId, levelIndex, tabsExporter, defaultParagraphProperties) {
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseKeepWithNext))
            this.writer.writeWpBoolValue('keepNext', props.keepWithNext);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseKeepLinesTogether))
            this.writer.writeWpBoolValue('keepLines', props.keepLinesTogether);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UsePageBreakBefore) && props.pageBreakBefore)
            this.writer.writeWpBoolValue('pageBreakBefore', props.pageBreakBefore);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseWidowOrphanControl))
            this.writer.writeWpBoolValue('widowControl', props.widowOrphanControl);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSuppressLineNumbers))
            this.writer.writeWpBoolValue(new word_processing_mlvalue_1.WordProcessingMLValue('suppressLineNumbers', 'supressLineNumbers').openXmlValue, props.suppressLineNumbers);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseShadingInfoIndex))
            this.data.colorExporter.exportShadingCore(props.shadingInfo, false);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSuppressHyphenation))
            this.writer.writeWpBoolValue('suppressAutoHyphens', props.suppressHyphenation);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightToLeft) && !defaultParagraphProperties)
            this.writer.writeWpBoolValue('bidi', props.rightToLeft);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseContextualSpacing))
            this.writer.writeWpBoolValue('contextualSpacing', props.contextualSpacing);
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAlignment))
            this.writer.writeWpStringValue('jc', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.paragraphAlignmentTable, props.alignment, paragraph_properties_1.ParagraphAlignment.Left));
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseDivId) && !defaultParagraphProperties)
            this.writer.writeWpIntValue('divId', props.divId);
        this.exportParagraphBorders(props, defaultParagraphProperties);
        this.exportParagraphSpacing(props);
        this.exportParagraphIndentation(props);
        this.exportParagraphOutlineLevel(props);
        this.exportParagraphNumbering(numberingListId, levelIndex);
        if (tabsExporter)
            tabsExporter.call(this);
    };
    ParagraphPropertiesExporter.prototype.exportStyleParagraphProperties = function (paragraphProperties, tabInfo, ownNumberingListIndex, listLevelIndex) {
        var _this = this;
        this.writer.writeWpStartElement('pPr');
        this.data.parPropsExporter.exportParagraphPropertiesCore(paragraphProperties, ownNumberingListIndex, listLevelIndex, function () { return _this.exportTabProperties(tabInfo); }, false);
        this.writer.endElement();
    };
    ParagraphPropertiesExporter.prototype.exportParagraphProperties = function (subDocument, section, paragraph, paragraphRun) {
        var _this = this;
        if (this.shouldExportParagraphProperties(subDocument, section, paragraph)) {
            this.writer.writeWpStartElement('pPr');
            this.data.parPropsExporter.exportParagraphPropertiesCore(paragraph.maskedParagraphProperties, paragraph.numberingListIndex, paragraph.listLevelIndex, function () { return _this.exportTabProperties(paragraph.tabs); }, false);
            if (paragraph.paragraphStyle)
                this.writer.writeWpStringValue('pStyle', this.data.parStyleExporter.getStyleId(this.data.parStyleExporter.getStyleIndexByName(paragraph.paragraphStyle.styleName)));
            this.data.charPropsExporter.exportRunProperties(paragraphRun);
            if (this.shouldExportSectionProperties(subDocument, section, paragraph))
                new sections_1.SectionExporter(this.data).exportProperties(section);
            this.writer.endElement();
        }
    };
    ParagraphPropertiesExporter.prototype.exportTabProperties = function (tabs) {
        if (!this.shouldExportTabProperties(tabs))
            return;
        this.writer.writeWpStartElement('tabs');
        for (var _i = 0, _a = tabs.tabsInfo; _i < _a.length; _i++) {
            var tab = _a[_i];
            if (!tab.isDefault)
                this.exportTab(tab);
        }
        this.writer.endElement();
    };
    ParagraphPropertiesExporter.prototype.exportParagraphNumbering = function (numberingListId, listLevelIndex) {
        if (this.shouldExportParagraphNumbering(numberingListId, listLevelIndex)) {
            this.writer.writeWpStartElement('numPr');
            if (listLevelIndex > 0)
                this.writer.writeWpIntValue('ilvl', listLevelIndex);
            if (numberingListId >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue || numberingListId == numbering_list_1.NumberingList.NoNumberingListIndex)
                this.writer.writeWpIntValue('numId', this.getNumberingListIndexForExport(numberingListId));
            this.writer.endElement();
        }
    };
    ParagraphPropertiesExporter.prototype.shouldExportParagraphNumbering = function (numberingListId, listLevelIndex) {
        if (listLevelIndex === void 0) { listLevelIndex = 1; }
        return numberingListId == numbering_list_1.NumberingList.NoNumberingListIndex ||
            numberingListId >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue || listLevelIndex > 0;
    };
    ParagraphPropertiesExporter.prototype.exportParagraphOutlineLevel = function (props) {
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseOutlineLevel)) {
            var level = props.outlineLevel;
            if (level <= 0 || level >= 10)
                return;
            level--;
            this.writer.writeWpIntValue('outlineLvl', level);
        }
    };
    ParagraphPropertiesExporter.prototype.exportParagraphSpacing = function (props) {
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLineSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingBefore) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingAfter) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBeforeAutoSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAfterAutoSpacing)) {
            this.writer.writeWpStartElement('spacing');
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLineSpacing))
                this.writer.writeWpStringAttr(new word_processing_mlvalue_1.WordProcessingMLValue('lineRule').openXmlValue, writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.lineSpacingTable, props.lineSpacingType, paragraph_properties_1.ParagraphLineSpacingType.Single));
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLineSpacing))
                this.writer.writeWpIntAttr('line', ParagraphPropertiesExporter.convertLineSpacingValue(props.lineSpacingType, props.lineSpacing));
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingBefore))
                this.writer.writeWpIntAttr('before', props.spacingBefore);
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingAfter))
                this.writer.writeWpIntAttr('after', props.spacingAfter);
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBeforeAutoSpacing))
                this.writer.writeWpBoolAttr(new word_processing_mlvalue_1.WordProcessingMLValue('beforeAutospacing', 'before-autospacing').openXmlValue, props.beforeAutoSpacing);
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAfterAutoSpacing))
                this.writer.writeWpBoolAttr(new word_processing_mlvalue_1.WordProcessingMLValue('afterAutospacing', 'after-autospacing').openXmlValue, props.afterAutoSpacing);
            this.writer.endElement();
        }
    };
    ParagraphPropertiesExporter.prototype.exportParagraphIndentation = function (props) {
        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseFirstLineIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseFirstLineIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightIndent)) {
            this.writer.writeWpStartElement('ind');
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseFirstLineIndent)) {
                switch (props.firstLineIndentType) {
                    case paragraph_properties_1.ParagraphFirstLineIndent.Hanging:
                        this.writer.writeWpIntAttr('hanging', props.firstLineIndent);
                        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent))
                            this.writer.writeWpIntAttr('left', props.leftIndent);
                        break;
                    case paragraph_properties_1.ParagraphFirstLineIndent.Indented:
                        this.writer.writeWpIntAttr(new word_processing_mlvalue_1.WordProcessingMLValue('firstLine').openXmlValue, props.firstLineIndent);
                        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent))
                            this.writer.writeWpIntAttr('left', props.leftIndent);
                        break;
                    case paragraph_properties_1.ParagraphFirstLineIndent.None:
                        this.writer.writeWpIntAttr(new word_processing_mlvalue_1.WordProcessingMLValue('firstLine').openXmlValue, 0);
                        if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent))
                            this.writer.writeWpIntAttr('left', props.leftIndent);
                        break;
                }
            }
            else if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent))
                this.writer.writeWpIntAttr('left', props.leftIndent);
            if (props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightIndent))
                this.writer.writeWpIntAttr('right', props.rightIndent);
            this.writer.endElement();
        }
    };
    ParagraphPropertiesExporter.prototype.exportParagraphBorders = function (props, defaultParagraphProperties) {
        var shouldExportBetweenBorder = props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBetweenBorder) &&
            ParagraphPropertiesExporter.shouldExportParagraphBorder(defaultParagraphProperties, props.betweenBorder);
        var shouldExportBottomBorder = props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBottomBorder) &&
            ParagraphPropertiesExporter.shouldExportParagraphBorder(defaultParagraphProperties, props.bottomBorder);
        var shouldExportLeftBorder = props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftBorder) &&
            ParagraphPropertiesExporter.shouldExportParagraphBorder(defaultParagraphProperties, props.leftBorder);
        var shouldExportRightBorder = props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightBorder) &&
            ParagraphPropertiesExporter.shouldExportParagraphBorder(defaultParagraphProperties, props.rightBorder);
        var shouldExportTopBorder = props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseTopBorder) &&
            ParagraphPropertiesExporter.shouldExportParagraphBorder(defaultParagraphProperties, props.topBorder);
        if (shouldExportBetweenBorder || shouldExportBottomBorder || shouldExportLeftBorder || shouldExportRightBorder || shouldExportTopBorder) {
            this.writer.writeWpStartElement('pBdr');
            if (shouldExportTopBorder)
                this.exportParagraphBorder('top', props.topBorder);
            if (shouldExportLeftBorder)
                this.exportParagraphBorder('left', props.leftBorder);
            if (shouldExportBottomBorder)
                this.exportParagraphBorder('bottom', props.bottomBorder);
            if (shouldExportRightBorder)
                this.exportParagraphBorder('right', props.rightBorder);
            if (shouldExportBetweenBorder)
                this.exportParagraphBorder('between', props.betweenBorder);
            this.writer.endElement();
        }
    };
    ParagraphPropertiesExporter.prototype.exportParagraphBorder = function (tag, border) {
        this.writer.writeWpStartElement(tag);
        this.writer.writeWpStringAttr('val', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.borderLineStyleTable, border.style, enums_1.BorderLineStyle.None));
        this.writer.writeWpIntAttr('sz', unit_converter_1.UnitConverter.twipsToPointsF(border.width * 8.0));
        this.writer.writeWpIntAttr('space', unit_converter_1.UnitConverter.twipsToPointsF(border.offset));
        this.writer.writeWpBoolAttr('shadow', border.shadow);
        this.writer.writeWpBoolAttr('frame', border.frame);
        this.data.colorExporter.exportColorInfo(border.color, 'color', false);
        this.writer.endElement();
    };
    ParagraphPropertiesExporter.prototype.getNumberingListIndexForExport = function (numberingListIndex) {
        return numberingListIndex == numbering_list_1.NumberingList.NoNumberingListIndex ? 0 : numberingListIndex + 1;
    };
    ParagraphPropertiesExporter.prototype.exportTab = function (tab) {
        this.writer.writeWpStartElement('tab');
        if (tab.deleted)
            this.writer.writeWpStringAttr('val', 'clear');
        else
            this.writer.writeWpStringAttr('val', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.tabAlignmentTable, tab.alignment, paragraph_1.TabAlign.Left));
        this.writer.writeWpIntAttr('pos', math_1.MathUtils.restrictValue(tab.position, -31680, 31680));
        this.writer.writeWpStringAttr('leader', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.tabLeaderTable, tab.leader, layout_tab_space_box_1.TabLeaderType.None));
        this.writer.endElement();
    };
    ParagraphPropertiesExporter.prototype.shouldExportTabProperties = function (tabs) {
        return tabs && !!list_1.ListUtils.unsafeAnyOf(tabs.tabsInfo, function (tab) { return !tab.isDefault; });
    };
    ParagraphPropertiesExporter.prototype.shouldExportParagraphProperties = function (subDocument, section, paragraph) {
        var props = paragraph.maskedParagraphProperties;
        return props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAlignment) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseFirstLineIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightIndent) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLineSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingAfter) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSpacingBefore) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSuppressHyphenation) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseSuppressLineNumbers) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseContextualSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightToLeft) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UsePageBreakBefore) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBeforeAutoSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAfterAutoSpacing) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseKeepWithNext) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseKeepLinesTogether) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseWidowOrphanControl) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseOutlineLevel) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseShadingInfoIndex) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseLeftBorder) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseRightBorder) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseTopBorder) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBottomBorder) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseBetweenBorder) ||
            props.getUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseDivId) ||
            paragraph.paragraphStyle.styleName != paragraph_style_1.ParagraphStyle.normalStyleName ||
            this.data.charPropsExporter.shouldExportRunProperties(subDocument.getRunByPosition(paragraph.getEndPosition() - 1)) ||
            paragraph.isInList() ||
            this.shouldExportSectionProperties(subDocument, section, paragraph) ||
            this.shouldExportTabProperties(paragraph.tabs);
    };
    ParagraphPropertiesExporter.prototype.shouldExportSectionProperties = function (subDocument, section, paragraph) {
        return subDocument.isMain() &&
            paragraph.getEndPosition() == section.getEndPosition() &&
            paragraph != list_1.ListUtils.last(subDocument.paragraphs);
    };
    return ParagraphPropertiesExporter;
}(base_1.BaseExporter));
exports.ParagraphPropertiesExporter = ParagraphPropertiesExporter;
