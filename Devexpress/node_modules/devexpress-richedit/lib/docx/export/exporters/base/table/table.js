"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var recursive_objects_iterators_1 = require("../../../../../core/layout-formatter/box/generator/recursive-objects-iterators");
var table_cell_properties_1 = require("../../../../../core/model/tables/properties/table-cell-properties");
var table_row_properties_1 = require("../../../../../core/model/tables/properties/table-row-properties");
var table_base_structures_1 = require("../../../../../core/model/tables/secondary-structures/table-base-structures");
var list_1 = require("@devexpress/utils/lib/utils/list");
var base_1 = require("../../base");
var table_cell_properties_2 = require("./table-cell-properties");
var table_row_properties_2 = require("./table-row-properties");
var TableExporter = (function (_super) {
    tslib_1.__extends(TableExporter, _super);
    function TableExporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tableIndexes = [];
        _this.tableInfo = [];
        _this.initTableDeferred = false;
        return _this;
    }
    Object.defineProperty(TableExporter.prototype, "tables", {
        get: function () { return this.data.subDocumentExporter.subDocument.tables; },
        enumerable: true,
        configurable: true
    });
    TableExporter.prototype.init = function () {
        this.tableIterator = new recursive_objects_iterators_1.TableIterator(this.tables);
        this.tableIterator.init(0);
    };
    TableExporter.prototype.checkTable = function (pos, allowInitNextTable) {
        var newIndexes = this.tableIterator.indexes;
        if (newIndexes.length) {
            var newTableInfo = this.tableIterator.generateInfo(pos);
            this.handleNextCell(this.tableInfo ? list_1.ListUtils.last(this.tableInfo) : null, list_1.ListUtils.last(newTableInfo));
            this.tableInfo = newTableInfo;
        }
        if (this.initTableDeferred || this.tableIterator.update(pos) || pos == 0 &&
            this.tableIterator.indexes.length) {
            this.initTableDeferred = false;
            this.closeTables(newIndexes);
            this.initNewTables(newIndexes, allowInitNextTable);
            if (allowInitNextTable)
                this.tableInfo = this.tableIterator.generateInfo(pos);
        }
    };
    TableExporter.prototype.getTableGrid = function (table) {
        if (table.rows[0].logicColumnCount < 64)
            return [];
        var colGrid = [];
        return colGrid;
    };
    TableExporter.prototype.initNewTables = function (newIndexes, allowInitNextTable) {
        for (var levelIndex = this.tableIndexes.length; levelIndex < newIndexes.length; levelIndex++) {
            if (allowInitNextTable) {
                var table = this.tables[newIndexes[levelIndex]];
                this.tableIndexes.push(table.index);
                this.startTable(table);
                this.startRow(table.rows[0]);
                this.startCell(table.rows[0].cells[0]);
            }
            else {
                this.initTableDeferred = true;
                break;
            }
        }
    };
    TableExporter.prototype.closeTables = function (newIndexes) {
        var lastEqualTableIndex = 0;
        var listLength = this.tableIndexes.length;
        for (var index = 0; index < listLength; index++) {
            var newInd = newIndexes[index];
            if (newInd === undefined || this.tableIndexes[index] != newInd)
                break;
            lastEqualTableIndex++;
        }
        for (var countOfDeletedTables = this.tableIndexes.length - lastEqualTableIndex; countOfDeletedTables > 0; countOfDeletedTables--) {
            this.tableIndexes.pop();
            this.tableInfo.pop();
            this.writer.endElement();
            this.writer.endElement();
            this.writer.endElement();
        }
    };
    TableExporter.prototype.handleNextCell = function (oldInfo, newInfo) {
        if (!oldInfo || !newInfo)
            return;
        else if (oldInfo.rowIndex != newInfo.rowIndex) {
            this.writer.endElement();
            this.writer.endElement();
            this.startRow(newInfo.row);
            this.startCell(newInfo.cell);
        }
        else if (oldInfo.cellIndex != newInfo.cellIndex) {
            this.writer.endElement();
            this.startCell(newInfo.cell);
        }
    };
    TableExporter.prototype.startTable = function (table) {
        this.writer.writeWpStartElement('tbl');
        this.exportTableProperties(table);
        this.exportTableGrid(table);
    };
    TableExporter.prototype.startRow = function (row) {
        this.writer.writeWpStartElement('tr');
        this.data.tablePropsExporter.exportTablePropertiesException(row.tablePropertiesException);
        if (row.properties.mask != table_row_properties_1.TableRowPropertiesMask.UseNone ||
            row.gridBefore || row.gridAfter || row.gridBefore || row.height.value != 0)
            new table_row_properties_2.TableRowPropertiesExporter(this.data).exportTableRowProperties(row);
    };
    TableExporter.prototype.startCell = function (cell) {
        this.writer.writeWpStartElement('tc');
        if (this.allowExportTableCellProperties(cell))
            new table_cell_properties_2.TableCellPropertiesExporter(this.data).exportTableCellProperties(cell);
    };
    TableExporter.prototype.exportTableProperties = function (table) {
        this.writer.writeWpStartElement('tblPr');
        if (table.style)
            this.writer.writeWpStringValue('tblStyle', this.data.tblStyleExporter.getStyleId(this.data.tblStyleExporter.getStyleIndexByName(table.style.styleName)));
        this.data.tablePropsExporter.exportTablePropertiesCore(table, true);
        this.writer.endElement();
    };
    TableExporter.prototype.exportTableGrid = function (table) {
        this.writer.writeWpStartElement('tblGrid');
        for (var _i = 0, _a = this.getTableGrid(table); _i < _a.length; _i++) {
            var column = _a[_i];
            this.writer.writeWpStartElement('gridCol');
            this.writer.writeWpIntAttr('w', Math.max(1, column));
            this.writer.endElement();
        }
        this.writer.endElement();
    };
    TableExporter.prototype.allowExportTableCellProperties = function (cell) {
        var props = cell.properties;
        return !this.data.tableWidthExporter.forbidExportWidthUnit(cell.preferredWidth) ||
            cell.verticalMerging != table_base_structures_1.TableCellMergingState.None ||
            props.mask != table_cell_properties_1.TableCellPropertiesMask.UseNone ||
            cell.columnSpan > 1 ||
            cell.verticalMerging != table_base_structures_1.TableCellMergingState.None;
    };
    return TableExporter;
}(base_1.BaseExporter));
exports.TableExporter = TableExporter;
