"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var dx_color_1 = require("../../../../core/model/color/dx-color");
var enums_1 = require("../../../../core/model/floating-objects/enums");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var color_1 = require("@devexpress/utils/lib/utils/color");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var constants_2 = require("../../../utils/constants");
var inline_drawing_object_1 = require("../../utils/inline-drawing-object");
var writer_helper_1 = require("../../utils/writer-helper");
var base_1 = require("../base");
var image_exporter_1 = require("./image-exporter");
var DrawingExporter = (function (_super) {
    tslib_1.__extends(DrawingExporter, _super);
    function DrawingExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DrawingExporter.prototype.writeFloatingObjectDrawing = function (drawingObject, modelImageId) {
        this.writer.writeWpStartElement('drawing');
        this.writeFloatingObjectAnchor(drawingObject, modelImageId);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectTextBoxContent2010 = function (drawingObject, textBoxContent) {
        this.writer.writeMcStartElement('AlternateContent');
        this.writer.writeMcStartElement('Choice');
        this.writer.attr('Requires', this.data.constants.namespaces[constants_2.DocxNsType.Wps].prefix);
        this.writer.writeWpStartElement('drawing');
        this.writeFloatingObjectAnchorTextBox(drawingObject, textBoxContent);
        this.writer.endElement();
        this.writer.endElement();
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectTxbxContent = function (content) {
        this.writer.writeWpStartElement('txbxContent');
        var contentExporter = this.data.createTextBoxExporter(content);
        contentExporter.exportTextBoxContent();
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectAnchor = function (drawingObject, modelImageId) {
        this.writer.writeWpDrawingStartElement(drawingObject.isFloatingObject ? 'anchor' : 'inline');
        var id = this.data.drawingElementId;
        this.data.drawingElementId++;
        this.exportFloatingObjectProperties(drawingObject, id);
        this.writeFloatingObjectPictureContent(modelImageId, drawingObject, id);
        if (drawingObject.isFloatingObject) {
            this.writeFloatingObjectPercentWidth(drawingObject);
            this.writeFloatingObjectPercentHeight(drawingObject);
        }
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectAnchorTextBox = function (drawingObject, textBoxContent) {
        this.writer.writeWpDrawingStartElement('anchor');
        var id = this.data.drawingElementId;
        this.data.drawingElementId++;
        this.exportFloatingObjectProperties(drawingObject, id);
        this.writeFloatingObjectTextBoxContent(textBoxContent, drawingObject);
        if (drawingObject.isFloatingObject) {
            this.writeFloatingObjectPercentWidth(drawingObject);
            this.writeFloatingObjectPercentHeight(drawingObject);
        }
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectTextBoxContent = function (content, drawingObject) {
        this.writer.writeDrawingStartElement('graphic');
        this.writeFloatingTextObjectGraphicData(content, drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPictureContent = function (modelImageId, drawingObject, id) {
        this.writer.writeDrawingStartElement('graphic');
        this.writeFloatingObjectGraphicData(modelImageId, drawingObject, id);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPic = function (modelImageId, drawingObject, id) {
        this.writer.writePicDrawingStartElement('pic');
        this.writeFloatingObjectNvPicPr(drawingObject.nonVisualDrawingObjectProperties, id);
        this.writeFloatingObjectBlipFill(modelImageId, drawingObject);
        this.writeFloatingObjectPicSpPr(drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectNvPicPr = function (nonVisualProperties, id) {
        this.writer.writePicDrawingStartElement('nvPicPr');
        this.writeFloatingObjectCNvPr(nonVisualProperties, id);
        this.writeFloatingObjectCNvPicPr();
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectCNvPr = function (nonVisualProperties, id) {
        this.writer.writePicDrawingStartElement('cNvPr');
        this.writer.writeIntValue('id', id);
        this.writer.attr('name', nonVisualProperties && !string_1.StringUtils.isNullOrEmpty(nonVisualProperties.name) ?
            nonVisualProperties.name : 'Picture ' + id);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectCNvPicPr = function () {
        this.writer.writePicDrawingStartElement('cNvPicPr');
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectWpsSpPr = function (drawingObject) {
        this.writer.writeWpsStartElement('spPr');
        this.writeFloatingObjectSpPr(drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPicSpPr = function (drawingObject) {
        this.writer.writePicDrawingStartElement('spPr');
        this.writeFloatingObjectSpPr(drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectBlipFill = function (modelImageId, drawingObject) {
        this.writer.writePicDrawingStartElement('blipFill');
        this.writeFloatingObjectBlip(modelImageId);
        this.writeFloatingObjectSourceRect(drawingObject);
        this.writeFloatingObjectStretchAndSourceRect(drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectBlip = function (modelImageId) {
        var cache = this.data.model.cache.imageCache.getPictureData(modelImageId);
        var exporter = new image_exporter_1.ImageExporter(this.data);
        var imageRelationId = cache.isLoaded ? exporter.exportImageData(modelImageId, cache.base64) : exporter.exportImageUrl(modelImageId, cache.imageUrl);
        this.writer.writeDrawingStartElement('blip');
        this.writer.attrNS(constants_2.DocxNsType.Rels, cache.isLoaded ? 'embed' : 'link', imageRelationId);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectSourceRect = function (drawingObject) {
        var sourceRect = drawingObject.sourceRect;
        if (sourceRect.isEmpty())
            return;
        this.writer.writeDrawingStartElement('srcRect');
        this.writer.writeIntValue('l', sourceRect.left);
        this.writer.writeIntValue('t', sourceRect.top);
        this.writer.writeIntValue('r', sourceRect.right);
        this.writer.writeIntValue('b', sourceRect.bottom);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectStretchAndSourceRect = function (drawingObject) {
        this.writer.writeDrawingStartElement('stretch');
        if (drawingObject.sourceRect.isEmpty()) {
            this.writer.writeDrawingStartElement('fillRect');
            this.writer.endElement();
        }
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPrstGeom = function () {
        this.writer.writeDrawingStartElement('prstGeom');
        this.writer.attr('prst', 'rect');
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectSpPr = function (drawingObject) {
        this.writeFloatingObjectXfrm(drawingObject);
        this.writeFloatingObjectPrstGeom();
        if (drawingObject.shape) {
            if (drawingObject.shape.fillColor)
                this.writeFloatingObjectSolidFill(drawingObject.shape.fillColor);
            if (drawingObject.shape.outlineColor)
                this.writeFloatingObjectLn(drawingObject.shape);
        }
        var inlineObject = drawingObject instanceof inline_drawing_object_1.InlineDrawingObject ? drawingObject : null;
        if (inlineObject != null)
            this.writeFloatingObjectSolidFill(inlineObject.fillColor);
    };
    DrawingExporter.prototype.writeFloatingObjectLn = function (shape) {
        this.writer.writeDrawingStartElement('ln');
        if (shape.outlineWidth)
            this.writer.writeIntValue('w', unit_converter_1.UnitConverter.twipsToEmu(shape.outlineWidth));
        this.writeFloatingObjectSolidFill(shape.outlineColor);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectSolidFill = function (color) {
        if (dx_color_1.DXColor.isTransparentOrEmptyorNoColor(color)) {
            this.writer.writeDrawingStartElement('noFill');
            this.writer.endElement();
        }
        else {
            this.writer.writeDrawingStartElement('solidFill');
            this.writeFloatingObjectSrgbClr(color);
            this.writer.endElement();
        }
    };
    DrawingExporter.prototype.writeFloatingObjectSrgbClr = function (color) {
        this.writer.writeDrawingStartElement('srgbClr');
        this.writer.attr('val', color_1.ColorUtils.colorToHash(color).substr(1));
        if (color_1.ColorUtils.getAlpha(color) != 255) {
            this.writer.writeDrawingStartElement('alpha');
            var alpha = Math.round(color_1.ColorUtils.getAlpha(color) / constants_1.Constants.MAX_BYTE * 100) * 1000;
            this.writer.writeIntValue('val', alpha);
            this.writer.endElement();
        }
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectXfrm = function (run) {
        this.writer.writeDrawingStartElement('xfrm');
        if (run.shape && run.useRotation)
            this.writer.writeIntValue('rot', run.rotation);
        this.writeFloatingObjectOff();
        this.writeFloatingObjectExt(run);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectGraphicData = function (modelImageId, run, id) {
        this.writer.writeDrawingStartElement('graphicData');
        this.writer.attr('uri', this.data.constants.namespaces[constants_2.DocxNsType.DrawingMLPicture].namespace);
        this.writeFloatingObjectPic(modelImageId, run, id);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingTextObjectGraphicData = function (content, drawingObject) {
        this.writer.writeDrawingStartElement('graphicData');
        this.writer.attr('uri', this.data.constants.namespaces[constants_2.DocxNsType.Wps].namespace);
        this.writeFloatingObjectWsp(content, drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectWsp = function (content, drawingObject) {
        this.writer.writeWpsStartElement('wsp');
        this.writer.writeWpsStartElement('cNvSpPr');
        this.writer.endElement();
        this.writeFloatingObjectWpsSpPr(drawingObject);
        this.writeFloatingObjectTxbx(content);
        this.writeFloatingObjectBodyPr(drawingObject.textBoxProperties);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectTxbx = function (content) {
        this.writer.writeWpsStartElement('txbx');
        this.writeFloatingObjectTxbxContent(content);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectBodyPr = function (properties) {
        this.writer.writeWpsStartElement('bodyPr');
        if (properties.wrapText)
            this.writer.attr('wrap', properties.wrapText ? 'square' : 'none');
        if (properties.leftMargin >= 0)
            this.writer.writeIntValue('lIns', unit_converter_1.UnitConverter.twipsToEmu(properties.leftMargin));
        if (properties.topMargin >= 0)
            this.writer.writeIntValue('tIns', unit_converter_1.UnitConverter.twipsToEmu(properties.topMargin));
        if (properties.rightMargin >= 0)
            this.writer.writeIntValue('rIns', unit_converter_1.UnitConverter.twipsToEmu(properties.rightMargin));
        if (properties.bottomMargin >= 0)
            this.writer.writeIntValue('bIns', unit_converter_1.UnitConverter.twipsToEmu(properties.bottomMargin));
        if (properties.verticalAlignment != null)
            this.writer.attr('anchor', this.convertTextBoxVerticalAlignment(properties.verticalAlignment));
        if (properties.upright)
            this.writer.writeBoolValue('upright', properties.upright);
        if (properties.resizeShapeToFitText != null) {
            if (properties.resizeShapeToFitText)
                this.writer.writeDrawingStartElement('spAutoFit');
            else
                this.writer.writeDrawingStartElement('noAutofit');
            this.writer.endElement();
        }
        this.writer.endElement();
    };
    DrawingExporter.prototype.convertTextBoxVerticalAlignment = function (value) {
        return writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.drawingTextAnchoringType, value, enums_1.DrawingTextAnchoringType.Top);
    };
    DrawingExporter.prototype.writeFloatingObjectOff = function () {
        this.writer.writeDrawingStartElement('off');
        this.writer.writeIntValue('x', 0);
        this.writer.writeIntValue('y', 0);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectExt = function (run) {
        this.writer.writeDrawingStartElement('ext');
        this.writer.writeIntValue('cx', unit_converter_1.UnitConverter.twipsToEmu(Math.max(0, run.actualSize.width)));
        this.writer.writeIntValue('cy', unit_converter_1.UnitConverter.twipsToEmu(Math.max(0, run.actualSize.height)));
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPercentWidth = function (run) {
        if (run.useRelativeWidth) {
            this.writer.writeWp14DrawingStartElement('sizeRelH');
            this.writer.attr('relativeFrom', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.floatingObjectRelativeFromHorizontalTable, run.relativeWidthType, enums_1.RelativeWidthType.Page));
            this.writer.writeWp14DrawingStartElement('pctWidth');
            this.writer.writeString(run.relativeSize.width.toString());
            this.writer.endElement();
            this.writer.endElement();
        }
    };
    DrawingExporter.prototype.writeFloatingObjectPercentHeight = function (run) {
        if (run.useRelativeHeight) {
            this.writer.writeWp14DrawingStartElement('sizeRelV');
            this.writer.attr('relativeFrom', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.floatingObjectRelativeFromVerticalTable, run.relativeHeightType, enums_1.RelativeHeightType.Page));
            this.writer.writeWp14DrawingStartElement('pctHeight');
            this.writer.writeString(run.relativeSize.height.toString());
            this.writer.endElement();
            this.writer.endElement();
        }
    };
    DrawingExporter.prototype.exportFloatingObjectProperties = function (drawingObject, id) {
        if (drawingObject.isFloatingObject) {
            this.writer.writeIntValue('simplePos', 0);
            this.writer.writeBoolValue('allowOverlap', drawingObject.allowOverlap);
            this.writer.writeBoolValue('behindDoc', drawingObject.isBehindDoc);
            this.writer.writeBoolValue('layoutInCell', drawingObject.layoutInTableCell);
            this.writer.writeBoolValue('locked', drawingObject.locked);
            this.writer.writeIntValue('relativeHeight', Math.max(0, drawingObject.zOrder));
            if (drawingObject.useBottomDistance && drawingObject.bottomDistance >= 0)
                this.writer.writeIntValue('distB', unit_converter_1.UnitConverter.twipsToEmu(drawingObject.bottomDistance));
            if (drawingObject.useLeftDistance && drawingObject.leftDistance >= 0)
                this.writer.writeIntValue('distL', unit_converter_1.UnitConverter.twipsToEmu(drawingObject.leftDistance));
            if (drawingObject.useRightDistance && drawingObject.rightDistance >= 0)
                this.writer.writeIntValue('distR', unit_converter_1.UnitConverter.twipsToEmu(drawingObject.rightDistance));
            if (drawingObject.useTopDistance && drawingObject.topDistance >= 0)
                this.writer.writeIntValue('distT', unit_converter_1.UnitConverter.twipsToEmu(drawingObject.topDistance));
            if (drawingObject.useHidden)
                this.writer.writeBoolValue('hidden', drawingObject.hidden);
            this.writeFloatingObjectSimplePosition();
            if (drawingObject.horizontalPositionAlignment == enums_1.AnchorObjectHorizontalPositionAlignment.None &&
                drawingObject.usePercentOffset && drawingObject.percentOffset.x != 0)
                this.writeFloatingObjectPercentPositionH2010(drawingObject);
            else
                this.writeFloatingObjectPositionH(drawingObject);
            if (drawingObject.verticalPositionAlignment == enums_1.AnchorObjectVerticalPositionAlignment.None &&
                drawingObject.usePercentOffset && drawingObject.percentOffset.y != 0)
                this.writeFloatingObjectPercentPositionV2010(drawingObject);
            else
                this.writeFloatingObjectPositionV(drawingObject);
        }
        this.writeFloatingObjectExtent(drawingObject);
        this.writeFloatingObjectEffectExtent(drawingObject);
        if (drawingObject.isFloatingObject)
            this.writeFloatingObjectWrap(drawingObject);
        this.writeFloatingObjectDocPr(drawingObject, id);
        this.writeFloatingObjectCNvGraphicFramePr(drawingObject);
    };
    DrawingExporter.prototype.writeFloatingObjectPositionV = function (drawingObject) {
        this.writeFloatingObjectPositionVCore(drawingObject, this.writeFloatingObjectVerticalOffset);
    };
    DrawingExporter.prototype.writeFloatingObjectPositionVCore = function (drawingObject, writeVerticalOffsetAction) {
        this.writer.writeWpDrawingStartElement('positionV');
        this.writer.attr('relativeFrom', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.floatingObjectVerticalPositionTypeTable, drawingObject.verticalPositionType, enums_1.AnchorObjectVerticalPositionType.Page));
        if (drawingObject.verticalPositionAlignment != enums_1.AnchorObjectVerticalPositionAlignment.None)
            this.writeFloatingObjectVerticalPositionAlignment(drawingObject);
        else
            writeVerticalOffsetAction.call(this, drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectVerticalOffset = function (drawingObject) {
        this.writer.writeWpDrawingStartElement('posOffset');
        this.writer.writeString(unit_converter_1.UnitConverter.twipsToEmu(drawingObject.offset.y).toString());
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectVerticalPositionAlignment = function (drawingObject) {
        this.writer.writeWpDrawingStartElement('align');
        this.writer.writeString(writer_helper_1.WriterHelper.getValueFromTablesExplicitDefault(translation_tables_1.TranslationTables.floatingObjectVerticalPositionAlignmentTable, drawingObject.verticalPositionAlignment, ''));
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPercentPositionH2010 = function (drawingObject) {
        this.writer.writeMcStartElement('AlternateContent');
        this.writer.writeMcStartElement('Choice');
        this.writer.attr('Requires', this.data.constants.namespaces[constants_2.DocxNsType.Wp14].prefix);
        this.writeFloatingObjectPositionHCore(drawingObject, this.writeFloatingObjectPercentHorizontalOffset);
        this.writer.endElement();
        this.writer.writeMcStartElement('Fallback');
        this.writeFloatingObjectPositionH(drawingObject);
        this.writer.endElement();
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPercentPositionV2010 = function (drawingObject) {
        this.writer.writeMcStartElement('AlternateContent');
        this.writer.writeMcStartElement('Choice');
        this.writer.attr('Requires', this.data.constants.namespaces[constants_2.DocxNsType.Wp14].prefix);
        this.writeFloatingObjectPositionVCore(drawingObject, this.writeFloatingObjectPercentVerticalOffset);
        this.writer.endElement();
        this.writer.writeMcStartElement('Fallback');
        this.writeFloatingObjectPositionV(drawingObject);
        this.writer.endElement();
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPercentVerticalOffset = function (drawingObject) {
        this.writer.writeWp14DrawingStartElement('pctPosVOffset');
        this.writer.writeString(drawingObject.percentOffset.y.toString());
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPercentHorizontalOffset = function (drawingObject) {
        this.writer.writeWp14DrawingStartElement('pctPosHOffset');
        this.writer.writeString(drawingObject.percentOffset.x.toString());
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectPositionH = function (drawingObject) {
        this.writeFloatingObjectPositionHCore(drawingObject, this.writeFloatingObjectHorizontalOffset);
    };
    DrawingExporter.prototype.writeFloatingObjectPositionHCore = function (drawingObject, writeHorizontalOffsetAction) {
        this.writer.writeWpDrawingStartElement('positionH');
        this.writer.attr('relativeFrom', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.floatingObjectHorizontalPositionTypeTable, drawingObject.horizontalPositionType, enums_1.AnchorObjectHorizontalPositionType.Page));
        if (drawingObject.horizontalPositionAlignment != enums_1.AnchorObjectHorizontalPositionAlignment.None)
            this.writeFloatingObjectHorizontalPositionAlignment(drawingObject);
        else
            writeHorizontalOffsetAction.call(this, drawingObject);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectHorizontalOffset = function (drawingObject) {
        this.writer.writeWpDrawingStartElement('posOffset');
        this.writer.writeString(unit_converter_1.UnitConverter.twipsToEmu(drawingObject.offset.x).toString());
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectHorizontalPositionAlignment = function (drawingObject) {
        this.writer.writeWpDrawingStartElement('align');
        this.writer.writeString(writer_helper_1.WriterHelper.getValueFromTablesExplicitDefault(translation_tables_1.TranslationTables.floatingObjectHorizontalPositionAlignmentTable, drawingObject.horizontalPositionAlignment, ''));
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectSimplePosition = function () {
        this.writer.writeWpDrawingStartElement('simplePos');
        this.writer.writeIntValue('x', 0);
        this.writer.writeIntValue('y', 0);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectExtent = function (drawingObject) {
        this.writer.writeWpDrawingStartElement('extent');
        this.writer.writeIntValue('cx', unit_converter_1.UnitConverter.twipsToEmu(Math.max(0, drawingObject.actualSize.width)));
        this.writer.writeIntValue('cy', unit_converter_1.UnitConverter.twipsToEmu(Math.max(drawingObject.actualSize.height, 0)));
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectEffectExtent = function (run) {
        if (!run.useRotation)
            return;
        this.writer.writeWpDrawingStartElement('effectExtent');
        var effectExtent = new EffectExtent(unit_converter_1.UnitConverter.twipsToEmu(run.actualSize.width), unit_converter_1.UnitConverter.twipsToEmu(run.actualSize.height), run.rotation);
        effectExtent.calculate();
        this.writer.writeIntValue('l', effectExtent.horizontalIndent);
        this.writer.writeIntValue('t', effectExtent.verticalIndent);
        this.writer.writeIntValue('r', effectExtent.horizontalIndent);
        this.writer.writeIntValue('b', effectExtent.verticalIndent);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectWrap = function (run) {
        var textWrapType = translation_tables_1.TranslationTables.floatingObjectTextWrapTypeTable.exportMap[run.textWrapType];
        if (textWrapType !== undefined) {
            this.writeWpDrawingElement(run, textWrapType.mlValue.openXmlValue, enum_1.EnumUtils.isAnyOf(run.textWrapType, enums_1.AnchorObjectTextWrapType.Square, enums_1.AnchorObjectTextWrapType.Through, enums_1.AnchorObjectTextWrapType.Tight));
        }
    };
    DrawingExporter.prototype.writeWpDrawingElement = function (run, elementName, useTextWrapSide) {
        this.writer.writeWpDrawingStartElement(elementName);
        if (useTextWrapSide)
            this.writer.attr('wrapText', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.floatingObjectTextWrapSideTable, run.textWrapSide, enums_1.AnchorObjectTextWrapSide.Both));
        this.writeWpWrapPolygonElement(run);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeWpWrapPolygonElement = function (run) {
        if (run.textWrapType != enums_1.AnchorObjectTextWrapType.Through && run.textWrapType != enums_1.AnchorObjectTextWrapType.Tight)
            return;
        this.writer.writeWpDrawingStartElement('wrapPolygon');
        this.writeWpDrawingStart();
        this.writeWpLineToDrawingElement(0, 21600);
        this.writeWpLineToDrawingElement(21600, 21600);
        this.writeWpLineToDrawingElement(21600, 0);
        this.writeWpLineToDrawingElement(0, 0);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeWpDrawingStart = function () {
        this.writer.writeWpDrawingStartElement('start');
        this.writer.writeIntValue('x', 0);
        this.writer.writeIntValue('y', 0);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeWpLineToDrawingElement = function (x, y) {
        this.writer.writeWpDrawingStartElement('lineTo');
        this.writer.writeIntValue('x', x);
        this.writer.writeIntValue('y', y);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectCNvGraphicFramePr = function (run) {
        if (run.useLockAspectRatio) {
            this.writer.writeWpDrawingStartElement('cNvGraphicFramePr');
            this.writeFloatingObjectGraphicFrameLocks(run);
            this.writer.endElement();
        }
    };
    DrawingExporter.prototype.writeFloatingObjectGraphicFrameLocks = function (run) {
        this.writer.writeDrawingStartElement('graphicFrameLocks');
        this.writer.writeBoolValue('noChangeAspect', run.lockAspectRatio);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeFloatingObjectDocPr = function (drawingObject, id) {
        this.writeElementDocPrCore(drawingObject, id);
    };
    DrawingExporter.prototype.writeElementDocPrCore = function (drawingObject, id) {
        var name = !string_1.StringUtils.isNullOrEmpty(drawingObject.containerProperties.name) ? drawingObject.containerProperties.name :
            (drawingObject.isTextBox ? "Text Box " + id.toString() : "Picture " + id.toString());
        var hyperlinkInfo = drawingObject.hyperlinkInfo;
        this.writer.writeWpDrawingStartElement('docPr');
        this.writer.writeIntValue('id', id);
        if (!string_1.StringUtils.isNullOrEmpty(name))
            this.writer.attr('name', name);
        if (!string_1.StringUtils.isNullOrEmpty(drawingObject.containerProperties.description))
            this.writer.attr('descr', drawingObject.containerProperties.description);
        if (!string_1.StringUtils.isNullOrEmpty(drawingObject.containerProperties.title))
            this.writer.attr("title", drawingObject.containerProperties.title);
        if (hyperlinkInfo != null)
            this.writeHyperlinkClick(hyperlinkInfo);
        this.writer.endElement();
    };
    DrawingExporter.prototype.writeHyperlinkClick = function (hyperlinkInfo) {
        this.writer.writeDrawingStartElement('hlinkClick');
        var target = hyperlinkInfo.uri;
        if (!string_1.StringUtils.isNullOrEmpty(hyperlinkInfo.anchor))
            target += '#' + hyperlinkInfo.anchor;
        if (!string_1.StringUtils.isNullOrEmpty(target)) {
            var relId = this.data.idGenerator.calcDocumentRelationId();
            this.data.subDocumentExporter.hyperlinkRelationsTable[relId] = target;
            this.writer.attrNS(constants_2.DocxNsType.Rels, 'id', relId);
        }
        if (!string_1.StringUtils.isNullOrEmpty(hyperlinkInfo.anchor))
            this.writer.attr('tgtFrame', hyperlinkInfo.anchor);
        if (!string_1.StringUtils.isNullOrEmpty(hyperlinkInfo.tip))
            this.writer.attr('tooltip', hyperlinkInfo.tip);
        this.writer.endElement();
    };
    return DrawingExporter;
}(base_1.BaseExporter));
exports.DrawingExporter = DrawingExporter;
var EffectExtent = (function () {
    function EffectExtent(width, height, rotation) {
        this.width = width;
        this.height = height;
        this.rotation = rotation;
    }
    EffectExtent.prototype.calculate = function () {
        var angle = unit_converter_1.UnitConverter.twipsToDegree(this.rotation) * Math.PI / 180;
        var xCoordinateA = Math.floor(this.width / 2);
        var yCoordinateA = Math.floor(this.height / 2);
        var newXCoordinateA = Math.floor(xCoordinateA * Math.cos(angle) - yCoordinateA * Math.sin(angle));
        var newYCoordinateA = Math.floor(xCoordinateA * Math.sin(angle) + yCoordinateA * Math.cos(angle));
        var xCoordinateB = xCoordinateA;
        var yCoordinateB = -yCoordinateA;
        var newXCoordinateB = Math.floor(xCoordinateB * Math.cos(angle) - yCoordinateB * Math.sin(angle));
        var newYCoordinateB = Math.floor(xCoordinateB * Math.sin(angle) + yCoordinateB * Math.cos(angle));
        if (Math.abs(newXCoordinateA) > Math.abs(newXCoordinateB)) {
            this.horizontalIndent = Math.abs(Math.abs(newXCoordinateA) - Math.abs(xCoordinateA));
            this.verticalIndent = Math.abs(Math.abs(newYCoordinateB) - Math.abs(yCoordinateB));
        }
        else {
            this.horizontalIndent = Math.abs(Math.abs(newXCoordinateB) - Math.abs(xCoordinateB));
            this.verticalIndent = Math.abs(Math.abs(newYCoordinateA) - Math.abs(yCoordinateA));
        }
        if ((unit_converter_1.UnitConverter.twipsToDegree(this.rotation) - 90) % 180 == 0)
            this.horizontalIndent = 0;
    };
    return EffectExtent;
}());
