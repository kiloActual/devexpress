"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../../core/model/borders/enums");
var table_cell_properties_1 = require("../../../../../core/model/tables/properties/table-cell-properties");
var table_base_structures_1 = require("../../../../../core/model/tables/secondary-structures/table-base-structures");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../../../translation-table/translation-tables");
var writer_helper_1 = require("../../../utils/writer-helper");
var base_1 = require("../../base");
var table_properties_1 = require("./table-properties");
var TableCellPropertiesExporter = (function (_super) {
    tslib_1.__extends(TableCellPropertiesExporter, _super);
    function TableCellPropertiesExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableCellPropertiesExporter.exportCellMargins = function (data, tag, cellMargins) {
        data.writer.writeWpStartElement(tag);
        data.tableWidthExporter.exportWidthUnitValue('top', cellMargins.top);
        data.tableWidthExporter.exportWidthUnitValue('left', cellMargins.left);
        data.tableWidthExporter.exportWidthUnitValue('bottom', cellMargins.bottom);
        data.tableWidthExporter.exportWidthUnitValue('right', cellMargins.right);
        data.writer.endElement();
    };
    TableCellPropertiesExporter.shouldExportCellMargins = function (data, cellMargins) {
        return !data.tableWidthExporter.forbidExportWidthUnit(cellMargins.bottom) ||
            !data.tableWidthExporter.forbidExportWidthUnit(cellMargins.left) ||
            !data.tableWidthExporter.forbidExportWidthUnit(cellMargins.top) ||
            !data.tableWidthExporter.forbidExportWidthUnit(cellMargins.right);
    };
    TableCellPropertiesExporter.prototype.exportTableCellProperties = function (cell) {
        this.writer.writeWpStartElement('tcPr');
        this.exportTableCellPropertiesCore(cell, true);
        this.writer.endElement();
    };
    TableCellPropertiesExporter.prototype.exportTableCellPropertiesForStyle = function (props) {
        this.writer.writeWpStartElement('tcPr');
        this.exportCoreProperties(props, true);
        this.writer.endElement();
    };
    TableCellPropertiesExporter.prototype.exportTableCellPropertiesCore = function (cell, exportBorders) {
        var props = cell.properties;
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseCellConditionalFormatting))
            this.writer.writeWpStringValue('cnfStyle', string_1.StringUtils.padLeft(cell.conditionalFormatting.toString(2), 12, '0'));
        this.data.tableWidthExporter.exportWidthUnitValue('tcW', cell.preferredWidth);
        if (cell.columnSpan > 1)
            this.writer.writeWpIntValue('gridSpan', cell.columnSpan);
        if (cell.verticalMerging != table_base_structures_1.TableCellMergingState.None)
            this.writer.writeWpStringValue('vMerge', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.mergingStateTable, cell.verticalMerging, table_base_structures_1.TableCellMergingState.Restart));
        this.exportCoreProperties(props, exportBorders);
    };
    TableCellPropertiesExporter.prototype.exportCoreProperties = function (props, exportBorders) {
        if (exportBorders)
            this.exportTableCellBorders(props);
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex))
            this.data.colorExporter.exportShadingCore(props.shadingInfo, true);
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseNoWrap))
            this.writer.writeWpEmptyOrFalseValue('noWrap', props.noWrap);
        if (TableCellPropertiesExporter.shouldExportCellMargins(this.data, props.cellMargins))
            TableCellPropertiesExporter.exportCellMargins(this.data, 'tcMar', props.cellMargins);
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTextDirection))
            this.writer.writeWpStringValue('textDirection', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.textDirectionTable, props.textDirection, table_base_structures_1.TextDirection.LeftToRightTopToBottom));
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseFitText))
            this.writer.writeWpEmptyOrFalseValue('tcFitText', props.fitText);
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment))
            this.writer.writeWpStringValue('vAlign', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.verticalAlignmentTable, props.verticalAlignment, table_base_structures_1.TableCellVerticalAlignment.Top));
        if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseHideCellMark))
            this.writer.writeWpEmptyOrFalseValue('hideMark', props.hideCellMark);
    };
    TableCellPropertiesExporter.prototype.exportTableCellBorders = function (props) {
        if (this.hasBorders(props)) {
            var borders = props.borders;
            this.writer.writeWpStartElement('tcBorders');
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopBorder))
                this.exportTableCellBorder('top', borders.topBorder);
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder))
                this.exportTableCellBorder('left', borders.leftBorder);
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder))
                this.exportTableCellBorder('bottom', borders.bottomBorder);
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightBorder))
                this.exportTableCellBorder('right', borders.rightBorder);
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder))
                this.exportTableCellBorder('tl2br', borders.topLeftDiagonalBorder);
            if (props.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder))
                this.exportTableCellBorder('tr2bl', borders.topRightDiagonalBorder);
            this.writer.endElement();
        }
    };
    TableCellPropertiesExporter.prototype.hasBorders = function (props) {
        var shouldUse = function (mask, border) { return props.getUseValue(mask) && border.style != enums_1.BorderLineStyle.Nil; };
        return shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseTopBorder, props.borders.topBorder) ||
            shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseRightBorder, props.borders.rightBorder) ||
            shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder, props.borders.bottomBorder) ||
            shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder, props.borders.leftBorder) ||
            shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder, props.borders.topLeftDiagonalBorder) ||
            shouldUse(table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder, props.borders.topRightDiagonalBorder);
    };
    TableCellPropertiesExporter.prototype.exportTableCellBorder = function (tag, border) {
        if (border.style != enums_1.BorderLineStyle.Nil) {
            this.writer.writeWpStartElement(tag);
            if (border.style == enums_1.BorderLineStyle.None)
                this.writer.writeWpStringAttr('val', translation_tables_1.TranslationTables.borderLineStyleTable.exportMap[enums_1.BorderLineStyle.Nil].mlValue.openXmlValue);
            else
                table_properties_1.TablePropertiesExporter.exportTableBorderCore(this.data, border, false);
            this.writer.endElement();
        }
    };
    return TableCellPropertiesExporter;
}(base_1.BaseExporter));
exports.TableCellPropertiesExporter = TableCellPropertiesExporter;
