"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tint_and_shade_calculator_1 = require("../../../../core/formats/utils/color/tint-and-shade-calculator");
var dx_color_1 = require("../../../../core/model/color/dx-color");
var enums_1 = require("../../../../core/model/color/enums");
var shading_pattern_1 = require("../../../../core/model/shadings/shading-pattern");
var constants_1 = require("@devexpress/utils/lib/constants");
var color_1 = require("@devexpress/utils/lib/utils/color");
var translation_tables_1 = require("../../../translation-table/translation-tables");
var writer_helper_1 = require("../../utils/writer-helper");
var base_1 = require("../base");
var ColorExporter = (function (_super) {
    tslib_1.__extends(ColorExporter, _super);
    function ColorExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ColorExporter.prototype, "colorProvider", {
        get: function () { return this.data.model.colorProvider; },
        enumerable: true,
        configurable: true
    });
    ColorExporter.convertThemeColorValue = function (themeColorValue) {
        return writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.themeColorValueTable, themeColorValue, enums_1.ThemeColorValues.None);
    };
    ColorExporter.convertThemeColorIndex = function (themeColorIndex) {
        return writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.themeColorIndexTable, themeColorIndex, enums_1.ThemeColorIndexConstants.None);
    };
    ColorExporter.convertShadingPattern = function (value) {
        return writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.shadingPatternTable, value, shading_pattern_1.ShadingPattern.Clear);
    };
    ColorExporter.convertColorToString = function (color) {
        return color_1.ColorUtils.colorToHash(color).substr(1);
    };
    ColorExporter.prototype.exportColorInfo = function (colorInfo, attribute, exportAutoColor) {
        var color = colorInfo.toRgb(this.colorProvider);
        if (!dx_color_1.DXColor.isTransparentOrEmpty(color)) {
            this.writer.writeWpStringAttr(attribute, ColorExporter.convertColorToString(color));
            if (colorInfo.themeValue != enums_1.ThemeColorValues.None)
                this.writer.writeWpStringAttr('themeColor', ColorExporter.convertThemeColorValue(colorInfo.themeValue));
            else if (colorInfo.themeColorIndex != enums_1.ThemeColorIndexConstants.None)
                this.writer.writeWpStringAttr('themeColor', ColorExporter.convertThemeColorIndex(colorInfo.themeColorIndex));
            if (colorInfo.tint < 0 && colorInfo.tint > constants_1.Constants.MIN_SAFE_INTEGER)
                this.writer.writeWpStringAttr('themeShade', writer_helper_1.WriterHelper.convertToHexString(tint_and_shade_calculator_1.TintAndShadeCalculator.calculateShadeFromColorModelInfoTint(colorInfo.tint)));
            if (colorInfo.tint > 0)
                this.writer.writeWpStringAttr('themeTint', writer_helper_1.WriterHelper.convertToHexString(tint_and_shade_calculator_1.TintAndShadeCalculator.calculateTintFromColorModelInfoTint(colorInfo.tint)));
        }
        else {
            if (exportAutoColor)
                this.writer.writeWpStringAttr(attribute, 'auto');
        }
    };
    ColorExporter.prototype.convertHighlightColorToString = function (value) {
        if (dx_color_1.DXColor.isTransparentOrEmpty(value))
            return translation_tables_1.TranslationTables.predefinedBackgroundColors.exportMap[dx_color_1.DXColor.empty].mlValue.openXmlValue;
        var result = translation_tables_1.TranslationTables.predefinedBackgroundColors.exportMap[value];
        if (result !== undefined)
            return result.mlValue.openXmlValue;
        var bestMatchColor = dx_color_1.DXColor.calculateNearestColor(translation_tables_1.TranslationTables.listOfKeysPredefinedBackgroundColors, value);
        var currentTableBackgroundColor = this.data.currentTableBackgroundColor;
        return !dx_color_1.DXColor.isTransparentOrEmpty(currentTableBackgroundColor) && currentTableBackgroundColor == value && bestMatchColor != value ?
            '' :
            translation_tables_1.TranslationTables.predefinedBackgroundColors.exportMap[bestMatchColor].mlValue.openXmlValue;
    };
    ColorExporter.prototype.exportShadingCore = function (shadingInfo, exportAutoColor) {
        this.writer.writeWpStartElement('shd');
        this.writer.writeWpStringAttr('val', ColorExporter.convertShadingPattern(shadingInfo.shadingPattern));
        this.exportColorInfo(shadingInfo.foreColor, 'color', exportAutoColor);
        this.exportFillInfo(shadingInfo.backColor);
        this.writer.endElement();
    };
    ColorExporter.prototype.exportFillInfo = function (fillInfo) {
        var color = fillInfo.toRgb(this.colorProvider);
        if (!dx_color_1.DXColor.isTransparentOrEmpty(color))
            this.writer.writeWpStringAttr('fill', ColorExporter.convertColorToString(color));
        else
            this.writer.writeWpStringAttr('fill', 'auto');
        if (fillInfo.themeValue != enums_1.ThemeColorValues.None)
            this.writer.writeWpStringAttr('themeFill', ColorExporter.convertThemeColorValue(fillInfo.themeValue));
        else if (fillInfo.themeColorIndex != enums_1.ThemeColorIndexConstants.None)
            this.writer.writeWpStringAttr('themeFill', ColorExporter.convertThemeColorIndex(fillInfo.themeColorIndex));
        if (fillInfo.tint < 0 && fillInfo.tint > constants_1.Constants.MIN_SAFE_INTEGER)
            this.writer.writeWpStringAttr('themeFillShade', writer_helper_1.WriterHelper.convertToHexString(tint_and_shade_calculator_1.TintAndShadeCalculator.calculateShadeFromColorModelInfoTint(fillInfo.tint)));
        if (fillInfo.tint > 0)
            this.writer.writeWpStringAttr('themeFillTint', writer_helper_1.WriterHelper.convertToHexString(tint_and_shade_calculator_1.TintAndShadeCalculator.calculateTintFromColorModelInfoTint(fillInfo.tint)));
    };
    return ColorExporter;
}(base_1.BaseExporter));
exports.ColorExporter = ColorExporter;
