"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/color/enums");
var json_document_enums_1 = require("../../../core/model/json/enums/json-document-enums");
var document_protection_1 = require("../../../core/model/options/document-protection");
var enums_2 = require("../../../core/model/themes/enums");
var theme_drawing_color_collection_1 = require("../../../core/model/themes/theme-drawing-color-collection");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../translation-table/translation-tables");
var word_processing_mlvalue_1 = require("../../translation-table/word-processing-mlvalue");
var constants_1 = require("../../utils/constants");
var base_1 = require("./base");
var SettingsExporter = (function (_super) {
    tslib_1.__extends(SettingsExporter, _super);
    function SettingsExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SettingsExporter.prototype, "filePath", {
        get: function () { return 'word/settings.xml'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsExporter.prototype, "rootElement", {
        get: function () { return new word_processing_mlvalue_1.WordProcessingMLValue('settings', 'docPr').openXmlValue; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsExporter.prototype, "rootNSPrefix", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].prefix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SettingsExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].namespace; },
        enumerable: true,
        configurable: true
    });
    SettingsExporter.prototype.fillWriter = function () {
        this.writer.writeWpBoolValue('displayBackgroundShape', this.data.model.displayBackgroundShape);
        this.exportDocumentProtectionSettings();
        this.writer.writeWpIntValue('defaultTabStop', this.data.model.defaultTabWidth);
        this.writer.writeWpBoolValue('autoHyphenation', false);
        this.writer.writeWpBoolValue('evenAndOddHeaders', this.data.model.differentOddAndEvenPages);
        this.exportCompatSettings();
        this.exportDocumentVariables();
        this.exportColorSchemeMapping();
    };
    SettingsExporter.prototype.exportColorSchemeMapping = function () {
        var mapping = theme_drawing_color_collection_1.ThemeDrawingColorCollection.schemeColorValuesToThemeColorIndexTranslationTable;
        this.writer.writeWpStartElement('clrSchemeMapping');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Background1, 'bg1');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Text1, 't1');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Background2, 'bg2');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Text2, 't2');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent1, 'accent1');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent2, 'accent2');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent3, 'accent3');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent4, 'accent4');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent5, 'accent5');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Accent6, 'accent6');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.Hyperlink, 'hyperlink');
        this.exportColorSchemeMappingElement(mapping, enums_2.SchemeColorValues.FollowedHyperlink, 'followedHyperlink');
        this.writer.endElement();
    };
    SettingsExporter.prototype.exportCompatSettings = function () {
        var _this = this;
        this.writer.writeWpStartElement('compat');
        list_1.ListUtils.forEach(this.data.model.compatSettings, function (settings) {
            _this.writer.writeWpStartElement('compatSetting');
            _this.writer.writeWpStringAttr('name', settings.name);
            _this.writer.writeWpStringAttr('uri', settings.uri);
            _this.writer.writeWpStringAttr('val', settings.value);
            _this.writer.endElement();
        });
        this.writer.endElement();
    };
    SettingsExporter.prototype.exportDocumentVariables = function () {
        var _this = this;
        this.writer.writeWpStartElement('docVars');
        this.data.model.docVariables.foreach(function (name, value) {
            if (!common_1.isDefined(value) || typeof (value) == 'object')
                return;
            value = String(value);
            if (string_1.StringUtils.isNullOrEmpty(value))
                return;
            _this.writer.writeWpStartElement('docVar');
            _this.writer.writeWpStringAttr('name', name);
            _this.writer.writeWpStringAttr('val', value);
            _this.writer.endElement();
        });
        this.writer.endElement();
    };
    SettingsExporter.prototype.exportColorSchemeMappingElement = function (mapping, key, attribute) {
        var themeColorIndex = mapping[key];
        if (themeColorIndex !== undefined && themeColorIndex != enums_1.ThemeColorIndexConstants.None) {
            var value = translation_tables_1.TranslationTables.simpleThemeColorIndexTable[themeColorIndex];
            if (value !== undefined)
                this.writer.writeWpStringAttr(attribute, value);
        }
    };
    SettingsExporter.prototype.exportDocumentProtectionSettings = function () {
        var properties = this.data.model.documentProtectionProperties;
        if (!properties.enforceProtection)
            return;
        this.writer.writeWpStartElement('documentProtection');
        this.exportDocumentProtectionType(properties.protectionType);
        this.writer.writeWpBoolAttr('enforcement', properties.enforceProtection);
        this.exportDocumentProtectionSettingsCore(properties);
        this.writer.endElement();
    };
    SettingsExporter.prototype.exportDocumentProtectionType = function (protectionType) {
        if (protectionType == json_document_enums_1.DocumentProtectionType.ReadOnly)
            this.writer.writeWpStringAttr('edit', 'readOnly');
        if (protectionType == json_document_enums_1.DocumentProtectionType.AllowComments)
            this.writer.writeWpStringAttr('edit', 'comments');
        if (protectionType == json_document_enums_1.DocumentProtectionType.TrackedChanges)
            this.writer.writeWpStringAttr('edit', 'trackedChanges');
    };
    SettingsExporter.prototype.exportDocumentProtectionSettingsCore = function (properties) {
        if (!properties.passwordHash || properties.passwordHash.length <= 0)
            return;
        this.writer.writeWpStringAttr('cryptProviderType', properties.cryptProviderType == document_protection_1.CryptProviderType.RsaAES ? 'rsaAES' : 'rsaFull');
        this.writer.writeWpStringAttr('cryptAlgorithmClass', 'hash');
        this.writer.writeWpStringAttr('cryptAlgorithmType', 'typeAny');
        this.writer.writeWpIntAttr('cryptAlgorithmSid', properties.hashAlgorithmType);
        this.writer.writeWpStringAttr('cryptSpinCount', Math.max(1, properties.hashIterationCount).toString());
        if (properties.passwordHash)
            this.writer.writeWpStringAttr('hash', base64_1.Base64Utils.fromArrayBuffer(properties.passwordHash));
        if (properties.passwordPrefix)
            this.writer.writeWpStringAttr('salt', base64_1.Base64Utils.fromArrayBuffer(properties.passwordPrefix));
    };
    return SettingsExporter;
}(base_1.ExporterBaseWithRootElement));
exports.SettingsExporter = SettingsExporter;
