"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/color/enums");
var drawing_text_font_1 = require("../../../core/model/drawing/drawing-text-font");
var color_1 = require("@devexpress/utils/lib/utils/color");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../translation-table/translation-tables");
var constants_1 = require("../../utils/constants");
var base_1 = require("./base");
var relation_collection_1 = require("./relations/relation-collection");
var ThemeExporter = (function (_super) {
    tslib_1.__extends(ThemeExporter, _super);
    function ThemeExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ThemeExporter.prototype, "filePath", {
        get: function () { return 'word/theme/theme1.xml'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThemeExporter.prototype, "rootElement", {
        get: function () { return 'theme'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThemeExporter.prototype, "rootNSPrefix", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.DrawingML].prefix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThemeExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.DrawingML].namespace; },
        enumerable: true,
        configurable: true
    });
    ThemeExporter.prototype.fillWriter = function () {
        this.data.pushRelationExporter(new relation_collection_1.RelationCollectionExporter(this.data, 'word/theme/_rels/theme1.xml.rels'));
        this.writer.attr('name', this.data.model.colorProvider.officeTheme.name);
        this.generateThemeElementsContent();
        this.generateObjectDefaults();
        this.generateExtraClrScheme();
        this.data.popRelationExporter();
        this.data.contentTypesExporter.registerContentTypeOverride('/word/theme/theme1.xml', constants_1.ContentType.theme);
    };
    ThemeExporter.prototype.createElement = function (tag, action) {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, tag);
        action.call(this);
        this.writer.endElement();
    };
    ThemeExporter.prototype.writeIntValue = function (attr, value, defaultValue) {
        if (value != defaultValue)
            this.writer.attr(attr, value.toString());
    };
    ThemeExporter.prototype.generateThemeElementsContent = function () {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'themeElements');
        this.generateThemeColorSchemesContent();
        this.generateThemeFontSchemesContent();
        this.generateThemeFormatSchemesContent();
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateObjectDefaults = function () {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'objectDefaults');
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateExtraClrScheme = function () {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'extraClrSchemeLst');
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateThemeColorSchemesContent = function () {
        var colors = this.data.model.colorProvider.officeTheme.colors;
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'clrScheme');
        this.writer.attr('name', this.data.model.colorProvider.officeTheme.colors.name);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Dark1, colors.Dark1);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Light1, colors.Light1);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Dark2, colors.Dark2);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Light2, colors.Light2);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent1, colors.Accent1);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent2, colors.Accent2);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent3, colors.Accent3);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent4, colors.Accent4);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent5, colors.Accent5);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Accent6, colors.Accent6);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.Hyperlink, colors.Hyperlink);
        this.generateThemeColorSchemeContent(enums_1.ThemeColorIndexConstants.FollowedHyperlink, colors.FollowedHyperlink);
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateThemeColorSchemeContent = function (themeColorIndex, color) {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, translation_tables_1.TranslationTables.simple2ThemeColorIndexTable[themeColorIndex]);
        this.generateDrawingColorContent(color);
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateThemeFontSchemesContent = function () {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'fontScheme');
        this.writer.attr('name', this.data.model.colorProvider.officeTheme.fontScheme.name);
        this.generateThemeFontSchemePartContent(this.data.model.colorProvider.officeTheme.fontScheme.majorFont, 'majorFont');
        this.generateThemeFontSchemePartContent(this.data.model.colorProvider.officeTheme.fontScheme.minorFont, 'minorFont');
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateThemeFontSchemePartContent = function (scheme, tagName) {
        var _this = this;
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, tagName);
        this.generateDrawingTextFontContent(scheme.latin, 'latin');
        this.generateDrawingTextFontContent(scheme.eastAsian, 'ea');
        this.generateDrawingTextFontContent(scheme.complexScript, 'cs');
        string_1.StringMapUtils.forEach(scheme.supplementalFonts, function (value, key) { return _this.generateThemeSupplementalFontContent(key, value); });
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateThemeSupplementalFontContent = function (script, typeface) {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'font');
        this.writer.attr('script', script);
        this.writer.attr('typeface', typeface);
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateDrawingTextFontContent = function (textFont, tagName) {
        var typeface = textFont.typeface;
        var panose = textFont.panose;
        var pitchFamily = textFont.pitchFamily;
        var charset = textFont.charset;
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, tagName);
        this.writer.attr('typeface', string_2.StringUtils.isNullOrEmpty(typeface) ? '' : typeface);
        if (!string_2.StringUtils.isNullOrEmpty(panose) && panose.length == 20)
            this.writer.attr('panose', panose);
        this.writeIntValue('pitchFamily', pitchFamily, drawing_text_font_1.DrawingTextFont.DefaultPitchFamily);
        this.writeIntValue('charset', charset, drawing_text_font_1.DrawingTextFont.DefaultCharset);
        this.writer.endElement();
    };
    ThemeExporter.prototype.generateDrawingColorContent = function (color) {
        if (color)
            switch (color.colorType) {
                case enums_1.DrawingColorType.Rgb:
                    this.exportRgbColor(color);
                    break;
                case enums_1.DrawingColorType.System:
                    this.exportSystemColor(color);
                    break;
            }
    };
    ThemeExporter.prototype.exportSystemColor = function (color) {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'sysClr');
        this.exportSystemColorAttributes(color.system);
        this.exportLastComputedColorAttribute(color.finalColor(this.data.model.colorProvider));
        this.writer.endElement();
    };
    ThemeExporter.prototype.exportRgbColor = function (color) {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'srgbClr');
        this.exportRgbColorAttributes(color.originalColor.rgb);
        this.writer.endElement();
    };
    ThemeExporter.prototype.exportRgbColorAttributes = function (color) {
        this.exportColorAttributes('val', color);
    };
    ThemeExporter.prototype.exportColorAttributes = function (tag, color) {
        this.writer.attr(tag, color_1.ColorUtils.colorToHash(color).substr(1));
    };
    ThemeExporter.prototype.exportSystemColorAttributes = function (color) {
        var value = translation_tables_1.TranslationTables.systemColorTable.exportMap[color];
        if (value !== undefined)
            this.writer.attr('val', value.mlValue.openXmlValue);
    };
    ThemeExporter.prototype.exportLastComputedColorAttribute = function (color) {
        this.exportColorAttributes('lastClr', color);
    };
    ThemeExporter.prototype.generateThemeFormatSchemesContent = function () {
        this.writer.elementStartNS(constants_1.DocxNsType.DrawingML, 'fmtScheme');
        var name = this.data.model.colorProvider.officeTheme.formatScheme.name;
        if (!string_2.StringUtils.isNullOrEmpty(name))
            this.writer.attr('name', name);
        this.createElement('fillStyleLst', this.generateDrawingFillContent);
        this.createElement('lnStyleLst', this.generateOutlineContent);
        this.createElement('effectStyleLst', this.generateDrawingEffectStyleContent);
        this.createElement('bgFillStyleLst', this.generateDrawingBgFillContent);
        this.writer.endElement();
    };
    ThemeExporter.prototype.addTempString = function (str) {
        return "<tmpElement xmlns:" + this.data.constants.namespaces[constants_1.DocxNsType.DrawingML].prefix + "=" +
            ("\"" + this.data.constants.namespaces[constants_1.DocxNsType.DrawingML].namespace + "\">") +
            str +
            '</tmpElement>';
    };
    ThemeExporter.prototype.generateDrawingFillContent = function () {
        this.writer.writeRaw(this.addTempString('<a:solidFill>' +
            '<a:schemeClr val="phClr"/>' +
            '</a:solidFill>' +
            '<a:gradFill rotWithShape="1">' +
            '<a:gsLst>' +
            '<a:gs pos="0">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="50000"/>' +
            '<a:satMod val="300000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="35000">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="37000"/>' +
            '<a:satMod val="300000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="100000">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="15000"/>' +
            '<a:satMod val="350000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '</a:gsLst>' +
            '<a:lin ang="16200000" scaled="1"/>' +
            '</a:gradFill>' +
            '<a:gradFill rotWithShape="1">' +
            '<a:gsLst>' +
            '<a:gs pos="0">' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="51000"/>' +
            '<a:satMod val="130000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="80000">' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="93000"/>' +
            '<a:satMod val="130000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="100000">' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="94000"/>' +
            '<a:satMod val="135000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '</a:gsLst>' +
            '<a:lin ang="16200000" scaled="0"/>' +
            '</a:gradFill>'));
    };
    ThemeExporter.prototype.generateOutlineContent = function () {
        this.writer.writeRaw(this.addTempString('<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr">' +
            '<a:solidFill>' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="95000"/>' +
            '<a:satMod val="105000"/>' +
            '</a:schemeClr>' +
            '</a:solidFill>' +
            '<a:prstDash val="solid"/>' +
            '</a:ln>' +
            '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr">' +
            '<a:solidFill>' +
            '<a:schemeClr val="phClr"/>' +
            '</a:solidFill>' +
            '<a:prstDash val="solid"/>' +
            '</a:ln>' +
            '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr">' +
            '<a:solidFill>' +
            '<a:schemeClr val="phClr"/>' +
            '</a:solidFill>' +
            '<a:prstDash val="solid"/>' +
            '</a:ln>'));
    };
    ThemeExporter.prototype.generateDrawingEffectStyleContent = function () {
        this.writer.writeRaw(this.addTempString('<a:effectStyle>' +
            '<a:effectLst>' +
            '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0">' +
            '<a:srgbClr val="000000">' +
            '<a:alpha val="38000"/>' +
            '</a:srgbClr>' +
            '</a:outerShdw>' +
            '</a:effectLst>' +
            '</a:effectStyle>' +
            '<a:effectStyle>' +
            '<a:effectLst>' +
            '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0">' +
            '<a:srgbClr val="000000">' +
            '<a:alpha val="35000"/>' +
            '</a:srgbClr>' +
            '</a:outerShdw>' +
            '</a:effectLst>' +
            '</a:effectStyle>' +
            '<a:effectStyle>' +
            '<a:effectLst>' +
            '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0">' +
            '<a:srgbClr val="000000">' +
            '<a:alpha val="35000"/>' +
            '</a:srgbClr>' +
            '</a:outerShdw>' +
            '</a:effectLst>' +
            '<a:scene3d>' +
            '<a:camera prst="orthographicFront">' +
            '<a:rot lat="0" lon="0" rev="0"/>' +
            '</a:camera>' +
            '<a:lightRig rig="threePt" dir="t">' +
            '<a:rot lat="0" lon="0" rev="1200000"/>' +
            '</a:lightRig>' +
            '</a:scene3d>' +
            '<a:sp3d>' +
            '<a:bevelT w="63500" h="25400"/>' +
            '</a:sp3d>' +
            '</a:effectStyle>'));
    };
    ThemeExporter.prototype.generateDrawingBgFillContent = function () {
        this.writer.writeRaw(this.addTempString('<a:solidFill>' +
            '<a:schemeClr val="phClr"/>' +
            '</a:solidFill>' +
            '<a:gradFill rotWithShape="1">' +
            '<a:gsLst>' +
            '<a:gs pos="0">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="40000"/>' +
            '<a:satMod val="350000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="40000">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="45000"/>' +
            '<a:shade val="99000"/>' +
            '<a:satMod val="350000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="100000">' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="20000"/>' +
            '<a:satMod val="255000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '</a:gsLst>' +
            '<a:path path="circle">' +
            '<a:fillToRect l="50000" t="-80000" r="50000" b="180000"/>' +
            '</a:path>' +
            '</a:gradFill>' +
            '<a:gradFill rotWithShape="1">' +
            '<a:gsLst>' +
            '<a:gs pos="0">' +
            '<a:schemeClr val="phClr">' +
            '<a:tint val="80000"/>' +
            '<a:satMod val="300000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '<a:gs pos="100000">' +
            '<a:schemeClr val="phClr">' +
            '<a:shade val="30000"/>' +
            '<a:satMod val="200000"/>' +
            '</a:schemeClr>' +
            '</a:gs>' +
            '</a:gsLst>' +
            '<a:path path="circle">' +
            '<a:fillToRect l="50000" t="50000" r="50000" b="50000"/>' +
            '</a:path>' +
            '</a:gradFill>'));
    };
    return ThemeExporter;
}(base_1.ExporterBaseWithRootElement));
exports.ThemeExporter = ThemeExporter;
