"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var cross_existing_iterator_1 = require("../../../../core/formats/utils/cross-existing-iterator");
var field_1 = require("../../../../core/model/fields/field");
var model_iterator_1 = require("../../../../core/model/model-iterator");
var run_type_1 = require("../../../../core/model/runs/run-type");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var constants_1 = require("../../../utils/constants");
var inline_drawing_object_1 = require("../../utils/inline-drawing-object");
var base_1 = require("../base");
var drawing_1 = require("../base/drawing");
var table_1 = require("../base/table/table");
var BaseSubDocumentExporter = (function (_super) {
    tslib_1.__extends(BaseSubDocumentExporter, _super);
    function BaseSubDocumentExporter(data, subDocument, filePath) {
        var _a;
        var _this = _super.call(this, data) || this;
        _this.fieldCodeDepth = 0;
        _this.paragraph = null;
        _this.firstIteration = true;
        _this.predefinedGroupNames = new map_creator_1.MapCreator()
            .add("Everyone", "everyone")
            .add("Current User", "current")
            .add("Editors", "editors")
            .add("Owners", "owners")
            .add("Contributors", "contributors")
            .add("Administrators", "administrators")
            .get();
        _this.subDocument = subDocument;
        _this._filePath = filePath;
        _this.hyperlinkRelationsTable = {};
        _this.fieldsStack = new stack_1.Stack();
        _this.runHandlerMap = (_a = {},
            _a[run_type_1.RunType.TextRun] = _this.textRunHandler,
            _a[run_type_1.RunType.ParagraphRun] = _this.paragraphRunHandler,
            _a[run_type_1.RunType.SectionRun] = _this.sectionRunHandler,
            _a[run_type_1.RunType.FieldCodeStartRun] = _this.fieldCodeStartRunHandler,
            _a[run_type_1.RunType.FieldCodeEndRun] = _this.fieldCodeEndRunHandler,
            _a[run_type_1.RunType.FieldResultEndRun] = _this.fieldResultEndRunHandler,
            _a[run_type_1.RunType.AnchoredPictureRun] = _this.anchoredPictureRunHandler,
            _a[run_type_1.RunType.AnchoredTextBoxRun] = _this.anchoredTextRunHandler,
            _a[run_type_1.RunType.InlinePictureRun] = _this.inlinePictureRunHandler,
            _a[run_type_1.RunType.InlineTextBoxRun] = null,
            _a[run_type_1.RunType.LayoutDependentRun] = _this.layoutDependentRunHandler,
            _a);
        _this.tableExporter = new table_1.TableExporter(_this.data);
        return _this;
    }
    Object.defineProperty(BaseSubDocumentExporter.prototype, "filePath", {
        get: function () { return this._filePath; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseSubDocumentExporter.prototype, "rootNSPrefix", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].prefix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseSubDocumentExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].namespace; },
        enumerable: true,
        configurable: true
    });
    BaseSubDocumentExporter.prototype.fillWriter = function () {
        this.data.subDocumentExporterStack.push(this);
        this.registerNamespaces();
        this.data.pushRelationExporter(this.createRelationExporter());
        this.fillWriterCore();
        if (!this.subDocument.isMain())
            this.data.popRelationExporter();
        this.data.subDocumentExporterStack.pop();
    };
    BaseSubDocumentExporter.prototype.init = function () {
        this.modelIterator = new model_iterator_1.ModelIterator(this.subDocument, false);
        this.modelIterator.setPosition(0);
        this.tableExporter.init();
        this.bookmarksIterator = new cross_existing_iterator_1.CrossExistingIterator(this.subDocument.bookmarks);
        this.bookmarksIterator.init();
        this.rangePermisiionsIterator = new cross_existing_iterator_1.CrossExistingIterator(this.subDocument.rangePermissions);
        this.rangePermisiionsIterator.init();
    };
    BaseSubDocumentExporter.prototype.endParagraph = function (pos, section, allowInitNextParagraph) {
        if (this.paragraph)
            this.writer.endElement();
        this.tableExporter.checkTable(pos, allowInitNextParagraph);
        if (allowInitNextParagraph) {
            this.paragraph = this.modelIterator.run.paragraph;
            this.writer.writeWpStartElement('p');
            this.data.parPropsExporter.exportParagraphProperties(this.subDocument, section, this.paragraph, this.getCurrentParagraphRun());
        }
    };
    BaseSubDocumentExporter.prototype.getCurrentParagraphRun = function () {
        if (!this.modelIterator.run)
            return null;
        if (this.modelIterator.run.isParagraphOrSectionRun())
            return this.run;
        return this.subDocument.getRunByPosition(this.run.paragraph.interval.end - 1);
    };
    BaseSubDocumentExporter.prototype.exportSection = function (section, sectionInterval) {
        var thingEndPos = sectionInterval.end;
        for (; this.firstIteration || this.modelIterator.moveToNextChar(); this.firstIteration = false) {
            if (this.run != this.modelIterator.run) {
                this.run = this.modelIterator.run;
                this.runText = this.modelIterator.getRunText();
                this.runStartCharOffset = 0;
            }
            var pos = this.modelIterator.getAbsolutePosition();
            if (!this.paragraph || pos >= this.paragraph.getEndPosition()) {
                if (pos == thingEndPos)
                    break;
                this.endParagraph(pos, section, true);
            }
            if (this.bookmarksIterator.update(pos)) {
                this.exportRun(new boundary_1.BoundaryInterval(this.runStartCharOffset, this.modelIterator.charOffset));
                this.exportBookmark(this.bookmarksIterator);
            }
            if (this.rangePermisiionsIterator.update(pos)) {
                this.exportRun(new boundary_1.BoundaryInterval(this.runStartCharOffset, this.modelIterator.charOffset));
                this.exportRangePermission(this.rangePermisiionsIterator);
            }
            if (this.modelIterator.charOffset + 1 == this.run.getLength())
                this.exportRun(new boundary_1.BoundaryInterval(this.runStartCharOffset, this.run.getLength()));
        }
        if (this.bookmarksIterator.update(thingEndPos))
            this.exportBookmark(this.bookmarksIterator);
        if (this.rangePermisiionsIterator.update(thingEndPos))
            this.exportRangePermission(this.rangePermisiionsIterator);
        this.endParagraph(thingEndPos, section, false);
        this.paragraph = null;
        this.firstIteration = true;
    };
    BaseSubDocumentExporter.prototype.registerNamespaces = function () {
        this.ignorableNamespaces = [];
        this.registerDefaultNamespaces();
        this.registerIgnorableNamespaces();
    };
    BaseSubDocumentExporter.prototype.registerDefaultNamespaces = function () {
        this.registerNamespace(constants_1.DocxNsType.WordProcessing, false);
        this.registerNamespace(constants_1.DocxNsType.Wps, false);
        this.registerNamespace(constants_1.DocxNsType.MC, false);
        this.registerNamespace(constants_1.DocxNsType.W10ML, false);
        this.registerNamespace(constants_1.DocxNsType.VML, false);
        this.registerNamespace(constants_1.DocxNsType.Wpg, false);
        this.registerNamespace(constants_1.DocxNsType.Wpc, false);
        this.registerNamespace(constants_1.DocxNsType.Rels, false);
        this.registerNamespace(constants_1.DocxNsType.DrawingML, false);
        this.registerNamespace(constants_1.DocxNsType.DrawingMLPicture, false);
        this.registerNamespace(constants_1.DocxNsType.WordProcessingDrawing, false);
        this.registerNamespace(constants_1.DocxNsType.WordProcessingDrawing14, true);
    };
    BaseSubDocumentExporter.prototype.registerNamespace = function (type, ignorable) {
        this.writer.addNamespaceToRootElement(type);
        if (ignorable)
            this.ignorableNamespaces.push(this.data.constants.namespaces[type].prefix);
    };
    BaseSubDocumentExporter.prototype.registerIgnorableNamespaces = function () {
        if (this.ignorableNamespaces.length) {
            this.writer.attrNS(constants_1.DocxNsType.MC, 'Ignorable', list_1.ListUtils.unique(this.ignorableNamespaces, comparers_1.Comparers.string, function (a, b) { return a == b ? 0 : 1; }).join(' '));
        }
        this.ignorableNamespaces = [];
    };
    BaseSubDocumentExporter.prototype.exportRun = function (charInterval) {
        if (charInterval.length) {
            var handler = this.runHandlerMap[this.run.getType()];
            if (handler) {
                this.absRunStartPosition = this.modelIterator.getAbsoluteRunPosition();
                handler.call(this, this.runText.substring(charInterval.start, charInterval.end));
            }
        }
        this.runStartCharOffset = charInterval.end;
    };
    BaseSubDocumentExporter.prototype.textRunHandler = function (runText) {
        this.writer.writeWpStartElement('r');
        this.data.charPropsExporter.exportRunProperties(this.run);
        this.data.textExporter.exportTextRunCore(runText);
        this.writer.endElement();
    };
    BaseSubDocumentExporter.prototype.paragraphRunHandler = function () {
    };
    BaseSubDocumentExporter.prototype.sectionRunHandler = function () {
    };
    BaseSubDocumentExporter.prototype.fieldCodeStartRunHandler = function () {
        this.fieldsStack.push(this.subDocument.fields[field_1.Field.binaryIndexOf(this.subDocument.fields, this.absRunStartPosition + 1)]);
        this.exportFieldChar('begin', true);
        this.fieldCodeDepth++;
    };
    BaseSubDocumentExporter.prototype.fieldCodeEndRunHandler = function () {
        this.exportFieldChar('separate', false);
        this.fieldCodeDepth--;
    };
    BaseSubDocumentExporter.prototype.fieldResultEndRunHandler = function () {
        this.exportFieldChar('end', false);
        this.fieldsStack.pop();
    };
    BaseSubDocumentExporter.prototype.shouldExportPicture = function (cacheInfo) {
        return cacheInfo.isLoaded || cacheInfo.imageUrl;
    };
    BaseSubDocumentExporter.prototype.anchoredPictureRunHandler = function () {
        this.writer.writeWpStartElement('r');
        this.data.charPropsExporter.exportRunProperties(this.run);
        var picRun = this.run;
        if (this.shouldExportPicture(picRun.cacheInfo))
            new drawing_1.DrawingExporter(this.data).writeFloatingObjectDrawing(new inline_drawing_object_1.AnchoredDrawingPictureObject(picRun), picRun.cacheInfo.currId);
        this.writer.endElement();
    };
    BaseSubDocumentExporter.prototype.anchoredTextRunHandler = function () {
        this.writer.writeWpStartElement('r');
        this.data.charPropsExporter.exportRunProperties(this.run);
        var textBoxRun = this.run;
        new drawing_1.DrawingExporter(this.data).writeFloatingObjectTextBoxContent2010(new inline_drawing_object_1.AnchoredDrawingTextObject(textBoxRun), this.data.model.subDocuments[textBoxRun.subDocId]);
        this.writer.endElement();
    };
    BaseSubDocumentExporter.prototype.inlinePictureRunHandler = function () {
        this.writer.writeWpStartElement('r');
        this.data.charPropsExporter.exportRunProperties(this.run);
        var picRun = this.run;
        if (this.shouldExportPicture(picRun.cacheInfo))
            new drawing_1.DrawingExporter(this.data).writeFloatingObjectDrawing(new inline_drawing_object_1.InlineDrawingObject(picRun), picRun.cacheInfo.currId);
        this.writer.endElement();
    };
    BaseSubDocumentExporter.prototype.layoutDependentRunHandler = function () {
    };
    BaseSubDocumentExporter.prototype.exportBookmark = function (bookmarksIterator) {
        for (var _i = 0, _a = bookmarksIterator.addedObjects; _i < _a.length; _i++) {
            var state = _a[_i];
            this.writer.writeWpStartElement('bookmarkStart');
            this.writer.writeWpIntAttr('id', state.index);
            this.writer.writeWpStringAttr('name', state.object.name);
            this.writer.endElement();
        }
        for (var _b = 0, _c = bookmarksIterator.deletedObjects; _b < _c.length; _b++) {
            var state = _c[_b];
            this.writer.writeWpStartElement('bookmarkEnd');
            this.writer.writeWpIntAttr('id', state.index);
            this.writer.endElement();
        }
    };
    BaseSubDocumentExporter.prototype.exportRangePermission = function (permissionsIterator) {
        for (var _i = 0, _a = permissionsIterator.addedObjects; _i < _a.length; _i++) {
            var state = _a[_i];
            this.writer.writeWpStartElement('permStart');
            this.writer.writeWpIntAttr('id', state.index);
            if (!string_1.StringUtils.isNullOrEmpty(state.object.userName))
                this.writer.writeWpStringAttr('ed', state.object.userName);
            if (!string_1.StringUtils.isNullOrEmpty(state.object.group))
                this.writer.writeWpStringAttr('edGrp', this.getGroupName(state.object.group));
            this.writer.endElement();
        }
        for (var _b = 0, _c = permissionsIterator.deletedObjects; _b < _c.length; _b++) {
            var state = _c[_b];
            this.writer.writeWpStartElement('permEnd');
            this.writer.writeWpIntAttr('id', state.index);
            this.writer.endElement();
        }
    };
    BaseSubDocumentExporter.prototype.getGroupName = function (groupName) {
        var result = this.predefinedGroupNames[groupName];
        return result ? result : groupName;
    };
    BaseSubDocumentExporter.prototype.exportFieldChar = function (fieldCharType, fieldStart) {
        this.writer.writeWpStartElement('r');
        this.data.charPropsExporter.exportRunProperties(this.run);
        this.writer.writeWpStartElement('fldChar');
        this.writer.writeWpStringAttr('fldCharType', fieldCharType);
        var field = this.fieldsStack.last;
        if (fieldStart && field.disableUpdate)
            this.writer.writeWpBoolAttr('disableUpdate', true);
        if (fieldStart && field.locked)
            this.writer.writeWpBoolAttr('fldLock', true);
        if (fieldStart && field.hideByParent)
            this.writeHideByParent();
        this.writer.endElement();
        this.writer.endElement();
    };
    BaseSubDocumentExporter.prototype.writeHideByParent = function () {
    };
    return BaseSubDocumentExporter;
}(base_1.ExporterBaseWithRootElement));
exports.BaseSubDocumentExporter = BaseSubDocumentExporter;
