"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var string_2 = require("@devexpress/utils/lib/utils/string");
var base_1 = require("./base");
var RelationCollectionExporter = (function (_super) {
    tslib_1.__extends(RelationCollectionExporter, _super);
    function RelationCollectionExporter(data, filePath) {
        var _this = _super.call(this, data) || this;
        _this._filePath = filePath;
        _this.collection = [];
        _this.imageRelationsTable = {};
        _this.hyperlinkRelationsTable = {};
        _this.exportedExternalImageRelationsTable = {};
        return _this;
    }
    Object.defineProperty(RelationCollectionExporter.prototype, "filePath", {
        get: function () { return this._filePath; },
        enumerable: true,
        configurable: true
    });
    RelationCollectionExporter.prototype.fillWriter = function () {
        this.generateFileRelationCore(this.imageRelationsTable, this.data.constants.rels.relsImage);
        this.generateFileRelationCore(this.exportedExternalImageRelationsTable, this.data.constants.rels.relsImage, true);
        this.generateHyperlinkRelationsCore(this.hyperlinkRelationsTable, this.data.constants.rels.officeHyperlinkType);
        for (var _i = 0, _a = this.collection; _i < _a.length; _i++) {
            var rel = _a[_i];
            this.addRel(rel.id, rel.type, rel.target);
        }
    };
    RelationCollectionExporter.prototype.generateFileRelationCore = function (relationTable, relationType, external) {
        var _this = this;
        if (external === void 0) { external = false; }
        string_1.StringMapUtils.forEach(relationTable, function (path, relationId) { return _this.addRel(relationId, relationType, path, external); });
    };
    RelationCollectionExporter.prototype.isWriteToZip = function () { return this.numRels > 0; };
    RelationCollectionExporter.prototype.generateHyperlinkRelationsCore = function (relationTable, relationType) {
        var _this = this;
        string_1.StringMapUtils.forEach(relationTable, function (path, relationId) {
            return _this.addRel(relationId, relationType, path, !string_2.StringUtils.startsAt(path, '#'));
        });
    };
    return RelationCollectionExporter;
}(base_1.RelationsBaseExporter));
exports.RelationCollectionExporter = RelationCollectionExporter;
