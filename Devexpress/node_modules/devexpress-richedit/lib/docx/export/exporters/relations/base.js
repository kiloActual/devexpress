"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var string_1 = require("@devexpress/utils/lib/utils/string");
var base_1 = require("../base");
var RelationsBaseExporter = (function (_super) {
    tslib_1.__extends(RelationsBaseExporter, _super);
    function RelationsBaseExporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.numRels = 0;
        return _this;
    }
    Object.defineProperty(RelationsBaseExporter.prototype, "rootNSPrefix", {
        get: function () { return ''; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelationsBaseExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.rels.packageRelsNamespace; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelationsBaseExporter.prototype, "rootElement", {
        get: function () { return 'Relationships'; },
        enumerable: true,
        configurable: true
    });
    RelationsBaseExporter.prototype.addRel = function (id, type, target, external) {
        if (external === void 0) { external = false; }
        this.writer.elementStart('Relationship');
        this.writer.attr('Id', id);
        this.writer.attr('Type', type);
        this.writer.attr('Target', string_1.StringUtils.isNullOrEmpty(target) ? target : this.urlEncodeAsciiSpecialSymbols(target));
        if (external)
            this.writer.attr('TargetMode', 'External');
        this.writer.endElement();
        this.numRels++;
    };
    RelationsBaseExporter.prototype.urlEncodeAsciiSpecialSymbols = function (url) {
        if (url) {
            if (url.indexOf(' ') >= 0)
                url = url.replace(' ', '%20');
            if (url.indexOf('\'') >= 0)
                url = url.replace("\'", '%27');
        }
        return url;
    };
    return RelationsBaseExporter;
}(base_1.ExporterBaseWithRootElement));
exports.RelationsBaseExporter = RelationsBaseExporter;
