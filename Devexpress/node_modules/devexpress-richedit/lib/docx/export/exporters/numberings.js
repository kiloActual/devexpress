"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_1 = require("../../../core/model/numbering-lists/list-level");
var list_level_properties_1 = require("../../../core/model/numbering-lists/list-level-properties");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var translation_tables_1 = require("../../translation-table/translation-tables");
var word_processing_mlvalue_1 = require("../../translation-table/word-processing-mlvalue");
var constants_1 = require("../../utils/constants");
var writer_helper_1 = require("../utils/writer-helper");
var base_1 = require("./base");
var NumberingsExporter = (function (_super) {
    tslib_1.__extends(NumberingsExporter, _super);
    function NumberingsExporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NumberingsExporter.prototype, "filePath", {
        get: function () { return 'word/numbering.xml'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberingsExporter.prototype, "rootElement", {
        get: function () { return new word_processing_mlvalue_1.WordProcessingMLValue('numbering', 'lists').openXmlValue; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberingsExporter.prototype, "rootNSPrefix", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].prefix; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NumberingsExporter.prototype, "rootNSValue", {
        get: function () { return this.data.constants.namespaces[constants_1.DocxNsType.WordProcessing].namespace; },
        enumerable: true,
        configurable: true
    });
    NumberingsExporter.shouldExportNumbering = function (model) {
        return !!model.numberingLists.length;
    };
    NumberingsExporter.prototype.export = function () {
        if (NumberingsExporter.shouldExportNumbering(this.data.model))
            _super.prototype.export.call(this);
    };
    NumberingsExporter.prototype.fillWriter = function () {
        var _this = this;
        list_1.ListUtils.forEach(this.data.model.abstractNumberingLists, function (list, id) {
            _this.writer.writeWpStartElement('abstractNum');
            _this.writer.writeWpIntAttr('abstractNumId', id);
            _this.writer.writeWpStringValue('nsid', string_1.StringUtils.padLeft(writer_helper_1.WriterHelper.convertToHexString(list.getId()), 8, '0'));
            _this.writer.writeWpStringValue('multiLevelType', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.numberingListTypeTable, list.getListType(), numbering_list_1.NumberingType.Bullet));
            var shouldExportLevels = true;
            if (shouldExportLevels)
                _this.exportLevels(list.levels);
            _this.writer.endElement();
        });
        list_1.ListUtils.forEach(this.data.model.numberingLists, function (list, id) {
            _this.writer.writeWpStartElement('num');
            _this.writer.writeWpIntAttr('numId', id + 1);
            _this.writer.writeWpIntValue('abstractNumId', list.abstractNumberingListIndex);
            _this.exportOverrideLevels(list.levels);
            _this.writer.endElement();
        });
    };
    NumberingsExporter.prototype.exportOverrideLevels = function (levels) {
        var _this = this;
        list_1.ListUtils.forEach(levels, function (level, ind) {
            if (level.overrideStart || level instanceof list_level_1.OverrideListLevel)
                _this.exportLevelOverride(level, ind);
        });
    };
    NumberingsExporter.prototype.exportLevelOverride = function (level, levelIndex) {
        this.writer.writeWpStartElement('lvlOverride');
        this.writer.writeWpIntAttr('ilvl', levelIndex);
        if (level.overrideStart)
            this.exportStartOverride(level.getNewStart());
        if (level instanceof list_level_1.OverrideListLevel)
            this.exportLevel(level, levelIndex);
        this.writer.endElement();
    };
    NumberingsExporter.prototype.exportStartOverride = function (newStart) {
        this.writer.writeWpIntValue('startOverride', newStart);
    };
    NumberingsExporter.prototype.exportLevel = function (level, levelIndex) {
        this.writer.writeWpStartElement('lvl');
        this.writer.writeWpIntAttr('ilvl', levelIndex);
        if (level.getListLevelProperties().templateCode)
            this.writer.writeWpStringAttr('tplc', string_1.StringUtils.padLeft(level.getListLevelProperties().templateCode.toString(16), 8, '0'));
        this.exportLevelProperties(level, levelIndex);
        this.exportLevelParagraphProperties(level.getParagraphProperties(), null);
        this.exportLevelCharacterProperties(level.getCharacterProperties());
        this.writer.endElement();
    };
    NumberingsExporter.prototype.exportLevels = function (levels) {
        var _this = this;
        list_1.ListUtils.forEach(levels, function (level, ind) {
            _this.exportLevel(level, ind);
        });
    };
    NumberingsExporter.prototype.exportLevelProperties = function (level, levelIndex) {
        var properties = level.getListLevelProperties();
        this.writer.writeWpIntValue('start', properties.start);
        this.exportNumberFormatValue(properties);
        if (properties.suppressRestart)
            this.writer.writeWpIntValue('lvlRestart', 0);
        else if (properties.relativeRestartLevel != 0)
            this.writer.writeWpIntValue('lvlRestart', levelIndex - properties.relativeRestartLevel);
        var abstractLevel = level instanceof list_level_1.ListLevel ? level : null;
        if (abstractLevel != null)
            this.exportAbstractLevelProperties(abstractLevel);
        if (properties.convertPreviousLevelNumberingToDecimal)
            this.writer.writeWpBoolValue('isLgl', properties.convertPreviousLevelNumberingToDecimal);
        this.writer.writeWpStringValue('suff', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.listNumberSeparatorTable, properties.separator.charCodeAt(0), '\0'.charCodeAt(0)));
        this.writer.writeWpStringValue('lvlText', this.convertFormatString(properties.displayFormatString));
        if (properties.legacy) {
            this.writer.writeWpStartElement('legacy');
            this.writer.writeWpIntAttr('legacy', 1);
            this.writer.writeWpIntAttr('legacyIndent', properties.legacyIndent);
            this.writer.writeWpIntAttr('legacySpace', properties.legacySpace);
            this.writer.endElement();
        }
        this.writer.writeWpStringValue('lvlJc', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.listNumberAlignmentTable, properties.alignment, list_level_properties_1.ListNumberAlignment.Left));
    };
    NumberingsExporter.prototype.exportLevelParagraphProperties = function (properties, _tabs) {
        this.writer.writeWpStartElement('pPr');
        this.data.parPropsExporter.exportParagraphPropertiesCore(properties, numbering_list_1.NumberingList.NumberingListNotSettedIndex, -1, null, false);
        this.writer.endElement();
    };
    NumberingsExporter.prototype.exportLevelCharacterProperties = function (properties) {
        this.writer.writeWpStartElement('rPr');
        this.data.charPropsExporter.exportRunPropertiesCore(properties);
        this.writer.endElement();
    };
    NumberingsExporter.prototype.convertFormatString = function (value) {
        try {
            return this.data.model.simpleFormattersManager.formatString(value, '%1', '%2', '%3', '%4', '%5', '%6', '%7', '%8', '%9');
        }
        catch (_a) {
            return '';
        }
    };
    NumberingsExporter.prototype.exportNumberFormatValue = function (properties) {
        this.writer.writeWpStringValue('numFmt', writer_helper_1.WriterHelper.getValueFromTables(translation_tables_1.TranslationTables.pageNumberingFormatTable, properties.format, list_level_properties_1.NumberingFormat.Decimal));
    };
    NumberingsExporter.prototype.exportAbstractLevelProperties = function (_level) {
    };
    return NumberingsExporter;
}(base_1.ExporterBaseWithRootElement));
exports.NumberingsExporter = NumberingsExporter;
