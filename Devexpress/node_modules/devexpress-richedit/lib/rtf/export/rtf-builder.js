"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../base-utils/map-creator");
var log_1 = require("../../core/rich-utils/debug/logger/base-logger/log");
var chunked_text_1 = require("@devexpress/utils/lib/class/chunked-text");
var errors_1 = require("@devexpress/utils/lib/errors");
var color_1 = require("@devexpress/utils/lib/utils/color");
var common_1 = require("@devexpress/utils/lib/utils/common");
var rtf_export_sr_1 = require("../translation-table/rtf-export-sr");
var hexadecimal_converter_1 = require("../../base-utils/hexadecimal-converter");
var characters_1 = require("./characters");
var RtfBuilder = (function () {
    function RtfBuilder() {
        this.rowLengthBound = 200;
        this.init();
    }
    RtfBuilder.prototype.clear = function () {
        this.init();
    };
    RtfBuilder.prototype.init = function () {
        this.rtfContent = new chunked_text_1.ChunkedText("");
        this.unicodeTextBuilder = new chunked_text_1.ChunkedText("");
        this.isPreviousWriteCommand = false;
        this.rowLength = 0;
        this.hexMode = false;
    };
    RtfBuilder.prototype.writeCommandCore = function (command, writeParam) {
        this.rtfContent.addText(command);
        writeParam();
        this.isPreviousWriteCommand = true;
        this.increaseRowLength(command.length);
    };
    RtfBuilder.prototype.writeCommand = function (command, param) {
        var _this = this;
        this.writeCommandCore(command, function () {
            if (param != undefined)
                if (typeof param === "boolean")
                    _this.rtfContent.addText(common_1.boolToString(param));
                else
                    _this.rtfContent.addText(param.toString());
        });
    };
    RtfBuilder.prototype.writeIntegerCommand = function (command, param) {
        var _this = this;
        var intValue = Math.floor(param);
        if (log_1.Log.isDebug && intValue !== param)
            throw new Error(errors_1.Errors.InternalException);
        this.writeCommandCore(command, function () { return _this.rtfContent.addText(intValue.toString()); });
    };
    RtfBuilder.prototype.createKeyword = function (propertyName) {
        return "\\" + propertyName;
    };
    RtfBuilder.prototype.createOptionalKeyword = function (propertyName) {
        return "\\*" + propertyName;
    };
    RtfBuilder.prototype.writeAnsiText = function (text) {
        var count = text.length;
        if (this.isPreviousWriteCommand)
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var str = this.correctAnsiString(ch);
            this.rtfContent.addText(str);
        }
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(text.length);
    };
    RtfBuilder.prototype.writeText = function (text, specialMarks) {
        if (specialMarks === void 0) { specialMarks = RtfBuilder.specialMarks; }
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var specialMark = specialMarks[ch];
            if (specialMark)
                this.writeTextDirect(specialMark);
            else
                this.writeChar(ch);
        }
    };
    RtfBuilder.prototype.writeTextDirect = function (text, makeStringUnicodeCompatible) {
        if (makeStringUnicodeCompatible === void 0) { makeStringUnicodeCompatible = false; }
        if (this.isPreviousWriteCommand)
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        if (makeStringUnicodeCompatible)
            this.rtfContent.addText(this.getUnicodeCompatibleStringDirect(text));
        else
            this.rtfContent.addText(text);
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(text.length);
    };
    RtfBuilder.prototype.writeTextDirectUnsafe = function (text) {
        if (this.isPreviousWriteCommand)
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        var textLength = text.textLength;
        this.rtfContent.addText(text.getText());
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(textLength);
    };
    RtfBuilder.prototype.writeChar = function (ch) {
        if (this.isPreviousWriteCommand)
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        var str = this.getUnicodeCompatibleString(ch);
        this.rtfContent.addText(str);
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(str.length);
    };
    RtfBuilder.prototype.openGroup = function () {
        this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.OpenGroup);
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(rtf_export_sr_1.RtfExportSR.OpenGroup.length);
    };
    RtfBuilder.prototype.closeGroup = function () {
        this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.CloseGroup);
        this.isPreviousWriteCommand = false;
        this.increaseRowLength(rtf_export_sr_1.RtfExportSR.CloseGroup.length);
    };
    RtfBuilder.isSpecialSymbol = function (ch) {
        return ch == '{' || ch == '}' || ch == '\\';
    };
    RtfBuilder.prototype.textHasNonASCIISymbol = function (text) {
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var code = text.charCodeAt(i);
            if (!this.isASCII(code))
                return true;
        }
        return false;
    };
    RtfBuilder.prototype.isASCII = function (code) {
        return code >= 0 && code <= 127;
    };
    RtfBuilder.prototype.isANSI = function (code) {
        return code >= 0 && code <= 255;
    };
    RtfBuilder.prototype.correctAnsiString = function (ch) {
        this.unicodeTextBuilder = new chunked_text_1.ChunkedText("");
        var code = this.getCode(ch);
        if (this.isANSI(code)) {
            if (RtfBuilder.isSpecialSymbol(ch))
                this.unicodeTextBuilder.addText("\\");
            this.unicodeTextBuilder.addText(ch);
        }
        else
            this.unicodeTextBuilder.addText('?');
        return this.unicodeTextBuilder.getText();
    };
    RtfBuilder.prototype.getUnicodeCompatibleString = function (ch) {
        this.unicodeTextBuilder = new chunked_text_1.ChunkedText("");
        var code = this.getCode(ch);
        if (this.isASCII(code)) {
            if (RtfBuilder.isSpecialSymbol(ch))
                this.unicodeTextBuilder.addText("\\");
            this.unicodeTextBuilder.addText(ch);
        }
        else
            this.appendUnicodeCompatibleCharCore(code, ch);
        return this.unicodeTextBuilder.getText();
    };
    RtfBuilder.prototype.getUnicodeCompatibleStringDirect = function (text) {
        this.unicodeTextBuilder = new chunked_text_1.ChunkedText("");
        var length = text.length;
        for (var i = 0; i < length; i++) {
            var ch = text[i];
            var code = this.getCode(ch);
            if (this.isASCII(code))
                this.unicodeTextBuilder.addText(ch);
            else
                this.appendUnicodeCompatibleCharCore(code, ch);
        }
        return this.unicodeTextBuilder.getText();
    };
    RtfBuilder.prototype.appendUnicodeCompatibleCharCore = function (code, ch) {
        var bytes = toUTF8Array(ch);
        this.unicodeTextBuilder.addText("\\u" + code + "\\'" + RtfBuilder.byteToHexString[bytes[0]]);
    };
    RtfBuilder.prototype.writePictureBytes = function (binString) {
        this.hexMode = true;
        this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        this.rtfContent.addText(binString);
        this.hexMode = false;
    };
    RtfBuilder.prototype.writeByteArrayAsHex = function (bytes, offset, length) {
        if (offset === void 0) { offset = 0; }
        if (length === void 0) { length = bytes.length; }
        if (this.isPreviousWriteCommand)
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.Space);
        this.hexMode = true;
        var count = offset + length;
        for (var i = offset; i < count; i++) {
            this.rtfContent.addText(hexadecimal_converter_1.byteToHex(bytes[i]));
        }
        this.isPreviousWriteCommand = true;
        this.hexMode = false;
    };
    RtfBuilder.prototype.writeShapeColorProperty = function (propertyName, propertyValue) {
        this.writeShapeProperty(propertyName, this.getIntColorValue(propertyValue).toString());
    };
    RtfBuilder.prototype.getIntColorValue = function (color) {
        return color_1.ColorUtils.getRed(color) | (color_1.ColorUtils.getGreen(color) << 8) | (color_1.ColorUtils.getBlue(color) << 16);
    };
    RtfBuilder.prototype.writeShapeProperty = function (propertyName, propertyValue) {
        this.openGroup();
        this.writeCommand(rtf_export_sr_1.RtfExportSR.ShapeProperty);
        this.writeShapePropertyName(propertyName);
        this.writeShapePropertyValue(propertyValue);
        this.closeGroup();
    };
    RtfBuilder.prototype.writePCDATAShapeProperty = function (propertyName, propertyValue) {
        var _this = this;
        this.writeShapeProperty(propertyName, function () { return _this.writePCData(propertyValue); });
    };
    RtfBuilder.prototype.writePCData = function (text) {
        this.writeText(text, RtfBuilder.specialPCDataMarks);
    };
    RtfBuilder.prototype.writeShapePropertyName = function (propertyName) {
        this.openGroup();
        this.writeCommand(rtf_export_sr_1.RtfExportSR.ShapePropertyName);
        this.writeTextDirect(propertyName);
        this.closeGroup();
    };
    RtfBuilder.prototype.writeShapePropertyValue = function (propertyValue) {
        this.openGroup();
        this.writeCommand(rtf_export_sr_1.RtfExportSR.ShapePropertyValue);
        if (typeof propertyValue == "string")
            this.writeTextDirect(propertyValue, true);
        else
            propertyValue();
        this.closeGroup();
    };
    RtfBuilder.prototype.writeShapePropertyWithOptionalGroup = function (propertyName, propertyValue, optionalPropertyName, optionalPropertyValue) {
        this.openGroup();
        this.writeCommand(rtf_export_sr_1.RtfExportSR.ShapeProperty);
        this.writeShapePropertyName(propertyName);
        this.writeShapePropertyValue(propertyValue);
        this.openGroup();
        this.writeCommand(this.createOptionalKeyword(optionalPropertyName) + " ");
        this.writeCommand(optionalPropertyValue);
        this.closeGroup();
        this.closeGroup();
    };
    RtfBuilder.prototype.writeShapeIntegerProperty = function (propertyName, propertyValue) {
        this.writeShapeProperty(propertyName, Math.round(propertyValue).toString());
    };
    RtfBuilder.prototype.writeShapeBoolProperty = function (propertyName, propertyValue) {
        this.writeShapeProperty(propertyName, common_1.boolToString(propertyValue));
    };
    RtfBuilder.prototype.increaseRowLength = function (delta) {
        this.rowLength += delta;
        if (this.rowLength >= this.rowLengthBound && this.hexMode) {
            this.rtfContent.addText(rtf_export_sr_1.RtfExportSR.CLRF);
            this.isPreviousWriteCommand = false;
            this.rowLength = 0;
        }
    };
    RtfBuilder.prototype.getCode = function (ch) {
        var charCode = ch.charCodeAt(0);
        return charCode > 32767 ? charCode - 65536 : charCode;
    };
    RtfBuilder.specialMarks = CreateSpecialMarksTable();
    RtfBuilder.byteToHexString = CreateByteToHexString();
    RtfBuilder.specialPCDataMarks = CreateSpecialPCDataMarksTable(RtfBuilder.byteToHexString);
    return RtfBuilder;
}());
exports.RtfBuilder = RtfBuilder;
function CreateSpecialMarksTable() {
    var result = new map_creator_1.MapCreator()
        .add(characters_1.Characters.EmSpace, "\\u8195\\'3f")
        .add(characters_1.Characters.EnSpace, "\\u8194\\'3f")
        .add(characters_1.Characters.Hyphen, "")
        .add(characters_1.Characters.LineBreak, "\\line ")
        .add(characters_1.Characters.PageBreak, "\\page ")
        .add(characters_1.Characters.ColumnBreak, "\\column ")
        .add(characters_1.Characters.QmSpace, "\\u8197\\'3f")
        .add(characters_1.Characters.TabMark, "\\tab ")
        .get();
    return result;
}
exports.CreateSpecialMarksTable = CreateSpecialMarksTable;
function CreateSpecialPCDataMarksTable(byteToHexString) {
    var result = new map_creator_1.MapCreator().get();
    for (var i = 0; i < 31; i++) {
        AddHexToMarkTable(result, i.toString(), byteToHexString);
    }
    AddHexToMarkTable(result, '\\', byteToHexString);
    AddHexToMarkTable(result, '{', byteToHexString);
    AddHexToMarkTable(result, '}', byteToHexString);
    return result;
}
exports.CreateSpecialPCDataMarksTable = CreateSpecialPCDataMarksTable;
function AddHexToMarkTable(result, ch, byteToHexString) {
    result[ch] = "\'" + byteToHexString[ch];
}
exports.AddHexToMarkTable = AddHexToMarkTable;
function CreateByteToHexString() {
    var byteToHexString = [];
    for (var i = 0; i < 256; i++)
        byteToHexString[i] = i.toString(16);
    return byteToHexString;
}
exports.CreateByteToHexString = CreateByteToHexString;
function toUTF8Array(str) {
    var utf8 = [];
    for (var i = 0; i < str.length; i++) {
        var charcode = str.charCodeAt(i);
        if (charcode < 0x80)
            utf8.push(charcode);
        else if (charcode < 0x800) {
            utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
        else {
            i++;
            charcode = 0x10000 + (((charcode & 0x3ff) << 10)
                | (str.charCodeAt(i) & 0x3ff));
            utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
    }
    return utf8;
}
exports.toUTF8Array = toUTF8Array;
