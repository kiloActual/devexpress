"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../base-utils/map-creator");
var color_model_info_cache_1 = require("../../../core/model/caches/hashed-caches/color-model-info-cache");
var character_style_1 = require("../../../core/model/character/character-style");
var enums_1 = require("../../../core/model/character/enums");
var dx_color_1 = require("../../../core/model/color/dx-color");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var rtf_export_sr_1 = require("../../translation-table/rtf-export-sr");
var rtf_shading_info_export_helper_1 = require("../helpers/rtf-shading-info-export-helper");
var rtf_document_exporter_options_1 = require("../rtf-document-exporter-options");
var rtf_properties_exporter_1 = require("./rtf-properties-exporter");
var RtfCharacterPropertiesExporter = (function (_super) {
    tslib_1.__extends(RtfCharacterPropertiesExporter, _super);
    function RtfCharacterPropertiesExporter(documentModel, rtfExportHelper, rtfBuilder, options) {
        var _this = _super.call(this, documentModel, rtfExportHelper, rtfBuilder) || this;
        _this.emptyColorIndex = -1;
        _this.defaultRtfFontSize = 24;
        _this.options = options;
        return _this;
    }
    RtfCharacterPropertiesExporter.prototype.exportCharacterStyle = function (characterStyle, paragraphStyle) {
        if (this.shouldWriteRunCharacterStyle(characterStyle, paragraphStyle))
            this.writeCharacterStyle(characterStyle);
    };
    RtfCharacterPropertiesExporter.prototype.shouldWriteRunCharacterStyle = function (characterStyle, paragraphStyle) {
        if (characterStyle.styleName == character_style_1.CharacterStyle.defaultParagraphCharacterStyleName)
            return false;
        if (paragraphStyle.styleName == paragraph_style_1.ParagraphStyle.normalStyleName)
            return true;
        if (paragraphStyle.linkedStyle && paragraphStyle.linkedStyle == characterStyle)
            return false;
        else
            return true;
    };
    RtfCharacterPropertiesExporter.prototype.writeCharacterStyle = function (characterStyle) {
        var styleCollection = this.rtfExportHelper.characterStylesCollectionIndex;
        var styleName = characterStyle.styleName;
        if (string_1.StringMapUtils.containsBy(styleCollection, function (_val, key) { return key == styleName; }))
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.CharacterStyleIndex, styleCollection[styleName]);
    };
    RtfCharacterPropertiesExporter.prototype.exportCharacterProperties = function (characterProperties, checkDefaultColor, suppressExportFontSize, suppressExportFontName) {
        if (checkDefaultColor === void 0) { checkDefaultColor = false; }
        if (suppressExportFontSize === void 0) { suppressExportFontSize = false; }
        if (suppressExportFontName === void 0) { suppressExportFontName = false; }
        this.exportCharacterPropertiesCore(characterProperties, suppressExportFontSize, suppressExportFontName);
        var info = characterProperties;
        this.writeForegroundColor(info.textColor, checkDefaultColor);
        if (this.options.compatibility.backColorExportMode == rtf_document_exporter_options_1.RtfRunBackColorExportMode.Default) {
            if (!color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(info.highlightColor))
                this.writeHighlightColor(info.highlightColor);
            this.writeRunShading(info.shadingInfo);
        }
        else {
            var colorIndex = this.calculateColorIndex(info);
            if (colorIndex != this.emptyColorIndex)
                this.writeBackgroundColor(colorIndex, this.options.compatibility.backColorExportMode);
        }
        if (!color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(info.underlineColor))
            this.writeUnderlineColor(info.underlineColor);
    };
    RtfCharacterPropertiesExporter.prototype.exportCharacterPropertiesCore = function (characterProperties, suppressExportFontSize, suppressExportFontName) {
        if (characterProperties.noProof)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NoProof);
        if (characterProperties.allCaps)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.AllCapitals);
        if (characterProperties.hidden)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.HiddenText);
        if (characterProperties.fontBold)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.FontBold);
        if (characterProperties.fontItalic)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.FontItalic);
        if (characterProperties.fontStrikeoutType != enums_1.StrikeoutType.None)
            this.rtfBuilder.writeCommand(characterProperties.fontStrikeoutType == enums_1.StrikeoutType.Single ? rtf_export_sr_1.RtfExportSR.FontStrikeout : rtf_export_sr_1.RtfExportSR.FontDoubleStrikeout);
        if (characterProperties.script != enums_1.CharacterFormattingScript.Normal)
            this.rtfBuilder.writeCommand(characterProperties.script == enums_1.CharacterFormattingScript.Subscript ? rtf_export_sr_1.RtfExportSR.RunSubScript : rtf_export_sr_1.RtfExportSR.RunSuperScript);
        if (characterProperties.underlineWordsOnly && characterProperties.fontUnderlineType == enums_1.UnderlineType.Single) {
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.FontUnderlineWordsOnly);
        }
        else {
            if (characterProperties.fontUnderlineType != enums_1.UnderlineType.None)
                this.writeFontUnderline(characterProperties.fontUnderlineType);
        }
        if (!suppressExportFontName && characterProperties.fontInfo) {
            var fontNameIndex = this.writeFontName(characterProperties.fontInfo.name);
            if (fontNameIndex >= 0)
                this.registerFontCharset(characterProperties, fontNameIndex);
        }
        if (!suppressExportFontSize && characterProperties.fontSize)
            this.writeFontSize(characterProperties.fontSize * 2);
    };
    RtfCharacterPropertiesExporter.prototype.exportParagraphCharacterProperties = function (characterProperties) {
        this.exportCharacterPropertiesCore(characterProperties, false, false);
        this.writeForegroundColor(characterProperties.textColor);
    };
    RtfCharacterPropertiesExporter.prototype.registerFontCharset = function (_characterProperties, _fontNameIndex) {
    };
    RtfCharacterPropertiesExporter.prototype.writeFontUnderline = function (underlineType) {
        if (underlineType == enums_1.UnderlineType.None)
            return;
        var keyword = RtfCharacterPropertiesExporter.defaultUnderlineTypes[underlineType];
        if (!keyword || keyword == null || keyword.length == 0)
            keyword = RtfCharacterPropertiesExporter.defaultUnderlineTypes[enums_1.UnderlineType.Single];
        this.rtfBuilder.writeCommand(keyword);
    };
    RtfCharacterPropertiesExporter.prototype.writeFontName = function (fontName) {
        var fontNameIndex = this.rtfExportHelper.getFontNameIndex(fontName);
        if (fontNameIndex == this.rtfExportHelper.defaultFontIndex)
            return -1;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.FontNumber, fontNameIndex);
        return fontNameIndex;
    };
    RtfCharacterPropertiesExporter.prototype.writeFontSize = function (rtfFontSize) {
        if (rtfFontSize == this.defaultRtfFontSize)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.FontSize, rtfFontSize);
    };
    RtfCharacterPropertiesExporter.prototype.calculateColorIndex = function (info) {
        if (!color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(info.highlightColor))
            return this.rtfExportHelper.getColorIndex(info.highlightColor);
        var backColor = info.shadingInfo.backColor;
        if (!color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(backColor)) {
            var color = info.shadingInfo.backColor.toRgb(this.documentModel.colorProvider);
            if (!dx_color_1.DXColor.isTransparentOrEmpty(color))
                return this.rtfExportHelper.getColorIndex(backColor);
        }
        return this.emptyColorIndex;
    };
    RtfCharacterPropertiesExporter.prototype.writeBackgroundColor = function (colorIndex, mode) {
        if (mode == rtf_document_exporter_options_1.RtfRunBackColorExportMode.Chcbpat)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunBackgroundColor, colorIndex);
        else if (mode == rtf_document_exporter_options_1.RtfRunBackColorExportMode.Highlight)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunHighlightColor, colorIndex);
        else {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunHighlightColor, colorIndex);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunBackgroundColor, colorIndex);
        }
    };
    RtfCharacterPropertiesExporter.prototype.writeRunShading = function (shadingInfo) {
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingPattern(this.rtfBuilder, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.RunShadingPattern);
        var shadingPatternKeyword = rtf_export_sr_1.RtfExportSR.RunShadingPatternTable[shadingInfo.shadingPattern];
        if (shadingPatternKeyword)
            this.rtfBuilder.writeCommand(shadingPatternKeyword);
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingForeColorIndex(this.rtfBuilder, this.rtfExportHelper, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.RunFillColor);
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingBackColorIndex(this.rtfBuilder, this.rtfExportHelper, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.RunBackgroundColor);
    };
    RtfCharacterPropertiesExporter.prototype.writeForegroundColor = function (foreColor, checkDefaultColor) {
        if (checkDefaultColor === void 0) { checkDefaultColor = false; }
        var colorIndex = this.rtfExportHelper.getColorIndex(foreColor);
        if (!checkDefaultColor || !color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(foreColor))
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunForegroundColor, colorIndex);
    };
    RtfCharacterPropertiesExporter.prototype.writeHighlightColor = function (highlightColor) {
        var colorIndex = this.rtfExportHelper.getColorIndex(highlightColor);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunHighlightColor, colorIndex);
    };
    RtfCharacterPropertiesExporter.prototype.writeUnderlineColor = function (underlineColor) {
        var colorIndex = this.rtfExportHelper.getColorIndex(underlineColor);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RunUnderlineColor, colorIndex);
    };
    RtfCharacterPropertiesExporter.defaultUnderlineTypes = createUnderlineTypesTable();
    return RtfCharacterPropertiesExporter;
}(rtf_properties_exporter_1.RtfPropertiesExporter));
exports.RtfCharacterPropertiesExporter = RtfCharacterPropertiesExporter;
function createUnderlineTypesTable() {
    return new map_creator_1.MapCreator()
        .add(enums_1.UnderlineType.None, "")
        .add(enums_1.UnderlineType.Single, rtf_export_sr_1.RtfExportSR.FontUnderline)
        .add(enums_1.UnderlineType.Dotted, rtf_export_sr_1.RtfExportSR.FontUnderlineDotted)
        .add(enums_1.UnderlineType.Dashed, rtf_export_sr_1.RtfExportSR.FontUnderlineDashed)
        .add(enums_1.UnderlineType.DashDotted, rtf_export_sr_1.RtfExportSR.FontUnderlineDashDotted)
        .add(enums_1.UnderlineType.DashDotDotted, rtf_export_sr_1.RtfExportSR.FontUnderlineDashDotDotted)
        .add(enums_1.UnderlineType.Double, rtf_export_sr_1.RtfExportSR.FontUnderlineDouble)
        .add(enums_1.UnderlineType.HeavyWave, rtf_export_sr_1.RtfExportSR.FontUnderlineHeavyWave)
        .add(enums_1.UnderlineType.LongDashed, rtf_export_sr_1.RtfExportSR.FontUnderlineLongDashed)
        .add(enums_1.UnderlineType.ThickSingle, rtf_export_sr_1.RtfExportSR.FontUnderlineThickSingle)
        .add(enums_1.UnderlineType.ThickDotted, rtf_export_sr_1.RtfExportSR.FontUnderlineThickDotted)
        .add(enums_1.UnderlineType.ThickDashed, rtf_export_sr_1.RtfExportSR.FontUnderlineThickDashed)
        .add(enums_1.UnderlineType.ThickDashDotted, rtf_export_sr_1.RtfExportSR.FontUnderlineThickDashDotted)
        .add(enums_1.UnderlineType.ThickDashDotDotted, rtf_export_sr_1.RtfExportSR.FontUnderlineThickDashDotDotted)
        .add(enums_1.UnderlineType.ThickLongDashed, rtf_export_sr_1.RtfExportSR.FontUnderlineThickLongDashed)
        .add(enums_1.UnderlineType.DoubleWave, rtf_export_sr_1.RtfExportSR.FontUnderlineDoubleWave)
        .add(enums_1.UnderlineType.Wave, rtf_export_sr_1.RtfExportSR.FontUnderlineWave)
        .get();
}
