"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var numbering_list_index_constants_1 = require("../../../core/formats/utils/numbering-list-index-constants");
var enums_1 = require("../../../core/model/borders/enums");
var character_properties_merger_1 = require("../../../core/model/properties-merger/character-properties-merger");
var paragraph_properties_merger_1 = require("../../../core/model/properties-merger/paragraph-properties-merger");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var rtf_export_sr_1 = require("../../translation-table/rtf-export-sr");
var rtf_table_cell_properties_merger_1 = require("../../utils/mergers/rtf-table-cell-properties-merger");
var rtf_table_properties_merger_1 = require("../../utils/mergers/rtf-table-properties-merger");
var rtf_table_row_properties_merger_1 = require("../../utils/mergers/rtf-table-row-properties-merger");
var rtf_character_properties_exporter_1 = require("./rtf-character-properties-exporter");
var rtf_content_exporter_1 = require("./rtf-content-exporter");
var rtf_paragraph_properties_exporter_1 = require("./rtf-paragraph-properties-exporter");
var rtf_table_cell_properties_exporter_1 = require("./table/rtf-table-cell-properties-exporter");
var rtf_table_properties_exporter_1 = require("./table/rtf-table-properties-exporter");
var rtf_table_row_properties_exporter_1 = require("./table/rtf-table-row-properties-exporter");
var RtfStyleExporter = (function () {
    function RtfStyleExporter(documentModel, rtfBuilder, rtfExportHelper, options) {
        this.documentModel = documentModel;
        this.rtfExportHelper = rtfExportHelper;
        this.rtfBuilder = rtfBuilder;
        this.characterPropertiesExporter = new rtf_character_properties_exporter_1.RtfCharacterPropertiesExporter(documentModel, rtfExportHelper, rtfBuilder, options);
        this.paragraphPropertiesExporter = new rtf_paragraph_properties_exporter_1.RtfParagraphPropertiesExporter(documentModel, rtfExportHelper, rtfBuilder);
    }
    RtfStyleExporter.prototype.exportStyleSheet = function (paragraphStyles, characterStyles, tableStyles) {
        if (paragraphStyles.length > 0)
            this.exportParagraphStyles(paragraphStyles);
        if (characterStyles.length > 0)
            this.exportCharacterStyles(characterStyles);
        if (tableStyles.length > 0)
            this.exportTableStyles(tableStyles);
    };
    RtfStyleExporter.prototype.exportParagraphStyles = function (paragraphStyles) {
        this.rtfBuilder.clear();
        var styles = paragraphStyles.concat();
        styles.sort(function (x, y) {
            if (x.parent && x.parent.equalsByName(y))
                return 1;
            if (y.parent && y.parent.equalsByName(x))
                return -1;
            return 0;
        });
        var stylesToWrite = [];
        var indexCollectionHandler = new map_creator_1.MapCreator(this.rtfExportHelper.paragraphStylesCollectionIndex);
        var count = styles.length;
        var _loop_1 = function (i) {
            var style = styles[i];
            if (!style.deleted && !string_1.StringMapUtils.containsBy(this_1.rtfExportHelper.paragraphStylesCollectionIndex, function (_val, key) { return key == style.styleName; })) {
                stylesToWrite.push(style);
                var styleIndex = this_1.getNextFreeStyleIndex();
                indexCollectionHandler.add(style.styleName, styleIndex);
            }
        };
        var this_1 = this;
        for (var i = 0; i < count; i++) {
            _loop_1(i);
        }
        count = stylesToWrite.length;
        for (var i = 0; i < count; i++)
            this.exportParagraphStyle(stylesToWrite[i], i);
        this.rtfExportHelper.stylesCollection.push(this.rtfBuilder.rtfContent.getText());
    };
    RtfStyleExporter.prototype.exportParagraphStyle = function (style, i) {
        var styleIndex = this.obtainParagraphStyleIndex(style);
        if (styleIndex < 0)
            return;
        this.rtfBuilder.openGroup();
        if (i > 0) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParagraphStyle, styleIndex);
            var parentStyleIndex = this.obtainParagraphStyleIndex(style.parent);
            if (parentStyleIndex >= 0)
                this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParentStyle, parentStyleIndex);
        }
        if (style.linkedStyle != null) {
            var linkedStyleIndex = this.obtainCharacterStyleIndex(style.linkedStyle);
            if (linkedStyleIndex >= 0)
                this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LinkedStyle, linkedStyleIndex);
        }
        if (style.nextParagraphStyle != null) {
            var nextStyleIndex = this.obtainParagraphStyleIndex(style.nextParagraphStyle);
            if (nextStyleIndex >= 0)
                this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.NextStyle, nextStyleIndex);
        }
        if (style.primary)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.QuickFormatStyle);
        var pMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
        pMerger.mergeParagraphStyle(style);
        pMerger.mergeMaskedParagraphProperties(this.documentModel.defaultParagraphProperties);
        this.exportParagraphProperties(pMerger.getMergedProperties());
        this.paragraphPropertiesExporter.writeTabs(style.tabs);
        var cMerger = new character_properties_merger_1.CharacterPropertiesMerger();
        cMerger.mergeParagraphStyle(style);
        cMerger.mergeCharacterProperties(this.documentModel.defaultCharacterProperties);
        this.exportCharacterProperties(cMerger.getMergedProperties());
        if (style.getNumberingListIndex() >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListIndex, this.documentModel.numberingLists[style.getNumberingListIndex()].getId());
            var listLevelIndex = style.getListLevelIndex();
            if (listLevelIndex > 0) {
                this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LevelIndex, listLevelIndex);
            }
        }
        this.writeStyleName(style.styleName);
        this.rtfBuilder.closeGroup();
    };
    RtfStyleExporter.prototype.exportCharacterStyles = function (characterStyles) {
        this.rtfBuilder.clear();
        var count = characterStyles.length;
        for (var i = 0; i < count; i++)
            this.exportCharacterStyle(characterStyles[i]);
        this.rtfExportHelper.stylesCollection.push(this.rtfBuilder.rtfContent.getText());
    };
    RtfStyleExporter.prototype.exportCharacterStyle = function (style) {
        if (style.deleted)
            return;
        if (string_1.StringMapUtils.containsBy(this.rtfExportHelper.characterStylesCollectionIndex, function (_val, key) { return key == style.styleName; }))
            return;
        var styleIndex = this.getNextFreeStyleIndex();
        var indexCollectionHandler = new map_creator_1.MapCreator(this.rtfExportHelper.characterStylesCollectionIndex);
        indexCollectionHandler.add(style.styleName, styleIndex);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.CharacterStyle, styleIndex);
        var parentStyleIndex = this.obtainCharacterStyleIndex(style.parent);
        if (parentStyleIndex >= 0)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParentStyle, parentStyleIndex);
        if (style.linkedStyle) {
            var linkedStyleIndex = this.obtainParagraphStyleIndex(style.linkedStyle);
            if (linkedStyleIndex >= 0)
                this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LinkedStyle, linkedStyleIndex);
        }
        if (style.primary)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.QuickFormatStyle);
        var merger = new character_properties_merger_1.CharacterPropertiesMerger();
        merger.mergeCharacterStyle(style);
        merger.mergeCharacterProperties(this.documentModel.defaultCharacterProperties);
        this.exportCharacterProperties(merger.getMergedProperties());
        this.writeStyleName(style.styleName);
        this.rtfBuilder.closeGroup();
    };
    RtfStyleExporter.prototype.exportTableStyles = function (tableStyles) {
        this.rtfBuilder.clear();
        this.tablePropertiesExporter = new rtf_table_properties_exporter_1.RtfTablePropertiesExporter(this.documentModel, this.rtfExportHelper, this.rtfBuilder);
        this.tableRowPropertiesExporter = new rtf_table_row_properties_exporter_1.RtfTableRowPropertiesExporter(this.documentModel, this.rtfExportHelper, this.rtfBuilder);
        this.tableCellPropertiesExporter = new rtf_table_cell_properties_exporter_1.RtfTableStyleTableCellPropertiesExporter(this.documentModel, this.rtfExportHelper, this.rtfBuilder);
        var count = tableStyles.length;
        for (var i = 0; i < count; i++)
            this.exportTableStyle(tableStyles[i]);
        this.rtfExportHelper.stylesCollection.push(this.rtfBuilder.rtfContent.getText());
    };
    RtfStyleExporter.prototype.exportTableStyle = function (style) {
        var _this = this;
        if (style.deleted)
            return;
        if (string_1.StringMapUtils.containsBy(this.rtfExportHelper.tableStylesCollectionIndex, function (_val, key) { return key == style.styleName; }))
            return;
        var styleIndex = this.getNextFreeStyleIndex();
        var indexCollectionHandler = new map_creator_1.MapCreator(this.rtfExportHelper.tableStylesCollectionIndex);
        indexCollectionHandler.add(style.styleName, styleIndex);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableStyle, styleIndex);
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TableStyleResetTableProperties);
        var parentStyleIndex = this.obtainTableStyleIndex(style.parent);
        if (parentStyleIndex >= 0)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParentStyle, parentStyleIndex);
        if (style.primary)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.QuickFormatStyle);
        this.exportCharacterProperties(this.getTableConditionalStyleMergedCharacterProperties(style.baseConditionalStyle));
        this.exportParagraphProperties(this.getTableConditionalStyleMergedParagraphProperties(style.baseConditionalStyle));
        this.exportTableProperties(new rtf_table_properties_merger_1.RtfTablePropertiesMerger(this.documentModel).getStyleMergedProperties(style.baseConditionalStyle, style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable));
        this.exportTableRowProperties(new rtf_table_row_properties_merger_1.RtfTableRowPropertiesMerger(this.documentModel).getStyleMergedProperties(style.baseConditionalStyle, style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable));
        this.exportTableCellProperties(new rtf_table_cell_properties_merger_1.RtfTableCellPropertiesMerger(this.documentModel).getStyleMergedProperties(style.baseConditionalStyle, style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable));
        this.writeStyleName(style.styleName);
        this.rtfBuilder.closeGroup();
        if (!number_1.NumberMapUtils.isEmpty(style.conditionalStyles))
            number_1.NumberMapUtils.forEach(style.conditionalStyles, function (val, conditionalType) {
                _this.exportTableConditionalStyle(val, style, styleIndex, conditionalType);
            });
    };
    RtfStyleExporter.prototype.exportTableConditionalStyle = function (conditionalStyle, style, styleIndex, conditionalType) {
        if (conditionalStyle == null)
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableStyle, styleIndex);
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TableStyleResetTableProperties);
        this.exportCharacterProperties(this.getTableConditionalStyleMergedCharacterProperties(conditionalStyle));
        this.exportParagraphProperties(this.getTableConditionalStyleMergedParagraphProperties(conditionalStyle));
        this.exportTableRowProperties(new rtf_table_row_properties_merger_1.RtfTableRowPropertiesMerger(this.documentModel).getStyleMergedProperties(conditionalStyle, style, conditionalType));
        this.exportTableCellProperties(new rtf_table_cell_properties_merger_1.RtfTableCellPropertiesMerger(this.documentModel).getStyleMergedProperties(conditionalStyle, style, conditionalType));
        this.writeConditionalStyleType(conditionalType);
        this.writeStyleName(style.styleName);
        this.rtfBuilder.closeGroup();
    };
    RtfStyleExporter.prototype.writeConditionalStyleType = function (conditionType) {
        var keyword = rtf_content_exporter_1.RtfContentExporter.conditionalStylesTypes[conditionType];
        if (keyword)
            this.rtfBuilder.writeCommand(keyword);
    };
    RtfStyleExporter.prototype.getTableConditionalStyleMergedCharacterProperties = function (conditionalStyle) {
        var characterPropertiesMerger = new character_properties_merger_1.CharacterPropertiesMerger();
        characterPropertiesMerger.mergeCharacterProperties(conditionalStyle.maskedCharacterProperties);
        return characterPropertiesMerger.getMergedProperties();
    };
    RtfStyleExporter.prototype.getTableConditionalStyleMergedParagraphProperties = function (conditionalStyle) {
        var paragraphPropertiesMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
        paragraphPropertiesMerger.mergeMaskedParagraphProperties(conditionalStyle.maskedParagraphProperties);
        return paragraphPropertiesMerger.getMergedProperties();
    };
    RtfStyleExporter.prototype.exportCharacterProperties = function (characterProperties) {
        this.characterPropertiesExporter.exportCharacterProperties(characterProperties, true, false, false);
    };
    RtfStyleExporter.prototype.exportParagraphProperties = function (mergedParagraphProperties) {
        if (mergedParagraphProperties.topBorder.style != enums_1.BorderLineStyle.None)
            this.paragraphPropertiesExporter.writeParagraphBorder(mergedParagraphProperties.topBorder, rtf_export_sr_1.RtfExportSR.TopParagraphBorder);
        if (mergedParagraphProperties.leftBorder.style != enums_1.BorderLineStyle.None)
            this.paragraphPropertiesExporter.writeParagraphBorder(mergedParagraphProperties.leftBorder, rtf_export_sr_1.RtfExportSR.LeftParagraphBorder);
        if (mergedParagraphProperties.bottomBorder.style != enums_1.BorderLineStyle.None)
            this.paragraphPropertiesExporter.writeParagraphBorder(mergedParagraphProperties.bottomBorder, rtf_export_sr_1.RtfExportSR.BottomParagraphBorder);
        if (mergedParagraphProperties.rightBorder.style != enums_1.BorderLineStyle.None)
            this.paragraphPropertiesExporter.writeParagraphBorder(mergedParagraphProperties.rightBorder, rtf_export_sr_1.RtfExportSR.RightParagraphBorder);
        if (mergedParagraphProperties.betweenBorder.style != enums_1.BorderLineStyle.None)
            this.paragraphPropertiesExporter.writeParagraphBorder(mergedParagraphProperties.betweenBorder, rtf_export_sr_1.RtfExportSR.BetweenParagraphBorder);
        this.paragraphPropertiesExporter.writeParagraphAlignment(mergedParagraphProperties.alignment);
        this.paragraphPropertiesExporter.writeParagraphIndents(mergedParagraphProperties);
        this.paragraphPropertiesExporter.writeParagraphSuppressHyphenation(mergedParagraphProperties.suppressHyphenation);
        this.paragraphPropertiesExporter.writeParagraphSuppressLineNumbers(mergedParagraphProperties.suppressLineNumbers);
        this.paragraphPropertiesExporter.writeParagraphContextualSpacing(mergedParagraphProperties.contextualSpacing);
        this.paragraphPropertiesExporter.writeParagraphPageBreakBefore(mergedParagraphProperties.pageBreakBefore);
        this.paragraphPropertiesExporter.writeParagraphOutlineLevel(mergedParagraphProperties.outlineLevel);
        this.paragraphPropertiesExporter.writeParagraphShading(mergedParagraphProperties.shadingInfo);
        this.paragraphPropertiesExporter.writeParagraphLineSpacing(mergedParagraphProperties.lineSpacingType, mergedParagraphProperties.lineSpacing);
        this.paragraphPropertiesExporter.writeParagraphSpacingBefore(mergedParagraphProperties.spacingBefore);
        this.paragraphPropertiesExporter.writeParagraphSpacingAfter(mergedParagraphProperties.spacingAfter);
    };
    RtfStyleExporter.prototype.exportTableProperties = function (mergedTableProperties) {
        this.tablePropertiesExporter.writeBandSizes(mergedTableProperties);
        this.tablePropertiesExporter.writeTableBorders(mergedTableProperties.borders);
        this.tablePropertiesExporter.writeTableCellMargins(mergedTableProperties.cellMargins);
        this.tablePropertiesExporter.writeTableIndent(mergedTableProperties.indent);
    };
    RtfStyleExporter.prototype.exportTableRowProperties = function (mergedTableRowProperties) {
        this.tableRowPropertiesExporter.writeRowAlignment(mergedTableRowProperties.tableRowAlignment);
        this.tableRowPropertiesExporter.writeRowHeader(mergedTableRowProperties.header);
        this.tableRowPropertiesExporter.writeRowCantSplit(mergedTableRowProperties.cantSplit);
        this.tableRowPropertiesExporter.writeRowCellSpacing(mergedTableRowProperties.cellSpacing);
    };
    RtfStyleExporter.prototype.exportTableCellProperties = function (mergedTableCellProperties) {
        this.tableCellPropertiesExporter.writeCellVerticalAlignment(mergedTableCellProperties.verticalAlignment);
        this.tableCellPropertiesExporter.writeCellShading(mergedTableCellProperties.shadingInfo);
        this.tableCellPropertiesExporter.writeCellBasicBorders(mergedTableCellProperties.borders.topBorder, mergedTableCellProperties.borders.leftBorder, mergedTableCellProperties.borders.rightBorder, mergedTableCellProperties.borders.bottomBorder);
        this.tableCellPropertiesExporter.writeCellTextDirection(mergedTableCellProperties.textDirection);
        this.tableCellPropertiesExporter.writeCellFitText(mergedTableCellProperties.fitText);
        this.tableCellPropertiesExporter.writeCellNoWrap(mergedTableCellProperties.noWrap);
        this.tableCellPropertiesExporter.writeCellHideCellMark(mergedTableCellProperties.hideCellMark);
        this.tableCellPropertiesExporter.writeCellMargings(mergedTableCellProperties.cellMargins);
    };
    RtfStyleExporter.prototype.writeStyleName = function (name) {
        var count = name.length;
        for (var i = 0; i < count; i++) {
            this.rtfBuilder.writeChar(name[i]);
        }
        this.rtfBuilder.writeChar(';');
    };
    RtfStyleExporter.prototype.getNextFreeStyleIndex = function () {
        var result = 0;
        while (string_1.StringMapUtils.containsBy(this.rtfExportHelper.characterStylesCollectionIndex, function (val) { return val == result; })
            || string_1.StringMapUtils.containsBy(this.rtfExportHelper.paragraphStylesCollectionIndex, function (val) { return val == result; })
            || string_1.StringMapUtils.containsBy(this.rtfExportHelper.tableStylesCollectionIndex, function (val) { return val == result; }))
            result++;
        return result;
    };
    RtfStyleExporter.prototype.obtainParagraphStyleIndex = function (style) {
        return RtfStyleExporter.obtainStyleIndex(style, this.rtfExportHelper.paragraphStylesCollectionIndex);
    };
    RtfStyleExporter.prototype.obtainCharacterStyleIndex = function (style) {
        return RtfStyleExporter.obtainStyleIndex(style, this.rtfExportHelper.characterStylesCollectionIndex);
    };
    RtfStyleExporter.prototype.obtainTableStyleIndex = function (style) {
        return RtfStyleExporter.obtainStyleIndex(style, this.rtfExportHelper.tableStylesCollectionIndex);
    };
    RtfStyleExporter.obtainStyleIndex = function (style, collection) {
        if (!style)
            return -1;
        var result = collection[style.styleName];
        if (result !== undefined && result !== null)
            return result;
        else
            return -1;
    };
    return RtfStyleExporter;
}());
exports.RtfStyleExporter = RtfStyleExporter;
