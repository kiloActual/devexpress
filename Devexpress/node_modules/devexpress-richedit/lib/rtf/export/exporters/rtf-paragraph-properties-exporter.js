"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_index_constants_1 = require("../../../core/formats/utils/numbering-list-index-constants");
var layout_tab_space_box_1 = require("../../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var enums_1 = require("../../../core/model/borders/enums");
var numbering_list_1 = require("../../../core/model/numbering-lists/numbering-list");
var paragraph_1 = require("../../../core/model/paragraph/paragraph");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../../core/model/paragraph/paragraph-style");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var rtf_export_sr_1 = require("../../translation-table/rtf-export-sr");
var rtf_shading_info_export_helper_1 = require("../helpers/rtf-shading-info-export-helper");
var rtf_properties_exporter_1 = require("./rtf-properties-exporter");
var RtfParagraphPropertiesExporter = (function (_super) {
    tslib_1.__extends(RtfParagraphPropertiesExporter, _super);
    function RtfParagraphPropertiesExporter() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultParagraphFirstLineIndent = 0;
        _this.defaultParagraphLeftIndent = 0;
        _this.defaultParagraphRightIndent = 0;
        _this.defaultSuppressHyphenation = false;
        _this.defaultPageBreakBefore = false;
        _this.defaultBeforeAutoSpacing = false;
        _this.defaultAfterAutoSpacing = false;
        _this.defaultKeepWithNext = false;
        _this.defaultKeepLinesTogether = false;
        _this.defaultWidowOrphanControl = true;
        _this.doubleIntervalRtfLineSpacingValue = 480;
        _this.sesquialteralIntervalRtfLineSpacingValue = 360;
        _this.singleIntervalRtfLineSpacingValue = 240;
        _this.atLeastLineSpacingMultiple = 0;
        _this.exactlyLineSpacingMultiple = 0;
        _this.multipleLineSpacing = 1;
        _this.defaultParagraphSpacingBefore = 0;
        _this.defaultParagraphSpacingAfter = 0;
        return _this;
    }
    RtfParagraphPropertiesExporter.prototype.exportParagraphProperties = function (paragraph, tableNestingLevel) {
        if (paragraph.isInList())
            this.exportParagraphNumberingProperties(paragraph);
        if (paragraph.paragraphStyle && paragraph.paragraphStyle.styleName != paragraph_style_1.ParagraphStyle.normalStyleName)
            this.writeParagraphStyle(paragraph.paragraphStyle);
        var properties = paragraph.getParagraphMergedProperties();
        if (properties.topBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.topBorder, rtf_export_sr_1.RtfExportSR.TopParagraphBorder);
        if (properties.leftBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.leftBorder, rtf_export_sr_1.RtfExportSR.LeftParagraphBorder);
        if (properties.bottomBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.bottomBorder, rtf_export_sr_1.RtfExportSR.BottomParagraphBorder);
        if (properties.rightBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.rightBorder, rtf_export_sr_1.RtfExportSR.RightParagraphBorder);
        if (properties.betweenBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.betweenBorder, rtf_export_sr_1.RtfExportSR.BetweenParagraphBorder);
        this.writeParagraphAlignment(this.getActualAlignment(properties));
        this.writeParagraphTableProperties(paragraph, tableNestingLevel);
        this.writeParagraphGroupPropertiesId(paragraph);
        this.writeParagraphIndents(paragraph.getParagraphMergedProperties());
        this.writeParagraphSuppressHyphenation(properties.suppressHyphenation);
        this.writeParagraphSuppressLineNumbers(properties.suppressLineNumbers);
        this.writeParagraphContextualSpacing(properties.contextualSpacing);
        this.writeParagraphPageBreakBefore(properties.pageBreakBefore);
        this.writeParagraphBeforeAutoSpacing(properties.beforeAutoSpacing);
        this.writeParagraphAfterAutoSpacing(properties.afterAutoSpacing);
        this.writeParagraphKeepWithNext(properties.keepWithNext);
        this.writeParagraphKeepLinesTogether(properties.keepLinesTogether);
        this.writeParagraphWidowOrphanControl(properties.widowOrphanControl);
        this.writeParagraphOutlineLevel(properties.outlineLevel);
        this.writeParagraphShading(properties.shadingInfo);
        this.writeParagraphLineSpacing(properties.lineSpacingType, properties.lineSpacing);
        this.writeParagraphSpacingBefore(properties.spacingBefore);
        this.writeParagraphSpacingAfter(properties.spacingAfter);
        this.writeTabs(paragraph.tabs);
    };
    RtfParagraphPropertiesExporter.prototype.exportParagraphPropertiesCore = function (properties, checkDefaultAlignment) {
        if (checkDefaultAlignment === void 0) { checkDefaultAlignment = false; }
        if (properties.topBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.topBorder, rtf_export_sr_1.RtfExportSR.TopParagraphBorder);
        if (properties.leftBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.leftBorder, rtf_export_sr_1.RtfExportSR.LeftParagraphBorder);
        if (properties.bottomBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.bottomBorder, rtf_export_sr_1.RtfExportSR.BottomParagraphBorder);
        if (properties.rightBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.rightBorder, rtf_export_sr_1.RtfExportSR.RightParagraphBorder);
        if (properties.betweenBorder.style != enums_1.BorderLineStyle.None)
            this.writeParagraphBorder(properties.betweenBorder, rtf_export_sr_1.RtfExportSR.BetweenParagraphBorder);
        if (!checkDefaultAlignment || !this.isDefaultAlignment(properties))
            this.writeParagraphAlignment(this.getActualAlignment(properties));
        this.writeParagraphIndents(properties);
        this.writeParagraphSuppressHyphenation(properties.suppressHyphenation);
        this.writeParagraphSuppressLineNumbers(properties.suppressLineNumbers);
        this.writeParagraphContextualSpacing(properties.contextualSpacing);
        this.writeParagraphPageBreakBefore(properties.pageBreakBefore);
        this.writeParagraphBeforeAutoSpacing(properties.beforeAutoSpacing);
        this.writeParagraphAfterAutoSpacing(properties.afterAutoSpacing);
        this.writeParagraphKeepWithNext(properties.keepWithNext);
        this.writeParagraphKeepLinesTogether(properties.keepLinesTogether);
        this.writeParagraphWidowOrphanControl(properties.widowOrphanControl);
        this.writeParagraphOutlineLevel(properties.outlineLevel);
        this.writeParagraphShading(properties.shadingInfo);
        this.writeParagraphLineSpacing(properties.lineSpacingType, properties.lineSpacing);
        this.writeParagraphSpacingBefore(properties.spacingBefore);
        this.writeParagraphSpacingAfter(properties.spacingAfter);
    };
    RtfParagraphPropertiesExporter.prototype.isDefaultAlignment = function (properties) {
        if (properties.rightToLeft)
            return properties.alignment == paragraph_properties_1.ParagraphAlignment.Right;
        else
            return properties.alignment == paragraph_properties_1.ParagraphAlignment.Left;
    };
    RtfParagraphPropertiesExporter.prototype.getActualAlignment = function (properties) {
        if (properties.rightToLeft) {
            if (properties.alignment == paragraph_properties_1.ParagraphAlignment.Left)
                return paragraph_properties_1.ParagraphAlignment.Right;
            if (properties.alignment == paragraph_properties_1.ParagraphAlignment.Right)
                return paragraph_properties_1.ParagraphAlignment.Left;
        }
        return properties.alignment;
    };
    RtfParagraphPropertiesExporter.prototype.exportParagraphNumberingProperties = function (paragraph) {
        if (!this.shouldExportParagraphNumbering(paragraph.numberingListIndex, paragraph.listLevelIndex))
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LevelIndex, paragraph.getListLevelIndex());
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListIndex, this.documentModel.numberingLists[paragraph.getNumberingListIndex()].getId());
    };
    RtfParagraphPropertiesExporter.prototype.shouldExportParagraphNumbering = function (numberingListId, listLevelIndex) {
        if (listLevelIndex === void 0) { listLevelIndex = 1; }
        return numberingListId == numbering_list_1.NumberingList.NoNumberingListIndex ||
            numberingListId >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue || listLevelIndex > 0;
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphStyle = function (paragraphStyle) {
        var styleName = paragraphStyle.styleName;
        var styleCollection = this.rtfExportHelper.paragraphStylesCollectionIndex;
        if (string_1.StringMapUtils.containsBy(styleCollection, function (_val, key) { return key == styleName; }))
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParagraphStyle, styleCollection[styleName]);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphBorder = function (topBorder, command) {
        var defaultBorder = this.documentModel.defaultTableProperties.borders.topBorder;
        if (!defaultBorder.equals(topBorder)) {
            this.rtfBuilder.writeCommand(command);
            this.writeBorderProperties(topBorder);
        }
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphAlignment = function (alignment) {
        switch (alignment) {
            case paragraph_properties_1.ParagraphAlignment.Left:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.LeftAlignment);
                break;
            case paragraph_properties_1.ParagraphAlignment.Center:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.CenterAlignment);
                break;
            case paragraph_properties_1.ParagraphAlignment.Justify:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.JustifyAlignment);
                break;
            case paragraph_properties_1.ParagraphAlignment.Right:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.RightAlignment);
                break;
        }
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphTableProperties = function (_paragraph, nestingLevel) {
        if (nestingLevel > 0)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.InTableParagraph);
        if (nestingLevel > 1)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParagraphNestingLevel, nestingLevel);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphGroupPropertiesId = function (_paragraph) {
        if (this.documentModel.webSettings.isBodyMarginsSet())
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParagraphGroupPropertiesId, 1);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphIndents = function (mergedParagraphProperties) {
        var firstLineIndent = this.calcRtfFirstLineIndent(mergedParagraphProperties.firstLineIndentType, mergedParagraphProperties.firstLineIndent);
        if (firstLineIndent != this.defaultParagraphFirstLineIndent)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.FirstLineIndentInTwips, firstLineIndent);
        var leftIndent = this.calcRtfLeftIndent(mergedParagraphProperties.firstLineIndentType, mergedParagraphProperties.firstLineIndent, mergedParagraphProperties.leftIndent);
        if (leftIndent != this.defaultParagraphLeftIndent) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LeftIndentInTwips, leftIndent);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LeftIndentInTwips_Lin, leftIndent);
        }
        var rightIndent = mergedParagraphProperties.rightIndent;
        if (rightIndent != this.defaultParagraphRightIndent) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RightIndentInTwips, rightIndent);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RightIndentInTwips_Rin, rightIndent);
        }
    };
    RtfParagraphPropertiesExporter.prototype.calcRtfFirstLineIndent = function (firstLineIndentType, firstLineIndent) {
        switch (firstLineIndentType) {
            case paragraph_properties_1.ParagraphFirstLineIndent.Indented:
                return firstLineIndent;
            case paragraph_properties_1.ParagraphFirstLineIndent.Hanging:
                return -firstLineIndent;
            case paragraph_properties_1.ParagraphFirstLineIndent.None:
            default:
                return 0;
        }
    };
    RtfParagraphPropertiesExporter.prototype.calcRtfLeftIndent = function (_firstLineIndentType, _firstLineIndent, leftIndent) {
        return leftIndent;
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphSuppressHyphenation = function (paragraphSuppressHyphenation) {
        if (paragraphSuppressHyphenation == this.defaultSuppressHyphenation)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.AutomaticParagraphHyphenation, paragraphSuppressHyphenation ? 0 : 1);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphSuppressLineNumbers = function (paragraphSuppressLineNumbers) {
        if (paragraphSuppressLineNumbers)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.SuppressLineNumbering);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphContextualSpacing = function (value) {
        if (value)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ContextualSpacing);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphPageBreakBefore = function (value) {
        if (value == this.defaultPageBreakBefore)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PageBreakBefore, value ? 1 : 0);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphBeforeAutoSpacing = function (value) {
        if (value == this.defaultBeforeAutoSpacing)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.BeforeAutoSpacing, value ? 1 : 0);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphAfterAutoSpacing = function (value) {
        if (value == this.defaultAfterAutoSpacing)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.AfterAutoSpacing, value ? 1 : 0);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphKeepWithNext = function (value) {
        if (value == this.defaultKeepWithNext)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.KeepWithNext, value ? 1 : 0);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphKeepLinesTogether = function (value) {
        if (value == this.defaultKeepLinesTogether)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.KeepLinesTogether, value ? 1 : 0);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphWidowOrphanControl = function (value) {
        if (value == this.defaultWidowOrphanControl)
            return;
        if (value)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.WidowOrphanControlOn);
        else
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.WidowOrphanControlOff);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphOutlineLevel = function (outlineLevel) {
        if (outlineLevel < 0 || outlineLevel >= 10)
            return;
        if (outlineLevel > 0)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.OutlineLevel, outlineLevel - 1);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphLineSpacing = function (paragraphLineSpacingType, paragraphLineSpacing) {
        switch (paragraphLineSpacingType) {
            case paragraph_properties_1.ParagraphLineSpacingType.AtLeast:
                this.writeRtfLineSpacing(paragraphLineSpacing, this.atLeastLineSpacingMultiple);
                break;
            case paragraph_properties_1.ParagraphLineSpacingType.Exactly:
                this.writeRtfLineSpacing(-paragraphLineSpacing, this.exactlyLineSpacingMultiple);
                break;
            case paragraph_properties_1.ParagraphLineSpacingType.Double:
                this.writeRtfLineSpacing(this.doubleIntervalRtfLineSpacingValue, this.multipleLineSpacing);
                break;
            case paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral:
                this.writeRtfLineSpacing(this.sesquialteralIntervalRtfLineSpacingValue, this.multipleLineSpacing);
                break;
            case paragraph_properties_1.ParagraphLineSpacingType.Multiple:
                this.writeRtfLineSpacing((paragraphLineSpacing * this.singleIntervalRtfLineSpacingValue), this.multipleLineSpacing);
                break;
        }
    };
    RtfParagraphPropertiesExporter.prototype.writeRtfLineSpacing = function (rtfLineSpacingValue, rtfLineSpacingMultiple) {
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RtfLineSpacingValue, rtfLineSpacingValue);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RtfLineSpacingMultiple, rtfLineSpacingMultiple);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphSpacingBefore = function (spacingBefore) {
        if (spacingBefore == this.defaultParagraphSpacingBefore)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.SpaceBefore, spacingBefore);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphSpacingAfter = function (spacingAfter) {
        if (spacingAfter == this.defaultParagraphSpacingAfter)
            return;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.SpaceAfter, spacingAfter);
    };
    RtfParagraphPropertiesExporter.prototype.writeTabs = function (tabFormattingInfo) {
        var count = tabFormattingInfo.tabsInfo.length;
        for (var i = 0; i < count; i++)
            this.writeTabInfo(tabFormattingInfo.tabsInfo[i]);
    };
    RtfParagraphPropertiesExporter.prototype.writeTabInfo = function (tabInfo) {
        this.writeTabKind(tabInfo.alignment);
        this.writeTabLeader(tabInfo.leader);
        this.writeTabPosition(tabInfo.position);
    };
    RtfParagraphPropertiesExporter.prototype.writeTabKind = function (alignmentType) {
        switch (alignmentType) {
            case paragraph_1.TabAlign.Center:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.CenteredTab);
                break;
            case paragraph_1.TabAlign.Decimal:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.DecimalTab);
                break;
            case paragraph_1.TabAlign.Right:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.FlushRightTab);
                break;
            case paragraph_1.TabAlign.Numbering:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NumberingTab);
                break;
            case paragraph_1.TabAlign.Left:
                break;
        }
    };
    RtfParagraphPropertiesExporter.prototype.writeTabLeader = function (leaderType) {
        switch (leaderType) {
            case layout_tab_space_box_1.TabLeaderType.Dots:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderDots);
                break;
            case layout_tab_space_box_1.TabLeaderType.EqualSign:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderEqualSign);
                break;
            case layout_tab_space_box_1.TabLeaderType.Hyphens:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderHyphens);
                break;
            case layout_tab_space_box_1.TabLeaderType.MiddleDots:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderMiddleDots);
                break;
            case layout_tab_space_box_1.TabLeaderType.ThickLine:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderThickLine);
                break;
            case layout_tab_space_box_1.TabLeaderType.Underline:
                this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.TabLeaderUnderline);
                break;
            case layout_tab_space_box_1.TabLeaderType.None:
                break;
        }
    };
    RtfParagraphPropertiesExporter.prototype.writeTabPosition = function (position) {
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TabPosition, position);
    };
    RtfParagraphPropertiesExporter.prototype.writeParagraphShading = function (shadingInfo) {
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingPattern(this.rtfBuilder, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.ParagraphShading);
        var shadingPatternKeyword = rtf_export_sr_1.RtfExportSR.RunShadingPatternTable[shadingInfo.shadingPattern];
        if (rtf_export_sr_1.RtfExportSR.ShadingPatternTable[shadingPatternKeyword])
            this.rtfBuilder.writeCommand(shadingPatternKeyword);
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingForeColorIndex(this.rtfBuilder, this.rtfExportHelper, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.ParagraphFillColor);
        rtf_shading_info_export_helper_1.RtfShadingInfoExportHelper.exportShadingBackColorIndex(this.rtfBuilder, this.rtfExportHelper, this.documentModel.colorProvider, shadingInfo, rtf_export_sr_1.RtfExportSR.ParagraphBackgroundColor);
    };
    return RtfParagraphPropertiesExporter;
}(rtf_properties_exporter_1.RtfPropertiesExporter));
exports.RtfParagraphPropertiesExporter = RtfParagraphPropertiesExporter;
