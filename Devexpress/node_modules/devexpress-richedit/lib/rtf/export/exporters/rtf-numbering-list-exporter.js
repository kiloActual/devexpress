"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var map_creator_1 = require("../../../base-utils/map-creator");
var enums_1 = require("../../../core/model/character/enums");
var list_level_1 = require("../../../core/model/numbering-lists/list-level");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_export_sr_1 = require("../../translation-table/rtf-export-sr");
var numbering_formats_1 = require("../../utils/numbering-formats");
var characters_1 = require("../characters");
var rtf_builder_1 = require("../rtf-builder");
var rtf_character_properties_exporter_1 = require("./rtf-character-properties-exporter");
var rtf_paragraph_properties_exporter_1 = require("./rtf-paragraph-properties-exporter");
var RtfNumberingListExporter = (function () {
    function RtfNumberingListExporter(rtfExporter) {
        this.text = "";
        this.number = "";
        this.rtfExporter = rtfExporter;
        this.rtfBuilder = rtfExporter.createRtfBuilder();
        this.characterPropertiesExporter = new rtf_character_properties_exporter_1.RtfCharacterPropertiesExporter(rtfExporter.documentModel, rtfExporter.rtfExportHelper, this.rtfBuilder, rtfExporter.options);
        this.paragraphPropertiesExporter = new rtf_paragraph_properties_exporter_1.RtfParagraphPropertiesExporter(rtfExporter.documentModel, rtfExporter.rtfExportHelper, this.rtfBuilder);
    }
    RtfNumberingListExporter.prototype.export = function (numberingLists, startIndex, count) {
        if (numberingLists.length <= 0)
            return;
        var abstractNumberingLists = this.getAbstractNumberingLists(numberingLists, startIndex, count);
        if (abstractNumberingLists.length > 0)
            this.exportAbstractNumberingLists(abstractNumberingLists);
        this.exportListOverrideTable(numberingLists, startIndex, count);
    };
    RtfNumberingListExporter.prototype.getAbstractNumberingLists = function (numberingLists, startIndex, count) {
        var result = [];
        var lastIndex = startIndex + (count - 1);
        var _loop_1 = function (i) {
            var list = numberingLists[i].getAbstractNumberingList();
            if (!list_1.ListUtils.unsafeAnyOf(result, function (val) { return val.innerId == list.innerId; }))
                result.push(list);
        };
        for (var i = startIndex; i <= lastIndex; i++) {
            _loop_1(i);
        }
        return result;
    };
    RtfNumberingListExporter.prototype.exportAbstractNumberingLists = function (abstractNumberingLists) {
        for (var i = 0; i < abstractNumberingLists.length; i++) {
            this.rtfBuilder.clear();
            this.exportAbstractNumberingList(abstractNumberingLists[i]);
        }
    };
    RtfNumberingListExporter.prototype.exportAbstractNumberingList = function (list) {
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NumberingList);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.NumberingListTemplateId, -1);
        if (list.isHybridList())
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NumberingListHybrid);
        this.exportListLevels(list.levels);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NumberingListName);
        this.rtfBuilder.closeGroup();
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.NumberingListId, list.getId());
        this.rtfBuilder.closeGroup();
        var listCollectionHandler = new map_creator_1.MapCreator(this.rtfExporter.rtfExportHelper.numberingListCollection);
        if (!this.rtfExporter.rtfExportHelper.numberingListCollection[list.getId()])
            listCollectionHandler.add(list.getId(), this.rtfBuilder.rtfContent.getText());
    };
    RtfNumberingListExporter.prototype.exportListLevels = function (listLevels) {
        var count = listLevels.length;
        for (var i = 0; i < count; i++)
            this.exportListLevel(listLevels[i]);
    };
    RtfNumberingListExporter.prototype.exportListOverrideTable = function (numberingLists, startIndex, count) {
        if (numberingLists.length <= 0)
            return;
        var lastIndex = startIndex + (count - 1);
        for (var i = startIndex; i <= lastIndex; i++) {
            this.rtfBuilder.clear();
            this.exportListOverride(numberingLists[i]);
        }
    };
    RtfNumberingListExporter.prototype.exportListOverride = function (numberingList) {
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListOverride);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.NumberingListId, numberingList.getAbstractNumberingList().getId());
        var listOverrideCount = this.getListOverrideCount(numberingList);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListOverrideCount, listOverrideCount);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListIndex, numberingList.getId());
        this.exportListOverrideLevels(numberingList);
        this.rtfBuilder.closeGroup();
        var index = this.rtfExporter.rtfExportHelper.listOverrideCollection.length;
        this.rtfExporter.rtfExportHelper.listOverrideCollection.push(this.rtfBuilder.rtfContent.getText());
        var listOverrideCollectionHandler = new map_creator_1.MapCreator(this.rtfExporter.rtfExportHelper.listOverrideCollectionIndex);
        if (!this.rtfExporter.rtfExportHelper.listOverrideCollectionIndex[numberingList.getId()])
            listOverrideCollectionHandler.add(numberingList.getId(), index);
    };
    RtfNumberingListExporter.prototype.getListOverrideCount = function (numberingList) {
        var levels = numberingList.levels;
        var count = levels.length;
        var result = 0;
        for (var i = 0; i < count; i++)
            if (this.isOverrideLevel(levels[i]))
                result++;
        return result;
    };
    RtfNumberingListExporter.prototype.isOverrideLevel = function (listLevel) {
        if (listLevel instanceof list_level_1.OverrideListLevel)
            return true;
        return listLevel.overrideStart;
    };
    RtfNumberingListExporter.prototype.exportListOverrideLevels = function (numberingList) {
        var levels = numberingList.levels;
        var count = levels.length;
        for (var i = 0; i < count; i++)
            if (this.isOverrideLevel(levels[i]))
                this.exportListOverrideLevel(levels[i]);
    };
    RtfNumberingListExporter.prototype.exportListOverrideLevel = function (level) {
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListOverrideLevel);
        if (level.overrideStart)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListOverrideStart);
        var overrideLevel = level;
        if (overrideLevel != null) {
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListOverrideFormat);
            this.exportListLevel(level);
        }
        else {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelStart, level.getNewStart());
        }
        this.rtfBuilder.closeGroup();
    };
    RtfNumberingListExporter.prototype.exportListLevel = function (listLevel) {
        var properties = listLevel.getListLevelProperties();
        var numberingListFormat = this.getNumberingListFormat(properties.format);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListLevel);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelNumberingFormat, numberingListFormat);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelNumberingFormatN, numberingListFormat);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelAlignment, properties.alignment);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelAlignmentN, properties.alignment);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelFollow, RtfNumberingListExporter.getListLevelSeparator(properties.separator));
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelStart, properties.start);
        if (properties.legacy) {
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListLevelLegacy);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelLegacySpace, properties.legacySpace);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelLegacyIndent, properties.legacyIndent);
        }
        this.exportListLevelTextAndNumber(properties.displayFormatString, properties.templateCode);
        if (properties.convertPreviousLevelNumberingToDecimal)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelLegal, 1);
        else
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelLegal, 0);
        if (properties.suppressRestart)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelNoRestart, 1);
        else
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ListLevelNoRestart, 0);
        this.exportListLevelCharacterAndParagraphProperties(listLevel);
        this.rtfBuilder.closeGroup();
    };
    RtfNumberingListExporter.prototype.getNumberingListFormat = function (numberingFormat) {
        var result = numbering_formats_1.RtfNumberingFormats.indexOf(numberingFormat);
        return result >= 0 ? result : 0;
    };
    RtfNumberingListExporter.getListLevelSeparator = function (separator) {
        switch (separator) {
            case characters_1.Characters.TabMark:
                return 0;
            case ' ':
                return 1;
            default:
                return 2;
        }
    };
    RtfNumberingListExporter.prototype.exportListLevelTextAndNumber = function (displayFormatString, levelTemplateId) {
        this.text = "";
        this.number = "";
        this.getTextAndNumber(displayFormatString);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListLevelText);
        if (levelTemplateId != 0)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LevelTemplateId, levelTemplateId);
        this.rtfBuilder.writeTextDirect(this.rtfExporter.documentModel.simpleFormattersManager.formatString("\\'{0:x2}", this.textLength));
        this.rtfBuilder.writeTextDirect(this.text, true);
        this.rtfBuilder.writeChar(';');
        this.rtfBuilder.closeGroup();
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListLevelNumbers, this.number + ";");
        this.rtfBuilder.closeGroup();
    };
    RtfNumberingListExporter.prototype.getTextAndNumber = function (displayFormatString) {
        this.textLength = 0;
        var count = displayFormatString.length;
        var i = 0;
        while (i < count) {
            var ch = displayFormatString[i];
            if (!rtf_builder_1.RtfBuilder.isSpecialSymbol(ch))
                i = this.addChar(ch, i);
            else
                i = this.addLevelNumber(displayFormatString, i);
        }
    };
    RtfNumberingListExporter.prototype.addLevelNumber = function (displayFormatString, i) {
        if (this.doubleBrackets(displayFormatString, i)) {
            i = this.addEscapedChar(displayFormatString[i], i);
            return i + 1;
        }
        if (displayFormatString[i] == '\\')
            return this.addEscapedChar(displayFormatString[i], i);
        return this.addLevelNumberCore(displayFormatString, i);
    };
    RtfNumberingListExporter.prototype.addLevelNumberCore = function (displayFormatString, i) {
        var value = "";
        i++;
        value = displayFormatString.substr(i, displayFormatString.indexOf('}', i) - i);
        this.text += this.rtfExporter.documentModel.simpleFormattersManager.formatString("\\'{0:x2}", parseInt(value));
        this.textLength += value.length;
        this.number += this.rtfExporter.documentModel.simpleFormattersManager.formatString("\\'{0:x2}", this.textLength);
        return i + value.length + 1;
    };
    RtfNumberingListExporter.prototype.doubleBrackets = function (displayFormatString, i) {
        return (displayFormatString[i] == '}' && displayFormatString[i + 1] == '}') ||
            (displayFormatString[i] == '{' && displayFormatString[i + 1] == '{');
    };
    RtfNumberingListExporter.prototype.addChar = function (ch, i) {
        this.text += ch;
        this.textLength++;
        return i + 1;
    };
    RtfNumberingListExporter.prototype.addEscapedChar = function (ch, i) {
        var str = "\\'" + rtf_builder_1.RtfBuilder.byteToHexString[ch.charCodeAt(0)];
        this.text += str;
        this.textLength++;
        return i + 1;
    };
    RtfNumberingListExporter.prototype.exportListLevelCharacterAndParagraphProperties = function (listLevel) {
        var characterProperties = listLevel.getCharacterProperties();
        var mergedCharacterProperties = listLevel.getCharacterMergedProperties();
        this.characterPropertiesExporter.exportCharacterProperties(mergedCharacterProperties, true, !characterProperties.getUseValue(enums_1.CharacterPropertiesMask.UseDoubleFontSize), !characterProperties.getUseValue(enums_1.CharacterPropertiesMask.UseFontName));
        var mergedParagraphProperties = listLevel.getParagraphMergedProperties();
        this.paragraphPropertiesExporter.writeParagraphIndents(mergedParagraphProperties);
    };
    return RtfNumberingListExporter;
}());
exports.RtfNumberingListExporter = RtfNumberingListExporter;
