"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var extension_helper_1 = require("../../../../core/formats/utils/extension-helper");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var rtf_export_sr_1 = require("../../../translation-table/rtf-export-sr");
var hexadecimal_converter_1 = require("../../../../base-utils/hexadecimal-converter");
var string_1 = require("@devexpress/utils/lib/utils/string");
var rtf_drawing_keywords_1 = require("../../../translation-table/rtf-drawing-keywords");
var RtfPictureExporter = (function () {
    function RtfPictureExporter(rtfBuilder, run, base64Uri) {
        this.rtfBuilder = rtfBuilder;
        this.base64Uri = base64Uri;
        this.run = run;
    }
    RtfPictureExporter.prototype.getPictureSize = function () {
        var width = unit_converter_1.UnitConverter.twipsToHundredthsOfMillimeter(this.run.size.originalSize.width);
        var height = unit_converter_1.UnitConverter.twipsToHundredthsOfMillimeter(this.run.size.originalSize.height);
        return new size_1.Size(width, height);
    };
    RtfPictureExporter.prototype.getImageBytesAsString = function () {
        var base64UriWithoutPrefix = extension_helper_1.ExtensionHelper.getBase64DataWithoutPrefix(this.base64Uri);
        return hexadecimal_converter_1.base64ToHex(base64UriWithoutPrefix);
    };
    RtfPictureExporter.prototype.exportPicture = function (nonVisualDrawingProperties) {
        this.rtfBuilder.openGroup();
        this.writePictureHeader(nonVisualDrawingProperties);
        try {
            this.rtfBuilder.writePictureBytes(this.getImageBytesAsString());
        }
        finally {
            this.rtfBuilder.closeGroup();
        }
    };
    RtfPictureExporter.prototype.writePictureShapeProperties = function (rtfBuilder, nonVisualDrawingProperties) {
        rtfBuilder.openGroup();
        try {
            rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.PictureProperties);
            if (!string_1.StringUtils.isNullOrEmpty(nonVisualDrawingProperties.name))
                rtfBuilder.writeShapeProperty(rtf_drawing_keywords_1.RtfDrawingKeywords.Name, nonVisualDrawingProperties.name);
            if (!string_1.StringUtils.isNullOrEmpty(nonVisualDrawingProperties.description))
                rtfBuilder.writeShapeProperty(rtf_drawing_keywords_1.RtfDrawingKeywords.Description, nonVisualDrawingProperties.description);
        }
        finally {
            rtfBuilder.closeGroup();
        }
    };
    RtfPictureExporter.prototype.writePictureHeader = function (nonVisualDrawingProperties) {
        var pirctureSize = this.getPictureSize();
        var originalSize = this.run.size.originalSize;
        var pictureScale = this.run.size.scale;
        while (originalSize.width > 0x7FFF || originalSize.height > 0x7FFF) {
            originalSize.width /= 2;
            originalSize.height /= 2;
            pictureScale.width *= 2;
            pictureScale.height *= 2;
            pirctureSize.width /= 2;
            pirctureSize.height /= 2;
        }
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.Picture);
        this.writePictureShapeProperties(this.rtfBuilder, nonVisualDrawingProperties);
        this.rtfBuilder.writeCommand(this.getRtfPictureType());
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureWidth, Math.max(pirctureSize.width, 1));
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureHeight, Math.max(pirctureSize.height, 1));
        var roundedScaleWidth = Math.max(Math.round(pictureScale.width), 1);
        var roundedScaleHeight = Math.max(Math.round(pictureScale.height), 1);
        var desiredPictureWidth = originalSize.width / roundedScaleWidth * pictureScale.width - 0.5;
        var desiredPictureHeight = originalSize.height / roundedScaleHeight * pictureScale.height - 0.5;
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureDesiredWidth, Math.max(desiredPictureWidth, 1));
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureDesiredHeight, Math.max(desiredPictureHeight, 1));
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureScaleX, roundedScaleWidth);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.PictureScaleY, roundedScaleHeight);
    };
    return RtfPictureExporter;
}());
exports.RtfPictureExporter = RtfPictureExporter;
