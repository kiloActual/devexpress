"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("../../../core/model/borders/enums");
var color_model_info_cache_1 = require("../../../core/model/caches/hashed-caches/color-model-info-cache");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var errors_1 = require("@devexpress/utils/lib/errors");
var rtf_export_sr_1 = require("../../translation-table/rtf-export-sr");
var rtf_content_exporter_1 = require("./rtf-content-exporter");
var RtfPropertiesExporter = (function () {
    function RtfPropertiesExporter(documentModel, rtfExportHelper, rtfBuilder) {
        this.documentModel = documentModel;
        this.rtfExportHelper = rtfExportHelper;
        this.rtfBuilder = rtfBuilder;
    }
    RtfPropertiesExporter.prototype.writeBoolCommand = function (command, value) {
        if (value)
            this.rtfBuilder.writeCommand(command);
        else
            this.rtfBuilder.writeIntegerCommand(command, 0);
    };
    RtfPropertiesExporter.prototype.writeBorderProperties = function (border) {
        var defaultBorder = this.documentModel.defaultTableCellProperties.borders.bottomBorder;
        this.writeBorderStyle(border.style);
        if (border.style == enums_1.BorderLineStyle.Nil)
            return;
        this.writeBorderWidth(border.width, defaultBorder.width);
        if (border.offset != defaultBorder.offset)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.BorderSpace, border.offset);
        if (!defaultBorder.color.equals(border.color) && !color_model_info_cache_1.ColorModelInfoCache.defaultItem.equals(border.color)) {
            var colorIndex = this.rtfExportHelper.getColorIndex(border.color);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.BorderColor, colorIndex);
        }
        if (border.frame != defaultBorder.frame)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.BorderFrame);
        if (border.shadow != defaultBorder.shadow)
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.BorderShadow);
    };
    RtfPropertiesExporter.prototype.writeBorderWidth = function (value, defaultValue) {
        if (value == defaultValue)
            return;
        if (value > 255) {
            value = Math.min((value / 2), 255);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.BorderWidth, value);
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.BorderDoubleWidth);
        }
        else
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.BorderWidth, value);
    };
    RtfPropertiesExporter.prototype.writeBorderStyle = function (value) {
        if (value != enums_1.BorderLineStyle.Single) {
            var borderCommand = rtf_content_exporter_1.RtfContentExporter.borderLineStyles[value];
            if (borderCommand)
                this.rtfBuilder.writeCommand(borderCommand);
            else {
            }
        }
        else
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.BorderSingleWidth);
    };
    RtfPropertiesExporter.prototype.writeWidthUnit = function (unit, typeKeyword, valueKeyword, writeValueAnyway) {
        if (writeValueAnyway === void 0) { writeValueAnyway = false; }
        var defaultWidthUnit = table_units_1.TableWidthUnit.createDefault();
        if (unit.type != defaultWidthUnit.type) {
            var val = unit.value;
            switch (unit.type) {
                case table_units_1.TableWidthUnitType.ModelUnits:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.ModelUnits);
                    break;
                case table_units_1.TableWidthUnitType.FiftiethsOfPercent:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.FiftiethsOfPercent);
                    break;
                case table_units_1.TableWidthUnitType.Auto:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.Auto);
                    break;
                case table_units_1.TableWidthUnitType.Nil:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.Nil);
                    break;
                default:
                    throw new Error(errors_1.Errors.InternalException);
            }
            if (unit.value != defaultWidthUnit.value || writeValueAnyway)
                this.rtfBuilder.writeIntegerCommand(valueKeyword, val);
        }
    };
    RtfPropertiesExporter.prototype.writeWidthUnitInTwips = function (unit, typeKeyword, valueKeyword) {
        var defaultWidthUnit = table_units_1.TableWidthUnit.createDefault();
        if (unit.type != defaultWidthUnit.type) {
            switch (unit.type) {
                case table_units_1.TableWidthUnitType.ModelUnits:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.ModelUnits);
                    break;
                case table_units_1.TableWidthUnitType.Nil:
                    this.rtfBuilder.writeIntegerCommand(typeKeyword, table_units_1.TableWidthUnitType.Nil);
                    break;
                default:
                    throw new Error(errors_1.Errors.InternalException);
                    break;
            }
            if (unit.value != defaultWidthUnit.value)
                this.rtfBuilder.writeIntegerCommand(valueKeyword, unit.value);
        }
    };
    RtfPropertiesExporter.prototype.shouldExportCellMargin = function (marginUnit) {
        return marginUnit.type != table_units_1.TableWidthUnitType.Nil || marginUnit.value != 0;
    };
    return RtfPropertiesExporter;
}());
exports.RtfPropertiesExporter = RtfPropertiesExporter;
