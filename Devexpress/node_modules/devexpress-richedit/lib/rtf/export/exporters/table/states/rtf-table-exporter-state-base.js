"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var border_info_1 = require("../../../../../core/model/borders/border-info");
var enums_1 = require("../../../../../core/model/borders/enums");
var table_base_structures_1 = require("../../../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../../../core/model/tables/secondary-structures/table-units");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_export_sr_1 = require("../../../../translation-table/rtf-export-sr");
var rtf_table_cell_properties_merger_1 = require("../../../../utils/mergers/rtf-table-cell-properties-merger");
var rtf_table_properties_merger_1 = require("../../../../utils/mergers/rtf-table-properties-merger");
var rtf_table_row_properties_merger_1 = require("../../../../utils/mergers/rtf-table-row-properties-merger");
var rtf_style_exporter_1 = require("../../rtf-style-exporter");
var rtf_table_cell_properties_exporter_1 = require("../rtf-table-cell-properties-exporter");
var rtf_table_exporter_1 = require("../rtf-table-exporter");
var rtf_table_properties_exporter_1 = require("../rtf-table-properties-exporter");
var rtf_table_row_properties_exporter_1 = require("../rtf-table-row-properties-exporter");
var RtfTableExporterStateBase = (function () {
    function RtfTableExporterStateBase(rtfExporter, table, nestingLevel) {
        this.rtfExporter = rtfExporter;
        this._nestingLevel = nestingLevel;
        this.table = table;
        this.tableRowPropertiesExporter = new rtf_table_row_properties_exporter_1.RtfTableRowPropertiesExporter(rtfExporter.documentModel, rtfExporter.rtfExportHelper, rtfExporter.rtfBuilder);
        this.tableCellPropertiesExporter = new rtf_table_cell_properties_exporter_1.RtfTableCellPropertiesExporter(rtfExporter.documentModel, rtfExporter.rtfExportHelper, rtfExporter.rtfBuilder);
        this.tablePropertiesExporter = new rtf_table_properties_exporter_1.RtfTablePropertiesExporter(rtfExporter.documentModel, rtfExporter.rtfExportHelper, rtfExporter.rtfBuilder);
        this.tableStyleIndex = this.getTableStyleIndex();
    }
    Object.defineProperty(RtfTableExporterStateBase.prototype, "rtfBuilder", {
        get: function () {
            return this.rtfExporter.rtfBuilder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfTableExporterStateBase.prototype, "documentModel", {
        get: function () {
            return this.subDocument.documentModel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfTableExporterStateBase.prototype, "subDocument", {
        get: function () {
            return this.rtfExporter.subDocument;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfTableExporterStateBase.prototype, "nestingLevel", {
        get: function () {
            return this._nestingLevel;
        },
        enumerable: true,
        configurable: true
    });
    RtfTableExporterStateBase.prototype.exportBase = function () {
        var _this = this;
        this.table.rows.forEach(function (_row, rowIndex) {
            _this.exportRow(_this.table.rows[rowIndex], rowIndex);
        });
    };
    RtfTableExporterStateBase.prototype.getTableStyleIndex = function () {
        if (this.table.style !== this.documentModel.tableStyles[0])
            return rtf_style_exporter_1.RtfStyleExporter.obtainStyleIndex(this.table.style, this.rtfExporter.rtfExportHelper.tableStylesCollectionIndex);
        return -1;
    };
    RtfTableExporterStateBase.prototype.exportRowCells = function (row, rowIndex) {
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            this.exportCellParagraphs(cell, rowIndex);
        }
    };
    RtfTableExporterStateBase.prototype.exportInTableParagraph = function (parIndex, tableNestingLevel, isEndParagraph, condTypes) {
        var paragraph = this.subDocument.paragraphs[parIndex];
        this.rtfExporter.exportParagraphCore(paragraph, tableNestingLevel, condTypes, this.tableStyleIndex);
        this.finishParagraph(isEndParagraph);
    };
    RtfTableExporterStateBase.prototype.finishParagraph = function (isEndParagraph) {
        if (isEndParagraph)
            this.writeParagraphEndMark();
        else
            this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.EndOfParagraph);
    };
    RtfTableExporterStateBase.prototype.exportCellParagraphs = function (cell, parentRowIndex) {
        var startParagraphIndex = this.subDocument.getParagraphIndexByPosition(cell.startParagraphPosition.value);
        var endParagraphIndex = this.subDocument.getParagraphIndexByPosition(cell.endParagrapPosition.value - 1);
        for (var parIndex = startParagraphIndex; parIndex <= endParagraphIndex; parIndex++) {
            var paragraph = this.subDocument.paragraphs[parIndex];
            var parCell = paragraph.getTableCell();
            var nextParIndex = this.exportNestedTable(cell, parIndex);
            if (parCell !== cell) {
                parIndex = nextParIndex;
                if (this.nestingLevel == 1) {
                    var row = cell.parentRow;
                    this.exportRowProperties(row, parentRowIndex);
                }
            }
            else {
                if (this.nestingLevel == 1 && parIndex == startParagraphIndex && cell.isFirstCellInRow)
                    this.exportRowProperties(cell.parentRow, parentRowIndex);
                var isEndParagraph = parIndex == endParagraphIndex;
                this.exportInTableParagraph(parIndex, this.nestingLevel, isEndParagraph, cell.conditionalFormatting);
            }
        }
    };
    RtfTableExporterStateBase.prototype.exportNestedTable = function (parentCell, parIndex) {
        var paragraph = this.subDocument.paragraphs[parIndex];
        var parCell = paragraph.getTableCell();
        if (parCell === parentCell) {
            return parIndex;
        }
        var nestedTable = parCell.parentRow.parentTable;
        while (parentCell !== nestedTable.parentCell) {
            nestedTable = nestedTable.parentCell.parentRow.parentTable;
        }
        return rtf_table_exporter_1.RtfTableExporter.exportNestedTable(this.rtfExporter, nestedTable, this.nestingLevel + 1);
    };
    RtfTableExporterStateBase.prototype.exportRowProperties = function (row, rowIndex) {
        var rowLeft = this.calculateRowLeft(row, row.parentTable.getActualTableIndent(this.documentModel.defaultTableProperties));
        this.exportOwnRowProperties(row, rowIndex, rowLeft);
        var cellRightVirtualColInd = row.gridBefore;
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cellRightVirtualColInd += cell.columnSpan;
            var cellRight = rowLeft + this.getCellWidth(cellRightVirtualColInd);
            this.exportCellProperties(cell, cellRight);
        }
    };
    RtfTableExporterStateBase.prototype.getCellWidth = function (virtualColumnIndex) {
        if (virtualColumnIndex < 0)
            throw new Error(errors_1.Errors.InternalException);
        var minVirtualColumnWidth = 10;
        return virtualColumnIndex * minVirtualColumnWidth;
    };
    RtfTableExporterStateBase.prototype.calculateRowLeft = function (row, indent) {
        var widthBefore = row.gridBefore > 0 ? this.getCellWidth(row.gridBefore) : 0;
        var offset = this.getActualWidth(indent) + widthBefore;
        return offset - (this.rowLeftOffset != null ? this.rowLeftOffset : this.calculateRowLeftOffset(row));
    };
    RtfTableExporterStateBase.prototype.calculateRowLeftOffset = function (row) {
        var borderWidth = row.cells[0].properties.borders.leftBorder.width;
        var leftMargin = row.cells[0].properties.cellMargins.left;
        this.rowLeftOffset = Math.max(borderWidth / 2, this.getActualWidth(leftMargin));
        return this.rowLeftOffset;
    };
    RtfTableExporterStateBase.prototype.getActualWidth = function (unit) {
        if (unit.type == table_units_1.TableWidthUnitType.ModelUnits)
            return unit.value;
        return 0;
    };
    RtfTableExporterStateBase.prototype.exportOwnRowProperties = function (row, rowIndex, left) {
        this.startNewRow(rowIndex);
        this.tableRowPropertiesExporter.writeRowAlignment(row.properties.tableRowAlignment);
        var table = row.parentTable;
        var mergedTableProperties = new rtf_table_properties_merger_1.RtfTablePropertiesMerger(this.documentModel).getMergedProperties(table);
        this.tablePropertiesExporter.writeTableBorders(mergedTableProperties.borders);
        this.tablePropertiesExporter.writeRowLeft(left);
        this.tableRowPropertiesExporter.writeRowHeight(row.height);
        var mergedRowProperties = new rtf_table_row_properties_merger_1.RtfTableRowPropertiesMerger(this.documentModel).getMergedProperties(row);
        this.tableRowPropertiesExporter.writeRowHeader(mergedRowProperties.header);
        this.tableRowPropertiesExporter.writeRowCantSplit(mergedRowProperties.cantSplit);
        this.tablePropertiesExporter.writeTableWidth(table.preferredWidth);
        this.tableRowPropertiesExporter.writeWidthBefore(row.widthBefore);
        this.tableRowPropertiesExporter.writeWidthAfter(row.widthAfter);
        this.tablePropertiesExporter.writeTableLayout(table.properties.layoutType);
        this.tableRowPropertiesExporter.writeRowCellSpacing(mergedRowProperties.cellSpacing);
        this.tablePropertiesExporter.writeTableCellMargins(mergedTableProperties.cellMargins);
        this.tablePropertiesExporter.writeTableLook(table.lookTypes);
        this.tablePropertiesExporter.writeTableIndent(mergedTableProperties.indent);
        this.tablePropertiesExporter.writeBandSizes(table.properties);
    };
    RtfTableExporterStateBase.prototype.startNewRow = function (rowIndex) {
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ResetTableProperties);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableRowIndex, rowIndex);
        if ((this.table.lookTypes & table_base_structures_1.TableLookTypes.ApplyFirstRow) > 0)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableRowBandIndex, rowIndex - 1);
        else
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableRowBandIndex, rowIndex);
        if (rowIndex == this.table.rows.length - 1)
            this.tableRowPropertiesExporter.writeLastRowMark();
        this.writeTableStyleIndex();
        this.tableRowPropertiesExporter.writeHalfSpaceBetweenCells(this.calcHalfSpaceBetweenCells());
    };
    RtfTableExporterStateBase.prototype.writeTableStyleIndex = function () {
        if (this.tableStyleIndex != -1)
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.TableStyleIndex, this.tableStyleIndex);
    };
    RtfTableExporterStateBase.prototype.calcHalfSpaceBetweenCells = function () {
        var leftMargin = this.table.properties.cellMargins.left;
        var leftMarginVal = leftMargin.type == table_units_1.TableWidthUnitType.ModelUnits ? leftMargin.value : 0;
        var rightMargin = this.table.properties.cellMargins.right;
        var rightMarginVal = rightMargin.type == table_units_1.TableWidthUnitType.ModelUnits ? rightMargin.value : 0;
        return (leftMarginVal + rightMarginVal) / 2;
    };
    RtfTableExporterStateBase.prototype.exportCellProperties = function (cell, cellRight) {
        var mergetTableCellProperties = new rtf_table_cell_properties_merger_1.RtfTableCellPropertiesMerger(this.documentModel).getMergedProperties(cell);
        this.tableCellPropertiesExporter.writeCellVerticalMerging(cell.verticalMerging, table_base_structures_1.TableCellMergingState.None);
        this.tableCellPropertiesExporter.writeCellVerticalAlignment(mergetTableCellProperties.verticalAlignment);
        this.tableCellPropertiesExporter.writeCellBasicBorders(this.getActualTopBorderInfo(cell), this.getActualLeftBorderInfo(cell), this.getActualRightBorderInfo(cell), this.getActualBottomBorderInfo(cell));
        this.tableCellPropertiesExporter.writeCellShading(mergetTableCellProperties.shadingInfo);
        this.tableCellPropertiesExporter.writeCellTextDirection(mergetTableCellProperties.textDirection);
        this.tableCellPropertiesExporter.writeCellFitText(mergetTableCellProperties.fitText);
        this.tableCellPropertiesExporter.writeCellNoWrap(mergetTableCellProperties.noWrap);
        this.tableCellPropertiesExporter.writeCellHideCellMark(mergetTableCellProperties.hideCellMark);
        this.tableCellPropertiesExporter.writeCellPreferredWidth(cell.preferredWidth);
        this.tableCellPropertiesExporter.writeCellMargings(mergetTableCellProperties.cellMargins);
        this.tableCellPropertiesExporter.writeCellRight(cellRight);
    };
    RtfTableExporterStateBase.prototype.getActualLeftBorderInfo = function (cell) {
        var cellBorderInfo = cell.getActualLeftCellBorder(this.documentModel.defaultTableCellProperties);
        var isTableOuterBorder = cell.parentRow.cells[0] == cell && this.table.properties.cellSpacing.value <= 0;
        if (!cellBorderInfo)
            cellBorderInfo = this.table.getActualLeftBorder(this.documentModel.defaultTableProperties, isTableOuterBorder);
        return this.getActualBorderInfoCore(cellBorderInfo);
    };
    RtfTableExporterStateBase.prototype.getActualRightBorderInfo = function (cell) {
        var cellBorderInfo = cell.getActualRightCellBorder(this.subDocument.documentModel.defaultTableCellProperties);
        var isTableOuterBorder = list_1.ListUtils.last(cell.parentRow.cells) == cell && this.table.properties.cellSpacing.value <= 0;
        if (!cellBorderInfo)
            cellBorderInfo = this.table.getActualRightBorder(this.documentModel.defaultTableProperties, isTableOuterBorder);
        return this.getActualBorderInfoCore(cellBorderInfo);
    };
    RtfTableExporterStateBase.prototype.getActualTopBorderInfo = function (cell) {
        var cellBorderInfo = cell.getActualTopCellBorder(this.subDocument.documentModel.defaultTableCellProperties);
        var isTableOuterBorder = cell.parentRow.parentTable.rows[0] == cell.parentRow && this.table.properties.cellSpacing.value <= 0;
        if (!cellBorderInfo)
            cellBorderInfo = this.table.getActualTopBorder(this.documentModel.defaultTableProperties, isTableOuterBorder);
        return this.getActualBorderInfoCore(cellBorderInfo);
    };
    RtfTableExporterStateBase.prototype.getActualBottomBorderInfo = function (cell) {
        var cellBorderInfo = cell.getActualBottomCellBorder(this.subDocument.documentModel.defaultTableCellProperties);
        var isTableOuterBorder = list_1.ListUtils.last(cell.parentRow.parentTable.rows) == cell.parentRow && this.table.properties.cellSpacing.value <= 0;
        if (!cellBorderInfo)
            cellBorderInfo = this.table.getActualBottomBorder(this.documentModel.defaultTableProperties, isTableOuterBorder);
        return this.getActualBorderInfoCore(cellBorderInfo);
    };
    RtfTableExporterStateBase.prototype.getActualBorderInfoCore = function (cellBorderInfo) {
        if (!cellBorderInfo || cellBorderInfo.style == enums_1.BorderLineStyle.Nil)
            return new border_info_1.BorderInfo();
        return cellBorderInfo;
    };
    return RtfTableExporterStateBase;
}());
exports.RtfTableExporterStateBase = RtfTableExporterStateBase;
