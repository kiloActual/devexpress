"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tint_and_shade_calculator_1 = require("../../core/formats/utils/color/tint-and-shade-calculator");
var dx_color_1 = require("../../core/model/color/dx-color");
var enums_1 = require("../../core/model/color/enums");
var constants_1 = require("@devexpress/utils/lib/constants");
var color_1 = require("@devexpress/utils/lib/utils/color");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var rtf_export_sr_1 = require("../translation-table/rtf-export-sr");
var rtf_content_exporter_1 = require("./exporters/rtf-content-exporter");
var rtf_export_helper_1 = require("./helpers/rtf-export-helper");
var rtf_builder_1 = require("./rtf-builder");
var RtfExporter = (function () {
    function RtfExporter(modelManipulator, options) {
        this.modelManipulator = modelManipulator;
        this.documentModel = modelManipulator.model;
        this.options = options;
        this.rtfExportHelper = new rtf_export_helper_1.RtfExportHelper();
        this.contentExporter = new rtf_content_exporter_1.RtfContentExporter(this.documentModel, options, this.rtfExportHelper);
        this.rtfBuilder = this.contentExporter.createRtfBuilder();
    }
    RtfExporter.prototype.exportToBlob = function (callback) {
        var _this = this;
        this.modelManipulator.picture.loader.ensureAllPicturesLoaded(this.options.ensurePictureLoadedTimeout, function (_loaded) {
            callback(new Blob([_this.exportAsString()], { type: 'application/rtf' }));
        });
    };
    RtfExporter.prototype.exportToBase64 = function (callback) {
        var _this = this;
        this.modelManipulator.picture.loader.ensureAllPicturesLoaded(this.options.ensurePictureLoadedTimeout, function (_loaded) {
            callback(btoa(_this.exportAsString()));
        });
    };
    RtfExporter.prototype.exportAsString = function () {
        this.exportCore();
        return this.rtfBuilder.rtfContent.getText();
    };
    RtfExporter.prototype.exportCore = function () {
        this.contentExporter.export();
        var content = this.contentExporter.rtfBuilder.rtfContent;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.RtfSignature);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.DefaultFontIndex, this.rtfExportHelper.defaultFontIndex);
        this.exportFontTable();
        this.exportColorTable();
        this.exportDefaultProperties();
        this.exportStyleTable();
        this.exportListTable();
        this.exportListOverrideTable();
        this.exportParagraphGroupProperties();
        this.exportUsersTable();
        this.exportDocumentVariables();
        this.rtfBuilder.writeTextDirectUnsafe(content);
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportListTable = function () {
        var _this = this;
        var numberingListCollection = this.rtfExportHelper.numberingListCollection;
        var keys = Object.keys(numberingListCollection);
        if (keys.length <= 0)
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.NumberingListTable);
        keys.forEach(function (key) {
            _this.rtfBuilder.writeTextDirect(numberingListCollection[key]);
        });
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportListOverrideTable = function () {
        var _this = this;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ListOverrideTable);
        var listOverrideCollection = this.rtfExportHelper.listOverrideCollection;
        var keys = Object.keys(listOverrideCollection);
        keys.forEach(function (key) {
            _this.rtfBuilder.writeTextDirect(listOverrideCollection[key]);
        });
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportDefaultProperties = function () {
        this.exportDefaultCharacterProperties();
        this.exportDefaultParagraphProperties();
    };
    RtfExporter.prototype.exportDefaultCharacterProperties = function () {
        if (string_1.StringUtils.isNullOrEmpty(this.rtfExportHelper.defaultCharacterProperties))
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.DefaultCharacterProperties);
        this.rtfBuilder.writeTextDirect(this.rtfExportHelper.defaultCharacterProperties);
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportDefaultParagraphProperties = function () {
        if (string_1.StringUtils.isNullOrEmpty(this.rtfExportHelper.defaultParagraphProperties))
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.DefaultParagraphProperties);
        this.rtfBuilder.writeTextDirect(this.rtfExportHelper.defaultParagraphProperties);
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportStyleTable = function () {
        var _this = this;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.StyleTable);
        list_1.ListUtils.forEach(this.rtfExportHelper.stylesCollection, function (style) {
            _this.rtfBuilder.writeTextDirect(style);
        });
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportUsersTable = function () {
        var users = this.rtfExportHelper.userCollection;
        if (users.length <= 0)
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.UserTable);
        for (var i = 0; i < users.length; i++) {
            this.rtfBuilder.openGroup();
            this.rtfBuilder.writeText(users[i]);
            this.rtfBuilder.closeGroup();
        }
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportDocumentVariables = function () {
        var _this = this;
        this.documentModel.docVariables.foreach(function (name, value) {
            if (!common_1.isDefined(value) || typeof (value) == "object")
                return;
            value = String(value);
            if (string_1.StringUtils.isNullOrEmpty(value))
                return;
            _this.rtfBuilder.openGroup();
            _this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.DocumentVariable);
            _this.rtfBuilder.openGroup();
            _this.rtfBuilder.writeText(name);
            _this.rtfBuilder.closeGroup();
            _this.rtfBuilder.openGroup();
            _this.rtfBuilder.writeText(value);
            _this.rtfBuilder.closeGroup();
            _this.rtfBuilder.closeGroup();
        });
    };
    RtfExporter.prototype.exportParagraphGroupProperties = function () {
        var webSettings = this.contentExporter.documentModel.webSettings;
        if (!webSettings.isBodyMarginsSet())
            return;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ParagraphGroupPropertiesTable);
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ParagraphGroupProperties);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ParagraphGroupPropertiesId, 0);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.LeftIndentInTwips, webSettings.leftMargin);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.RightIndentInTwips, webSettings.rightMargin);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.SpaceBefore, webSettings.topMargin);
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.SpaceAfter, webSettings.bottomMargin);
        this.rtfBuilder.closeGroup();
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportColorTable = function () {
        var _this = this;
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.ColorTable);
        list_1.ListUtils.forEach(this.rtfExportHelper.colorCollection, function (_color, index) { return _this.exportColorIndexTableEntry(index); });
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportColorIndexTableEntry = function (colorIndex) {
        var colorInfo = this.rtfExportHelper.colorCollection[colorIndex];
        if (colorInfo.colorType == enums_1.ColorType.Rgb)
            this.exportRgbColor(colorInfo.toRgb(this.documentModel.colorProvider));
        if (colorInfo.colorType == enums_1.ColorType.Theme) {
            if (this.options.exportTheme)
                this.exportColorInfo(colorInfo);
            this.exportRgbColor(colorInfo.toRgb(this.documentModel.colorProvider));
        }
        this.rtfBuilder.writeTextDirect(";");
    };
    RtfExporter.prototype.exportRgbColor = function (color) {
        if (!dx_color_1.DXColor.isTransparentOrEmpty(color)) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ColorRed, color_1.ColorUtils.getRed(color));
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ColorGreen, color_1.ColorUtils.getGreen(color));
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ColorBlue, color_1.ColorUtils.getBlue(color));
        }
    };
    RtfExporter.prototype.exportColorInfo = function (colorInfo) {
        var themeColor = rtf_export_sr_1.RtfExportSR.ThemeColorValuesTable[colorInfo.themeValue];
        if (themeColor)
            this.rtfBuilder.writeCommand(themeColor);
        if (colorInfo.tint < 0 && colorInfo.tint > constants_1.Int32Constants.MIN_VALUE) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ThemeColorTint, tint_and_shade_calculator_1.TintAndShadeCalculator.maxTintValue);
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ThemeColorShade, tint_and_shade_calculator_1.TintAndShadeCalculator.calculateShadeFromColorModelInfoTint(colorInfo.tint));
        }
        if (colorInfo.tint > 0 && colorInfo.tint < constants_1.Int32Constants.MAX_VALUE) {
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ThemeColorTint, tint_and_shade_calculator_1.TintAndShadeCalculator.calculateTintFromColorModelInfoTint(colorInfo.tint));
            this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.ThemeColorShade, tint_and_shade_calculator_1.TintAndShadeCalculator.maxTintValue);
        }
    };
    RtfExporter.prototype.exportFontTable = function () {
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeCommand(rtf_export_sr_1.RtfExportSR.FontTable);
        var fontNames = this.rtfExportHelper.fontNamesCollection;
        var count = fontNames.length;
        for (var i = 0; i < count; i++)
            this.exportFontTableEntry(fontNames[i], i);
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.exportFontTableEntry = function (fontName, fontIndex) {
        this.rtfBuilder.openGroup();
        this.rtfBuilder.writeIntegerCommand(rtf_export_sr_1.RtfExportSR.FontNumber, fontIndex);
        fontName = this.escapeSpecialCharacters(fontName);
        this.rtfBuilder.writeTextDirect(fontName);
        this.rtfBuilder.writeTextDirect(";");
        this.rtfBuilder.closeGroup();
    };
    RtfExporter.prototype.escapeSpecialCharacters = function (fontName) {
        var containsSpecialSymbol = false;
        var length = fontName.length;
        for (var i = 0; i < length; i++) {
            var ch = fontName[i];
            if (ch != ';' && ch != '\\' && ch != '{' && ch != '}') {
                if (containsSpecialSymbol)
                    this.fontNameStringBuilder.push(ch);
                continue;
            }
            if (!containsSpecialSymbol) {
                this.fontNameStringBuilder = [];
                if (i > 0)
                    this.fontNameStringBuilder.push(fontName.substring(0, i));
                containsSpecialSymbol = true;
            }
            this.fontNameStringBuilder.push("\\'");
            this.fontNameStringBuilder.push(rtf_builder_1.RtfBuilder.byteToHexString[ch.charCodeAt(0)]);
        }
        if (containsSpecialSymbol)
            return this.fontNameStringBuilder.join();
        else
            return fontName;
    };
    return RtfExporter;
}());
exports.RtfExporter = RtfExporter;
