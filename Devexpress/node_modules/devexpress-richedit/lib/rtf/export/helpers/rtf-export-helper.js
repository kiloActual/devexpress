"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var font_info_cache_1 = require("../../../core/model/caches/hashed-caches/font-info-cache");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var dx_color_1 = require("../../../core/model/color/dx-color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var rtf_content_exporter_1 = require("../exporters/rtf-content-exporter");
var RtfExportHelper = (function () {
    function RtfExportHelper() {
        this.colorCollection = [];
        this.colorCollection.push(color_model_info_1.ColorModelInfo.empty);
        this.fontNamesCollection = [];
        this.numberingListCollection = {};
        this.listOverrideCollectionIndex = {};
        this.listOverrideCollection = [];
        this.defaultFontIndex = this.getFontNameIndex(font_info_cache_1.FontInfoCache.defaultFontName);
        this.paragraphStylesCollectionIndex = {};
        this.characterStylesCollectionIndex = {};
        this.tableStylesCollectionIndex = {};
        this.fontCharsetTable = {};
        this.stylesCollection = [];
        this.userCollection = [];
    }
    RtfExportHelper.prototype.getFontNameIndex = function (fontName) {
        var fontIndex = this.fontNamesCollection.indexOf(fontName);
        if (fontIndex >= 0)
            return fontIndex;
        this.fontNamesCollection.push(fontName);
        return this.fontNamesCollection.length - 1;
    };
    RtfExportHelper.prototype.getColorIndex = function (color) {
        var colorIndex = list_1.ListUtils.indexBy(this.colorCollection, function (c) { return c.equals(color); });
        if (colorIndex < 0) {
            colorIndex = this.colorCollection.length;
            this.colorCollection.push(color);
        }
        return colorIndex;
    };
    RtfExportHelper.prototype.blendColor = function (color) {
        return dx_color_1.DXColor.blend(color, dx_color_1.DXColor.white);
    };
    RtfExportHelper.prototype.getUserIndex = function (rangePermission) {
        var index = this.userCollection.indexOf(rangePermission.userName);
        if (index >= 0)
            return index + 1;
        var predefinedUserGroups = rtf_content_exporter_1.RtfContentExporter.predefinedUserGroups;
        var id = number_1.NumberMapUtils.keyBy(predefinedUserGroups, function (g) { return g == rangePermission.group; });
        return id != null ? id : 0;
    };
    return RtfExportHelper;
}());
exports.RtfExportHelper = RtfExportHelper;
