"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var anchor_info_1 = require("../../../core/model/floating-objects/anchor-info");
var enums_1 = require("../../../core/model/floating-objects/enums");
var sizes_1 = require("../../../core/model/floating-objects/sizes");
var text_box_properties_1 = require("../../../core/model/floating-objects/text-box-properties");
var rich_utils_1 = require("../../../core/model/rich-utils");
var anchored_text_box_run_1 = require("../../../core/model/runs/anchored-text-box-run");
var shape_1 = require("../../../core/model/shapes/shape");
var properties_bundle_1 = require("../../../core/rich-utils/properties-bundle");
var constants_1 = require("@devexpress/utils/lib/constants");
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var rtf_drawing_keywords_1 = require("../../translation-table/rtf-drawing-keywords");
var rtf_topmost_shape_bounds_calculator_1 = require("../model/shape/calculators/rtf-topmost-shape-bounds-calculator");
var rtf_shape_import_helper_1 = require("../model/shape/rtf-shape-helpers/rtf-shape-import-helper");
var importer_base_1 = require("./importer-base");
var RtfShapeImporter = (function (_super) {
    tslib_1.__extends(RtfShapeImporter, _super);
    function RtfShapeImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RtfShapeImporter.prototype.pushState = function () {
    };
    RtfShapeImporter.prototype.popState = function () {
    };
    RtfShapeImporter.prototype.startImportSubDocument = function () {
    };
    RtfShapeImporter.prototype.finalizeSubDocument = function () {
    };
    RtfShapeImporter.prototype.insertShape = function (importer, shapeProperties) {
        var subDocId = shapeProperties.getPropertyOrNull(rtf_drawing_keywords_1.RtfDrawingKeywords.ShapeText);
        if (!subDocId)
            return;
        var pos = importer.importers.character.logPosition;
        var paragraph = importer.importers.paragraph.paragraph;
        var characterStyle = importer.importers.style.character.style;
        var maskedCharacterProperties = importer.importers.character.characterFormatting.coreProperties;
        var anchorInfo = new anchor_info_1.AnchorInfo();
        anchorInfo.wrapType = enums_1.AnchorObjectTextWrapType.None;
        anchorInfo.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.None;
        anchorInfo.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        var run = new anchored_text_box_run_1.AnchoredTextBoxRun(pos, paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle), new shape_1.Shape(), subDocId, new sizes_1.AnchorTextBoxSize(true, 0, new size_1.Size(constants_1.Constants.MIN_SAFE_INTEGER, constants_1.Constants.MIN_SAFE_INTEGER), new size_1.Size(0, 0), enums_1.RelativeWidthType.Margin, enums_1.RelativeHeightType.Margin, true, true), anchorInfo, -1, new text_box_properties_1.TextBoxProperties(new margins_1.Margins(144, 144, 72, 72)));
        importer.importers.character.addRun(run, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
        new rtf_shape_import_helper_1.RtfShapeImportHelper(shapeProperties).applyAnchoredTextBoxRunProperties(run);
        run.size.absoluteSize = new rtf_topmost_shape_bounds_calculator_1.RtfTopmostShapeBoundsCalculator(shapeProperties).applyTransform2DAndGetActualSize(run.anchorInfo, run.size);
    };
    return RtfShapeImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfShapeImporter = RtfShapeImporter;
