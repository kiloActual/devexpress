"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var section_restorer_1 = require("../../../core/formats/model-restorer/section-restorer");
var chunk_1 = require("../../../core/model/chunk");
var enums_1 = require("../../../core/model/enums");
var paragraph_properties_1 = require("../../../core/model/paragraph/paragraph-properties");
var section_1 = require("../../../core/model/section/section");
var list_1 = require("@devexpress/utils/lib/utils/list");
var section_page_footer_destination_1 = require("../destination/sub-document/section-page-footer-destination");
var section_page_header_destination_1 = require("../destination/sub-document/section-page-header-destination");
var rtf_section_properties_1 = require("../model/section/rtf-section-properties");
var importer_base_1 = require("./importer-base");
var RtfSectionImporter = (function (_super) {
    tslib_1.__extends(RtfSectionImporter, _super);
    function RtfSectionImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.defaultSectionProperties = new rtf_section_properties_1.RtfSectionProperties();
        return _this;
    }
    Object.defineProperty(RtfSectionImporter.prototype, "states", {
        get: function () { return this.data.positionStates.last.sectionProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfSectionImporter.prototype, "currentProperties", {
        get: function () {
            if (!this.states.count)
                this.states.push(new rtf_section_properties_1.RtfSectionProperties());
            return this.states.last;
        },
        enumerable: true,
        configurable: true
    });
    RtfSectionImporter.prototype.insertSection = function () {
        var paragraphFormatting = this.data.importers.paragraph.paragraphFormatting;
        paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing, paragraphFormatting.calcLineSpacing());
        paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacingType, paragraphFormatting.calcLineSpacingType());
        var par = this.data.importers.paragraph.insertParagraph(true);
        this.data.importers.paragraph.applyParagraphFormatting(par, true);
        this.applySectionFormatting();
        var prevSect = list_1.ListUtils.last(this.documentModel.sections);
        this.setLastSectionLength(prevSect);
        var pos = this.documentModel.mainSubDocument.positionManager.registerPosition(prevSect.getEndPosition());
        this.documentModel.sections.push(new section_1.Section(this.documentModel, pos, 0, this.currentProperties.coreProperties));
    };
    RtfSectionImporter.prototype.setLastSectionLength = function (lastSec) {
        if (lastSec === void 0) { lastSec = list_1.ListUtils.last(this.documentModel.sections); }
        lastSec.setLength(this.documentModel.mainSubDocument, this.data.importers.character.logPosition - lastSec.startLogPosition.value);
    };
    RtfSectionImporter.prototype.applySectionFormatting = function (skipNumbering) {
        if (skipNumbering === void 0) { skipNumbering = false; }
        var documentModel = this.data.documentModel;
        var sections = documentModel.sections;
        var section = list_1.ListUtils.last(sections);
        this.currentProperties.validatePaperKind();
        section.sectionProperties = this.currentProperties.coreProperties.clone();
        var paragraphFormatting = this.data.importers.paragraph.paragraphFormatting;
        var paragraph = this.data.importers.paragraph.paragraph;
        if (!skipNumbering && this.data.importers.paragraph.paragraphFormatting.numberingListIndex >= 0) {
            if (!paragraph.isInList())
                this.data.importers.numbering.addNumberingListToParagraph(paragraph, paragraphFormatting.paragraphListInfo);
        }
        var sectionFormatting = this.data.importers.section.currentProperties;
        if ((sections.length == 1 || sectionFormatting.restartPageNumbering) && !sectionFormatting.pageNumbering.continueNumbering) {
            section.sectionProperties.firstPageNumber = sectionFormatting.pageNumbering.firstPageNumber;
            section.sectionProperties.continueNumbering = false;
        }
        else {
            section.sectionProperties.firstPageNumber = -1;
            section.sectionProperties.continueNumbering = true;
        }
    };
    RtfSectionImporter.prototype.insertHeaderFooter = function (isHeader, hfType) {
        var section = list_1.ListUtils.last(this.data.documentModel.sections);
        var subDocument = this.createSubDocument(isHeader ? enums_1.SubDocumentInfoType.Header : enums_1.SubDocumentInfoType.Footer, hfType);
        subDocument.chunks = [new chunk_1.Chunk(subDocument.positionManager.registerPosition(0), '', true)];
        this.data.destination = isHeader ?
            new section_page_header_destination_1.SectionPageHeaderDestination(this.data, section, subDocument) :
            new section_page_footer_destination_1.SectionPageFooterDestination(this.data, section, subDocument);
    };
    RtfSectionImporter.prototype.createSubDocument = function (type, hfType) {
        var section = list_1.ListUtils.last(this.documentModel.sections);
        var createdSubDocument = this.documentModel.createSubDocument(type, -1, true);
        (type == enums_1.SubDocumentInfoType.Header ?
            section.headers.setObjectIndex(hfType, this.documentModel.headers.push(createdSubDocument.info) - 1) :
            section.footers.setObjectIndex(hfType, this.documentModel.footers.push(createdSubDocument.info) - 1));
        return createdSubDocument;
    };
    RtfSectionImporter.prototype.pushState = function () {
        this.states.push(this.states.count ? this.currentProperties.clone() : new rtf_section_properties_1.RtfSectionProperties());
    };
    RtfSectionImporter.prototype.popState = function () {
        if (this.states.count > 1)
            this.states.pop();
    };
    RtfSectionImporter.prototype.startImportSubDocument = function () {
        if (!this.subDocument.isMain())
            this.popState();
    };
    RtfSectionImporter.prototype.finalizeSubDocument = function () {
        if (this.subDocument.isMain())
            section_restorer_1.SectionRestorer.fixLastSection(this.data.documentModel);
    };
    return RtfSectionImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfSectionImporter = RtfSectionImporter;
