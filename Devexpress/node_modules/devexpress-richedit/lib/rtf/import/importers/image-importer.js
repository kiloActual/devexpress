"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var images_import_1 = require("../../../core/formats/utils/images-import");
var anchor_info_1 = require("../../../core/model/floating-objects/anchor-info");
var insert_picture_manipulator_params_1 = require("../../../core/model/manipulators/picture-manipulator/insert-picture-manipulator-params");
var image_loading_options_1 = require("../../../core/model/manipulators/picture-manipulator/loader/image-loading-options");
var rich_utils_1 = require("../../../core/model/rich-utils");
var anchored_picture_run_1 = require("../../../core/model/runs/anchored-picture-run");
var inline_picture_run_1 = require("../../../core/model/runs/inline-picture-run");
var sub_document_1 = require("../../../core/model/sub-document");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var rtf_topmost_shape_bounds_calculator_1 = require("../model/shape/calculators/rtf-topmost-shape-bounds-calculator");
var rtf_shape_import_helper_1 = require("../model/shape/rtf-shape-helpers/rtf-shape-import-helper");
var importer_base_1 = require("./importer-base");
var RtfImageImporter = (function (_super) {
    tslib_1.__extends(RtfImageImporter, _super);
    function RtfImageImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.imageId = 1;
        _this.scale = new size_1.Size(100, 100);
        return _this;
    }
    RtfImageImporter.prototype.insertImage = function (imageInfo) {
        if (!imageInfo || !imageInfo.base64) {
            if (this.data.importers.field.fields.count == 0 || !this.data.importers.field.fields.peek().isShapeField)
                this.data.importers.character.insertSpace();
            return;
        }
        var cacheInfo = this.documentModel.cache.imageCache.createUnloadedInfoByBase64(imageInfo.base64);
        var actualSize = new size_1.Size(this.desireSize.width * this.scale.width / 100, this.desireSize.height * this.scale.height / 100);
        var characterImporter = this.data.importers.character;
        var pos = characterImporter.logPosition;
        var run = new inline_picture_run_1.InlinePictureRun(pos, this.data.importers.paragraph.paragraph, characterImporter.getPropsBundle(), insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo, this.scale));
        characterImporter.addRun(run, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
        this.data.formatImagesImporter.registerImageRun(new images_import_1.FormatImagesImporterData(new sub_document_1.SubDocumentPosition(this.data.subDocument, pos), image_loading_options_1.ImageLoadingOptions.initByActualSize(actualSize), run));
    };
    RtfImageImporter.prototype.insertImageShape = function (imageInfo, shapeProperties, isInline) {
        if (isInline === void 0) { isInline = true; }
        if (imageInfo == null)
            return;
        var cacheInfo = this.documentModel.cache.imageCache.createUnloadedInfoByBase64(imageInfo.base64);
        var actualSize = new size_1.Size(this.desireSize.width * this.scale.width / 100, this.desireSize.height * this.scale.height / 100);
        var characterImporter = this.data.importers.character;
        var pos = characterImporter.logPosition;
        var run;
        if (isInline) {
            run = new inline_picture_run_1.InlinePictureRun(pos, this.data.importers.paragraph.paragraph, characterImporter.getPropsBundle(), insert_picture_manipulator_params_1.InlinePictureInfo.defaultInfo(cacheInfo, this.scale));
            characterImporter.addRun(run, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
            new rtf_shape_import_helper_1.RtfShapeImportHelper(shapeProperties).applyInlinePictureRunProperties(run);
            actualSize = new rtf_topmost_shape_bounds_calculator_1.RtfTopmostShapeBoundsCalculator(shapeProperties).applyTransform2DAndGetActualSize(new anchor_info_1.AnchorInfo(), run.size);
        }
        else {
            run = new anchored_picture_run_1.AnchoredPictureRun(pos, this.data.importers.paragraph.paragraph, characterImporter.getPropsBundle(), insert_picture_manipulator_params_1.AnchorPictureInfo.defaultInfo(cacheInfo, this.scale), -1);
            characterImporter.addRun(run, rich_utils_1.RichUtils.specialCharacters.FloatingObjectMark);
            new rtf_shape_import_helper_1.RtfShapeImportHelper(shapeProperties).applyAnchoredPictureRunProperties(run);
            actualSize = new rtf_topmost_shape_bounds_calculator_1.RtfTopmostShapeBoundsCalculator(shapeProperties).applyTransform2DAndGetActualSize(run.anchorInfo, run.size);
        }
        this.data.formatImagesImporter.registerImageRun(new images_import_1.FormatImagesImporterData(new sub_document_1.SubDocumentPosition(this.data.subDocument, pos), image_loading_options_1.ImageLoadingOptions.initByActualSize(actualSize), run));
    };
    RtfImageImporter.prototype.pushState = function () {
    };
    RtfImageImporter.prototype.popState = function () {
    };
    RtfImageImporter.prototype.startImportSubDocument = function () {
    };
    RtfImageImporter.prototype.finalizeSubDocument = function () {
    };
    return RtfImageImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfImageImporter = RtfImageImporter;
