"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var string_helper_1 = require("../../../core/formats/utils/string-helper");
var dx_encoding_1 = require("../encoding/dx-encoding");
var font_info_collection_1 = require("../model/character/font-info-collection");
var importer_base_1 = require("./importer-base");
var RtfFontImporter = (function (_super) {
    tslib_1.__extends(RtfFontImporter, _super);
    function RtfFontImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.defaultFontNumber = 0;
        _this.fonts = new font_info_collection_1.RtfFontInfoCollection();
        return _this;
    }
    RtfFontImporter.prototype.addRtfFontInfo = function (fontInfo) {
        fontInfo.name = string_helper_1.StringHelper.removeSpecialSymbols(fontInfo.name);
        if (fontInfo.name.length == 0)
            fontInfo.name = this.data.documentModel.defaultCharacterProperties.fontInfo.name;
        this.fonts.collection.push(fontInfo);
    };
    RtfFontImporter.prototype.setFont = function (fontInfo) {
        this.data.importers.character.characterFormatting.setFont(fontInfo, fontInfo.getCoreObjectByName(this.documentModel));
        var codePage = this.codePageFromCharset(fontInfo.charset);
        this.data.setCodePage(codePage);
    };
    RtfFontImporter.prototype.codePageFromCharset = function (charset) {
        if (charset >= 0)
            return dx_encoding_1.DXEncoding.codePageFromCharset(charset);
        else
            return this.data.documentProperties.defaultCodePage;
    };
    RtfFontImporter.prototype.pushState = function () {
    };
    RtfFontImporter.prototype.popState = function () {
    };
    RtfFontImporter.prototype.startImportSubDocument = function () {
    };
    RtfFontImporter.prototype.finalizeSubDocument = function () {
    };
    return RtfFontImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfFontImporter = RtfFontImporter;
