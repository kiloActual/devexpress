"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_formats_helper_1 = require("../../../core/formats/utils/document-formats-helper");
var numbering_list_index_constants_1 = require("../../../core/formats/utils/numbering-list-index-constants");
var paragraph_1 = require("../../../core/model/paragraph/paragraph");
var paragraph_properties_merger_1 = require("../../../core/model/properties-merger/paragraph-properties-merger");
var rich_utils_1 = require("../../../core/model/rich-utils");
var run_type_1 = require("../../../core/model/runs/run-type");
var simple_runs_1 = require("../../../core/model/runs/simple-runs");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var list_1 = require("@devexpress/utils/lib/utils/list");
var paragraph_properties_1 = require("../model/paragraph/paragraph-properties");
var importer_base_1 = require("./importer-base");
var RtfParagraphImporterState = (function () {
    function RtfParagraphImporterState(paragraphFormatting) {
        this.paragraphFormatting = paragraphFormatting;
    }
    return RtfParagraphImporterState;
}());
var RtfParagraphImporter = (function (_super) {
    tslib_1.__extends(RtfParagraphImporter, _super);
    function RtfParagraphImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.states = new stack_1.Stack();
        _this.states.push(new RtfParagraphImporterState(new paragraph_properties_1.RtfParagraphProperties()));
        return _this;
    }
    Object.defineProperty(RtfParagraphImporter.prototype, "paragraph", {
        get: function () { return this.data.positionStates.last.paragraph; },
        set: function (value) { this.data.positionStates.last.paragraph = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfParagraphImporter.prototype, "paragraphFormatting", {
        get: function () { return this.states.last.paragraphFormatting; },
        set: function (value) { this.states.last.paragraphFormatting = value; },
        enumerable: true,
        configurable: true
    });
    RtfParagraphImporter.getOnlyOwnCharacterProperties = function (source, parentStyle) {
        var parentParagraphPropertiesMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
        parentParagraphPropertiesMerger.mergeParagraphStyle(parentStyle);
        var paragraphMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
        paragraphMerger.mergeOnlyOwnCharacterProperties(source, parentParagraphPropertiesMerger.innerProperties);
        return paragraphMerger.innerProperties;
    };
    RtfParagraphImporter.prototype.createEmptyParagraph = function () {
        return new paragraph_1.Paragraph(this.subDocument, null, 0, null, null);
    };
    RtfParagraphImporter.prototype.fixLastParagraph = function () {
        if (this.subDocument.isMain())
            this.data.importers.section.applySectionFormatting(true);
    };
    RtfParagraphImporter.prototype.insertParagraph = function (asSectionRun) {
        if (asSectionRun === void 0) { asSectionRun = false; }
        var characterImporter = this.data.importers.character;
        var par = this.paragraph;
        var prevPar = list_1.ListUtils.last(this.subDocument.paragraphs);
        var lastParPos = prevPar ? prevPar.getEndPosition() : 0;
        var parPos = this.subDocument.positionManager.registerPosition(lastParPos);
        var parLen = characterImporter.logPosition - lastParPos + 1;
        this.data.importers.style.paragraph.ensureStyleExist();
        par.subDocument = this.subDocument;
        par.startLogPosition = parPos;
        par.length = parLen;
        this.applyParagraphFormatting(par, asSectionRun);
        characterImporter.addRun(new (asSectionRun ? simple_runs_1.SectionRun : simple_runs_1.ParagraphRun)(characterImporter.logPosition, par, characterImporter.getPropsBundle()), (asSectionRun ? rich_utils_1.RichUtils.specialCharacters.SectionMark : rich_utils_1.RichUtils.specialCharacters.ParagraphMark));
        this.subDocument.paragraphs.push(par);
        this.paragraph = this.createEmptyParagraph();
        return par;
    };
    RtfParagraphImporter.prototype.ensureLastParagraph = function () {
        var lastRun = list_1.ListUtils.last(list_1.ListUtils.last(this.subDocument.chunks).textRuns);
        if (!lastRun || !lastRun.isParagraphOrSectionRun())
            this.insertParagraph();
    };
    RtfParagraphImporter.prototype.applyParagraphFormatting = function (paragraph, sectionBreak) {
        var paragraphFormatting = this.paragraphFormatting;
        this.applyParagraphFormattingCore(paragraph, paragraphFormatting);
        if (document_formats_helper_1.DocumentFormatsHelper.shouldInsertNumbering(this.documentModel)) {
            var numberingListIndex = paragraphFormatting.paragraphListInfo.numberingListIndex;
            if (numberingListIndex >= 0 || numberingListIndex == numbering_list_index_constants_1.NumberingListIndexConstants.noNumberingList) {
                if (!(sectionBreak && paragraph.isEmpty)) {
                    paragraphFormatting.paragraphListInfo.numberingListIndex = Math.max(numberingListIndex, numbering_list_index_constants_1.NumberingListIndexConstants.minValue);
                    this.data.importers.numbering.addNumberingListToParagraph(paragraph, paragraphFormatting.paragraphListInfo);
                }
            }
            else if (!this.data.importers.numbering.currentOldListSkipNumbering) {
                this.data.importers.numbering.currentOldMultiLevelListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
                this.data.importers.numbering.currentOldSimpleListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
            }
        }
        paragraph.tabs = paragraphFormatting.tabs;
    };
    RtfParagraphImporter.prototype.applyParagraphFormattingCore = function (paragraph, paragraphFormatting) {
        paragraph.paragraphStyle = this.data.importers.style.paragraph.style;
        paragraph.maskedParagraphProperties = RtfParagraphImporter.getOnlyOwnCharacterProperties(paragraphFormatting.getCoreProperties(), paragraph.paragraphStyle);
    };
    RtfParagraphImporter.prototype.pushState = function () {
        this.states.push(new RtfParagraphImporterState(this.paragraphFormatting.clone()));
    };
    RtfParagraphImporter.prototype.popState = function () {
        if (this.states.count > 1)
            this.states.pop();
    };
    RtfParagraphImporter.prototype.startImportSubDocument = function () {
    };
    RtfParagraphImporter.prototype.finalizeSubDocument = function () {
        var textRuns = this.subDocument.getLastChunk().textRuns;
        var shouldInsertParagraph = textRuns.length ? list_1.ListUtils.last(textRuns).getType() != run_type_1.RunType.ParagraphRun : true;
        if (shouldInsertParagraph)
            this.insertParagraph();
        this.fixLastParagraph();
    };
    return RtfParagraphImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfParagraphImporter = RtfParagraphImporter;
