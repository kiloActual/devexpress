"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_property_descriptor_1 = require("../../../core/model/character/character-property-descriptor");
var character_properties_merger_1 = require("../../../core/model/properties-merger/character-properties-merger");
var text_run_1 = require("../../../core/model/runs/text-run");
var shading_info_1 = require("../../../core/model/shadings/shading-info");
var properties_bundle_1 = require("../../../core/rich-utils/properties-bundle");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var list_1 = require("@devexpress/utils/lib/utils/list");
var unicode_char_helper_1 = require("../../utils/unicode-char-helper");
var character_properties_1 = require("../model/character/character-properties");
var importer_base_1 = require("./importer-base");
var RtfCharacterImporterState = (function () {
    function RtfCharacterImporterState(characterFormatting) {
        this.characterFormatting = characterFormatting;
    }
    return RtfCharacterImporterState;
}());
var RtfCharacterImporter = (function (_super) {
    tslib_1.__extends(RtfCharacterImporter, _super);
    function RtfCharacterImporter(data) {
        var _this = _super.call(this, data) || this;
        _this.states = new stack_1.Stack();
        var defaultCharacterProperties = new character_properties_1.RtfCharacterProperties();
        defaultCharacterProperties.coreProperties = _this.data.documentModel.defaultCharacterProperties;
        _this.states.push(new RtfCharacterImporterState(defaultCharacterProperties));
        _this.logPosition = 0;
        return _this;
    }
    Object.defineProperty(RtfCharacterImporter.prototype, "characterFormatting", {
        get: function () { return this.states.last.characterFormatting; },
        enumerable: true,
        configurable: true
    });
    RtfCharacterImporter.getOnlyOwnCharacterProperties = function (source, parentCharacterStyle) {
        var parentPropertiesMerger = new character_properties_merger_1.CharacterPropertiesMerger();
        parentPropertiesMerger.mergeCharacterStyle(parentCharacterStyle);
        var merger = new character_properties_merger_1.CharacterPropertiesMerger();
        merger.innerProperties.fontInfo = source.fontInfo;
        merger.mergeOnlyOwnCharacterProperties(source, parentPropertiesMerger.innerProperties);
        return merger.innerProperties;
    };
    RtfCharacterImporter.prototype.getPropsBundle = function () {
        return new properties_bundle_1.MaskedCharacterPropertiesBundle(RtfCharacterImporter.getOnlyOwnCharacterProperties(this.characterFormatting.coreProperties, this.data.importers.style.character.style), this.data.importers.style.character.style);
    };
    RtfCharacterImporter.prototype.insertText = function (text) {
        this.addRun(new text_run_1.TextRun(this.logPosition, text.length, this.data.importers.paragraph.paragraph, this.getPropsBundle()), text);
    };
    RtfCharacterImporter.prototype.getLastRunProperties = function () {
        var textRun = list_1.ListUtils.last(list_1.ListUtils.last(this.subDocument.chunks).textRuns);
        if (textRun)
            return textRun.getCharPropsBundle(this.documentModel);
        return this.getPropsBundle();
    };
    RtfCharacterImporter.prototype.addSimpleRun = function (runConstr, text, useLastProperties) {
        var properties = useLastProperties ? this.getLastRunProperties() : this.getPropsBundle();
        this.addRun(new runConstr(this.logPosition, this.data.importers.paragraph.paragraph, properties), text);
    };
    RtfCharacterImporter.prototype.addRun = function (run, text) {
        var chunk = list_1.ListUtils.last(this.subDocument.chunks);
        chunk.textRuns.push(run);
        chunk.textBuffer += text;
        this.logPosition += run.getLength();
    };
    RtfCharacterImporter.prototype.insertSpace = function () {
        if (this.data.importers.character.characterFormatting.rtfFormattingInfo.deleted)
            return;
        this.insertText(" ");
    };
    RtfCharacterImporter.prototype.appendChar = function (ch) {
        var oldFontInfo = this.characterFormatting.coreProperties.fontInfo;
        unicode_char_helper_1.UnicodeCharHelper.setUnicodeFontName(this.data.documentModel.cache.fontInfoCache, ch, this.characterFormatting);
        this.insertText(ch);
        this.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo, oldFontInfo);
    };
    RtfCharacterImporter.prototype.onPlainKeyword = function () {
        this.applyDefaultCharacterProperties();
    };
    RtfCharacterImporter.prototype.applyDefaultCharacterProperties = function () {
        var defaultFormatting = this.documentModel.defaultCharacterProperties;
        var currentPositionFormatting = this.characterFormatting.coreProperties;
        currentPositionFormatting.fontInfo = this.data.importers.font.fonts
            .getRtfFontInfoById(this.data.importers.font.defaultFontNumber).getCoreObjectByName(this.documentModel);
        this.data.importers.character.characterFormatting.resetUseAssociatedProperties();
        currentPositionFormatting.fontSize = 12;
        currentPositionFormatting.fontBold = defaultFormatting.fontBold;
        currentPositionFormatting.fontItalic = defaultFormatting.fontItalic;
        currentPositionFormatting.fontStrikeoutType = defaultFormatting.fontStrikeoutType;
        currentPositionFormatting.fontUnderlineType = defaultFormatting.fontUnderlineType;
        currentPositionFormatting.allCaps = defaultFormatting.allCaps;
        currentPositionFormatting.hidden = defaultFormatting.hidden;
        currentPositionFormatting.underlineWordsOnly = defaultFormatting.underlineWordsOnly;
        currentPositionFormatting.strikeoutWordsOnly = defaultFormatting.strikeoutWordsOnly;
        currentPositionFormatting.highlightColor = defaultFormatting.highlightColor;
        currentPositionFormatting.underlineColor = defaultFormatting.underlineColor;
        currentPositionFormatting.strikeoutColor = defaultFormatting.strikeoutColor;
        currentPositionFormatting.shadingInfo = shading_info_1.ShadingInfo.auto;
        currentPositionFormatting.shadingInfo = defaultFormatting.shadingInfo;
        currentPositionFormatting.script = defaultFormatting.script;
        currentPositionFormatting.textColor = defaultFormatting.textColor;
        this.data.setCodePage(this.data.documentProperties.defaultCodePage);
    };
    RtfCharacterImporter.prototype.pushState = function () {
        this.states.push(new RtfCharacterImporterState(this.characterFormatting.clone()));
    };
    RtfCharacterImporter.prototype.popState = function () {
        if (this.states.count > 1)
            this.states.pop();
    };
    RtfCharacterImporter.prototype.startImportSubDocument = function () {
        this.logPosition = this.subDocument.getLastChunk().getEndPosition();
    };
    RtfCharacterImporter.prototype.finalizeSubDocument = function () {
    };
    return RtfCharacterImporter;
}(importer_base_1.RtfBaseImporter));
exports.RtfCharacterImporter = RtfCharacterImporter;
