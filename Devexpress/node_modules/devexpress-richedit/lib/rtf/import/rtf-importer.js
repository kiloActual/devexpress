"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_importer_errors_1 = require("../../core/formats/document-importer-errors");
var creator_1 = require("../../core/model/creator/creator");
var options_1 = require("../../core/model/creator/options");
var check_all_1 = require("../../core/model/model-checks/check-all");
var chunked_text_1 = require("@devexpress/utils/lib/class/chunked-text");
var rtf_import_data_1 = require("./rtf-import-data");
var RtfImporter = (function () {
    function RtfImporter(options) {
        this.options = options;
    }
    RtfImporter.prototype.importFromFile = function (blob, modelOptions, callback, reject) {
        var _this = this;
        var reader = new FileReader();
        reader.onload = function () {
            _this.importFromString(reader.result, modelOptions, callback, reject);
        };
        reader.onerror = function (_ev) {
            reject(document_importer_errors_1.DocumentImporterErrors.RtfFileReaderError);
        };
        reader.readAsText(blob);
    };
    RtfImporter.prototype.importFromString = function (rtfText, modelOptions, callback, reject) {
        this.modelOptions = modelOptions;
        try {
            this.importFromStringInner(new chunked_text_1.ChunkedText(rtfText, 100000));
            if (!new check_all_1.ModelChecker(this.data.documentModel).checkAll())
                throw new Error();
        }
        catch (err) {
            reject(document_importer_errors_1.DocumentImporterErrors.RtfImportError);
            return;
        }
        callback(this.data.documentModel, this.data.formatImagesImporter);
    };
    RtfImporter.prototype.importFromStringInner = function (rtfText) {
        this.rtfText = rtfText;
        rtfText.resetToStart();
        this.checkSignature(this.rtfText);
        var modelCreatorOptions = new options_1.ModelCreatorOptions();
        modelCreatorOptions.addParagraph = false;
        modelCreatorOptions.addSection = true;
        this.data = new rtf_import_data_1.RtfImportData(this.rtfText, this.options, new creator_1.ModelCreator(modelCreatorOptions).createModel(this.modelOptions).fillModel(), this.modelOptions.control);
        this.data.import();
        return this.data.documentModel;
    };
    RtfImporter.prototype.checkSignature = function (rtfText) {
        var sign = "{\\rtf";
        for (var ind = 0; ind < sign.length; ind++) {
            if (!rtfText.moveToNextChar() || sign[ind] != rtfText.currChar) {
                this.options.throwInvalidFile('Incorrect rtf signature');
            }
        }
        rtfText.resetToStart();
    };
    return RtfImporter;
}());
exports.RtfImporter = RtfImporter;
