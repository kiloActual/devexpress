"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rtf_table_1 = require("../model/table/rtf-table");
var rtf_table_row_controller_1 = require("./rtf-table-row-controller");
var rtf_table_state_1 = require("./rtf-table-state");
var RtfTableController = (function () {
    function RtfTableController(reader) {
        this.reader = reader;
        this.rowController = this.createRowController();
    }
    RtfTableController.prototype.createRowController = function () {
        return new rtf_table_row_controller_1.RtfTableRowController(this);
    };
    RtfTableController.prototype.changeTable = function (nestingLevel) {
        var depth = nestingLevel - this.currentTable.nestingLevel;
        if (depth > 0)
            this.createNestedTable(depth);
        else if (depth < 0)
            this.popParentTable(depth);
        else {
            this.finishTable();
            this.createCurrentTable();
        }
    };
    RtfTableController.prototype.popParentTable = function (depth) {
        var count = Math.abs(depth);
        var state = null;
        for (var i = 0; i < count && this.reader.tableStack.count > 0; i++)
            state = this.reader.tableStack.pop();
        if (state == null)
            return;
        this.currentTable = state.table;
        this.reader.restoreProperties(state);
        this.rowController.assignLastRowAsCurrent();
    };
    RtfTableController.prototype.createNestedTable = function (depth) {
        for (var i = 0; i < depth; i++) {
            this.finishTable();
            this.reader.tableStack.push(new rtf_table_state_1.RtfTableState(this.currentTable, this.reader));
            this.createCurrentTable();
        }
    };
    RtfTableController.prototype.createCurrentTable = function () {
        this.currentTable = new rtf_table_1.RtfTable();
        var currentCell = this.rowController.cellController.currentCell;
        this.currentTable.parentCell = currentCell;
        if (currentCell != null) {
            var tables = this.reader.parentCellMap[currentCell.idForParentCellMap];
            if (tables === undefined) {
                tables = [];
                this.reader.parentCellMap[currentCell.idForParentCellMap] = tables;
            }
            tables.push(this.currentTable);
        }
        this.reader.tables.push(this.currentTable);
        this.rowController.startNewRow();
    };
    RtfTableController.prototype.changeCurrentTable = function () {
        this.currentTable = new rtf_table_1.RtfTable();
        this.reader.tables.push(this.currentTable);
    };
    RtfTableController.prototype.finishTable = function () {
        this.rowController.cellController.finishCell();
        this.rowController.finishRowCore();
    };
    RtfTableController.prototype.reset = function () {
        this.currentTable = null;
        this.rowController.reset();
    };
    return RtfTableController;
}());
exports.RtfTableController = RtfTableController;
