"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_grid_1 = require("./table-grid");
var RtfTableColumnsCalculator = (function () {
    function RtfTableColumnsCalculator() {
    }
    RtfTableColumnsCalculator.prototype.calculate = function (table, tableIndent) {
        var _this = this;
        if (!table)
            throw Error("table is Null!");
        var result = new table_grid_1.RtfTableGrid();
        result.collection.push(tableIndent);
        table.rows.forEach(function (row) {
            var rowColumns = _this.getRowColumns(row);
            result = _this.merge(rowColumns.collection, result.collection);
        });
        return result;
    };
    RtfTableColumnsCalculator.prototype.merge = function (source, destination) {
        var result = new table_grid_1.RtfTableGrid();
        var sourceIndex = 0;
        var destinationIndex = 0;
        while (sourceIndex < source.length && destinationIndex < destination.length) {
            if (source[sourceIndex] <= destination[destinationIndex]) {
                result.collection.push(source[sourceIndex]);
                if (source[sourceIndex] == destination[destinationIndex])
                    destinationIndex++;
                sourceIndex++;
            }
            else {
                result.collection.push(destination[destinationIndex]);
                destinationIndex++;
            }
        }
        if (destinationIndex < destination.length) {
            for (; destinationIndex < destination.length; destinationIndex++)
                result.collection.push(destination[destinationIndex]);
        }
        else if (sourceIndex < source.length) {
            for (; sourceIndex < source.length; sourceIndex++)
                result.collection.push(source[sourceIndex]);
        }
        return result;
    };
    RtfTableColumnsCalculator.prototype.getRowColumns = function (row) {
        var result = new table_grid_1.RtfTableGrid();
        var left = row.properties.left;
        result.collection.push(left);
        row.cells.forEach(function (cell) {
            var right = cell.properties.right;
            if (right <= left)
                result.collection.push(left);
            else {
                result.collection.push(right);
                left = right;
            }
        });
        return result;
    };
    return RtfTableColumnsCalculator;
}());
exports.RtfTableColumnsCalculator = RtfTableColumnsCalculator;
