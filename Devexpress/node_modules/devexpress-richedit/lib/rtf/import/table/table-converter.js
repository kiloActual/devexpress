"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_properties_1 = require("../../../core/model/tables/properties/table-properties");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var table_border_calculator_1 = require("../../../core/model/tables/secondary-structures/table-border-calculator");
var table_units_1 = require("../../../core/model/tables/secondary-structures/table-units");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var rtf_table_columns_calculator_1 = require("./rtf-table-columns-calculator");
var RtfTableConverter = (function () {
    function RtfTableConverter(tableReader) {
        this.rtfCellMap = {};
        this.tableReader = tableReader;
        this.rtfCellMap = {};
    }
    Object.defineProperty(RtfTableConverter.prototype, "subDocument", {
        get: function () { return this.tableReader.data.subDocument; },
        enumerable: true,
        configurable: true
    });
    RtfTableConverter.prototype.convertTables = function (rtfTables, _isCopySingleCellAsText) {
        number_1.NumberMapUtils.clear(this.rtfCellMap);
        this.tablesQueue = list_1.ListUtils.shallowCopy(rtfTables);
        var tblIndex = 0;
        while (this.tablesQueue.length > 0) {
            var table = this.tablesQueue[0];
            this.tablesQueue.shift();
            this.convertTable(table, tblIndex);
            tblIndex++;
        }
    };
    RtfTableConverter.prototype.convertTable = function (rtfTable, tblIndex) {
        if (!this.rtfTableIsValid(rtfTable))
            return;
        var parentCell = null;
        if (rtfTable.parentCell != null) {
            parentCell = this.rtfCellMap[rtfTable.parentCell.idForParentCellMap];
        }
        this.prepareRtfTable(rtfTable);
        var table = rtfTable.createTable(tblIndex, parentCell, this.tableReader.data.documentModel);
        this.convertTableCore(table, rtfTable);
        this.subDocument.tables.push(table);
    };
    RtfTableConverter.prototype.rtfTableIsValid = function (rtfTable) {
        if (rtfTable.rows.length == 0)
            return false;
        var lastRow = list_1.ListUtils.last(rtfTable.rows);
        if (lastRow.cells.length > 0)
            return true;
        rtfTable.rows.splice(rtfTable.rows.length - 1, 1);
        return this.rtfTableIsValid(rtfTable);
    };
    RtfTableConverter.prototype.prepareRtfTable = function (table) {
        if (this.shouldUseFloatingPosition(table)) {
        }
        var tablePreferredWidth = table.properties.preferredWidth;
        if (tablePreferredWidth.type == table_units_1.TableWidthUnitType.Nil) {
            tablePreferredWidth.type = table_units_1.TableWidthUnitType.Auto;
            tablePreferredWidth.value = 0;
        }
        if (!table.properties.coreProperties.getUseValue(table_properties_1.TablePropertiesMask.UseRightMargin) &&
            !table.properties.coreProperties.getUseValue(table_properties_1.TablePropertiesMask.UseLeftMargin) && table.properties.useHalfSpace) {
            var margin = table.properties.halfSpace;
            table.properties.coreProperties.cellMargins.left.type = table_units_1.TableWidthUnitType.ModelUnits;
            table.properties.coreProperties.cellMargins.left.value = margin;
            table.properties.coreProperties.cellMargins.right.type = table_units_1.TableWidthUnitType.ModelUnits;
            table.properties.coreProperties.cellMargins.right.value = margin;
        }
        table.indent = this.calculateTableLeftOffset(table);
        var indent = table.properties.coreProperties.indent;
        if (indent.type != table_units_1.TableWidthUnitType.ModelUnits) {
            indent.value = this.calculateTableIndent(table);
            indent.type = table_units_1.TableWidthUnitType.ModelUnits;
        }
    };
    RtfTableConverter.prototype.shouldUseFloatingPosition = function (_table) {
        return false;
    };
    RtfTableConverter.prototype.calculateTableLeftOffset = function (table) {
        var rows = table.rows;
        var result = rows[0].properties.left;
        var rowsCount = rows.length;
        for (var i = 1; i < rowsCount; i++)
            result = Math.min(result, rows[i].properties.left);
        return result;
    };
    RtfTableConverter.prototype.calculateTableIndent = function (table) {
        var cellProperties = table.rows[0].cells[0].properties;
        var leftBorder = cellProperties.coreProperties.borders.leftBorder;
        var leftMargin = this.getCellLeftMargin(table);
        var borderWidth = table_border_calculator_1.TableBorderCalculator.getActualWidth(leftBorder);
        return Math.max(borderWidth / 2, this.getActualWidth(leftMargin)) + table.indent;
    };
    RtfTableConverter.prototype.getCellLeftMargin = function (table) {
        var cellProperties = table.rows[0].cells[0].properties;
        if (cellProperties.coreProperties.cellMargins.left.type == table_units_1.TableWidthUnitType.ModelUnits)
            return cellProperties.coreProperties.cellMargins.left;
        return table.properties.coreProperties.cellMargins.left;
    };
    RtfTableConverter.prototype.getActualWidth = function (unitInfo) {
        if (unitInfo.type == table_units_1.TableWidthUnitType.ModelUnits)
            return unitInfo.value;
        return 0;
    };
    RtfTableConverter.prototype.convertTableCore = function (table, rtfTable) {
        var _this = this;
        var tableGrid = this.calculateTableGrid(rtfTable);
        var rows = table.rows;
        var tableLayoutType = table.properties.layoutType;
        rtfTable.rows.forEach(function (rtfRow) {
            _this.prepareRtfRow(rtfRow, tableGrid, tableLayoutType);
            var row = rtfRow.createTableRow(table);
            rows.push(row);
            _this.convertRow(row, rtfRow);
        });
    };
    RtfTableConverter.prototype.calculateTableGrid = function (table) {
        var calculator = new rtf_table_columns_calculator_1.RtfTableColumnsCalculator();
        return calculator.calculate(table, table.indent);
    };
    RtfTableConverter.prototype.prepareRtfRow = function (row, grid, tableLayoutType) {
        var gridBefore = grid.binarySearchLeft(row.properties.left);
        row.properties.gridBefore = gridBefore;
        if (row.properties.widthBefore.value == 0 && gridBefore > 0) {
            row.properties.widthBefore.value = row.offset;
            row.properties.widthBefore.type = table_units_1.TableWidthUnitType.ModelUnits;
        }
        this.prepareRtfRowCells(row, grid, gridBefore, tableLayoutType);
        var lastColumnIndex = grid.collection.length - 1;
        var gridAfter = lastColumnIndex - this.calculateRowColumnSpan(row);
        row.properties.gridAfter = gridAfter;
        if (row.properties.widthAfter.value == 0 && gridAfter > 0) {
            var widthAfter = 1;
            if (row.properties.widthAfter.type == table_units_1.TableWidthUnitType.ModelUnits) {
                widthAfter = this.calculateWidthAfter(row);
            }
            else
                widthAfter = grid.collection[lastColumnIndex] - grid.collection[lastColumnIndex - gridAfter];
            row.properties.widthAfter.value = widthAfter;
            row.properties.widthAfter.type = table_units_1.TableWidthUnitType.ModelUnits;
        }
    };
    RtfTableConverter.prototype.calculateWidthAfter = function (row) {
        var rowWidth = this.calculateTotalRowWidth(row);
        if (rowWidth < 0)
            return 1;
        var rows = row.table.rows;
        var maxWidth = 0;
        for (var i = 0; i < rows.length; i++) {
            var currentRow = rows[i];
            if (currentRow === row)
                continue;
            var currentRowWidth = this.calculateTotalRowWidth(currentRow);
            if (currentRowWidth > 0)
                maxWidth = Math.max(maxWidth, currentRowWidth);
        }
        return Math.max(1, rowWidth - maxWidth);
    };
    RtfTableConverter.prototype.calculateTotalRowWidth = function (row) {
        var totalWidth = 0;
        var cells = row.cells;
        var count = cells.length;
        for (var i = 0; i < count; i++) {
            var width = cells[i].properties.preferredWidth;
            if (width.type == table_units_1.TableWidthUnitType.ModelUnits)
                totalWidth += width.value;
            else
                return -1;
        }
        return totalWidth;
    };
    RtfTableConverter.prototype.prepareRtfRowCells = function (row, grid, gridBefore, tableLayoutType) {
        var prevBorderIndex = gridBefore;
        var left = grid.collection[gridBefore];
        for (var i = 0; i < row.cells.length; i++) {
            var cell = row.cells[i];
            var right = cell.properties.right > left ? cell.properties.right : left;
            var borderIndex = grid.binarySearchRight(right) - this.calculateEquidistantCellOrder(row.cells, i, right);
            var columnSpan = borderIndex - prevBorderIndex;
            cell.columnSpan = Math.max(1, columnSpan);
            var preferredWidth = cell.properties.preferredWidth;
            if (preferredWidth.type == table_units_1.TableWidthUnitType.Nil ||
                (preferredWidth.type == table_units_1.TableWidthUnitType.Auto && tableLayoutType != table_base_structures_1.TableLayoutType.Autofit)) {
                preferredWidth.value = grid.collection[borderIndex] - grid.collection[prevBorderIndex];
                preferredWidth.type = table_units_1.TableWidthUnitType.ModelUnits;
            }
            prevBorderIndex = Math.max(borderIndex, prevBorderIndex);
            left = right;
        }
    };
    RtfTableConverter.prototype.calculateEquidistantCellOrder = function (cells, index, left) {
        var count = cells.length;
        var equidistantCellsCount = 0;
        for (var i = index + 1; i < count; i++) {
            if (cells[i].properties.right > left)
                break;
            equidistantCellsCount++;
        }
        return equidistantCellsCount;
    };
    RtfTableConverter.prototype.calculateRowColumnSpan = function (row) {
        var result = row.properties.gridBefore;
        var cellsCount = row.cells.length;
        for (var i = 0; i < cellsCount; i++)
            result += row.cells[i].columnSpan;
        return result;
    };
    RtfTableConverter.prototype.convertRow = function (row, rtfRow) {
        var rtfCells = rtfRow.cells;
        for (var i = 0; i < rtfCells.length; i++)
            this.convertCell(row, rtfCells[i]);
    };
    RtfTableConverter.prototype.convertCell = function (row, rtfCell) {
        if (rtfCell.properties.horizontalMerging == table_base_structures_1.TableCellMergingState.Restart)
            this.mergeCells(rtfCell);
        var cell = rtfCell.createCell(row, this.subDocument);
        row.cells.push(cell);
        this.rtfCellMap[rtfCell.idForParentCellMap] = cell;
    };
    RtfTableConverter.prototype.mergeCells = function (firstCell) {
        var nextIndex = firstCell.index + 1;
        var cells = firstCell.row.cells;
        while (nextIndex < cells.length && cells[nextIndex].properties.horizontalMerging == table_base_structures_1.TableCellMergingState.Continue) {
            var nextRtfCell = cells[nextIndex];
            var parentCellMap = this.tableReader.parentCellMap;
            var tables = parentCellMap[nextRtfCell.idForParentCellMap];
            if (tables !== undefined) {
                for (var _i = 0, tables_1 = tables; _i < tables_1.length; _i++) {
                    var table = tables_1[_i];
                    list_1.ListUtils.remove(this.tablesQueue, table);
                }
                delete parentCellMap[nextRtfCell.idForParentCellMap];
            }
            firstCell.columnSpan += nextRtfCell.columnSpan;
            this.removeCell(cells, nextRtfCell);
        }
    };
    RtfTableConverter.prototype.removeCell = function (cells, cell) {
        list_1.ListUtils.remove(cells, cell);
        var count = cells.length;
        for (var i = cell.index; i < count; i++)
            cells[i].index--;
        this.recalcParagraphIndexes(cell);
    };
    RtfTableConverter.prototype.recalcParagraphIndexes = function (_removedCell) {
    };
    RtfTableConverter.prototype.recalcParagraphIndexesInRow = function (_row, _cellIndex, _delta) {
    };
    RtfTableConverter.prototype.recalcParagraphIndexesInTable = function (_table, _rowIndex, _delta, _paragraphIndex) {
    };
    RtfTableConverter.prototype.recalcParagraphIndexesInTables = function (delta, paragraphIndex) {
        var count = this.tablesQueue.length;
        for (var i = 0; i < count; i++)
            this.recalcParagraphIndexesInTable(this.tablesQueue[i], 0, delta, paragraphIndex);
    };
    return RtfTableConverter;
}());
exports.RtfTableConverter = RtfTableConverter;
