"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_import_data_1 = require("../../rtf-import-data");
var state_base_1 = require("./state-base");
var TableRtfTableManagerState = (function (_super) {
    tslib_1.__extends(TableRtfTableManagerState, _super);
    function TableRtfTableManagerState(reader) {
        var _this = _super.call(this, reader) || this;
        reader.tableController.createCurrentTable();
        return _this;
    }
    TableRtfTableManagerState.prototype.onEndParagraph = function (paragraphFormattingInfo) {
        if (this.isParagraphInTable(paragraphFormattingInfo) || this.isCurrentTableNotComplete())
            this.onEndInTableParagraph(paragraphFormattingInfo.nestingLevel);
        else {
            this.validateCurrentTable();
            this.reader.resetState();
        }
    };
    TableRtfTableManagerState.prototype.validateCurrentTable = function () {
        var currentTable = this.tableController.currentTable;
        if (currentTable.rows.length == 0) {
            var ind = this.reader.tables.findIndex(function (t) { return t == currentTable; });
            if (ind >= 0)
                this.reader.tables.splice(ind, 1);
            return;
        }
        var lastRow = list_1.ListUtils.last(currentTable.rows);
        if (lastRow.cells.length > 0)
            return;
        currentTable.rows.splice(currentTable.rows.length - 1);
        this.validateCurrentTable();
    };
    TableRtfTableManagerState.prototype.onEndInTableParagraph = function (nestingLevel) {
        var tableController = this.reader.tableController;
        if (tableController.currentTable.nestingLevel != nestingLevel)
            tableController.changeTable(nestingLevel);
        var pos = this.data.importers.character.logPosition;
        tableController.rowController.cellController.setCharacterPosition(pos);
        if (this.reader.rtfTableStyleIndexForRowOrCell != 0)
            this.data.importers.style.paragraph.paragraphTableStyles[pos] = this.reader.rtfTableStyleIndexForRowOrCell;
    };
    TableRtfTableManagerState.prototype.isParagraphInTable = function (paragraphFormattingInfo) {
        return paragraphFormattingInfo.inTableParagraph || paragraphFormattingInfo.nestingLevel > 0;
    };
    TableRtfTableManagerState.prototype.isCurrentTableNotComplete = function () {
        return this.reader.tableController.rowController.isCurrentRowNotComplete() ||
            (this.reader.tableController.rowController.isCurrentRowValid() &&
                this.reader.tableController.rowController.currentRow.cells.length < this.reader.cellPropertiesCollection.length);
    };
    TableRtfTableManagerState.prototype.onEndRow = function () {
        if (this.tableController.currentTable.nestingLevel > 1)
            rtf_import_data_1.RtfImportData.throwInvalidRtfFile();
        this.onEndRowCore();
    };
    TableRtfTableManagerState.prototype.onEndRowCore = function () {
        var rowController = this.reader.tableController.rowController;
        rowController.finishRow();
        rowController.startNewRow();
    };
    TableRtfTableManagerState.prototype.onEndCell = function () {
        this.onEndCellCore(1);
    };
    TableRtfTableManagerState.prototype.onEndCellCore = function (nestingLevel) {
        var cellController = this.reader.tableController.rowController.cellController;
        this.onEndInTableParagraph(nestingLevel);
        cellController.finishCell();
        cellController.startNewCell();
    };
    TableRtfTableManagerState.prototype.onEndNestedRow = function () {
        if (this.tableController.currentTable.nestingLevel == 1)
            rtf_import_data_1.RtfImportData.throwInvalidRtfFile();
        this.onEndRowCore();
    };
    TableRtfTableManagerState.prototype.onEndNestedCell = function () {
        this.onEndCellCore(this.data.importers.paragraph.paragraphFormatting.nestingLevel);
    };
    TableRtfTableManagerState.prototype.onStartNestedTableProperties = function () {
    };
    TableRtfTableManagerState.prototype.onTableRowDefaults = function () {
        var currentTable = this.reader.tableController.currentTable;
        if (!this.reader.isNestedTableProperetiesReading && currentTable != null && currentTable.nestingLevel > 1)
            this.tableController.changeTable(1);
    };
    return TableRtfTableManagerState;
}(state_base_1.RtfTableReaderStateBase));
exports.TableRtfTableManagerState = TableRtfTableManagerState;
