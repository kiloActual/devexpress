"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_table_cell_1 = require("../model/table/rtf-table-cell");
var RtfTableCellController = (function () {
    function RtfTableCellController(rowController) {
        this.rowController = rowController;
    }
    RtfTableCellController.prototype.startNewCell = function () {
        var row = this.rowController.currentRow;
        this.currentCell = new rtf_table_cell_1.RtfTableCell(row);
    };
    RtfTableCellController.prototype.isCurrentCellNotComplete = function () {
        var _this = this;
        return !list_1.ListUtils.elementBy(this.rowController.currentRow.cells, function (v) { return v == _this.currentCell; }) && !this.currentCell.isEmpty;
    };
    RtfTableCellController.prototype.assignLastCellAsCurrent = function () {
        this.currentCell = list_1.ListUtils.last(this.rowController.currentRow.cells);
    };
    RtfTableCellController.prototype.finishCell = function () {
        var cells = this.rowController.currentRow.cells;
        if (cells.length == 0 || list_1.ListUtils.last(cells) != this.currentCell) {
            this.currentCell.index = cells.length;
            cells.push(this.currentCell);
        }
    };
    RtfTableCellController.prototype.setCharacterPosition = function (charactePosition) {
        this.setPositionCore(this.currentCell, charactePosition);
        this.setParagraphIndexesToParentCell(charactePosition);
    };
    RtfTableCellController.prototype.setParagraphIndexesToParentCell = function (paragraphIndex) {
        var parentCell = this.rowController.tableController.currentTable.parentCell;
        while (parentCell != null) {
            this.setPositionCore(parentCell, paragraphIndex);
            parentCell = parentCell.row.table.parentCell;
        }
    };
    RtfTableCellController.prototype.setPositionCore = function (cell, position) {
        if (cell.startPos < 0)
            cell.startPos = position;
        cell.endPos = position;
    };
    RtfTableCellController.prototype.reset = function () {
        this.currentCell = null;
    };
    return RtfTableCellController;
}());
exports.RtfTableCellController = RtfTableCellController;
