"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var images_import_1 = require("../../core/formats/utils/images-import");
var run_type_1 = require("../../core/model/runs/run-type");
var stack_1 = require("@devexpress/utils/lib/class/stack");
var constants_1 = require("@devexpress/utils/lib/constants");
var errors_1 = require("@devexpress/utils/lib/errors");
var string_1 = require("@devexpress/utils/lib/utils/string");
var skip_destination_1 = require("./destination/base/skip-destination");
var field_destination_1 = require("./destination/fields/field-destination");
var table_content_field_destination_1 = require("./destination/fields/table-content-field-destination");
var shape_destination_1 = require("./destination/shape/shape-destination");
var default_destination_1 = require("./destination/sub-document/default-destination");
var decoder_helper_1 = require("./dx-decoding/decoder-helper");
var importers_collection_1 = require("./importers/importers-collection");
var keyword_table_holder_1 = require("./keyword-tables/keyword-table-holder");
var enums_1 = require("./model/enums");
var rtf_document_properties_1 = require("./model/rtf-document-properties");
var rtf_section_properties_1 = require("./model/section/rtf-section-properties");
var table_reader_1 = require("./table/table-reader");
var RtfPositionState = (function () {
    function RtfPositionState(subDocument, paragraph, fields, bookmarks, rangePermissions, sectionProperties, tableReader) {
        this.subDocument = subDocument;
        this.paragraph = paragraph;
        this.fields = fields;
        this.bookmarks = bookmarks;
        this.rangePermissions = rangePermissions;
        this.sectionProperties = sectionProperties;
        this.tableReader = tableReader;
    }
    return RtfPositionState;
}());
exports.RtfPositionState = RtfPositionState;
var RtfImportData = (function () {
    function RtfImportData(rtfText, options, documentModel, controlOptions) {
        this.documentModel = documentModel;
        this.formatImagesImporter = new images_import_1.FormatImagesImporter();
        this.subDocument = this.documentModel.mainSubDocument;
        this.rtfText = rtfText;
        this.importerOptions = options;
        this.controlOptions = controlOptions;
        this.savedDestinations = new stack_1.Stack();
        this.documentProperties = new rtf_document_properties_1.RtfDocumentProperties();
        this.keywordHTHolder = new keyword_table_holder_1.KeywordTableHolder();
        this.skipCount = 0;
        this.binCharCount = 0;
        this.parsingState = enums_1.RtfParsingState.Normal;
        this.rtfDocumentModelType = RtfDocumentModelType.WithStyle;
        this.importers = new importers_collection_1.ImportersCollection(this);
        this._destination = this.createDefaultDestination();
        this.savedDestinations.push(this._destination);
        this.positionStates = new stack_1.Stack();
        this.addEmptyPositionState();
    }
    Object.defineProperty(RtfImportData.prototype, "destination", {
        get: function () { return this._destination; },
        set: function (newDestination) {
            if (newDestination.subDocument !== this.destination.subDocument) {
                this.beforeChangeSubDocument(newDestination.subDocument);
                this.subDocument = newDestination.subDocument;
                this.onChangeSubDocument();
            }
            this._destination = newDestination;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RtfImportData.prototype, "savedStatesCount", {
        get: function () { return this.savedDestinations.count; },
        enumerable: true,
        configurable: true
    });
    RtfImportData.prototype.beforeChangeSubDocument = function (newSubDocument) {
        if (this.positionStates.count == 1)
            return;
        var endNestedSubDocument = this.positionStates.getPrevious().subDocument == newSubDocument;
        if (endNestedSubDocument)
            this.importers.finalizeSubDocument();
    };
    RtfImportData.prototype.onChangeSubDocument = function () {
        this.importers.startImportSubDocument();
        var previousState = this.positionStates.getPrevious();
        var endNestedSubDocument = this.positionStates.count > 1 && previousState.subDocument == this.subDocument;
        if (endNestedSubDocument)
            this.positionStates.pop();
        else
            this.addEmptyPositionState();
    };
    RtfImportData.prototype.addEmptyPositionState = function () {
        new stack_1.Stack().push(new rtf_section_properties_1.RtfSectionProperties());
        return this.positionStates.push(new RtfPositionState(this.subDocument, this.importers.paragraph.createEmptyParagraph(), new stack_1.Stack(), {}, {}, new stack_1.Stack(), new table_reader_1.RtfTableReader(this)));
    };
    RtfImportData.prototype.import = function () {
        this.beforeImport();
        while (this.rtfText.moveToNextChar()) {
            var ch = this.rtfText.currChar;
            if (this.parsingState == enums_1.RtfParsingState.BinData) {
                this.parseBinChar(ch);
                continue;
            }
            switch (ch) {
                case '{':
                    this.flushDecoder();
                    this.pushState();
                    break;
                case '}':
                    this.flushDecoder();
                    this.popRtfState();
                    break;
                case '\\':
                    if (this.parseRtfKeyword() != ' ')
                        this.rtfText.moveToPrevChar();
                    break;
                case '\r':
                case '\n':
                case '\0':
                    break;
                default:
                    if (this.parsingState == enums_1.RtfParsingState.Normal)
                        this.parseChar(ch);
                    else
                        this.parseHexChar(ch);
            }
        }
        if (this.binCharCount != 0)
            this.throwUnexpectedEndOfFile();
        if (this.importers.field.fields.count != 0)
            this.throwInvalidRtfFile();
        if (!(this.destination instanceof default_destination_1.DefaultDestination))
            throw new Error(errors_1.Errors.InternalException);
        if (this.subDocument.getLastRun().getType() != run_type_1.RunType.ParagraphRun)
            this.importers.paragraph.insertParagraph();
        this.importers.section.setLastSectionLength();
        this.importers.finalizeSubDocument();
    };
    RtfImportData.prototype.parseRtfKeyword = function () {
        var ch = this.readChar();
        if (!string_1.StringUtils.isAlpha(ch)) {
            this.translateControlChar(ch);
            return ' ';
        }
        this.flushDecoder();
        var keyword = [];
        while (string_1.StringUtils.isAlpha(ch)) {
            keyword.push(ch);
            ch = this.readChar();
        }
        var paramValueAsString = [];
        var isNegative = ch == '-';
        if (isNegative) {
            paramValueAsString.push(ch);
            ch = this.readChar();
        }
        if (isNegative && !string_1.StringUtils.isDigit(ch)) {
            paramValueAsString = [];
        }
        else {
            while (string_1.StringUtils.isDigit(ch)) {
                paramValueAsString.push(ch);
                ch = this.readChar();
            }
        }
        var paramValue = parseInt(paramValueAsString.join(''));
        this.translateKeyword(keyword.join(''), isNaN(paramValue) ? 0 : paramValue, paramValueAsString.length != 0);
        return ch;
    };
    RtfImportData.prototype.flushDecoder = function () {
        this.importers.character.characterFormatting.rtfFormattingInfo.decoder.flush(this);
    };
    RtfImportData.prototype.throwUnexpectedEndOfFile = function () {
        this.importerOptions.throwInvalidFile("Unexpected end of file");
    };
    RtfImportData.prototype.throwInvalidRtfFile = function () {
        this.importerOptions.throwInvalidFile("Invalid RTF file");
    };
    RtfImportData.throwInvalidRtfFile = function () {
        throw new Error("Invalid RTF file");
    };
    RtfImportData.prototype.beforeImport = function () {
        this.documentModel.defaultCharacterProperties.fontInfo = this.documentModel.cache.fontInfoCache.getItemByName("Times New Roman");
        this.documentModel.defaultCharacterProperties.fontSize = 12;
        this.documentModel.numberingLists = [];
    };
    RtfImportData.prototype.translateControlChar = function (ch) {
        if (this.skipCount == 0 || ch == '\'')
            this.destination.processControlChar(ch);
        else
            this.decreaseSkipCount();
    };
    RtfImportData.prototype.translateKeyword = function (keyword, parameterValue, hasParameter) {
        if (this.skipCount == 0 || keyword == "bin") {
            var keywordProcessed = this.destination.processKeyword(keyword, parameterValue, hasParameter);
            if (keywordProcessed) {
                if (!(this.destination instanceof skip_destination_1.SkipDestination))
                    this.optionalGroupLevel = constants_1.Constants.MAX_SAFE_INTEGER;
            }
            else {
                if (this.optionalGroupLevel < constants_1.Constants.MAX_SAFE_INTEGER)
                    this.destination = new skip_destination_1.SkipDestination(this);
            }
        }
        else
            this.decreaseSkipCount();
    };
    RtfImportData.prototype.parseBinChar = function (ch) {
        this.destination.processBinChar(ch);
        this.binCharCount--;
        if (this.binCharCount <= 0) {
            this.parsingState = enums_1.RtfParsingState.Normal;
            this.decreaseSkipCount();
        }
    };
    RtfImportData.prototype.decreaseSkipCount = function () {
        this.skipCount = Math.max(0, this.skipCount - 1);
    };
    RtfImportData.prototype.popRtfState = function () {
        var oldDestination = this.destination;
        if (this.savedStatesCount == this.optionalGroupLevel)
            this.optionalGroupLevel = constants_1.Constants.MAX_SAFE_INTEGER;
        this.popState();
        if (this.savedStatesCount >= this.optionalGroupLevel)
            this.destination = new skip_destination_1.SkipDestination(this);
        oldDestination.afterPopRtfState();
        this.skipCount = 0;
        if (this.savedStatesCount == 0)
            this.rtfText.resetToEnd();
    };
    RtfImportData.prototype.parseHexChar = function (ch) {
        this.parsingState = enums_1.RtfParsingState.Normal;
        var hiValue = this.hexToInt(ch, false);
        var loValue = this.hexToInt(this.readChar(), false);
        if (hiValue < 0 || loValue < 0)
            return;
        var hexValue = (hiValue << 4) + loValue;
        this.parseChar(decoder_helper_1.DecoderHelper.decode(String.fromCharCode(hexValue), this.codePage));
    };
    RtfImportData.prototype.parseChar = function (ch) {
        if (this.skipCount == 0) {
            if (ch == '\r' && this.destination.canProcessSpecialHexChar()) {
                this.flushDecoder();
                this.destination.processSpecialHexChar(ch);
            }
            else {
                this.importers.character.characterFormatting.rtfFormattingInfo.decoder.processChar(this, ch);
            }
        }
        else
            this.decreaseSkipCount();
    };
    RtfImportData.prototype.readChar = function () {
        if (!this.rtfText.moveToNextChar())
            this.throwUnexpectedEndOfFile();
        return this.rtfText.currChar;
    };
    RtfImportData.prototype.hexToInt = function (ch, throwException) {
        if (string_1.StringUtils.isDigit(ch))
            return ch.charCodeAt(0) - '0'.charCodeAt(0);
        else {
            if (string_1.StringUtils.stringInLowerCase(ch)) {
                if (ch < 'a' || ch > 'f') {
                    if (throwException)
                        this.importerOptions.throwInvalidFile("Invalid hex value");
                    else
                        return -1;
                }
                return 10 + ch.charCodeAt(0) - 'a'.charCodeAt(0);
            }
            else {
                if (ch < 'A' || ch > 'F') {
                    if (throwException)
                        this.importerOptions.throwInvalidFile("Invalid hex value");
                    else
                        return -1;
                }
                return 10 + ch.charCodeAt(0) - 'A'.charCodeAt(0);
            }
        }
    };
    RtfImportData.prototype.parseUnicodeChar = function (ch) {
        this.flushDecoder();
        this.processChar(ch);
        this.skipCount = this.importers.character.characterFormatting.rtfFormattingInfo.unicodeCharacterByteCount;
    };
    RtfImportData.prototype.processChar = function (ch) {
        this.destination.processChar(ch);
    };
    RtfImportData.prototype.setCodePage = function (codePage) {
        this.importers.character.characterFormatting.rtfFormattingInfo.codePage = codePage;
    };
    Object.defineProperty(RtfImportData.prototype, "codePage", {
        get: function () {
            return this.importers.character.characterFormatting.rtfFormattingInfo.codePage;
        },
        enumerable: true,
        configurable: true
    });
    RtfImportData.prototype.parseCharWithoutDecoding = function (ch) {
        this.flushDecoder();
        if (this.skipCount == 0)
            this.processChar(ch);
        this.decreaseSkipCount();
    };
    RtfImportData.prototype.createTableContentFieldDestination = function (createField) { return new table_content_field_destination_1.TableContentFieldDestination(this, createField); };
    RtfImportData.prototype.createShapeDestination = function () { return new shape_destination_1.ShapeDestination(this); };
    RtfImportData.prototype.createFieldDestination = function () { return new field_destination_1.FieldDestination(this); };
    RtfImportData.prototype.createDefaultDestination = function () { return new default_destination_1.DefaultDestination(this, this.subDocument); };
    RtfImportData.prototype.pushState = function () {
        this.importers.pushState();
        this.savedDestinations.push(this.destination);
        this.destination = this.destination.clone();
        this.destination.increaseGroupLevel();
    };
    RtfImportData.prototype.popState = function () {
        var nestedDestination = this.destination;
        var parentDestination = this.savedDestinations.peek();
        parentDestination.beforeNestedGroupFinished(nestedDestination);
        nestedDestination.beforePopRtfState();
        this.importers.popState();
        this.destination = parentDestination;
        this.destination.nestedGroupFinished(nestedDestination);
        this.savedDestinations.pop();
        this.subDocument = parentDestination.subDocument;
        this.destination.afterNestedGroupFinished(nestedDestination);
    };
    return RtfImportData;
}());
exports.RtfImportData = RtfImportData;
var RtfDocumentModelType;
(function (RtfDocumentModelType) {
    RtfDocumentModelType[RtfDocumentModelType["None"] = 0] = "None";
    RtfDocumentModelType[RtfDocumentModelType["WithoutStyle"] = 1] = "WithoutStyle";
    RtfDocumentModelType[RtfDocumentModelType["WithStyle"] = 2] = "WithStyle";
})(RtfDocumentModelType = exports.RtfDocumentModelType || (exports.RtfDocumentModelType = {}));
