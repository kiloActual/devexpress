"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var destination_1 = require("../base/destination");
var string_property_base_destination_1 = require("../base/string-property-base-destination");
var destination_type_1 = require("../utils/destination-type");
var MailMergeFieldType;
(function (MailMergeFieldType) {
    MailMergeFieldType[MailMergeFieldType["Null"] = 0] = "Null";
    MailMergeFieldType[MailMergeFieldType["DbColumn"] = 1] = "DbColumn";
})(MailMergeFieldType = exports.MailMergeFieldType || (exports.MailMergeFieldType = {}));
var FieldMapData = (function () {
    function FieldMapData() {
    }
    return FieldMapData;
}());
exports.FieldMapData = FieldMapData;
var FieldMapDataDestination = (function (_super) {
    tslib_1.__extends(FieldMapDataDestination, _super);
    function FieldMapDataDestination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldsMapData = [];
        return _this;
    }
    Object.defineProperty(FieldMapDataDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.FieldMapDataDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldMapDataDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    FieldMapDataDestination.getFieldMapDataForEdit = function (importer) {
        var fieldsMapData = importer.destination.fieldsMapData;
        if (fieldsMapData.length == 0)
            fieldsMapData.push(new FieldMapData());
        return fieldsMapData[fieldsMapData.length - 1];
    };
    FieldMapDataDestination.onNullFieldTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        fieldMapData.fieldType = MailMergeFieldType.Null;
    };
    FieldMapDataDestination.onColumnFieldTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        fieldMapData.fieldType = MailMergeFieldType.DbColumn;
    };
    FieldMapDataDestination.onAddressFieldTypeKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldMapDataDestination.onSalutationFieldTypeKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldMapDataDestination.onMappedFieldTypeKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldMapDataDestination.onBarcodeFieldTypeKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldMapDataDestination.onColumnNameKeyword = function (importer, _parameterValue, _hasParameter) {
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        importer.destination = new string_property_base_destination_1.StringPropertyBaseDestination(importer, function (value) {
            fieldMapData.columnName = value;
        });
    };
    FieldMapDataDestination.onMappedNameKeyword = function (importer, _parameterValue, _hasParameter) {
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        importer.destination = new string_property_base_destination_1.StringPropertyBaseDestination(importer, function (value) {
            fieldMapData.mappedName = value;
        });
    };
    FieldMapDataDestination.onColumnIndexKeyword = function (importer, parameterValue, hasParameter) {
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        fieldMapData.columnIndex = hasParameter ? parameterValue : -1;
    };
    FieldMapDataDestination.onDynamicAddressKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 1;
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        if (parameterValue == 0)
            fieldMapData.dynamicAddress = false;
        else
            fieldMapData.dynamicAddress = true;
    };
    FieldMapDataDestination.onLanguageIdKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue < 0)
            parameterValue = 0;
        var fieldMapData = FieldMapDataDestination.getFieldMapDataForEdit(importer);
        fieldMapData.mergeFieldNameLanguageId = parameterValue;
    };
    FieldMapDataDestination.prototype.createClone = function () {
        return new FieldMapDataDestination(this.importer);
    };
    return FieldMapDataDestination;
}(destination_1.DestinationBase));
exports.FieldMapDataDestination = FieldMapDataDestination;
