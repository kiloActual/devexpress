"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var destination_type_1 = require("../utils/destination-type");
var code_field_destination_1 = require("./code-field-destination");
var field_sub_destination_1 = require("./field-sub-destination");
var result_field_destination_1 = require("./result-field-destination");
var FieldDestination = (function (_super) {
    tslib_1.__extends(FieldDestination, _super);
    function FieldDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.FieldDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    FieldDestination.onFieldInstructionStartKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        if (destination.nestedGroupLevel <= 1)
            importer.throwInvalidRtfFile();
        importer.destination = new code_field_destination_1.CodeFieldDestination(importer);
    };
    FieldDestination.onFieldResultStartKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        if (destination.nestedGroupLevel <= 1)
            importer.throwInvalidRtfFile();
        importer.destination = FieldDestination.createFieldResultDestination(importer);
    };
    FieldDestination.createFieldResultDestination = function (importer) {
        return new result_field_destination_1.ResultFieldDestination(importer);
    };
    FieldDestination.onFieldLockKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.field.fields.last.locked = true;
    };
    FieldDestination.onFieldCodeViewKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!importer.importers.field.updateFieldsOnPaste)
            importer.importers.field.fields.last.isCodeView = true;
    };
    FieldDestination.onFieldEditKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldDestination.onFieldDirtyKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldDestination.onFieldPrivateKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    FieldDestination.prototype.startNewField = function () {
    };
    FieldDestination.prototype.onDestinationClose = function () {
        this.importer.importers.field.endField();
    };
    FieldDestination.prototype.createInstance = function () {
        return new FieldDestination(this.importer);
    };
    return FieldDestination;
}(field_sub_destination_1.FieldSubDestination));
exports.FieldDestination = FieldDestination;
