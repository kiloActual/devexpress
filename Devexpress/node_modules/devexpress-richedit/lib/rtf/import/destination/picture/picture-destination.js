"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var rtf_drawing_keywords_1 = require("../../../translation-table/rtf-drawing-keywords");
var hexadecimal_converter_1 = require("../../../../base-utils/hexadecimal-converter");
var rtf_math_utils_1 = require("../../../utils/rtf-math-utils");
var empty_character_decoder_1 = require("../../encoding/empty-character-decoder");
var picture_destination_info_1 = require("../../model/image/picture-destination-info");
var rtf_image_info_1 = require("../../model/image/rtf-image-info");
var hex_content_destination_1 = require("../base/hex-content-destination");
var shape_property_destination_1 = require("../shape/shape-property-destination");
var destination_type_1 = require("../utils/destination-type");
var enums_1 = require("../utils/enums");
var picture_units_converter_1 = require("./picture-units-converter");
var skip_destination_1 = require("../base/skip-destination");
var PictureDestination = (function (_super) {
    tslib_1.__extends(PictureDestination, _super);
    function PictureDestination(importer) {
        var _this = _super.call(this, importer) || this;
        _this.info = new picture_destination_info_1.PictureDestinationInfo();
        _this.oldDecoder = _this.importer.importers.character.characterFormatting.rtfFormattingInfo.decoder;
        _this.importer.importers.character.characterFormatting.rtfFormattingInfo.setDecoder(new empty_character_decoder_1.EmptyCharacterDecoder());
        return _this;
    }
    Object.defineProperty(PictureDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.PictureDestination; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PictureDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ;
    PictureDestination.getThis = function (rtfImporter) {
        return rtfImporter.destination;
    };
    PictureDestination.onEmfFileKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.Emf;
    };
    PictureDestination.onPngFileKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.Png;
    };
    PictureDestination.onJpegFileKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.Jpeg;
    };
    PictureDestination.onMacFileKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.Mac;
    };
    PictureDestination.onWindowsMetafileKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.Wmf;
        if (hasParameter)
            destination.info.wmfMapMode = parameterValue;
    };
    PictureDestination.onDeviceIndependentBitmapFileKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter && parameterValue != 0)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.WindowsDib;
    };
    PictureDestination.onDeviceDependentBitmapFileKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter && parameterValue != 0)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.pictureSourceType = enums_1.PictureSourceType.WindowsBmp;
    };
    PictureDestination.onBitmapBitsPerPixelKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 1;
        var isParameterValueCorrect = parameterValue == 1 ||
            parameterValue == 4 || parameterValue == 8 || parameterValue == 16 || parameterValue == 24 || parameterValue == 32;
        if (!isParameterValueCorrect)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.bmpBitsPerPixel = parameterValue;
    };
    PictureDestination.onBitmapPlanesKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        if (parameterValue != 1)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.bmpColorPlanes = parameterValue;
    };
    PictureDestination.onBitmapBytesInLineKeyword = function (importer, parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.bmpBytesInLine = parameterValue;
    };
    PictureDestination.onPictureWidthKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        var correctedValue = parameterValue;
        if (parameterValue < 0 && rtf_math_utils_1.RtfMathUtils.isShortValue(parameterValue))
            correctedValue = PictureDestination.fillBytesToConvertFromShortIntToLongInt(rtf_math_utils_1.RtfMathUtils.getShortValue(parameterValue));
        destination.info.pictureWidth = correctedValue;
    };
    PictureDestination.onPictureHeightKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        var correctedValue = parameterValue;
        if (PictureDestination.checkIfParameterStoredAsShortIntegerInsteadLongInt(parameterValue))
            correctedValue = PictureDestination.fillBytesToConvertFromShortIntToLongInt(rtf_math_utils_1.RtfMathUtils.getShortValue(parameterValue));
        destination.info.pictureHeight = correctedValue;
    };
    PictureDestination.checkIfParameterStoredAsShortIntegerInsteadLongInt = function (parameterValue) {
        return parameterValue < 0 && rtf_math_utils_1.RtfMathUtils.isShortValue(parameterValue);
    };
    PictureDestination.fillBytesToConvertFromShortIntToLongInt = function (parameterValue) {
        return rtf_math_utils_1.RtfMathUtils.getUInt16(parameterValue);
    };
    PictureDestination.onPictureGoalWidthKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.desiredPictureWidth = parameterValue;
    };
    PictureDestination.onPictureGoalHeightKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.desiredPictureHeight = parameterValue;
    };
    PictureDestination.onHorizontalScalingKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.scaleX = parameterValue;
    };
    PictureDestination.onVerticalScalingKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.scaleY = parameterValue;
    };
    PictureDestination.onPicScaledKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    PictureDestination.onTopCropKeyword = function (importer, parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.topCrop = parameterValue;
    };
    PictureDestination.onBottomCropKeyword = function (importer, parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.bottomCrop = parameterValue;
    };
    PictureDestination.onLeftCropKeyword = function (importer, parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.leftCrop = parameterValue;
    };
    PictureDestination.onRightCropKeyword = function (importer, parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.info.rightCrop = parameterValue;
    };
    PictureDestination.onBitmapMetafileKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    PictureDestination.onBitsPerPixelBitmapMetafileKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    PictureDestination.onDxImageUri = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    PictureDestination.onShapePropertiesKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new shape_property_destination_1.ShapePropertyDestination(importer, importer.destination.info.properties);
    };
    PictureDestination.onBlipTag = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            importer.throwInvalidRtfFile();
        var destination = importer.destination;
        destination.info.blipTag = parameterValue;
    };
    PictureDestination.onShapePropertyKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new shape_property_destination_1.ShapePropertyDestination(importer, PictureDestination.getThis(importer).info.properties);
    };
    PictureDestination.prototype.createClone = function () {
        var clone = new PictureDestination(this.importer);
        clone.info = this.info;
        return clone;
    };
    PictureDestination.prototype.beforePopRtfState = function () {
        this.importer.importers.character.characterFormatting.rtfFormattingInfo.setDecoder(this.oldDecoder);
        _super.prototype.beforePopRtfState.call(this);
    };
    PictureDestination.prototype.processBinCharCore = function (ch) {
        this.info.dataStream.push(ch);
    };
    PictureDestination.prototype.validateImageSize = function (_image) {
        if (this.info.pictureWidth < 0)
            this.info.pictureWidth = 0;
        if (this.info.pictureHeight < 0)
            this.info.pictureHeight = 0;
    };
    PictureDestination.prototype.loadMetafile = function (_info) {
    };
    PictureDestination.prototype.loadBitmap = function (_info) {
    };
    PictureDestination.prototype.loadDib = function (_info) {
    };
    PictureDestination.prototype.loadImageInUnits = function (imageInfo, _unitsConverter) {
        this.importer.importers.image.scale = new size_1.Size(this.info.scaleX, this.info.scaleY);
        this.importer.importers.image.desireSize = new size_1.Size(this.info.desiredPictureWidth, this.info.desiredPictureHeight);
        this.applyVisibleSize(imageInfo);
    };
    PictureDestination.prototype.applyVisibleSize = function (imageInfo) {
        if (this.info.scaleX <= 0)
            this.info.scaleX = 100;
        if (this.info.scaleY <= 0)
            this.info.scaleY = 100;
        var unscaledVisibleWidth = Math.max(1, this.info.desiredPictureWidth - this.info.leftCrop - this.info.rightCrop);
        var unscaledVisibleHeight = Math.max(1, this.info.desiredPictureHeight - this.info.topCrop - this.info.bottomCrop);
        imageInfo.actualSize = new size_1.Size((unscaledVisibleWidth * this.info.scaleX + 50) / 100, (unscaledVisibleHeight * this.info.scaleY + 50) / 100);
    };
    PictureDestination.prototype.loadMetafileImageInUnits = function (_imageInfo) {
    };
    PictureDestination.prototype.applySourceRect = function (_imageInfo, _desiredPictureWidth, _desiredPictureHeight) {
    };
    PictureDestination.prototype.getFractionInThousandthOfPercent = function (_cropSize, _desiredSize) {
        return 0;
    };
    PictureDestination.prototype.loadPicture = function () {
        var info = new rtf_image_info_1.RtfImageInfo();
        if (this.info.dataStream.length > 0)
            this.loadPictureCore(info);
        return info;
    };
    PictureDestination.prototype.loadPictureCore = function (info) {
        info.base64 = this.getPrefix(this.info.pictureSourceType) + hexadecimal_converter_1.hexToBase64(this.info.dataStream.join(""));
        this.validateImageSize(info.base64);
        this.loadImageInUnits(info, PictureDestination.rtfHundredthsOfMillimeterConverter);
    };
    PictureDestination.prototype.getPrefix = function (sourceType) {
        return "data:" + this.getPictureFormat(sourceType) + ";base64,";
    };
    PictureDestination.prototype.getPictureFormat = function (sourceType) {
        switch (sourceType) {
            case enums_1.PictureSourceType.Jpeg:
                return 'image/jpeg';
            default:
                return 'image/png';
        }
    };
    PictureDestination.prototype.getImageInfo = function () {
        var imageInfo = this.loadPicture();
        if (imageInfo != null)
            this.info.properties.trySetProperty(rtf_drawing_keywords_1.RtfDrawingKeywords.PseudoInline, function (value) { return imageInfo.pseudoInline = value; });
        imageInfo.blipTag = this.info.blipTag;
        return imageInfo;
    };
    PictureDestination.prototype.dispose = function (_disposing) {
    };
    PictureDestination.rtfHundredthsOfMillimeterConverter = new picture_units_converter_1.RtfHundredthsOfMillimeterConverter();
    PictureDestination.rtfPixelsConverter = new picture_units_converter_1.RtfPixelsToTwipsConverter(96);
    return PictureDestination;
}(hex_content_destination_1.HexContentDestination));
exports.PictureDestination = PictureDestination;
