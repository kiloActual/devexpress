import { CodePageCharacterDecoder } from '../../encoding/code-page-character-decoder';
import { PictureDestinationInfo } from '../../model/image/picture-destination-info';
import { RtfImageInfo } from '../../model/image/rtf-image-info';
import { RtfImportData } from '../../rtf-import-data';
import { ControlCharTranslatorTable, DestinationBase } from '../base/destination';
import { HexContentDestination } from '../base/hex-content-destination';
import { DestinationType } from '../utils/destination-type';
import { RtfPictureUnitsConverter } from './picture-units-converter';
export declare class PictureDestination extends HexContentDestination {
    info: PictureDestinationInfo;
    oldDecoder: CodePageCharacterDecoder;
    constructor(importer: RtfImportData);
    static getThis(rtfImporter: RtfImportData): PictureDestination;
    static rtfHundredthsOfMillimeterConverter: RtfPictureUnitsConverter;
    static rtfPixelsConverter: RtfPictureUnitsConverter;
    static onEmfFileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onPngFileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onJpegFileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onMacFileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onWindowsMetafileKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onDeviceIndependentBitmapFileKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onDeviceDependentBitmapFileKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onBitmapBitsPerPixelKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onBitmapPlanesKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onBitmapBytesInLineKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onPictureWidthKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onPictureHeightKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static checkIfParameterStoredAsShortIntegerInsteadLongInt(parameterValue: number): boolean;
    static fillBytesToConvertFromShortIntToLongInt(parameterValue: number): number;
    static onPictureGoalWidthKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onPictureGoalHeightKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onHorizontalScalingKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onVerticalScalingKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onPicScaledKeyword(_importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onTopCropKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onBottomCropKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onLeftCropKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onRightCropKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onBitmapMetafileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onBitsPerPixelBitmapMetafileKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onDxImageUri(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onShapePropertiesKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onBlipTag(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onShapePropertyKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    protected createClone(): DestinationBase;
    beforePopRtfState(): void;
    protected processBinCharCore(ch: string): void;
    validateImageSize(_image: any): void;
    loadMetafile(_info: RtfImageInfo): void;
    loadBitmap(_info: RtfImageInfo): void;
    loadDib(_info: RtfImageInfo): void;
    loadImageInUnits(imageInfo: RtfImageInfo, _unitsConverter: RtfPictureUnitsConverter): void;
    applyVisibleSize(imageInfo: RtfImageInfo): void;
    loadMetafileImageInUnits(_imageInfo: RtfImageInfo): void;
    applySourceRect(_imageInfo: RtfImageInfo, _desiredPictureWidth: number, _desiredPictureHeight: number): void;
    getFractionInThousandthOfPercent(_cropSize: number, _desiredSize: number): number;
    loadPicture(): RtfImageInfo;
    loadPictureCore(info: RtfImageInfo): void;
    private getPrefix;
    private getPictureFormat;
    getImageInfo(): RtfImageInfo;
    dispose(_disposing: boolean): void;
    protected readonly destinationType: DestinationType;
    protected readonly controlCharHT: ControlCharTranslatorTable;
}
//# sourceMappingURL=picture-destination.d.ts.map
