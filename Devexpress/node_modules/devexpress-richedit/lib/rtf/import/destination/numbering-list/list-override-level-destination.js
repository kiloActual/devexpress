"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rtf_list_override_level_1 = require("../../model/numbering-lists/rtf-list-override-level");
var destination_1 = require("../base/destination");
var destination_type_1 = require("../utils/destination-type");
var list_level_destination_1 = require("./list-level-destination");
var ListOverrideLevelDestination = (function (_super) {
    tslib_1.__extends(ListOverrideLevelDestination, _super);
    function ListOverrideLevelDestination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrideLevel = new rtf_list_override_level_1.RtfListOverrideLevel();
        return _this;
    }
    Object.defineProperty(ListOverrideLevelDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ListOverrideLevelDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListOverrideLevelDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ListOverrideLevelDestination.onListOverrideFormatKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.overrideLevel.overrideFormat = true;
    };
    ListOverrideLevelDestination.onListOverrideStartAtKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.overrideLevel.overrideStartAt = true;
    };
    ListOverrideLevelDestination.onListOverrideStartAtValueKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter)
            destination.overrideLevel.startAt = parameterValue;
        else
            destination.overrideLevel.startAt = 0;
    };
    ListOverrideLevelDestination.onListOverrideListLevelKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        if (destination.overrideLevel.overrideFormat) {
            var newDestination = new list_level_destination_1.ListLevelDestination(importer);
            importer.destination = newDestination;
            destination.overrideLevel.level = newDestination.level;
        }
    };
    ListOverrideLevelDestination.prototype.createClone = function () {
        var clone = new ListOverrideLevelDestination(this.importer);
        clone.overrideLevel = this.overrideLevel;
        return clone;
    };
    return ListOverrideLevelDestination;
}(destination_1.DestinationBase));
exports.ListOverrideLevelDestination = ListOverrideLevelDestination;
