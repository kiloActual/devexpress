"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var numbering_formats_1 = require("../../../utils/numbering-formats");
var unicode_char_helper_1 = require("../../../utils/unicode-char-helper");
var rtf_list_level_1 = require("../../model/numbering-lists/rtf-list-level");
var destination_1 = require("../base/destination");
var destination_type_1 = require("../utils/destination-type");
var list_level_numbers_destination_1 = require("./list-level-numbers-destination");
var list_level_text_destination_1 = require("./list-level-text-destination");
var ListLevelDestination = (function (_super) {
    tslib_1.__extends(ListLevelDestination, _super);
    function ListLevelDestination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.level = new rtf_list_level_1.RtfListLevel();
        return _this;
    }
    Object.defineProperty(ListLevelDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ListLevelDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListLevelDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ListLevelDestination.prototype.nestedGroupFinished = function (nestedDestination) {
        this.tryToHandleFinishOfListLevelTextDestination(nestedDestination);
        this.tryToHandleFinishOfListLevelNumbersDestination(nestedDestination);
    };
    ListLevelDestination.prototype.beforePopRtfState = function () {
        this.applyListLevelParagraphProperties();
        this.applyListLevelCharacterProperties();
    };
    ListLevelDestination.prototype.tryToHandleFinishOfListLevelTextDestination = function (nestedDestination) {
        var currentDestination = this.importer.destination;
        if (nestedDestination instanceof list_level_text_destination_1.ListLevelTextDestination) {
            currentDestination.level.text = nestedDestination.value;
            currentDestination.level.listLevelProperties.templateCode = nestedDestination.levelTemplateId;
        }
    };
    ListLevelDestination.prototype.tryToHandleFinishOfListLevelNumbersDestination = function (nestedDestination) {
        var currentDestination = this.importer.destination;
        if (nestedDestination instanceof list_level_numbers_destination_1.ListLevelNumbersDestination)
            currentDestination.level.numbers = nestedDestination.value;
    };
    ListLevelDestination.prototype.applyListLevelParagraphProperties = function () {
        var destination = this.importer.destination;
        destination.level.paragraphProperties = this.importer.importers.paragraph.paragraphFormatting.getCoreProperties();
    };
    ListLevelDestination.prototype.applyListLevelCharacterProperties = function () {
        var destination = this.importer.destination;
        var text = destination.level.text;
        if (text.length > 1)
            unicode_char_helper_1.UnicodeCharHelper.setUnicodeFontName(this.importer.documentModel.cache.fontInfoCache, text[1], this.importer.importers.character.characterFormatting);
        destination.level.characterProperties.copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
    };
    ListLevelDestination.onListLevelStartAtKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter)
            destination.level.listLevelProperties.start = parameterValue;
    };
    ListLevelDestination.onListLevelTentativeKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListLevelDestination.onListLevelNumberingFormatKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter) {
            if (parameterValue >= 0 && parameterValue < numbering_formats_1.RtfNumberingFormats.length)
                destination.level.listLevelProperties.format = numbering_formats_1.RtfNumberingFormats[parameterValue];
        }
    };
    ListLevelDestination.onListLevelAlignmentKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter)
            destination.level.listLevelProperties.alignment = parameterValue;
    };
    ListLevelDestination.onListLevelOldKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0) {
            var destination = importer.destination;
            destination.level.listLevelProperties.legacy = true;
        }
    };
    ListLevelDestination.onListLevelPrevKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListLevelDestination.onListLevelPrevspaceKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListLevelDestination.onListLevelIndentKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter) {
            var destination = importer.destination;
            destination.level.listLevelProperties.legacyIndent = parameterValue;
        }
    };
    ListLevelDestination.onListLevelSpaceKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter) {
            var destination = importer.destination;
            destination.level.listLevelProperties.legacySpace = parameterValue;
        }
    };
    ListLevelDestination.onListLevelTextKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new list_level_text_destination_1.ListLevelTextDestination(importer);
    };
    ListLevelDestination.onListLevelNumbersKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new list_level_numbers_destination_1.ListLevelNumbersDestination(importer);
    };
    ListLevelDestination.onListLevelFollowKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter) {
            if (parameterValue == 0)
                destination.level.listLevelProperties.separator = rich_utils_1.RichUtils.specialCharacters.TabMark;
            else {
                if (parameterValue == 1)
                    destination.level.listLevelProperties.separator = ' ';
                else
                    destination.level.listLevelProperties.separator = '\u0000';
            }
        }
    };
    ListLevelDestination.onListLevelLegalKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (hasParameter)
            destination.level.listLevelProperties.convertPreviousLevelNumberingToDecimal = (parameterValue != 0);
    };
    ListLevelDestination.onListLevelNoRestartKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (!hasParameter)
            destination.level.listLevelProperties.suppressRestart = true;
        else
            destination.level.listLevelProperties.suppressRestart = (parameterValue != 0);
    };
    ListLevelDestination.onListLevelPictureKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListLevelDestination.onListLevelPictureNoSizeKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.level.listLevelProperties.suppressBulletResize = true;
    };
    ListLevelDestination.onParagraphStyleKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListLevelDestination.prototype.processControlCharCore = function (_ch) {
    };
    ListLevelDestination.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        var translator = this.keywordHT[keyword];
        if (translator) {
            translator(this.importer, parameterValue, hasParameter);
            return true;
        }
        return false;
    };
    ListLevelDestination.prototype.processCharCore = function (_ch) {
    };
    ListLevelDestination.prototype.createClone = function () {
        var clone = new ListLevelDestination(this.importer);
        clone.level = this.level;
        return clone;
    };
    return ListLevelDestination;
}(destination_1.DestinationBase));
exports.ListLevelDestination = ListLevelDestination;
