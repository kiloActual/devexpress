"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../core/model/character/enums");
var rtf_numbering_list_1 = require("../../model/numbering-lists/rtf-numbering-list");
var destination_1 = require("../base/destination");
var destination_type_1 = require("../utils/destination-type");
var list_level_destination_1 = require("./list-level-destination");
var list_name_destination_1 = require("./list-name-destination");
var list_style_name_destination_1 = require("./list-style-name-destination");
var ListTableDestination = (function (_super) {
    tslib_1.__extends(ListTableDestination, _super);
    function ListTableDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ListTableDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ListTableDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListTableDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ListTableDestination.prototype.nestedGroupFinished = function (nestedDestination) {
        this.tryToHandleFinishOfListNameDestination(nestedDestination);
        this.tryToHandleFinishOfListStyleNameDestination(nestedDestination);
        this.tryToHandleFinishOfListLevelDestination(nestedDestination);
    };
    ListTableDestination.prototype.tryToHandleFinishOfListNameDestination = function (nestedDestination) {
        var currentDestination = this.importer.destination;
        if (nestedDestination instanceof list_name_destination_1.ListNameDestination)
            currentDestination.currentList.name = nestedDestination.value;
    };
    ListTableDestination.prototype.tryToHandleFinishOfListStyleNameDestination = function (nestedDestination) {
        var currentDestination = this.importer.destination;
        if (nestedDestination instanceof list_style_name_destination_1.ListStyleNameDestination)
            currentDestination.currentList.styleName = nestedDestination.value;
    };
    ListTableDestination.prototype.tryToHandleFinishOfListLevelDestination = function (nestedDestination) {
        var currentDestination = this.importer.destination;
        if (nestedDestination instanceof list_level_destination_1.ListLevelDestination)
            currentDestination.currentList.levels.push(nestedDestination.level);
    };
    ListTableDestination.onListKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.currentList = new rtf_numbering_list_1.RtfNumberingList();
        importer.documentProperties.listTable.push(destination.currentList);
    };
    ListTableDestination.onListIdKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (destination.currentList != null && hasParameter)
            destination.currentList.id = parameterValue;
    };
    ListTableDestination.onListTemplatIdKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListTableDestination.onListStyleIdKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (destination.currentList != null && hasParameter)
            destination.currentList.parentStyleId = parameterValue;
    };
    ListTableDestination.onListStyleNameKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new list_style_name_destination_1.ListStyleNameDestination(importer);
    };
    ListTableDestination.onListNameKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new list_name_destination_1.ListNameDestination(importer);
    };
    ListTableDestination.onListHybridKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.currentList.numberingListType = rtf_numbering_list_1.RtfNumberingListType.Hybrid;
    };
    ListTableDestination.onListRestartAtEachSectionKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListTableDestination.onListTemplateIdKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListTableDestination.onListSimpleKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListTableDestination.onListLevelKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = new list_level_destination_1.ListLevelDestination(importer);
        importer.importers.character.characterFormatting.coreProperties.useValue = enums_1.CharacterPropertiesMask.UseNone;
        importer.destination = destination;
    };
    ListTableDestination.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        var translator = this.keywordHT[keyword];
        if (translator) {
            translator(this.importer, parameterValue, hasParameter);
            return true;
        }
        return false;
    };
    ListTableDestination.prototype.processCharCore = function (_ch) { };
    ListTableDestination.prototype.createClone = function () {
        var clone = new ListTableDestination(this.importer);
        clone.currentList = this.currentList;
        return clone;
    };
    return ListTableDestination;
}(destination_1.DestinationBase));
exports.ListTableDestination = ListTableDestination;
