"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var numbering_list_index_constants_1 = require("../../../../core/formats/utils/numbering-list-index-constants");
var enums_1 = require("../../../../core/model/character/enums");
var list_level_properties_1 = require("../../../../core/model/numbering-lists/list-level-properties");
var numbering_helper_1 = require("../../../../core/model/numbering-lists/numbering-helper");
var numbering_list_1 = require("../../../../core/model/numbering-lists/numbering-list");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_old_list_level_info_1 = require("../../model/numbering-lists/rtf-old-list-level-info");
var destination_type_1 = require("../utils/destination-type");
var destination_old_paragraph_numbering_base_1 = require("./destination-old-paragraph-numbering-base");
var DestinationOldParagraphNumbering = (function (_super) {
    tslib_1.__extends(DestinationOldParagraphNumbering, _super);
    function DestinationOldParagraphNumbering(importer) {
        var _this = _super.call(this, importer) || this;
        _this.oldLevelNumber = -1;
        if (importer.importers.numbering.oldListLevelInfo == null)
            importer.importers.numbering.oldListLevelInfo = new rtf_old_list_level_info_1.RtfOldListLevelInfo();
        importer.importers.character.characterFormatting.coreProperties.useValue = enums_1.CharacterPropertiesMask.UseAll;
        _this.multiLevelListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
        _this.simpleListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
        return _this;
    }
    Object.defineProperty(DestinationOldParagraphNumbering.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.DestinationOldParagraphNumbering; },
        enumerable: true,
        configurable: true
    });
    DestinationOldParagraphNumbering.onParagraphLevelKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter && parameterValue == 10) {
            DestinationOldParagraphNumbering.onSimpleNumberingKeyword(importer, 0, false);
            return;
        }
        importer.destination.oldLevelNumber = parameterValue;
        importer.destination.simpleList = false;
    };
    DestinationOldParagraphNumbering.onBulletedParagraphKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.format = list_level_properties_1.NumberingFormat.Bullet;
    };
    DestinationOldParagraphNumbering.onSimpleNumberingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination.simpleList = true;
    };
    DestinationOldParagraphNumbering.onSkipNumberingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.skipNumbering = true;
    };
    DestinationOldParagraphNumbering.onListOverrideKeyword = function (importer, parameterValue, _hasParameter) {
        var index = importer.importers.numbering.listOverrideIndexToNumberingListIndexMap[parameterValue];
        if (index !== undefined)
            importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = index;
        importer.destination.explicitNumberingListIndex = true;
    };
    DestinationOldParagraphNumbering.onListLevelKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = parameterValue;
        importer.destination.explicitListLevelIndex = true;
    };
    DestinationOldParagraphNumbering.prototype.createClone = function () {
        var result = new DestinationOldParagraphNumbering(this.importer);
        return result;
    };
    DestinationOldParagraphNumbering.prototype.beforePopRtfState = function () {
        _super.prototype.beforePopRtfState.call(this);
        if (this.shouldCreateNewList()) {
            this.createNewList();
        }
        else {
            this.skipNumbering = this.isSkipNumbering();
            this.simpleListIndex = this.importer.importers.numbering.currentOldSimpleListIndex;
            this.multiLevelListIndex = this.importer.importers.numbering.currentOldMultiLevelListIndex;
        }
        if (this.explicitNumberingListIndex && this.explicitListLevelIndex) {
            this.listLevelIndex = this.importer.importers.paragraph.paragraphFormatting.listLevelIndex;
            this.numberingListIndex = this.importer.importers.paragraph.paragraphFormatting.numberingListIndex;
        }
        else
            this.listLevelIndex = this.oldLevelNumber >= 0 ? this.oldLevelNumber - 1 : 0;
    };
    DestinationOldParagraphNumbering.prototype.afterPopRtfState = function () {
        _super.prototype.afterPopRtfState.call(this);
        this.importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = this.listLevelIndex;
        var actualNumberingListIndex = this.isSimpleList() ? this.simpleListIndex : this.multiLevelListIndex;
        this.importer.importers.numbering.currentOldListSkipNumbering = this.skipNumbering;
        if (this.isOldNumberingListCreated) {
            this.importer.importers.numbering.currentOldMultiLevelListIndex = this.multiLevelListIndex;
            this.importer.importers.numbering.currentOldSimpleListIndex = this.simpleListIndex;
            this.importer.importers.numbering.currentOldSimpleList = this.simpleList;
        }
        if (this.explicitListLevelIndex && this.explicitNumberingListIndex) {
            this.importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = this.numberingListIndex;
            this.importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = this.listLevelIndex;
        }
        else
            this.importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = !this.skipNumbering ?
                actualNumberingListIndex : numbering_list_index_constants_1.NumberingListIndexConstants.noNumberingList;
    };
    DestinationOldParagraphNumbering.prototype.createNewList = function () {
        var oldListLevelInfo = this.importer.importers.numbering.oldListLevelInfo;
        if (this.simpleList) {
            this.createSimpleNumberingListLevels();
            this.simpleListIndex = this.importer.documentModel.numberingLists.length - 1;
            this.multiLevelListIndex = this.importer.importers.numbering.currentOldMultiLevelListIndex;
        }
        else if (oldListLevelInfo.listLevelProperties.format == list_level_properties_1.NumberingFormat.Bullet) {
            this.createBulletedListLevels();
            this.multiLevelListIndex = this.importer.documentModel.numberingLists.length - 1;
            this.simpleListIndex = this.importer.importers.numbering.currentOldSimpleListIndex;
        }
        else {
            this.createMultilevelListLevels();
            this.multiLevelListIndex = this.importer.documentModel.numberingLists.length - 1;
            this.simpleListIndex = this.importer.importers.numbering.currentOldSimpleListIndex;
        }
    };
    DestinationOldParagraphNumbering.prototype.createMultilevelListLevels = function () {
        var documentModel = this.importer.documentModel;
        var abstractNumberingList = new numbering_list_1.AbstractNumberingList(documentModel);
        documentModel.abstractNumberingLists.push(abstractNumberingList);
        for (var i = 0; i < abstractNumberingList.levels.length; i++) {
            var levelInfo = this.importer.importers.numbering.oldListLevelInfoCollection.getByIndex(i + 1);
            var level = abstractNumberingList.levels[i];
            var firstLineIndent = levelInfo.indent;
            this.setFirstLineIndent(abstractNumberingList.levels[i], firstLineIndent);
            level.getCharacterProperties().copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
            var formatString = levelInfo.textBefore + "{" + i + "}" + levelInfo.textAfter;
            if (i > 0 && levelInfo.includeInformationFromPreviousLevel)
                formatString = abstractNumberingList.levels[i - 1].getListLevelProperties().displayFormatString + formatString;
            this.setDisplayFormatString(level, formatString);
            this.setLegacyProperties(level, 0, 0);
        }
        this.isOldNumberingListCreated = true;
        documentModel.numberingLists.push(new numbering_list_1.NumberingList(documentModel, documentModel.abstractNumberingLists.length - 1));
    };
    DestinationOldParagraphNumbering.prototype.createBulletedListLevels = function () {
        var documentModel = this.importer.documentModel;
        var levelOffset = unit_converter_1.UnitConverter.documentsToTwips(150);
        var abstractNumberingList = new numbering_list_1.AbstractNumberingList(documentModel);
        documentModel.abstractNumberingLists.push(abstractNumberingList);
        for (var i = 0; i < abstractNumberingList.levels.length; i++) {
            var level = abstractNumberingList.levels[i];
            level.getCharacterProperties().copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
            level.getListLevelProperties().format = list_level_properties_1.NumberingFormat.Bullet;
            var firstLineIndent = levelOffset * i + this.importer.importers.paragraph.paragraphFormatting.coreProperties.firstLineIndent;
            this.setFirstLineIndent(level, firstLineIndent);
            this.setDisplayFormatString(level, this.importer.importers.numbering.oldListLevelInfo.textBefore + this.importer.importers.numbering.oldListLevelInfo.textAfter);
            this.setTemplateCode(level, numbering_helper_1.NumberingHelper.generateNewTemplateCode(documentModel));
            this.setLegacyProperties(level, 0, 0);
        }
        this.isOldNumberingListCreated = true;
        documentModel.numberingLists.push(new numbering_list_1.NumberingList(documentModel, documentModel.abstractNumberingLists.length - 1));
    };
    DestinationOldParagraphNumbering.prototype.createSimpleNumberingListLevels = function () {
        var documentModel = this.importer.documentModel;
        var addResult = this.shouldCreateNewAbstractSimpleList();
        var existingNumberingListIndex = addResult.existingNumberingListIndex;
        if (addResult.isSecceed) {
            var abstractNumberingList = new numbering_list_1.AbstractNumberingList(documentModel);
            documentModel.abstractNumberingLists.push(abstractNumberingList);
            for (var i = 0; i < abstractNumberingList.levels.length; i++) {
                var level = abstractNumberingList.levels[i];
                level.getCharacterProperties().copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
                var firstLineIndent = this.importer.importers.paragraph.paragraphFormatting.coreProperties.firstLineIndent + 150 * i;
                this.setFirstLineIndent(level, firstLineIndent);
                this.setDisplayFormatString(level, this.importer.importers.numbering.oldListLevelInfo.textBefore + "{" + i + "}" + this.importer.importers.numbering.oldListLevelInfo.textAfter);
                this.setTemplateCode(level, numbering_helper_1.NumberingHelper.generateNewTemplateCode(documentModel));
                this.setLegacyProperties(level, 0, 0);
                var start = this.importer.importers.numbering.oldListLevelInfo.listLevelProperties.start;
                if (start > 0)
                    level.getListLevelProperties().start = start;
                var numberingFormat = this.importer.importers.numbering.oldListLevelInfo.listLevelProperties.format;
                if (numberingFormat != list_level_properties_1.NumberingFormat.Decimal)
                    level.getListLevelProperties().format = numberingFormat;
            }
            this.isOldNumberingListCreated = true;
            documentModel.numberingLists.push(new numbering_list_1.NumberingList(documentModel, documentModel.abstractNumberingLists.length - 1));
            this.importer.importers.numbering.numberingListToOldListLevelInfoMap[documentModel.numberingLists.length - 1] = this.importer.importers.numbering.oldListLevelInfo.clone();
        }
        else {
            var abstractNumberingListIndex = documentModel.numberingLists[existingNumberingListIndex].abstractNumberingListIndex;
            var prevNumberingList = list_1.ListUtils.last(documentModel.numberingLists);
            var newList = new numbering_list_1.NumberingList(documentModel, abstractNumberingListIndex);
            var level = newList.levels[0];
            var start = this.importer.importers.numbering.oldListLevelInfo.listLevelProperties.start;
            if (start >= 0)
                level.getListLevelProperties().start = start;
            var numberingFormat = this.importer.importers.numbering.oldListLevelInfo.listLevelProperties.format;
            if (numberingFormat != list_level_properties_1.NumberingFormat.Decimal)
                level.getListLevelProperties().format = numberingFormat;
            if (prevNumberingList != null && prevNumberingList.levels[0].getListLevelProperties().format != level.getListLevelProperties().format)
                level.overrideStart = true;
            level.getCharacterProperties().copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
            var firstLineIndent = this.importer.importers.paragraph.paragraphFormatting.coreProperties.firstLineIndent;
            this.setFirstLineIndent(level, firstLineIndent);
            this.setDisplayFormatString(level, this.importer.importers.numbering.oldListLevelInfo.textBefore + "{" + 0 + "}" + this.importer.importers.numbering.oldListLevelInfo.textAfter);
            this.setTemplateCode(level, numbering_helper_1.NumberingHelper.generateNewTemplateCode(documentModel));
            this.setLegacyProperties(level, 0, 0);
            documentModel.numberingLists.push(newList);
            this.importer.importers.numbering.numberingListToOldListLevelInfoMap[documentModel.numberingLists.length - 1] = this.importer.importers.numbering.oldListLevelInfo.clone();
        }
    };
    DestinationOldParagraphNumbering.prototype.shouldCreateNewAbstractSimpleList = function () {
        var existingNumberingListIndex;
        if (this.importer.importers.numbering.currentOldSimpleList &&
            this.importer.importers.numbering.currentOldSimpleListIndex >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue) {
            existingNumberingListIndex = this.importer.importers.numbering.currentOldSimpleListIndex;
            var oldListLevelInfo = this.importer.importers.numbering.numberingListToOldListLevelInfoMap[existingNumberingListIndex];
            if (!oldListLevelInfo)
                return { isSecceed: true, existingNumberingListIndex: existingNumberingListIndex };
            return { isSecceed: !this.areSameInfo(oldListLevelInfo, this.importer.importers.numbering.oldListLevelInfo), existingNumberingListIndex: existingNumberingListIndex };
        }
        existingNumberingListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
        var prevParagraphIndex = this.importer.subDocument.paragraphs.length - 1 - 1;
        for (; prevParagraphIndex >= 0; prevParagraphIndex--) {
            var prevParagraph = this.importer.subDocument.paragraphs[prevParagraphIndex];
            if (!prevParagraph.isInList()) {
                if (prevParagraph.numberingListIndex == numbering_list_index_constants_1.NumberingListIndexConstants.noNumberingList)
                    continue;
                return { isSecceed: true, existingNumberingListIndex: existingNumberingListIndex };
            }
            var numberingListIndex = prevParagraph.numberingListIndex;
            var prevOldListLevelInfo = this.importer.importers.numbering.numberingListToOldListLevelInfoMap[numberingListIndex];
            if (!prevOldListLevelInfo)
                return { isSecceed: true, existingNumberingListIndex: existingNumberingListIndex };
            if (!this.areSameInfo(prevOldListLevelInfo, this.importer.importers.numbering.oldListLevelInfo))
                return { isSecceed: true, existingNumberingListIndex: existingNumberingListIndex };
            existingNumberingListIndex = numberingListIndex;
            return { isSecceed: false, existingNumberingListIndex: existingNumberingListIndex };
        }
        return { isSecceed: true, existingNumberingListIndex: existingNumberingListIndex };
    };
    DestinationOldParagraphNumbering.prototype.setLegacyProperties = function (level, legacyIndent, legacySpace) {
        level.getListLevelProperties().legacy = true;
        level.getListLevelProperties().legacySpace = legacyIndent;
        level.getListLevelProperties().legacyIndent = legacySpace;
    };
    DestinationOldParagraphNumbering.prototype.setDisplayFormatString = function (level, displayFormatString) {
        level.getListLevelProperties().displayFormatString = displayFormatString;
    };
    DestinationOldParagraphNumbering.prototype.setFirstLineIndent = function (level, lineIndent) {
        level.getParagraphProperties().leftIndent = lineIndent;
    };
    DestinationOldParagraphNumbering.prototype.setTemplateCode = function (level, templateCode) {
        level.getListLevelProperties().templateCode = templateCode;
    };
    DestinationOldParagraphNumbering.prototype.shouldCreateNewList = function () {
        if (this.isNewListLevelInfoPresent())
            return false;
        if (this.isMultilevelList())
            return (!this.sectionMultiLevelListCreated());
        if (this.isSimpleList())
            return true;
        if (this.isSkipNumbering())
            return false;
        return true;
    };
    DestinationOldParagraphNumbering.prototype.isNewListLevelInfoPresent = function () {
        if (this.explicitListLevelIndex && this.explicitNumberingListIndex)
            return true;
        if (this.isSimpleList()) {
            if (this.simpleListIndex < numbering_list_index_constants_1.NumberingListIndexConstants.minValue)
                return false;
            var existingListLevelInfo = this.importer.importers.numbering.numberingListToOldListLevelInfoMap[this.simpleListIndex];
            if (!existingListLevelInfo)
                return false;
            return this.areSameInfo(existingListLevelInfo, this.importer.importers.numbering.oldListLevelInfo);
        }
        else
            return this.multiLevelListIndex >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue;
    };
    DestinationOldParagraphNumbering.prototype.areSameInfo = function (existingListLevelInfo, rtfOldListLevelInfo) {
        return existingListLevelInfo.textAfter == rtfOldListLevelInfo.textAfter && existingListLevelInfo.textBefore == rtfOldListLevelInfo.textBefore;
    };
    DestinationOldParagraphNumbering.prototype.isSimpleList = function () {
        return this.simpleList;
    };
    DestinationOldParagraphNumbering.prototype.isMultilevelList = function () {
        return (this.oldLevelNumber >= 0) && !this.simpleList;
    };
    DestinationOldParagraphNumbering.prototype.sectionMultiLevelListCreated = function () {
        return this.importer.importers.numbering.currentOldMultiLevelListIndex >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue;
    };
    DestinationOldParagraphNumbering.prototype.isSkipNumbering = function () {
        return this.importer.importers.numbering.oldListLevelInfo.skipNumbering;
    };
    return DestinationOldParagraphNumbering;
}(destination_old_paragraph_numbering_base_1.DestinationOldParagraphNumberingBase));
exports.DestinationOldParagraphNumbering = DestinationOldParagraphNumbering;
