"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rtf_numbering_list_override_1 = require("../../model/numbering-lists/rtf-numbering-list-override");
var destination_1 = require("../base/destination");
var destination_type_1 = require("../utils/destination-type");
var list_override_level_destination_1 = require("./list-override-level-destination");
var ListOverrideTableDestination = (function (_super) {
    tslib_1.__extends(ListOverrideTableDestination, _super);
    function ListOverrideTableDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ListOverrideTableDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ListOverrideTableDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListOverrideTableDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ListOverrideTableDestination.onListOverrideKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.currentOverride = new rtf_numbering_list_override_1.RtfNumberingListOverride();
        importer.documentProperties.listOverrideTable.push(destination.currentOverride);
    };
    ListOverrideTableDestination.onListOverrideListIdKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (destination.currentOverride != null && hasParameter)
            destination.currentOverride.listId = parameterValue;
    };
    ListOverrideTableDestination.onListOverrideCountKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    ListOverrideTableDestination.onListOverrideIdKeyword = function (importer, parameterValue, hasParameter) {
        var destination = importer.destination;
        if (destination.currentOverride != null && hasParameter)
            destination.currentOverride.id = parameterValue;
    };
    ListOverrideTableDestination.onListOverrideLevelKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        var newDestination = new list_override_level_destination_1.ListOverrideLevelDestination(importer);
        importer.destination = newDestination;
        if (destination.currentOverride != null)
            destination.currentOverride.levels.push(newDestination.overrideLevel);
    };
    ListOverrideTableDestination.prototype.createClone = function () {
        var clone = new ListOverrideTableDestination(this.importer);
        clone.currentOverride = this.currentOverride;
        return clone;
    };
    return ListOverrideTableDestination;
}(destination_1.DestinationBase));
exports.ListOverrideTableDestination = ListOverrideTableDestination;
