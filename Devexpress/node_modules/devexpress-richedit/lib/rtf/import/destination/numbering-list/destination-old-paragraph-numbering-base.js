"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../core/model/character/enums");
var list_level_properties_1 = require("../../../../core/model/numbering-lists/list-level-properties");
var paragraph_properties_1 = require("../../../../core/model/paragraph/paragraph-properties");
var shading_info_1 = require("../../../../core/model/shadings/shading-info");
var destination_1 = require("../base/destination");
var text_after_destination_1 = require("../base/text-after-destination");
var text_before_destination_1 = require("../base/text-before-destination");
var destination_sub_document_1 = require("../sub-document/destination-sub-document");
var destination_type_1 = require("../utils/destination-type");
var DestinationOldParagraphNumberingBase = (function (_super) {
    tslib_1.__extends(DestinationOldParagraphNumberingBase, _super);
    function DestinationOldParagraphNumberingBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DestinationOldParagraphNumberingBase.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.DestinationOldParagraphNumberingBase; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DestinationOldParagraphNumberingBase.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    DestinationOldParagraphNumberingBase.setNumberingListFormat = function (importer, format) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.format = format;
    };
    DestinationOldParagraphNumberingBase.setUnderlineType = function (importer, underlineType) {
        importer.importers.character.characterFormatting.coreProperties.fontUnderlineType = underlineType;
    };
    DestinationOldParagraphNumberingBase.onCardinalKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.CardinalText);
    };
    DestinationOldParagraphNumberingBase.onDecimalKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.Decimal);
    };
    DestinationOldParagraphNumberingBase.onUpperCaseAlphabeticalKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.UpperLetter);
    };
    DestinationOldParagraphNumberingBase.onUpperCaseRomanKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.UpperRoman);
    };
    DestinationOldParagraphNumberingBase.onLowerCaseAlphabeticalKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.LowerLetter);
    };
    DestinationOldParagraphNumberingBase.onLowerCaseRomanKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.LowerRoman);
    };
    DestinationOldParagraphNumberingBase.onOrdinalKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.Ordinal);
    };
    DestinationOldParagraphNumberingBase.onOrdinalTextKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.OrdinalText);
    };
    DestinationOldParagraphNumberingBase.onNumberingInCircleKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setNumberingListFormat(importer, list_level_properties_1.NumberingFormat.DecimalEnclosedCircle);
    };
    DestinationOldParagraphNumberingBase.onDashedUndrelineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.Dashed);
    };
    DestinationOldParagraphNumberingBase.onDashDottedUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.DashDotted);
    };
    DestinationOldParagraphNumberingBase.onDashDotDottedUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.DashDotDotted);
    };
    DestinationOldParagraphNumberingBase.onHairlineUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.ThickSingle);
    };
    DestinationOldParagraphNumberingBase.onThickUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.ThickSingle);
    };
    DestinationOldParagraphNumberingBase.onWaveUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.Wave);
    };
    DestinationOldParagraphNumberingBase.onDottedUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.Dotted);
    };
    DestinationOldParagraphNumberingBase.onDoubleUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.Double);
    };
    DestinationOldParagraphNumberingBase.onNoneUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationOldParagraphNumberingBase.setUnderlineType(importer, enums_1.UnderlineType.None);
    };
    DestinationOldParagraphNumberingBase.onContinuousUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.coreProperties.underlineWordsOnly = false;
    };
    DestinationOldParagraphNumberingBase.onWordUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.coreProperties.underlineWordsOnly = true;
    };
    DestinationOldParagraphNumberingBase.onFontNumberKeyword = function (importer, parameterValue, hasParameter) {
        var fontImporter = importer.importers.font;
        if (!hasParameter)
            parameterValue = fontImporter.defaultFontNumber;
        fontImporter.setFont(fontImporter.fonts.getRtfFontInfoById(parameterValue));
    };
    DestinationOldParagraphNumberingBase.onFontBoldKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.fontBold = val;
    };
    DestinationOldParagraphNumberingBase.onItalicKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.fontItalic = val;
    };
    DestinationOldParagraphNumberingBase.onAllCapsKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.allCaps = val;
    };
    DestinationOldParagraphNumberingBase.onSmallCapsKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.allCaps = !val;
    };
    DestinationOldParagraphNumberingBase.onStrikeKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.fontStrikeoutType = val ? enums_1.StrikeoutType.Single : enums_1.StrikeoutType.None;
    };
    DestinationOldParagraphNumberingBase.onForegroundColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.shadingInfo = new shading_info_1.ShadingInfo(oldSh.shadingPattern, oldSh.backColor, destination_sub_document_1.DestinationSubDocument.getColorIndex(importer, parameterValue));
    };
    DestinationOldParagraphNumberingBase.onIndentKeyword = function (importer, parameterValue, _hasParameter) {
        var info = importer.importers.paragraph.paragraphFormatting;
        if (parameterValue < 0) {
            info.coreProperties.firstLineIndent = -parameterValue;
            info.coreProperties.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
        }
        else {
            info.coreProperties.firstLineIndent = parameterValue;
            info.coreProperties.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Indented;
        }
    };
    DestinationOldParagraphNumberingBase.onSpaceKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationOldParagraphNumberingBase.onUsePrevKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.includeInformationFromPreviousLevel = true;
    };
    DestinationOldParagraphNumberingBase.onStartAtKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.start = parameterValue;
    };
    DestinationOldParagraphNumberingBase.onHangingIndentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.coreProperties.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
    };
    DestinationOldParagraphNumberingBase.onRestartOnSectionBreakKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationOldParagraphNumberingBase.onCenterAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.alignment = list_level_properties_1.ListNumberAlignment.Center;
    };
    DestinationOldParagraphNumberingBase.onLeftAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.alignment = list_level_properties_1.ListNumberAlignment.Left;
    };
    DestinationOldParagraphNumberingBase.onRightAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.numbering.oldListLevelInfo.listLevelProperties.alignment = list_level_properties_1.ListNumberAlignment.Right;
    };
    DestinationOldParagraphNumberingBase.onTextBeforeKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new text_before_destination_1.TextBeforeDestination(importer);
    };
    DestinationOldParagraphNumberingBase.onTextAfterKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new text_after_destination_1.TextAfterDestination(importer);
    };
    DestinationOldParagraphNumberingBase.prototype.nestedGroupFinished = function (nestedDestination) {
        _super.prototype.nestedGroupFinished.call(this, nestedDestination);
        if (nestedDestination instanceof text_before_destination_1.TextBeforeDestination) {
            this.textBefore = nestedDestination.value;
            return;
        }
        if (nestedDestination instanceof text_after_destination_1.TextAfterDestination) {
            this.textAfter = nestedDestination.value;
            return;
        }
    };
    DestinationOldParagraphNumberingBase.prototype.beforePopRtfState = function () {
        _super.prototype.beforePopRtfState.call(this);
        this.importer.importers.numbering.oldListLevelInfo.textAfter = this.textAfter;
        this.importer.importers.numbering.oldListLevelInfo.textBefore = this.textBefore;
    };
    return DestinationOldParagraphNumberingBase;
}(destination_1.DestinationBase));
exports.DestinationOldParagraphNumberingBase = DestinationOldParagraphNumberingBase;
