"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var dx_encoding_1 = require("../encoding/dx-encoding");
var rtf_font_info_1 = require("../model/character/rtf-font-info");
var destination_1 = require("./base/destination");
var destination_type_1 = require("./utils/destination-type");
var FontTableDestination = (function (_super) {
    tslib_1.__extends(FontTableDestination, _super);
    function FontTableDestination(importer, nestedState) {
        if (nestedState === void 0) { nestedState = false; }
        var _this = _super.call(this, importer) || this;
        _this.nestedState = nestedState;
        _this.fontInfo = new rtf_font_info_1.RtfFontInfo();
        _this.emptyFontInfo = true;
        return _this;
    }
    Object.defineProperty(FontTableDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.FontTableDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontTableDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontTableDestination.prototype, "keywordHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    FontTableDestination.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        this.emptyFontInfo = false;
        switch (keyword) {
            case "f":
                this.fontInfo.id = parameterValue;
                break;
            case "fcharset":
                this.onFontCharset(parameterValue);
                break;
            case "bin":
                return _super.prototype.processKeywordCore.call(this, keyword, parameterValue, hasParameter);
            default:
                return false;
        }
        return true;
    };
    FontTableDestination.prototype.createClone = function () {
        return new FontTableDestination(this.importer, true);
    };
    FontTableDestination.prototype.addFontInfo = function () {
        if (this.nestedState && this.emptyFontInfo)
            return;
        this.importer.importers.font.addRtfFontInfo(this.fontInfo);
        this.fontInfo = new rtf_font_info_1.RtfFontInfo();
        this.emptyFontInfo = true;
    };
    FontTableDestination.prototype.processCharCore = function (ch) {
        if (ch == ';') {
            this.addFontInfo();
            this.importer.setCodePage(this.importer.documentProperties.defaultCodePage);
        }
        else {
            if (this.fontInfo.name.length < 256)
                this.fontInfo.name += ch;
            this.emptyFontInfo = false;
        }
    };
    FontTableDestination.prototype.onFontCharset = function (parameterValue) {
        this.fontInfo.charset = parameterValue;
        if (this.fontInfo.charset >= 0)
            this.importer.setCodePage(dx_encoding_1.DXEncoding.codePageFromCharset(this.fontInfo.charset));
    };
    FontTableDestination.prototype.beforePopRtfState = function () {
        if (this.nestedState && !this.emptyFontInfo)
            this.addFontInfo();
        _super.prototype.beforePopRtfState.call(this);
    };
    FontTableDestination.prototype.afterPopRtfState = function () {
        var fontInfo = this.importer.importers.font.fonts.getRtfFontInfoById(this.importer.importers.font.defaultFontNumber);
        this.importer.importers.character.characterFormatting.coreProperties.fontInfo = fontInfo.getCoreObjectByName(this.importer.documentModel);
        if (fontInfo != this.importer.importers.font.fonts.defaultRtfFontInfo && fontInfo.charset >= 0)
            this.importer.documentProperties.defaultCodePage = dx_encoding_1.DXEncoding.codePageFromCharset(fontInfo.charset);
        this.importer.setCodePage(this.importer.documentProperties.defaultCodePage);
    };
    return FontTableDestination;
}(destination_1.DestinationBase));
exports.FontTableDestination = FontTableDestination;
