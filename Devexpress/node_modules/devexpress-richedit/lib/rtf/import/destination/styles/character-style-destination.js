"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_style_1 = require("../../../../core/model/character/character-style");
var character_importer_1 = require("../../importers/character-importer");
var destination_sub_document_1 = require("../sub-document/destination-sub-document");
var destination_type_1 = require("../utils/destination-type");
var style_sheet_destination_1 = require("./style-sheet-destination");
var CharacterStyleDestination = (function (_super) {
    tslib_1.__extends(CharacterStyleDestination, _super);
    function CharacterStyleDestination(importer, styleIndex) {
        var _this = _super.call(this, importer, importer.subDocument) || this;
        importer.importers.style.character.rtfStyleIndex = styleIndex;
        _this.styleName = '';
        return _this;
    }
    Object.defineProperty(CharacterStyleDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.CharacterStyleDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CharacterStyleDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    CharacterStyleDestination.onParentStyleIndex = function (importer, parameterValue, _hasParameter) {
        importer.importers.style.character.rtfParentStyleIndex = parameterValue;
    };
    CharacterStyleDestination.onStyleLinkKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.styleLink = parameterValue;
    };
    CharacterStyleDestination.onStyleQFormatKeyword = function (importer, parameterValue, _hasParameter) {
        importer.destination.qFormat = true;
        importer.importers.style.character.rtfParentStyleIndex = parameterValue;
    };
    Object.defineProperty(CharacterStyleDestination.prototype, "canAppendText", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    CharacterStyleDestination.prototype.beforePopRtfState = function () {
        var name = style_sheet_destination_1.StyleSheetDestination.getPrimaryStyleName(this.styleName);
        if (!this.importer.importers.style.character.mapRtfIndexToModelIndex[this.importer.importers.style.character.rtfStyleIndex]) {
            var style = this.importer.importers.style.character.getOrCreateStyleByName(name);
            style.primary = this.qFormat;
            var rtfLinkStyleIndex = this.importer.importers.paragraph.paragraphFormatting.styleLink;
            if (rtfLinkStyleIndex >= 0) {
                if (this.importer.importers.style.linkParagraphStyleIndexToCharacterStyleIndex[rtfLinkStyleIndex] != undefined)
                    this.importer.importers.style.linkParagraphStyleIndexToCharacterStyleIndex[rtfLinkStyleIndex] = this.importer.importers.style.character.rtfStyleIndex;
            }
            if (name != character_style_1.CharacterStyle.defaultParagraphCharacterStyleName) {
                style.maskedCharacterProperties = character_importer_1.RtfCharacterImporter.getOnlyOwnCharacterProperties(this.importer.importers.character.characterFormatting.coreProperties, style.parent);
            }
        }
    };
    CharacterStyleDestination.prototype.createClone = function () {
        return new CharacterStyleDestination(this.importer, this.importer.importers.style.character.rtfStyleIndex);
    };
    CharacterStyleDestination.prototype.processCharCore = function (ch) {
        if (ch != ';')
            this.styleName += ch;
    };
    CharacterStyleDestination.prototype.finalizePieceTableCreation = function () {
    };
    return CharacterStyleDestination;
}(destination_sub_document_1.DestinationSubDocument));
exports.CharacterStyleDestination = CharacterStyleDestination;
