"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../../core/model/character/enums");
var character_properties_merger_1 = require("../../../../core/model/properties-merger/character-properties-merger");
var paragraph_properties_merger_1 = require("../../../../core/model/properties-merger/paragraph-properties-merger");
var table_base_structures_1 = require("../../../../core/model/tables/secondary-structures/table-base-structures");
var table_style_1 = require("../../../../core/model/tables/styles/table-style");
var rtf_table_cell_properties_merger_1 = require("../../../utils/mergers/rtf-table-cell-properties-merger");
var rtf_table_properties_merger_1 = require("../../../utils/mergers/rtf-table-properties-merger");
var rtf_table_row_properties_merger_1 = require("../../../utils/mergers/rtf-table-row-properties-merger");
var destination_sub_document_1 = require("../sub-document/destination-sub-document");
var destination_type_1 = require("../utils/destination-type");
var TableStyleDestination = (function (_super) {
    tslib_1.__extends(TableStyleDestination, _super);
    function TableStyleDestination(importer, styleIndex) {
        var _this = _super.call(this, importer, importer.subDocument) || this;
        _this.conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        _this.styleName = '';
        _this.rtfStyleIndex = styleIndex;
        _this.importer.importers.character.characterFormatting.coreProperties.setUseValue(enums_1.CharacterPropertiesMask.UseAll, false);
        return _this;
    }
    Object.defineProperty(TableStyleDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.TableStyleDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStyleDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    TableStyleDestination.onStyleQFormatKeyword = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).qFormat = true;
    };
    TableStyleDestination.onParentStyleIndex = function (importer, parameterValue, _hasParameter) {
        importer.importers.style.table.rtfParentStyleIndex = parameterValue;
    };
    TableStyleDestination.onConditionalStyleFirstRow = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.FirstRow;
    };
    TableStyleDestination.onConditionalStyleLastRow = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.LastRow;
    };
    TableStyleDestination.onConditionalStyleFirstColumn = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.FirstColumn;
    };
    TableStyleDestination.onConditionalStyleLastColumn = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.LastColumn;
    };
    TableStyleDestination.onConditionalStyleOddRowBanding = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.OddRowBanding;
    };
    TableStyleDestination.onConditionalStyleEvenRowBanding = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.EvenRowBanding;
    };
    TableStyleDestination.onConditionalStyleOddColumnBanding = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.OddColumnBanding;
    };
    TableStyleDestination.onConditionalStyleEvenColumnBanding = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.EvenColumnBanding;
    };
    TableStyleDestination.onConditionalStyleTopLeftCell = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.TopLeftCell;
    };
    TableStyleDestination.onConditionalStyleTopRightCell = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.TopRightCell;
    };
    TableStyleDestination.onConditionalStyleBottomLeftCell = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.BottomLeftCell;
    };
    TableStyleDestination.onConditionalStyleBottomRightCell = function (importer, _parameterValue, _hasParameter) {
        TableStyleDestination.getThis(importer).conditionalTableStyleFormattingType = table_base_structures_1.ConditionalTableStyleFormatting.BottomRightCell;
    };
    TableStyleDestination.getThis = function (rtfImporter) {
        return rtfImporter.destination;
    };
    Object.defineProperty(TableStyleDestination.prototype, "canAppendText", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStyleDestination.prototype, "rtfStyleIndex", {
        get: function () { return this.importer.importers.style.table.rtfStyleIndex; },
        set: function (value) { this.importer.importers.style.table.rtfStyleIndex = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableStyleDestination.prototype, "rtfParentStyleIndex", {
        get: function () { return this.importer.importers.style.table.rtfParentStyleIndex; },
        enumerable: true,
        configurable: true
    });
    TableStyleDestination.prototype.beforePopRtfState = function () {
        var name = this.styleName.trim();
        var style = null;
        var isConditionalStyle = this.conditionalTableStyleFormattingType != table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        var realConditionalStyle;
        if (isConditionalStyle) {
            style = this.addConditionalStyle();
            realConditionalStyle = style;
        }
        else {
            this.importer.importers.character.characterFormatting.coreProperties.setUseValue(enums_1.CharacterPropertiesMask.UseAll, true);
            if (this.importer.importers.style.table.mapRtfIndexToModelIndex[this.rtfStyleIndex] == undefined)
                style = this.importer.importers.style.table.getOrCreateStyleByName(name);
            realConditionalStyle = style.baseConditionalStyle;
        }
        if (style == null)
            return;
        var tableStyle = style;
        var conditionalStyle = style;
        if (tableStyle != null)
            tableStyle.primary = this.qFormat;
        if (name != table_style_1.TableStyle.DEFAULT_STYLENAME) {
            var parentTableStyle;
            if (!isConditionalStyle) {
                parentTableStyle = this.importer.importers.style.table.parentStyle;
            }
            else {
                parentTableStyle = style.parent;
                if (parentTableStyle == null)
                    parentTableStyle = this.importer.documentModel.tableStyles[0];
            }
            var parentParagraphProperties = void 0;
            if (isConditionalStyle) {
                conditionalStyle.maskedCharacterProperties.copyFrom(this.importer.importers.character.characterFormatting.coreProperties);
                parentParagraphProperties = conditionalStyle.maskedParagraphProperties;
            }
            else {
                var characterPropertiesMerger = new character_properties_merger_1.CharacterPropertiesMerger();
                characterPropertiesMerger.mergeCharacterProperties(tableStyle.baseConditionalStyle.maskedCharacterProperties);
                characterPropertiesMerger.mergeMergedCharacterProperties(parentTableStyle.baseConditionalStyle.maskedCharacterProperties);
                tableStyle.baseConditionalStyle.maskedCharacterProperties = characterPropertiesMerger.innerProperties;
                var parentParagraphPropertiesMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
                parentParagraphPropertiesMerger.mergeMaskedParagraphProperties(tableStyle.baseConditionalStyle.maskedParagraphProperties);
                parentParagraphPropertiesMerger.mergeMaskedParagraphProperties(parentTableStyle.baseConditionalStyle.maskedParagraphProperties);
                parentParagraphProperties = parentParagraphPropertiesMerger.innerProperties;
            }
            var formattingInfo = this.importer.importers.paragraph.paragraphFormatting;
            var paragraphPropertiesMerger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
            paragraphPropertiesMerger.mergeMaskedParagraphProperties(formattingInfo.getCoreProperties());
            paragraphPropertiesMerger.mergeMaskedParagraphProperties(parentParagraphProperties);
            realConditionalStyle.maskedParagraphProperties = paragraphPropertiesMerger.innerProperties;
            realConditionalStyle.tableProperties = this.importer.importers.table.tableReader.tableProperties.coreProperties;
            realConditionalStyle.tableProperties = new rtf_table_properties_merger_1.RtfTablePropertiesMerger(this.importer.documentModel)
                .getStyleMergedProperties(realConditionalStyle, tableStyle, this.conditionalTableStyleFormattingType);
            realConditionalStyle.tableRowProperties = this.importer.importers.table.tableReader.rowProperties.coreProperties;
            realConditionalStyle.tableRowProperties = new rtf_table_row_properties_merger_1.RtfTableRowPropertiesMerger(this.importer.documentModel)
                .getStyleMergedProperties(realConditionalStyle, tableStyle, this.conditionalTableStyleFormattingType);
            realConditionalStyle.tableCellProperties = this.importer.importers.table.tableReader.cellProperties.coreProperties;
            realConditionalStyle.tableCellProperties = new rtf_table_cell_properties_merger_1.RtfTableCellPropertiesMerger(this.importer.documentModel)
                .getStyleMergedProperties(realConditionalStyle, tableStyle, this.conditionalTableStyleFormattingType);
        }
    };
    TableStyleDestination.prototype.addConditionalStyle = function () {
        if (this.importer.importers.style.table.mapRtfIndexToModelIndex[this.rtfStyleIndex] == undefined)
            return null;
        var documentModel = this.importer.documentModel;
        var mainStyle = documentModel.tableStyles[this.importer.importers.style.table.getModelIndex(this.rtfStyleIndex)];
        var tableConditionalStyle = mainStyle.conditionalStyles[this.conditionalTableStyleFormattingType];
        return tableConditionalStyle;
    };
    TableStyleDestination.prototype.createClone = function () {
        return new TableStyleDestination(this.importer, this.rtfStyleIndex);
    };
    TableStyleDestination.prototype.processCharCore = function (ch) {
        if (ch != ';')
            this.styleName += ch;
    };
    TableStyleDestination.prototype.finalizePieceTableCreation = function () {
    };
    return TableStyleDestination;
}(destination_sub_document_1.DestinationSubDocument));
exports.TableStyleDestination = TableStyleDestination;
