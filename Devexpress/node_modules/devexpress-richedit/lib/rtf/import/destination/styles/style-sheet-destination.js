"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var paragraph_style_1 = require("../../../../core/model/paragraph/paragraph-style");
var character_properties_merger_1 = require("../../../../core/model/properties-merger/character-properties-merger");
var string_1 = require("@devexpress/utils/lib/utils/string");
var paragraph_importer_1 = require("../../importers/paragraph-importer");
var rtf_import_data_1 = require("../../rtf-import-data");
var destination_sub_document_1 = require("../sub-document/destination-sub-document");
var destination_type_1 = require("../utils/destination-type");
var character_style_destination_1 = require("./character-style-destination");
var table_style_destination_1 = require("./table-style-destination");
var StyleSheetDestination = (function (_super) {
    tslib_1.__extends(StyleSheetDestination, _super);
    function StyleSheetDestination(importer) {
        var _this = _super.call(this, importer, importer.subDocument) || this;
        _this.styleName = "";
        importer.rtfDocumentModelType = rtf_import_data_1.RtfDocumentModelType.WithStyle;
        return _this;
    }
    Object.defineProperty(StyleSheetDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.StyleSheetDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StyleSheetDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StyleSheetDestination.prototype, "canAppendText", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    StyleSheetDestination.onStyleQFormatKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination.qFormat = true;
    };
    StyleSheetDestination.onParagraphStyle = function (importer, parameterValue, _hasParameter) {
        importer.importers.style.paragraph.rtfStyleIndex = parameterValue;
    };
    StyleSheetDestination.onParentStyleIndex = function (importer, parameterValue, _hasParameter) {
        importer.importers.style.paragraph.rtfParentStyleIndex = parameterValue;
    };
    StyleSheetDestination.onStyleLinkKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.styleLink = parameterValue;
    };
    StyleSheetDestination.onNextStyleIndex = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.nextStyle = parameterValue;
    };
    StyleSheetDestination.onCharacterStyle = function (importer, parameterValue, _hasParameter) {
        importer.destination = new character_style_destination_1.CharacterStyleDestination(importer, parameterValue);
    };
    StyleSheetDestination.onTableStyle = function (importer, parameterValue, _hasParameter) {
        importer.destination = new table_style_destination_1.TableStyleDestination(importer, parameterValue);
    };
    StyleSheetDestination.onStyleListOverride = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = parameterValue;
    };
    StyleSheetDestination.onStyleListLevel = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = parameterValue;
    };
    StyleSheetDestination.prototype.nestedGroupFinished = function (nestedDestination) {
        if (nestedDestination instanceof StyleSheetDestination) {
            var paragraphFormattingInfo = this.importer.importers.paragraph.paragraphFormatting;
            this.importer.importers.style.paragraph.ensureStyleExist();
            var style = this.importer.importers.style.paragraph
                .getOrCreateStyleByName(StyleSheetDestination.getPrimaryStyleName(nestedDestination.styleName));
            if (paragraphFormattingInfo.styleLink &&
                this.importer.importers.style.linkParagraphStyleIndexToCharacterStyleIndex[this.importer.importers.style.paragraph.rtfStyleIndex] === undefined)
                this.importer.importers.style.linkParagraphStyleIndexToCharacterStyleIndex[this.importer.importers.style.paragraph.rtfStyleIndex] = paragraphFormattingInfo.styleLink;
            if (paragraphFormattingInfo.nextStyle && paragraphFormattingInfo.nextStyle >= 0)
                this.importer.importers.style.nextParagraphStyleIndexTable[this.importer.importers.style.paragraph.rtfStyleIndex] = paragraphFormattingInfo.nextStyle;
            if (name != paragraph_style_1.ParagraphStyle.normalStyleName) {
                var parentCharacterPropertiesMerger = new character_properties_merger_1.CharacterPropertiesMerger();
                parentCharacterPropertiesMerger.mergeParagraphStyle(style.parent);
                var characterMerger = new character_properties_merger_1.CharacterPropertiesMerger();
                characterMerger.mergeOnlyOwnCharacterProperties(this.importer.importers.character.characterFormatting.coreProperties, parentCharacterPropertiesMerger.innerProperties);
                style.maskedCharacterProperties = characterMerger.innerProperties;
                style.maskedParagraphProperties = paragraph_importer_1.RtfParagraphImporter.getOnlyOwnCharacterProperties(this.importer.importers.paragraph.paragraphFormatting.getCoreProperties(), style.parent);
            }
            if (paragraphFormattingInfo.paragraphListInfo.numberingListIndex >= 0) {
                var rtfIndex = this.importer.importers.style.paragraph.rtfStyleIndex;
                if (this.importer.importers.numbering.paragraphStyleListOverrideIndexMap[rtfIndex] === undefined)
                    this.importer.importers.numbering.paragraphStyleListOverrideIndexMap[rtfIndex] = paragraphFormattingInfo.paragraphListInfo;
            }
            style.primary = nestedDestination.qFormat;
            this.qFormat = false;
        }
    };
    StyleSheetDestination.getPrimaryStyleName = function (styleName) {
        for (var _i = 0, _a = styleName.split(','); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            if (!string_1.StringUtils.isNullOrEmpty(name_1))
                return string_1.StringUtils.trim(name_1);
        }
        return "";
    };
    StyleSheetDestination.prototype.createClone = function () {
        var result = new StyleSheetDestination(this.importer);
        result.styleName = this.styleName;
        return result;
    };
    StyleSheetDestination.prototype.processCharCore = function (ch) {
        if (ch != ';')
            this.styleName += ch;
    };
    StyleSheetDestination.prototype.finalizeSubDocumentCreation = function () {
    };
    StyleSheetDestination.prototype.processSpecialHexCharCore = function (_ch) {
    };
    return StyleSheetDestination;
}(destination_sub_document_1.DestinationSubDocument));
exports.StyleSheetDestination = StyleSheetDestination;
