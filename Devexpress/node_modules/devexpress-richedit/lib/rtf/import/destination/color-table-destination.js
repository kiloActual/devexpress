"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var theme_color_index_calculator_1 = require("../../../core/formats/utils/color/theme-color-index-calculator");
var tint_and_shade_calculator_1 = require("../../../core/formats/utils/color/tint-and-shade-calculator");
var color_model_info_1 = require("../../../core/model/color/color-model-info");
var dx_color_1 = require("../../../core/model/color/dx-color");
var enums_1 = require("../../../core/model/color/enums");
var color_1 = require("@devexpress/utils/lib/utils/color");
var destination_1 = require("./base/destination");
var destination_type_1 = require("./utils/destination-type");
var ColorTableDestination = (function (_super) {
    tslib_1.__extends(ColorTableDestination, _super);
    function ColorTableDestination() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.themeColorValue = enums_1.ThemeColorValues.None;
        _this.tint = ColorTableDestination.maxTintValue;
        _this.shade = ColorTableDestination.maxTintValue;
        return _this;
    }
    Object.defineProperty(ColorTableDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ColorTableDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorTableDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorTableDestination.prototype, "cache", {
        get: function () { return this.importer.documentModel.cache.colorModelInfoCache; },
        enumerable: true,
        configurable: true
    });
    ColorTableDestination.prototype.reset = function () {
        this.r = this.g = this.b = 0;
        this.wasColor = false;
        this.themeColorValue = enums_1.ThemeColorValues.None;
        this.tint = this.shade = ColorTableDestination.maxTintValue;
    };
    ColorTableDestination.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        if (hasParameter == false)
            parameterValue = 0;
        switch (keyword) {
            case "bin":
                return _super.prototype.processKeywordCore.call(this, keyword, parameterValue, hasParameter);
            case "red":
                this.r = parameterValue;
                this.wasColor = true;
                break;
            case "green":
                this.g = parameterValue;
                this.wasColor = true;
                break;
            case "blue":
                this.b = parameterValue;
                this.wasColor = true;
                break;
            case "ctint":
                this.tint = this.calculateTintOrShade(parameterValue);
                this.wasColor = true;
                break;
            case "cshade":
                this.shade = this.calculateTintOrShade(parameterValue);
                this.wasColor = true;
                break;
            case "cmaindarkone":
                this.themeColorValue = enums_1.ThemeColorValues.Dark1;
                this.wasColor = true;
                break;
            case "cmainlightone":
                this.themeColorValue = enums_1.ThemeColorValues.Light1;
                this.wasColor = true;
                break;
            case "cmaindarktwo":
                this.themeColorValue = enums_1.ThemeColorValues.Dark2;
                this.wasColor = true;
                break;
            case "cmainlighttwo":
                this.themeColorValue = enums_1.ThemeColorValues.Light2;
                this.wasColor = true;
                break;
            case "caccentone":
                this.themeColorValue = enums_1.ThemeColorValues.Accent1;
                this.wasColor = true;
                break;
            case "caccenttwo":
                this.themeColorValue = enums_1.ThemeColorValues.Accent2;
                this.wasColor = true;
                break;
            case "caccentthree":
                this.themeColorValue = enums_1.ThemeColorValues.Accent3;
                this.wasColor = true;
                break;
            case "caccentfour":
                this.themeColorValue = enums_1.ThemeColorValues.Accent4;
                this.wasColor = true;
                break;
            case "caccentfive":
                this.themeColorValue = enums_1.ThemeColorValues.Accent5;
                this.wasColor = true;
                break;
            case "caccentsix":
                this.themeColorValue = enums_1.ThemeColorValues.Accent6;
                this.wasColor = true;
                break;
            case "chyperlink":
                this.themeColorValue = enums_1.ThemeColorValues.Hyperlink;
                this.wasColor = true;
                break;
            case "cfollowedhyperlink":
                this.themeColorValue = enums_1.ThemeColorValues.FollowedHyperlink;
                this.wasColor = true;
                break;
            case "cbackgroundone":
                this.themeColorValue = enums_1.ThemeColorValues.Background1;
                this.wasColor = true;
                break;
            case "ctextone":
                this.themeColorValue = enums_1.ThemeColorValues.Text1;
                this.wasColor = true;
                break;
            case "cbackgroundtwo":
                this.themeColorValue = enums_1.ThemeColorValues.Background2;
                this.wasColor = true;
                break;
            case "ctexttwo":
                this.themeColorValue = enums_1.ThemeColorValues.Text2;
                this.wasColor = true;
                break;
            default:
                return false;
        }
        return true;
    };
    ColorTableDestination.prototype.createClone = function () {
        return new ColorTableDestination(this.importer);
    };
    ColorTableDestination.prototype.isColorValid = function () {
        return this.r >= 0 && this.r <= 255 &&
            this.g >= 0 && this.g <= 255 &&
            this.b >= 0 && this.b <= 255 ||
            this.themeColorValue != enums_1.ThemeColorValues.None;
    };
    ColorTableDestination.prototype.calculateTintOrShade = function (value) {
        if (value > 255)
            return ColorTableDestination.maxTintValue;
        if (value < 0)
            return ColorTableDestination.minTintValue;
        return value;
    };
    ColorTableDestination.prototype.processCharCore = function (ch) {
        if (ch == ';') {
            if (this.wasColor) {
                if (this.isColorValid()) {
                    var newColor = color_1.ColorUtils.fromArgbNumber(255, this.r, this.g, this.b);
                    this.importer.documentProperties.colorIndexes.collection.push(this.cache.getItem(RtfColorImportHelper.createColorModelInfo(newColor, this.tint, this.shade, this.themeColorValue)));
                }
                else
                    this.importer.throwInvalidRtfFile();
            }
            else
                this.importer.documentProperties.colorIndexes.collection.push(this.cache.getItem(color_model_info_1.ColorModelInfo.makeByColor(dx_color_1.DXColor.empty)));
            this.reset();
        }
    };
    ColorTableDestination.maxTintValue = 255;
    ColorTableDestination.minTintValue = 0;
    ColorTableDestination.autoColor = dx_color_1.DXColor.empty;
    return ColorTableDestination;
}(destination_1.DestinationBase));
exports.ColorTableDestination = ColorTableDestination;
var RtfColorImportHelper = (function () {
    function RtfColorImportHelper() {
    }
    RtfColorImportHelper.createColorModelInfo = function (color, tint, shade, themeColorValue) {
        var colorModelInfo = color_model_info_1.ColorModelInfo.makeByColor(color);
        if (themeColorValue != enums_1.ThemeColorValues.None) {
            var themeColorIndex = theme_color_index_calculator_1.ThemeColorIndexCalculator.richEditThemeColorValuesToThemeColorIndexTranslationTable[themeColorValue];
            if (themeColorIndex != enums_1.ThemeColorIndexConstants.None) {
                colorModelInfo.themeColorIndex = themeColorIndex;
                if (tint == tint_and_shade_calculator_1.TintAndShadeCalculator.maxTintValue)
                    colorModelInfo.tint = tint_and_shade_calculator_1.TintAndShadeCalculator.modifyShadeToTint(shade);
                else
                    colorModelInfo.tint = tint_and_shade_calculator_1.TintAndShadeCalculator.calculateTint(tint);
            }
        }
        return colorModelInfo;
    };
    return RtfColorImportHelper;
}());
