import { SubDocument } from '../../../../core/model/sub-document';
import { RtfFormattingInfo } from '../../model/character/rtf-formatting-info';
import { RtfImportData } from '../../rtf-import-data';
import { DestinationType } from '../utils/destination-type';
export declare type TranslateControlCharHandler = (importer: RtfImportData, ch: string) => void;
export declare type ControlCharTranslatorTable = Record<string, TranslateControlCharHandler>;
export declare type TranslateKeywordHandler = (importer: RtfImportData, parameterValue: number, hasParameter: boolean) => void;
export declare type KeywordTranslatorTable = Record<string, TranslateKeywordHandler>;
export declare abstract class DestinationBase {
    static readonly macCodePage: number;
    static readonly pcCodePage: number;
    static readonly pcaCodePage: number;
    readonly importer: RtfImportData;
    subDocument: SubDocument;
    nonEmpty: boolean;
    static defaultControlCharHT: ControlCharTranslatorTable;
    constructor(importer?: RtfImportData);
    protected createRtfFormattingInfo(): RtfFormattingInfo;
    protected abstract createClone(): DestinationBase;
    equals(destination: DestinationBase): boolean;
    protected static onSwitchToHexChar(importer: RtfImportData, _ch: string): void;
    protected static onEscapedChar(importer: RtfImportData, ch: string): void;
    static onUnicodeKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    static onOptionalGroupChar(importer: RtfImportData, _ch: string): void;
    static onBinKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onAnsiKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onMacKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onPcKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onPcaKeyword(importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onAnsiCodePageKeyword(importer: RtfImportData, parameterValue: number, hasParameter: boolean): void;
    static onHyphAutoKeyword(_importer: RtfImportData, _parameterValue: number, _hasParameter: boolean): void;
    static onUnicodeCountKeyword(importer: RtfImportData, parameterValue: number, _hasParameter: boolean): void;
    canProcessSpecialHexChar(): boolean;
    processControlChar(ch: string): void;
    processKeyword(keyword: string, parameterValue: number | null, hasParameter: boolean): boolean;
    processChar(ch: string): void;
    processText(text: string): void;
    processBinChar(ch: string): void;
    processSpecialHexChar(ch: string): void;
    protected processControlCharCore(ch: string): void;
    protected processKeywordCore(keyword: string, parameterValue: number, hasParameter: boolean): boolean;
    protected processCharCore(_ch: string): void;
    protected processTextCore(_text: string): void;
    protected processSpecialHexCharCore(_ch: string): void;
    protected processBinCharCore(_ch: string): void;
    beforePopRtfState(): void;
    afterPopRtfState(): void;
    increaseGroupLevel(): void;
    beforeNestedGroupFinished(nestedDestination: DestinationBase): void;
    protected beforeNestedGroupFinishedCore(_nestedDestination: DestinationBase): void;
    nestedGroupFinished(_nestedDestination: DestinationBase): void;
    afterNestedGroupFinished(_nestedDestination: DestinationBase): void;
    clone(): DestinationBase;
    readonly empty: DestinationBase;
    protected readonly destinationType: DestinationType;
    protected readonly controlCharHT: ControlCharTranslatorTable;
    protected readonly keywordHT: KeywordTranslatorTable;
    readonly canAppendText: boolean;
}
//# sourceMappingURL=destination.d.ts.map
