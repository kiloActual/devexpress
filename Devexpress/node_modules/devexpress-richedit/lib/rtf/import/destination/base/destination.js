"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var code_pages_1 = require("../../encoding/code-pages");
var rtf_formatting_info_1 = require("../../model/character/rtf-formatting-info");
var enums_1 = require("../../model/enums");
var destination_type_1 = require("../utils/destination-type");
var DestinationBase = (function () {
    function DestinationBase(importer) {
        if (importer) {
            this.importer = importer;
            this.subDocument = importer.subDocument;
            var rtfFormattingInfo = this.createRtfFormattingInfo();
            rtfFormattingInfo.copyFrom(importer.importers.character.characterFormatting.rtfFormattingInfo);
            importer.importers.character.characterFormatting.rtfFormattingInfo = rtfFormattingInfo;
        }
    }
    Object.defineProperty(DestinationBase, "empty", {
        get: function () { return EmptyDestination._empty; },
        enumerable: true,
        configurable: true
    });
    DestinationBase.prototype.createRtfFormattingInfo = function () {
        return new rtf_formatting_info_1.RtfFormattingInfo();
    };
    Object.defineProperty(DestinationBase.prototype, "keywordHT", {
        get: function () { return this.importer.keywordHTHolder.getHt(this.destinationType); },
        enumerable: true,
        configurable: true
    });
    DestinationBase.prototype.equals = function (destination) {
        return destination.destinationType == this.destinationType;
    };
    DestinationBase.onSwitchToHexChar = function (importer, _ch) {
        importer.parsingState = enums_1.RtfParsingState.HexData;
    };
    DestinationBase.onEscapedChar = function (importer, ch) {
        importer.flushDecoder();
        importer.destination.processChar(ch);
    };
    DestinationBase.onUnicodeKeyword = function (importer, parameterValue, _hasParameter) {
        var ch = String.fromCharCode(parameterValue & 0xFFFF);
        importer.parseUnicodeChar(ch);
    };
    DestinationBase.onOptionalGroupChar = function (importer, _ch) {
        if (importer.destination.nonEmpty)
            return;
        importer.flushDecoder();
        importer.optionalGroupLevel = importer.savedStatesCount;
    };
    DestinationBase.onBinKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter && parameterValue != 0) {
            importer.binCharCount = parameterValue;
            importer.parsingState = enums_1.RtfParsingState.BinData;
        }
        else {
            importer.decreaseSkipCount();
        }
    };
    DestinationBase.onAnsiKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.setCodePage(code_pages_1.CodePages.default);
    };
    DestinationBase.onMacKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.documentProperties.defaultCodePage = DestinationBase.macCodePage;
        importer.setCodePage(DestinationBase.macCodePage);
    };
    DestinationBase.onPcKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.documentProperties.defaultCodePage = DestinationBase.pcCodePage;
        importer.setCodePage(DestinationBase.pcCodePage);
    };
    DestinationBase.onPcaKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.documentProperties.defaultCodePage = DestinationBase.pcaCodePage;
        importer.setCodePage(DestinationBase.pcaCodePage);
    };
    DestinationBase.onAnsiCodePageKeyword = function (importer, parameterValue, hasParameter) {
        if (hasParameter) {
            importer.documentProperties.defaultCodePage = parameterValue;
            importer.setCodePage(parameterValue);
        }
    };
    DestinationBase.onHyphAutoKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationBase.onUnicodeCountKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.rtfFormattingInfo.unicodeCharacterByteCount = parameterValue;
    };
    Object.defineProperty(DestinationBase.prototype, "canAppendText", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    DestinationBase.prototype.canProcessSpecialHexChar = function () { return false; };
    DestinationBase.prototype.processControlChar = function (ch) {
        this.processControlCharCore(ch);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.processKeyword = function (keyword, parameterValue, hasParameter) {
        var result = this.processKeywordCore(keyword, parameterValue, hasParameter);
        this.nonEmpty = true;
        return result;
    };
    DestinationBase.prototype.processChar = function (ch) {
        this.processCharCore(ch);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.processText = function (text) {
        this.processTextCore(text);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.processBinChar = function (ch) {
        this.processBinCharCore(ch);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.processSpecialHexChar = function (ch) {
        this.processSpecialHexCharCore(ch);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.processControlCharCore = function (ch) {
        var translator = null;
        if (this.controlCharHT != null)
            translator = this.controlCharHT[ch];
        if (translator == null)
            translator = DestinationBase.defaultControlCharHT[ch];
        if (translator != null)
            translator(this.importer, ch);
    };
    DestinationBase.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        var translator = null;
        var kwHt = this.keywordHT;
        if (kwHt)
            translator = kwHt[keyword];
        if (translator == null)
            translator = this.importer.keywordHTHolder.defaultKeywords[keyword];
        if (translator == null)
            return false;
        translator(this.importer, parameterValue, hasParameter);
        return true;
    };
    DestinationBase.prototype.processCharCore = function (_ch) { };
    DestinationBase.prototype.processTextCore = function (_text) { };
    DestinationBase.prototype.processSpecialHexCharCore = function (_ch) { };
    DestinationBase.prototype.processBinCharCore = function (_ch) { };
    DestinationBase.prototype.beforePopRtfState = function () { };
    DestinationBase.prototype.afterPopRtfState = function () { };
    DestinationBase.prototype.increaseGroupLevel = function () { };
    DestinationBase.prototype.beforeNestedGroupFinished = function (nestedDestination) {
        this.beforeNestedGroupFinishedCore(nestedDestination);
        this.nonEmpty = true;
    };
    DestinationBase.prototype.beforeNestedGroupFinishedCore = function (_nestedDestination) {
    };
    DestinationBase.prototype.nestedGroupFinished = function (_nestedDestination) {
    };
    DestinationBase.prototype.afterNestedGroupFinished = function (_nestedDestination) {
    };
    DestinationBase.prototype.clone = function () {
        return this.createClone();
    };
    DestinationBase.macCodePage = 10000;
    DestinationBase.pcCodePage = 437;
    DestinationBase.pcaCodePage = 850;
    DestinationBase.defaultControlCharHT = new map_creator_1.MapCreator()
        .add('\'', DestinationBase.onSwitchToHexChar)
        .add('*', DestinationBase.onOptionalGroupChar)
        .get();
    return DestinationBase;
}());
exports.DestinationBase = DestinationBase;
var EmptyDestination = (function (_super) {
    tslib_1.__extends(EmptyDestination, _super);
    function EmptyDestination() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EmptyDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.EmptyDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmptyDestination.prototype, "controlCharHT", {
        get: function () { return {}; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EmptyDestination.prototype, "keywordHT", {
        get: function () { return {}; },
        enumerable: true,
        configurable: true
    });
    EmptyDestination.prototype.createClone = function () {
        return new EmptyDestination();
    };
    EmptyDestination._empty = new EmptyDestination();
    return EmptyDestination;
}(DestinationBase));
