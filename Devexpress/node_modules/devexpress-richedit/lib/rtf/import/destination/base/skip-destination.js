"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var skip_character_decoder_1 = require("../../encoding/skip-character-decoder");
var destination_type_1 = require("../utils/destination-type");
var destination_1 = require("./destination");
var SkipDestination = (function (_super) {
    tslib_1.__extends(SkipDestination, _super);
    function SkipDestination(importer) {
        var _this = _super.call(this, importer) || this;
        var formInfo = _this.importer.importers.character.characterFormatting.rtfFormattingInfo;
        _this.oldDecoder = formInfo.decoder;
        formInfo.decoder = new skip_character_decoder_1.SkipCharacterDecoder();
        return _this;
    }
    Object.defineProperty(SkipDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.SkipDestination; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SkipDestination.prototype, "controlCharHT", {
        get: function () { return null; },
        enumerable: true,
        configurable: true
    });
    ;
    SkipDestination.prototype.beforePopRtfState = function () {
        this.importer.importers.character.characterFormatting.rtfFormattingInfo.decoder = this.oldDecoder;
        _super.prototype.beforePopRtfState.call(this);
    };
    SkipDestination.prototype.processControlCharCore = function (_ch) { };
    SkipDestination.prototype.processKeywordCore = function (keyword, parameterValue, hasParameter) {
        var translator = this.keywordHT[keyword];
        if (translator) {
            translator(this.importer, parameterValue, hasParameter);
            return true;
        }
        return false;
    };
    SkipDestination.prototype.processCharCore = function (_ch) {
    };
    SkipDestination.prototype.createClone = function () {
        return new SkipDestination(this.importer);
    };
    return SkipDestination;
}(destination_1.DestinationBase));
exports.SkipDestination = SkipDestination;
