"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../../base-utils/map-creator");
var numbering_list_index_constants_1 = require("../../../../core/formats/utils/numbering-list-index-constants");
var layout_tab_space_box_1 = require("../../../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var border_info_1 = require("../../../../core/model/borders/border-info");
var enums_1 = require("../../../../core/model/borders/enums");
var character_property_descriptor_1 = require("../../../../core/model/character/character-property-descriptor");
var enums_2 = require("../../../../core/model/character/enums");
var control_1 = require("../../../../core/model/options/control");
var paragraph_1 = require("../../../../core/model/paragraph/paragraph");
var paragraph_properties_1 = require("../../../../core/model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../../../core/model/paragraph/paragraph-style");
var rich_utils_1 = require("../../../../core/model/rich-utils");
var shading_info_1 = require("../../../../core/model/shadings/shading-info");
var shading_pattern_1 = require("../../../../core/model/shadings/shading-pattern");
var shading_pattern_helper_1 = require("../../../../core/model/shadings/shading-pattern-helper");
var table_cell_properties_1 = require("../../../../core/model/tables/properties/table-cell-properties");
var table_properties_1 = require("../../../../core/model/tables/properties/table-properties");
var table_row_property_descriptor_1 = require("../../../../core/model/tables/properties/table-row-property-descriptor");
var table_base_structures_1 = require("../../../../core/model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../../core/model/tables/secondary-structures/table-units");
var rtf_art_border_converter_1 = require("../../../utils/rtf-art-border-converter");
var enums_3 = require("../../model/character/enums");
var paragraph_frame_formatting_info_1 = require("../../model/paragraph/paragraph-frame-formatting-info");
var paragraph_properties_2 = require("../../model/paragraph/paragraph-properties");
var destination_1 = require("../base/destination");
var skip_destination_1 = require("../base/skip-destination");
var text_after_destination_1 = require("../base/text-after-destination");
var text_before_destination_1 = require("../base/text-before-destination");
var picture_destination_1 = require("../picture/picture-destination");
var shape_picture_destination_1 = require("../shape/pic/shape-picture-destination");
var destination_type_1 = require("../utils/destination-type");
var enums_4 = require("../utils/enums");
var table_cell_properties_2 = require("../../../../core/model/tables/properties/table-cell-properties");
var DestinationSubDocument = (function (_super) {
    tslib_1.__extends(DestinationSubDocument, _super);
    function DestinationSubDocument(importer, targetSubDocument) {
        var _this = _super.call(this, importer) || this;
        _this.subDocument = targetSubDocument;
        return _this;
    }
    Object.defineProperty(DestinationSubDocument.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.DestinationSubDocument; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DestinationSubDocument.prototype, "controlCharHT", {
        get: function () { return DestinationSubDocument.controlCharHT; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DestinationSubDocument.prototype, "canAppendText", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    DestinationSubDocument.prototype.canProcessSpecialHexChar = function () { return true; };
    Object.defineProperty(DestinationSubDocument.prototype, "documentModel", {
        get: function () { return this.subDocument.documentModel; },
        enumerable: true,
        configurable: true
    });
    DestinationSubDocument.onParChar = function (importer, _ch) {
        importer.flushDecoder();
        importer.importers.table.tableReader.onEndParagraph();
        importer.importers.paragraph.insertParagraph();
    };
    DestinationSubDocument.onNonBreakingSpaceChar = function (importer, _ch) {
        importer.flushDecoder();
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.NonBreakingSpace);
    };
    DestinationSubDocument.onNonBreakingHyphenChar = function (importer, _ch) {
        importer.flushDecoder();
        importer.parseCharWithoutDecoding('-');
    };
    DestinationSubDocument.onOptionalHyphenChar = function (_importer, _ch) {
    };
    DestinationSubDocument.onNonShapePictureKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    DestinationSubDocument.onShapeGroupKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    DestinationSubDocument.onTabKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.TabMark);
    };
    DestinationSubDocument.onEmDashKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.EmDash);
    };
    DestinationSubDocument.onEnDashKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.EnDash);
    };
    DestinationSubDocument.onBulletKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.Bullet);
    };
    DestinationSubDocument.onLeftSingleQuoteKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.LeftSingleQuote);
    };
    DestinationSubDocument.onRightSingleQuoteKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.RightSingleQuote);
    };
    DestinationSubDocument.onLeftDoubleQuoteKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.LeftDoubleQuote);
    };
    DestinationSubDocument.onRightDoubleQuoteKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.RightDoubleQuote);
    };
    DestinationSubDocument.onEmSpaceKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.EmSpace);
    };
    DestinationSubDocument.onEnSpaceKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.EnSpace);
    };
    DestinationSubDocument.onQmSpaceKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.QmSpace);
    };
    DestinationSubDocument.onShapePictureKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new shape_picture_destination_1.ShapePictureDestination(importer);
    };
    DestinationSubDocument.onShapeKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.destination = importer.createShapeDestination();
    };
    DestinationSubDocument.onLineBreakKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.parseCharWithoutDecoding(rich_utils_1.RichUtils.specialCharacters.LineBreak);
    };
    DestinationSubDocument.onTableOfContentsEntryKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.field.startField();
        importer.destination = importer.createTableContentFieldDestination(true);
    };
    DestinationSubDocument.onTableOfContentsEntryLevelNumberKeyword = function (importer, parameterValue, hasParameter) {
        importer.destination.tableOfContentsEntryLevelNumberKeyword(parameterValue, hasParameter);
    };
    DestinationSubDocument.onTableOfContentsEntryTypeTableKeyword = function (importer, parameterValue, hasParameter) {
        importer.destination.tableOfContentsEntryTypeTableKeyword(parameterValue, hasParameter);
    };
    DestinationSubDocument.prototype.tableOfContentsEntryLevelNumberKeyword = function (parameterValue, _hasParameter) {
        this.insertTextCore(" \\l " + parameterValue);
    };
    DestinationSubDocument.prototype.tableOfContentsEntryTypeTableKeyword = function (parameterValue, hasParameter) {
        var startCharIndex = 32;
        var endCharIndex = 255;
        var type = "";
        if (hasParameter && parameterValue >= startCharIndex && parameterValue <= endCharIndex)
            type += String.fromCharCode(parameterValue);
        this.insertTextCore(" \\f " + type);
    };
    DestinationSubDocument.onFieldStartKeyword = function (importer, _parameterValue, _hasParameter) {
        var destination = importer.destination;
        destination.startNewField();
    };
    DestinationSubDocument.onDxCustomRunDataKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationSubDocument.onZeroWidthJoiner = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.insertSpecialCharacterCore(importer, '\u200D');
    };
    DestinationSubDocument.onZeroWidthNonJoiner = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.insertSpecialCharacterCore(importer, '\u200C');
    };
    DestinationSubDocument.onZeroWidthBreakOpportunity = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.insertSpecialCharacterCore(importer, '\u200C');
    };
    DestinationSubDocument.onZeroWidthNonBreakOpportunity = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.insertSpecialCharacterCore(importer, '\u200D');
    };
    DestinationSubDocument.insertSpecialCharacterCore = function (importer, specialCharacter) {
        importer.importers.character.insertText(specialCharacter);
    };
    DestinationSubDocument.onParKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onEndParagraph();
        importer.importers.paragraph.insertParagraph();
    };
    DestinationSubDocument.onParagraphStyleIndex = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.style.paragraph.rtfStyleIndex = parameterValue;
    };
    DestinationSubDocument.onTableStyleIndexForRowOrCell = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.table.tableReader.rtfTableStyleIndexForRowOrCell = parameterValue;
    };
    DestinationSubDocument.onAlignLeftKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            if (importer.importers.paragraph.paragraphFormatting.coreProperties.rightToLeft)
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Right);
            else
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Left);
    };
    DestinationSubDocument.onAlignCenterKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Center);
    };
    DestinationSubDocument.onAlignRightKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            if (importer.importers.paragraph.paragraphFormatting.coreProperties.rightToLeft)
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Left);
            else
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Right);
    };
    DestinationSubDocument.onAlignJustifyKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.alignment, paragraph_properties_1.ParagraphAlignment.Justify);
    };
    DestinationSubDocument.onLeftIndentKeyword = function (importer, parameterValue, _hasParameter) {
        var maxLeftIndent = 31681;
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && parameterValue <= maxLeftIndent)
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.leftIndent, parameterValue);
    };
    DestinationSubDocument.onRightIndentKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.rightIndent, parameterValue);
    };
    DestinationSubDocument.onFirstLineIndentKeyword = function (importer, parameterValue, _hasParameter) {
        var info = importer.importers.paragraph.paragraphFormatting;
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer)) {
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType, paragraph_properties_1.ParagraphFirstLineIndent.None);
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, 0);
            return;
        }
        var indent = parameterValue;
        if (indent > 0) {
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType, paragraph_properties_1.ParagraphFirstLineIndent.Indented);
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, indent);
        }
        else if (indent < 0) {
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType, paragraph_properties_1.ParagraphFirstLineIndent.Hanging);
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, -indent);
        }
        else {
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType, paragraph_properties_1.ParagraphFirstLineIndent.None);
            info.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, 0);
        }
    };
    DestinationSubDocument.onSpacingBeforeKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingBefore, parameterValue);
    };
    DestinationSubDocument.onLeftToRightParagraphKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.rightToLeft, false);
    };
    DestinationSubDocument.onRightToLeftParagraphKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.rightToLeft, true);
    };
    DestinationSubDocument.shouldApplyParagraphStyle = function (importer) {
        return control_1.ControlOptions.isEnabled(importer.controlOptions.paragraphStyle);
    };
    DestinationSubDocument.shouldApplyParagraphFormatting = function (importer) {
        return control_1.ControlOptions.isEnabled(importer.controlOptions.paragraphFormatting);
    };
    DestinationSubDocument.onSpacingAfterKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingAfter, parameterValue);
    };
    DestinationSubDocument.onLineSpacingTypeKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer)) {
            importer.importers.paragraph.paragraphFormatting.rtfLineSpacingType = parameterValue;
            importer.importers.paragraph.paragraphFormatting.rtfLineSpacingMultiplier = 0;
            importer.importers.paragraph.paragraphFormatting.useLineSpacingMultiplier = false;
        }
    };
    DestinationSubDocument.onLineSpacingMultiplierKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer)) {
            importer.importers.paragraph.paragraphFormatting.rtfLineSpacingMultiplier = Math.max(0, parameterValue);
            importer.importers.paragraph.paragraphFormatting.useLineSpacingMultiplier = true;
        }
    };
    DestinationSubDocument.onHyphenateParagraphKeyword = function (importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        if (hasParameter && parameterValue == 0)
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.suppressHyphenation, true);
        else
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.suppressHyphenation, false);
    };
    DestinationSubDocument.onSuppressLineNumbersKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.suppressLineNumbers, true);
    };
    DestinationSubDocument.onContextualSpacingKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.contextualSpacing, true);
    };
    DestinationSubDocument.onPageBreakBeforeKeyword = function (importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        if (!hasParameter)
            parameterValue = 1;
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.pageBreakBefore, parameterValue != 0);
    };
    DestinationSubDocument.onBeforeAutoSpacingKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer)) {
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.beforeAutoSpacing, parameterValue != 0);
            if (parameterValue != 0)
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingBefore, 0);
        }
    };
    DestinationSubDocument.onAfterAutoSpacingKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer)) {
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.afterAutoSpacing, parameterValue != 0);
            if (parameterValue != 0)
                importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.spacingAfter, 0);
        }
    };
    DestinationSubDocument.onKeepWithNextKeyword = function (importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        if (!hasParameter)
            parameterValue = 1;
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.keepWithNext, parameterValue != 0);
    };
    DestinationSubDocument.onKeepLinesTogetherKeyword = function (importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        if (!hasParameter)
            parameterValue = 1;
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.keepLinesTogether, parameterValue != 0);
    };
    DestinationSubDocument.onWidowOrphanControlOnKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.widowOrphanControl, true);
    };
    DestinationSubDocument.onWidowOrphanControlOffKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.widowOrphanControl, false);
    };
    DestinationSubDocument.onParagraphShadingKeyword = function (importer, parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = DestinationSubDocument.calculateShadingPattern(parameterValue);
    };
    DestinationSubDocument.calculateShadingPattern = function (parameterValue) {
        if (parameterValue > 0) {
            if (parameterValue > 10000)
                return shading_pattern_1.ShadingPattern.Solid;
            var index = Math.floor(parameterValue / 250);
            return shading_pattern_helper_1.ShadingHelper.getShadingPattern(index);
        }
        return shading_pattern_1.ShadingPattern.Clear;
    };
    DestinationSubDocument.onParagraphVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinVertStripe;
    };
    DestinationSubDocument.onParagraphHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzStripe;
    };
    DestinationSubDocument.onParagraphForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinReverseDiagStripe;
    };
    DestinationSubDocument.onParagraphBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagStripe;
    };
    DestinationSubDocument.onParagraphCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzCross;
    };
    DestinationSubDocument.onParagraphDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagCross;
    };
    DestinationSubDocument.onParagraphDarkHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.HorzStripe;
    };
    DestinationSubDocument.onParagraphDarkVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.VertStripe;
    };
    DestinationSubDocument.onParagraphDarkForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.ReverseDiagStripe;
    };
    DestinationSubDocument.onParagraphDarkBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.DiagStripe;
    };
    DestinationSubDocument.onParagraphDarkCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.HorzCross;
    };
    DestinationSubDocument.onParagraphDarkDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.shadingPattern = shading_pattern_1.ShadingPattern.DiagCross;
    };
    DestinationSubDocument.onParagraphFillColorKeyword = function (importer, parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.foreColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.getColorIndex = function (importer, parameterValue) {
        var props = importer.documentProperties;
        return props.colorIndexes.getRtfColorIndexById(parameterValue);
    };
    DestinationSubDocument.onParagraphBackgroundKeyword = function (importer, parameterValue, _hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        importer.importers.paragraph.paragraphFormatting.backColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.onOutlineLevelKeyword = function (importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.shouldApplyParagraphFormatting(importer))
            return;
        var level = parameterValue;
        if (level < 0 || level > 8)
            level = 0;
        else
            level++;
        if (!hasParameter)
            level = 0;
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.outlineLevel, level);
    };
    DestinationSubDocument.onResetParagraphPropertiesKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rtfTableStyleIndexForRowOrCell = 0;
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer)) {
            importer.importers.paragraph.paragraphFormatting = new paragraph_properties_2.RtfParagraphProperties();
            importer.importers.style.paragraph.rtfStyleIndex = 0;
        }
        else {
            importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = numbering_list_index_constants_1.NumberingListIndexConstants.listIndexNotSetted;
            importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = 0;
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent, 0);
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType, paragraph_properties_1.ParagraphFirstLineIndent.None);
            importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.leftIndent, 0);
        }
    };
    DestinationSubDocument.onTopParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.topBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.onBottomParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.bottomBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.onLeftParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.leftBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.onRightParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.rightBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.onBetweenParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.betweenBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.onBarParagraphBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = new border_info_1.BorderInfo();
        importer.importers.paragraph.paragraphFormatting.coreProperties.setValue(paragraph_properties_1.ParagraphPropertyDescriptor.leftBorder, border);
        importer.importers.paragraph.paragraphFormatting.processedBorder = border;
    };
    DestinationSubDocument.ensureFramePropertiesExists = function (_importer) {
        return false;
    };
    DestinationSubDocument.createDefaultFrameFormattingInfo = function () {
        var result = paragraph_frame_formatting_info_1.ParagraphFrameFormattingInfo.createDefaultInfo();
        return result;
    };
    DestinationSubDocument.onFrameHorizontalPositionKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.x = parameterValue + 1;
        }
    };
    DestinationSubDocument.onFrameHorizontalPositionNegativeKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.x = parameterValue + 1;
        }
    };
    DestinationSubDocument.onFrameHorizontalAlignmentCenterKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalPositionAlignment.Center;
        }
    };
    DestinationSubDocument.onFrameHorizontalAlignmentLeftKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalPositionAlignment.Left;
        }
    };
    DestinationSubDocument.onFrameHorizontalAlignmentRightKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalPositionAlignment.Right;
        }
    };
    DestinationSubDocument.onFrameHorizontalAlignmentInsideKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalPositionAlignment.Inside;
        }
    };
    DestinationSubDocument.onFrameHorizontalAlignmentOutsideKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalPositionAlignment.Outside;
        }
    };
    DestinationSubDocument.onFrameVerticalPositionKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.y = parameterValue + 1;
        }
    };
    DestinationSubDocument.onFrameVerticalPositionNegativeKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.y = parameterValue + 1;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentInlineKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Inline;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentTopKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Top;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentCenterKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Center;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentBottomKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Bottom;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentInsideKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Inside;
        }
    };
    DestinationSubDocument.onFrameVerticalAlignmentOutsideKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionAlignment = paragraph_frame_formatting_info_1.ParagraphFrameVerticalPositionAlignment.Outside;
        }
    };
    DestinationSubDocument.onFrameWidthKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.width = Math.abs(parameterValue);
        }
    };
    DestinationSubDocument.onFrameHeightKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.height = Math.abs(parameterValue);
            if (parameterValue < 0)
                importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalRule = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalRule.Exact;
            if (parameterValue > 0)
                importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalRule = paragraph_frame_formatting_info_1.ParagraphFrameHorizontalRule.AtLeast;
        }
    };
    DestinationSubDocument.onFramePaddingKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            var value = parameterValue;
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPadding = value;
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPadding = value;
        }
    };
    DestinationSubDocument.onFrameVerticalPaddingKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer))
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPadding = parameterValue;
    };
    DestinationSubDocument.onFrameHorizontalPaddingKeyword = function (importer, parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer))
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPadding = parameterValue;
    };
    DestinationSubDocument.onParagraphHorizontalPositionTypeMarginKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionType = enums_4.ParagraphFrameHorizontalPositionType.Margin;
        }
    };
    DestinationSubDocument.onParagraphHorizontalPositionTypePageKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionType = enums_4.ParagraphFrameHorizontalPositionType.Page;
        }
    };
    DestinationSubDocument.onParagraphHorizontalPositionTypeColumnKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.horizontalPositionType = enums_4.ParagraphFrameHorizontalPositionType.Column;
        }
    };
    DestinationSubDocument.onParagraphVerticalPositionTypeMarginKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionType = enums_4.ParagraphFrameVerticalPositionType.Margin;
        }
    };
    DestinationSubDocument.onParagraphVerticalPositionTypePageKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionType = enums_4.ParagraphFrameVerticalPositionType.Page;
        }
    };
    DestinationSubDocument.onParagraphVerticalPositionTypeLineKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.verticalPositionType = enums_4.ParagraphFrameVerticalPositionType.Paragraph;
        }
    };
    DestinationSubDocument.onFrameNoWrapKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.textWrapType = enums_4.ParagraphFrameTextWrapType.NotBeside;
        }
    };
    DestinationSubDocument.onFrameWrapOverlayKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.textWrapType = enums_4.ParagraphFrameTextWrapType.None;
        }
    };
    DestinationSubDocument.onFrameWrapDefaultKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationSubDocument.onFrameWrapAroundKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.textWrapType = enums_4.ParagraphFrameTextWrapType.Around;
        }
    };
    DestinationSubDocument.onFrameWrapTightKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.textWrapType = enums_4.ParagraphFrameTextWrapType.Tight;
        }
    };
    DestinationSubDocument.onFrameWrapThroughKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.textWrapType = enums_4.ParagraphFrameTextWrapType.Through;
        }
    };
    DestinationSubDocument.onFrameLockAnchor = function (importer, parameterValue, hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphFormatting(importer) && DestinationSubDocument.ensureFramePropertiesExists(importer)) {
            importer.importers.paragraph.paragraphFormatting.paragraphFrameFormattingInfo.lockFrameAnchorToParagraph = hasParameter ? (parameterValue != 0) : false;
        }
    };
    DestinationSubDocument.onCharacterStyleIndex = function (importer, parameterValue, _hasParameter) {
        if (control_1.ControlOptions.isEnabled(importer.controlOptions.characterStyle))
            importer.importers.style.character.rtfStyleIndex = parameterValue;
    };
    DestinationSubDocument.onBoldKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.bold, val);
    };
    DestinationSubDocument.onDeletedKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationSubDocument.onItalicKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.italic, val);
    };
    DestinationSubDocument.onUnderlineKeywordCore = function (importer, parameterValue, hasParameter, underlineType) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.underlineType, val ? underlineType : enums_2.UnderlineType.None);
    };
    DestinationSubDocument.onUnderlineSingleKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.Single);
    };
    DestinationSubDocument.onUnderlineDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.Dotted);
    };
    DestinationSubDocument.onUnderlineDashedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.Dashed);
    };
    DestinationSubDocument.onUnderlineDashDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.DashDotted);
    };
    DestinationSubDocument.onUnderlineDashDotDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.DashDotDotted);
    };
    DestinationSubDocument.onUnderlineDoubleKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.Double);
    };
    DestinationSubDocument.onUnderlineHeavyWaveKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.HeavyWave);
    };
    DestinationSubDocument.onUnderlineLongDashedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.LongDashed);
    };
    DestinationSubDocument.onUnderlineThickSingleKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickSingle);
    };
    DestinationSubDocument.onUnderlineThickDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickDotted);
    };
    DestinationSubDocument.onUnderlineThickDashedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickDashed);
    };
    DestinationSubDocument.onUnderlineThickDashDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickDashDotted);
    };
    DestinationSubDocument.onUnderlineThickDashDotDottedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickDashDotDotted);
    };
    DestinationSubDocument.onUnderlineThickLongDashedKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.ThickLongDashed);
    };
    DestinationSubDocument.onUnderlineDoubleWaveKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.DoubleWave);
    };
    DestinationSubDocument.onUnderlineWaveKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onUnderlineKeywordCore(importer, parameterValue, hasParameter, enums_2.UnderlineType.Wave);
    };
    DestinationSubDocument.onUnderlineNoneKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.underlineType, enums_2.UnderlineType.None);
    };
    DestinationSubDocument.onUnderlineWordsOnlyKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.underlineType, val ? enums_2.UnderlineType.Single : enums_2.UnderlineType.None);
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.underlineWordsOnly, val);
    };
    DestinationSubDocument.onUnderlineColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.underlineColor, DestinationSubDocument.getColorIndex(importer, parameterValue));
    };
    DestinationSubDocument.onStrikeoutKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType, val ? enums_2.StrikeoutType.Single : enums_2.StrikeoutType.None);
    };
    DestinationSubDocument.onDoubleStrikeoutKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType, val ? enums_2.StrikeoutType.Double : enums_2.StrikeoutType.None);
    };
    DestinationSubDocument.onSubscriptKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.script, val ? enums_2.CharacterFormattingScript.Subscript : enums_2.CharacterFormattingScript.Normal);
    };
    DestinationSubDocument.onSuperscriptKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.script, val ? enums_2.CharacterFormattingScript.Superscript : enums_2.CharacterFormattingScript.Normal);
    };
    DestinationSubDocument.onNoSuperAndSubScriptKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.script, enums_2.CharacterFormattingScript.Normal);
    };
    DestinationSubDocument.onLanguageKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onLanguageNpKeyword(importer, parameterValue, hasParameter);
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.noProof, false);
    };
    DestinationSubDocument.onLanguageEastAsianKeyword = function (importer, parameterValue, hasParameter) {
        DestinationSubDocument.onLanguageEastAsianNpKeyword(importer, parameterValue, hasParameter);
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.noProof, false);
    };
    DestinationSubDocument.onLanguageNpKeyword = function (_importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.checkLanguageParameter(parameterValue, hasParameter))
            return;
    };
    DestinationSubDocument.onLanguageEastAsianNpKeyword = function (_importer, parameterValue, hasParameter) {
        if (!DestinationSubDocument.checkLanguageParameter(parameterValue, hasParameter))
            return;
    };
    DestinationSubDocument.checkLanguageParameter = function (parameterValue, hasParameter) {
        return hasParameter && (parameterValue != 0) && (parameterValue != 1024);
    };
    DestinationSubDocument.onNoProofKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.noProof, val);
    };
    DestinationSubDocument.onCapsKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.allCaps, val);
    };
    DestinationSubDocument.onHiddenTextKeyword = function (importer, parameterValue, hasParameter) {
        var val = hasParameter ? parameterValue != 0 : true;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.hidden, val);
    };
    DestinationSubDocument.onFontSizeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 24;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.size, Math.max(rich_utils_1.RichUtils.minFontSize, parameterValue / 2));
    };
    DestinationSubDocument.onDoubleByteCharactersKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.fontType = enums_3.RtfFontType.DoubleByteCharactersFont;
    };
    DestinationSubDocument.onLowAnsiFontNameKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.fontType = enums_3.RtfFontType.LowAnsiCharactersFont;
    };
    DestinationSubDocument.onHighAnsiFontNameKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.characterFormatting.fontType = enums_3.RtfFontType.HighAnsiCharactersFont;
    };
    DestinationSubDocument.onAssociatedFontNameKeyword = function (importer, parameterValue, hasParameter) {
        if (importer.importers.character.characterFormatting.fontType == enums_3.RtfFontType.Undefined)
            return;
        DestinationSubDocument.onFontNameKeyword(importer, parameterValue, hasParameter);
    };
    DestinationSubDocument.onFontNameKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = importer.importers.font.defaultFontNumber;
        importer.importers.font.setFont(importer.importers.font.fonts.getRtfFontInfoById(parameterValue));
    };
    DestinationSubDocument.onShadingKeyword = function (importer, parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(DestinationSubDocument.calculateShadingPattern(parameterValue), oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinVertStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinHorzStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinReverseDiagStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinDiagStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinHorzCross, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ThinDiagCross, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.HorzStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.VertStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.ReverseDiagStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.DiagStripe, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.HorzCross, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onDarkDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.DiagCross, oldSh.backColor, oldSh.foreColor));
    };
    DestinationSubDocument.onFillColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(oldSh.shadingPattern, oldSh.backColor, DestinationSubDocument.getColorIndex(importer, parameterValue)));
    };
    DestinationSubDocument.onForeColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.textColor, DestinationSubDocument.getColorIndex(importer, parameterValue));
    };
    DestinationSubDocument.onHighlightColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.highlightColor, DestinationSubDocument.getColorIndex(importer, parameterValue));
    };
    DestinationSubDocument.onBackColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            parameterValue = 0;
        var oldSh = importer.importers.character.characterFormatting.coreProperties.shadingInfo;
        importer.importers.character.characterFormatting.coreProperties.setValue(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, new shading_info_1.ShadingInfo(oldSh.shadingPattern, DestinationSubDocument.getColorIndex(importer, parameterValue), oldSh.foreColor));
    };
    DestinationSubDocument.onPlainKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.character.onPlainKeyword();
    };
    DestinationSubDocument.onRTLRunKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationSubDocument.onLTRRunKeyword = function (_importer, _parameterValue, _hasParameter) {
    };
    DestinationSubDocument.onListOverride = function (importer, parameterValue, _hasParameter) {
        var index = importer.importers.numbering.listOverrideIndexToNumberingListIndexMap[parameterValue];
        if (index !== undefined)
            importer.importers.paragraph.paragraphFormatting.paragraphListInfo.numberingListIndex = index;
    };
    DestinationSubDocument.onListLevel = function (importer, parameterValue, _hasParameter) {
        importer.importers.paragraph.paragraphFormatting.paragraphListInfo.listLevelIndex = parameterValue;
    };
    DestinationSubDocument.onListText = function (importer, _parameterValue, _hasParameter) {
        importer.destination = new skip_destination_1.SkipDestination(importer);
    };
    DestinationSubDocument.onTabRightKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabAlignment = paragraph_1.TabAlign.Right;
    };
    DestinationSubDocument.onTabCenterKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabAlignment = paragraph_1.TabAlign.Center;
    };
    DestinationSubDocument.onTabDecimalKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabAlignment = paragraph_1.TabAlign.Decimal;
    };
    DestinationSubDocument.onTabLeaderDotsKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.Dots;
    };
    DestinationSubDocument.onTabLeaderMiddleDotsKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.MiddleDots;
    };
    DestinationSubDocument.onTabLeaderHyphensKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.Hyphens;
    };
    DestinationSubDocument.onTabLeaderUnderlineKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.Underline;
    };
    DestinationSubDocument.onTabLeaderThickLineKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.ThickLine;
    };
    DestinationSubDocument.onTabLeaderEqualSignKeyword = function (importer, _parameterValue, _hasParameter) {
        if (DestinationSubDocument.shouldApplyParagraphStyle(importer))
            importer.importers.paragraph.paragraphFormatting.tabLeader = layout_tab_space_box_1.TabLeaderType.EqualSign;
    };
    DestinationSubDocument.onTabPositionKeyword = function (importer, parameterValue, hasParameter) {
        var info = importer.importers.paragraph.paragraphFormatting;
        if (hasParameter) {
            if (Math.abs(parameterValue) <= 31681) {
                var tab = new paragraph_style_1.TabInfo(parameterValue, info.tabAlignment, info.tabLeader, false, false);
                info.tabs.tabsInfo.push(tab);
            }
        }
        info.tabAlignment = paragraph_1.TabAlign.Left;
        info.tabLeader = layout_tab_space_box_1.TabLeaderType.None;
    };
    DestinationSubDocument.onBarTabKeyword = function (importer, _parameterValue, _hasParameter) {
        var info = importer.importers.paragraph.paragraphFormatting;
        info.tabAlignment = paragraph_1.TabAlign.Left;
        info.tabLeader = layout_tab_space_box_1.TabLeaderType.None;
    };
    DestinationSubDocument.onTableRowDefaultsKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onTableRowDefaults();
    };
    DestinationSubDocument.onTableStyleKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.style = importer.importers.style.table.getModelIndex(parameterValue);
    };
    DestinationSubDocument.onInTableParagraphKeyword = function (importer, parameterValue, hasParameter) {
        importer.importers.paragraph.paragraphFormatting.inTableParagraph = !hasParameter || parameterValue != 0;
    };
    DestinationSubDocument.onRowKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onEndRow();
    };
    DestinationSubDocument.onCellKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onEndCell();
        importer.importers.paragraph.insertParagraph();
    };
    DestinationSubDocument.onNestedCellKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onEndNestedCell();
        importer.importers.paragraph.insertParagraph();
    };
    DestinationSubDocument.onNestedRowKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onEndNestedRow();
    };
    DestinationSubDocument.onNestedTablePropertiesKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onStartNestedTableProperties();
    };
    DestinationSubDocument.onItapKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue < 0)
            return;
        importer.importers.paragraph.paragraphFormatting.nestingLevel = parameterValue;
    };
    DestinationSubDocument.prototype.startNewField = function () {
        this.importer.importers.field.startField();
        this.importer.destination = this.importer.createFieldDestination();
    };
    DestinationSubDocument.prototype.nestedGroupFinished = function (nestedDestination) {
        if (nestedDestination instanceof picture_destination_1.PictureDestination)
            this.importer.importers.image.insertImage(nestedDestination.getImageInfo());
        var oldListIndex = this.importer.importers.numbering.currentOldSimpleList ?
            this.importer.importers.numbering.currentOldSimpleListIndex :
            this.importer.importers.numbering.currentOldMultiLevelListIndex;
        if (oldListIndex >= numbering_list_index_constants_1.NumberingListIndexConstants.minValue) {
            var levelNumber = this.importer.importers.numbering.currentOldSimpleList ?
                0 :
                this.importer.importers.numbering.currentOldListLevelNumber;
            var listLevel = this.importer.documentModel.numberingLists[oldListIndex].levels[levelNumber];
            if (nestedDestination instanceof text_before_destination_1.TextBeforeDestination) {
                listLevel.getListLevelProperties().displayFormatString = nestedDestination.value +
                    listLevel.getListLevelProperties().displayFormatString;
                return;
            }
            if (nestedDestination instanceof text_after_destination_1.TextAfterDestination) {
                listLevel.getListLevelProperties().displayFormatString = listLevel.getListLevelProperties().displayFormatString +
                    nestedDestination.value;
                return;
            }
        }
    };
    DestinationSubDocument.prototype.processCharCore = function (ch) {
        var props = this.importer.importers.character.characterFormatting;
        if (this.importer.importers.character.characterFormatting.rtfFormattingInfo.deleted)
            return;
        if (!props.useDoubleByteCharactersFontName && !props.useLowAnsiCharactersFontName && !props.useHighAnsiCharactersFontName)
            this.importer.importers.character.insertText(ch);
        else
            this.importer.importers.character.appendChar(ch);
    };
    DestinationSubDocument.prototype.processTextCore = function (text) {
        this.insertTextCore(text);
    };
    DestinationSubDocument.prototype.insertTextCore = function (text) {
        var props = this.importer.importers.character.characterFormatting;
        if (this.importer.importers.character.characterFormatting.rtfFormattingInfo.deleted)
            return;
        if (!props.useDoubleByteCharactersFontName && !props.useLowAnsiCharactersFontName && !props.useHighAnsiCharactersFontName)
            this.importer.importers.character.insertText(text);
        else
            for (var i = 0; i < text.length; i++)
                this.importer.importers.character.appendChar(text[i]);
    };
    DestinationSubDocument.prototype.processSpecialHexCharCore = function (ch) {
        if (ch == '\r')
            DestinationSubDocument.onParKeyword(this.importer, 0, false);
        else
            _super.prototype.processSpecialHexCharCore.call(this, ch);
    };
    DestinationSubDocument.prototype.findParentComment = function (_comment, _name) {
        return null;
    };
    DestinationSubDocument.prototype.findParenCommentInPieceTable = function (_comment) {
        return null;
    };
    DestinationSubDocument.onCellxKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.onCellxProperty(parameterValue);
    };
    DestinationSubDocument.onCellPreferredWidthKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.preferredWidth.value = parameterValue;
    };
    DestinationSubDocument.onWidthUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.preferredWidth.type = DestinationSubDocument.getWidthUnitType(parameterValue);
    };
    DestinationSubDocument.getWidthUnitType = function (parameterValue) {
        var unitType = table_units_1.TableWidthUnitType.Auto;
        switch (parameterValue) {
            case 1:
                unitType = table_units_1.TableWidthUnitType.Auto;
                break;
            case 2:
                unitType = table_units_1.TableWidthUnitType.FiftiethsOfPercent;
                break;
            case 3:
                unitType = table_units_1.TableWidthUnitType.ModelUnits;
                break;
            case 0:
            default:
                unitType = table_units_1.TableWidthUnitType.Nil;
                break;
        }
        return unitType;
    };
    DestinationSubDocument.onFirstHorizontalMergedCellKeyword = function (importer, _parameterValue, _hasParameter) {
        if (importer.importers.table.tableReader.cellProperties.horizontalMerging == table_base_structures_1.TableCellMergingState.None)
            importer.importers.table.tableReader.cellProperties.horizontalMerging = table_base_structures_1.TableCellMergingState.Restart;
    };
    DestinationSubDocument.onNextHorizontalMergedCellKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.horizontalMerging = table_base_structures_1.TableCellMergingState.Continue;
    };
    DestinationSubDocument.onFirstVerticalMergedCellKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.verticalMerging = table_base_structures_1.TableCellMergingState.Restart;
    };
    DestinationSubDocument.onNextVerticalMergedCellKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.verticalMerging = table_base_structures_1.TableCellMergingState.Continue;
    };
    DestinationSubDocument.onRowLeftKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.left = parameterValue;
    };
    DestinationSubDocument.onRowHeaderKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0) {
            importer.importers.table.tableReader.rowProperties.coreProperties.setValue(table_row_property_descriptor_1.TableRowPropertyDescriptor.header, true);
        }
    };
    DestinationSubDocument.onRowHeightKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        var val = parameterValue;
        var row = importer.importers.table.tableReader.rowProperties;
        row.height.value = Math.abs(val);
        if (parameterValue < 0)
            row.height.type = table_units_1.TableHeightUnitType.Exact;
        else if (parameterValue > 0)
            row.height.type = table_units_1.TableHeightUnitType.Minimum;
        else
            row.height.type = table_units_1.TableHeightUnitType.Auto;
    };
    DestinationSubDocument.onRowKeepKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0) {
            importer.importers.table.tableReader.rowProperties.coreProperties.setValue(table_row_property_descriptor_1.TableRowPropertyDescriptor.cantSplit, true);
        }
    };
    DestinationSubDocument.onTableRightAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.coreProperties.setValue(table_row_property_descriptor_1.TableRowPropertyDescriptor.rowAlignment, table_base_structures_1.TableRowAlignment.Right);
    };
    DestinationSubDocument.onTableLeftAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.coreProperties.setValue(table_row_property_descriptor_1.TableRowPropertyDescriptor.rowAlignment, table_base_structures_1.TableRowAlignment.Left);
    };
    DestinationSubDocument.onTableCenterAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.coreProperties.setValue(table_row_property_descriptor_1.TableRowPropertyDescriptor.rowAlignment, table_base_structures_1.TableRowAlignment.Center);
    };
    DestinationSubDocument.onSpaceBetweenCellsKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.halfSpace = parameterValue;
    };
    DestinationSubDocument.onTableBottomCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseBottomMargin, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.bottom.value = parameterValue;
    };
    DestinationSubDocument.onTableLeftCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseLeftMargin, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.left.value = parameterValue;
    };
    DestinationSubDocument.onTableRightCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseRightMargin, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.right.value = parameterValue;
    };
    DestinationSubDocument.onTableTopCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTopMargin, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.top.value = parameterValue;
    };
    DestinationSubDocument.onTableBottomCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseBottomMargin, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.bottom, parameterValue);
    };
    DestinationSubDocument.assignWidthUnitInfo = function (unitInfo, value) {
        if (value == 3)
            unitInfo.type = table_units_1.TableWidthUnitType.ModelUnits;
        else if (value == 0)
            unitInfo.type = table_units_1.TableWidthUnitType.Nil;
    };
    DestinationSubDocument.onTableLeftCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseLeftMargin, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.left, parameterValue);
    };
    DestinationSubDocument.onTableRightCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseRightMargin, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.right, parameterValue);
    };
    DestinationSubDocument.onTableTopCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTopMargin, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellMargins.top, parameterValue);
    };
    DestinationSubDocument.onTableBottomCellSpacingKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing.value = parameterValue;
    };
    DestinationSubDocument.onTableLeftCellSpacingKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing.value = parameterValue;
    };
    DestinationSubDocument.onTableRightCellSpacingKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing.value = parameterValue;
    };
    DestinationSubDocument.onTableTopCellSpacingKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing.value = parameterValue;
    };
    DestinationSubDocument.onTableBottomCellSpacingUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing, parameterValue);
    };
    DestinationSubDocument.onTableLeftCellSpacingUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing, parameterValue);
    };
    DestinationSubDocument.onTableRightCellSpacingUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing, parameterValue);
    };
    DestinationSubDocument.onTableTopCellSpacingUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseCellSpacing, true);
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.tableProperties.coreProperties.cellSpacing, parameterValue);
    };
    DestinationSubDocument.onTablePreferredWidthKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.preferredWidth.value = parameterValue;
    };
    DestinationSubDocument.onTablePreferredWidthUnitTypeKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.preferredWidth.type = DestinationSubDocument.getWidthUnitType(parameterValue);
    };
    DestinationSubDocument.onWidthBeforeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.widthBefore.value = parameterValue;
    };
    DestinationSubDocument.onWidthBeforeUnitTypeKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.widthBefore.type = DestinationSubDocument.getWidthUnitType(parameterValue);
    };
    DestinationSubDocument.onWidthAfterKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.widthAfter.value = parameterValue;
    };
    DestinationSubDocument.onWidthAfterUnitTypeKeyword = function (importer, parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.widthAfter.type = DestinationSubDocument.getWidthUnitType(parameterValue);
    };
    DestinationSubDocument.onRowBackgroundColorKeyword = function (importer, parameterValue, hasParameter) {
        var colorIndexTable = importer.documentProperties.colorIndexes;
        if (!hasParameter || parameterValue > colorIndexTable.collection.length - 1)
            return;
        importer.importers.table.tableReader.rowProperties.backColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.onRowForegroundColorKeyword = function (importer, parameterValue, hasParameter) {
        var colorIndexTable = importer.documentProperties.colorIndexes;
        if (!hasParameter || parameterValue > colorIndexTable.collection.length - 1)
            return;
        importer.importers.table.tableReader.rowProperties.foreColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.onRowPatternKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.shadingPattern = DestinationSubDocument.calculateShadingPattern(parameterValue);
    };
    DestinationSubDocument.onRowShadingKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.shadingPattern = DestinationSubDocument.calculateShadingPattern(parameterValue);
    };
    DestinationSubDocument.onRowVerticalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinVertStripe;
    };
    DestinationSubDocument.onRowHorizontalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzStripe;
    };
    DestinationSubDocument.onRowForwardDiagonalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinReverseDiagStripe;
    };
    DestinationSubDocument.onRowBackwardDiagonalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagStripe;
    };
    DestinationSubDocument.onRowCrossPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzCross;
    };
    DestinationSubDocument.onRowDiagonalCrossPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagCross;
    };
    DestinationSubDocument.onRowDarkHorizontalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.HorzStripe;
    };
    DestinationSubDocument.onRowDarkVerticalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.VertStripe;
    };
    DestinationSubDocument.onRowDarkForwardDiagonalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.ReverseDiagStripe;
    };
    DestinationSubDocument.onRowDarkBackwardDiagonalPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.DiagStripe;
    };
    DestinationSubDocument.onRowDarkCrossPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.HorzCross;
    };
    DestinationSubDocument.onRowDarkDiagonalCrossPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.shadingPattern = shading_pattern_1.ShadingPattern.DiagCross;
    };
    DestinationSubDocument.onTableIndentKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTableIndent, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.indent.value = parameterValue;
    };
    DestinationSubDocument.onTableIndentUnitType = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTableIndent, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.indent.type = DestinationSubDocument.getWidthUnitType(parameterValue);
    };
    DestinationSubDocument.onCellFitTextKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0)
            importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.fitText, true);
    };
    DestinationSubDocument.onCellNoWrapKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0)
            importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.noWrap, true);
    };
    DestinationSubDocument.onCellVerticalAlignmentTopKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Top);
    };
    DestinationSubDocument.onCellVerticalAlignmentCenterKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Center);
    };
    DestinationSubDocument.onCellVerticalAlignmentBottomKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Bottom);
    };
    DestinationSubDocument.onCellHideMarkKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0)
            importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.hideCellMark, true);
    };
    DestinationSubDocument.onCellBottomCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.bottomMargin, table_units_1.TableWidthUnit.create(parameterValue, table_units_1.TableWidthUnitType.ModelUnits));
    };
    DestinationSubDocument.onCellLeftCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.topMargin, table_units_1.TableWidthUnit.create(parameterValue, table_units_1.TableWidthUnitType.ModelUnits));
    };
    DestinationSubDocument.onCellRightCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.rightMargin, table_units_1.TableWidthUnit.create(parameterValue, table_units_1.TableWidthUnitType.ModelUnits));
    };
    DestinationSubDocument.onCellTopCellMarginKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.coreProperties.cellMargins.left.value = parameterValue;
    };
    DestinationSubDocument.onCellBottomCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.cellProperties.coreProperties.cellMargins.bottom, parameterValue);
    };
    DestinationSubDocument.onCellLeftCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.cellProperties.coreProperties.cellMargins.top, parameterValue);
    };
    DestinationSubDocument.onCellRightCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.cellProperties.coreProperties.cellMargins.right, parameterValue);
    };
    DestinationSubDocument.onCellTopCellMarginUnitTypeKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        DestinationSubDocument.assignWidthUnitInfo(importer.importers.table.tableReader.cellProperties.coreProperties.cellMargins.left, parameterValue);
    };
    DestinationSubDocument.onTableOverlapKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue != 0) {
            importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseIsTableOverlap, true);
            importer.importers.table.tableReader.tableProperties.coreProperties.isTableOverlap = false;
        }
    };
    DestinationSubDocument.onTableLeftFromTextKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.floatingPosition.leftFromText = parameterValue;
    };
    DestinationSubDocument.onTableRightFromTextKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.floatingPosition.rightFromText = parameterValue;
    };
    DestinationSubDocument.onTableTopFromTextKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.floatingPosition.topFromText = parameterValue;
    };
    DestinationSubDocument.onTableBottomFromTextKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.rowProperties.floatingPosition.bottomFromText = parameterValue;
    };
    DestinationSubDocument.onColHorizontalAnchorKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAnchor = table_base_structures_1.HorizontalAnchorTypes.Column;
    };
    DestinationSubDocument.onMarginHorizontalAnchorKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAnchor = table_base_structures_1.HorizontalAnchorTypes.Margin;
    };
    DestinationSubDocument.onPageHorizontalAnchorKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAnchor = table_base_structures_1.HorizontalAnchorTypes.Page;
    };
    DestinationSubDocument.onTableHorizontalPositionKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        if (parameterValue != 0)
            importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
    };
    DestinationSubDocument.onTableVerticalPositionKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        if (parameterValue != 0)
            importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
        importer.importers.table.tableReader.rowProperties.floatingPosition.tableVerticalPosition = parameterValue;
    };
    DestinationSubDocument.onCenterTableHorizontalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAlign = table_base_structures_1.HorizontalAlignMode.Center;
    };
    DestinationSubDocument.onInsideTableHorizontalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAlign = table_base_structures_1.HorizontalAlignMode.Inside;
    };
    DestinationSubDocument.onLeftTableHorizontalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAlign = table_base_structures_1.HorizontalAlignMode.Left;
    };
    DestinationSubDocument.onOutsideTableHorizontalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAlign = table_base_structures_1.HorizontalAlignMode.Outside;
    };
    DestinationSubDocument.onRightTableHorizontalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.horizontalAlign = table_base_structures_1.HorizontalAlignMode.Right;
    };
    DestinationSubDocument.onBottomTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Bottom;
    };
    DestinationSubDocument.onCenterTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Center;
    };
    DestinationSubDocument.onInlineTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Inline;
    };
    DestinationSubDocument.onInsideTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Inside;
    };
    DestinationSubDocument.onOutsideTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Outside;
    };
    DestinationSubDocument.onTopTableVerticalAlignKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAlign = table_base_structures_1.VerticalAlignMode.Top;
    };
    DestinationSubDocument.onMarginVerticalAnchorKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAnchor = table_base_structures_1.VerticalAnchorTypes.Margin;
    };
    DestinationSubDocument.onParagraphVerticalAnchorKeword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAnchor = table_base_structures_1.VerticalAnchorTypes.Paragraph;
    };
    DestinationSubDocument.onPageVerticalAnchorKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.rowProperties.floatingPosition.textWrapping = table_base_structures_1.TextWrapping.Around;
        importer.importers.table.tableReader.rowProperties.floatingPosition.verticalAnchor = table_base_structures_1.VerticalAnchorTypes.Page;
    };
    DestinationSubDocument.onTopTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTopBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.topBorder;
    };
    DestinationSubDocument.onLeftTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseLeftBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.leftBorder;
    };
    DestinationSubDocument.onBottomTableBorderKeword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseBottomBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.bottomBorder;
    };
    DestinationSubDocument.onRightTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseRightBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.rightBorder;
    };
    DestinationSubDocument.onHorizontalTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseInsideHorizontalBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.insideHorizontalBorder;
    };
    DestinationSubDocument.onVerticalTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseInsideVerticalBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.tableProperties.coreProperties.borders.insideVerticalBorder;
    };
    DestinationSubDocument.onNoTableBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        if (importer.importers.table.tableReader.processedBorder == null)
            return;
        importer.importers.table.tableReader.processedBorder.style = enums_1.BorderLineStyle.None;
        importer.importers.table.tableReader.processedBorder = null;
    };
    DestinationSubDocument.onBottomCellBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.bottomBorder;
    };
    DestinationSubDocument.onTopCellBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.topBorder;
    };
    DestinationSubDocument.onLeftCellBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.leftBorder;
    };
    DestinationSubDocument.onRightCellBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.rightBorder;
    };
    DestinationSubDocument.onUpperLeftToLowerRightBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.topLeftDiagonalBorder;
    };
    DestinationSubDocument.onUpperRightToLowerLeftBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder, true);
        importer.importers.table.tableReader.processedBorder = importer.importers.table.tableReader.cellProperties.coreProperties.borders.topRightDiagonalBorder;
    };
    DestinationSubDocument.onCellTextTopAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Top);
    };
    DestinationSubDocument.onCellTextCenterVerticalAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Center);
    };
    DestinationSubDocument.onCellTextBottomAlignmentKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.setValue(table_cell_properties_2.TableCellPropertyDescriptor.vertivalAlignment, table_base_structures_1.TableCellVerticalAlignment.Bottom);
    };
    DestinationSubDocument.onCellLeftToRightTopToBottomTextDirectionKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.textDirection = table_base_structures_1.TextDirection.LeftToRightTopToBottom;
    };
    DestinationSubDocument.onCellTopToBottomRightToLeftTextDirectionKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.textDirection = table_base_structures_1.TextDirection.TopToBottomRightToLeft;
    };
    DestinationSubDocument.onCellBottomToTopLeftToRightTextDirectionKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.textDirection = table_base_structures_1.TextDirection.BottomToTopLeftToRight;
    };
    DestinationSubDocument.onCellLeftToRightTopToBottomVerticalTextDirectionKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.textDirection = table_base_structures_1.TextDirection.LeftToRightTopToBottomRotated;
    };
    DestinationSubDocument.onCellTopToBottomRightToLeftVerticalTextDirectionKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.coreProperties.textDirection = table_base_structures_1.TextDirection.TopToBottomRightToLeftRotated;
    };
    DestinationSubDocument.onCellBackgroundColorKeyword = function (importer, parameterValue, hasParameter) {
        var colorIndexTable = importer.documentProperties.colorIndexes;
        if (!hasParameter || parameterValue > colorIndexTable.collection.length - 1)
            return;
        importer.importers.table.tableReader.cellProperties.backColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.onCellForegroundColorKeyword = function (importer, parameterValue, hasParameter) {
        var colorIndexTable = importer.documentProperties.colorIndexes;
        if (!hasParameter || parameterValue > colorIndexTable.collection.length - 1)
            return;
        importer.importers.table.tableReader.cellProperties.foreColor = DestinationSubDocument.getColorIndex(importer, parameterValue);
    };
    DestinationSubDocument.onCellShadingKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter)
            return;
        importer.importers.table.tableReader.cellProperties.shadingPattern = DestinationSubDocument.calculateShadingPattern(parameterValue);
    };
    DestinationSubDocument.onCellNoShadingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.Nil;
    };
    DestinationSubDocument.onCellVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinVertStripe;
    };
    DestinationSubDocument.onCellHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzStripe;
    };
    DestinationSubDocument.onCellForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinReverseDiagStripe;
    };
    DestinationSubDocument.onCellBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagStripe;
    };
    DestinationSubDocument.onCellCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinHorzCross;
    };
    DestinationSubDocument.onCellDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ThinDiagCross;
    };
    DestinationSubDocument.onCellDarkHorizontalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.HorzStripe;
    };
    DestinationSubDocument.onCellDarkVerticalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.VertStripe;
    };
    DestinationSubDocument.onCellDarkForwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.ReverseDiagStripe;
    };
    DestinationSubDocument.onCellDarkBackwardDiagonalBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.DiagStripe;
    };
    DestinationSubDocument.onCellDarkCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.HorzCross;
    };
    DestinationSubDocument.onCellDarkDiagonalCrossBackgroundPatternKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.cellProperties.shadingPattern = shading_pattern_1.ShadingPattern.DiagCross;
    };
    DestinationSubDocument.onTableAutoFitKeyword = function (importer, parameterValue, _hasParameter) {
        var val = Math.abs(parameterValue);
        if (val > 1)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTableLayout, true);
        if (val == 1)
            importer.importers.table.tableReader.tableProperties.coreProperties.layoutType = table_base_structures_1.TableLayoutType.Autofit;
        else
            importer.importers.table.tableReader.tableProperties.coreProperties.layoutType = table_base_structures_1.TableLayoutType.Fixed;
    };
    DestinationSubDocument.onApplyFirstRowConditionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.ApplyFirstRow;
    };
    DestinationSubDocument.onApplyLastRowConditionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.ApplyLastRow;
    };
    DestinationSubDocument.onApplyFirstColumnContitionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.ApplyFirstColumn;
    };
    DestinationSubDocument.onApplyLastColumnConditionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.ApplyLastColumn;
    };
    DestinationSubDocument.onDoNotApplyRowBandingConditionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.DoNotApplyRowBanding;
    };
    DestinationSubDocument.onDoNotApplyColumnBandingConditionalFormattingKeyword = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.lookTypes |= table_base_structures_1.TableLookTypes.DoNotApplyColumnBanding;
    };
    DestinationSubDocument.onRowBandSizeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTableStyleRowBandSize, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.tableStyleRowBandSize = parameterValue;
    };
    DestinationSubDocument.onColumnBandSizeKeyword = function (importer, parameterValue, hasParameter) {
        if (parameterValue < 0 || !hasParameter)
            return;
        importer.importers.table.tableReader.tableProperties.coreProperties.setUseValue(table_properties_1.TablePropertiesMask.UseTableStyleColBandSize, true);
        importer.importers.table.tableReader.tableProperties.coreProperties.tableStyleColumnBandSize = parameterValue;
    };
    DestinationSubDocument.onLtrRow = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.rightToLeft = false;
    };
    DestinationSubDocument.onRtlRow = function (importer, _parameterValue, _hasParameter) {
        importer.importers.table.tableReader.tableProperties.rightToLeft = true;
    };
    DestinationSubDocument.onNoBorderKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setNoBorderType(importer, enums_1.BorderLineStyle.Nil);
    };
    DestinationSubDocument.onBorderSpaceKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue < 0)
            return;
        var border = importer.importers.table.tableReader.processedBorder;
        if (border)
            border.offset = parameterValue;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (paragraphBorder)
            paragraphBorder.offset = parameterValue;
    };
    DestinationSubDocument.assignDefaultBorderWidth = function (_border) {
    };
    DestinationSubDocument.setBorderType = function (importer, style) {
        var border = importer.importers.table.tableReader.processedBorder;
        if (border) {
            DestinationSubDocument.assignDefaultBorderWidth(border);
            border.style = style;
        }
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (paragraphBorder)
            paragraphBorder.style = style;
    };
    DestinationSubDocument.setNoBorderType = function (importer, style) {
        var border = importer.importers.table.tableReader.processedBorder;
        if (border)
            border.style = style;
        importer.importers.table.tableReader.processedBorder = null;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (paragraphBorder)
            paragraphBorder.style = style;
        importer.importers.paragraph.paragraphFormatting.processedBorder = null;
    };
    DestinationSubDocument.onSingleThicknessBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Single);
    };
    DestinationSubDocument.onDoubleThicknessBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = importer.importers.table.tableReader.processedBorder;
        if (border) {
            DestinationSubDocument.assignDefaultBorderWidth(border);
            border.width *= 2;
            border.style = enums_1.BorderLineStyle.Single;
        }
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (paragraphBorder) {
            paragraphBorder.width *= 2;
            paragraphBorder.style = enums_1.BorderLineStyle.Single;
        }
    };
    DestinationSubDocument.onBorderWidthKeyword = function (importer, parameterValue, _hasParameter) {
        var border = importer.importers.table.tableReader.processedBorder;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (!border && !paragraphBorder)
            return;
        var maxBorderWidth = 255;
        var val = parameterValue > 0 ?
            parameterValue > maxBorderWidth ? maxBorderWidth : parameterValue :
            0;
        if (border)
            border.width = val > 0 ? val : 1;
        if (paragraphBorder)
            paragraphBorder.width = val > 0 ? val : 1;
    };
    DestinationSubDocument.onBorderColorKeyword = function (importer, parameterValue, hasParameter) {
        if (!hasParameter || parameterValue < 0)
            return;
        var border = importer.importers.table.tableReader.processedBorder;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (!border && !paragraphBorder)
            return;
        var colorIndexTable = importer.documentProperties.colorIndexes;
        if (parameterValue > colorIndexTable.collection.length - 1)
            return;
        var color = colorIndexTable.getRtfColorIndexById(parameterValue);
        if (border)
            border.color = color;
        if (paragraphBorder)
            paragraphBorder.color = color;
    };
    DestinationSubDocument.onDoubleBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Double);
    };
    DestinationSubDocument.onDottedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Dotted);
    };
    DestinationSubDocument.onDashedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Dashed);
    };
    DestinationSubDocument.onHairlineBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        var border = importer.importers.table.tableReader.processedBorder;
        if (border) {
            border.style = enums_1.BorderLineStyle.Single;
            border.width = 1;
        }
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (paragraphBorder) {
            paragraphBorder.style = enums_1.BorderLineStyle.Single;
            paragraphBorder.width = 1;
        }
    };
    DestinationSubDocument.onSmallDashedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.DashSmallGap);
    };
    DestinationSubDocument.onDotDashedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.DotDash);
    };
    DestinationSubDocument.onDotDotDashedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.DotDotDash);
    };
    DestinationSubDocument.onInsetBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Inset);
    };
    DestinationSubDocument.onNoneBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setNoBorderType(importer, enums_1.BorderLineStyle.None);
    };
    DestinationSubDocument.onNilBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setNoBorderType(importer, enums_1.BorderLineStyle.Nil);
    };
    DestinationSubDocument.onOutsetBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Outset);
    };
    DestinationSubDocument.onTripletBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Triple);
    };
    DestinationSubDocument.onSmallThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThickThinSmallGap);
    };
    DestinationSubDocument.onSmallThinThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickThinSmallGap);
    };
    DestinationSubDocument.onMediumThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThickThinMediumGap);
    };
    DestinationSubDocument.onMediumThinThickBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickMediumGap);
    };
    DestinationSubDocument.onMediumThinThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickThinMediumGap);
    };
    DestinationSubDocument.onLargeThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThickThinLargeGap);
    };
    DestinationSubDocument.onLargeThinThickBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickLargeGap);
    };
    DestinationSubDocument.onLargeThinThickThinBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickThinLargeGap);
    };
    DestinationSubDocument.onWavyBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.Wave);
    };
    DestinationSubDocument.onDoubleWavyBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.DoubleWave);
    };
    DestinationSubDocument.onStripedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.DashDotStroked);
    };
    DestinationSubDocument.onEmbossedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThreeDEmboss);
    };
    DestinationSubDocument.onEngravedBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThreeDEngrave);
    };
    DestinationSubDocument.onSmallThinThickBorderTypeKeyword = function (importer, _parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, enums_1.BorderLineStyle.ThinThickSmallGap);
    };
    DestinationSubDocument.onBorderArtIndex = function (importer, parameterValue, _hasParameter) {
        DestinationSubDocument.setBorderType(importer, rtf_art_border_converter_1.RtfArtBorderConverter.getBorderLineStyle(parameterValue));
    };
    DestinationSubDocument.onFrameBorderKeyword = function (importer, parameterValue, hasParameter) {
        var border = importer.importers.table.tableReader.processedBorder;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (!border && !paragraphBorder)
            return;
        if (!hasParameter || parameterValue != 0) {
            if (border)
                border.frame = true;
            if (paragraphBorder)
                paragraphBorder.frame = true;
        }
    };
    DestinationSubDocument.onShadowedBorderTypeKeyword = function (importer, parameterValue, hasParameter) {
        var border = importer.importers.table.tableReader.processedBorder;
        var paragraphBorder = importer.importers.paragraph.paragraphFormatting.processedBorder;
        if (!border && !paragraphBorder)
            return;
        if (!hasParameter || parameterValue != 0) {
            if (border)
                border.shadow = true;
            if (paragraphBorder)
                paragraphBorder.shadow = true;
        }
    };
    DestinationSubDocument.controlCharHT = new map_creator_1.MapCreator()
        .add('\r', DestinationSubDocument.onParChar)
        .add('\n', DestinationSubDocument.onParChar)
        .add('\\', DestinationSubDocument.onEscapedChar)
        .add('{', DestinationSubDocument.onEscapedChar)
        .add('}', DestinationSubDocument.onEscapedChar)
        .add('~', DestinationSubDocument.onNonBreakingSpaceChar)
        .add('_', DestinationSubDocument.onNonBreakingHyphenChar)
        .add('-', DestinationSubDocument.onOptionalHyphenChar)
        .get();
    return DestinationSubDocument;
}(destination_1.DestinationBase));
exports.DestinationSubDocument = DestinationSubDocument;
