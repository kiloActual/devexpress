"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var rtf_drawing_keywords_1 = require("../../../translation-table/rtf-drawing-keywords");
var shape_properties_info_1 = require("../../model/shape/shape-properties-info");
var destination_type_1 = require("../utils/destination-type");
var shape_destination_base_1 = require("./shape-destination-base");
var ShapeDestination = (function (_super) {
    tslib_1.__extends(ShapeDestination, _super);
    function ShapeDestination(importer, shapeProperties) {
        if (shapeProperties === void 0) { shapeProperties = new shape_properties_info_1.RtfShapePropertiesInfo(); }
        return _super.call(this, importer, shapeProperties) || this;
    }
    Object.defineProperty(ShapeDestination.prototype, "destinationType", {
        get: function () { return destination_type_1.DestinationType.ShapeDestination; },
        enumerable: true,
        configurable: true
    });
    ShapeDestination.prototype.createClone = function () {
        return new ShapeDestination(this.importer, this.shapeProperties);
    };
    ShapeDestination.prototype.beforePopRtfState = function () {
        _super.prototype.beforePopRtfState.call(this);
        var imageInfo = this.shapeProperties.getPropertyOrNull(rtf_drawing_keywords_1.RtfDrawingKeywords.PictureBinaryData);
        if (imageInfo && imageInfo.base64) {
            this.importer.importers.image.insertImageShape(imageInfo, this.shapeProperties, false);
        }
        else {
            this.importer.importers.shape.insertShape(this.importer, this.shapeProperties);
        }
    };
    return ShapeDestination;
}(shape_destination_base_1.ShapeDestinationBase));
exports.ShapeDestination = ShapeDestination;
