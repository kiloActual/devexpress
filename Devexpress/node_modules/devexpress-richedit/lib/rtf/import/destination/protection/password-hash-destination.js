"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var document_protection_1 = require("../../../../core/model/options/document-protection");
var hex_stream_destination_1 = require("../base/hex-stream-destination");
var PasswordHashDestination = (function (_super) {
    tslib_1.__extends(PasswordHashDestination, _super);
    function PasswordHashDestination(importer, dataStream) {
        if (dataStream === void 0) { dataStream = []; }
        return _super.call(this, importer, dataStream) || this;
    }
    PasswordHashDestination.prototype.createClone = function () {
        return new PasswordHashDestination(this.importer, this.dataStream);
    };
    PasswordHashDestination.prototype.afterPopRtfState = function () {
        var uint8Array = new Uint8Array(this.getNumberArray());
        var uint32Array = new Uint32Array(uint8Array.buffer);
        var properties = this.importer.documentModel.documentProtectionProperties;
        properties.cryptProviderType = uint32Array[2] == 24 ? document_protection_1.CryptProviderType.RsaAES : document_protection_1.CryptProviderType.RsaFull;
        properties.hashAlgorithmType = (uint32Array[3] - 0x8000);
        properties.hashIterationCount = uint32Array[4];
        var passwordHashLength = uint32Array[5];
        var passwordPrefixLength = uint32Array[6];
        var startPasswordHashIndex = 40;
        properties.passwordHash = uint8Array.subarray(startPasswordHashIndex, startPasswordHashIndex + passwordHashLength);
        var startpasswordPrefixIndex = startPasswordHashIndex + passwordHashLength;
        properties.passwordPrefix = uint8Array.subarray(startpasswordPrefixIndex, startpasswordPrefixIndex + passwordPrefixLength);
    };
    return PasswordHashDestination;
}(hex_stream_destination_1.HexStreamDestination));
exports.PasswordHashDestination = PasswordHashDestination;
