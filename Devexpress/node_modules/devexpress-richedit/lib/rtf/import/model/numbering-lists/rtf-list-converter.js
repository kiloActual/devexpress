"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var numbering_list_index_constants_1 = require("../../../../core/formats/utils/numbering-list-index-constants");
var list_level_1 = require("../../../../core/model/numbering-lists/list-level");
var numbering_helper_1 = require("../../../../core/model/numbering-lists/numbering-helper");
var numbering_list_1 = require("../../../../core/model/numbering-lists/numbering-list");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_numbering_list_1 = require("./rtf-numbering-list");
var RtfListConverter = (function () {
    function RtfListConverter(importer) {
        this.styleCrossTable = {};
        this.importer = importer;
    }
    Object.defineProperty(RtfListConverter.prototype, "documentModel", {
        get: function () { return this.importer.documentModel; },
        enumerable: true,
        configurable: true
    });
    RtfListConverter.prototype.convert = function (listTable, listOverrideTable) {
        this.createAbstractNumberingLists(listTable);
        this.fixBrokenListStyles();
        this.createNumberingListsCore(listOverrideTable, listTable);
    };
    RtfListConverter.prototype.fixBrokenListStyles = function () {
        var _this = this;
        list_1.ListUtils.forEach(this.documentModel.numberingListStyles, function (style, i) {
            var abstractListIndex = _this.findAbstractNumberingListByStyle(i);
            if (style.numberingListIndex < numbering_list_index_constants_1.NumberingListIndexConstants.minValue && abstractListIndex != -1) {
                _this.documentModel.numberingLists.push(new numbering_list_1.NumberingList(_this.documentModel, abstractListIndex));
                style.numberingListIndex = _this.documentModel.numberingLists.length - 1;
            }
        });
    };
    RtfListConverter.prototype.findAbstractNumberingListByStyle = function (_styleIndex) {
        return -1;
    };
    RtfListConverter.prototype.createNumberingListsCore = function (listOverrideTable, _listTable) {
        var count = listOverrideTable.length;
        var abstractNumberingLists = this.documentModel.abstractNumberingLists;
        for (var i = 0; i < count; i++) {
            var rtfList = listOverrideTable[i];
            var sourceListIndex = this.getListIndex(rtfList.listId, abstractNumberingLists);
            if (sourceListIndex < 0)
                continue;
            var list = new numbering_list_1.NumberingList(this.documentModel, sourceListIndex);
            var overrideId = rtfList.id;
            this.documentModel.numberingLists.push(list);
            this.convertRtfOverrideToNumbering(list, rtfList);
            var numberingListIndex = this.documentModel.numberingLists.length - 1;
            this.importer.importers.numbering.listOverrideIndexToNumberingListIndexMap[overrideId] = numberingListIndex;
            list.innerId = this.documentModel.numberingLists.length;
        }
    };
    RtfListConverter.prototype.createAbstractNumberingLists = function (listTable) {
        var _this = this;
        listTable.forEach(function (rtfList) {
            _this.createAbstractNumberingList(rtfList);
        });
    };
    RtfListConverter.prototype.createAbstractNumberingList = function (rtfList) {
        var list = list_1.ListUtils.elementBy(this.documentModel.abstractNumberingLists, function (list) { return list.innerId == rtfList.id; });
        if (rtfList.id == -1 || !list) {
            list = new numbering_list_1.AbstractNumberingList(this.documentModel);
            this.convertRtfListToNumberingList(rtfList.levels, list);
            if (this.isHybridList(rtfList))
                this.setHybridListType(list);
            list.innerId = rtfList.id;
            this.documentModel.abstractNumberingLists.push(list);
        }
        return list;
    };
    RtfListConverter.prototype.isHybridList = function (rtfList) {
        if (rtfList.numberingListType != rtf_numbering_list_1.RtfNumberingListType.Unknown)
            return true;
        var levels = rtfList.levels;
        for (var _i = 0, levels_1 = levels; _i < levels_1.length; _i++) {
            var value = levels_1[_i];
            if (value.listLevelProperties.templateCode != 0)
                return true;
        }
        return false;
    };
    RtfListConverter.prototype.setHybridListType = function (list) {
        var _this = this;
        list.levels.forEach(function (listLevel) {
            listLevel.changeListLevelProperties(function (properties) {
                if (properties.templateCode === 0)
                    properties.templateCode = numbering_helper_1.NumberingHelper.generateNewTemplateCode(_this.documentModel);
            });
        });
    };
    RtfListConverter.prototype.getListIndex = function (listId, lists) {
        for (var i = 0; i < lists.length; i++) {
            if (lists[i].getId() == listId)
                return i;
        }
        return -1;
    };
    RtfListConverter.prototype.convertRtfOverrideToNumbering = function (list, rtfOverride) {
        var _this = this;
        rtfOverride.levels.forEach(function (level, index) {
            var restart = level.overrideStartAt;
            var reformat = level.overrideFormat;
            if (reformat) {
                _this.convertPropertyRtfToNumbering(level.level, level.level.listLevelProperties, true, true);
                var overrideLevel = new list_level_1.OverrideListLevel(_this.documentModel, level.level.characterProperties, level.level.paragraphProperties, level.level.listLevelProperties);
                list.levels[index] = overrideLevel;
                if (restart)
                    overrideLevel.overrideStart = true;
            }
            else {
                if (restart) {
                    var referenceLevel = list.levels[index];
                    referenceLevel.overrideStart = true;
                    referenceLevel.setNewStart(rtfOverride.levels[index].startAt);
                }
            }
        });
    };
    RtfListConverter.prototype.convertRtfListToNumberingList = function (rtfLevels, list) {
        var _this = this;
        rtfLevels.forEach(function (rtfLevel, index) {
            var level = list.createLevel(index);
            list.levels[index] = level;
            level.setParagraphProperties(rtfLevel.paragraphProperties);
            level.setCharacterProperties(rtfLevel.characterProperties);
            level.changeListLevelProperties(function (properties) { _this.convertPropertyRtfToNumbering(rtfLevel, properties, true, true); });
        });
    };
    RtfListConverter.prototype.convertPropertyRtfToNumbering = function (rtfLevel, level, restart, reformat) {
        var levelProperties = rtfLevel.listLevelProperties;
        if (restart == true)
            level.start = levelProperties.start;
        if (reformat == true) {
            level.format = levelProperties.format;
            level.alignment = levelProperties.alignment;
            level.suppressBulletResize = levelProperties.suppressBulletResize;
            level.suppressRestart = levelProperties.suppressRestart;
            level.separator = levelProperties.separator;
            level.convertPreviousLevelNumberingToDecimal = levelProperties.convertPreviousLevelNumberingToDecimal;
            level.displayFormatString = rtfLevel.createDisplayFormatString();
            level.templateCode = levelProperties.templateCode;
        }
        if (levelProperties.legacy) {
            level.legacy = levelProperties.legacy;
            level.legacySpace = levelProperties.legacySpace;
            level.legacyIndent = levelProperties.legacyIndent;
        }
    };
    return RtfListConverter;
}());
exports.RtfListConverter = RtfListConverter;
