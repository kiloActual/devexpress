"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var drawing_value_constants_1 = require("../../../../../core/model/drawing/drawing-value-constants");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var rtf_drawing_keywords_1 = require("../../../../translation-table/rtf-drawing-keywords");
var RtfBoundsCalculatorBase = (function () {
    function RtfBoundsCalculatorBase(shapePropertiesInfo) {
        this.shapePropertiesInfo = shapePropertiesInfo;
    }
    RtfBoundsCalculatorBase.prototype.applyTransform2DAndGetActualSize = function (anchorInfo, size) {
        var left = this.getPosition(this.leftKeyword, 0);
        var top = this.getPosition(this.topKeyword, 0);
        var right = this.getPosition(this.rightKeyword, 0);
        var bottom = this.getPosition(this.bottomKeyword, 0);
        var result = new size_1.Size(Math.max(0, right - left), Math.max(0, bottom - top));
        anchorInfo.offset.x = left;
        anchorInfo.offset.y = top;
        this.shapePropertiesInfo.trySetProperty(rtf_drawing_keywords_1.RtfDrawingKeywords.Rotation, function (value) { return size.rotation = unit_converter_1.UnitConverter.fdToTwips(value); });
        this.checkRotationAndSwapBox(anchorInfo, result, size.rotation);
        return result;
    };
    RtfBoundsCalculatorBase.prototype.getPositionCore = function (_value) { throw new Error('not implemented'); };
    RtfBoundsCalculatorBase.prototype.getPosition = function (keyword, defaultValue) {
        var position = this.shapePropertiesInfo.getPropertyOrNull(keyword);
        if (position)
            return this.getPositionCore(position);
        return defaultValue;
    };
    RtfBoundsCalculatorBase.prototype.checkRotationAndSwapBox = function (anchorInfo, size, rotation) {
        if (!this.needToSwap(rotation))
            return;
        var currentCx = size.width;
        var currentCy = size.height;
        var deltaEmu = (unit_converter_1.UnitConverter.twipsToEmu(currentCy) - unit_converter_1.UnitConverter.twipsToEmu(currentCx)) / 2;
        var delta = unit_converter_1.UnitConverter.emuToTwips(deltaEmu);
        anchorInfo.offset.x += delta;
        anchorInfo.offset.y -= delta;
        size.width = currentCy;
        size.height = currentCx;
    };
    RtfBoundsCalculatorBase.prototype.needToSwap = function (rotation) {
        var angle0To180 = rotation % (180 * drawing_value_constants_1.DrawingValueConstants.OnePositiveFixedAngle);
        if (angle0To180 < 0)
            angle0To180 += 180 * drawing_value_constants_1.DrawingValueConstants.OnePositiveFixedAngle;
        return angle0To180 >= 45 * drawing_value_constants_1.DrawingValueConstants.OnePositiveFixedAngle && angle0To180 < 135 * drawing_value_constants_1.DrawingValueConstants.OnePositiveFixedAngle;
    };
    return RtfBoundsCalculatorBase;
}());
exports.RtfBoundsCalculatorBase = RtfBoundsCalculatorBase;
