"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-properties-merger");
var table_base_structures_1 = require("../../../core/model/tables/secondary-structures/table-base-structures");
var rtf_table_properties_merger_base_1 = require("./rtf-table-properties-merger-base");
var RtfTablePropertiesMerger = (function (_super) {
    tslib_1.__extends(RtfTablePropertiesMerger, _super);
    function RtfTablePropertiesMerger(model) {
        return _super.call(this, model) || this;
    }
    Object.defineProperty(RtfTablePropertiesMerger.prototype, "defaultProperties", {
        get: function () {
            return this.model.defaultTableProperties;
        },
        enumerable: true,
        configurable: true
    });
    RtfTablePropertiesMerger.prototype.getMergedProperties = function (table) {
        return this.merge(table.properties, table.style, table, null, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable);
    };
    RtfTablePropertiesMerger.prototype.getStyleMergedProperties = function (style, tableStyle, conditionalTFormatting) {
        return this.merge(style.tableProperties, tableStyle, null, null, conditionalTFormatting);
    };
    RtfTablePropertiesMerger.prototype.merge = function (source, tableStyle, _table, _tablePropertiesException, conditionalFormatting) {
        var result = source.clone();
        result.indent = new table_properties_merger_1.TablePropertiesMergerIndent()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.cellSpacing = new table_properties_merger_1.TablePropertiesMergerCellSpacing()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.leftBorder = new table_properties_merger_1.TablePropertiesMergerBorderLeft()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.rightBorder = new table_properties_merger_1.TablePropertiesMergerBorderRight()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.topBorder = new table_properties_merger_1.TablePropertiesMergerBorderTop()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.bottomBorder = new table_properties_merger_1.TablePropertiesMergerBorderBottom()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.insideVerticalBorder = new table_properties_merger_1.TablePropertiesMergerBorderVertical()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.borders.insideHorizontalBorder = new table_properties_merger_1.TablePropertiesMergerBorderHorizontal()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.cellMargins.left = new table_properties_merger_1.TablePropertiesMergerMarginLeft()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.cellMargins.right = new table_properties_merger_1.TablePropertiesMergerMarginRight()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.cellMargins.top = new table_properties_merger_1.TablePropertiesMergerMarginTop()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.cellMargins.bottom = new table_properties_merger_1.TablePropertiesMergerMarginBottom()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.layoutType = new table_properties_merger_1.TablePropertiesMergerLayoutType()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.shadingInfo = new table_properties_merger_1.TablePropertiesMergerShadingInfo()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.tableStyleColumnBandSize = new table_properties_merger_1.TablePropertiesMergerStyleColumnBandSize()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.tableStyleRowBandSize = new table_properties_merger_1.TablePropertiesMergerStyleRowBandSize()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.tableRowAlignment = new table_properties_merger_1.TablePropertiesMergerHorizontalAlignment()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        return result;
    };
    return RtfTablePropertiesMerger;
}(rtf_table_properties_merger_base_1.RtfTablePropertiesMergerBase));
exports.RtfTablePropertiesMerger = RtfTablePropertiesMerger;
