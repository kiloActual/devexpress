"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var table_cell_properties_merger_1 = require("../../../core/model/tables/properties-mergers/table-cell-properties-merger");
var list_1 = require("@devexpress/utils/lib/utils/list");
var rtf_table_properties_merger_base_1 = require("./rtf-table-properties-merger-base");
var RtfTableCellPropertiesMerger = (function (_super) {
    tslib_1.__extends(RtfTableCellPropertiesMerger, _super);
    function RtfTableCellPropertiesMerger(model) {
        return _super.call(this, model) || this;
    }
    Object.defineProperty(RtfTableCellPropertiesMerger.prototype, "defaultProperties", {
        get: function () {
            return this.model.defaultTableCellProperties;
        },
        enumerable: true,
        configurable: true
    });
    RtfTableCellPropertiesMerger.prototype.getMergedProperties = function (cell) {
        return this.merge(cell.properties, cell.parentRow.parentTable.style, cell, null, cell.conditionalFormatting);
    };
    RtfTableCellPropertiesMerger.prototype.getStyleMergedProperties = function (style, tableStyle, conditionalTFormatting) {
        return this.merge(style.tableCellProperties, tableStyle, null, null, conditionalTFormatting);
    };
    RtfTableCellPropertiesMerger.prototype.merge = function (source, tableStyle, cell, _tablePropertiesException, conditionalFormatting) {
        var result = source.clone();
        if (cell) {
            var row = cell.parentRow;
            var table = row.parentTable;
            var tablePropertiesException = row.tablePropertiesException;
            result.cellMargins.left = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginLeft(table, this.model, tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.cellMargins.right = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginRight(table, this.model, tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.cellMargins.top = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginTop(table, this.model, tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.cellMargins.bottom = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginBottom(table, this.model, tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.leftBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft(tablePropertiesException, row.cells[0] == cell)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.rightBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight(tablePropertiesException, list_1.ListUtils.last(row.cells) == cell)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.topBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop(tablePropertiesException, table.rows[0] == row)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.bottomBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop(tablePropertiesException, list_1.ListUtils.last(table.rows) == row)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.topLeftDiagonalBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderTopLeftDiagonal(tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
            result.borders.topRightDiagonalBorder = new table_cell_properties_merger_1.TableCellPropertiesMergerBorderTopRightDiagonal(tablePropertiesException)
                .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        }
        result.shadingInfo = new table_cell_properties_merger_1.TableCellPropertiesMergerShadingInfo()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.noWrap = new table_cell_properties_merger_1.TableCellPropertiesMergerNoWrap()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        result.verticalAlignment = new table_cell_properties_merger_1.TableCellVerticalAlignmentMerger()
            .getProperty(source, tableStyle, conditionalFormatting, this.defaultProperties);
        return result;
    };
    return RtfTableCellPropertiesMerger;
}(rtf_table_properties_merger_base_1.RtfTablePropertiesMergerBase));
exports.RtfTableCellPropertiesMerger = RtfTableCellPropertiesMerger;
