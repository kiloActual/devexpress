"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var RichEditUnit;
(function (RichEditUnit) {
    RichEditUnit[RichEditUnit["Centimeter"] = 0] = "Centimeter";
    RichEditUnit[RichEditUnit["Inch"] = 1] = "Inch";
})(RichEditUnit = exports.RichEditUnit || (exports.RichEditUnit = {}));
function createUnitConverter(unit) {
    switch (unit) {
        case RichEditUnit.Centimeter: return new UIUnitConverterCentimeter();
        case RichEditUnit.Inch: return new UIUnitConverterInch();
        default: throw new Error(errors_1.Errors.InternalException);
    }
}
exports.createUnitConverter = createUnitConverter;
var UIUnitConverterCentimeter = (function (_super) {
    __extends(UIUnitConverterCentimeter, _super);
    function UIUnitConverterCentimeter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UIUnitConverterCentimeter.prototype.getUnits = function () {
        return RichEditUnit.Centimeter;
    };
    UIUnitConverterCentimeter.prototype.twipsToUI = function (value) {
        return unit_converter_1.UnitConverter.twipsToCentimeters(value);
    };
    UIUnitConverterCentimeter.prototype.UIToTwips = function (value) {
        return unit_converter_1.UnitConverter.centimetersToTwips(value);
    };
    return UIUnitConverterCentimeter;
}(unit_converter_1.UnitConverter));
exports.UIUnitConverterCentimeter = UIUnitConverterCentimeter;
var UIUnitConverterInch = (function (_super) {
    __extends(UIUnitConverterInch, _super);
    function UIUnitConverterInch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UIUnitConverterInch.prototype.getUnits = function () {
        return RichEditUnit.Inch;
    };
    UIUnitConverterInch.prototype.twipsToUI = function (value) {
        return unit_converter_1.UnitConverter.twipsToInches(value);
    };
    UIUnitConverterInch.prototype.UIToTwips = function (value) {
        return unit_converter_1.UnitConverter.inchesToTwips(value);
    };
    return UIUnitConverterInch;
}(unit_converter_1.UnitConverter));
exports.UIUnitConverterInch = UIUnitConverterInch;
