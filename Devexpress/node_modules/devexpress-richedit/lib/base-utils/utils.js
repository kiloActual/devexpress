"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var point_1 = require("@devexpress/utils/lib/geometry/point");
var list_1 = require("@devexpress/utils/lib/utils/list");
function rotatePoint(point, angle, center) {
    var x = center.x + (point.x - center.x) * Math.cos(angle) - (point.y - center.y) * Math.sin(angle);
    var y = center.y + (point.y - center.y) * Math.cos(angle) + (point.x - center.x) * Math.sin(angle);
    return new point_1.Point(x, y);
}
exports.rotatePoint = rotatePoint;
var SearchTreeItemResult = (function () {
    function SearchTreeItemResult(parentList, itemIndex, item) {
        this.parentList = parentList;
        this.itemIndex = itemIndex;
        this.item = item;
    }
    return SearchTreeItemResult;
}());
exports.SearchTreeItemResult = SearchTreeItemResult;
function searchTreeItem(items, comparer) {
    return list_1.ListUtils.unsafeAnyOf(items, function (item, index) {
        if (comparer(item))
            return new SearchTreeItemResult(items, index, item);
        if (item.items) {
            var res = searchTreeItem(item.items, comparer);
            if (res)
                return res;
        }
        return null;
    });
}
exports.searchTreeItem = searchTreeItem;
function convertToFunction(func) {
    var type = typeof (func);
    if (type == "function")
        return func;
    if (type == "string") {
        var funcName = func.trim();
        if (/^\b\w+?\b$/.test(funcName) && /^[^0-9]/.test(funcName)) {
            try {
                var handler = eval(funcName);
                if (typeof (handler) == "function")
                    return handler;
            }
            catch (e) { }
        }
        var text = funcName;
        if (text.indexOf("function") != 0)
            text = "function(s, e){" + text + "}";
        var result = null;
        try {
            result = eval("(" + text + ")");
        }
        catch (_e) {
            console.error("Parse error: " + func);
            return null;
        }
        return result;
    }
    return null;
}
exports.convertToFunction = convertToFunction;
