"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var localization_1 = require("devextreme/localization");
var dialog_alert_message_command_1 = require("../base/commands/dialogs/dialog-alert-message-command");
var browser_1 = require("@devexpress/utils/lib/browser");
var encode_1 = require("@devexpress/utils/lib/utils/encode");
var Localization = (function () {
    function Localization() {
    }
    Localization.getLocalizatedString = function (id, arg) {
        if (arg === void 0) { arg = ''; }
        return encode_1.EncodeUtils.decodeHtml(localization_1.formatMessage(id, arg))
            .replace(/<br [/]>/g, '\n');
    };
    Localization.getAlertText = function (id) {
        if (!this.alertTexts) {
            this.alertTexts = {};
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.ModelIsChanged] = this.getLocalizatedString("ASPxRichEditStringId.ModelIsChangedError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.SessionHasExpired] = this.getLocalizatedString("ASPxRichEditStringId.SessionHasExpiredError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.OpeningAndOverstoreImpossible] = this.getLocalizatedString("ASPxRichEditStringId.OpeningAndOverstoreImpossibleError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.ClipboardAccessDenied] = this.getLocalizatedString("ASPxRichEditStringId.ClipboardAccessDeniedError", browser_1.Browser.MacOSPlatform ? "Command" : "Ctrl");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.InnerException] = this.getLocalizatedString("ASPxRichEditStringId.InnerExceptionsError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.AuthException] = this.getLocalizatedString("ASPxRichEditStringId.AuthExceptionsError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.CantOpenFile] = this.getLocalizatedString("ASPxRichEditStringId.CantOpenDocumentError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.CantSaveFile] = this.getLocalizatedString("ASPxRichEditStringId.CantSaveDocumentError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.DocVariableException] = this.getLocalizatedString("ASPxRichEditStringId.DocVariableExceptionError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.PathTooLongException] = "";
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.InvalidDocumentFormat] = this.getLocalizatedString("ASPxRichEditStringId.InvalidDocumentFormatError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.SpellingCheckCompleted] = this.getLocalizatedString("ASPxRichEditStringId.SpellingCheckCompletedInformation");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.ClipboardAccessDeniedTouch] = this.getLocalizatedString("ASPxRichEditStringId.ClipboardAccessDeniedErrorTouch");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.CantSaveToEmptyPath] = this.getLocalizatedString("ASPxRichEditStringId.CantSaveToEmptyPathError");
            "";
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.InsertContentFromServerException] = this.getLocalizatedString("ASPxRichEditStringId.InsertContentFromServerExceptionError");
            this.alertTexts[dialog_alert_message_command_1.AlertMessageText.DocumentImportError] = this.getLocalizatedString("ASPxRichEditStringId.InvalidDocumentFormatError");
        }
        return this.alertTexts[id];
    };
    return Localization;
}());
exports.Localization = Localization;
