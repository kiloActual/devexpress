"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var events_1 = require("devextreme/events");
var rich_edit_core_1 = require("../base/rich-edit-core");
var model_manager_1 = require("../core/model-manager");
var client_command_manager_1 = require("./commands/client-command-manager");
var shortcut_manager_1 = require("./commands/shortcut-manager");
var manager_1 = require("./loading-panel/manager");
var field_client_request_manager_1 = require("./model/fields/field-client-request-manager");
var font_changes_listener_1 = require("./model/font-changes-listener");
var ClientRichEditCore = (function (_super) {
    tslib_1.__extends(ClientRichEditCore, _super);
    function ClientRichEditCore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClientRichEditCore.prototype.registerActiveContextTabManager = function () {
        this.selection.onChanged.add(this.owner.activeContextTabManager);
    };
    ClientRichEditCore.prototype.createCommandManager = function () {
        return new client_command_manager_1.ClientCommandManager(this);
    };
    ClientRichEditCore.prototype.createShortcutManager = function () {
        return new shortcut_manager_1.ClientShortcutManager(this.commandManager, this);
    };
    ClientRichEditCore.prototype.createFieldRequestManager = function () {
        var rich = (this.owner);
        var options = new field_client_request_manager_1.FieldClientRequestManagerOptions(rich.dataSource, rich.useAsyncVersionOfCalculateDocvariable.bind(rich), function (args) { return rich.raiseCalculateDocumentVariable(args); }, function (args) { return rich.raiseCalculateDocumentVariableAsync(args); });
        return new field_client_request_manager_1.FieldClientRequestManager(options);
    };
    ClientRichEditCore.prototype.createLoadingPanelManager = function () {
        return new manager_1.ClientLoadingPanelManager(this.viewManager.canvas);
    };
    ClientRichEditCore.prototype.registerFontChangesListeners = function () {
        this.modelManager.modelManipulator.onFontsChanged.add(new font_changes_listener_1.ClientFontChangesListener(this.owner));
    };
    ClientRichEditCore.prototype.isClientMode = function () { return true; };
    ClientRichEditCore.prototype.createModelManager = function (richOptions) {
        return new model_manager_1.ClientModelManager(null, richOptions, this);
    };
    ClientRichEditCore.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    ClientRichEditCore.prototype.createViewElement = function (id, element) {
        var elements = _super.prototype.createViewElement.call(this, id, element);
        events_1.on(elements, 'dxmousewheel', function (e) { return e.stopPropagation(); });
        return elements;
    };
    return ClientRichEditCore;
}(rich_edit_core_1.RichEditCore));
exports.ClientRichEditCore = ClientRichEditCore;
