"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var localization_1 = require("devextreme/localization");
var themes_1 = require("devextreme/viz/themes");
var client_command_1 = require("../base/commands/client-command");
var rich_edit_core_1 = require("../base/rich-edit-core");
var json_top_level_enums_1 = require("../core/model/json/enums/json-top-level-enums");
var rich_options_1 = require("../core/model/options/rich-options");
var styles_manager_1 = require("../core/model/styles-manager");
var string_resources_1 = require("../core/string-resources");
var browser_1 = require("@devexpress/utils/lib/browser");
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var attr_1 = require("@devexpress/utils/lib/utils/attr");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var encode_1 = require("@devexpress/utils/lib/utils/encode");
var dxt_theme_css_classes_1 = require("../dxt-utils/dxt-utils/dxt-theme-css-classes");
var field_1 = require("../model-api/field");
var _constants_1 = require("./_constants");
var active_context_tab_manager_1 = require("./bars/active-context-tab-manager");
var bar_holder_1 = require("./bars/bar-holder");
var context_menu_1 = require("./bars/context-menu");
var ribbon_1 = require("./bars/ribbon");
var client_rich_edit_core_1 = require("./client-rich-edit-core");
var data_source_helper_1 = require("./data-source-helper");
var default_localization_1 = require("./default-localization");
var dialog_manager_1 = require("./dialogs/dialog-manager");
var formatters_options_1 = require("./formatters-options");
var losing_changes_watcher_1 = require("./losing-changes-watcher");
var client_events_1 = require("./public/client-events");
var events_1 = require("./public/events");
var rich_edit_1 = require("./public/rich-edit");
var settings_1 = require("./settings");
var client_quick_search_panel_1 = require("./ui/client-quick-search-panel");
var settings_2 = require("../base/ui/ruler/settings");
var attribute_utils_1 = require("../base/rich-utils/attribute-utils");
var ClientRichEdit = (function () {
    function ClientRichEdit(element, options, publicRichEdit) {
        var _a;
        this.fullScreenTempVars = {};
        this.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
        this.isInitialized = false;
        this.isInFullScreenMode = false;
        this.hasWorkDirectory = false;
        this.allowDocumentLoadedEventCall = true;
        default_localization_1.loadDefaultMessages();
        this.internalApi = options.internalApi;
        if (!this.internalApi)
            this.internalApi = {};
        var settings = settings_1.Settings.parse(options);
        this.rulerSettings = this.getRulerSettings(settings.view);
        this.name = element.id;
        this.publicRichEdit = publicRichEdit;
        this.exportUrl = settings.exportUrl;
        this.dataSource = settings.dataSource;
        this.rawDataSource = settings.rawDataSource;
        this.contextMenuSettings = settings.contextMenuSettings;
        this.prepareElement(element, settings);
        this.initDefaultFontsAndStyles();
        this.initBars(settings.ribbon, settings.fonts);
        this.initEvents(settings);
        this.createCore(settings);
        this.initCore();
        this.initDialogManager();
        this.initLosingChangesWatcher(settings.confirmOnLosingChanges);
        this.attachEvents();
        this.adjustControl();
        this.onInit = (_a = options.events) === null || _a === void 0 ? void 0 : _a.init;
        this.document = options.document;
    }
    Object.defineProperty(ClientRichEdit.prototype, "clientQuickSearchPanel", {
        get: function () {
            if (!this._clientQuickSearchPanel)
                this._clientQuickSearchPanel = new client_quick_search_panel_1.ClientQuickSearchPanel(this, this.core.searchManager);
            return this._clientQuickSearchPanel;
        },
        enumerable: true,
        configurable: true
    });
    ClientRichEdit.prototype.getPublicRichEdit = function () {
        return this.publicRichEdit;
    };
    ClientRichEdit.prototype.getRulerSettings = function (viewSettings) {
        var settings = _constants_1.Constants.ruler;
        settings.visibility = viewSettings.showHorizontalRuler ? settings_2.RulerVisibility.Visible : settings_2.RulerVisibility.Hidden;
        return settings;
    };
    ClientRichEdit.prototype.disposeDataSource = function () {
        if (this.dataSource)
            this.dataSource.dispose();
        this.dataSource = null;
        this.rawDataSource = null;
    };
    ClientRichEdit.prototype.dispose = function () {
        this.evtHandlersHolder.removeAllListeners();
        this.barHolder.dispose();
        this.dialogManager.dispose();
        if (this._clientQuickSearchPanel)
            this._clientQuickSearchPanel.dispose();
        this.events.clear();
        this.disposeDataSource();
        this.core.dispose();
        dom_1.DomUtils.clearInnerHtml(this.element);
        this.losingChangesWatcher.dispose();
        this.publicRichEdit = null;
        dom_1.DomUtils.hideNode(this.element);
        this.core = null;
        this.barHolder = null;
        this.dialogManager = null;
        this._clientQuickSearchPanel = null;
        this.publicRichEdit = null;
        this.losingChangesWatcher = null;
        this.evtHandlersHolder = null;
    };
    ClientRichEdit.prototype.setNewRawDataSource = function (rawDataSource, callback) {
        var _this = this;
        this.disposeDataSource();
        this.core.modelManager.richOptions.mailMerge.isEnabled = false;
        this.core.modelManager.richOptions.mailMerge.allowInsertFields = false;
        this.rawDataSource = rawDataSource;
        if (rawDataSource === null || rawDataSource === undefined) {
            this.core.barHolder.updateItemsState();
            this.core.horizontalRulerControl.update();
            callback(true);
            return;
        }
        this.dataSource = data_source_helper_1.DataSourceHelper.getDxDataSource(rawDataSource);
        this.dataSource.paginate(false);
        this.dataSource.requireTotalCount(true);
        this.core.loadingPanelManager.loadingPanel.setVisible(true);
        this.dataSource.load()
            .then(function () {
            var options = _this.core.modelManager.richOptions.mailMerge;
            options.isEnabled = true;
            options.allowInsertFields = true;
            options.recordCount = _this.dataSource.totalCount();
            options.activeRecordIndex = 0;
            if (_this.core.modelManager.richOptions.mailMerge.viewMergedData)
                _this.core.commandManager.getCommand(client_command_1.RichEditClientCommand.GoToDataRecord).execute(true, options.activeRecordIndex);
            _this.core.loadingPanelManager.loadingPanel.setVisible(false);
            _this.core.barHolder.updateItemsState();
            _this.core.horizontalRulerControl.update();
            callback(true);
        })
            .catch(function (e) {
            console.error(e.message);
            _this.core.loadingPanelManager.loadingPanel.setVisible(false);
            callback(false);
        });
    };
    ClientRichEdit.prototype.prepareElement = function (element, settings) {
        this.element = element;
        this.element.style.width = settings.width;
        this.element.style.height = settings.height;
        if (getComputedStyle(this.element).display != 'block')
            this.element.style.display = 'block';
        this.element.classList.add('dxreControl');
        this.element.classList.add(dxt_theme_css_classes_1.DxtThemeCssClasses.BorderColor);
        this.element.classList.add(themes_1.currentTheme());
    };
    ClientRichEdit.prototype.createCore = function (settings) {
        var options = new rich_options_1.RichOptions(new formatters_options_1.ClientFormattersOptions());
        options.bookmarks = settings.bookmarks;
        options.fields = settings.fields;
        options.mailMerge = settings.mailMerge;
        options.autoCorrect = settings.autoCorrect;
        options.documentProtection = settings.documentProtection;
        options.printing = settings.printing;
        options.pdf = settings.pdf;
        options.fonts = settings.fonts;
        options.spellChecker = settings.spellCheck;
        this.core = new client_rich_edit_core_1.ClientRichEditCore(this, this.name, this.element, '', settings.readOnly, this.barHolder, settings.unit, this.rulerSettings, options, settings.view, this.getStringResources());
    };
    ClientRichEdit.prototype.initCore = function () {
        var documentInfo = new rich_edit_core_1.DocumentInfo("", false);
        this.core.initialize("", documentInfo, 1);
    };
    ClientRichEdit.prototype.initEvents = function (settings) {
        this.events = new client_events_1.Events();
        if (settings.onSelectionChanged)
            this.events.selectionChanged.addHandler(settings.onSelectionChanged, this.publicRichEdit);
        if (settings.onDocumentLoaded)
            this.events.documentLoaded.addHandler(settings.onDocumentLoaded, this.publicRichEdit);
        if (settings.onDocumentFormatted)
            this.events.documentFormatted.addHandler(settings.onDocumentFormatted, this.publicRichEdit);
        if (settings.onDocumentChanged)
            this.events.documentChanged.addHandler(settings.onDocumentChanged, this.publicRichEdit);
        if (settings.onActiveSubDocumentChanged)
            this.events.activeSubDocumentChanged.addHandler(settings.onActiveSubDocumentChanged, this.publicRichEdit);
        if (settings.onGotFocus)
            this.events.gotFocus.addHandler(settings.onGotFocus, this.publicRichEdit);
        if (settings.onLostFocus)
            this.events.lostFocus.addHandler(settings.onLostFocus, this.publicRichEdit);
        if (settings.onHyperlinkClick)
            this.events.hyperlinkClick.addHandler(settings.onHyperlinkClick, this.publicRichEdit);
        if (settings.onPointerDown)
            this.events.pointerDown.addHandler(settings.onPointerDown, this.publicRichEdit);
        if (settings.onPointerUp)
            this.events.pointerUp.addHandler(settings.onPointerUp, this.publicRichEdit);
        if (settings.onKeyDown)
            this.events.keyDown.addHandler(settings.onKeyDown, this.publicRichEdit);
        if (settings.onKeyUp)
            this.events.keyUp.addHandler(settings.onKeyUp, this.publicRichEdit);
        if (settings.onCalculateDocumentVariable)
            this.events.calculateDocumentVariable.addHandler(settings.onCalculateDocumentVariable, this.publicRichEdit);
        if (settings.onContentInserted)
            this.events.contentInserted.addHandler(settings.onContentInserted, this.publicRichEdit);
        if (settings.onContentRemoved)
            this.events.contentRemoved.addHandler(settings.onContentRemoved, this.publicRichEdit);
        if (settings.onCharacterPropertiesChanged)
            this.events.characterPropertiesChanged.addHandler(settings.onCharacterPropertiesChanged, this.publicRichEdit);
        if (settings.onParagraphPropertiesChanged)
            this.events.paragraphPropertiesChanged.addHandler(settings.onParagraphPropertiesChanged, this.publicRichEdit);
        if (settings.onAutoCorrect)
            this.events.autoCorrect.addHandler(settings.onAutoCorrect, this.publicRichEdit);
        if (settings.onSaving)
            this.events.saving.addHandler(settings.onSaving, this.publicRichEdit);
        if (settings.onSaved)
            this.events.saved.addHandler(settings.onSaved, this.publicRichEdit);
        if (settings.onCustomCommandExecuted)
            this.events.customCommandExecuted.addHandler(settings.onCustomCommandExecuted, this.publicRichEdit);
        if (settings.onPdfExporting)
            this.events.pdfExporting.addHandler(settings.onPdfExporting, this.publicRichEdit);
        if (settings.onPdfExported)
            this.events.pdfExported.addHandler(settings.onPdfExported, this.publicRichEdit);
        if (settings.onCommandStateChanged)
            this.events.commandStateChanged.addHandler(settings.onCommandStateChanged, this.publicRichEdit);
        if (settings.onCalculateDocumentVariableAsync)
            this.events.calculateDocumentVariableAsync.addHandler(settings.onCalculateDocumentVariableAsync, this.publicRichEdit);
        if (settings.onContextMenuShowing)
            this.events.contextMenuShowing.addHandler(settings.onContextMenuShowing, this.publicRichEdit);
    };
    ClientRichEdit.prototype.initDefaultFontsAndStyles = function () {
        styles_manager_1.StylesManager.populatePresetStyles(_constants_1.Constants.getLocalizedDefaultPresetStyles());
    };
    ClientRichEdit.prototype.initBars = function (ribbon, fonts) {
        var _this = this;
        this.barHolder = new bar_holder_1.ClientBarHolder(undefined, new context_menu_1.ClientContextMenuBar(this, this.element, this.contextMenuSettings.items), function (c) { return _this.raiseCommandStateChanged(c); });
        this.initRibbon(ribbon, fonts);
    };
    ClientRichEdit.prototype.initRibbon = function (ribbon, fonts) {
        if (this.core) {
            this.core.modelManager.modelManipulator.removeModelListener(this.barHolder.ribbon);
            this.core.selection.onChanged.remove(this.barHolder.ribbon);
        }
        this.lastRibbonSettings = ribbon;
        this.barHolder.removeRibbonBar();
        if (ribbon.visible) {
            var ribbonBar = new ribbon_1.ClientRibbonBar(this, this.element, ribbon, fonts);
            this.barHolder.ribbon = ribbonBar;
            if (this.core) {
                this.core.modelManager.modelManipulator.modelListeners.push(this.barHolder.ribbon);
                this.core.selection.onChanged.add(this.barHolder.ribbon);
                ribbonBar.initialize(this.core);
            }
        }
        if (!this.activeContextTabManager)
            this.activeContextTabManager = new active_context_tab_manager_1.ActiveContextTabManager(this.barHolder);
        this.activeContextTabManager.init(ribbon);
        this.activeContextTabManager.forbidChangeActiveTabIndex = true;
    };
    ClientRichEdit.prototype.initDialogManager = function () {
        this.dialogManager = new dialog_manager_1.DialogManager(this.element, this.core);
    };
    ClientRichEdit.prototype.getStringResources = function () {
        var sr = new string_resources_1.StringResources();
        sr.headerFooter.evenPageFooter = localization_1.formatMessage('XtraRichEditStringId.Caption_EvenPageFooter');
        sr.headerFooter.evenPageHeader = localization_1.formatMessage('XtraRichEditStringId.Caption_EvenPageHeader');
        sr.headerFooter.firstPageFooter = localization_1.formatMessage('XtraRichEditStringId.Caption_FirstPageFooter');
        sr.headerFooter.firstPageHeader = localization_1.formatMessage('XtraRichEditStringId.Caption_FirstPageHeader');
        sr.headerFooter.footer = localization_1.formatMessage('XtraRichEditStringId.Caption_PageFooter');
        sr.headerFooter.header = localization_1.formatMessage('XtraRichEditStringId.Caption_PageHeader');
        sr.headerFooter.oddPageFooter = localization_1.formatMessage('XtraRichEditStringId.Caption_OddPageFooter');
        sr.headerFooter.oddPageHeader = localization_1.formatMessage('XtraRichEditStringId.Caption_OddPageHeader');
        sr.headerFooter.sameAsPrevious = localization_1.formatMessage('XtraRichEditStringId.Caption_SameAsPrevious');
        sr.seqCaptionPrefixes.figurePrefix = localization_1.formatMessage('XtraRichEditStringId.Caption_CaptionPrefixFigure');
        sr.seqCaptionPrefixes.tablePrefix = localization_1.formatMessage('XtraRichEditStringId.Caption_CaptionPrefixTable');
        sr.seqCaptionPrefixes.equationPrefix = localization_1.formatMessage('XtraRichEditStringId.Caption_CaptionPrefixEquation');
        sr.commonLabels.noTocEntriesFound = localization_1.formatMessage('XtraRichEditStringId.Msg_NoTocEntriesFound');
        sr.commonLabels.clickToFollowHyperlink = localization_1.formatMessage('XtraRichEditStringId.Msg_ClickToFollowHyperlink');
        sr.commonLabels.currentDocumentHyperlinkTooltip = localization_1.formatMessage('XtraRichEditStringId.Caption_CurrentDocumentHyperlinkTooltip');
        sr.quickSearchPanel.of = localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Of');
        sr.quickSearchPanel.items = localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Items');
        sr.quickSearchPanel.noMatches = localization_1.formatMessage('ASPxRichEditStringId.FindReplace_NoMatches');
        return sr;
    };
    ClientRichEdit.prototype.initLosingChangesWatcher = function (settings) {
        var _this = this;
        this.losingChangesWatcher = new losing_changes_watcher_1.LosingChangesWatcher(settings.enabled ?
            function () { return _this.core.getModifiedState() == json_top_level_enums_1.IsModified.True; } :
            function () { return false; }, settings.message);
    };
    ClientRichEdit.prototype.attachEvents = function () {
        var _this = this;
        if (this.canUseResizeObserver() && window.ResizeObserver) {
            this.resizeObserver = new ResizeObserver(function (entries) {
                for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                    var entry = entries_1[_i];
                    if (entry.target === _this.element && !_this.isInFullScreenMode)
                        _this.adjustControl();
                }
            });
            this.resizeObserver.observe(this.element);
            this.evtHandlersHolder.addListenerToWindow('resize', function () {
                if (_this.isInFullScreenMode)
                    _this.adjustControlInFullScreenMode();
            });
        }
        else {
            this.evtHandlersHolder.addListenerToWindow('resize', function () {
                if (_this.isInFullScreenMode)
                    _this.adjustControlInFullScreenMode();
                else
                    _this.adjustControl();
            });
        }
        this.evtHandlersHolder.addListenerToDocument('fullscreenchange', function () { return _this.onFullScreenChange(document); });
        this.evtHandlersHolder.addListenerToDocument('webkitfullscreenchange', function () { return _this.onFullScreenChange(document); });
        this.evtHandlersHolder.addListenerToDocument('mozfullscreenchange', function () { return _this.onFullScreenChange(document); });
        this.evtHandlersHolder.addListenerToDocument('msfullscreenchange', function () { return _this.onFullScreenChange(document); });
    };
    ClientRichEdit.prototype.canUseResizeObserver = function () {
        return !browser_1.Browser.IE && ((browser_1.Browser.Chrome && browser_1.Browser.Version >= 64) ||
            (browser_1.Browser.Edge && browser_1.Browser.Version >= 79) ||
            (browser_1.Browser.Firefox && ((browser_1.Browser.AndroidMobilePlatform && browser_1.Browser.Version >= 79) || (!browser_1.Browser.AndroidMobilePlatform && browser_1.Browser.Version >= 69))) ||
            (browser_1.Browser.Opera && ((browser_1.Browser.AndroidMobilePlatform && browser_1.Browser.Version >= 47) || (!browser_1.Browser.AndroidMobilePlatform && browser_1.Browser.Version >= 51))) ||
            (browser_1.Browser.Safari && ((browser_1.Browser.MacOSMobilePlatform && browser_1.Browser.Version >= 13.4) || (!browser_1.Browser.MacOSMobilePlatform && browser_1.Browser.Version >= 13.1))));
    };
    ClientRichEdit.prototype.syncSessionGuid = function (_sessionGuid) { };
    ClientRichEdit.prototype.sendRequest = function (_content, _viaInternalCallback) { };
    ClientRichEdit.prototype.canCaptureFocus = function () { return true; };
    ClientRichEdit.prototype.Focus = function () {
        this.core.focusManager.captureFocus();
    };
    ClientRichEdit.prototype.adjustControl = function () {
        if (this.core) {
            var ribbonBar = this.barHolder.ribbon;
            var ribbonHeight = 0;
            if (ribbonBar) {
                ribbonHeight = ribbonBar.getHeight();
                ribbonBar.adjustControl();
            }
            this.core.horizontalRulerControl.adjust();
            var rulerHeight = this.core.horizontalRulerControl.getHeight();
            this.core.viewManager.canvas.style.height = this.element.clientHeight - rulerHeight - ribbonHeight + "px";
            this.core.viewManager.adjust(true);
        }
    };
    ClientRichEdit.prototype.toggleFullScreenMode = function () {
        this.isInFullScreenMode = !this.isInFullScreenMode;
        if (this.isInFullScreenMode)
            this.setFullScreenMode();
        else
            this.setNormalMode();
        var ribbonBar = this.barHolder.ribbon;
        if (ribbonBar)
            ribbonBar.adjustControl();
    };
    ClientRichEdit.prototype.sendDownloadRequest = function (_downloadRequestType, _parameters) { };
    ClientRichEdit.prototype.confirmOnLosingChanges = function () {
        return this.losingChangesWatcher.confirm();
    };
    ClientRichEdit.prototype.sendExportRequest = function (base64, fileName, format, reason) {
        var _this = this;
        if (this.exportUrl) {
            base64 = encode_1.EncodeUtils.prepareTextForRequest(base64);
            fileName = encode_1.EncodeUtils.prepareTextForRequest(fileName);
            reason = encode_1.EncodeUtils.prepareTextForRequest(reason);
            var postdata = "base64=" + base64 + "&fileName=" + fileName + "&format=" + format + "&reason=" + reason;
            this.sendPostRequest(this.exportUrl, postdata, function () {
                _this.documentSaved = true;
                _this.raiseSaved(true, reason);
            }, function () { return _this.raiseSaved(false, reason); });
        }
    };
    Object.defineProperty(ClientRichEdit.prototype, "documentSaved", {
        get: function () {
            return this.core.lastSavedHistoryItemId === this.core.modelManager.history.getCurrentItemId();
        },
        set: function (state) {
            var _a, _b;
            if (state) {
                this.core.lastSavedHistoryItemId = this.core.modelManager.history.getCurrentItemId();
                this.core.barHolder.updateItemsState((_a = {}, _a[client_command_1.RichEditClientCommand.ExportDocument] = true, _a));
            }
            else {
                if (this.core.lastSavedHistoryItemId == this.core.modelManager.history.getCurrentItemId()) {
                    this.core.lastSavedHistoryItemId = this.core.modelManager.history.getCurrentItemId() - 1;
                    this.core.barHolder.updateItemsState((_b = {}, _b[client_command_1.RichEditClientCommand.ExportDocument] = true, _b));
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    ClientRichEdit.prototype.sendExportPdfRequest = function (base64, fileName, pdfExportUrl) {
        var _this = this;
        base64 = encode_1.EncodeUtils.prepareTextForRequest(base64);
        fileName = encode_1.EncodeUtils.prepareTextForRequest(fileName);
        var postdata = "base64=" + base64 + "&fileName=" + fileName;
        this.sendPostRequest(pdfExportUrl, postdata, function () { return _this.raisePdfExported(true); }, function () { return _this.raisePdfExported(false); });
    };
    ClientRichEdit.prototype.sendPostRequest = function (url, postdata, onSuccess, onError) {
        var xmlHttp = new XMLHttpRequest();
        xmlHttp.open("POST", url, true);
        xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
        xmlHttp.onreadystatechange = function () {
            if (xmlHttp.readyState == 4) {
                if (xmlHttp.status == 200)
                    onSuccess();
                else
                    onError();
            }
        };
        xmlHttp.onerror = onError;
        xmlHttp.send(postdata);
    };
    ClientRichEdit.prototype.showDialog = function (name, parameters, callback, afterClosing, isModal) {
        var dialog = this.dialogManager.getDialog(name);
        if (dialog != null)
            dialog.show(parameters, callback, afterClosing, isModal);
        else
            console.log("Dialog '" + name + "' not found");
    };
    ClientRichEdit.prototype.raiseBeginSynchronization = function () { };
    ClientRichEdit.prototype.raiseDocumentLoaded = function () {
        if (this.allowDocumentLoadedEventCall)
            this.events.documentLoaded._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.raiseDocumentChanged = function () {
        this.events.documentChanged._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.raiseDocumentFormatted = function (pageCount) {
        this.events.documentFormatted._fireEvent(this.publicRichEdit, new events_1.DocumentFormattedEventArgs(pageCount));
    };
    ClientRichEdit.prototype.raiseActiveSubDocumentChanged = function () {
        this.events.activeSubDocumentChanged._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.onCaptureFocus = function () {
        if (this.barHolder.ribbon)
            this.barHolder.ribbon.closeActiveItem();
    };
    ClientRichEdit.prototype.raiseGotFocus = function () {
        if (this.publicRichEdit.nusaSettings.registered)
            window.NUSA_customContainerFocussed(this.element);
        this.events.gotFocus._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.raiseLostFocus = function () {
        this.events.lostFocus._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.raiseHyperlinkClick = function (evt, field) {
        var handled = false;
        var hyperlinkInfo = field.getHyperlinkInfo();
        if (hyperlinkInfo) {
            var url = hyperlinkInfo.uri || hyperlinkInfo.anchor;
            var hyperlinkType = this.getLinkType(hyperlinkInfo);
            var args = new events_1.HyperlinkClickEventArgs(evt, handled, url, hyperlinkType, new field_1.HyperlinkApi(this.core, this.core.selection.activeSubDocument, field));
            this.events.hyperlinkClick._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        return handled;
    };
    ClientRichEdit.prototype.raisePointerDown = function (evt) {
        var handled = false;
        if (!this.events.pointerDown.isEmpty()) {
            var args = new events_1.PointerEventArgs(evt);
            this.events.pointerDown._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        return handled;
    };
    ClientRichEdit.prototype.raisePointerUp = function (evt) {
        var handled = false;
        if (!this.events.pointerUp.isEmpty()) {
            var args = new events_1.PointerEventArgs(evt);
            this.events.pointerUp._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        return handled;
    };
    ClientRichEdit.prototype.raiseKeyDown = function (evt) {
        var handled = false;
        if (!this.events.keyDown.isEmpty()) {
            var args = new events_1.KeyboardEventArgs(evt);
            this.events.keyDown._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        return handled;
    };
    ClientRichEdit.prototype.raiseKeyUp = function (evt) {
        var args = new events_1.KeyboardEventArgs(evt);
        this.events.keyUp._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseCalculateDocumentVariable = function (args) {
        this.events.calculateDocumentVariable._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseContentInserted = function (subDocumentId, interval) {
        var args = new events_1.ContentChangedEventArgs(subDocumentId, new rich_edit_1.Interval(interval.start, interval.length));
        this.events.contentInserted._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseContentRemoved = function (subDocumentId, interval, removedText) {
        var args = new events_1.ContentRemovedEventArgs(subDocumentId, new rich_edit_1.Interval(interval.start, interval.length), removedText);
        this.events.contentRemoved._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseCharacterPropertiesChanged = function (subDocumentId, interval) {
        var args = new events_1.ContentChangedEventArgs(subDocumentId, new rich_edit_1.Interval(interval.start, interval.length));
        this.events.characterPropertiesChanged._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseParagraphPropertiesChanged = function (subDocumentId, paragraphIndex) {
        var args = new events_1.ParagraphPropertiesChangedEventArgs(subDocumentId, paragraphIndex);
        this.events.paragraphPropertiesChanged._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseAutoCorrect = function (text, interval) {
        var handled = false;
        if (!this.events.autoCorrect.isEmpty()) {
            var args = new events_1.AutoCorrectEventArgs(text, new rich_edit_1.Interval(interval.start, interval.length));
            this.events.autoCorrect._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        return handled;
    };
    ClientRichEdit.prototype.raiseSelectionChanged = function () {
        this.events.selectionChanged._fireEvent(this.publicRichEdit, new events_1.EventArgs());
    };
    ClientRichEdit.prototype.raiseSaving = function (base64, fileName, format, reason) {
        var handled = false;
        if (!this.events.saving.isEmpty()) {
            var args = new events_1.SavingEventArgs(base64, fileName, format, reason);
            this.events.saving._fireEvent(this.publicRichEdit, args);
            handled = args.handled;
        }
        if (handled)
            this.documentSaved = true;
        return handled;
    };
    ClientRichEdit.prototype.raiseSaved = function (success, reason) {
        var args = new events_1.SavedEventArgs(success, reason);
        this.events.saved._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseCustomCommandExecuted = function (command, parameter) {
        var args = new events_1.CustomCommandExecutedEventArgs(command, parameter);
        this.events.customCommandExecuted._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseFloatingObjectMovedObject = function (_arg) {
    };
    ClientRichEdit.prototype.raisePdfExported = function (success) {
        var args = new events_1.PdfExportedEventArgs(success);
        this.events.pdfExported._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raisePdfExporting = function (base64, blob, blobStream, handled) {
        var args = new events_1.PdfExportingEventArgs(base64, blob, blobStream, handled);
        this.events.pdfExporting._fireEvent(this.publicRichEdit, args);
        return args.handled;
    };
    ClientRichEdit.prototype.raiseCommandStateChanged = function (commands) {
        var args = new events_1.CommandStateChangedEventArgs(commands);
        this.events.commandStateChanged._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.raiseCalculateDocumentVariableAsync = function (args) {
        this.events.calculateDocumentVariableAsync._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.useAsyncVersionOfCalculateDocvariable = function () {
        return !this.events.calculateDocumentVariableAsync.isEmpty();
    };
    ClientRichEdit.prototype.raiseContextMenuShowing = function (args) {
        this.events.contextMenuShowing._fireEvent(this.publicRichEdit, args);
    };
    ClientRichEdit.prototype.showPopupMenu = function (getPoint) {
        this.barHolder.contextMenu.show(getPoint);
    };
    ClientRichEdit.prototype.hidePopupMenu = function () {
        this.barHolder.contextMenu.hide();
    };
    ClientRichEdit.prototype.showQuickSearchPanel = function () {
        this.clientQuickSearchPanel.show();
    };
    ClientRichEdit.prototype.hideQuickSearchPanel = function () {
        this.clientQuickSearchPanel.hide(true);
    };
    ClientRichEdit.prototype.isRibbon = function (_element) { return true; };
    ClientRichEdit.prototype.isTouchMode = function () { return false; };
    ClientRichEdit.prototype.getChildElement = function (postfix) {
        if (postfix.charAt(0) !== "_")
            postfix = "_" + postfix;
        return this.element.querySelector('#' + this.name + postfix);
    };
    ClientRichEdit.prototype.getMainElement = function () {
        return this.element;
    };
    ClientRichEdit.prototype.hasActiveDialog = function () {
        return false;
    };
    ClientRichEdit.prototype.getContextMenuBar = function () {
        return this.barHolder.contextMenu;
    };
    ClientRichEdit.prototype.getRibbonBar = function () {
        return this.barHolder.ribbon;
    };
    ClientRichEdit.prototype.getLinkType = function (hyperlinkInfo) {
        if (hyperlinkInfo.anchor)
            return events_1.DocumentLinkType.Bookmark;
        if (hyperlinkInfo.uri && hyperlinkInfo.uri.substr(0, 7) === "mailto:")
            return events_1.DocumentLinkType.EmailAddress;
        return events_1.DocumentLinkType.Hyperlink;
    };
    ClientRichEdit.prototype.setFullScreenMode = function () {
        this.prepareFullScreenMode();
        this.adjustControlInFullScreenMode();
    };
    ClientRichEdit.prototype.prepareFullScreenMode = function () {
        var mainElement = this.getMainElement();
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderTopWidth" : "border-top-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderLeftWidth" : "border-left-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderRightWidth" : "border-right-width", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderBottomWidth" : "border-bottom-width", "0px");
        this.fullScreenTempVars.scrollTop = dom_1.DomUtils.getDocumentScrollTop();
        this.fullScreenTempVars.scrollLeft = dom_1.DomUtils.getDocumentScrollLeft();
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "position", "fixed");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "top", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, "left", "0px");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(mainElement, browser_1.Browser.IE ? "zIndex" : "z-index", '1001');
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(document.documentElement, "position", "static");
        attribute_utils_1.AttributeUtils.changeElementStyleAttribute(document.documentElement, "overflow", "hidden");
        this.fullScreenTempVars.bodyMargin = document.body.style.margin;
        document.body.style.margin = "0";
        this.fullScreenTempVars.width = mainElement.style.width;
        this.fullScreenTempVars.height = mainElement.style.height;
        if (this.shouldChangeNativeFullscreen)
            this.requestFullScreen(document.body);
    };
    ClientRichEdit.prototype.setNormalMode = function () {
        if (this.shouldChangeNativeFullscreen)
            this.cancelFullScreen(document);
        var mainElement = this.getMainElement();
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "left");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "top");
        attr_1.AttrUtils.restoreElementStyleAttribute(document.documentElement, "overflow");
        attr_1.AttrUtils.restoreElementStyleAttribute(document.documentElement, "position");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "zIndex" : "z-index");
        document.body.style.margin = this.fullScreenTempVars.bodyMargin;
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, "position");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderTopWidth" : "border-top-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderLeftWidth" : "border-left-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderRightWidth" : "border-right-width");
        attr_1.AttrUtils.restoreElementStyleAttribute(mainElement, browser_1.Browser.IE ? "borderBottomWidth" : "border-bottom-width");
        this.setHeight(this.fullScreenTempVars.height);
        this.setWidth(this.fullScreenTempVars.width);
        document.documentElement.scrollTop = this.fullScreenTempVars.scrollTop;
        document.documentElement.scrollLeft = this.fullScreenTempVars.scrollLeft;
        this.adjustControl();
    };
    Object.defineProperty(ClientRichEdit.prototype, "shouldChangeNativeFullscreen", {
        get: function () {
            return window.self !== window.top;
        },
        enumerable: true,
        configurable: true
    });
    ClientRichEdit.prototype.requestFullScreen = function (element) {
        if (element.requestFullscreen)
            element.requestFullscreen();
        else if (element.mozRequestFullScreen)
            element.mozRequestFullScreen();
        else if (element.webkitRequestFullscreen)
            element.webkitRequestFullscreen();
        else if (element.msRequestFullscreen)
            element.msRequestFullscreen();
    };
    ClientRichEdit.prototype.cancelFullScreen = function (document) {
        if (document.webkitExitFullscreen)
            document.webkitExitFullscreen();
        else if (document.mozCancelFullScreen)
            document.mozCancelFullScreen();
        else if (document.msExitFullscreen)
            document.msExitFullscreen();
        else if (document.exitFullscreen)
            document.exitFullscreen();
    };
    ClientRichEdit.prototype.onFullScreenChange = function (document) {
        if (this.isInFullScreenMode && this.documentIsNotFullScreen(document))
            this.core.commandManager.getCommand(client_command_1.RichEditClientCommand.FullScreen).execute(this.core.commandManager.isPublicApiCall);
    };
    ClientRichEdit.prototype.documentIsNotFullScreen = function (document) {
        return document.webkitIsFullScreen === false || document.mozFullScreen === false || (browser_1.Browser.IE && !window.screenTop && !window.screenY);
    };
    ClientRichEdit.prototype.adjustControlInFullScreenMode = function () {
        var documentWidth = document.documentElement.clientWidth == 0 ? document.body.clientWidth : document.documentElement.clientWidth;
        var documentHeight = document.documentElement.clientHeight == 0 ? document.body.clientHeight : document.documentElement.clientHeight;
        this.setWidth(documentWidth);
        this.setHeight(documentHeight);
        this.adjustControl();
    };
    ClientRichEdit.prototype.setWidth = function (width) {
        var mainElement = this.getMainElement();
        var isNumber = !isNaN(parseFloat(width)) && isFinite(width);
        mainElement.style.width = isNumber ? width + "px" : width;
    };
    ClientRichEdit.prototype.setHeight = function (height) {
        var mainElement = this.getMainElement();
        var isNumber = !isNaN(parseFloat(height)) && isFinite(height);
        mainElement.style.height = isNumber ? height + "px" : height;
    };
    ClientRichEdit.prototype.savingEventIsEmpty = function () {
        return this.events.saving.isEmpty();
    };
    return ClientRichEdit;
}());
exports.ClientRichEdit = ClientRichEdit;
