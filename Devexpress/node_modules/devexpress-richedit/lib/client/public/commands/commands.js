"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("../../../core/model/borders/enums");
var api_utils_1 = require("../../../model-api/api-utils/api-utils");
var commands_1 = require("../../commands/commands");
var enum_1 = require("./enum");
var CommandState = (function () {
    function CommandState(visible, enabled, value) {
        this.visible = visible;
        this.enabled = enabled;
        this.value = value;
    }
    return CommandState;
}());
exports.CommandState = CommandState;
function executeApiCommand(commandManager, commandId, parameter) {
    return commands_1.executeApiCommandCore(commandManager, commandId, parameter);
}
exports.executeApiCommand = executeApiCommand;
function getApiCommandState(commandManager, commandId) {
    var _a;
    var command = commandManager.getCommand(commandId);
    if (!command)
        return null;
    var state = command.getState();
    var value = state.value;
    switch (commandId) {
        case enum_1.HomeTabCommandId.ChangeFontName:
            value = (_a = state.value) === null || _a === void 0 ? void 0 : _a.name;
            break;
        case enum_1.HomeTabCommandId.ChangeFontForeColor:
            value = api_utils_1.ApiUtils.internalColorToApiColor(state.value);
            break;
        case enum_1.HomeTabCommandId.ChangeShading:
            value = api_utils_1.ApiUtils.internalColorToApiColor(state.value);
            break;
        case enum_1.TableDesignTabCommandId.ChangeTableStyle:
            value = typeof (state.value) == 'string' ? state.value : undefined;
            break;
        case enum_1.TableDesignTabCommandId.ChangeTableRepositoryItemBorderStyle: {
            switch (value) {
                case enums_1.BorderLineStyle.None:
                    value = 'None';
                    break;
                case enums_1.BorderLineStyle.Dashed:
                    value = 'Dashed';
                    break;
                case enums_1.BorderLineStyle.Double:
                    value = 'Double';
                    break;
                case enums_1.BorderLineStyle.Dotted:
                    value = 'Dotted';
                    break;
                case enums_1.BorderLineStyle.Single:
                    value = 'Single';
                    break;
                default: value = enums_1.BorderLineStyle.Single;
            }
            break;
        }
        case enum_1.TableDesignTabCommandId.ChangeTableCellShading:
            value = api_utils_1.ApiUtils.internalColorToApiColor(state.value);
            break;
        case enum_1.HomeTabCommandId.ChangeFontHighlightColor:
            value = api_utils_1.ApiUtils.internalColorToApiColor(state.value);
            break;
    }
    return new CommandState(state.visible, state.enabled, value);
}
exports.getApiCommandState = getApiCommandState;
