"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("../../../core/model/changes/enums");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var UiEventType;
(function (UiEventType) {
    UiEventType[UiEventType["None"] = 0] = "None";
    UiEventType[UiEventType["FullReset"] = 1] = "FullReset";
    UiEventType[UiEventType["CheckSelectionChange"] = 2] = "CheckSelectionChange";
    UiEventType[UiEventType["PartialReset"] = 4] = "PartialReset";
})(UiEventType = exports.UiEventType || (exports.UiEventType = {}));
var ClientPublicUiChangesListener = (function (_super) {
    tslib_1.__extends(ClientPublicUiChangesListener, _super);
    function ClientPublicUiChangesListener(_raiseUpdate) {
        var _this = _super.call(this) || this;
        _this._raiseUpdate = _raiseUpdate;
        _this.selection = null;
        _this.updateEnabled = true;
        _this._occuredEvents = new flag_1.Flag(UiEventType.None);
        return _this;
    }
    ClientPublicUiChangesListener.prototype.onUpdateUnlocked = function () {
        this.applyEvents();
    };
    ClientPublicUiChangesListener.prototype.modelChanged = function (change) {
        this._occuredEvents.add(this.getModelChangeEvent(change));
        if (!this.isUpdateLocked())
            this.applyEvents();
    };
    ClientPublicUiChangesListener.prototype.NotifySelectionChanged = function (selection) {
        this.selection = selection;
        if (this.isUpdateLocked()) {
            this._occuredEvents.set(UiEventType.CheckSelectionChange, true);
        }
        else {
            this._occuredEvents.add(this.getSelectionChangeEvent());
            this.applyEvents();
        }
    };
    ClientPublicUiChangesListener.prototype.forceUpdate = function (queryCommands) {
        this.addCommands(queryCommands);
        if (!this.isUpdateLocked())
            this.applyEvents();
    };
    ClientPublicUiChangesListener.prototype.getModelChangeEvent = function (change) {
        switch (change.type) {
            case enums_1.ModelChangeType.DifferentOddAndEvenPages:
            case enums_1.ModelChangeType.PageColor:
            case enums_1.ModelChangeType.DefaultTabWidth:
            case enums_1.ModelChangeType.HeaderFooterCreated:
            case enums_1.ModelChangeType.HeaderFooterIndexChanged:
                return UiEventType.None;
            case enums_1.ModelChangeType.LoadFontInfo:
                return UiEventType.FullReset;
            case enums_1.ModelChangeType.SectionFormattingChanged:
            case enums_1.ModelChangeType.CreateStyleLink:
            case enums_1.ModelChangeType.DeleteStyleLink:
                return UiEventType.None;
            case enums_1.ModelChangeType.AbstractNumberingListAdded:
            case enums_1.ModelChangeType.AbstractNumberingListDeleted:
            case enums_1.ModelChangeType.NumberingListAdded:
            case enums_1.ModelChangeType.NumberingListDeleted:
            case enums_1.ModelChangeType.ListLevelPropertyChanged:
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged:
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged:
            case enums_1.ModelChangeType.IOverrideListLevelChanged:
                return UiEventType.None;
            case enums_1.ModelChangeType.BookmarkCreated:
            case enums_1.ModelChangeType.BookmarkDeleted:
                return UiEventType.None;
            case enums_1.ModelChangeType.TabInserted:
            case enums_1.ModelChangeType.TabDeleted:
                return UiEventType.None;
            case enums_1.ModelChangeType.LoadPicturesInfo:
            case enums_1.ModelChangeType.InlinePicturesUpdated:
            case enums_1.ModelChangeType.InlinePictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureInserted:
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged:
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged:
                return UiEventType.None;
            case enums_1.ModelChangeType.FieldInserted:
            case enums_1.ModelChangeType.FieldDeleted:
            case enums_1.ModelChangeType.HyperlinkInfoChanged:
            case enums_1.ModelChangeType.FieldsShowCodeChanged:
                return UiEventType.None;
            case enums_1.ModelChangeType.SimpleRunInserted:
            case enums_1.ModelChangeType.TextBufferChanged:
            case enums_1.ModelChangeType.ParagraphInserted:
            case enums_1.ModelChangeType.SectionInserted:
            case enums_1.ModelChangeType.AnchoredTextBoxInserted:
            case enums_1.ModelChangeType.AnchorObjectRemoved:
            case enums_1.ModelChangeType.IntervalRemoved:
            case enums_1.ModelChangeType.ParagraphMerged:
            case enums_1.ModelChangeType.SectionMerged:
                return UiEventType.FullReset;
            case enums_1.ModelChangeType.CharacterFormattingChanged:
            case enums_1.ModelChangeType.CharacterPropertiesChanged:
            case enums_1.ModelChangeType.ParagraphFormattingChanged:
            case enums_1.ModelChangeType.ParagraphPropertiesChanged:
            case enums_1.ModelChangeType.ParagraphAndCharacterMergedPropertiesReset:
                return UiEventType.FullReset;
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged:
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged:
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged:
            case enums_1.ModelChangeType.ShapeChanged:
            case enums_1.ModelChangeType.ShapePropertyChanged:
                return UiEventType.None;
            case enums_1.ModelChangeType.CharacterStyleApplied:
            case enums_1.ModelChangeType.ParagraphStyleApplied:
            case enums_1.ModelChangeType.TableStyleChanged:
            case enums_1.ModelChangeType.ParagraphNumberingListChanged:
                return UiEventType.FullReset;
            case enums_1.ModelChangeType.TableCreated:
            case enums_1.ModelChangeType.TableRemoved:
            case enums_1.ModelChangeType.TableStartPositionShifted:
            case enums_1.ModelChangeType.TableCellPropertyChanged:
            case enums_1.ModelChangeType.TablePropertyChanged:
            case enums_1.ModelChangeType.TableRowPropertyChanged:
            case enums_1.ModelChangeType.TableCellSplittedHorizontally:
            case enums_1.ModelChangeType.TableCellMergedHorizontally:
            case enums_1.ModelChangeType.TableRowInserted:
            case enums_1.ModelChangeType.TableRowRemoved:
            case enums_1.ModelChangeType.TableCellRemoved:
            case enums_1.ModelChangeType.TableCellInserted:
                return UiEventType.FullReset;
            default:
                return UiEventType.None;
        }
    };
    ClientPublicUiChangesListener.prototype.applyEvents = function () {
        var occuredEvents = this._occuredEvents.clone();
        var queryCommands = this.queryCommands;
        this._occuredEvents = new flag_1.Flag(UiEventType.None);
        this.queryCommands = undefined;
        if (!this.updateEnabled)
            return;
        if (occuredEvents.get(UiEventType.CheckSelectionChange))
            occuredEvents.add(this.getSelectionChangeEvent());
        if (occuredEvents.get(UiEventType.FullReset))
            this.raiseUpdate(null);
        else if (occuredEvents.get(UiEventType.PartialReset)) {
            var commands = number_1.NumberMapUtils.toListBy(queryCommands, function (_true, commandId) { return commandId; });
            this.raiseUpdate(commands.length ? commands : null);
        }
    };
    ClientPublicUiChangesListener.prototype.raiseUpdate = function (commands) {
        var _this = this;
        setTimeout(function () { return _this._raiseUpdate(commands); }, 0);
    };
    ClientPublicUiChangesListener.prototype.getSelectionChangeEvent = function () {
        var flag = new flag_1.Flag(UiEventType.None);
        if (!this.selection || this.selection.shouldResetInputPosition())
            flag.set(UiEventType.FullReset, true);
        else if (this.selection && this.checkActivateHeaderFooter(this.selection)) {
            flag.set(UiEventType.FullReset, true);
        }
        return flag.getValue();
    };
    ClientPublicUiChangesListener.prototype.checkActivateHeaderFooter = function (selection) {
        return selection.prevState.intervalsInfo.subDocument != selection.currState.intervalsInfo.subDocument &&
            selection.currState.intervalsInfo.subDocument.isHeaderFooter();
    };
    ClientPublicUiChangesListener.prototype.addCommands = function (queryCommands) {
        var _this = this;
        if (queryCommands) {
            this._occuredEvents.set(UiEventType.PartialReset, true);
            if (!this.queryCommands)
                this.queryCommands = {};
            number_1.NumberMapUtils.forEach(queryCommands, function (_true, commandId) { return _this.queryCommands[commandId] = _true; });
        }
        else
            this._occuredEvents.set(UiEventType.FullReset, true);
    };
    return ClientPublicUiChangesListener;
}(batch_updatable_1.BatchUpdatableObject));
exports.ClientPublicUiChangesListener = ClientPublicUiChangesListener;
