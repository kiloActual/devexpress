"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var client_command_1 = require("../../../base/commands/client-command");
var MailMergeOptionsApi = (function () {
    function MailMergeOptionsApi(native) {
        this._native = native;
    }
    MailMergeOptionsApi.prototype.getDataSource = function () { return this._native.rawDataSource; };
    MailMergeOptionsApi.prototype.setDataSource = function (dataSource, callback) {
        if (callback === void 0) { callback = function () { }; }
        this._native.setNewRawDataSource(dataSource, callback);
    };
    Object.defineProperty(MailMergeOptionsApi.prototype, "activeRecordIndex", {
        get: function () { return this._native.core.modelManager.richOptions.mailMerge.activeRecordIndex; },
        set: function (value) {
            this._native.core.modelManager.richOptions.mailMerge.activeRecordIndex = value;
            if (this._native.core.modelManager.richOptions.mailMerge.viewMergedData)
                this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.GoToDataRecord).execute(true, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MailMergeOptionsApi.prototype, "viewMergedData", {
        get: function () { return this._native.core.modelManager.richOptions.mailMerge.viewMergedData; },
        set: function (value) {
            this._native.core.commandManager.getCommand(client_command_1.RichEditClientCommand.ToggleViewMergedData).execute(true, value);
        },
        enumerable: true,
        configurable: true
    });
    return MailMergeOptionsApi;
}());
exports.MailMergeOptionsApi = MailMergeOptionsApi;
