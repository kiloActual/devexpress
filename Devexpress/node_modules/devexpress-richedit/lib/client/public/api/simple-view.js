"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Paddings = (function () {
    function Paddings(top, right, bottom, left) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
    }
    return Paddings;
}());
exports.Paddings = Paddings;
var SimpleViewSettings = (function () {
    function SimpleViewSettings(native) {
        this._native = native;
    }
    Object.defineProperty(SimpleViewSettings.prototype, "paddings", {
        get: function () {
            var p = this._native.core.innerClientProperties.viewsSettings.paddings;
            return new Paddings(p.top, p.right, p.bottom, p.left);
        },
        set: function (paddings) {
            var oldPaddings = this._native.core.innerClientProperties.viewsSettings.paddings;
            if (!oldPaddings.equals(paddings)) {
                this._native.core.innerClientProperties.viewsSettings.paddings.copyFrom(paddings);
                this._native.core.layoutFormatterManager.invalidator.onChangedAllLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SimpleViewSettings.prototype, "fixedWidth", {
        get: function () { return this._native.core.innerClientProperties.viewsSettings.fixedWidth; },
        set: function (width) {
            var oldWidth = this._native.core.innerClientProperties.viewsSettings.fixedWidth;
            if (oldWidth !== width) {
                this._native.core.innerClientProperties.viewsSettings.fixedWidth = width;
                this._native.core.layoutFormatterManager.invalidator.onChangedAllLayout();
            }
        },
        enumerable: true,
        configurable: true
    });
    return SimpleViewSettings;
}());
exports.SimpleViewSettings = SimpleViewSettings;
