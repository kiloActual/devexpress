"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sub_document_1 = require("../../../core/model/sub-document");
var insert_text_1 = require("../../../model-api/api-utils/insert-text");
var all_debug_1 = require("../all-debug");
var characters_1 = require("../characters");
var external_types_1 = require("./external-types");
function registerRichEditCustomControlType(controlTypeName, richEditsHolder) {
    if (richEditsHolder.isControlTypeRegistered(controlTypeName))
        return;
    richEditsHolder.registerControlType(controlTypeName);
    external_types_1.WRE_NUSA_registerCustomControlType(controlTypeName, function (customControlType) {
        customControlType.newlineFormat = characters_1.Characters.LineBreak;
        customControlType.paragraphFormat = characters_1.Characters.ParagraphBreak;
        customControlType.replaceText = function (element, text, fromPos, length) {
            var rich = richEditsHolder.getRichEditByElement(element);
            var subDocument = rich.core.selection.activeSubDocument;
            var prevActPos = rich.core.selection.getState().activePostion;
            rich.core.beginUpdate();
            rich.core.modelManager.history.beginTransaction();
            if (length > 0) {
                rich.core.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, new all_debug_1.FixedInterval(fromPos, length)), true, true);
            }
            var newTextInterval = insert_text_1.insertTextThroughApi(fromPos, text, subDocument, rich.core, {
                wrapIntoBeginUpdate: false,
                inputPosition: rich.core.inputPosition
            });
            if (prevActPos >= fromPos && prevActPos < fromPos + length)
                rich.core.selection.changeState(function (newState) { return newState.setPosition(newTextInterval.end); });
            rich.core.modelManager.history.endTransaction();
            rich.core.endUpdate();
        };
        customControlType.getText = function (element) {
            var rich = richEditsHolder.getRichEditByElement(element);
            return rich.core.selection.activeSubDocument.getText();
        };
        customControlType.getSelectionText = function (element) {
            var rich = richEditsHolder.getRichEditByElement(element);
            return rich.core.selection.activeSubDocument.getText(rich.core.selection.intervals[0]);
        };
        customControlType.getSelection = function (element) {
            var rich = richEditsHolder.getRichEditByElement(element);
            return rich.core.selection.intervals[0];
        };
        customControlType.setSelection = function (element, start, length) {
            var rich = richEditsHolder.getRichEditByElement(element);
            rich.core.selection.changeState(function (newState) { return newState.setInterval(new all_debug_1.FixedInterval(start, length)); });
        };
        richEditsHolder.registerControlTypeObject(controlTypeName, customControlType);
    });
}
exports.registerRichEditCustomControlType = registerRichEditCustomControlType;
