"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rich_edit_1 = require("../rich-edit");
var commands_1 = require("./commands");
var custom_container_registrator_1 = require("./custom-container-registrator");
var custom_control_registrator_1 = require("./custom-control-registrator");
var external_types_1 = require("./external-types");
var placeholders_1 = require("./placeholders");
var rich_edits_holder_1 = require("./rich-edits-holder");
var NusaSettings = (function () {
    function NusaSettings(native) {
        this._richEditsHolder = new rich_edits_holder_1.RichEditsHolder();
        this._registered = false;
        this._native = native;
    }
    Object.defineProperty(NusaSettings.prototype, "registered", {
        get: function () { return this._registered; },
        enumerable: true,
        configurable: true
    });
    NusaSettings.prototype.getFocusedRichEdit = function () {
        var focused = this._richEditsHolder.getFocusedRichEdit();
        return focused ? focused.getPublicRichEdit() : null;
    };
    NusaSettings.prototype.registerCommands = function (options) {
        if (options === void 0) { options = {}; }
        if (!options)
            options = {};
        var commandSets = commands_1.createDefaultCommandSets();
        var placeholders = placeholders_1.createDefaultPlaceholders();
        if (options.customizeCommands)
            options.customizeCommands(commandSets, placeholders);
        external_types_1.WRE_registerCommands(commandSets, placeholders);
    };
    NusaSettings.prototype.getCommandHandler = function () {
        var _this = this;
        return function (commandId, _placeholderIds, placeholderValues) {
            var reCmdId = commandId;
            var rich = _this._richEditsHolder.getFocusedRichEdit();
            if (!rich)
                return false;
            switch (reCmdId) {
                case 'DxReFontColor': {
                    rich.getPublicRichEdit().executeCommand(rich_edit_1.HomeTabCommandId.ChangeFontForeColor, placeholderValues[0]);
                    return true;
                }
                case 'DxReFontSize': {
                    rich.getPublicRichEdit().executeCommand(rich_edit_1.HomeTabCommandId.ChangeFontSize, parseInt(placeholderValues[0]));
                    return true;
                }
                default:
                    return false;
            }
        };
    };
    NusaSettings.prototype.getCustomControl = function () {
        return this._registered ? this._richEditsHolder.getCustomControl(this._native.element.getAttribute(external_types_1.WRE_NUSA_controlTypeAttr)) : null;
    };
    NusaSettings.prototype.getCustomContainer = function () {
        return this._registered ? this._richEditsHolder.getCustomContainer(this._native.element.getAttribute(external_types_1.WRE_NUSA_containerTypeAttr)) : null;
    };
    NusaSettings.prototype.unregister = function () {
        if (!this._registered)
            return;
        removeAttribute(this._native.element, external_types_1.WRE_NUSA_controlTypeAttr);
        removeAttribute(this._native.element, external_types_1.WRE_NUSA_conceptNameAttr);
        removeAttribute(this._native.element, external_types_1.WRE_NUSA_containerTypeAttr);
        this._richEditsHolder.unregisterRichEdit(this._native);
        this._registered = false;
        external_types_1.WRE_NUSA_reinitializeVuiForm();
    };
    NusaSettings.prototype.register = function (options) {
        var _a, _b;
        if (this._registered)
            return;
        var customControlType = (_a = options === null || options === void 0 ? void 0 : options.customControlType) !== null && _a !== void 0 ? _a : "DevExpressRichEdit";
        var customContainerType = (_b = options === null || options === void 0 ? void 0 : options.customContainerType) !== null && _b !== void 0 ? _b : "DevExpressRichEditContainer";
        var conceptName = options === null || options === void 0 ? void 0 : options.conceptName;
        addAttribute(this._native.element, external_types_1.WRE_NUSA_controlTypeAttr, customControlType);
        addAttribute(this._native.element, external_types_1.WRE_NUSA_containerTypeAttr, customContainerType);
        if (conceptName)
            addAttribute(this._native.element, external_types_1.WRE_NUSA_conceptNameAttr, conceptName);
        disableRibbonInputs(this._native.barHolder.ribbon);
        this._richEditsHolder.registerRichEdit(this._native);
        this._registered = true;
        custom_control_registrator_1.registerRichEditCustomControlType(customControlType, this._richEditsHolder);
        custom_container_registrator_1.registerRichEditCustomContainerType(customContainerType, this._richEditsHolder);
        external_types_1.WRE_NUSA_reinitializeVuiForm();
    };
    return NusaSettings;
}());
exports.NusaSettings = NusaSettings;
function disableRibbonInputs(ribbon) {
    if (ribbon) {
        var collection = ribbon.ribbon.element.getElementsByTagName('input');
        for (var i = 0; i < collection.length; i++)
            collection[i].setAttribute(external_types_1.WRE_NUSA_enabledAttr, 'false');
    }
}
function removeAttribute(element, name) {
    var oldAttr = element.getAttribute(name);
    if (oldAttr !== null)
        element.removeAttribute(name);
}
function addAttribute(element, name, value) {
    removeAttribute(element, name);
    element.setAttribute(name, value);
}
