"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var RichEditsHolder = (function () {
    function RichEditsHolder() {
    }
    RichEditsHolder.prototype.getRichEditGlobalObject = function () {
        var devExpressObj = window.DevExpress;
        if (!devExpressObj)
            window.DevExpress = devExpressObj = {};
        var richEditObj = devExpressObj.RichEdit;
        if (!richEditObj)
            devExpressObj.RichEdit = richEditObj = {};
        return richEditObj;
    };
    RichEditsHolder.prototype.getRichs = function () {
        if (!this._richEdits) {
            var richEditGlobalObj = this.getRichEditGlobalObject();
            this._richEdits = richEditGlobalObj.richEdits;
            if (!this._richEdits)
                this._richEdits = richEditGlobalObj.richEdits = [];
        }
        return this._richEdits;
    };
    RichEditsHolder.prototype.getRegisteredControlTypes = function () {
        if (!this._registeredControlTypes) {
            var richEditGlobalObj = this.getRichEditGlobalObject();
            this._registeredControlTypes = richEditGlobalObj.controlTypes;
            if (!this._registeredControlTypes)
                this._registeredControlTypes = richEditGlobalObj.controlTypes = {};
        }
        return this._registeredControlTypes;
    };
    RichEditsHolder.prototype.getRegisteredContainerTypes = function () {
        if (!this._registeredContainerTypes) {
            var richEditGlobalObj = this.getRichEditGlobalObject();
            this._registeredContainerTypes = richEditGlobalObj.containerTypes;
            if (!this._registeredContainerTypes)
                this._registeredContainerTypes = richEditGlobalObj.containerTypes = {};
        }
        return this._registeredContainerTypes;
    };
    RichEditsHolder.prototype.registerRichEdit = function (richEdit) {
        this.getRichs().push(richEdit);
    };
    RichEditsHolder.prototype.unregisterRichEdit = function (richEdit) {
        var richs = this.getRichs();
        var index = list_1.ListUtils.indexBy(richs, function (rich) { return rich === richEdit; });
        if (index >= 0)
            richs.splice(index, 1);
    };
    RichEditsHolder.prototype.registerControlType = function (controlTypeName) {
        this.getRegisteredControlTypes()[controlTypeName] = null;
    };
    RichEditsHolder.prototype.registerControlTypeObject = function (controlTypeName, object) {
        this.getRegisteredControlTypes()[controlTypeName] = object;
    };
    RichEditsHolder.prototype.isControlTypeRegistered = function (controlTypeName) {
        return this.getRegisteredControlTypes()[controlTypeName] !== undefined;
    };
    RichEditsHolder.prototype.getCustomControl = function (controlTypeName) {
        var instance = this.getRegisteredControlTypes()[controlTypeName];
        return instance ? instance : null;
    };
    RichEditsHolder.prototype.registerContainerType = function (containerTypeName) {
        this.getRegisteredContainerTypes()[containerTypeName] = null;
    };
    RichEditsHolder.prototype.registerContainerTypeObject = function (containerTypeName, object) {
        this.getRegisteredContainerTypes()[containerTypeName] = object;
    };
    RichEditsHolder.prototype.isContainerTypeRegistered = function (containerTypeName) {
        return this.getRegisteredContainerTypes()[containerTypeName] !== undefined;
    };
    RichEditsHolder.prototype.getCustomContainer = function (containerTypeName) {
        var instance = this.getRegisteredContainerTypes()[containerTypeName];
        return instance ? instance : null;
    };
    RichEditsHolder.prototype.getRichEditByElement = function (element) {
        var richs = this.getRichs();
        return list_1.ListUtils.elementBy(richs, function (rich) { return rich.element === element; });
    };
    RichEditsHolder.prototype.getFocusedRichEdit = function () {
        var richs = this.getRichs();
        return list_1.ListUtils.elementBy(richs, function (rich) { return rich.core.focusManager.isInFocus; });
    };
    return RichEditsHolder;
}());
exports.RichEditsHolder = RichEditsHolder;
