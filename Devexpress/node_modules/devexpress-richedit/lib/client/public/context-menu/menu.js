"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var context_menu_1 = require("../../bars/context-menu");
var helpers_1 = require("./helpers");
var ContextMenuRuntime = (function () {
    function ContextMenuRuntime(native) {
        this._native = native;
    }
    Object.defineProperty(ContextMenuRuntime.prototype, "enabled", {
        get: function () { return this._native.contextMenuSettings.enabled; },
        set: function (value) { this._native.contextMenuSettings.enabled = value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextMenuRuntime.prototype, "items", {
        get: function () { return this._native.barHolder.contextMenu.initialItems; },
        enumerable: true,
        configurable: true
    });
    ;
    ContextMenuRuntime.prototype.getItem = function (id) {
        return helpers_1.getContextMenuItem(this.items, id);
    };
    ContextMenuRuntime.prototype.removeItem = function (itemOrId) {
        return helpers_1.removeContextMenuItem(this.items, itemOrId);
    };
    ContextMenuRuntime.prototype.insertItem = function (item, index) {
        if (index === void 0) { index = this.items.length; }
        this.items.splice(index, 0, item);
        return item;
    };
    ContextMenuRuntime.prototype.insertItemBefore = function (item, target) {
        helpers_1.insertItemBefore(this.items, item, target);
        return item;
    };
    ContextMenuRuntime.prototype.insertItemAfter = function (item, target) {
        helpers_1.insertItemAfter(this.items, item, target);
        return item;
    };
    return ContextMenuRuntime;
}());
exports.ContextMenuRuntime = ContextMenuRuntime;
var SimpleContextMenu = (function () {
    function SimpleContextMenu(enabled, getItems) {
        if (enabled === void 0) { enabled = true; }
        if (getItems === void 0) { getItems = function () { return context_menu_1.ClientContextMenuBar.getInitialItems(); }; }
        this.enabled = enabled;
        this._getItems = getItems;
    }
    Object.defineProperty(SimpleContextMenu.prototype, "items", {
        get: function () { return this._items ? this._items : (this._items = this._getItems()); },
        set: function (value) { this._items = value; },
        enumerable: true,
        configurable: true
    });
    SimpleContextMenu.prototype.getItem = function (id) {
        return helpers_1.getContextMenuItem(this.items, id);
    };
    SimpleContextMenu.prototype.removeItem = function (itemOrId) {
        return helpers_1.removeContextMenuItem(this.items, itemOrId);
    };
    SimpleContextMenu.prototype.insertItem = function (item, index) {
        if (index === void 0) { index = this.items.length; }
        this.items.splice(index, 0, item);
        return item;
    };
    SimpleContextMenu.prototype.insertItemBefore = function (item, target) {
        helpers_1.insertItemBefore(this.items, item, target);
        return item;
    };
    SimpleContextMenu.prototype.insertItemAfter = function (item, target) {
        helpers_1.insertItemAfter(this.items, item, target);
        return item;
    };
    return SimpleContextMenu;
}());
exports.SimpleContextMenu = SimpleContextMenu;
