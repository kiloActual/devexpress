"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var document_format_1 = require("../../core/document-format");
var file_name_helper_1 = require("../../core/formats/file-name-helper");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var common_1 = require("@devexpress/utils/lib/utils/common");
var file_1 = require("@devexpress/utils/lib/utils/file");
var list_1 = require("@devexpress/utils/lib/utils/list");
var interval_1 = require("../../model-api/interval");
var FilePathInfo = (function () {
    function FilePathInfo(filePath) {
        this.path = filePath.replace(/\\/g, '/');
        this.documentFormat = Utils.getDocumentFormat(this.path);
        this.extension = this.documentFormat === null ? '' : Utils.documentFormatToExtension(this.documentFormat);
        var index = this.path.lastIndexOf('/');
        if (index >= 0) {
            this.directoryPath = this.path.substring(0, index);
            this.name = this.path.substring(index + 1);
        }
        else {
            this.directoryPath = "";
            this.name = this.path;
        }
        this.nameWithoutExtension = this.name.substring(0, this.name.length - this.extension.length);
    }
    return FilePathInfo;
}());
exports.FilePathInfo = FilePathInfo;
var Utils = (function () {
    function Utils() {
    }
    Utils.download = function (content, fileName) {
        file_1.FileUtils.startDownloadFileLocal(content, fileName);
    };
    Utils.parseFilePath = function (filePath) {
        return new FilePathInfo(filePath);
    };
    Utils.documentFormatToExtension = function (documentFormat) {
        return file_name_helper_1.FileNameHelper.convertToString(documentFormat);
    };
    Utils.getDocumentFormat = function (filePath) {
        var pointIndex = filePath.lastIndexOf('.');
        var extenion = pointIndex >= 0 ? filePath.substr(pointIndex) : filePath;
        var coreDocFormat = file_name_helper_1.FileNameHelper.convertExtensionToDocumentFormat(extenion);
        return coreDocFormat === document_format_1.DocumentFormat.Undefined ? null : coreDocFormat;
    };
    Utils.convertArrayBufferToBase64 = function (content) {
        return base64_1.Base64Utils.fromArrayBuffer(content);
    };
    Utils.convertBlobToBase64 = function (content, callback) {
        base64_1.Base64Utils.fromBlobAsDataUrl(content, callback);
    };
    Utils.convertToBlob = function (content, options) {
        return common_1.isString(content) ?
            new Blob([base64_1.Base64Utils.getUint8Array(content)], options) :
            new Blob([content], options);
    };
    Utils.convertToFile = function (content, fileName, options) {
        if (fileName === void 0) { fileName = ''; }
        return common_1.isString(content) ?
            base64_1.Base64Utils.getFileFromBase64(base64_1.Base64Utils.deleteDataUrlPrefix(content), fileName, options) :
            file_1.FileUtils.createFile([content], fileName, options);
    };
    Utils.convertBase64ToArrayBuffer = function (content) {
        return base64_1.Base64Utils.getUint8Array(content);
    };
    Utils.convertBlobToArrayBuffer = function (content, callback) {
        var reader = new FileReader();
        reader.onloadend = function () { return callback(reader.result); };
        reader.readAsArrayBuffer(content);
    };
    Utils.getIntervalComplement = function (bound, intervals) {
        var apiIntervals = list_1.ListUtils.map(intervals, function (curr) { return interval_1.convertFromIntervalApi(curr); });
        var coreResult = algorithms_1.IntervalAlgorithms.reflectIntervalsTemplate(apiIntervals, interval_1.convertFromIntervalApi(bound), new fixed_1.FixedInterval(0, 0));
        return list_1.ListUtils.map(coreResult, function (curr) { return interval_1.convertToIntervalApi(curr); });
    };
    return Utils;
}());
exports.Utils = Utils;
