"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("@devexpress/utils/lib/utils/common");
var base_1 = require("./items/base");
var RibbonTabType;
(function (RibbonTabType) {
    RibbonTabType[RibbonTabType["File"] = 0] = "File";
    RibbonTabType[RibbonTabType["Home"] = 1] = "Home";
    RibbonTabType[RibbonTabType["Insert"] = 2] = "Insert";
    RibbonTabType[RibbonTabType["PageLayout"] = 3] = "PageLayout";
    RibbonTabType[RibbonTabType["References"] = 4] = "References";
    RibbonTabType[RibbonTabType["MailMerge"] = 5] = "MailMerge";
    RibbonTabType[RibbonTabType["View"] = 6] = "View";
    RibbonTabType[RibbonTabType["HeadersFooters"] = 7] = "HeadersFooters";
    RibbonTabType[RibbonTabType["TableDesign"] = 8] = "TableDesign";
    RibbonTabType[RibbonTabType["TableLayout"] = 9] = "TableLayout";
    RibbonTabType[RibbonTabType["FloatingObjectsFormat"] = 10] = "FloatingObjectsFormat";
})(RibbonTabType = exports.RibbonTabType || (exports.RibbonTabType = {}));
var RibbonTab = (function () {
    function RibbonTab(title, id, items, localizationId) {
        if (items === void 0) { items = []; }
        this.id = id;
        this.items = items;
        this.title = title;
        this.localizationId = localizationId;
    }
    Object.defineProperty(RibbonTab.prototype, "contextTab", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    RibbonTab.prototype.removeItem = function (id) {
        this.forEachItem(id instanceof base_1.RibbonItemBase ?
            function (item, index, parent) {
                if (item == id)
                    parent.items.splice(index, 1);
            } :
            function (item, index, parent) {
                if (item.id == id)
                    parent.items.splice(index, 1);
            }, true);
    };
    RibbonTab.prototype.getItem = function (id) {
        var result = null;
        this.forEachItem(function (item) {
            if (item.id == id)
                result = item;
        });
        return result;
    };
    RibbonTab.prototype.insertItem = function (item, index) {
        if (index === void 0) { index = this.items.length; }
        item = item.type == base_1.RibbonItemType.SubMenu ? item.convertToButton() : item;
        this.items.splice(index, 0, item);
        return item;
    };
    RibbonTab.prototype.insertItemBefore = function (item, target) {
        return insertItemBeforeOrAfter(this, item, target, true);
    };
    RibbonTab.prototype.insertItemAfter = function (item, target) {
        return insertItemBeforeOrAfter(this, item, target, false);
    };
    RibbonTab.prototype.forEachItem = function (callback, recursive) {
        if (recursive === void 0) { recursive = true; }
        var innerForEach = function (parent) {
            parent.items.forEach(function (item, index) {
                callback(item, index, parent);
                if (recursive && isRibbonParentItem(item))
                    innerForEach(item);
            });
        };
        innerForEach(this);
    };
    return RibbonTab;
}());
exports.RibbonTab = RibbonTab;
var RibbonContextTab = (function (_super) {
    tslib_1.__extends(RibbonContextTab, _super);
    function RibbonContextTab(title, id, category, items, localizationId) {
        var _this = _super.call(this, title, id, items, localizationId) || this;
        _this.category = category;
        return _this;
    }
    Object.defineProperty(RibbonContextTab.prototype, "contextTab", {
        get: function () { return true; },
        enumerable: true,
        configurable: true
    });
    return RibbonContextTab;
}(RibbonTab));
exports.RibbonContextTab = RibbonContextTab;
var RibbonSearchItemResult = (function () {
    function RibbonSearchItemResult(parent, item, itemIndex) {
        this.parent = parent;
        this.item = item;
        this.itemIndex = itemIndex;
    }
    return RibbonSearchItemResult;
}());
function findItemInfo(parent, target) {
    return common_1.isNumber(target) || common_1.isString(target) ?
        searchTreeItem(parent, function (item) { return item.id == target; }) :
        searchTreeItem(parent, function (item) { return item === target; });
}
function searchTreeItem(parent, comparer) {
    for (var index = 0, item = void 0; item = parent.items[index]; index++) {
        if (comparer(item))
            return new RibbonSearchItemResult(parent, item, index);
        if (isRibbonParentItem(item)) {
            var res = searchTreeItem(item, comparer);
            if (res)
                return res;
        }
    }
    return null;
}
function isRibbonParentItem(item) {
    return item.type === base_1.RibbonItemType.SubMenu || item.type === base_1.RibbonItemType.Menu;
}
function insertItemBeforeOrAfter(tab, item, target, before) {
    var info = findItemInfo(tab, target);
    if (!info) {
        item = item.type == base_1.RibbonItemType.SubMenu ? item.convertToButton() : item;
        tab.items.push(item);
    }
    else {
        var insertedItem = item.type == base_1.RibbonItemType.SubMenu && info.parent instanceof RibbonTab ?
            item.convertToButton() :
            item;
        info.parent.items.splice(before ? info.itemIndex : info.itemIndex + 1, 0, insertedItem);
    }
    return item;
}
