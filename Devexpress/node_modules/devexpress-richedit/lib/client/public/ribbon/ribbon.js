"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var tab_1 = require("./tab");
var Ribbon = (function () {
    function Ribbon() {
        this.visible = true;
        this.activeTabIndex = 1;
        this.tabs = [];
    }
    Ribbon.prototype.clearTabs = function () {
        this.tabs = [];
    };
    Ribbon.prototype.removeTab = function (id) {
        var index = id instanceof tab_1.RibbonTab ?
            list_1.ListUtils.indexBy(this.tabs, function (tab) { return tab == id; }) :
            list_1.ListUtils.indexBy(this.tabs, function (tab) { return tab.id == id; });
        return index >= 0 ? this.tabs.splice(index, 1)[0] : null;
    };
    Ribbon.prototype.insertTab = function (tab, index) {
        if (index === void 0) { index = this.tabs.length; }
        this.tabs.splice(index, 0, tab);
        return tab;
    };
    Ribbon.prototype.insertTabBefore = function (tab, target) {
        insertTabBeforeOrAfter(this.tabs, tab, target, true);
        return tab;
    };
    Ribbon.prototype.insertTabAfter = function (tab, target) {
        insertTabBeforeOrAfter(this.tabs, tab, target, false);
        return tab;
    };
    Ribbon.prototype.getTab = function (id) {
        return list_1.ListUtils.elementBy(this.tabs, function (tab) { return tab.id == id; });
    };
    return Ribbon;
}());
exports.Ribbon = Ribbon;
function insertTabBeforeOrAfter(tabs, tab, target, before) {
    var index = findTabIndex(tabs, target);
    tabs.splice(index < 0 ? tabs.length : (before ? index : index + 1), 0, tab);
}
function findTabIndex(tabs, target) {
    return common_1.isNumber(target) || common_1.isString(target) ?
        list_1.ListUtils.indexBy(tabs, function (tab) { return tab.id == target; }) :
        list_1.ListUtils.indexBy(tabs, function (tab) { return tab === target; });
}
