"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var event_handlers_holder_1 = require("@devexpress/utils/lib/class/event-handlers-holder");
var LosingChangesWatcherSingleton = (function () {
    function LosingChangesWatcherSingleton() {
        this.watchers = [];
        LosingChangesWatcherSingleton.evtHandlersHolder.addListenerToWindow('beforeunload', this.onWindowBeforeUnload.bind(this));
    }
    LosingChangesWatcherSingleton.dispose = function () {
        var instance = LosingChangesWatcherSingleton._instance;
        if (instance) {
            LosingChangesWatcherSingleton.evtHandlersHolder.removeAllListeners();
            LosingChangesWatcherSingleton._instance = null;
            instance.watchers.forEach(function (w) { return w.dispose(); });
        }
    };
    Object.defineProperty(LosingChangesWatcherSingleton, "instance", {
        get: function () {
            if (!LosingChangesWatcherSingleton._instance)
                LosingChangesWatcherSingleton._instance = new this();
            return LosingChangesWatcherSingleton._instance;
        },
        enumerable: true,
        configurable: true
    });
    LosingChangesWatcherSingleton.prototype.add = function (watcher) {
        this.watchers.push(watcher);
    };
    LosingChangesWatcherSingleton.prototype.onWindowBeforeUnload = function (e) {
        var confirmMessage = this.getConfirmMessage();
        if (confirmMessage) {
            e.returnValue = !!confirmMessage;
            return confirmMessage;
        }
        return undefined;
    };
    LosingChangesWatcherSingleton.prototype.getConfirmMessage = function () {
        var modifiedWatchers = this.getModifiedWatchers();
        return modifiedWatchers.length > 0 ? modifiedWatchers[0].getConfirmMessage() : '';
    };
    LosingChangesWatcherSingleton.prototype.getModifiedWatchers = function () {
        return this.watchers.filter(function (watcher) { return watcher.hasChanges(); });
    };
    LosingChangesWatcherSingleton.evtHandlersHolder = new event_handlers_holder_1.DomEventHandlersHolder();
    return LosingChangesWatcherSingleton;
}());
exports.LosingChangesWatcherSingleton = LosingChangesWatcherSingleton;
var LosingChangesWatcher = (function () {
    function LosingChangesWatcher(hasChangesCallback, confirmMessage) {
        this.hasChangesCallback = hasChangesCallback;
        this.confirmMessage = confirmMessage;
        LosingChangesWatcherSingleton.instance.add(this);
    }
    LosingChangesWatcher.prototype.hasChanges = function () {
        return this.hasChangesCallback();
    };
    LosingChangesWatcher.prototype.getConfirmMessage = function () {
        return this.confirmMessage;
    };
    LosingChangesWatcher.prototype.confirm = function () {
        return this.hasChanges() ? confirm(this.confirmMessage) : true;
    };
    LosingChangesWatcher.prototype.dispose = function () {
        this.hasChangesCallback = null;
        LosingChangesWatcherSingleton.dispose();
    };
    return LosingChangesWatcher;
}());
exports.LosingChangesWatcher = LosingChangesWatcher;
