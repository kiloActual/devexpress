"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var map_creator_1 = require("../../../base-utils/map-creator");
var field_request_manager_1 = require("../../../core/model/fields/field-request-manager");
var json_field_enums_1 = require("../../../core/model/json/enums/json-field-enums");
var create_range_copy_operation_1 = require("../../../core/model/manipulators/range/create-range-copy-operation");
var common_1 = require("@devexpress/utils/lib/utils/common");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var docvar_args_1 = require("../../../document-processor/docvar-args");
var processor_1 = require("../../../document-processor/public/processor");
var interval_1 = require("../../../model-api/interval");
var events_1 = require("../../public/events");
var FieldClientRequestManagerOptions = (function () {
    function FieldClientRequestManagerOptions(dataSource, useAsyncVersion, raiseCalculateDocumentVariable, raiseCalculateDocumentVariableAnync) {
        this.dataSource = dataSource;
        this.useAsyncVersion = useAsyncVersion;
        this.raiseCalculateDocumentVariable = raiseCalculateDocumentVariable;
        this.raiseCalculateDocumentVariableAnync = raiseCalculateDocumentVariableAnync;
    }
    return FieldClientRequestManagerOptions;
}());
exports.FieldClientRequestManagerOptions = FieldClientRequestManagerOptions;
var FieldClientRequestManager = (function (_super) {
    tslib_1.__extends(FieldClientRequestManager, _super);
    function FieldClientRequestManager(options) {
        var _this = _super.call(this) || this;
        _this.lastActiveRecord = -1;
        _this.options = options;
        return _this;
    }
    FieldClientRequestManager.prototype.forceSendDelayedRequests = function () { };
    FieldClientRequestManager.prototype.sendRequest = function (subDocument, activeRecord, _immediateSendRequest) {
        this.activeRecord = activeRecord;
        if (this.options.useAsyncVersion())
            this.asyncUpdate(subDocument);
        else
            this.syncUpdate(subDocument);
    };
    FieldClientRequestManager.prototype.asyncUpdate = function (subDocument) {
        var _this = this;
        var result = new map_creator_1.MapCreator();
        var updateData = [];
        var numReceivedResults = 0;
        number_1.NumberMapUtils.forEach(this.getSubDocumentData(subDocument), function (reqData, fieldId) {
            var _a;
            switch (reqData.serverUpdateFieldType) {
                case field_request_manager_1.ServerUpdateFieldType.DocVariable: {
                    var docVarData_1 = reqData;
                    var fieldData = new docvar_args_1.DocumentVariableData(function (value, keepLastParagraph) {
                        if (result.getByKey(fieldId) !== undefined)
                            return;
                        numReceivedResults++;
                        result.add(fieldId, _this.getDocumentVariableUpdateResult(subDocument.documentModel, docVarData_1.fieldName, value, keepLastParagraph));
                        if (numReceivedResults == updateData.length)
                            subDocument.fieldsWaitingForUpdate.update(result.get());
                    }, interval_1.convertToIntervalApi(docVarData_1.fieldInterval), docVarData_1.fieldName, docVarData_1.parameters.map(function (p) { return p.text; }));
                    updateData.push(fieldData);
                    break;
                }
                case field_request_manager_1.ServerUpdateFieldType.MergeField: {
                    var mergeFieldData = reqData;
                    var value = _this.getRecordValue(mergeFieldData.fieldName);
                    result.add(fieldId, (_a = {},
                        _a[json_field_enums_1.JSONUpdateFieldCommandResult.SimpleText] = String(value),
                        _a));
                    break;
                }
            }
        });
        if (updateData.length) {
            setTimeout(function () {
                var args = new docvar_args_1.CalculateDocumentVariableAsyncEventArgs(updateData);
                _this.options.raiseCalculateDocumentVariableAnync(args);
            }, 0);
        }
        else
            subDocument.fieldsWaitingForUpdate.update(result.get());
    };
    FieldClientRequestManager.prototype.syncUpdate = function (subDocument) {
        var _this = this;
        var result = new map_creator_1.MapCreator();
        number_1.NumberMapUtils.forEach(this.getSubDocumentData(subDocument), function (reqData, fieldId) {
            var _a;
            switch (reqData.serverUpdateFieldType) {
                case field_request_manager_1.ServerUpdateFieldType.DocVariable: {
                    var docVarData = reqData;
                    var eventArg = new events_1.CalculateDocumentVariableEventArgs(interval_1.convertToIntervalApi(docVarData.fieldInterval), docVarData.fieldName, docVarData.parameters.map(function (p) { return p.text; }));
                    _this.options.raiseCalculateDocumentVariable(eventArg);
                    result.add(fieldId, _this.getDocumentVariableUpdateResult(subDocument.documentModel, eventArg.variableName, eventArg.value, eventArg.keepLastParagraph));
                    break;
                }
                case field_request_manager_1.ServerUpdateFieldType.MergeField: {
                    var mergeFieldData = reqData;
                    var value = _this.getRecordValue(mergeFieldData.fieldName);
                    result.add(fieldId, (_a = {},
                        _a[json_field_enums_1.JSONUpdateFieldCommandResult.SimpleText] = String(value),
                        _a));
                    break;
                }
            }
        });
        subDocument.fieldsWaitingForUpdate.update(result.get());
    };
    FieldClientRequestManager.prototype.getDocumentVariableUpdateResult = function (documentModel, name, value, keepLastParagraph) {
        var _a, _b;
        var docVariables = documentModel.docVariables;
        if (!common_1.isDefined(value) && docVariables.contains(name))
            value = docVariables.getValue(name);
        if (value instanceof processor_1.DocumentProcessorBaseApi) {
            var rangeCopy = new create_range_copy_operation_1.RangeCopy(value._processor.modelManager.model, !keepLastParagraph);
            return _a = {},
                _a[json_field_enums_1.JSONUpdateFieldCommandResult.DocumentModel] = rangeCopy,
                _a;
        }
        else
            return _b = {},
                _b[json_field_enums_1.JSONUpdateFieldCommandResult.SimpleText] = value,
                _b;
    };
    FieldClientRequestManager.prototype.getRecordValue = function (fieldName) {
        var record = this.getRecord();
        var keys = Object.keys(record);
        for (var i = 0, key = void 0; key = keys[i]; i++)
            if (key.toLowerCase() == fieldName.toLowerCase())
                return record[key] + '';
        return '';
    };
    FieldClientRequestManager.prototype.getRecord = function () {
        if (this.lastActiveRecord != this.activeRecord) {
            this.currentRecord = this.options.dataSource.items()[this.activeRecord];
            this.lastActiveRecord = this.activeRecord;
        }
        return this.currentRecord ? this.currentRecord : {};
    };
    return FieldClientRequestManager;
}(field_request_manager_1.FieldRequestManager));
exports.FieldClientRequestManager = FieldClientRequestManager;
