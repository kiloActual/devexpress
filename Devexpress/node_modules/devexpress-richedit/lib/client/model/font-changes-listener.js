"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var client_command_1 = require("../../base/commands/client-command");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var ClientFontChangesListener = (function () {
    function ClientFontChangesListener(controlOwner) {
        this.controlOwner = controlOwner;
    }
    ClientFontChangesListener.prototype.NotifyFontAdded = function (font) {
        this.changeRibbonFontList(function (oldDataSource) {
            oldDataSource.push({ text: font.name, value: font.name });
            oldDataSource.sort(function (a, b) { return comparers_1.Comparers.string(a.text, b.text); });
            return oldDataSource;
        });
    };
    ClientFontChangesListener.prototype.NotifyFontRemoved = function (font) {
        this.changeRibbonFontList(function (oldDataSource) {
            var fNames = oldDataSource.filter(function (fontName) { return fontName.text != font.name; });
            return fNames.sort();
        });
    };
    ClientFontChangesListener.prototype.NotifyFontListChanged = function (fontCache) {
        var fonts = fontCache.getFontNames(true).map(function (name) {
            return { text: name, value: name };
        });
        this.changeRibbonFontList(function (_oldDataSource) {
            return fonts;
        });
    };
    ClientFontChangesListener.prototype.changeRibbonFontList = function (change) {
        var ribbonBar = this.controlOwner.barHolder.ribbon;
        if (ribbonBar) {
            var fontNameToolBarItems = ribbonBar.ribbon.getItems(client_command_1.RichEditClientCommand.ChangeFontName);
            if (fontNameToolBarItems) {
                var fontNameSelectBoxWidget = fontNameToolBarItems[0].widget;
                var dataSource = fontNameSelectBoxWidget.option('dataSource');
                var newDataSource = change(dataSource);
                fontNameSelectBoxWidget.option('dataSource', newDataSource);
            }
        }
    };
    return ClientFontChangesListener;
}());
exports.ClientFontChangesListener = ClientFontChangesListener;
