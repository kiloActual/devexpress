import { IRibbonBar } from '../../base/bars/interfaces';
import { RibbonBarBase } from '../../base/bars/ribbon';
import { RichEditClientCommand } from '../../base/commands/client-command';
import { IControlOwner } from '../../base/interfaces/i-control-owner';
import { Selection } from '../../base/selection/selection';
import { Ribbon } from '../../client-ribbon/client-ribbon/ribbon';
import { FontsSettings } from '../../core/model/options/fonts';
import { Ribbon as ApiRibbon } from '../public/ribbon/ribbon';
export declare class ClientRibbonBar extends RibbonBarBase implements IRibbonBar {
    private items;
    private contextItemsCategories;
    ribbon: Ribbon;
    private _toolbarItemsCache;
    private ownerElement;
    private activeItem;
    constructor(ownerControl: IControlOwner, ownerElement: HTMLElement, apiRibbon: ApiRibbon, fonts: FontsSettings);
    protected updateContextItem(_commandKey: RichEditClientCommand): void;
    onCanvasMouseDown(): void;
    private init;
    dispose(): void;
    protected checkActivateHeaderFooter(_selection: Selection): boolean;
    private createControl;
    getCommandKeys(): (RichEditClientCommand | string)[];
    setItemValue(command: RichEditClientCommand, value: any): void;
    setItemEnabled(command: RichEditClientCommand | string, enabled: boolean): void;
    setItemVisible(command: RichEditClientCommand, visible: boolean): void;
    getContextKeys(): RichEditClientCommand[];
    setContextItemVisible(key: RichEditClientCommand, visible: boolean): void;
    getTabVisible(tabIndex: number): boolean;
    activateContextItem(key: RichEditClientCommand): void;
    adjustControl(): void;
    getHeight(): number;
    setActiveTabIndex(index: number): void;
    getActiveTabIndex(): number;
    private createRibbon;
    private getOnOpenedToolbarItemHandler;
    private getOnClosedToolbarItemHandler;
    private getOnCommandExecutedHandler;
    private getOnToolbarItemCreatedHandler;
    private addToolbarItemToCache;
    private getToolbarItemsCache;
    private static changeFontNameItems;
    closeActiveItem(): void;
}
//# sourceMappingURL=ribbon.d.ts.map
