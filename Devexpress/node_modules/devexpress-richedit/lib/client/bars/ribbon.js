"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var ribbon_1 = require("../../base/bars/ribbon");
var client_command_1 = require("../../base/commands/client-command");
var ribbon_2 = require("../../client-ribbon/client-ribbon/ribbon");
var toolbar_sub_menu_item_1 = require("../../client-ribbon/client-ribbon/toolbar-items/toolbar-sub-menu-item");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var creator_1 = require("../public/ribbon/creator");
var ClientRibbonBar = (function (_super) {
    tslib_1.__extends(ClientRibbonBar, _super);
    function ClientRibbonBar(ownerControl, ownerElement, apiRibbon, fonts) {
        var _a;
        var _this = _super.call(this, ownerControl) || this;
        _this.activeItem = null;
        _this.ownerElement = ownerElement;
        _this.init(apiRibbon, fonts);
        _this.createControl((_a = apiRibbon.activeTabIndex) !== null && _a !== void 0 ? _a : 1);
        return _this;
    }
    ClientRibbonBar.prototype.updateContextItem = function (_commandKey) {
    };
    ClientRibbonBar.prototype.onCanvasMouseDown = function () { };
    ClientRibbonBar.prototype.init = function (apiRibbon, fonts) {
        var _this = this;
        this.items = [];
        this.contextItemsCategories = [];
        apiRibbon.tabs.forEach(function (tab) {
            ClientRibbonBar.changeFontNameItems(tab, fonts);
            if (tab.contextTab) {
                var ctTab_1 = (tab);
                var existingCat = list_1.ListUtils.elementBy(_this.contextItemsCategories, (function (c) { return c.name == ctTab_1.category; }));
                if (!existingCat)
                    _this.contextItemsCategories.push(existingCat = {
                        name: ctTab_1.category,
                        items: []
                    });
                existingCat.items.push(creator_1.createInnerTab(ctTab_1));
            }
            else
                _this.items.push(creator_1.createInnerTab(tab));
        });
    };
    ClientRibbonBar.prototype.dispose = function () {
        this.ribbon.dispose();
    };
    ClientRibbonBar.prototype.checkActivateHeaderFooter = function (_selection) {
        return false;
    };
    ClientRibbonBar.prototype.createControl = function (activeTabIndex) {
        var element = document.createElement('div');
        var firstChild = this.ownerElement.firstChild;
        if (firstChild)
            this.ownerElement.insertBefore(element, firstChild);
        else
            this.ownerElement.appendChild(element);
        this.createRibbon(element, activeTabIndex);
    };
    ClientRibbonBar.prototype.getCommandKeys = function () {
        return string_1.StringMapUtils.toListBy(this.getToolbarItemsCache(this.ribbon.getActiveTabIndex()), function (_val, key) { return key; });
    };
    ClientRibbonBar.prototype.setItemValue = function (command, value) {
        var toolbarItems = this.getToolbarItemsCache(this.ribbon.getActiveTabIndex())[command];
        if (!toolbarItems)
            return;
        toolbarItems.forEach(function (toolbarItem) {
            toolbarItem.setValue(value);
        });
    };
    ClientRibbonBar.prototype.setItemEnabled = function (command, enabled) {
        var toolbarItems = this.getToolbarItemsCache(this.ribbon.getActiveTabIndex())[command];
        if (!toolbarItems)
            return;
        toolbarItems.forEach(function (toolbarItem) {
            toolbarItem.setEnabled(enabled);
        });
    };
    ClientRibbonBar.prototype.setItemVisible = function (command, visible) {
        var toolbarItems = this.getToolbarItemsCache(this.ribbon.getActiveTabIndex())[command];
        if (!toolbarItems)
            return;
        toolbarItems.forEach(function (toolbarItem) {
            toolbarItem.setVisible(visible);
        });
    };
    ClientRibbonBar.prototype.getContextKeys = function () {
        return this.contextItemsCategories ? this.contextItemsCategories.map(function (ci) { return ci.name; }) : [];
    };
    ClientRibbonBar.prototype.setContextItemVisible = function (key, visible) {
        this.ribbon.setContextItemsCategoryVisible(key, visible);
    };
    ClientRibbonBar.prototype.getTabVisible = function (tabIndex) {
        return this.ribbon.getItemVisible(tabIndex);
    };
    ClientRibbonBar.prototype.activateContextItem = function (key) {
        var indexes = this.ribbon.getContextItemsIndexes(key);
        if (indexes && indexes.length)
            this.ribbon.setActiveTabIndex(indexes[0]);
    };
    ClientRibbonBar.prototype.adjustControl = function () {
        this.ribbon.adjustControl();
    };
    ClientRibbonBar.prototype.getHeight = function () {
        var elem = this.ribbon.getTabPanel().element();
        return elem.clientHeight || (elem[0] ? elem[0].clientHeight : 0);
    };
    ClientRibbonBar.prototype.setActiveTabIndex = function (index) {
        this.ribbon.getTabPanel().option('selectedIndex', index);
    };
    ClientRibbonBar.prototype.getActiveTabIndex = function () {
        return this.ribbon.getTabPanel().option('selectedIndex');
    };
    ClientRibbonBar.prototype.createRibbon = function (element, activeTabIndex) {
        var _this = this;
        this.ribbon = new ribbon_2.Ribbon({
            element: element,
            items: this.items,
            contextItemsCategories: this.contextItemsCategories,
            activeTabIndex: activeTabIndex,
            onTitleClickHandler: function () { _this.owner.Focus(); },
            onSelectionChangedHandler: function () { _this.updateItemsState(); },
            onCommandExecuted: this.getOnCommandExecutedHandler(),
            onOnToolbarItemCreated: this.getOnToolbarItemCreatedHandler(),
            onOpened: this.getOnOpenedToolbarItemHandler(),
            onClosed: this.getOnClosedToolbarItemHandler(),
        });
        this.ribbon.render();
    };
    ClientRibbonBar.prototype.getOnOpenedToolbarItemHandler = function () {
        var _this = this;
        return function (e) {
            if (e.item.name)
                _this.activeItem = e.item;
        };
    };
    ClientRibbonBar.prototype.getOnClosedToolbarItemHandler = function () {
        var _this = this;
        return function (e) {
            if (e.item.name)
                _this.activeItem = null;
        };
    };
    ClientRibbonBar.prototype.getOnCommandExecutedHandler = function () {
        var _this = this;
        return function (e) {
            if (e.item.name)
                _this.raiseBarCommandExecuted(e.item.name, e.parameter);
        };
    };
    ClientRibbonBar.prototype.getOnToolbarItemCreatedHandler = function () {
        var _this = this;
        return function (e) {
            _this.addToolbarItemToCache(e.item, e.item instanceof toolbar_sub_menu_item_1.ToolbarSubMenuItem ? e.item.name : e.options.name, e.tabIndex);
        };
    };
    ClientRibbonBar.prototype.addToolbarItemToCache = function (item, command, tabIndex) {
        var cache = this.getToolbarItemsCache(tabIndex);
        var items = cache[command];
        if (items === undefined)
            items = cache[command] = [];
        items.push(item);
    };
    ClientRibbonBar.prototype.getToolbarItemsCache = function (tabIndex) {
        if (!this._toolbarItemsCache)
            this._toolbarItemsCache = {};
        if (!this._toolbarItemsCache[tabIndex])
            this._toolbarItemsCache[tabIndex] = {};
        return this._toolbarItemsCache[tabIndex];
    };
    ClientRibbonBar.changeFontNameItems = function (tab, fonts) {
        if (fonts.fonts.length > 0) {
            tab.items.forEach(function (item) {
                if (item.id == client_command_1.RichEditClientCommand.ChangeFontName) {
                    var fontChangeItem = item;
                    fontChangeItem.dataSource = fonts.fonts.map(function (font) { return { text: font.name, value: font.name }; });
                }
            });
        }
    };
    ClientRibbonBar.prototype.closeActiveItem = function () {
        if (this.activeItem) {
            this.activeItem.widget.close();
            this.activeItem = null;
        }
    };
    return ClientRibbonBar;
}(ribbon_1.RibbonBarBase));
exports.ClientRibbonBar = ClientRibbonBar;
