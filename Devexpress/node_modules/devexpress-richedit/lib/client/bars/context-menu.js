"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var context_menu_1 = require("devextreme/ui/context_menu");
var context_menu_2 = require("../../base/bars/context-menu");
var client_command_1 = require("../../base/commands/client-command");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var dxt_utils_1 = require("../../dxt-utils/dxt-utils/dxt-utils");
var enum_1 = require("../public/commands/enum");
var item_1 = require("../public/context-menu/item");
var menu_1 = require("../public/context-menu/menu");
var events_1 = require("../public/events");
var ClientContextMenuBar = (function (_super) {
    tslib_1.__extends(ClientContextMenuBar, _super);
    function ClientContextMenuBar(ownerControl, ownerElement, initialItems) {
        var _this = _super.call(this, ownerControl) || this;
        _this.ownerElement = ownerElement;
        _this.createControl(initialItems);
        return _this;
    }
    ClientContextMenuBar.prototype.onCanvasMouseDown = function () {
        this.menu.hide();
    };
    ClientContextMenuBar.prototype.dispose = function () {
        this.menu.dispose();
        dom_1.DomUtils.hideNode(this.targetElement);
        clearTimeout(this.menuShowTimerId);
    };
    ClientContextMenuBar.getInitialItems = function () {
        var items = getInitialContextMenuItems();
        dxt_utils_1.DxtUtils.correctItemsIcons(items);
        return items;
    };
    ClientContextMenuBar.prototype.createControl = function (initialItems) {
        var _this = this;
        this.initialItems = initialItems !== null && initialItems !== void 0 ? initialItems : ClientContextMenuBar.getInitialItems();
        var parentElement = this.ownerElement.appendChild(document.createElement("div"));
        this.targetElement = this.createTargetElement();
        this.menu = new context_menu_1.default(parentElement, {
            dataSource: this.initialItems,
            target: this.targetElement,
            onItemClick: function (e) {
                var itemData = e.itemData;
                var param = itemData && itemData.id == enum_1.ContextMenuCommandId.ApplySpellingSuggestion ? itemData.text : null;
                _this.raiseBarCommandExecuted(itemData.id, param);
            },
            onHidden: function () { return _this.owner.Focus(); },
        });
    };
    ClientContextMenuBar.prototype.getCommandKeys = function () {
        return string_1.StringMapUtils.toListBy(this.getItemsCache(), function (_val, key) { return key; });
    };
    ClientContextMenuBar.prototype.setItemEnabled = function (key, enabled) {
        var itemsCache = this.getItemsCache();
        for (var i = 0, item = void 0; item = itemsCache[key][i]; i++)
            item.disabled = !enabled;
    };
    ClientContextMenuBar.prototype.setItemVisible = function (key, visible) {
        var itemsCache = this.getItemsCache();
        for (var i = 0, item = void 0; item = itemsCache[key][i]; i++)
            item.visible = visible;
    };
    ClientContextMenuBar.prototype.setItemValue = function (_key, _value) { };
    ClientContextMenuBar.prototype.hide = function () {
        this.menu.hide();
    };
    ClientContextMenuBar.prototype.createTargetElement = function () {
        var targetElement = document.createElement("div");
        targetElement.className = 'dxrePopupTarget';
        document.body.appendChild(targetElement);
        return targetElement;
    };
    ClientContextMenuBar.prototype.getItemsCache = function () {
        if (!this.cache) {
            this.cache = {};
            this.fillCache(this.initialItems);
        }
        return this.cache;
    };
    ClientContextMenuBar.prototype.fillCache = function (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            var key = item.id;
            if (key && client_command_1.RichEditClientCommand[key] !== undefined) {
                var cache = this.cache[key];
                if (!cache)
                    cache = this.cache[key] = [];
                cache.push(item);
            }
            if (item.items)
                this.fillCache(item.items);
        }
    };
    ClientContextMenuBar.prototype.show = function (getPoint) {
        var _this = this;
        var _a;
        var items = list_1.ListUtils.shallowCopy(this.initialItems);
        this.isSpellingMenu = this.addSuggestionItems(items);
        this.cache = undefined;
        var commandKeys = this.getCommandKeys();
        for (var _i = 0, commandKeys_1 = commandKeys; _i < commandKeys_1.length; _i++) {
            var commandKey = commandKeys_1[_i];
            this.updateBarItem(commandKey);
        }
        var richEditOwner = this.owner;
        var simpleContextMenu = new menu_1.SimpleContextMenu(true, function () { return list_1.ListUtils.map(items, function (item) { return item_1.cloneContextMenuItem(item); }); });
        var args = new events_1.ContextMenuShowingEventArgs(simpleContextMenu);
        richEditOwner.raiseContextMenuShowing(args);
        if (richEditOwner.contextMenuSettings.enabled && args.contextMenu.enabled) {
            var point_1 = getPoint(this);
            this.menu.option("dataSource", (_a = simpleContextMenu._items) !== null && _a !== void 0 ? _a : items);
            this.menuShowTimerId = setTimeout(function () {
                _this.menu.option("position.offset", { x: point_1.x, y: point_1.y });
                _this.menu.show();
            }, 10);
        }
    };
    ClientContextMenuBar.prototype.addSuggestionItems = function (items) {
        var suggestions = this.getSuggestions();
        if (suggestions === null || suggestions === undefined)
            return false;
        if (suggestions.length > 0) {
            list_1.ListUtils.reverseForEach(suggestions, function (suggestion) {
                items.unshift(new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ApplySpellingSuggestion, {
                    text: suggestion,
                    icon: undefined,
                    beginGroup: false
                }));
            });
        }
        else
            items.unshift(new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.NoSpellingSuggestions, {
                text: "No spelling suggestions",
                icon: undefined,
                beginGroup: false,
                disabled: true
            }));
        return true;
    };
    return ClientContextMenuBar;
}(context_menu_2.ContextMenuBarBase));
exports.ClientContextMenuBar = ClientContextMenuBar;
function getInitialContextMenuItems() {
    return [
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.IgnoreSpellingError, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_IgnoreMistakenWord'), beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.IgnoreAllSpellingErrors, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_IgnoreAllMistakenWords'), beginGroup: false }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.AddWordToDictionary, { text: localization_1.formatMessage('ASPxRichEditStringId.Spelling_AddToDictionary'), beginGroup: false }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.OpenHyperlink, { text: localization_1.formatMessage('ASPxRichEditStringId.OpenHyperlink'), icon: 'dxre-icon-Select', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowEditHyperlinkDialog, { text: localization_1.formatMessage('ASPxRichEditStringId.EditHyperlink'), icon: 'dxre-icon-Hyperlink' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.RemoveHyperlink, { text: localization_1.formatMessage('ASPxRichEditStringId.RemoveHyperlink'), icon: 'dxre-icon-DeleteHyperlink' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.UpdateField, { text: localization_1.formatMessage('ASPxRichEditStringId.UpdateField'), icon: 'dxre-icon-UpdateField', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ToggleFieldCodes, { text: localization_1.formatMessage('ASPxRichEditStringId.ToggleFieldCodes'), icon: 'dxre-icon-ToggleFieldCodes' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.RestartNumberedList, { text: localization_1.formatMessage('ASPxRichEditStringId.RestartNumbering'), icon: 'dxre-icon-RestartNumbering', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ContinueNumberedList, { text: localization_1.formatMessage('ASPxRichEditStringId.ContinueNumbering'), icon: 'dxre-icon-ContinueNumbering', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.Cut, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_CutSelection'), beginGroup: true, icon: 'dxre-icon-Cut' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.Copy, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_CopySelection'), icon: 'dxre-icon-Copy' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.Paste, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_Paste'), icon: 'dxre-icon-Paste' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.TableMenu, {
            text: localization_1.formatMessage('ASPxRichEditStringId.InsertButton'), beginGroup: true, icon: 'dxre-icon-InsertTable', items: [
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.InsertTableColumnToTheLeft, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_InsertTableColumnToTheLeft'), icon: 'dxre-icon-InsertTableColumnsToTheLeft' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.InsertTableColumnToTheRight, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_InsertTableColumnToTheRight'), icon: 'dxre-icon-InsertTableColumnsToTheRight' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.InsertTableRowAbove, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_InsertTableRowAbove'), icon: 'dxre-icon-InsertTableRowsAbove' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.InsertTableRowBelow, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_InsertTableRowBelow'), icon: 'dxre-icon-InsertTableRowsBelow' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowInsertTableCellsDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_InsertTableCells'), icon: 'dxre-icon-InsertTableCells' }),
            ]
        }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowDeleteTableCellsDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_DeleteTableCells'), icon: 'dxre-icon-DeleteTableCells' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowSplitCellsDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SplitTableCellsMenuItem'), icon: 'dxre-icon-SplitTableCells' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.MergeTableCells, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_MergeTableCells'), icon: 'dxre-icon-MergeTableCells' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.DecreaseParagraphIndent, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_DecrementIndent'), icon: 'dxre-icon-IndentDecrease', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.IncreaseParagraphIndent, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_IncrementIndent'), icon: 'dxre-icon-IndentIncrease' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowFontDialog, { text: localization_1.formatMessage('ASPxRichEditStringId.Numbering_Font'), icon: 'dxre-icon-FontColor', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowParagraphDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_ShowParagraphForm'), icon: 'dxre-icon-Paragraph' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowBookmarkDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_Bookmark'), icon: 'dxre-icon-Bookmark', beginGroup: true }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ShowHyperlinkDialog, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_Hyperlink'), icon: 'dxre-icon-Hyperlink' }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.ChangeFloatingObjectTextWrapTypeMenu, {
            text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_ChangeFloatingObjectTextWrapType'), icon: 'dxre-icon-TextWrapSquare', beginGroup: true, items: [
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectInlineTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectInlineWithTextWrapType'), icon: 'dxre-icon-TextWrapInline' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectSquareTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectSquareTextWrapType'), icon: 'dxre-icon-TextWrapSquare' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectTightTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectTightTextWrapType'), icon: 'dxre-icon-TextWrapTight' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectThroughTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectThroughTextWrapType'), icon: 'dxre-icon-TextWrapThrough' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectTopAndBottomTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectTopAndBottomTextWrapType'), icon: 'dxre-icon-TextWrapTopAndBottom' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectBehindTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectBehindTextWrapType'), icon: 'dxre-icon-TextWrapBehind' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SetFloatingObjectInFrontOfTextWrapType, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SetFloatingObjectInFrontOfTextWrapType'), icon: 'dxre-icon-TextWrapInFrontOfText' }),
            ]
        }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectBringForwardMenu, {
            text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectBringForwardPlaceholder'), icon: 'dxre-icon-FloatingObjectBringForward', items: [
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectBringForward, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectBringForward'), icon: 'dxre-icon-FloatingObjectBringForward' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectBringToFront, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectBringToFront'), icon: 'dxre-icon-FloatingObjectBringToFront' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectBringInFrontOfText, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectBringInFrontOfText'), icon: 'dxre-icon-FloatingObjectBringInFrontOfText' }),
            ]
        }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectSendBackwardMenu, {
            text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectSendBackwardPlaceholder'), icon: 'dxre-icon-FloatingObjectSendBackward', items: [
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectSendBackward, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectSendBackward'), icon: 'dxre-icon-FloatingObjectSendBackward' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectSendToBack, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectSendToBack'), icon: 'dxre-icon-FloatingObjectSendToBack' }),
                new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.FloatingObjectSendBehindText, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_FloatingObjectSendBehindText'), icon: 'dxre-icon-FloatingObjectSendBehindText' }),
            ]
        }),
        new item_1.ContextMenuItem(enum_1.ContextMenuCommandId.SelectAll, { text: localization_1.formatMessage('XtraRichEditStringId.MenuCmd_SelectAll'), icon: 'dxre-icon-SelectAll', beginGroup: true }),
    ];
}
