"use strict";
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var client_command_1 = require("../../base/commands/client-command");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var tab_1 = require("../public/ribbon/tab");
var CategoryType;
(function (CategoryType) {
    CategoryType[CategoryType["Common"] = 0] = "Common";
    CategoryType[CategoryType["Picture"] = 1] = "Picture";
    CategoryType[CategoryType["TextBox"] = 2] = "TextBox";
    CategoryType[CategoryType["Table"] = 3] = "Table";
    CategoryType[CategoryType["HeaderFooter"] = 4] = "HeaderFooter";
    CategoryType[CategoryType["NUMBER"] = 5] = "NUMBER";
})(CategoryType || (CategoryType = {}));
var Category = (function () {
    function Category(tabId, contextTabItemId) {
        this.tabIndex = null;
        this.initialTabIndex = null;
        this.setted = false;
        this.tabId = tabId;
        this.contextTabItemId = contextTabItemId;
    }
    Category.prototype.setInitialTabIndex = function (tabIndex) {
        this.initialTabIndex = tabIndex;
        this.tabIndex = tabIndex;
    };
    return Category;
}());
var ActiveContextTabManager = (function () {
    function ActiveContextTabManager(barHolder) {
        var _this = this;
        this.currCategoryType = CategoryType.Common;
        this.ribbonVisible = false;
        this.forbidChangeActiveTabIndex = false;
        this.barHolder = barHolder;
        this.categories = [];
        list_1.ListUtils.initByCallback(CategoryType.NUMBER, function (catInd) {
            return _this.categories[catInd] = new Category(ActiveContextTabManager.categoryToInitialTabId[catInd], ActiveContextTabManager.categoryToContextTabItemId[catInd]);
        });
    }
    ActiveContextTabManager.prototype.init = function (apiRibbon) {
        this.ribbonVisible = apiRibbon.visible;
        if (!this.ribbonVisible)
            return;
        this.setState(apiRibbon);
    };
    ActiveContextTabManager.prototype.NotifySelectionChanged = function (selection) {
        var _this = this;
        if (!this.ribbonVisible)
            return;
        var activeTabIndex = null;
        var applyCategory = function (categoryType) {
            if (_this.currCategoryType !== categoryType) {
                var prevCat = _this.categories[_this.currCategoryType];
                prevCat.tabIndex = _this.barHolder.ribbon.getActiveTabIndex();
                prevCat.tabId = _this.apiTabs[prevCat.tabIndex].id;
                _this.currCategoryType = categoryType;
                var currCat = _this.categories[categoryType];
                activeTabIndex = currCat.tabIndex === null ? prevCat.tabIndex : currCat.tabIndex;
            }
        };
        var visibleContextTabIds = {};
        var contextCategoryChosen = false;
        for (var _i = 0, _a = ActiveContextTabManager.selectionOrder; _i < _a.length; _i++) {
            var info = _a[_i];
            var visible = info.check(selection);
            var contextTabItemId = this.categories[info.category].contextTabItemId;
            if (!visibleContextTabIds[contextTabItemId])
                visibleContextTabIds[contextTabItemId] = visible;
            if (!contextCategoryChosen && visible) {
                applyCategory(info.category);
                contextCategoryChosen = true;
            }
        }
        if (!contextCategoryChosen)
            applyCategory(CategoryType.Common);
        number_1.NumberMapUtils.forEach(visibleContextTabIds, function (visible, cmdId) {
            return _this.barHolder.ribbon.setContextItemVisible(cmdId, visible);
        });
        if (activeTabIndex !== null && !this.forbidChangeActiveTabIndex)
            this.setActiveTab(activeTabIndex);
    };
    ActiveContextTabManager.prototype.setActiveTab = function (activeTabIndex) {
        var actTab = this.apiTabs[activeTabIndex];
        if (actTab.contextTab) {
            if (!this.barHolder.ribbon.getTabVisible(activeTabIndex)) {
                activeTabIndex = this.categories[this.currCategoryType].initialTabIndex;
                if (activeTabIndex == null)
                    activeTabIndex = this.categories[CategoryType.Common].tabIndex;
            }
        }
        this.barHolder.ribbon.setActiveTabIndex(activeTabIndex);
    };
    ActiveContextTabManager.prototype.setState = function (apiRibbon) {
        var _this = this;
        this.apiTabs = apiRibbon.tabs;
        var setUnsetted = function () {
            _this.apiTabs.forEach(function (tab, tabIndex) {
                for (var _i = 0, _a = _this.categories; _i < _a.length; _i++) {
                    var cat = _a[_i];
                    if (!cat.setted) {
                        if (cat.tabId == tab.id) {
                            cat.setInitialTabIndex(tabIndex);
                            cat.setted = true;
                        }
                    }
                }
            });
            return list_1.ListUtils.allOf(_this.categories, function (state) { return state.setted; });
        };
        for (var _i = 0, _a = this.categories; _i < _a.length; _i++) {
            var cat = _a[_i];
            cat.setted = false;
            cat.setInitialTabIndex(null);
        }
        if (setUnsetted())
            return;
        this.categories.forEach(function (state, stateIndex) {
            if (!state.setted)
                state.tabId = ActiveContextTabManager.categoryToInitialTabId[stateIndex];
        });
        if (setUnsetted())
            return;
        var commonCat = this.categories[CategoryType.Common];
        if (!commonCat.setted)
            commonCat.setInitialTabIndex(apiRibbon.activeTabIndex);
    };
    ActiveContextTabManager.categoryToInitialTabId = (_a = {},
        _a[CategoryType.Common] = tab_1.RibbonTabType.Home,
        _a[CategoryType.Picture] = tab_1.RibbonTabType.FloatingObjectsFormat,
        _a[CategoryType.TextBox] = tab_1.RibbonTabType.FloatingObjectsFormat,
        _a[CategoryType.Table] = tab_1.RibbonTabType.TableDesign,
        _a[CategoryType.HeaderFooter] = tab_1.RibbonTabType.HeadersFooters,
        _a);
    ActiveContextTabManager.categoryToContextTabItemId = (_b = {},
        _b[CategoryType.Common] = null,
        _b[CategoryType.Picture] = client_command_1.RichEditClientCommand.ContextItem_FloatingObjects,
        _b[CategoryType.TextBox] = client_command_1.RichEditClientCommand.ContextItem_FloatingObjects,
        _b[CategoryType.Table] = client_command_1.RichEditClientCommand.ContextItem_Tables,
        _b[CategoryType.HeaderFooter] = client_command_1.RichEditClientCommand.ContextItem_HeadersFooters,
        _b);
    ActiveContextTabManager.selectionOrder = [
        { category: CategoryType.Picture, check: function (selection) { return selection.specialRunInfo.isPictureSelected(); } },
        { category: CategoryType.Table, check: function (selection) { return selection.tableInfo.isSelected; } },
        { category: CategoryType.TextBox, check: function (selection) { return selection.specialRunInfo.isTextBoxSelected(); } },
        { category: CategoryType.HeaderFooter, check: function (selection) { return selection.getState().intervalsInfo.subDocument.isHeaderFooter(); } },
    ];
    return ActiveContextTabManager;
}());
exports.ActiveContextTabManager = ActiveContextTabManager;
