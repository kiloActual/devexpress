"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var list_1 = require("devextreme/ui/list");
var dialog_base_1 = require("./dialog-base");
var InsertMergeFieldDialog = (function (_super) {
    tslib_1.__extends(InsertMergeFieldDialog, _super);
    function InsertMergeFieldDialog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastSearchText = '';
        _this.fieldNames = [];
        return _this;
    }
    InsertMergeFieldDialog.prototype.getTitle = function () {
        return localization_1.formatMessage("XtraRichEditStringId.MenuCmd_ShowInsertMergeFieldForm");
    };
    InsertMergeFieldDialog.prototype.getMaxWidth = function () {
        return 400;
    };
    InsertMergeFieldDialog.prototype.getFormOptions = function () {
        var _this = this;
        return {
            items: [
                {
                    label: { visible: false },
                    editorType: 'dxTextBox',
                    editorOptions: {
                        onInput: function (e) { _this.filter(e.component.option('text')); }
                    }
                },
                {
                    label: { visible: false },
                    template: function () {
                        var element = document.createElement('div');
                        var currentItemIndex = Number.NaN;
                        var resetDoubleClickTimerId = null;
                        _this.fieldsList = new list_1.default(element, {
                            height: 250,
                            noDataText: localization_1.formatMessage("ASPxRichEditStringId.InsertMergeField_NoFields"),
                            selectionMode: 'single',
                            onSelectionChanged: function () { _this.setButtonsEnabled(); },
                            onItemClick: function (e) {
                                if (resetDoubleClickTimerId)
                                    clearTimeout(resetDoubleClickTimerId);
                                if (e.itemIndex == currentItemIndex) {
                                    _this.applyParameters();
                                    _this.popupDialog.hide();
                                }
                                if (typeof (e.itemIndex) === 'number')
                                    currentItemIndex = e.itemIndex;
                                else
                                    currentItemIndex = e.itemIndex ? e.itemIndex.item : Number.NaN;
                                resetDoubleClickTimerId = setTimeout(function () {
                                    currentItemIndex = Number.NaN;
                                }, (300));
                            },
                        });
                        return element;
                    }
                }
            ]
        };
    };
    InsertMergeFieldDialog.prototype.afterShowing = function () {
        var rich = this.richedit.owner;
        this.fieldNames = Object.keys(rich.dataSource.items()[0]);
        this.fieldsList.option('items', this.fieldNames);
        this.setButtonsEnabled();
    };
    InsertMergeFieldDialog.prototype.filter = function (text) {
        text = text.toLowerCase();
        if (text != this.lastSearchText) {
            this.lastSearchText = text;
            this.fieldsList.option('items', text.length > 0 ? this.fieldNames.filter(function (t) { return t.toLowerCase().indexOf(text) > -1; }) : this.fieldNames);
            this.setButtonsEnabled();
        }
    };
    InsertMergeFieldDialog.prototype.setButtonsEnabled = function () {
        this.insertBtn.option('disabled', !this.fieldsList.option('selectedItems')[0]);
    };
    InsertMergeFieldDialog.prototype.getToolbarItems = function () {
        var _this = this;
        return [
            {
                widget: 'dxButton',
                location: 'after',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage("ASPxRichEditStringId.InsertButton"),
                    onInitialized: function (e) { _this.insertBtn = e.component; },
                    onClick: function () {
                        _this.applyParameters();
                        _this.popupDialog.hide();
                    }
                }
            },
            {
                widget: 'dxButton',
                location: 'after',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage("ASPxRichEditStringId.CloseButton"),
                    onClick: function () {
                        _this.popupDialog.hide();
                        _this.afterClosing();
                    }
                }
            }
        ];
    };
    InsertMergeFieldDialog.prototype.updateParameters = function (parameters, _data) {
        parameters.fieldName = this.fieldsList.option('selectedItems')[0];
    };
    return InsertMergeFieldDialog;
}(dialog_base_1.DialogBase));
exports.InsertMergeFieldDialog = InsertMergeFieldDialog;
