"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var form_1 = require("devextreme/ui/form");
var popup_1 = require("devextreme/ui/popup");
var DialogBase = (function () {
    function DialogBase(element, richedit) {
        this.element = element;
        this.richedit = richedit;
    }
    DialogBase.prototype.dispose = function () {
    };
    DialogBase.prototype.show = function (parameters, callback, afterClosing, _isModal) {
        var _this = this;
        this.parameters = parameters;
        this.callback = callback;
        this.afterClosing = afterClosing;
        this.element.className = '';
        this.element.innerHTML = '';
        var popupOptions = {
            title: this.getTitle(),
            shading: true,
            maxHeight: '100%',
            maxWidth: this.getMaxWidth(),
            contentTemplate: function () {
                var element = document.createElement('div');
                _this.form = new form_1.default(element, tslib_1.__assign(tslib_1.__assign({}, _this.getFormOptionsCore()), _this.getFormOptions()));
                return element;
            },
            toolbarItems: this.getToolbarItems(),
            height: 'auto',
            shadingColor: "rgba(0,0,0,0)",
            onHidden: function () { _this.richedit.focusManager.captureFocus(); }
        };
        this.popupDialog = new popup_1.default(this.element, popupOptions);
        this.popupDialog.show();
        this.afterShowing();
    };
    DialogBase.prototype.getToolbarItems = function () {
        return [this.getOkToolbarItem(), this.getCancelToolbarItem()];
    };
    DialogBase.prototype.getOkToolbarItem = function () {
        var _this = this;
        return {
            widget: 'dxButton',
            location: 'after',
            toolbar: 'bottom',
            options: {
                text: localization_1.formatMessage("ASPxRichEditStringId.OkButton"),
                onClick: function () {
                    _this.applyParameters();
                    _this.popupDialog.hide();
                    _this.afterClosing();
                }
            }
        };
    };
    DialogBase.prototype.getCancelToolbarItem = function () {
        var _this = this;
        return {
            widget: 'dxButton',
            location: 'after',
            toolbar: 'bottom',
            options: {
                text: localization_1.formatMessage('ASPxRichEditStringId.CancelButton'),
                onClick: function () {
                    _this.popupDialog.hide();
                    _this.afterClosing();
                }
            }
        };
    };
    DialogBase.prototype.applyParameters = function () {
        var data = this.form.option("formData");
        this.updateParameters(this.parameters, data);
        this.callback(this.parameters);
    };
    DialogBase.prototype.afterShowing = function () { };
    DialogBase.prototype.getMaxWidth = function () { return 500; };
    DialogBase.prototype.getFormOptionsCore = function () {
        return {
            scrollingEnabled: true,
        };
    };
    return DialogBase;
}());
exports.DialogBase = DialogBase;
