"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var dialog_base_1 = require("./dialog-base");
var InsertTableDialog = (function (_super) {
    tslib_1.__extends(InsertTableDialog, _super);
    function InsertTableDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.InsertTableTitle');
    };
    InsertTableDialog.prototype.getMaxWidth = function () {
        return 300;
    };
    InsertTableDialog.prototype.getFormOptions = function () {
        return {
            labelLocation: 'top',
            colCount: 1,
            items: [{
                    dataField: 'columnCount',
                    editorType: 'dxNumberBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.InsertTable_NumberOfColumns'), location: 'left' },
                    editorOptions: {
                        value: this.parameters.columnCount,
                        showSpinButtons: true,
                        min: 1
                    }
                },
                {
                    dataField: 'rowCount',
                    editorType: 'dxNumberBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.InsertTable_NumberOfRows'), location: 'left' },
                    editorOptions: {
                        value: this.parameters.rowCount,
                        showSpinButtons: true,
                        min: 1
                    }
                }]
        };
    };
    InsertTableDialog.prototype.updateParameters = function (parameters, data) {
        parameters.columnCount = data.columnCount;
        parameters.rowCount = data.rowCount;
    };
    return InsertTableDialog;
}(dialog_base_1.DialogBase));
exports.InsertTableDialog = InsertTableDialog;
