"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var list_1 = require("devextreme/ui/list");
var dialog_find_replace_command_1 = require("../../base/commands/dialogs/dialog-find-replace-command");
var i_rich_edit_core_1 = require("../../base/interfaces/i-rich-edit-core");
var dialog_base_1 = require("./dialog-base");
var FindReplaceDialog = (function (_super) {
    tslib_1.__extends(FindReplaceDialog, _super);
    function FindReplaceDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FindReplaceDialog.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        clearTimeout(this.searchTimerId);
    };
    FindReplaceDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.FindReplaceTitle');
    };
    FindReplaceDialog.prototype.getFormOptions = function () {
        var _this = this;
        this.controller = this.parameters.controller;
        return {
            colCount: 2,
            items: [
                {
                    colSpan: 2,
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Find'), location: 'left' },
                    editorType: 'dxTextBox',
                    editorOptions: {
                        onInitialized: function (e) { _this.findTextBox = e.component; },
                        onInput: function (e) {
                            clearTimeout(_this.searchTimerId);
                            if (e.component.option('text'))
                                _this.searchTimerId = setTimeout(function () {
                                    _this.findAll();
                                }, 700);
                            else {
                                _this.controller.resetSearch();
                                _this.clearResults();
                            }
                        }
                    }
                },
                {
                    colSpan: 2,
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_ReplaceWith'), location: 'left' },
                    editorType: 'dxTextBox',
                    editorOptions: {
                        onInitialized: function (e) { _this.replaceTextBox = e.component; }
                    }
                },
                {
                    colSpan: 2,
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Results'), location: 'top' },
                    template: function () {
                        var element = document.createElement('div');
                        _this.resultList = new list_1.default(element, {
                            height: 200,
                            noDataText: '',
                            selectionMode: 'single',
                            keyExpr: 'index',
                            onSelectionChanged: function () { _this.goTo(); }
                        });
                        return element;
                    }
                },
                {
                    label: { visible: false },
                    editorType: 'dxCheckBox',
                    editorOptions: {
                        onValueChanged: function () { _this.findAll(); },
                        onInitialized: function (e) { _this.matchCaseCheckBox = e.component; },
                        text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_MatchCase')
                    }
                },
                {
                    label: { visible: false },
                    template: function () {
                        _this.resultLabel = document.createElement('div');
                        _this.resultLabel.style.textAlign = 'right';
                        return _this.resultLabel;
                    }
                }
            ]
        };
    };
    FindReplaceDialog.prototype.afterShowing = function () {
        this.controller.onChanged.add(this);
        this.richedit.owner.hideQuickSearchPanel();
        if (this.controller.whatFind) {
            this.findTextBox.option('value', this.controller.whatFind);
            if (this.controller.foundIntervals.length)
                this.fillResults(this.controller.foundIntervals);
            else
                this.findAll();
        }
    };
    FindReplaceDialog.prototype.NotifySearchReset = function () {
        this.clearResults();
    };
    FindReplaceDialog.prototype.getToolbarItems = function () {
        var _this = this;
        return [
            {
                widget: 'dxButton',
                location: 'before',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_ReplaceAll'),
                    onClick: function () { _this.replaceAll(); },
                    onInitialized: function (e) { _this.replaceAllBtn = e.component; }
                }
            },
            {
                widget: 'dxButton',
                location: 'before',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Replace'),
                    onClick: function () { _this.replace(); },
                    onInitialized: function (e) { _this.replaceBtn = e.component; }
                }
            },
            {
                widget: 'dxButton',
                location: 'after',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Previous'),
                    onClick: function () { _this.findPrev(); },
                    onInitialized: function (e) { _this.prevBtn = e.component; }
                }
            },
            {
                widget: 'dxButton',
                location: 'after',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Next'),
                    onClick: function () { _this.findNext(); },
                    onInitialized: function (e) { _this.nextBtn = e.component; }
                }
            }
        ];
    };
    FindReplaceDialog.prototype.findNext = function () {
        var index = this.controller.findNextIntervalIndex();
        if (index !== null) {
            this.controller.selectIntervalByIndex(index);
            this.selectResult(index);
        }
    };
    FindReplaceDialog.prototype.findPrev = function () {
        var index = this.controller.findPrevIntervalIndex();
        if (index !== null) {
            this.controller.selectIntervalByIndex(index);
            this.selectResult(index);
        }
    };
    FindReplaceDialog.prototype.findAll = function () {
        var findText = this.findTextBox.option('text');
        if (findText) {
            this.controller.findAll(findText, this.matchCaseCheckBox.option('value'));
            this.fillResults(this.controller.foundIntervals);
            var index = this.controller.findNextIntervalIndex();
            if (index !== null)
                this.controller.scrollToIntervalByIndex(index);
        }
    };
    FindReplaceDialog.prototype.replace = function () {
        var replaceWith = this.replaceTextBox.option('text') || "";
        if (this.controller.replace(this.findTextBox.option('text'), replaceWith, this.matchCaseCheckBox.option('value')))
            this.findAll();
        this.findNext();
    };
    FindReplaceDialog.prototype.replaceAll = function () {
        var replaceWith = this.replaceTextBox.option('text') || "";
        this.controller.replaceAll(this.findTextBox.option('text'), replaceWith, this.matchCaseCheckBox.option('value'));
        this.findAll();
    };
    FindReplaceDialog.prototype.goTo = function () {
        var selectedKeys = this.resultList.option('selectedItemKeys');
        if (selectedKeys.length) {
            var index = selectedKeys[0];
            this.controller.selectIntervalByIndex(index);
            this.updateResultLabel(index);
        }
    };
    FindReplaceDialog.prototype.setEnabledForButton = function (enabled) {
        var readOnly = this.richedit.readOnly === i_rich_edit_core_1.ReadOnlyMode.Persistent;
        this.replaceAllBtn.option('disabled', !enabled || readOnly);
        this.replaceBtn.option('disabled', !enabled || readOnly);
        this.nextBtn.option('disabled', !enabled);
        this.prevBtn.option('disabled', !enabled);
    };
    FindReplaceDialog.prototype.fillResults = function (foundIntervals) {
        var _this = this;
        this.clearResults();
        if (foundIntervals.length) {
            if (foundIntervals.length < 300) {
                var sorce = foundIntervals.map(function (interval, index) {
                    return _this.createListItem(dialog_find_replace_command_1.DialogFindReplaceCommand.getTextForResult(_this.richedit, _this.richedit.selection.activeSubDocument, interval), index);
                });
                this.resultList.option('items', sorce);
                this.resultList.option('disabled', false);
            }
            else {
                this.resultList.option('items', [this.createListItem(localization_1.formatMessage('ASPxRichEditStringId.FindReplace_TooLongResult'), 0)]);
                this.resultList.option('disabled', true);
            }
            this.setEnabledForButton(true);
        }
        else {
            if (this.findTextBox.option('text'))
                this.resultList.option('items', [this.createListItem(localization_1.formatMessage('ASPxRichEditStringId.FindReplace_NoResult'), 0)]);
            this.resultList.option('disabled', true);
        }
        this.updateResultLabel(-1);
    };
    FindReplaceDialog.prototype.createListItem = function (text, index) {
        return { html: text, index: index };
    };
    FindReplaceDialog.prototype.clearResults = function () {
        this.resultList.option('items');
        this.setEnabledForButton(false);
        this.updateResultLabel(-1);
    };
    FindReplaceDialog.prototype.selectResult = function (index) {
        if (!this.resultList.option('disabled'))
            this.resultList.option('selectedItemKeys', [index]);
        this.updateResultLabel(index);
    };
    FindReplaceDialog.prototype.updateResultLabel = function (index) {
        if (this.controller.foundIntervals.length) {
            var resultText = index >= 0 ?
                index + 1 + " of " + this.controller.foundIntervals.length :
                localization_1.formatMessage('ASPxRichEditStringId.FindReplace_Items') + ": " + this.controller.foundIntervals.length;
            this.resultLabel.innerHTML = resultText;
        }
        else
            this.resultLabel.innerHTML = '';
    };
    FindReplaceDialog.prototype.updateParameters = function (_parameters, _data) { };
    return FindReplaceDialog;
}(dialog_base_1.DialogBase));
exports.FindReplaceDialog = FindReplaceDialog;
