"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var dialog_base_1 = require("./dialog-base");
var SplitTableCellsDialog = (function (_super) {
    tslib_1.__extends(SplitTableCellsDialog, _super);
    function SplitTableCellsDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SplitTableCellsDialog.prototype.getMaxWidth = function () {
        return 400;
    };
    SplitTableCellsDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.SplitTableCellsTitle');
    };
    SplitTableCellsDialog.prototype.getFormOptions = function () {
        return {
            labelLocation: 'top',
            colCount: 1,
            items: [{
                    dataField: 'columnCount',
                    editorType: 'dxNumberBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.InsertTable_NumberOfColumns'), location: 'left' },
                    editorOptions: {
                        value: this.parameters.columnCount,
                        min: 1,
                        showSpinButtons: true
                    }
                },
                {
                    dataField: 'rowCount',
                    editorType: 'dxNumberBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.InsertTable_NumberOfRows'), location: 'left' },
                    editorOptions: {
                        value: this.parameters.rowCount,
                        disabled: this.parameters.disableRowsSelector,
                        min: 1,
                        max: this.parameters.availableRowNumber > 1 ? this.parameters.availableRowNumber : 100,
                        showSpinButtons: true
                    }
                },
                {
                    dataField: 'isMergeBeforeSplit',
                    editorType: 'dxCheckBox',
                    label: { visible: false },
                    editorOptions: {
                        text: localization_1.formatMessage('ASPxRichEditStringId.SplitCells_MergeCells'),
                        disabled: !this.parameters.isMergeBeforeSplit,
                        value: this.parameters.isMergeBeforeSplit
                    }
                }]
        };
    };
    SplitTableCellsDialog.prototype.updateParameters = function (parameters, data) {
        parameters.columnCount = data.columnCount;
        parameters.rowCount = data.rowCount;
        parameters.isMergeBeforeSplit = data.isMergeBeforeSplit;
    };
    return SplitTableCellsDialog;
}(dialog_base_1.DialogBase));
exports.SplitTableCellsDialog = SplitTableCellsDialog;
