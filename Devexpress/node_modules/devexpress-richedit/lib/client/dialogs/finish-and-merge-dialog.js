"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var client_command_1 = require("../../base/commands/client-command");
var dialog_finish_and_merge_command_1 = require("../../base/commands/dialogs/dialog-finish-and-merge-command");
var document_format_1 = require("../../core/document-format");
var file_name_helper_1 = require("../../core/formats/file-name-helper");
var file_1 = require("@devexpress/utils/lib/utils/file");
var mail_merge_command_1 = require("../commands/mail-merge-command");
var dialog_base_1 = require("./dialog-base");
var FinishAndMergeDialog = (function (_super) {
    tslib_1.__extends(FinishAndMergeDialog, _super);
    function FinishAndMergeDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FinishAndMergeDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.ExportRangeTitle');
    };
    FinishAndMergeDialog.prototype.getMaxWidth = function () {
        return 400;
    };
    FinishAndMergeDialog.prototype.getFormOptions = function () {
        var _this = this;
        return {
            labelLocation: 'left',
            items: [{
                    dataField: 'range',
                    editorType: 'dxRadioGroup',
                    label: { visible: false },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_AllRecords'), value: dialog_finish_and_merge_command_1.MailMergeExportRange.AllRecords },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_CurrentRecord'), value: dialog_finish_and_merge_command_1.MailMergeExportRange.CurrentRecord },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_Range'), value: dialog_finish_and_merge_command_1.MailMergeExportRange.Range }
                        ],
                        valueExpr: "value",
                        value: this.parameters.range,
                        onValueChanged: function (e) {
                            _this.updateRangeEditorsEnabled(e.component.option('value') == dialog_finish_and_merge_command_1.MailMergeExportRange.Range);
                            _this.updateMergeModeEditorEnabled(e.component.option('value') != dialog_finish_and_merge_command_1.MailMergeExportRange.CurrentRecord);
                        }
                    }
                },
                {
                    itemType: "group",
                    caption: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_Range'),
                    items: [{
                            dataField: 'exportFrom',
                            editorType: 'dxNumberBox',
                            label: { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_From'), location: 'left' },
                            editorOptions: {
                                value: this.parameters.exportFrom,
                                showSpinButtons: true,
                                min: 1,
                                onInitialized: function (e) { _this.fromNumberBox = e.component; }
                            }
                        },
                        {
                            dataField: 'exportRecordsCount',
                            editorType: 'dxNumberBox',
                            label: { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_Count'), location: 'left' },
                            editorOptions: {
                                value: this.parameters.exportRecordsCount,
                                showSpinButtons: true,
                                min: 1,
                                onInitialized: function (e) { _this.countNumberBox = e.component; }
                            }
                        }]
                },
                {
                    dataField: 'mergeMode',
                    editorType: 'dxSelectBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_MergeMode'), location: 'left' },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_NewParagraph'), value: dialog_finish_and_merge_command_1.MergeMode.NewParagraph },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_NewSection'), value: dialog_finish_and_merge_command_1.MergeMode.NewSection }
                        ],
                        valueExpr: 'value',
                        displayExpr: 'text',
                        value: this.parameters.mergeMode,
                        onInitialized: function (e) { _this.mergeModeSelectBox = e.component; }
                    }
                },
                {
                    dataField: 'documentFormat',
                    editorType: 'dxSelectBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FinishMerge_DocumentFormat'), location: 'left' },
                    editorOptions: {
                        items: [
                            { text: 'Word Document (*.docx)', value: document_format_1.DocumentFormat.OpenXml },
                            { text: 'Rich Text Format (*.rtf)', value: document_format_1.DocumentFormat.Rtf },
                            { text: 'Plain Text (*.txt)', value: document_format_1.DocumentFormat.PlainText },
                        ],
                        valueExpr: 'value',
                        displayExpr: 'text',
                        value: this.parameters.documentFormat
                    }
                }]
        };
    };
    FinishAndMergeDialog.prototype.afterShowing = function () {
        this.updateRangeEditorsEnabled(false);
    };
    FinishAndMergeDialog.prototype.updateRangeEditorsEnabled = function (enabled) {
        this.fromNumberBox.option('disabled', !enabled);
        this.countNumberBox.option('disabled', !enabled);
    };
    FinishAndMergeDialog.prototype.updateMergeModeEditorEnabled = function (enabled) {
        this.mergeModeSelectBox.option('disabled', !enabled);
    };
    FinishAndMergeDialog.prototype.updateParameters = function (parameters, data) {
        parameters.range = data.range;
        parameters.exportFrom = data.exportFrom;
        parameters.exportRecordsCount = data.exportRecordsCount;
        parameters.mergeMode = data.mergeMode;
        parameters.documentFormat = data.documentFormat;
    };
    FinishAndMergeDialog.prototype.applyParameters = function () {
        var _this = this;
        _super.prototype.applyParameters.call(this);
        var from = this.parameters.range == dialog_finish_and_merge_command_1.MailMergeExportRange.AllRecords ? 0 :
            this.parameters.range == dialog_finish_and_merge_command_1.MailMergeExportRange.Range ?
                this.parameters.exportFrom - 1 :
                this.richedit.modelManager.richOptions.mailMerge.activeRecordIndex;
        var recordCount = this.parameters.range == dialog_finish_and_merge_command_1.MailMergeExportRange.AllRecords ? Infinity :
            this.parameters.range == dialog_finish_and_merge_command_1.MailMergeExportRange.Range ? this.parameters.exportRecordsCount : 1;
        var params = new mail_merge_command_1.MailMergeCommandParameters(function (file) { file_1.FileUtils.startDownloadFileLocal(file, 'MergedDocument' + file_name_helper_1.FileNameHelper.convertToString(_this.parameters.documentFormat)); }, this.parameters.mergeMode, this.parameters.documentFormat, from, recordCount);
        this.richedit.commandManager.getCommand(client_command_1.RichEditClientCommand.MailMergeOnClient).execute(this.richedit.commandManager.isPublicApiCall, params);
    };
    return FinishAndMergeDialog;
}(dialog_base_1.DialogBase));
exports.FinishAndMergeDialog = FinishAndMergeDialog;
