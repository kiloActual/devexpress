"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var dialog_insert_table_cells_command_1 = require("../../base/commands/dialogs/dialog-insert-table-cells-command");
var dialog_base_1 = require("./dialog-base");
var InsertTableCellsDialog = (function (_super) {
    tslib_1.__extends(InsertTableCellsDialog, _super);
    function InsertTableCellsDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableCellsDialog.prototype.getMaxWidth = function () {
        return 300;
    };
    InsertTableCellsDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.InsertTableCellsTitle');
    };
    InsertTableCellsDialog.prototype.getFormOptions = function () {
        return {
            labelLocation: 'top',
            colCount: 1,
            items: [{
                    dataField: 'tableCellOperation',
                    editorType: 'dxRadioGroup',
                    label: { visible: false },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.InsertCells_ShiftCellsRight'), value: dialog_insert_table_cells_command_1.TableCellOperation.ShiftToTheHorizontally },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.InsertCells_ShiftCellsDown'), value: dialog_insert_table_cells_command_1.TableCellOperation.ShiftToTheVertically },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.InsertCells_InsertEntireRow'), value: dialog_insert_table_cells_command_1.TableCellOperation.RowOperation },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.InsertCells_InsertEntireColumn'), value: dialog_insert_table_cells_command_1.TableCellOperation.ColumnOperation },
                        ],
                        valueExpr: "value",
                        value: this.parameters.tableCellOperation
                    }
                }]
        };
    };
    InsertTableCellsDialog.prototype.updateParameters = function (parameters, data) {
        parameters.tableCellOperation = data.tableCellOperation;
    };
    return InsertTableCellsDialog;
}(dialog_base_1.DialogBase));
exports.InsertTableCellsDialog = InsertTableCellsDialog;
