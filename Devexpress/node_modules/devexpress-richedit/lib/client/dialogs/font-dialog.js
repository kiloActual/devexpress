"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var enums_1 = require("../../core/model/character/enums");
var _constants_1 = require("../_constants");
var dialog_base_1 = require("./dialog-base");
var FontDialog = (function (_super) {
    tslib_1.__extends(FontDialog, _super);
    function FontDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FontDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.FontTitle');
    };
    FontDialog.prototype.getMaxWidth = function () {
        return 650;
    };
    FontDialog.prototype.getFormOptions = function () {
        var fonts = this.richedit.modelManager.model.cache.fontInfoCache.getFontNames(true);
        var fontSizes = _constants_1.Constants.getFontSizesList();
        return {
            colCount: 3,
            items: [{
                    dataField: 'fontName',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.Font'), location: 'top' },
                    editorType: 'dxSelectBox',
                    editorOptions: {
                        items: fonts,
                        value: this.parameters.fontName
                    }
                },
                {
                    dataField: 'fontStyle',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FontStyle'), location: 'top' },
                    editorType: 'dxSelectBox',
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Normal'), value: 0 },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Bold'), value: 1 },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Italic'), value: 2 },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.BoldItalic'), value: 3 },
                        ],
                        valueExpr: 'value',
                        displayExpr: 'text',
                        value: this.parameters.fontStyle
                    }
                },
                {
                    dataField: 'fontSize',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FontSize'), location: 'top' },
                    editorType: 'dxSelectBox',
                    editorOptions: {
                        items: fontSizes,
                        value: this.parameters.fontSize
                    }
                },
                {
                    dataField: 'fontColor',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.FontColor'), location: 'top' },
                    editorType: 'dxColorBox',
                    editorOptions: {
                        value: this.parameters.fontColor != 'Auto' ? this.parameters.fontColor : ''
                    }
                },
                {
                    dataField: 'fontUnderlineType',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineStyle'), location: 'top' },
                    editorType: 'dxSelectBox',
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_None'), value: enums_1.UnderlineType.None },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_Single'), value: enums_1.UnderlineType.Single },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_Dotted'), value: enums_1.UnderlineType.Dotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_Dashed'), value: enums_1.UnderlineType.Dashed },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_DashDotted'), value: enums_1.UnderlineType.DashDotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_DashDotDotted'), value: enums_1.UnderlineType.DashDotDotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_Double'), value: enums_1.UnderlineType.Double },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_HeavyWave'), value: enums_1.UnderlineType.HeavyWave },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_LongDashed'), value: enums_1.UnderlineType.LongDashed },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickSingle'), value: enums_1.UnderlineType.ThickSingle },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickDotted'), value: enums_1.UnderlineType.ThickDotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickDashed'), value: enums_1.UnderlineType.ThickDashed },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickDashDotted'), value: enums_1.UnderlineType.ThickDashDotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickDashDotDotted'), value: enums_1.UnderlineType.ThickDashDotDotted },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_ThickLongDashed'), value: enums_1.UnderlineType.ThickLongDashed },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_DoubleWave'), value: enums_1.UnderlineType.DoubleWave },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_Wave'), value: enums_1.UnderlineType.Wave },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineType_DashSmallGap'), value: enums_1.UnderlineType.DashSmallGap }
                        ],
                        valueExpr: 'value',
                        displayExpr: 'text',
                        value: this.parameters.fontUnderlineType
                    }
                },
                {
                    dataField: 'fontUnderlineColor',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineColor'), location: 'top' },
                    editorType: 'dxColorBox',
                    editorOptions: {
                        value: this.parameters.fontUnderlineColor != 'Auto' ? this.parameters.fontUnderlineColor : ''
                    }
                },
                {
                    dataField: 'fontStrikeoutType',
                    editorType: 'dxRadioGroup',
                    label: { visible: false },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.StrikeoutType_None'), value: enums_1.StrikeoutType.None },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.StrikeoutType_Single'), value: enums_1.StrikeoutType.Single },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.StrikeoutType_Double'), value: enums_1.StrikeoutType.Double }
                        ],
                        valueExpr: "value",
                        value: this.parameters.fontStrikeoutType
                    }
                },
                {
                    dataField: 'script',
                    editorType: 'dxRadioGroup',
                    label: { visible: false },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.CharacterFormattingScript_Normal'), value: enums_1.CharacterFormattingScript.Normal },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.CharacterFormattingScript_Subscript'), value: enums_1.CharacterFormattingScript.Subscript },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.CharacterFormattingScript_Superscript'), value: enums_1.CharacterFormattingScript.Superscript }
                        ],
                        valueExpr: 'value',
                        value: this.parameters.script
                    }
                },
                {
                    itemType: 'group',
                    items: [
                        {
                            dataField: 'allCaps',
                            editorType: 'dxCheckBox',
                            label: { visible: false },
                            editorOptions: {
                                value: this.parameters.allCaps,
                                text: localization_1.formatMessage('ASPxRichEditStringId.AllCaps')
                            }
                        },
                        {
                            dataField: 'hidden',
                            editorType: 'dxCheckBox',
                            label: { visible: false },
                            editorOptions: {
                                value: this.parameters.hidden,
                                text: localization_1.formatMessage('ASPxRichEditStringId.Hidden')
                            }
                        },
                        {
                            dataField: 'underlineWordsOnly',
                            editorType: 'dxCheckBox',
                            label: { visible: false },
                            editorOptions: {
                                value: this.parameters.underlineWordsOnly,
                                text: localization_1.formatMessage('ASPxRichEditStringId.UnderlineWordsOnly')
                            }
                        }
                    ]
                }]
        };
    };
    FontDialog.prototype.updateParameters = function (parameters, data) {
        parameters.fontName = data.fontName === undefined ? null : data.fontName;
        parameters.fontSize = data.fontSize;
        parameters.fontStyle = data.fontStyle;
        if (data.fontColor !== '')
            parameters.fontColor = data.fontColor;
        parameters.fontUnderlineType = data.fontUnderlineType;
        if (data.fontUnderlineColor !== '')
            parameters.fontUnderlineColor = data.fontUnderlineColor;
        parameters.fontStrikeoutType = data.fontStrikeoutType;
        parameters.script = data.script;
        parameters.allCaps = data.allCaps;
        parameters.hidden = data.hidden;
        parameters.underlineWordsOnly = data.underlineWordsOnly;
    };
    return FontDialog;
}(dialog_base_1.DialogBase));
exports.FontDialog = FontDialog;
