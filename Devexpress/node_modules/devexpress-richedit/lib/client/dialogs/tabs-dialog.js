"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var button_1 = require("devextreme/ui/button");
var list_1 = require("devextreme/ui/list");
var layout_tab_space_box_1 = require("../../core/layout/main-structures/layout-boxes/layout-tab-space-box");
var paragraph_1 = require("../../core/model/paragraph/paragraph");
var paragraph_style_1 = require("../../core/model/paragraph/paragraph-style");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var list_2 = require("@devexpress/utils/lib/utils/list");
var dialog_base_1 = require("./dialog-base");
var TabsDialog = (function (_super) {
    tslib_1.__extends(TabsDialog, _super);
    function TabsDialog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.deletedTabs = [];
        _this.isClearAllHappend = false;
        return _this;
    }
    TabsDialog.prototype.getTitle = function () {
        return localization_1.formatMessage('ASPxRichEditStringId.TabsTitle');
    };
    TabsDialog.prototype.getMaxWidth = function () {
        return 500;
    };
    TabsDialog.prototype.getFormOptions = function () {
        var _this = this;
        this.tabProperties = this.parameters.tabProperties;
        return {
            colCount: 6,
            items: [
                {
                    colSpan: 3,
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_TabStopPosition'), location: 'top' },
                    editorType: 'dxTextBox',
                    editorOptions: {
                        onInitialized: function (e) { _this.tabTextBox = e.component; },
                        onInput: function () { _this.setButtonsEnabled(); }
                    }
                },
                {
                    colSpan: 3,
                    dataField: 'defaultTabStop',
                    editorType: 'dxNumberBox',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_DefaultTabStops'), location: 'top' },
                    editorOptions: {
                        value: this.parameters.defaultTabStop,
                        showSpinButtons: true,
                        step: 0.1,
                        format: '#0.##'
                    }
                },
                {
                    colSpan: 3,
                    label: { visible: false },
                    template: function () {
                        var element = document.createElement('div');
                        _this.tabsList = new list_1.default(element, {
                            height: 200,
                            noDataText: localization_1.formatMessage('ASPxRichEditStringId.Tabs_NoTabs'),
                            selectionMode: 'single',
                            keyExpr: 'index',
                            onSelectionChanged: function (e) { _this.onSelectedTabIndexChanged(e.component.option('selectedItemKeys')[0]); }
                        });
                        return element;
                    }
                },
                {
                    colSpan: 3,
                    template: function () {
                        var element = document.createElement('div');
                        _this.toBeClearedList = element;
                        return element;
                    }
                },
                {
                    colSpan: 6,
                    editorType: 'dxRadioGroup',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Alignment'), location: 'top' },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Left'), value: paragraph_1.TabAlign.Left },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Right'), value: paragraph_1.TabAlign.Right },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Center'), value: paragraph_1.TabAlign.Center },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Decimal'), value: paragraph_1.TabAlign.Decimal }
                        ],
                        valueExpr: 'value',
                        layout: "horizontal",
                        onInitialized: function (e) { _this.alignmentRadioGroup = e.component; },
                        onValueChanged: function (e) { _this.setAlignmentValue(e.component.option('value')); }
                    }
                },
                {
                    colSpan: 6,
                    editorType: 'dxRadioGroup',
                    label: { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Leader'), location: 'top' },
                    editorOptions: {
                        items: [
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_None'), value: layout_tab_space_box_1.TabLeaderType.None },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Dots'), value: layout_tab_space_box_1.TabLeaderType.Dots },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_ThickLine'), value: layout_tab_space_box_1.TabLeaderType.ThickLine },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Hyphens'), value: layout_tab_space_box_1.TabLeaderType.Hyphens },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Underline'), value: layout_tab_space_box_1.TabLeaderType.Underline },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_EqualSign'), value: layout_tab_space_box_1.TabLeaderType.EqualSign },
                            { text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_MiddleDots'), value: layout_tab_space_box_1.TabLeaderType.MiddleDots }
                        ],
                        valueExpr: 'value',
                        layout: "horizontal",
                        onInitialized: function (e) { _this.leaderRadioGroup = e.component; },
                        onValueChanged: function (e) { _this.setLeaderValue(e.component.option('value')); }
                    }
                },
                {
                    colSpan: 2,
                    template: function () {
                        var element = document.createElement('div');
                        _this.setBtn = new button_1.default(element, {
                            text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Set'),
                            width: '100%',
                            onClick: function () { _this.setTab(); }
                        });
                        return element;
                    }
                },
                {
                    colSpan: 2,
                    template: function () {
                        var element = document.createElement('div');
                        _this.clearBtn = new button_1.default(element, {
                            text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_Clear'),
                            width: '100%',
                            onClick: function () { _this.clearTab(); }
                        });
                        return element;
                    }
                },
                {
                    colSpan: 2,
                    template: function () {
                        var element = document.createElement('div');
                        new button_1.default(element, {
                            text: localization_1.formatMessage('ASPxRichEditStringId.Tabs_ClearAll'),
                            width: '100%',
                            onClick: function () { _this.clearAllTab(); }
                        });
                        return element;
                    }
                }
            ]
        };
    };
    TabsDialog.prototype.afterShowing = function () {
        this.updateForm();
    };
    TabsDialog.prototype.setButtonsEnabled = function () {
        var text = this.tabTextBox.option('text');
        var disabled = text.length == 0;
        this.setBtn.option('disabled', disabled);
        this.clearBtn.option('disabled', disabled);
    };
    TabsDialog.prototype.onSelectedTabIndexChanged = function (index) {
        var tabInfo = this.tabProperties.tabsInfo[index];
        if (tabInfo) {
            this.setTabPositionValue(tabInfo.position);
            this.alignmentRadioGroup.option('value', tabInfo.alignment);
            this.leaderRadioGroup.option('value', tabInfo.leader);
        }
        else {
            this.tabTextBox.option('value', '');
            this.alignmentRadioGroup.option('value', paragraph_1.TabAlign.Left);
            this.leaderRadioGroup.option('value', layout_tab_space_box_1.TabLeaderType.None);
        }
        this.setButtonsEnabled();
    };
    TabsDialog.prototype.setTab = function () {
        var currentTabsInfoIndex = this.getCurrentTabsInfoIndex();
        if (currentTabsInfoIndex > -1)
            return;
        var tabPositionText = this.getTabPositionText();
        var tabValue = Number(tabPositionText);
        if (isNaN(tabValue))
            return;
        var currentPosition = this.richedit.uiUnitConverter.UIToTwips(tabValue);
        var currentTabStopAlign = this.alignmentRadioGroup.option('value');
        var currentTabStopLeader = this.leaderRadioGroup.option('value');
        var tabInfo = new paragraph_style_1.TabInfo(currentPosition, currentTabStopAlign, currentTabStopLeader, false, false);
        this.tabProperties.tabsInfo.push(tabInfo);
        this.sortTabsInfo();
        this.updateForm();
    };
    TabsDialog.prototype.clearTab = function () {
        var currentTabsInfoIndex = this.getCurrentTabsInfoIndex();
        if (currentTabsInfoIndex < 0)
            return;
        var currentTabStopPosition = this.getRoundedPositionByTwips(this.tabProperties.tabsInfo[currentTabsInfoIndex].position);
        list_2.ListUtils.remove(this.deletedTabs, currentTabStopPosition);
        this.deletedTabs.push(currentTabStopPosition);
        this.deletedTabs.sort(comparers_1.Comparers.number);
        this.tabProperties.tabsInfo.splice(currentTabsInfoIndex, 1);
        this.updateForm();
    };
    TabsDialog.prototype.sortTabsInfo = function () {
        this.tabProperties.tabsInfo.sort(function (i1, i2) {
            if (i1.position > i2.position)
                return 1;
            else if (i1.position < i2.position)
                return -1;
            return 0;
        });
    };
    TabsDialog.prototype.updateForm = function () {
        var _this = this;
        var items = this.tabProperties.tabsInfo.map(function (tabInfo, index) {
            var position = _this.getRoundedPositionByTwips(tabInfo.position);
            return _this.createListItem(position + '', index++);
        });
        this.tabsList.option('items', items);
        this.onSelectedTabIndexChanged(0);
        this.updateClearedTabsLabel();
    };
    TabsDialog.prototype.setAlignmentValue = function (value) {
        var currentTabsInfoIndex = this.getCurrentTabsInfoIndex();
        if (currentTabsInfoIndex > -1)
            this.tabProperties.tabsInfo[currentTabsInfoIndex].alignment = value;
    };
    TabsDialog.prototype.setLeaderValue = function (value) {
        var currentTabsInfoIndex = this.getCurrentTabsInfoIndex();
        if (currentTabsInfoIndex > -1)
            this.tabProperties.tabsInfo[currentTabsInfoIndex].leader = value;
    };
    TabsDialog.prototype.updateClearedTabsLabel = function () {
        var text = localization_1.formatMessage('ASPxRichEditStringId.Tabs_TabStopsToBeCleared') + ": ";
        if (!this.isClearAllHappend)
            for (var i = 0; i < this.deletedTabs.length; i++)
                text += this.deletedTabs[i] + "; ";
        else
            text += 'All';
        this.toBeClearedList.innerHTML = text;
    };
    TabsDialog.prototype.createListItem = function (text, index) {
        return { html: text, index: index };
    };
    TabsDialog.prototype.clearAllTab = function () {
        this.tabProperties.tabsInfo = [];
        this.isClearAllHappend = true;
        this.updateForm();
    };
    TabsDialog.prototype.getCurrentTabsInfoIndex = function () {
        var tabPositionText = this.getTabPositionText();
        var tabValue = Number(tabPositionText);
        if (isNaN(tabValue)) {
            var currentPosition = this.getRoundedPosition(tabPositionText);
            for (var i = 0; i < this.tabProperties.tabsInfo.length; i++)
                if (this.getRoundedPositionByTwips(this.tabProperties.tabsInfo[i].position) == currentPosition)
                    return i;
        }
        return -1;
    };
    TabsDialog.prototype.getTabPositionText = function () {
        return this.tabTextBox.option('text');
    };
    TabsDialog.prototype.setTabPositionValue = function (value) {
        this.tabTextBox.option('value', this.getRoundedPositionByTwips(value).toString());
    };
    TabsDialog.prototype.getRoundedPosition = function (position) {
        return Math.round(position * 100) / 100;
    };
    TabsDialog.prototype.getRoundedPositionByTwips = function (position) {
        return this.getRoundedPosition(this.richedit.uiUnitConverter.twipsToUI(position));
    };
    TabsDialog.prototype.getOkToolbarItem = function () {
        var _this = this;
        return {
            widget: 'dxButton',
            location: 'after',
            toolbar: 'bottom',
            options: {
                text: localization_1.formatMessage('ASPxRichEditStringId.OkButton'),
                onClick: function () {
                    _this.setTab();
                    _this.applyParameters();
                    _this.popupDialog.hide();
                    _this.afterClosing();
                }
            }
        };
    };
    TabsDialog.prototype.updateParameters = function (parameters, data) {
        parameters.defaultTabStop = data.defaultTabStop;
        parameters.tabProperties = this.tabProperties;
    };
    return TabsDialog;
}(dialog_base_1.DialogBase));
exports.TabsDialog = TabsDialog;
