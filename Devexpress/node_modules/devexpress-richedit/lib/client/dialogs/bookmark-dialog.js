"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var localization_1 = require("devextreme/localization");
var button_1 = require("devextreme/ui/button");
var list_1 = require("devextreme/ui/list");
var radio_group_1 = require("devextreme/ui/radio_group");
var text_box_1 = require("devextreme/ui/text_box");
var client_command_1 = require("../../base/commands/client-command");
var dialog_base_1 = require("./dialog-base");
var bookmarks_1 = require("../../core/model/bookmarks");
var BookmarkDialog = (function (_super) {
    tslib_1.__extends(BookmarkDialog, _super);
    function BookmarkDialog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.bookmarks = [];
        return _this;
    }
    BookmarkDialog.prototype.getTitle = function () {
        return localization_1.formatMessage("ASPxRichEditStringId.BookmarkTitle");
    };
    BookmarkDialog.prototype.getMaxWidth = function () {
        return 400;
    };
    BookmarkDialog.prototype.getFormOptions = function () {
        var _this = this;
        this.parameters.newBookmarkName = '';
        this.parameters.bookmarks.forEach(function (b) {
            _this.bookmarks.push(new BookmarkInfoForDialog(b));
        });
        return {
            labelLocation: 'top',
            colCount: 3,
            items: [{
                    colSpan: 3,
                    label: { text: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_BookmarkName"), location: 'top' },
                    template: function () {
                        var element = document.createElement('div');
                        var textBoxProperties = {
                            onValueChanged: function () { _this.onBookmarkNameTextBoxValueChanged(); },
                            onInput: function () { _this.onBookmarkNameTextBoxValueChanged(); }
                        };
                        _this.bookmarkTextBox = new text_box_1.default(element, textBoxProperties);
                        return element;
                    }
                },
                {
                    colSpan: 3,
                    template: function () {
                        var element = document.createElement('div');
                        _this.bookmarksList = new list_1.default(element, {
                            height: 200,
                            noDataText: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_NoBookmarks"),
                            selectionMode: 'single',
                            onSelectionChanged: function () { _this.onListValueChanged(); }
                        });
                        return element;
                    }
                },
                {
                    colSpan: 3,
                    label: { text: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_SortBy"), location: 'top' },
                    template: function () {
                        var element = document.createElement('div');
                        _this.sortGroup = new radio_group_1.default(element, {
                            items: [localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_Name"), localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_Location")],
                            value: 'Name',
                            layout: 'horizontal',
                            onValueChanged: function () { _this.updateDataSource(); }
                        });
                        return element;
                    }
                },
                {
                    template: function () {
                        var element = document.createElement('div');
                        _this.addBtn = new button_1.default(element, {
                            text: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_Add"),
                            width: '100%',
                            onClick: function () {
                                _this.parameters.newBookmarkName = _this.bookmarkTextBox.option('text');
                                _this.applyParameters();
                                _this.popupDialog.hide();
                                _this.afterClosing();
                            }
                        });
                        return element;
                    }
                },
                {
                    template: function () {
                        var element = document.createElement('div');
                        _this.deleteBtn = new button_1.default(element, {
                            text: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_Delete"),
                            width: '100%',
                            onClick: function () { _this.onBtnDeleteClick(); }
                        });
                        return element;
                    }
                },
                {
                    template: function () {
                        var element = document.createElement('div');
                        _this.goToBtn = new button_1.default(element, {
                            text: localization_1.formatMessage("ASPxRichEditStringId.Bookmarks_GoTo"),
                            width: '100%',
                            onClick: function () { _this.onBtnGoToClick(); }
                        });
                        return element;
                    }
                }]
        };
    };
    BookmarkDialog.prototype.afterShowing = function () {
        this.updateDataSource();
    };
    BookmarkDialog.prototype.updateDataSource = function () {
        var dataSource = this.getDataSource();
        this.bookmarksList.option('dataSource', dataSource);
        if (dataSource.length > 0) {
            var selectionBookmarkName = this.parameters.selectedBookmarkName;
            this.bookmarksList.selectItem(selectionBookmarkName ? dataSource.indexOf(selectionBookmarkName) : dataSource.length - 1);
        }
        var isValidName = this.getIsValidBookmarkName(this.bookmarkTextBox.option('text'));
        this.updateEnableState(isValidName);
    };
    BookmarkDialog.prototype.getIsValidBookmarkName = function (name) {
        return bookmarks_1.BookmarkNameValidator.isValidName(name, false);
    };
    BookmarkDialog.prototype.getDataSource = function () {
        if (this.sortGroup.option('value') == 'Name')
            this.bookmarks = this.bookmarks.sort(function (b1, b2) { return b1.name > b2.name ? 1 : b1.name < b2.name ? -1 : 0; });
        else
            this.bookmarks = this.bookmarks.sort(function (b1, b2) { return b1.start - b2.start; });
        return this.bookmarks.filter(function (b) { return !b.deleted; }).map(function (b) { return b.name; });
    };
    BookmarkDialog.prototype.updateEnableState = function (enable) {
        this.addBtn.option('disabled', !enable || !this.parameters.allowedEditBookmarks);
        var bookmarkName = this.bookmarkTextBox.option('text');
        var list = this.bookmarksList.option('items');
        var listEnable = list.some(function (b) { return b == bookmarkName; });
        this.deleteBtn.option('disabled', !listEnable || !this.parameters.allowedEditBookmarks);
        this.goToBtn.option('disabled', !listEnable);
    };
    BookmarkDialog.prototype.onBookmarkNameTextBoxValueChanged = function () {
        var isValid = this.getIsValidBookmarkName(this.bookmarkTextBox.option('text'));
        this.updateEnableState(isValid);
    };
    BookmarkDialog.prototype.onBtnDeleteClick = function () {
        var _this = this;
        var name = this.bookmarkTextBox.option('text');
        this.bookmarks.forEach(function (b, index) {
            if (b.name == name) {
                b.deleted = true;
                _this.bookmarksList.deleteItem(index);
            }
        });
        this.updateDataSource();
    };
    BookmarkDialog.prototype.onBtnGoToClick = function () {
        var name = this.bookmarkTextBox.option('text');
        var commandManager = this.richedit.commandManager;
        commandManager.getCommand(client_command_1.RichEditClientCommand.GoToBookmark).execute(commandManager.isPublicApiCall, name);
    };
    BookmarkDialog.prototype.onListValueChanged = function () {
        var value = this.bookmarksList.option('selectedItems')[0];
        if (value && value.length > 0)
            this.bookmarkTextBox.option('value', value);
    };
    BookmarkDialog.prototype.getToolbarItems = function () {
        var _this = this;
        return [{
                widget: 'dxButton',
                location: 'after',
                toolbar: 'bottom',
                options: {
                    text: localization_1.formatMessage("ASPxRichEditStringId.CloseButton"),
                    onClick: function () {
                        _this.applyParameters();
                        _this.popupDialog.hide();
                        _this.afterClosing();
                    }
                }
            }];
    };
    BookmarkDialog.prototype.updateParameters = function (parameters, _data) {
        parameters.deletedBookmarkNames = this.bookmarks.filter(function (b) { return b.deleted; }).map(function (b) { return b.name; });
    };
    return BookmarkDialog;
}(dialog_base_1.DialogBase));
exports.BookmarkDialog = BookmarkDialog;
var BookmarkInfoForDialog = (function () {
    function BookmarkInfoForDialog(b) {
        this.name = b.name;
        this.start = b.start;
        this.deleted = false;
    }
    return BookmarkInfoForDialog;
}());
exports.BookmarkInfoForDialog = BookmarkInfoForDialog;
