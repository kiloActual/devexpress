"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../../base/commands/command-base");
var command_states_1 = require("../../base/commands/command-states");
var control_1 = require("../../core/model/options/control");
var exporter_1 = require("../../model-api/formats/exporter");
var ExportDocumentCommandOptions = (function () {
    function ExportDocumentCommandOptions(documentFormat, reason, documentName) {
        this.documentFormat = documentFormat;
        this.reason = reason;
        this.documentName = documentName;
    }
    return ExportDocumentCommandOptions;
}());
exports.ExportDocumentCommandOptions = ExportDocumentCommandOptions;
var ExportDocumentCommand = (function (_super) {
    tslib_1.__extends(ExportDocumentCommand, _super);
    function ExportDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ExportDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.save !== control_1.DocumentCapability.Hidden;
        return state;
    };
    ExportDocumentCommand.prototype.DEPRECATEDConvertOptionsParameter = function (parameter) {
        return parameter instanceof ExportDocumentCommandOptions ? parameter : new ExportDocumentCommandOptions();
    };
    ExportDocumentCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var richedit = this.control.owner;
        var param = options.param;
        var format = this.getExportDocumentFormat(richedit.core, param);
        var fileName = param.documentName !== undefined && param.documentName !== null ?
            param.documentName :
            this.control.documentInfo.getFileNameForDownload();
        var reason = param.reason ? param.reason : '';
        exporter_1.exportModelToBase64(this.control.modelManager.modelManipulator, format, function (base64) { return _this.exportCore(richedit, base64, fileName, format, reason); });
        return true;
    };
    ExportDocumentCommand.prototype.getExportDocumentFormat = function (core, param) {
        if (param.documentFormat !== undefined && param.documentFormat !== null)
            return param.documentFormat;
        if (!this.control.commandManager.isPublicApiCall && core.saveDocumentFormat !== undefined && core.saveDocumentFormat !== null)
            return core.saveDocumentFormat;
        return core.getExportDocumentFormat();
    };
    ExportDocumentCommand.prototype.exportCore = function (richedit, base64, fileName, format, reason) {
        this.base64 = base64;
        var apiDocFormat = format;
        if (richedit.savingEventIsEmpty() && !richedit.exportUrl) {
            console.warn('The Save button does nothing. To learn more, follow ' +
                'https://docs.devexpress.com/AspNetCore/400972/office-inspired-controls/controls/rich-edit/document-management#save-a-document');
        }
        else {
            var savingResult = richedit.raiseSaving(base64, fileName, apiDocFormat, reason);
            if (!savingResult)
                richedit.sendExportRequest(base64, fileName, apiDocFormat, reason);
        }
    };
    ExportDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.save) &&
            !this.control.owner.documentSaved;
    };
    ExportDocumentCommand.prototype.canModify = function () {
        return true;
    };
    return ExportDocumentCommand;
}(command_base_1.CommandBase));
exports.ExportDocumentCommand = ExportDocumentCommand;
