"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../../base/commands/command-base");
var command_states_1 = require("../../base/commands/command-states");
var rich_edit_core_1 = require("../../base/rich-edit-core");
var document_format_1 = require("../../core/document-format");
var file_name_helper_1 = require("../../core/formats/file-name-helper");
var control_1 = require("../../core/model/options/control");
var file_1 = require("@devexpress/utils/lib/utils/file");
var exporter_1 = require("../../model-api/formats/exporter");
var DownloadDocumentCommand = (function (_super) {
    tslib_1.__extends(DownloadDocumentCommand, _super);
    function DownloadDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownloadDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.save !== control_1.DocumentCapability.Hidden;
        return state;
    };
    DownloadDocumentCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    DownloadDocumentCommand.prototype.executeCore = function (_state, options) {
        var format = options.param && options.param.documentFormat !== undefined && options.param.documentFormat !== null ?
            options.param.documentFormat : document_format_1.DocumentFormat.OpenXml;
        this.download(this.getFileName(options), format);
        return true;
    };
    DownloadDocumentCommand.prototype.download = function (fileName, documentFormat) {
        var core = this.control;
        if (core.fileDownloaded)
            return;
        if (fileName === "")
            fileName = rich_edit_core_1.DocumentInfo.defaultDocumentName;
        var finalFileName = fileName + file_name_helper_1.FileNameHelper.convertToString(documentFormat);
        exporter_1.exportModelToBlob(this.control.modelManager.modelManipulator, documentFormat, function (blob) {
            return file_1.FileUtils.startDownloadFileLocal(blob, finalFileName);
        });
        core.fileDownloaded = true;
        setTimeout(function () {
            core.fileDownloaded = false;
        }, 1);
    };
    DownloadDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.save);
    };
    DownloadDocumentCommand.prototype.canModify = function () {
        return true;
    };
    DownloadDocumentCommand.prototype.getFileName = function (options) {
        return this.control.documentInfo.getFileNameForDownload(options.param ? options.param.fileName : null);
    };
    return DownloadDocumentCommand;
}(command_base_1.CommandBase));
exports.DownloadDocumentCommand = DownloadDocumentCommand;
var DownloadDocxCommand = (function (_super) {
    tslib_1.__extends(DownloadDocxCommand, _super);
    function DownloadDocxCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownloadDocxCommand.prototype.executeCore = function (_state, options) {
        this.download(this.getFileName(options), document_format_1.DocumentFormat.OpenXml);
        return true;
    };
    return DownloadDocxCommand;
}(DownloadDocumentCommand));
exports.DownloadDocxCommand = DownloadDocxCommand;
var DownloadRtfCommand = (function (_super) {
    tslib_1.__extends(DownloadRtfCommand, _super);
    function DownloadRtfCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownloadRtfCommand.prototype.executeCore = function (_state, options) {
        this.download(this.getFileName(options), document_format_1.DocumentFormat.Rtf);
        return true;
    };
    return DownloadRtfCommand;
}(DownloadDocumentCommand));
exports.DownloadRtfCommand = DownloadRtfCommand;
var DownloadTxtCommand = (function (_super) {
    tslib_1.__extends(DownloadTxtCommand, _super);
    function DownloadTxtCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DownloadTxtCommand.prototype.executeCore = function (_state, options) {
        this.download(this.getFileName(options), document_format_1.DocumentFormat.PlainText);
        return true;
    };
    return DownloadTxtCommand;
}(DownloadDocumentCommand));
exports.DownloadTxtCommand = DownloadTxtCommand;
var DownloadDocumentParameters = (function () {
    function DownloadDocumentParameters(documentFormat, fileName) {
        if (fileName === void 0) { fileName = ""; }
        this.documentFormat = documentFormat;
        this.fileName = fileName;
    }
    return DownloadDocumentParameters;
}());
exports.DownloadDocumentParameters = DownloadDocumentParameters;
