"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../../base/commands/command-base");
var command_states_1 = require("../../base/commands/command-states");
var dialog_alert_message_command_1 = require("../../base/commands/dialogs/dialog-alert-message-command");
var rich_edit_core_1 = require("../../base/rich-edit-core");
var document_format_1 = require("../../core/document-format");
var file_name_helper_1 = require("../../core/formats/file-name-helper");
var font_corrector_1 = require("../../core/model/creator/font-corrector");
var field_code_parser_hyperlink_1 = require("../../core/model/fields/parsers/field-code-parser-hyperlink");
var field_code_parser_num_pages_1 = require("../../core/model/fields/parsers/field-code-parser-num-pages");
var field_code_parser_page_1 = require("../../core/model/fields/parsers/field-code-parser-page");
var tree_creator_1 = require("../../core/model/fields/tree-creator");
var update_sequence_info_1 = require("../../core/model/fields/update-sequence-info");
var chunk_size_corrector_1 = require("../../core/model/manipulators/text-manipulator/chunk-size-corrector");
var control_1 = require("../../core/model/options/control");
var errors_1 = require("@devexpress/utils/lib/errors");
var base64_1 = require("@devexpress/utils/lib/utils/base64");
var common_1 = require("@devexpress/utils/lib/utils/common");
var file_1 = require("@devexpress/utils/lib/utils/file");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/string");
var importer_1 = require("../../model-api/formats/importer");
var new_document_command_1 = require("./new-document-command");
var OpenDocumentCommand = (function (_super) {
    tslib_1.__extends(OpenDocumentCommand, _super);
    function OpenDocumentCommand() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.suppressUpdateFields = false;
        return _this;
    }
    OpenDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.open !== control_1.DocumentCapability.Hidden;
        return state;
    };
    OpenDocumentCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        if (this.control.getModifiedState() && !this.control.owner.confirmOnLosingChanges() ||
            this.control.activeDocumentImporter)
            return false;
        var fileInfo = options.param;
        if (fileInfo) {
            var _a = OpenDocumentCommand.getFileAndDocumentFormat(fileInfo), file = _a.file, documentFormat = _a.documentFormat;
            var fileName = OpenDocumentCommand.getFileNameWithoutExtension(fileInfo.fileName, documentFormat);
            return this.executeOpening(file, fileName, documentFormat, fileInfo.callback);
        }
        else {
            var input = document.createElement('input');
            input.type = 'file';
            input.accept = '.txt,.docx,.rtf,.docm';
            input.addEventListener('change', function (e) {
                var file = e.target.files[0];
                if (file) {
                    var format = OpenDocumentCommand.getDocumentFormatByFileName(file.name);
                    var fileName = OpenDocumentCommand.getFileNameWithoutExtension(file.name, format);
                    _this.executeOpening(file, fileName, format, null);
                }
            }, false);
            input.click();
        }
        return true;
    };
    OpenDocumentCommand.prototype.executeOpening = function (file, fileName, format, callback) {
        var _this = this;
        var core = this.control;
        var throwInvalidFile = function (reason) {
            throw new Error(errors_1.Errors.InternalException + " " + reason);
        };
        core.activeDocumentImporter = importer_1.createImporter(format, throwInvalidFile);
        if (!core.activeDocumentImporter)
            return false;
        this.beforeOpen();
        core.activeDocumentImporter.importFromFile(file, this.control.modelManager.richOptions, function (documentModel, formatImagesImporter) {
            core.activeDocumentImporter = null;
            _this.openCore(fileName, format, documentModel, formatImagesImporter);
            if (!_this.suppressUpdateFields)
                _this.updateSomeFields();
            if (callback)
                callback(true, null);
        }, function (reason) {
            core.activeDocumentImporter = null;
            _this.control.loadingPanelManager.loadingPanel.setVisible(false);
            new_document_command_1.NewDocumentCommand.newDocumentInner.call(_this);
            if (callback)
                callback(false, "Document importer error(" + reason.toString() + ")");
            else
                _this.showErrorDialog();
        });
        return true;
    };
    OpenDocumentCommand.prototype.showErrorDialog = function () {
        var params = new dialog_alert_message_command_1.AlertMessageDialogParameters();
        params.messageTextId = dialog_alert_message_command_1.AlertMessageText.DocumentImportError;
        this.control.owner.showDialog("ErrorMessage", params, function () { }, function () { }, true);
    };
    OpenDocumentCommand.prototype.updateSomeFields = function () {
        var _this = this;
        number_1.NumberMapUtils.forEach(this.control.modelManager.model.subDocuments, function (sd) {
            for (var _i = 0, _a = sd.fields; _i < _a.length; _i++) {
                var field = _a[_i];
                var fieldParser = tree_creator_1.FieldsWaitingForUpdate.getParser(_this.control.modelManager, _this.control.layoutFormatterManager, _this.control.createFieldRequestManager(), sd, field);
                if ((fieldParser instanceof field_code_parser_num_pages_1.FieldCodeParserNumPages || fieldParser instanceof field_code_parser_page_1.FieldCodeParserPage) && sd.isHeaderFooter() ||
                    fieldParser instanceof field_code_parser_hyperlink_1.FieldCodeParserHyperlink && !field.getHyperlinkInfo()) {
                    fieldParser.parseCodeCurrentFieldInternal(null);
                }
            }
        });
        this.control.modelManager.history.clear();
        this.control.setModifiedFalse();
    };
    OpenDocumentCommand.prototype.beforeOpen = function () {
        this.control.closeDocument();
        this.control.loadingPanelManager.loadingPanel.setVisible(true);
    };
    OpenDocumentCommand.prototype.openCore = function (fileName, documentFormat, documentModel, formatImagesImporter) {
        var _this = this;
        new chunk_size_corrector_1.ChunkSizeCorrector().correctChunkSizeAtChunkIndex(documentModel.mainSubDocument, 0);
        new font_corrector_1.FontCorrector(this.control.modelManager.modelManipulator, documentModel, this.control.modelManager.richOptions.fonts).correct();
        var documentInfo = new rich_edit_core_1.DocumentInfo(fileName, true, documentFormat);
        this.control.initialize('', documentInfo, number_1.NumberMapUtils.mapLength(documentModel.subDocuments), documentModel);
        update_sequence_info_1.updateFieldSequenceInfo(this.control.modelManager, this.control.layoutFormatterManager, this.control.createFieldRequestManager());
        formatImagesImporter.import(this.control.modelManager.modelManipulator);
        this.control.modelManager.modelManipulator.documentProtectionProperties.filterRangePermissions();
        this.control.selection.beginUpdate();
        var selectionUpdated = this.control.selection.changeState(function (newState) { return newState.setPosition(0).resetKeepX().setEndOfLine(false)
            .setPageIndex(-1).setSubDocument(_this.control.modelManager.model.mainSubDocument); });
        this.control.layoutFormatterManager.openDocument();
        this.control.inputPosition.reset();
        this.control.layout.pageColor = documentModel.pageBackColor;
        this.control.layoutFormatterManager.restartManager.restartFromPage(0, 0, true);
        this.control.layoutFormatterManager.forceFormatPage(0);
        this.control.barHolder.setEnabled(true);
        this.control.horizontalRulerControl.setEnable(true);
        this.control.selection.endUpdate();
        if (!selectionUpdated)
            this.control.selection.raiseSelectionChanged();
        this.control.loadingPanelManager.loadingPanel.setVisible(false);
        this.control.spellChecker.check();
        this.control.layoutFormatterManager.runFormattingAsync();
        this.control.barHolder.forceUpdate();
        this.control.owner.raiseDocumentLoaded();
    };
    OpenDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.open);
    };
    OpenDocumentCommand.prototype.isEnabledInClosedDocument = function () {
        return true;
    };
    OpenDocumentCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    OpenDocumentCommand.getFileAndDocumentFormat = function (fileInfo) {
        if (common_1.isString(fileInfo.fileContent)) {
            var documentFormat = void 0;
            var docFormatByMimeType = document_format_1.mimeTypeIntoDocumentFormat[base64_1.Base64Utils.getKnownMimeType(fileInfo.fileContent)];
            if (docFormatByMimeType !== undefined) {
                documentFormat = docFormatByMimeType;
            }
            else {
                documentFormat = common_1.isDefined(fileInfo.documentFormat) ?
                    fileInfo.documentFormat :
                    OpenDocumentCommand.getDocumentFormatByFileName(fileInfo.fileName);
            }
            var file = base64_1.Base64Utils.getFileFromBase64(base64_1.Base64Utils.deleteDataUrlPrefix(fileInfo.fileContent), '', {
                type: document_format_1.documentFormatIntoMimeType[documentFormat]
            });
            return { file: file, documentFormat: documentFormat };
        }
        else if (file_1.FileUtils.isFile(fileInfo.fileContent)) {
            var documentFormat = void 0;
            if (common_1.isDefined(fileInfo.documentFormat)) {
                documentFormat = fileInfo.documentFormat;
            }
            else {
                var formatByMimeType = document_format_1.mimeTypeIntoDocumentFormat[fileInfo.fileContent.type];
                if (formatByMimeType !== undefined) {
                    documentFormat = formatByMimeType;
                }
                else {
                    documentFormat = file_name_helper_1.FileNameHelper.convertToDocumentFormat(fileInfo.fileContent.name);
                    if (documentFormat === document_format_1.DocumentFormat.Undefined)
                        documentFormat = OpenDocumentCommand.getDocumentFormatByFileName(fileInfo.fileName);
                }
            }
            return { file: fileInfo.fileContent, documentFormat: documentFormat };
        }
        else if (fileInfo.fileContent instanceof Blob) {
            var documentFormat = common_1.isDefined(fileInfo.documentFormat) ?
                fileInfo.documentFormat :
                OpenDocumentCommand.getDocumentFormatByFileName(fileInfo.fileName);
            var file = file_1.FileUtils.createFile([fileInfo.fileContent], fileInfo.fileName, {
                type: document_format_1.documentFormatIntoMimeType[documentFormat]
            });
            return { file: file, documentFormat: documentFormat };
        }
        else {
            var documentFormat = common_1.isDefined(fileInfo.documentFormat) ?
                fileInfo.documentFormat :
                OpenDocumentCommand.getDocumentFormatByFileName(fileInfo.fileName);
            return { file: file_1.FileUtils.createFile([fileInfo.fileContent], fileInfo.fileName, {
                    type: document_format_1.documentFormatIntoMimeType[documentFormat]
                }), documentFormat: documentFormat };
        }
    };
    OpenDocumentCommand.getDocumentFormatByFileName = function (fileName) {
        var docFormatByFileName = file_name_helper_1.FileNameHelper.convertToDocumentFormat(fileName);
        return docFormatByFileName === document_format_1.DocumentFormat.Undefined ? document_format_1.DocumentFormat.OpenXml : docFormatByFileName;
    };
    OpenDocumentCommand.getFileNameWithoutExtension = function (fileName, format) {
        var formatAsString = file_name_helper_1.FileNameHelper.convertToString(format);
        return string_1.StringUtils.endsAt(fileName, formatAsString) ? fileName.slice(0, -formatAsString.length) : fileName;
    };
    return OpenDocumentCommand;
}(command_base_1.CommandBase));
exports.OpenDocumentCommand = OpenDocumentCommand;
var FileInfo = (function () {
    function FileInfo(callback, fileContent, fileName, documentFormat) {
        this.callback = callback;
        this.fileContent = fileContent;
        this.fileName = fileName ? fileName : '';
        this.documentFormat = documentFormat;
    }
    return FileInfo;
}());
exports.FileInfo = FileInfo;
