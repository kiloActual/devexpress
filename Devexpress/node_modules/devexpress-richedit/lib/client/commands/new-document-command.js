"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../../base/commands/command-base");
var command_states_1 = require("../../base/commands/command-states");
var rich_edit_core_1 = require("../../base/rich-edit-core");
var creator_1 = require("../../core/model/creator/creator");
var font_corrector_1 = require("../../core/model/creator/font-corrector");
var options_1 = require("../../core/model/creator/options");
var control_1 = require("../../core/model/options/control");
var NewDocumentCommand = (function (_super) {
    tslib_1.__extends(NewDocumentCommand, _super);
    function NewDocumentCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NewDocumentCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.createNew !== control_1.DocumentCapability.Hidden;
        return state;
    };
    NewDocumentCommand.prototype.executeCore = function (_state, _options) {
        if (this.control.getModifiedState() && !this.control.owner.confirmOnLosingChanges())
            return false;
        NewDocumentCommand.newDocumentInner.call(this);
        this.control.owner.raiseDocumentLoaded();
        return true;
    };
    NewDocumentCommand.newDocumentInner = function () {
        var _this = this;
        this.control.closeDocument();
        this.control.loadingPanelManager.loadingPanel.setVisible(true);
        var documentInfo = new rich_edit_core_1.DocumentInfo(rich_edit_core_1.DocumentInfo.defaultDocumentName, false);
        this.control.initialize("", documentInfo, 1, null);
        var options = new options_1.ModelCreatorOptions();
        new creator_1.ModelCreator(options).setModel(this.control.modelManager.model).fillModel();
        new font_corrector_1.FontCorrector(this.control.modelManager.modelManipulator, this.control.modelManager.model, this.control.modelManager.richOptions.fonts).correct();
        this.control.selection.beginUpdate();
        var selectionUpdated = this.control.selection.changeState(function (newState) { return newState.setPosition(0).resetKeepX().setEndOfLine(false)
            .setPageIndex(-1).setSubDocument(_this.control.modelManager.model.mainSubDocument); });
        this.control.modelManager.modelManipulator.documentProtectionProperties.filterRangePermissions();
        this.control.layoutFormatterManager.openDocument();
        this.control.layout.pageColor = this.control.modelManager.model.pageBackColor;
        this.control.layoutFormatterManager.forceFormatPage(0);
        this.control.inputPosition.reset();
        this.control.horizontalRulerControl.setEnable(true);
        this.control.selection.endUpdate();
        if (!selectionUpdated)
            this.control.selection.raiseSelectionChanged();
        this.control.layoutFormatterManager.runFormattingAsync();
        this.control.loadingPanelManager.loadingPanel.setVisible(false);
        this.control.barHolder.forceUpdate();
    };
    NewDocumentCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.createNew);
    };
    NewDocumentCommand.prototype.isEnabledInClosedDocument = function () {
        return true;
    };
    NewDocumentCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    return NewDocumentCommand;
}(command_base_1.CommandBase));
exports.NewDocumentCommand = NewDocumentCommand;
