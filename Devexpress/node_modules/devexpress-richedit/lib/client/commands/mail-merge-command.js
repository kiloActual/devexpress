"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var command_base_1 = require("../../base/commands/command-base");
var command_states_1 = require("../../base/commands/command-states");
var dialog_finish_and_merge_command_1 = require("../../base/commands/dialogs/dialog-finish-and-merge-command");
var model_manager_1 = require("../../core/model-manager");
var field_code_parser_merge_field_1 = require("../../core/model/fields/parsers/field-code-parser-merge-field");
var tree_creator_1 = require("../../core/model/fields/tree-creator");
var insert_paragraph_manipulator_params_1 = require("../../core/model/manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var create_range_copy_operation_1 = require("../../core/model/manipulators/range/create-range-copy-operation");
var insert_text_manipulator_params_1 = require("../../core/model/manipulators/text-manipulator/insert-text-manipulator-params");
var control_1 = require("../../core/model/options/control");
var rich_utils_1 = require("../../core/model/rich-utils");
var run_type_1 = require("../../core/model/runs/run-type");
var enums_1 = require("../../core/model/section/enums");
var sub_document_1 = require("../../core/model/sub-document");
var properties_bundle_1 = require("../../core/rich-utils/properties-bundle");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var docx_export_options_1 = require("../../docx/export/docx-export-options");
var exporter_1 = require("../../docx/export/exporter");
var importer_1 = require("../../docx/import/importer");
var importer_options_1 = require("../../docx/import/importer-options");
var exporter_2 = require("../../model-api/formats/exporter");
var MailMergeCommand = (function (_super) {
    tslib_1.__extends(MailMergeCommand, _super);
    function MailMergeCommand() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MailMergeCommand.prototype.getState = function () {
        var state = new command_states_1.SimpleCommandState(this.isEnabled());
        state.visible = this.control.modelManager.richOptions.control.fields !== control_1.DocumentCapability.Hidden;
        return state;
    };
    MailMergeCommand.prototype.isEnabledInReadOnlyMode = function () {
        return true;
    };
    MailMergeCommand.prototype.isEnabled = function () {
        return _super.prototype.isEnabled.call(this) && control_1.ControlOptions.isEnabled(this.control.modelManager.richOptions.control.fields) &&
            this.control.modelManager.model.mainSubDocument.getDocumentEndPosition() > 1;
    };
    MailMergeCommand.prototype.canModify = function () {
        return true;
    };
    MailMergeCommand.prototype.executeCore = function (_state, options) {
        var _this = this;
        var docxExporter = new exporter_1.DocxExporter(this.control.modelManager.modelManipulator, new docx_export_options_1.DocxExportOptions());
        docxExporter.exportToBlob(function (blob) {
            var docxImporter = new importer_1.Importer(new importer_options_1.ImporterOptions());
            docxImporter.importFromFile(blob, _this.control.modelManager.richOptions, function (documentModel, formatImagesImporter) {
                var modelManager = _this.createModelManager(documentModel);
                _this.control.commandManager.formatImagesImporters.push(formatImagesImporter);
                formatImagesImporter.whenAllPicturesLoaded(function (successLoadedAllPictures) {
                    var index = _this.control.commandManager.formatImagesImporters.indexOf(formatImagesImporter);
                    if (index >= 0)
                        _this.control.commandManager.formatImagesImporters.splice(index, 1);
                    if (!successLoadedAllPictures)
                        throw new Error(errors_1.Errors.InternalException);
                    var param = options.param;
                    _this.prepareMergedDocument(modelManager, param);
                    exporter_2.exportModelToBlob(modelManager.modelManipulator, param.documentFormat, function (blob) { return param.callback(blob); });
                }, 3000);
                formatImagesImporter.import(modelManager.modelManipulator);
            }, function () { });
        });
        return true;
    };
    MailMergeCommand.prototype.prepareMergedDocument = function (modelManager, param) {
        var subDoc = modelManager.model.mainSubDocument;
        var subDocumentIntervals = new sub_document_1.SubDocumentIntervals(subDoc, [new fixed_1.FixedInterval(0, subDoc.getDocumentEndPosition() - 1)]);
        var rangeCopy = create_range_copy_operation_1.RangeCopy.create(subDocumentIntervals);
        var dataSource = this.control.owner.dataSource;
        var exportToIndex = Math.min(param.exportFrom + param.exportRecordsCount, dataSource.totalCount()) - 1;
        if (param.exportFrom > exportToIndex)
            modelManager.modelManipulator.range.removeIntervalWithoutHistory(subDoc, subDocumentIntervals.intervals[0], false);
        var lastProcessedPositionInMainSubDocument = 0;
        var processedSubDocIds = [];
        for (var index = param.exportFrom; index <= exportToIndex; index++) {
            if (index > param.exportFrom)
                rangeCopy.insertTo(modelManager.modelManipulator, new sub_document_1.SubDocumentPosition(subDoc, subDoc.getDocumentEndPosition() - 1));
            var record = dataSource.items()[index];
            this.replaceMergeFieldsInModel(modelManager, record, lastProcessedPositionInMainSubDocument, processedSubDocIds);
            if (index < exportToIndex)
                this.insertSeparator(modelManager, param.mergeMode);
            lastProcessedPositionInMainSubDocument = subDoc.getDocumentEndPosition() - 1;
        }
    };
    MailMergeCommand.prototype.replaceMergeFieldsInModel = function (modelManager, record, lastProcessedPositionInMainSubDocument, processedSubDocIds) {
        var _this = this;
        number_1.NumberMapUtils.forEach(modelManager.model.subDocuments, function (subDoc) {
            if (!processedSubDocIds[subDoc.id]) {
                _this.replaceMergeFieldsInSubDocument(modelManager, record, lastProcessedPositionInMainSubDocument, subDoc);
                if (!subDoc.isMain())
                    processedSubDocIds.push(subDoc.id);
            }
        });
    };
    MailMergeCommand.prototype.replaceMergeFieldsInSubDocument = function (modelManager, record, lastProcessedPositionInMainSubDocument, subDoc) {
        for (var i = subDoc.fields.length - 1; i >= 0; i--) {
            var field = subDoc.fields[i];
            if (subDoc.isMain() && field.getFieldStartPosition() < lastProcessedPositionInMainSubDocument)
                return;
            var parser = tree_creator_1.FieldsWaitingForUpdate.getParser(modelManager, null, null, subDoc, field);
            if (parser) {
                if (parser instanceof field_code_parser_merge_field_1.FieldCodeParserMailMerge) {
                    var fieldName = parser.getMergeFieldName();
                    var pos = field.getFieldStartPosition();
                    var text = this.getResultByFieldName(record, fieldName).replace(/\r\n/g, rich_utils_1.RichUtils.specialCharacters.LineBreak);
                    var insertParams = new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDoc, pos), subDoc.getRunByPosition(pos).getCharPropsBundle(modelManager.model), run_type_1.RunType.TextRun, text);
                    modelManager.modelManipulator.text.insertTextInner(insertParams);
                    modelManager.modelManipulator.range.removeIntervalWithoutHistory(subDoc, field.getAllFieldInterval(), false);
                }
                parser.destructor();
            }
        }
    };
    MailMergeCommand.prototype.getResultByFieldName = function (record, fieldName) {
        var keys = Object.keys(record);
        for (var i = 0, key = void 0; key = keys[i]; i++)
            if (key.toLowerCase() == fieldName.toLowerCase())
                return record[key] + '';
        return '';
    };
    MailMergeCommand.prototype.insertSeparator = function (modelManager, mergeMode) {
        var subDoc = modelManager.model.mainSubDocument;
        var position = subDoc.getDocumentEndPosition() - 1;
        var firstRun = subDoc.getRunByPosition(0);
        var characterStyle = firstRun.characterStyle;
        var maskedCharacterProperties = firstRun.maskedCharacterProperties.clone();
        var maskedCharacterPropertiesBundle = new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle);
        switch (mergeMode) {
            case dialog_finish_and_merge_command_1.MergeMode.NewParagraph:
                modelManager.modelManipulator.paragraph.insertParagraphViaHistory(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDoc, position), maskedCharacterPropertiesBundle));
                break;
            case dialog_finish_and_merge_command_1.MergeMode.NewSection:
                modelManager.modelManipulator.section.insertSectionAndSetStartType(position, enums_1.SectionStartType.NextPage, maskedCharacterPropertiesBundle);
                break;
        }
    };
    MailMergeCommand.prototype.createModelManager = function (model) {
        return new model_manager_1.ClientModelManager(model, this.control.modelManager.richOptions, new batch_updatable_1.EmptyBatchUpdatableObject());
    };
    return MailMergeCommand;
}(command_base_1.CommandBase));
exports.MailMergeCommand = MailMergeCommand;
var MailMergeCommandParameters = (function () {
    function MailMergeCommandParameters(callback, mergeMode, documentFormat, exportFrom, exportRecordsCount) {
        this.callback = callback;
        this.mergeMode = mergeMode;
        this.documentFormat = documentFormat;
        this.exportFrom = exportFrom ? exportFrom : 0;
        this.exportRecordsCount = exportRecordsCount ? exportRecordsCount : Infinity;
    }
    return MailMergeCommandParameters;
}());
exports.MailMergeCommandParameters = MailMergeCommandParameters;
