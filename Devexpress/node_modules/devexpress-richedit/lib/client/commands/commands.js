"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var parameter_checker_1 = require("../../api-utils/api-utils/parameter-checker");
var client_command_1 = require("../../base/commands/client-command");
var enums_1 = require("../../core/model/borders/enums");
var model_parameter_checker_1 = require("../../model-api/api-utils/model-parameter-checker");
var enum_1 = require("../public/commands/enum");
function executeApiCommandCore(commandManager, commandId, parameter) {
    var modelCommandId = commandId;
    var command = commandManager.getCommand(modelCommandId);
    if (!command)
        return false;
    var allowExecute = true;
    switch (commandId) {
        case enum_1.FileTabCommandId.CreateDocument:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.OpenDocument:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.ExportDocument:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.DownloadDocumentMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.FileTabCommandId.DownloadDocx:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.DownloadRtf:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.DownloadTxt:
            parameter = undefined;
            break;
        case enum_1.FileTabCommandId.PrintDocument:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ChangeCaseMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.HomeTabCommandId.AlignParagraphMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.HomeTabCommandId.LineSpacingMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.HomeTabCommandId.Undo:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.Redo:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.Cut:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.Copy:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.Paste:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ChangeFontName: {
            var name_1 = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor('parameter', function (val) { return val; }, false)
            ]);
            parameter = name_1;
            break;
        }
        case enum_1.HomeTabCommandId.ChangeFontSize: {
            var size = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('parameter', function (val) { return val; }, 0)
            ]);
            parameter = size;
            break;
        }
        case enum_1.HomeTabCommandId.IncreaseFontSize:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.DecreaseFontSize:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ChangeFontForeColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.HomeTabCommandId.ShowFontDialog:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ToggleFontBold:
        case enum_1.HomeTabCommandId.ToggleFontItalic:
        case enum_1.HomeTabCommandId.ToggleFontUnderline:
        case enum_1.HomeTabCommandId.ToggleFontDoubleUnderline:
        case enum_1.HomeTabCommandId.ToggleFontStrikeout:
        case enum_1.HomeTabCommandId.ToggleFontSubscript:
        case enum_1.HomeTabCommandId.ToggleFontSuperscript:
        case enum_1.HomeTabCommandId.CapitalizationToggleCase:
        case enum_1.HomeTabCommandId.ToggleBulletedList:
        case enum_1.HomeTabCommandId.ToggleNumberedList:
        case enum_1.HomeTabCommandId.ToggleMultilevelList:
        case enum_1.HomeTabCommandId.ToggleParagraphAlignmentLeft:
        case enum_1.HomeTabCommandId.ToggleParagraphAlignmentCenter:
        case enum_1.HomeTabCommandId.ToggleParagraphAlignmentRight:
        case enum_1.HomeTabCommandId.ToggleParagraphAlignmentJustify:
        case enum_1.HomeTabCommandId.ToggleShowHiddenSymbols:
            {
                parameter = getRevertValue(command);
                break;
            }
        case enum_1.HomeTabCommandId.CapitalizationSentenceCase:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.CapitalizationUpperCase:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.CapitalizationLowerCase:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.CapitalizeEachWordCase:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ClearFormatting:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.SetSingleParagraphSpacing:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.SetSesquialteralParagraphSpacing:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.SetDoubleParagraphSpacing:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.AddSpacingBeforeParagraph:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.AddSpacingAfterParagraph:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.RemoveSpacingBeforeParagraph:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.RemoveSpacingAfterParagraph:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ChangeShading: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.HomeTabCommandId.ChangeStyle: {
            var styleName = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor('parameter', function (val) { return val; }, false)
            ]);
            parameter = styleName;
            break;
        }
        case enum_1.HomeTabCommandId.Find:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.Replace:
            parameter = undefined;
            break;
        case enum_1.HomeTabCommandId.ChangeFontHighlightColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.InsertTabCommandId.ShowInsertTableDialog:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertPicture:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.ShowBookmarkDialog:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.ShowHyperlinkDialog:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertHeader:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertFooter:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertPageNumberField:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertPageCountField:
            parameter = undefined;
            break;
        case enum_1.InsertTabCommandId.InsertFloatingTextBox:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.MarginsMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.PageLayoutTabCommandId.OrientationMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.PageLayoutTabCommandId.SizeMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.PageLayoutTabCommandId.ColumnsMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.PageLayoutTabCommandId.BreaksMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionNormalPageMargins:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionNarrowPageMargins:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionModeratePageMargins:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionWidePageMargins:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.ShowMarginsPageSetupDialog:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetPortraitPageOrientation:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetLandscapePageOrientation:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionLetterPaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionLegalPaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionFolioPaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionA4PaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionB5PaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionExecutivePaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionA5PaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionA6PaperSize:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.ShowPageSetupDialog:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionOneColumn:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionTwoColumns:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.SetSectionThreeColumns:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.InsertPageBreak:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.InsertColumnBreak:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.InsertSectionBreakNextPage:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.InsertSectionBreakEvenPage:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.InsertSectionBreakOddPage:
            parameter = undefined;
            break;
        case enum_1.PageLayoutTabCommandId.ChangePageColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.ReferencesTabCommandId.AddTextMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ReferencesTabCommandId.InsertCaptionMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ReferencesTabCommandId.InsertTableOfFiguresMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ReferencesTabCommandId.InsertTableOfContents:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphBodyTextLevel:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading1Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading2Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading3Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading4Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading5Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading6Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading7Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading8Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.SetParagraphHeading9Level:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateFigureCaptionField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateTableCaptionField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateEquationCaptionField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateTableOfFiguresField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateTableOfTablesField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.CreateTableOfEquationsField:
            parameter = undefined;
            break;
        case enum_1.ReferencesTabCommandId.UpdateTableOfContents:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateFieldMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.MailMergeTabCommandId.CreateField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateDateField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateTimeField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreatePageField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateNumPagesField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateEmptyMergeField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.CreateEmptyDocVariableField:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.ShowInsertMergeFieldDialog:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.ToggleViewMergedData:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.ShowAllFieldCodes:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.ShowAllFieldResults:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.UpdateAllFields:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.GoToFirstDataRecord:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.GoToPreviousDataRecord:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.GoToNextDataRecord:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.GoToLastDataRecord:
            parameter = undefined;
            break;
        case enum_1.MailMergeTabCommandId.ShowMailMergeDialog:
            parameter = undefined;
            break;
        case enum_1.ViewTabCommandId.SwitchToSimpleView:
            parameter = undefined;
            break;
        case enum_1.ViewTabCommandId.SwitchToPrintLayout:
            parameter = undefined;
            break;
        case enum_1.ViewTabCommandId.ToggleShowHorizontalRuler:
            parameter = undefined;
            break;
        case enum_1.ViewTabCommandId.ToggleFullScreen:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.GoToPageHeader:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.GoToPageFooter:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.GoToPreviousPageHeaderFooter:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.GoToNextPageHeaderFooter:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.LinkHeaderFooterToPrevious:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.ToggleDifferentFirstPage:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.ToggleDifferentOddAndEvenPages:
            parameter = undefined;
            break;
        case enum_1.HeaderAndFooterTabCommandId.ChangeHeaderOffset: {
            parameter = getNumberParameter(parameter);
            break;
        }
        case enum_1.HeaderAndFooterTabCommandId.ChangeFooterOffset: {
            parameter = getNumberParameter(parameter);
            break;
        }
        case enum_1.HeaderAndFooterTabCommandId.CloseHeaderFooter:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.TableStyleOptionsMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableDesignTabCommandId.BordersMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableDesignTabCommandId.ToggleFirstRow:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleLastRow:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleBandedRows:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleFirstColumn:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleLastColumn:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleBandedColumn:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ChangeTableStyle: {
            var styleName = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor('parameter', function (val) { return val; }, false)
            ]);
            parameter = styleName;
            break;
        }
        case enum_1.TableDesignTabCommandId.ChangeTableRepositoryItemBorderStyle: {
            var style = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor('parameter', function (val) {
                    val = val.toLowerCase();
                    switch (val) {
                        case 'none': break;
                        case 'dashed': break;
                        case 'double': break;
                        case 'dotted': break;
                        case 'single': break;
                        default: val = 'single';
                    }
                    return val;
                }, false)
            ]);
            switch (style) {
                case 'none':
                    parameter = enums_1.BorderLineStyle.None;
                    break;
                case 'dashed':
                    parameter = enums_1.BorderLineStyle.Dashed;
                    break;
                case 'double':
                    parameter = enums_1.BorderLineStyle.Double;
                    break;
                case 'dotted':
                    parameter = enums_1.BorderLineStyle.Dotted;
                    break;
                case 'single':
                    parameter = enums_1.BorderLineStyle.Single;
                    break;
                default: parameter = enums_1.BorderLineStyle.Single;
            }
            break;
        }
        case enum_1.TableDesignTabCommandId.ChangeTableRepositoryItemBorderWidth: {
            var width = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('parameter', function (val) { return val; }, 0)
            ]);
            parameter = width;
            break;
        }
        case enum_1.TableDesignTabCommandId.ChangeTableRepositoryItemBorderColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.TableDesignTabCommandId.ToggleTableCellsBottomBorder:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellsTopBorder:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellsLeftBorder:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellsRightBorder:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellNoBorder:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellAllBorders:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellOutsideBorders:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellInsideBorders:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellInsideHorizontalBorders:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableCellInsideVerticalBorders:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ToggleTableViewGridlines:
            parameter = undefined;
            break;
        case enum_1.TableDesignTabCommandId.ChangeTableCellShading: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.TableLayoutTabCommandId.SelectMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableLayoutTabCommandId.DeleteMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableLayoutTabCommandId.InsertMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableLayoutTabCommandId.AutoFitMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableLayoutTabCommandId.AlignmentMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.TableLayoutTabCommandId.SelectTableCell:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SelectTableColumn:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SelectTableRow:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SelectTable:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.ToggleShowTableGridLines:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.ShowDeleteCellsDialog:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.DeleteTableColumns:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.DeleteTableRows:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.DeleteTable:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.InsertTableRowAbove:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.InsertTableRowBelow:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.InsertTableColumnToTheLeft:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.InsertTableColumnToTheRight:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.MergeTableCells:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.ShowSplitCellsDialog:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SetAutoFitContents:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SetAutoFitWindow:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.SetFixedColumnWidth:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignTopLeft:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignTopCenter:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignTopRight:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignMiddleLeft:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignMiddleCenter:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignMiddleRight:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignBottomLeft:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignBottomCenter:
            parameter = undefined;
            break;
        case enum_1.TableLayoutTabCommandId.TableCellAlignBottomRight:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.WrapTextMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.PositionMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.BringToFrontMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SendToBackMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.ChangeFloatingObjectFillColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.FloatingObjectsFormatTabCommandId.ChangeFloatingObjectOutlineColor: {
            var color = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, model_parameter_checker_1.ModelParametersChecker.colorDescriptors('parameter'));
            parameter = color;
            break;
        }
        case enum_1.FloatingObjectsFormatTabCommandId.ChangeFloatingObjectOutlineWidth: {
            var width = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.numberDescriptor('parameter', function (val) { return val; }, 0)
            ]);
            parameter = width;
            break;
        }
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectInlineTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectSquareTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectTightTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectThroughTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectTopAndBottomTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectBehindTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectInFrontOfTextWrapType:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectTopLeftAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectTopCenterAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectTopRightAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectMiddleLeftAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectMiddleCenterAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectMiddleRightAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectBottomLeftAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectBottomCenterAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.SetFloatingObjectBottomRightAlignment:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectBringForward:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectBringToFront:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectBringInFrontOfText:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectSendBackward:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectSendToBack:
            parameter = undefined;
            break;
        case enum_1.FloatingObjectsFormatTabCommandId.FloatingObjectSendBehindText:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ApplySpellingSuggestion: {
            var suggestion = parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
                parameter_checker_1.ApiParametersChecker.stringDescriptor('parameter', function (val) { return val; }, true)
            ]);
            parameter = suggestion;
            break;
        }
        case enum_1.ContextMenuCommandId.NoSpellingSuggestions:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.IgnoreSpellingError:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.IgnoreAllSpellingErrors:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.AddWordToDictionary:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.OpenHyperlink:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowEditHyperlinkDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.RemoveHyperlink:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.UpdateField:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ToggleFieldCodes:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.RestartNumberedList:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ContinueNumberedList:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.Cut:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.Copy:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.Paste:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.TableMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ContextMenuCommandId.InsertTableColumnToTheLeft:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.InsertTableColumnToTheRight:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.InsertTableRowAbove:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.InsertTableRowBelow:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowInsertTableCellsDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowDeleteTableCellsDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowSplitCellsDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.MergeTableCells:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.DecreaseParagraphIndent:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.IncreaseParagraphIndent:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowFontDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowParagraphDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowBookmarkDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowHyperlinkDialog:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ChangeFloatingObjectTextWrapTypeMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectInlineTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectSquareTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectTightTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectThroughTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectTopAndBottomTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectBehindTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SetFloatingObjectInFrontOfTextWrapType:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectBringForwardMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectBringForward:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectBringToFront:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectBringInFrontOfText:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectSendBackwardMenu:
            parameter = undefined;
            allowExecute = false;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectSendBackward:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectSendToBack:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.FloatingObjectSendBehindText:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.ShowCreateHyperlinkForm:
            parameter = undefined;
            break;
        case enum_1.ContextMenuCommandId.SelectAll:
            parameter = undefined;
            break;
        default: allowExecute = false;
    }
    return allowExecute || allowExecuteInternalCommand(modelCommandId) ? command.execute(false, parameter) : false;
}
exports.executeApiCommandCore = executeApiCommandCore;
function allowExecuteInternalCommand(commandId) {
    if (commandId == client_command_1.RichEditClientCommand.ShowTabsForm)
        return true;
    return false;
}
function getRevertValue(command) {
    return !command.getState().value;
}
function getNumberParameter(parameter) {
    return parameter_checker_1.ApiParametersChecker.check(parameter, 2, false, [
        parameter_checker_1.ApiParametersChecker.numberDescriptor('parameter', function (val) { return val; })
    ]);
}
