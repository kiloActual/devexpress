"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var localization_1 = require("devextreme/localization");
var unit_converter_1 = require("../base-utils/unit-converter");
var utils_1 = require("../base-utils/utils");
var auto_correct_1 = require("../core/model/options/auto-correct");
var bookmarks_1 = require("../core/model/options/bookmarks");
var fields_1 = require("../core/model/options/fields");
var fonts_1 = require("../core/model/options/fonts");
var mail_merge_1 = require("../core/model/options/mail-merge");
var pdf_1 = require("../core/model/options/pdf");
var printing_1 = require("../core/model/options/printing");
var protection_1 = require("../core/model/options/protection");
var spell_checker_1 = require("../core/model/options/spell-checker");
var views_settings_1 = require("../core/view-settings/views-settings");
var common_1 = require("@devexpress/utils/lib/utils/common");
var settings_1 = require("./context-menu/settings");
var data_source_helper_1 = require("./data-source-helper");
var creator_1 = require("./public/ribbon/creator");
var ribbon_1 = require("./public/ribbon/ribbon");
var rich_edit_1 = require("./public/rich-edit");
var Settings = (function () {
    function Settings() {
        this.width = "100%";
        this.height = "500px";
        this.readOnly = false;
        this.unit = unit_converter_1.RichEditUnit.Inch;
        this.exportUrl = "";
        this.dataSource = null;
        this.rawDataSource = null;
        this.autoCorrect = new auto_correct_1.AutoCorrectSettings();
        this.bookmarks = new bookmarks_1.BookmarksSettings();
        this.documentProtection = new protection_1.DocumentProtectionSettings();
        this.fields = new fields_1.FieldsSettings();
        this.mailMerge = new mail_merge_1.MailMergeOptions();
        this.printing = new printing_1.PrintingSettings();
        this.ribbon = new ribbon_1.Ribbon();
        this.view = new views_settings_1.ViewSettings();
        this.pdf = new pdf_1.PdfSettings();
        this.fonts = new fonts_1.FontsSettings();
        this.spellCheck = new spell_checker_1.SpellCheckerSettings();
        this.confirmOnLosingChanges = new ConfirmOnLosingChangesSettings();
        this.contextMenuSettings = new settings_1.ContextMenuSettings();
    }
    Settings.parse = function (settings) {
        var result = new Settings();
        if (!settings)
            settings = {};
        this.parseCommonSettings(settings, result);
        this.parseAutoCorrectSettings(settings, result);
        this.parseBookmarksSettings(settings, result);
        this.parseDocumentProtectionSettings(settings, result);
        this.parseFieldsSettings(settings, result);
        this.parsePrintingSettings(settings, result);
        this.parseRibbonSettings(settings, result);
        this.parseViewsSettings(settings, result);
        this.parsePdfSettings(settings, result);
        result.fonts.init(settings.fonts);
        this.parseConfirmOnLosingChangesSettings(settings, result);
        this.parseMailMergeSettings(settings, result);
        this.parseSpellCheckSettings(settings, result);
        this.parseEventHandlers(settings.events, result);
        this.parseContextMenuSettings(settings, result);
        if (result.onSaved && result.exportUrl !== "")
            console.log('The Saved event does nothing. To learn more, follow ' +
                'https://docs.devexpress.com/AspNetCore/400972/office-inspired-controls/controls/rich-edit/document-management#save-a-document');
        return result;
    };
    Settings.parseCommonSettings = function (settings, result) {
        if (common_1.isDefined(settings.width))
            result.width = settings.width;
        if (common_1.isDefined(settings.height))
            result.height = settings.height;
        if (common_1.isDefined(settings.readOnly))
            result.readOnly = settings.readOnly;
        if (common_1.isDefined(settings.unit))
            result.unit = settings.unit;
        if (common_1.isDefined(settings.exportUrl))
            result.exportUrl = settings.exportUrl;
    };
    Settings.parseAutoCorrectSettings = function (settings, result) {
        var autoCorrect = settings.autoCorrect;
        if (common_1.isDefined(autoCorrect)) {
            if (common_1.isDefined(autoCorrect.correctTwoInitialCapitals))
                result.autoCorrect.correctTwoInitialCapitals = autoCorrect.correctTwoInitialCapitals;
            if (common_1.isDefined(autoCorrect.detectUrls))
                result.autoCorrect.detectUrls = autoCorrect.detectUrls;
            if (common_1.isDefined(autoCorrect.enableAutomaticNumbering))
                result.autoCorrect.enableAutomaticNumbering = autoCorrect.enableAutomaticNumbering;
            if (common_1.isDefined(autoCorrect.replaceTextAsYouType))
                result.autoCorrect.replaceTextAsYouType = autoCorrect.replaceTextAsYouType;
            if (common_1.isDefined(autoCorrect.caseSensitiveReplacement))
                result.autoCorrect.caseSensitiveReplacement = autoCorrect.caseSensitiveReplacement;
            if (common_1.isDefined(autoCorrect.replaceInfoCollection) && Array.isArray(autoCorrect.replaceInfoCollection)) {
                for (var _i = 0, _a = autoCorrect.replaceInfoCollection; _i < _a.length; _i++) {
                    var info = _a[_i];
                    if (common_1.isDefined(info.replace) && common_1.isDefined(info.with))
                        result.autoCorrect.replaceInfoCollection.push(new auto_correct_1.AutoCorrectReplaceInfo(info.replace, info.with));
                }
            }
        }
    };
    Settings.parseBookmarksSettings = function (settings, result) {
        if (common_1.isDefined(settings.bookmarks)) {
            if (common_1.isDefined(settings.bookmarks.color))
                result.bookmarks.color = settings.bookmarks.color;
            if (common_1.isDefined(settings.bookmarks.visibility))
                result.bookmarks.visibility = settings.bookmarks.visibility ? bookmarks_1.BookmarksVisibility.Visible : bookmarks_1.BookmarksVisibility.Hidden;
        }
    };
    Settings.parseDocumentProtectionSettings = function (settings, result) {
        var authentication = settings.authentication;
        if (common_1.isDefined(authentication)) {
            if (common_1.isDefined(authentication.userName))
                result.documentProtection.authenticationUserName = authentication.userName;
            if (common_1.isDefined(authentication.group))
                result.documentProtection.authenticationGroup = authentication.group;
        }
        var rangePermissions = settings.rangePermissions;
        if (common_1.isDefined(rangePermissions)) {
            if (common_1.isDefined(rangePermissions.bracketsColor))
                result.documentProtection.rangeHighlightBracketsColor = rangePermissions.bracketsColor;
            if (common_1.isDefined(rangePermissions.highlightColor))
                result.documentProtection.rangeHighlightColor = rangePermissions.highlightColor;
            if (common_1.isDefined(rangePermissions.highlightRanges))
                result.documentProtection.highlightRanges = rangePermissions.highlightRanges;
            if (common_1.isDefined(rangePermissions.showBrackets))
                result.documentProtection.showBrackets = rangePermissions.showBrackets;
        }
    };
    Settings.parseFieldsSettings = function (settings, result) {
        if (common_1.isDefined(settings.fields)) {
            if (common_1.isDefined(settings.fields.updateFieldsBeforePrint))
                result.fields.updateFieldsBeforePrint = settings.fields.updateFieldsBeforePrint;
            if (common_1.isDefined(settings.fields.updateFieldsOnPaste))
                result.fields.updateFieldsOnPaste = settings.fields.updateFieldsOnPaste;
            if (common_1.isDefined(settings.fields.defaultTimeFormat))
                result.fields.defaultTimeFormat = settings.fields.defaultTimeFormat;
            if (common_1.isDefined(settings.fields.defaultDateFormat))
                result.fields.defaultDateFormat = settings.fields.defaultDateFormat;
            if (common_1.isDefined(settings.fields.openHyperlinkOnClick))
                result.fields.openHyperlinkOnClick = settings.fields.openHyperlinkOnClick;
            if (common_1.isDefined(settings.fields.createHyperlinkTooltip))
                result.fields.createHyperlinkTooltip = this.parseEventHandler(settings.fields.createHyperlinkTooltip);
        }
    };
    Settings.parsePrintingSettings = function (settings, result) {
        var _a, _b, _c, _d;
        result.printing.mode = ((_b = (_a = settings === null || settings === void 0 ? void 0 : settings.printing) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : rich_edit_1.PrintMode.Html);
        result.printing.closePrintDialogWithHtmlPreview = (_d = (_c = settings === null || settings === void 0 ? void 0 : settings.printing) === null || _c === void 0 ? void 0 : _c.closePrintDialogWithHtmlPreview) !== null && _d !== void 0 ? _d : true;
    };
    Settings.parseRibbonSettings = function (settings, result) {
        if (common_1.isDefined(settings.ribbon)) {
            if (settings.ribbon instanceof ribbon_1.Ribbon) {
                result.ribbon = settings.ribbon;
            }
            else {
                var serverRibbonSettings = settings.ribbon;
                var ribbon = result.ribbon = new ribbon_1.Ribbon();
                if (common_1.isDefined(serverRibbonSettings.visible))
                    ribbon.visible = settings.ribbon.visible;
                if (common_1.isDefined(serverRibbonSettings.activeTabIndex))
                    ribbon.activeTabIndex = settings.ribbon.activeTabIndex;
                if (common_1.isDefined(serverRibbonSettings.tabs))
                    creator_1.addTabs(ribbon, serverRibbonSettings.tabs);
                if (common_1.isDefined(serverRibbonSettings.contextTabCategories))
                    creator_1.addContextTabCategories(ribbon, serverRibbonSettings.contextTabCategories);
                if (!(common_1.isDefined(serverRibbonSettings.tabs) && serverRibbonSettings.tabs.length) &&
                    !(common_1.isDefined(serverRibbonSettings.contextTabCategories) && serverRibbonSettings.tabs.length))
                    ribbon.visible = false;
            }
        }
        else
            result.ribbon.visible = false;
    };
    Settings.parseViewsSettings = function (settings, result) {
        if (common_1.isDefined(settings.view)) {
            if (common_1.isDefined(settings.view.viewType))
                result.view.viewType = settings.view.viewType;
            if (common_1.isDefined(settings.view.simpleViewSettings)) {
                var paddings = settings.view.simpleViewSettings.paddings;
                if (common_1.isDefined(paddings)) {
                    if (common_1.isDefined(paddings.left))
                        result.view.paddings.left = paddings.left;
                    if (common_1.isDefined(paddings.right))
                        result.view.paddings.right = paddings.right;
                    if (common_1.isDefined(paddings.top))
                        result.view.paddings.top = paddings.top;
                    if (common_1.isDefined(paddings.bottom))
                        result.view.paddings.bottom = paddings.bottom;
                }
                var fixedWidth = settings.view.simpleViewSettings.fixedWidth;
                if (common_1.isDefined(fixedWidth))
                    result.view.fixedWidth = fixedWidth;
            }
            var printLayoutViewSettings = settings.view.printLayoutViewSettings;
            if (common_1.isDefined(printLayoutViewSettings)) {
                if (common_1.isDefined(printLayoutViewSettings.showHorizontalRuler))
                    result.view.showHorizontalRuler = printLayoutViewSettings.showHorizontalRuler;
            }
        }
    };
    Settings.parsePdfSettings = function (settings, result) {
        if (common_1.isDefined(settings.pdf)) {
            if (common_1.isDefined(settings.pdf.pdfDocument))
                result.pdf.pdfDocument = this.parseEventHandler(settings.pdf.pdfDocument);
            if (common_1.isDefined(settings.pdf.blobStream))
                result.pdf.blobStream = this.parseEventHandler(settings.pdf.blobStream);
            if (common_1.isDefined(settings.pdf.exportUrl))
                result.pdf.exportUrl = settings.pdf.exportUrl;
            if (common_1.isDefined(settings.pdf.pdfKitScriptUrl))
                result.pdf.pdfKitScriptUrl = settings.pdf.pdfKitScriptUrl;
        }
    };
    Settings.parseConfirmOnLosingChangesSettings = function (settings, result) {
        if (common_1.isDefined(settings.confirmOnLosingChanges)) {
            if (common_1.isDefined(settings.confirmOnLosingChanges.enabled))
                result.confirmOnLosingChanges.enabled = settings.confirmOnLosingChanges.enabled;
            if (common_1.isDefined(settings.confirmOnLosingChanges.message))
                result.confirmOnLosingChanges.message = settings.confirmOnLosingChanges.message;
        }
    };
    Settings.parseContextMenuSettings = function (settings, result) {
        if (common_1.isDefined(settings.contextMenu)) {
            if (common_1.isDefined(settings.contextMenu.enabled))
                result.contextMenuSettings.enabled = settings.contextMenu.enabled;
            if (common_1.isDefined(settings.contextMenu.items))
                result.contextMenuSettings.items = settings.contextMenu.items;
        }
    };
    Settings.parseMailMergeSettings = function (settings, result) {
        if (common_1.isDefined(settings.mailMerge)) {
            if (common_1.isDefined(settings.mailMerge.viewMergedData))
                result.mailMerge.viewMergedData = settings.mailMerge.viewMergedData;
            if (common_1.isDefined(settings.mailMerge.activeRecord))
                result.mailMerge.activeRecordIndex = settings.mailMerge.activeRecord;
            if (common_1.isDefined(settings.mailMerge.dataSource)) {
                var dataSource = data_source_helper_1.DataSourceHelper.getDxDataSource(settings.mailMerge.dataSource);
                result.rawDataSource = settings.mailMerge.dataSource;
                result.dataSource = dataSource;
                dataSource.paginate(false);
                dataSource.requireTotalCount(true);
                dataSource.load()
                    .then(function () {
                    result.mailMerge.isEnabled = true;
                    result.mailMerge.allowInsertFields = true;
                    result.mailMerge.recordCount = result.dataSource.totalCount();
                })
                    .catch(function (e) {
                    console.error(e.message);
                });
            }
        }
    };
    Settings.parseSpellCheckSettings = function (settings, result) {
        if (common_1.isDefined(settings.spellCheck)) {
            if (common_1.isDefined(settings.spellCheck.enabled))
                result.spellCheck.isEnabled = settings.spellCheck.enabled;
            if (common_1.isDefined(settings.spellCheck.suggestionCount))
                result.spellCheck.suggestionCount = settings.spellCheck.suggestionCount;
            if (common_1.isDefined(settings.spellCheck.checkWordSpelling))
                result.spellCheck.checkWordSpelling = this.parseEventHandler(settings.spellCheck.checkWordSpelling);
            if (common_1.isDefined(settings.spellCheck.addWordToDictionary)) {
                result.spellCheck.addWordToDictionary = this.parseEventHandler(settings.spellCheck.addWordToDictionary);
                result.spellCheck.canAddWord = true;
            }
            else {
                result.spellCheck.canAddWord = false;
            }
        }
    };
    Settings.parseEventHandlers = function (settings, result) {
        if (!settings)
            return;
        if (settings.selectionChanged)
            result.onSelectionChanged = this.parseEventHandler(settings.selectionChanged);
        if (settings.documentLoaded)
            result.onDocumentLoaded = this.parseEventHandler(settings.documentLoaded);
        if (settings.documentFormatted)
            result.onDocumentFormatted = this.parseEventHandler(settings.documentFormatted);
        if (settings.documentChanged)
            result.onDocumentChanged = this.parseEventHandler(settings.documentChanged);
        if (settings.activeSubDocumentChanged)
            result.onActiveSubDocumentChanged = this.parseEventHandler(settings.activeSubDocumentChanged);
        if (settings.gotFocus)
            result.onGotFocus = this.parseEventHandler(settings.gotFocus);
        if (settings.lostFocus)
            result.onLostFocus = this.parseEventHandler(settings.lostFocus);
        if (settings.hyperlinkClick)
            result.onHyperlinkClick = this.parseEventHandler(settings.hyperlinkClick);
        if (settings.pointerDown)
            result.onPointerDown = this.parseEventHandler(settings.pointerDown);
        if (settings.pointerUp)
            result.onPointerUp = this.parseEventHandler(settings.pointerUp);
        if (settings.keyDown)
            result.onKeyDown = this.parseEventHandler(settings.keyDown);
        if (settings.keyUp)
            result.onKeyUp = this.parseEventHandler(settings.keyUp);
        if (settings.calculateDocumentVariable)
            result.onCalculateDocumentVariable = this.parseEventHandler(settings.calculateDocumentVariable);
        if (settings.contentInserted)
            result.onContentInserted = this.parseEventHandler(settings.contentInserted);
        if (settings.contentRemoved)
            result.onContentRemoved = this.parseEventHandler(settings.contentRemoved);
        if (settings.characterPropertiesChanged)
            result.onCharacterPropertiesChanged = this.parseEventHandler(settings.characterPropertiesChanged);
        if (settings.paragraphPropertiesChanged)
            result.onParagraphPropertiesChanged = this.parseEventHandler(settings.paragraphPropertiesChanged);
        if (settings.autoCorrect)
            result.onAutoCorrect = this.parseEventHandler(settings.autoCorrect);
        if (settings.saving)
            result.onSaving = this.parseEventHandler(settings.saving);
        if (settings.saved)
            result.onSaved = this.parseEventHandler(settings.saved);
        if (settings.customCommandExecuted)
            result.onCustomCommandExecuted = this.parseEventHandler(settings.customCommandExecuted);
        if (settings.pdfExported)
            result.onPdfExported = this.parseEventHandler(settings.pdfExported);
        if (settings.pdfExporting)
            result.onPdfExporting = this.parseEventHandler(settings.pdfExporting);
        if (settings.commandStateChanged)
            result.onCommandStateChanged = this.parseEventHandler(settings.commandStateChanged);
        if (settings.calculateDocumentVariableAsync)
            result.onCalculateDocumentVariableAsync = this.parseEventHandler(settings.calculateDocumentVariableAsync);
        if (settings.contextMenuShowing)
            result.onContextMenuShowing = this.parseEventHandler(settings.contextMenuShowing);
    };
    Settings.parseEventHandler = function (func) {
        return utils_1.convertToFunction(func);
    };
    return Settings;
}());
exports.Settings = Settings;
var ConfirmOnLosingChangesSettings = (function () {
    function ConfirmOnLosingChangesSettings() {
        this.enabled = true;
        this.message = localization_1.formatMessage('ASPxRichEditStringId.ConfirmOnLosingChanges');
    }
    return ConfirmOnLosingChangesSettings;
}());
exports.ConfirmOnLosingChangesSettings = ConfirmOnLosingChangesSettings;
