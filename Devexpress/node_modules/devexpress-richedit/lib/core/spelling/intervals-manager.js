"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var field_1 = require("../model/fields/field");
var json_general_enums_1 = require("../model/json/enums/json-general-enums");
var model_iterator_1 = require("../model/model-iterator");
var run_type_1 = require("../model/runs/run-type");
var helpers_1 = require("./helpers");
var intervals_1 = require("./intervals");
var intervals_collections_1 = require("./intervals-collections");
var spell_checker_1 = require("./spell-checker");
var SpellCheckerIntervalsManager = (function () {
    function SpellCheckerIntervalsManager(subDocument) {
        this.subDocument = subDocument;
        this.uncheckedIntervalCollection = new intervals_collections_1.UncheckedIntervalCollection();
        this.misspelledIntervalCollection = new intervals_collections_1.MisspelledIntervalCollection();
        this.ignoredIntervalCollection = new intervals_collections_1.IgnoredIntervalCollection();
        this.ignoredWordsCollection = new intervals_collections_1.IgnoredWordsCollection();
        this.isInitialize = false;
    }
    SpellCheckerIntervalsManager.prototype.initializeUncheckedIntervals = function () {
        if (!this.isInitialize) {
            this.createUncheckedIntervals(0, this.subDocument.getDocumentEndPosition());
            this.isInitialize = true;
        }
    };
    SpellCheckerIntervalsManager.prototype.getIntervalsToCheck = function () {
        this.splitUncheckedIntervals();
        var results = [];
        var totalLength = 0;
        var uncheckedIntervals = this.uncheckedIntervalCollection.getIntervals();
        for (var i = 0, uncheckedInterval = void 0; uncheckedInterval = uncheckedIntervals[i]; i++) {
            if (uncheckedInterval.info.isChecking || totalLength > spell_checker_1.SpellChecker.MAX_REQUEST_LENGTH) {
                this.removeEmptyUncheckedIntervals(i);
                return results;
            }
            this.expandUncheckedInterval(uncheckedInterval);
            if (uncheckedInterval.length > 0) {
                this.prepareUncheckedInterval(uncheckedInterval);
                uncheckedInterval.info.isChecking = true;
                totalLength += uncheckedInterval.length;
                results.push(uncheckedInterval);
            }
        }
        this.removeEmptyUncheckedIntervals();
        return results;
    };
    SpellCheckerIntervalsManager.prototype.applyCheckResults = function (checkedIntervals) {
        for (var i = 0, checkedInterval = void 0; checkedInterval = checkedIntervals[i]; i++) {
            var startPosition = checkedInterval[json_general_enums_1.JSONCheckSpellingCommand.StartPosition];
            var endPosition = checkedInterval[json_general_enums_1.JSONCheckSpellingCommand.EndPosition];
            var checkingInterval = this.uncheckedIntervalCollection.findCheckingIntervalByPositions(startPosition, endPosition);
            if (checkingInterval) {
                var isIntervalStartWithParagraph = startPosition === helpers_1.ModelWordPositionHelper.getPrevWordStartPosition(this.subDocument, startPosition);
                this.misspelledIntervalCollection.deleteOldIntervals(checkingInterval, isIntervalStartWithParagraph);
                this.createMisspelledIntervals(checkedInterval[json_general_enums_1.JSONCheckSpellingCommand.SpellingErrors], checkingInterval);
                this.uncheckedIntervalCollection.deleteIntervalsByPositions(startPosition, endPosition);
            }
        }
    };
    SpellCheckerIntervalsManager.prototype.onModelIntervalChanged = function (start, length, isSeparator) {
        this.uncheckedIntervalCollection.onModelIntervalChanged(start, length, isSeparator);
        this.misspelledIntervalCollection.onModelIntervalChanged(start, length, isSeparator);
        this.ignoredIntervalCollection.onModelIntervalChanged(start, length, isSeparator);
    };
    SpellCheckerIntervalsManager.prototype.getMisspelledIntervals = function () {
        return this.misspelledIntervalCollection.getIntervals();
    };
    SpellCheckerIntervalsManager.prototype.getUncheckedIntervalsCount = function () {
        return this.uncheckedIntervalCollection.getIntervals().length;
    };
    SpellCheckerIntervalsManager.prototype.getSelectedMisspelledInterval = function (selectionIntervals) {
        var _this = this;
        var selectedInterval = null;
        this.misspelledIntervalCollection.forEach(function (interval) {
            var expandedInterval = new fixed_1.FixedInterval(interval.start, interval.length);
            field_1.Field.correctIntervalDueToFieldsWithoutUiChecks(_this.subDocument, expandedInterval);
            if (expandedInterval.containsInterval(selectionIntervals[0]))
                selectedInterval = interval;
        });
        return selectedInterval;
    };
    SpellCheckerIntervalsManager.prototype.findNextMisspelledInterval = function (position) {
        return this.misspelledIntervalCollection.findNext(position);
    };
    SpellCheckerIntervalsManager.prototype.addIgnoredInterval = function (start, end, word) {
        this.ignoredIntervalCollection.add(new intervals_1.IgnoredInterval(start, end, word));
    };
    SpellCheckerIntervalsManager.prototype.deleteMisspelledIntervalsByPositions = function (start, end) {
        this.misspelledIntervalCollection.deleteIntervalsByPositions(start, end);
    };
    SpellCheckerIntervalsManager.prototype.ignoreAll = function (word) {
        var _this = this;
        this.ignoredWordsCollection.add(word);
        this.misspelledIntervalCollection.forEach(function (interval, index) {
            if (interval.errorInfo.word == word && interval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Misspelling) {
                _this.misspelledIntervalCollection.remove(index);
            }
        });
    };
    SpellCheckerIntervalsManager.prototype.removeIntervalsWithErrorByWord = function (word) {
        var _this = this;
        this.misspelledIntervalCollection.forEach(function (interval, index) {
            if (interval.errorInfo.word == word && interval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Misspelling)
                _this.misspelledIntervalCollection.remove(index);
        });
    };
    SpellCheckerIntervalsManager.prototype.getIntervalsWithErrorByWord = function (word) {
        var intervals = [];
        this.misspelledIntervalCollection.forEach(function (interval) {
            if (interval.errorInfo.word == word && interval.errorInfo.errorType == spell_checker_1.SpellingErrorType.Misspelling) {
                intervals.push(new fixed_1.FixedInterval(interval.start, interval.length));
            }
        });
        return intervals;
    };
    SpellCheckerIntervalsManager.prototype.expandUncheckedInterval = function (interval) {
        var expandIntervalStart = helpers_1.ModelWordPositionHelper.getPrevWordStartPosition(this.subDocument, interval.start);
        var expandIntervalEnd = helpers_1.ModelWordPositionHelper.getNextWordEndPosition(this.subDocument, interval.end);
        interval.start = expandIntervalStart;
        interval.length = Math.max(0, expandIntervalEnd - expandIntervalStart);
    };
    SpellCheckerIntervalsManager.prototype.removeEmptyUncheckedIntervals = function (maxIndex) {
        var _this = this;
        if (maxIndex === void 0) { maxIndex = this.uncheckedIntervalCollection.getIntervals().length; }
        this.uncheckedIntervalCollection.forEach(function (interval, index) {
            if (maxIndex < index && interval.length == 0)
                _this.uncheckedIntervalCollection.remove(index);
        });
    };
    SpellCheckerIntervalsManager.prototype.prepareUncheckedInterval = function (interval) {
        var iterator = new model_iterator_1.ModelIterator(this.subDocument, false);
        var textToCheck = "";
        var hiddenIntervals = [];
        var ignoredLength = 0;
        var ignoredStart = 0;
        var fieldLevel = 0;
        var isPreviouslyHiddeh = false;
        iterator.setPosition(interval.start);
        do {
            if (!iterator.run.getCharacterMergedProperties().hidden && iterator.run.getType() !== run_type_1.RunType.FieldCodeStartRun && fieldLevel === 0) {
                textToCheck += iterator.getCurrentChar();
                if (isPreviouslyHiddeh) {
                    hiddenIntervals.push(new fixed_1.FixedInterval(ignoredStart, ignoredLength));
                    ignoredLength = 0;
                    isPreviouslyHiddeh = false;
                }
                ignoredStart++;
            }
            else {
                ignoredLength++;
                isPreviouslyHiddeh = true;
                if (iterator.run.getType() == run_type_1.RunType.FieldCodeStartRun)
                    fieldLevel++;
                if (iterator.run.getType() == run_type_1.RunType.FieldResultEndRun)
                    fieldLevel--;
            }
        } while (iterator.getAbsolutePosition() < interval.end && iterator.moveToNextChar());
        interval.info.textToCheck = textToCheck;
        interval.info.hiddenIntervals = hiddenIntervals;
    };
    SpellCheckerIntervalsManager.prototype.createUncheckedIntervals = function (start, end) {
        var intervalCount = 0;
        var iterator = new model_iterator_1.ModelIterator(this.subDocument, true);
        iterator.setPosition(start);
        do {
            if (iterator.run.getType() == run_type_1.RunType.ParagraphRun) {
                var currentPosition = iterator.getAbsolutePosition();
                var length_1 = currentPosition - start;
                if (length_1 > 0) {
                    this.uncheckedIntervalCollection.add(new intervals_1.UncheckedInterval(start, length_1));
                    intervalCount++;
                }
                start = currentPosition + 1;
            }
        } while (iterator.getAbsolutePosition() < end && iterator.moveToNextRun());
        if (intervalCount == 0 && end > start)
            this.uncheckedIntervalCollection.add(new intervals_1.UncheckedInterval(start, end - start));
    };
    SpellCheckerIntervalsManager.prototype.splitUncheckedIntervals = function () {
        var uncheckedIntervals = this.uncheckedIntervalCollection.getIntervals();
        for (var i = 0, uncheckedInterval = void 0; uncheckedInterval = uncheckedIntervals[i]; i++) {
            if (uncheckedInterval.info.isChecking)
                return;
            if (!uncheckedInterval.info.isSplitted) {
                if (uncheckedInterval.length > spell_checker_1.SpellChecker.MAX_REQUEST_LENGTH) {
                    var start = uncheckedInterval.start;
                    var end = uncheckedInterval.end;
                    this.uncheckedIntervalCollection.remove(i);
                    this.createUncheckedIntervals(start, end);
                }
                else
                    uncheckedInterval.info.isSplitted = true;
            }
        }
    };
    SpellCheckerIntervalsManager.prototype.createMisspelledIntervals = function (spellingErrors, checkingInterval) {
        for (var i = 0, error = void 0; error = spellingErrors[i]; i++) {
            var errorStart = error[json_general_enums_1.JSONCheckSpellingCommand.ErrorStart] + checkingInterval.start;
            var errorLength = error[json_general_enums_1.JSONCheckSpellingCommand.ErrorLength];
            for (var j = 0, hiddenInterval = void 0; hiddenInterval = checkingInterval.info.hiddenIntervals[j]; j++) {
                if (error[json_general_enums_1.JSONCheckSpellingCommand.ErrorStart] > hiddenInterval.start)
                    errorStart += hiddenInterval.length;
                else if (hiddenInterval.start < error[json_general_enums_1.JSONCheckSpellingCommand.ErrorStart] + error[json_general_enums_1.JSONCheckSpellingCommand.ErrorLength])
                    errorLength += hiddenInterval.length;
            }
            var word = error[json_general_enums_1.JSONCheckSpellingCommand.ErrorWord];
            if (!this.ignoredIntervalCollection.contains(errorStart, errorLength, word) &&
                (!this.ignoredWordsCollection.contains(word) || error[json_general_enums_1.JSONCheckSpellingCommand.ErrorType] != spell_checker_1.SpellingErrorType.Misspelling)) {
                var spellingErrorInfo = new spell_checker_1.SpellingErrorInfo(error[json_general_enums_1.JSONCheckSpellingCommand.ErrorType], error[json_general_enums_1.JSONCheckSpellingCommand.Suggestions], word);
                var misspelledInterval = new intervals_1.MisspelledInterval(errorStart, errorLength, spellingErrorInfo);
                this.misspelledIntervalCollection.addIfNotExists(misspelledInterval);
            }
        }
    };
    return SpellCheckerIntervalsManager;
}());
exports.SpellCheckerIntervalsManager = SpellCheckerIntervalsManager;
