"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var command_request_1 = require("../model/json/command-request");
var command_type_1 = require("../model/json/command-type");
var json_general_enums_1 = require("../model/json/enums/json-general-enums");
var rich_utils_1 = require("../model/rich-utils");
var simple_sentence_model_builder_1 = require("../model/simple-sentence-model-builder");
var SpellChecker = (function () {
    function SpellChecker(modelRequestHandler, misspelledIntervalsChangesListener, settings) {
        this.modelRequestHandler = modelRequestHandler;
        this.misspelledIntervalsChangesListener = misspelledIntervalsChangesListener;
        this.settings = settings;
    }
    SpellChecker.prototype.dispose = function () {
        clearTimeout(this.checkCoreId);
    };
    SpellChecker.prototype.initialize = function (subDocument) {
        this.subDocument = subDocument;
        this.intervalsManager = subDocument.spellCheckerIntervalsManager;
        this.hasActiveRequest = false;
    };
    SpellChecker.prototype.check = function () {
        var _this = this;
        if (this.settings.isEnabled) {
            this.checkCoreId = setTimeout(function () {
                _this.checkCore();
            }, 0);
        }
    };
    SpellChecker.prototype.processResponse = function (checkedIntervals) {
        this.intervalsManager.applyCheckResults(checkedIntervals);
        this.updateMisspelledBoxes();
        this.hasActiveRequest = false;
        this.checkCore();
    };
    SpellChecker.prototype.getSelectedMisspelledInterval = function (selectionIntervals) {
        return this.intervalsManager.getSelectedMisspelledInterval(selectionIntervals);
    };
    SpellChecker.prototype.findNextMisspelledInterval = function (position) {
        return this.intervalsManager.findNextMisspelledInterval(position);
    };
    SpellChecker.prototype.ignore = function (misspelledInterval) {
        this.intervalsManager.addIgnoredInterval(misspelledInterval.start, misspelledInterval.end, misspelledInterval.errorInfo.word);
        this.intervalsManager.deleteMisspelledIntervalsByPositions(misspelledInterval.start, misspelledInterval.end);
        this.updateMisspelledBoxes();
    };
    SpellChecker.prototype.ignoreAll = function (misspelledInterval) {
        this.intervalsManager.ignoreAll(misspelledInterval.errorInfo.word);
        this.updateMisspelledBoxes();
    };
    SpellChecker.prototype.addWord = function (misspelledInterval) {
        var word = misspelledInterval.errorInfo.word;
        this.intervalsManager.removeIntervalsWithErrorByWord(word);
        this.updateMisspelledBoxes();
        this.sendAddWordRequest(word);
    };
    SpellChecker.prototype.getIntervalsWithErrorByWord = function (word) {
        return this.intervalsManager.getIntervalsWithErrorByWord(word);
    };
    SpellChecker.prototype.isInProgress = function () {
        return this.intervalsManager.getUncheckedIntervalsCount() > 0;
    };
    SpellChecker.prototype.getMisspelledIntervals = function () {
        return this.intervalsManager.getMisspelledIntervals();
    };
    SpellChecker.prototype.onModelIntervalChanged = function (start, length, isSeparator) {
        if (this.settings.isEnabled)
            this.intervalsManager.onModelIntervalChanged(start, length, isSeparator);
    };
    SpellChecker.prototype.onCurrentSelectedWordChanged = function () {
        this.check();
    };
    SpellChecker.prototype.onLayoutChanged = function () {
        this.updateMisspelledBoxes();
    };
    SpellChecker.prototype.checkCore = function () {
        if (this.hasActiveRequest)
            return;
        this.intervalsManager.initializeUncheckedIntervals();
        var intervalsToCheck = this.intervalsManager.getIntervalsToCheck();
        if (intervalsToCheck.length > 0)
            this.sendCheckSpellingRequest(intervalsToCheck);
    };
    SpellChecker.prototype.sendCheckSpellingRequest = function (uncheckedIntervals) {
        if (this.settings.checkWordSpelling || this.settings.checkWordSpelling)
            this.clientCheckSpelling(uncheckedIntervals);
        else
            this.aspxCheckSpelling(uncheckedIntervals);
    };
    SpellChecker.prototype.clientCheckSpelling = function (uncheckedIntervals) {
        if (this.settings.checkWordSpelling) {
            var callbacks_1 = [];
            for (var _i = 0, uncheckedIntervals_1 = uncheckedIntervals; _i < uncheckedIntervals_1.length; _i++) {
                var curr = uncheckedIntervals_1[_i];
                this.clientCheckIntervalByWord(curr, callbacks_1);
            }
            setTimeout(function () {
                for (var _i = 0, callbacks_2 = callbacks_1; _i < callbacks_2.length; _i++) {
                    var cb = callbacks_2[_i];
                    cb();
                }
            }, 0);
        }
        else {
        }
    };
    SpellChecker.prototype.clientCheckIntervalByWord = function (currInterval, callbacks) {
        var _this = this;
        var intervals = fixed_1.FixedInterval.makeByConstInterval(currInterval);
        var sentences = new simple_sentence_model_builder_1.SimpleSentenceStructureBuilder(currInterval.info.textToCheck).build();
        var wordsCount = 0;
        var errors = [];
        var processResponce = function () {
            var _a;
            if (wordsCount == 0) {
                var aspxResponce = [(_a = {},
                        _a[json_general_enums_1.JSONCheckSpellingCommand.StartPosition] = intervals.start,
                        _a[json_general_enums_1.JSONCheckSpellingCommand.EndPosition] = intervals.end,
                        _a[json_general_enums_1.JSONCheckSpellingCommand.SpellingErrors] = errors,
                        _a)];
                _this.processResponse(aspxResponce);
            }
        };
        for (var _i = 0, sentences_1 = sentences; _i < sentences_1.length; _i++) {
            var sentence = sentences_1[_i];
            var _loop_1 = function (word) {
                word = this_1.preprocessWord(word);
                if (/\d/.test(word.text)) {
                    return "continue";
                }
                wordsCount++;
                callbacks.push(function () {
                    _this.settings.checkWordSpelling(word.text, function (isCorrect, suggections) {
                        var _a;
                        if (!isCorrect) {
                            if (!suggections)
                                suggections = [];
                            errors.push((_a = {},
                                _a[json_general_enums_1.JSONCheckSpellingCommand.ErrorStart] = word.position,
                                _a[json_general_enums_1.JSONCheckSpellingCommand.ErrorLength] = word.text.length,
                                _a[json_general_enums_1.JSONCheckSpellingCommand.ErrorWord] = word.text,
                                _a[json_general_enums_1.JSONCheckSpellingCommand.ErrorType] = SpellingErrorType.Misspelling,
                                _a[json_general_enums_1.JSONCheckSpellingCommand.Suggestions] = suggections.slice(0, _this.settings.suggestionCount),
                                _a));
                        }
                        wordsCount--;
                        processResponce();
                    });
                });
            };
            var this_1 = this;
            for (var _a = 0, _b = sentence.words; _a < _b.length; _a++) {
                var word = _b[_a];
                _loop_1(word);
            }
        }
        if (wordsCount == 0)
            callbacks.push(function () { return processResponce(); });
    };
    SpellChecker.prototype.preprocessWord = function (word) {
        if (word.text[0] == rich_utils_1.RichUtils.specialCharacters.LeftSingleQuote && word.text[word.text.length - 1] == rich_utils_1.RichUtils.specialCharacters.RightSingleQuote)
            return new simple_sentence_model_builder_1.SimpleSentenceWord(word.position + 1, word.text.substr(1, word.text.length - 2));
        return word;
    };
    SpellChecker.prototype.sendAddWordRequest = function (word) {
        if (this.settings.addWordToDictionary)
            this.settings.addWordToDictionary(word);
        else
            this.aspxAddWordToDictionary(word);
    };
    SpellChecker.prototype.updateMisspelledBoxes = function () {
        if (this.settings.isEnabled)
            this.misspelledIntervalsChangesListener.setMisspelledSelectionIntervals(this.getMisspelledIntervals());
    };
    SpellChecker.prototype.aspxAddWordToDictionary = function (word) {
        var _a;
        var params = (_a = {},
            _a[json_general_enums_1.JSONCheckSpellingCommand.AddedWord] = word,
            _a[json_general_enums_1.JSONCheckSpellingCommand.CustomDictionaryGuid] = this.settings.customDictionaryGuid,
            _a);
        this.modelRequestHandler.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.AddWordToDictionary, -1, params), new command_request_1.RequestParams(false, true, true));
    };
    SpellChecker.prototype.aspxCheckSpelling = function (uncheckedIntervals) {
        var _a;
        var params = (_a = {},
            _a[json_general_enums_1.JSONCheckSpellingCommand.IntervalsToCheck] = list_1.ListUtils.map(uncheckedIntervals, function (uncheckedInterval) {
                var _a;
                return _a = {},
                    _a[json_general_enums_1.JSONCheckSpellingCommand.StartPosition] = uncheckedInterval.start,
                    _a[json_general_enums_1.JSONCheckSpellingCommand.EndPosition] = uncheckedInterval.end,
                    _a[json_general_enums_1.JSONCheckSpellingCommand.TextToCheck] = uncheckedInterval.info.textToCheck,
                    _a;
            }),
            _a[json_general_enums_1.JSONCheckSpellingCommand.CustomDictionaryGuid] = this.settings.customDictionaryGuid,
            _a);
        this.modelRequestHandler.pushRequest(new command_request_1.LoadCommandRequest(command_type_1.CommandType.CheckSpelling, this.subDocument.id, params), new command_request_1.RequestParams(false, true, false));
        this.hasActiveRequest = true;
    };
    SpellChecker.MAX_REQUEST_LENGTH = 300;
    return SpellChecker;
}());
exports.SpellChecker = SpellChecker;
var SpellingErrorType;
(function (SpellingErrorType) {
    SpellingErrorType[SpellingErrorType["Unknown"] = 0] = "Unknown";
    SpellingErrorType[SpellingErrorType["Misspelling"] = 1] = "Misspelling";
    SpellingErrorType[SpellingErrorType["Repeating"] = 2] = "Repeating";
    SpellingErrorType[SpellingErrorType["Syntax"] = 3] = "Syntax";
})(SpellingErrorType = exports.SpellingErrorType || (exports.SpellingErrorType = {}));
var SpellingErrorInfo = (function () {
    function SpellingErrorInfo(errorType, suggestions, word) {
        this.errorType = errorType;
        this.suggestions = suggestions;
        this.word = word;
    }
    return SpellingErrorInfo;
}());
exports.SpellingErrorInfo = SpellingErrorInfo;
