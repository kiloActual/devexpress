"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var size_1 = require("@devexpress/utils/lib/geometry/size");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var enums_1 = require("../model/character/enums");
var measure_info_1 = require("./measure-info");
var Measurer = (function () {
    function Measurer(id) {
        this.resultsIsInvalid = false;
        var measureContainer = document.createElement("div");
        measureContainer.id = id + "_Measure";
        measureContainer.className = "dxreMeasurer";
        document.body.appendChild(measureContainer);
        this.measureContainer = measureContainer;
    }
    Measurer.prototype.dispose = function () {
        dom_1.DomUtils.hideNode(this.measureContainer);
    };
    Measurer.prototype.setCharacterPropertiesCache = function (charPropsCache) {
        this.charPropsCache = charPropsCache;
    };
    Measurer.prototype.clearCache = function () {
        this.charPropsCache.resetSizes();
    };
    Measurer.prototype.measure = function (measureInfos) {
        this.htmlParts = [];
        this.nodeIndex = 0;
        this.nonCachedMeasureInfos = [];
        for (var _i = 0, measureInfos_1 = measureInfos; _i < measureInfos_1.length; _i++) {
            var info = measureInfos_1[_i];
            if (!info.resultSize) {
                if (info.charProp.script !== enums_1.CharacterFormattingScript.Normal)
                    this.pushInfoToQueue(info.sbInfo = this.createSpaceMeasureInfo(info));
                this.pushInfoToQueue(info);
            }
        }
        this.measureContainer.innerHTML = this.htmlParts.join("");
        var nodes = this.measureContainer.childNodes;
        for (var _a = 0, _b = this.nonCachedMeasureInfos; _a < _b.length; _a++) {
            var info = _b[_a];
            var cacheValue = info.charProp.getSize(info.text);
            if (cacheValue)
                info.resultSize = cacheValue;
            else
                this.applyCalculatedSize(info, nodes);
        }
        this.checkResult(measureInfos);
    };
    Measurer.prototype.checkResult = function (measureInfos) {
        var _this = this;
        if (measureInfos.length) {
            this.resultsIsInvalid = list_1.ListUtils.unsafeAnyOf(measureInfos, function (info) { return _this.incorrectInfo(info.resultSize); });
            if (this.resultsIsInvalid)
                for (var _i = 0, measureInfos_2 = measureInfos; _i < measureInfos_2.length; _i++) {
                    var info = measureInfos_2[_i];
                    info.resultSize.width = info.resultSize.height = 1;
                    info.charProp.clearSizes();
                    if (info.charProp.fontInfo)
                        info.charProp.fontInfo.reset();
                }
        }
    };
    Measurer.prototype.incorrectInfo = function (finalSize) {
        return finalSize.height === 0 || isNaN(finalSize.width) || isNaN(finalSize.height);
    };
    Measurer.prototype.pushInfoToQueue = function (info) {
        this.nonCachedMeasureInfos.push(info);
        if (info.resultSize !== null) {
            this.nonCachedMeasureInfos.push(info);
            info.nodeIndex = this.nodeIndex++;
            this.htmlParts.push("<pre style=\"" + info.signCssString + " \">" + info.getEncodedText() + "</pre>");
            info.charProp.setSize(info.text, null);
            info.resultSize = null;
        }
    };
    Measurer.prototype.createSpaceMeasureInfo = function (info) {
        var newCharProp = info.charProp.clone();
        newCharProp.script = enums_1.CharacterFormattingScript.Normal;
        newCharProp = this.charPropsCache.getItem(newCharProp);
        return new measure_info_1.MeasureInfoNonText(" ", newCharProp);
    };
    Measurer.prototype.applyCalculatedSize = function (info, nodes) {
        var node = nodes[info.nodeIndex];
        var style = document.defaultView.getComputedStyle(node, null);
        info.resultSize = new size_1.Size(parseFloat(style.width), info.charProp.script == enums_1.CharacterFormattingScript.Normal ? this.getNormalHeight(info) : info.sbInfo.resultSize.height);
        info.charProp.setSize(info.text, info.resultSize);
    };
    Measurer.prototype.getNormalHeight = function (info) {
        return info.charProp.fontInfo.getHeightFactor() * info.charProp.fontSize;
    };
    return Measurer;
}());
exports.Measurer = Measurer;
