"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var page_anchored_object_holder_1 = require("../../layout-formatter/floating/page-anchored-object-holder");
var render_level_calculator_1 = require("../../layout-formatter/floating/render-level-calculator");
var sub_document_1 = require("../../model/sub-document");
var layout_table_cell_info_1 = require("../table/layout-table-cell-info");
var LayoutPageFlags;
(function (LayoutPageFlags) {
    LayoutPageFlags[LayoutPageFlags["MustBeRendered"] = 1] = "MustBeRendered";
    LayoutPageFlags[LayoutPageFlags["ContentRendered"] = 2] = "ContentRendered";
    LayoutPageFlags[LayoutPageFlags["NeedRenderContent"] = 4] = "NeedRenderContent";
    LayoutPageFlags[LayoutPageFlags["NeedDeleteContent"] = 8] = "NeedDeleteContent";
    LayoutPageFlags[LayoutPageFlags["IsFirstPageOfSection"] = 16] = "IsFirstPageOfSection";
    LayoutPageFlags[LayoutPageFlags["IsIntervalsCorrect"] = 32] = "IsIntervalsCorrect";
    LayoutPageFlags[LayoutPageFlags["IsSelectionRendered"] = 64] = "IsSelectionRendered";
    LayoutPageFlags[LayoutPageFlags["IsSearchSelectionRendered"] = 128] = "IsSearchSelectionRendered";
    LayoutPageFlags[LayoutPageFlags["IsMisspelledSelectionRendered"] = 256] = "IsMisspelledSelectionRendered";
    LayoutPageFlags[LayoutPageFlags["IsRangePermissionsRendered"] = 512] = "IsRangePermissionsRendered";
})(LayoutPageFlags = exports.LayoutPageFlags || (exports.LayoutPageFlags = {}));
var LayoutOtherPageAreasInfo = (function () {
    function LayoutOtherPageAreasInfo(headerPageArea, footerPageArea, textBoxesPageAreas) {
        this.headerPageArea = headerPageArea;
        this.footerPageArea = footerPageArea;
        this.textBoxesPageAreas = textBoxesPageAreas;
    }
    LayoutOtherPageAreasInfo.prototype.getDocumentModel = function () {
        if (!this.documentModel) {
            var pageArea = (this.headerPageArea || this.footerPageArea || this.textBoxesPageAreas[0]);
            this.documentModel = pageArea ? pageArea.subDocument.documentModel : null;
        }
        return this.documentModel;
    };
    return LayoutOtherPageAreasInfo;
}());
exports.LayoutOtherPageAreasInfo = LayoutOtherPageAreasInfo;
var LayoutPage = (function (_super) {
    tslib_1.__extends(LayoutPage, _super);
    function LayoutPage() {
        var _this = _super.call(this, 0, 0, 0, 0) || this;
        _this.mainSubDocumentPageAreas = [];
        _this.otherPageAreas = {};
        _this.flags = new flag_1.Flag();
        _this.anchoredObjectHolder = new page_anchored_object_holder_1.PageAnchoredObjectHolder();
        return _this;
    }
    LayoutPage.prototype.setRenderLevelCalculator = function (anchorObjectsPositionInfo) {
        this.renderLevelCalculator = new render_level_calculator_1.RenderLevelCalculator();
        this.renderLevelCalculator.calcLevels(this.anchoredObjectHolder, anchorObjectsPositionInfo);
    };
    LayoutPage.prototype.setAbsolutePosition = function (pos) {
        this.contentIntervals = [new fixed_1.FixedInterval(pos, 0)];
        this.flags.set(LayoutPageFlags.IsIntervalsCorrect, false);
    };
    LayoutPage.prototype.startWithFloatingObject = function (ancPosInfo) {
        var min = number_1.NumberMapUtils.min(this.anchoredObjectHolder.objects, function (obj) { return ancPosInfo.getPosition(obj.objectId); });
        return min && ancPosInfo.getPosition(min.objectId) < this.getPosition() ? min : null;
    };
    LayoutPage.prototype.getStartPositionConsideringAncObj = function (ancPosInfo) {
        var ancObjWhatStartPage = this.startWithFloatingObject(ancPosInfo);
        return Math.min(this.getPosition(), ancObjWhatStartPage ? ancPosInfo.getPosition(ancObjWhatStartPage.objectId) : Number.MAX_VALUE);
    };
    LayoutPage.prototype.invalidate = function () {
        this.isValid = false;
        this.markPageIntervalsAsIncorrect();
    };
    LayoutPage.prototype.getPosition = function () {
        return this.contentIntervals[0].start;
    };
    LayoutPage.prototype.deepCopy = function () {
        var obj = new LayoutPage();
        obj.isValid = this.isValid;
        obj.mainSubDocumentPageAreas = list_1.ListUtils.map(this.mainSubDocumentPageAreas, function (pa) { return pa.deepCopy(); });
        obj.otherPageAreas = number_1.NumberMapUtils.shallowCopy(this.otherPageAreas);
        obj.flags = this.flags.clone();
        obj.index = this.index;
        obj.layoutPageIndex = this.layoutPageIndex;
        obj.pageOrdinal = this.pageOrdinal;
        obj.anchoredObjectHolder = this.anchoredObjectHolder.shallowCopy();
        obj.contentIntervals = list_1.ListUtils.shallowCopy(this.contentIntervals);
        obj.startPageSectionIndex = this.startPageSectionIndex;
        obj.copyFrom(this);
        return obj;
    };
    LayoutPage.prototype.markPageIntervalsAsIncorrect = function () {
        this.flags.set(LayoutPageFlags.IsIntervalsCorrect, false);
    };
    LayoutPage.prototype.getLayoutOtherPageAreasInfo = function () {
        var headerPageArea;
        var footerPageArea;
        var textBoxPageAreas = [];
        number_1.NumberMapUtils.forEach(this.otherPageAreas, function (pageArea) {
            if (pageArea.subDocument.isHeader())
                headerPageArea = pageArea;
            else if (pageArea.subDocument.isFooter())
                footerPageArea = pageArea;
            else if (pageArea.subDocument.isTextBox())
                textBoxPageAreas.push(pageArea);
        });
        return new LayoutOtherPageAreasInfo(headerPageArea, footerPageArea, textBoxPageAreas);
    };
    LayoutPage.prototype.calculateContentIntervals = function (anchorObjectsPositionInfo, isUseMoreHardAlgorithm) {
        var _this = this;
        if (!this.flags.get(LayoutPageFlags.IsIntervalsCorrect)) {
            var startPos = this.getPosition();
            if (isUseMoreHardAlgorithm)
                this.contentIntervals = ContentIntervalCollector.getNoneTidyIntervals(this.mainSubDocumentPageAreas, this.contentIntervals[0].start);
            else {
                this.contentIntervals = new ContentIntervalCollector(this.mainSubDocumentPageAreas, this.contentIntervals[0].start).getIntervals();
                this.flags.set(LayoutPageFlags.IsIntervalsCorrect, true);
            }
            number_1.NumberMapUtils.forEach(this.anchoredObjectHolder.objects, function (obj) {
                if (obj.belongsToSubDocId == sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID)
                    _this.contentIntervals.push(new fixed_1.FixedInterval(anchorObjectsPositionInfo.getPosition(obj.objectId), 1));
            });
            this.contentIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(this.contentIntervals, true);
            var diff = startPos - this.contentIntervals[0].start;
            if (diff > 0) {
                for (var _i = 0, _a = this.mainSubDocumentPageAreas; _i < _a.length; _i++) {
                    var pa = _a[_i];
                    pa.pageOffset = diff;
                }
            }
        }
    };
    LayoutPage.prototype.getContentIntervals = function () {
        return this.contentIntervals;
    };
    LayoutPage.getFirstPageInGroup = function (pages, pageIndex) {
        for (; pageIndex >= 0; pageIndex--) {
            var page = pages[pageIndex];
            var firstColumn = page.mainSubDocumentPageAreas[0].columns[0];
            if (!firstColumn.rows[0] || !firstColumn.rows[0].tableCellInfo)
                return page;
            var tblFirstRowCells = firstColumn.tablesInfo[0].tableRows[0].rowCells;
            var isAllCellsStartOnThisPage = true;
            for (var _i = 0, tblFirstRowCells_1 = tblFirstRowCells; _i < tblFirstRowCells_1.length; _i++) {
                var cell = tblFirstRowCells_1[_i];
                isAllCellsStartOnThisPage = isAllCellsStartOnThisPage && cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn);
            }
            if (isAllCellsStartOnThisPage)
                return page;
        }
        return pages[0];
    };
    LayoutPage.getLastValidPageInGroup = function (pages, pageIndex, validPageCount, checkValid, tryFindPage) {
        var prevPage = pages[pageIndex];
        for (; pageIndex < pages.length; pageIndex++) {
            var page = pages[pageIndex];
            if (checkValid && (!page.isValid || page.index >= validPageCount))
                return tryFindPage ? prevPage : null;
            var lastRow = list_1.ListUtils.last(list_1.ListUtils.last(list_1.ListUtils.last(page.mainSubDocumentPageAreas).columns).rows);
            if (!lastRow || !lastRow.tableCellInfo)
                return page;
            var cells = lastRow.tableCellInfo ? ContentIntervalCollector.getTopLevelTableRow(lastRow.tableCellInfo.parentRow).rowCells : [];
            var isAllCellsEndOnThisPage = true;
            for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
                var cell = cells_1[_i];
                isAllCellsEndOnThisPage = isAllCellsEndOnThisPage && cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn);
            }
            if (isAllCellsEndOnThisPage)
                return page;
            prevPage = pages[pageIndex];
        }
        return list_1.ListUtils.last(pages);
    };
    LayoutPage.prototype.getEndPosition = function () {
        return this.getPosition() + list_1.ListUtils.last(this.mainSubDocumentPageAreas).getEndPosition();
    };
    LayoutPage.getPrevPageLastPostion = function (manager, currPageIndex) {
        var pages = manager.layout.pages;
        var prevPage = pages[currPageIndex - 1];
        if (!prevPage)
            return 0;
        var modelPosition = prevPage.getEndPosition();
        var cell = manager.activeSubDocument.getParagraphByPosition(modelPosition).getTableCell();
        if (cell == null)
            return modelPosition;
        return cell.parentRow.parentTable.interval.start;
    };
    return LayoutPage;
}(rectangle_1.Rectangle));
exports.LayoutPage = LayoutPage;
var ContentIntervalCollector = (function () {
    function ContentIntervalCollector(mainSubDocumentPageAreas, startPagePos) {
        this.extendInfo = [];
        this.startPagePos = startPagePos;
        this.cellIterator = new CellIteratorPosition(mainSubDocumentPageAreas);
        this.intervals = [];
    }
    ContentIntervalCollector.getNoneTidyIntervals = function (mainSubDocumentPageAreas, startPagePos) {
        var intervals = [];
        for (var _i = 0, mainSubDocumentPageAreas_1 = mainSubDocumentPageAreas; _i < mainSubDocumentPageAreas_1.length; _i++) {
            var pageArea = mainSubDocumentPageAreas_1[_i];
            for (var _a = 0, _b = pageArea.columns; _a < _b.length; _a++) {
                var column = _b[_a];
                var partialOffset = startPagePos + pageArea.pageOffset + column.pageAreaOffset;
                for (var _c = 0, _d = column.rows; _c < _d.length; _c++) {
                    var row = _d[_c];
                    var lastBox = list_1.ListUtils.last(row.boxes);
                    intervals.push(new fixed_1.FixedInterval(partialOffset + row.columnOffset + row.boxes[0].rowOffset, lastBox.rowOffset + lastBox.getLength()));
                }
            }
        }
        return algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, false);
    };
    ContentIntervalCollector.prototype.startInterval = function (startPos) {
        if (this.intervals.length > 0) {
            var lastInterval = list_1.ListUtils.last(this.intervals);
            if (lastInterval.end == startPos) {
                this.currInterval = lastInterval;
                return;
            }
        }
        this.currInterval = new fixed_1.FixedInterval(startPos, 0);
        this.intervals.push(this.currInterval);
    };
    ContentIntervalCollector.prototype.extendInterval = function (toPos) {
        this.currInterval.length = Math.max(this.currInterval.length, toPos - this.currInterval.start);
    };
    ContentIntervalCollector.prototype.startExtend = function () {
        var flags = this.cellIterator.tableCell.boundFlags;
        this.extendInfo.push(new ExtendCellInfo(this.getPosition(ContentIntervalCollector.getCellLastRowEndPosition), this.cellIterator.tableColumn.logicInfo.grid.table.nestedLevel, !flags.get(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn) || !flags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn), this.cellIterator.tableCell, this.startPagePos + this.cellIterator.pageArea.pageOffset + this.cellIterator.column.pageAreaOffset));
    };
    ContentIntervalCollector.prototype.finishExtend = function (force) {
        var actualLevel = force ? 0 : this.cellIterator.tableColumn.logicInfo.grid.table.nestedLevel;
        while (this.currInterval && this.extendInfo.length > 0) {
            var info = this.extendInfo.pop();
            if (actualLevel <= info.level) {
                if (info.endOfCellPos >= 0)
                    this.extendInterval(info.endOfCellPos);
                if (info.isStartNewInterval)
                    this.currInterval = null;
            }
            else {
                this.extendInfo.push(info);
                break;
            }
        }
    };
    ContentIntervalCollector.prototype.getPosition = function (additionalInc) {
        var addInc = additionalInc(this.cellIterator);
        if (addInc == -1)
            return -1;
        return this.startPagePos + this.cellIterator.pageArea.pageOffset + this.cellIterator.column.pageAreaOffset + addInc;
    };
    ContentIntervalCollector.prototype.getIntervals = function () {
        this.startInterval(this.startPagePos);
        var firstCell = true;
        for (; this.cellIterator.moveNext(); firstCell = false) {
            var cell = this.cellIterator.tableCell;
            this.finishExtend(false);
            if (!this.currInterval)
                this.startInterval(this.getPosition(ContentIntervalCollector.getCellFirstRowStartPos));
            if (firstCell)
                this.extendInterval(this.getPosition(ContentIntervalCollector.getCellFirstRowStartPos));
            if (!firstCell && !cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn))
                this.startInterval(this.getPosition(ContentIntervalCollector.getCellFirstRowStartPos));
            this.startExtend();
        }
        this.finishExtend(true);
        this.handleLastExtends();
        var lastPos = this.startPagePos + list_1.ListUtils.last(this.cellIterator.pageAreas).getEndPosition();
        if (this.currInterval)
            this.extendInterval(lastPos);
        else
            this.addAdditionalInterval(lastPos);
        return algorithms_1.IntervalAlgorithms.getMergedIntervals(this.intervals, true);
    };
    ContentIntervalCollector.prototype.handleLastExtends = function () {
        if (this.extendInfo[0]) {
            var _loop_1 = function (info) {
                var firstLayoutRow = info.cell.internalTables[info.cell.layoutRows.length] ? null :
                    list_1.ListUtils.reverseElementBy(info.cell.layoutRows, function (_layoutRow, rowIndex) { return !!info.cell.internalTables[rowIndex] || rowIndex == 0; });
                if (firstLayoutRow) {
                    this_1.startInterval(info.columnOffsetPos + firstLayoutRow.getStartPosition());
                    this_1.extendInterval(info.endOfCellPos);
                }
            };
            var this_1 = this;
            for (var info = void 0; info = this.extendInfo.pop();) {
                _loop_1(info);
            }
            this.currInterval = null;
        }
    };
    ContentIntervalCollector.prototype.addAdditionalInterval = function (lastPos) {
        var pageArea = list_1.ListUtils.last(this.cellIterator.pageAreas);
        var column = list_1.ListUtils.last(pageArea.columns);
        var lastTableInfo = list_1.ListUtils.last(column.tablesInfo);
        if (!lastTableInfo)
            return;
        var row = list_1.ListUtils.last(list_1.ListUtils.last(lastTableInfo.getTopLevelColumn().tableRows).rowCells)
            .getLastLayoutRowIncludingInternalTables();
        var rowAfterTable = column.rows[row.indexInColumn + 1];
        if (!rowAfterTable)
            return;
        this.intervals.push(fixed_1.FixedInterval.fromPositions(this.startPagePos + pageArea.pageOffset + column.pageAreaOffset + rowAfterTable.getStartPosition(), lastPos));
    };
    ContentIntervalCollector.getCellLastRowEndPosition = function (cellIterator) {
        var lastRow = list_1.ListUtils.last(cellIterator.tableCell.layoutRows);
        return lastRow ? lastRow.getEndPosition() : -1;
    };
    ContentIntervalCollector.getCellFirstRowStartPos = function (cellIterator) {
        return cellIterator.tableCell.getFirstLayoutRowByModelPositionIncludingInternalTables().getStartPosition();
    };
    ContentIntervalCollector.getTopLevelTableRow = function (tableRow) {
        while (tableRow.parentTable.logicInfo.grid.table.nestedLevel > 0)
            tableRow = tableRow.parentTable.parentCell.parentRow;
        return tableRow;
    };
    return ContentIntervalCollector;
}());
var ExtendCellInfo = (function () {
    function ExtendCellInfo(pos, level, isStartNewInterval, cell, columnOffsetPos) {
        this.endOfCellPos = pos;
        this.level = level;
        this.isStartNewInterval = isStartNewInterval;
        this.cell = cell;
        this.columnOffsetPos = columnOffsetPos;
    }
    return ExtendCellInfo;
}());
var CellIteratorPosition = (function () {
    function CellIteratorPosition(pageAreas) {
        this.pageAreaIndex = -1;
        this.tableIndexes = [];
        this.tableRowIndexes = [];
        this.tableCellIndexes = [];
        this.tableCellInternalTableIndexes = [];
        this.currLevel = 0;
        this.isInit = false;
        this.pageAreas = pageAreas;
    }
    CellIteratorPosition.prototype.moveNext = function () {
        if (!this.isInit) {
            this.isInit = true;
            return this.init();
        }
        return this.moveToNextTableCell();
    };
    CellIteratorPosition.prototype.init = function () {
        this.pageAreaIndex = 0;
        this.pageArea = this.pageAreas[0];
        this.columnIndex = -1;
        if (this.moveToNextColumnWithTable()) {
            this.initTopTableProperties(0);
            return true;
        }
        return false;
    };
    CellIteratorPosition.prototype.initTopTableProperties = function (tblIndexInColumn) {
        this.tableIndexes = [tblIndexInColumn, -1];
        this.tableColumn = this.column.tablesInfo[tblIndexInColumn];
        this.tableRowIndexes = [0];
        this.setTableRow(0);
        this.tableCellIndexes = [0];
        this.tableCell = this.tableRowCells[0];
        this.tableCellInternalTableIndexes = [];
        this.collectInternalTableIndexes();
    };
    CellIteratorPosition.prototype.moveToNextColumnWithTable = function () {
        if (this.column = this.pageArea.columns[++this.columnIndex])
            return this.column.tablesInfo.length > 0 ? true : this.moveToNextColumnWithTable();
        if (this.pageArea = this.pageAreas[++this.pageAreaIndex]) {
            this.columnIndex = -1;
            return this.moveToNextColumnWithTable();
        }
        return false;
    };
    CellIteratorPosition.prototype.moveToNextTableCell = function () {
        if (this.goToInternalTable() || this.goToNextTableCell() || this.goToNextTableRow())
            return true;
        return this.currLevel == 0 ? this.goToNextTopLevelTable() : this.goToTopLevel();
    };
    CellIteratorPosition.prototype.goToInternalTable = function () {
        var newInternalTblIndex = list_1.ListUtils.incLast(this.tableIndexes);
        var currLevelInternalTblIndexes = this.tableCellInternalTableIndexes[this.currLevel];
        if (newInternalTblIndex >= currLevelInternalTblIndexes.length)
            return false;
        this.tableColumn = this.tableCell.internalTables[currLevelInternalTblIndexes[newInternalTblIndex]];
        this.tableRowIndexes.push(0);
        this.setTableRow(0);
        this.tableCellIndexes.push(0);
        this.tableCell = this.tableRowCells[0];
        this.currLevel++;
        this.collectInternalTableIndexes();
        this.tableIndexes.push(-1);
        return true;
    };
    CellIteratorPosition.prototype.goToNextTableCell = function () {
        var nextCellIndex = list_1.ListUtils.incLast(this.tableCellIndexes);
        if (nextCellIndex >= this.tableRowCells.length)
            return false;
        this.tableCell = this.tableRowCells[nextCellIndex];
        this.tableCellInternalTableIndexes.pop();
        this.collectInternalTableIndexes();
        list_1.ListUtils.setLast(this.tableIndexes, -1);
        return true;
    };
    CellIteratorPosition.prototype.goToNextTableRow = function () {
        var nextRowIndex = list_1.ListUtils.incLast(this.tableRowIndexes);
        if (nextRowIndex >= this.tableColumn.tableRows.length)
            return false;
        this.setTableRow(nextRowIndex);
        list_1.ListUtils.setLast(this.tableCellIndexes, -1);
        return this.goToNextTableCell();
    };
    CellIteratorPosition.prototype.goToNextTopLevelTable = function () {
        this.tableIndexes[0] = this.getNextTopLevelTableIndexInThisColumn();
        if (this.tableIndexes[0] >= 0) {
            this.initTopTableProperties(this.tableIndexes[0]);
            return true;
        }
        if (!this.moveToNextColumnWithTable())
            return false;
        this.initTopTableProperties(0);
        return true;
    };
    CellIteratorPosition.prototype.goToTopLevel = function () {
        this.tableCellInternalTableIndexes.pop();
        this.tableCellIndexes.pop();
        this.tableRowIndexes.pop();
        this.tableIndexes.pop();
        this.currLevel--;
        this.tableCell = this.tableColumn.parentCell;
        this.tableRow = this.tableCell.parentRow;
        this.tableRowCells = this.getTableRowCells();
        this.tableColumn = this.tableRow.parentTable;
        return this.moveToNextTableCell();
    };
    CellIteratorPosition.prototype.getNextTopLevelTableIndexInThisColumn = function () {
        var tbls = this.column.tablesInfo;
        for (var tblIndex = this.tableIndexes[0] + 1; tblIndex < tbls.length; tblIndex++) {
            if (tbls[tblIndex].logicInfo.grid.table.nestedLevel == 0)
                return tblIndex;
        }
        return -1;
    };
    CellIteratorPosition.prototype.collectInternalTableIndexes = function () {
        var list = [];
        var intervalTables = this.tableCell.internalTables;
        for (var key in intervalTables) {
            if (!Object.prototype.hasOwnProperty.call(intervalTables, key))
                continue;
            list.push(parseInt(key));
        }
        list.sort(comparers_1.Comparers.number);
        this.tableCellInternalTableIndexes.push(list);
    };
    CellIteratorPosition.prototype.setTableRow = function (index) {
        this.tableRow = this.tableColumn.tableRows[index];
        this.tableRowCells = this.getTableRowCells();
    };
    CellIteratorPosition.prototype.getTableRowCells = function () {
        return list_1.ListUtils.shallowCopy(this.tableRow.rowCells).sort(function (a, b) {
            return a.getFirstLayoutRowByModelPositionIncludingInternalTables().getStartPosition() -
                b.getFirstLayoutRowByModelPositionIncludingInternalTables().getStartPosition();
        });
    };
    return CellIteratorPosition;
}());
