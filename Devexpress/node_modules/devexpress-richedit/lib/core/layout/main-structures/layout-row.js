"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var LayoutRowStateFlags;
(function (LayoutRowStateFlags) {
    LayoutRowStateFlags[LayoutRowStateFlags["NormallyEnd"] = 0] = "NormallyEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["ParagraphEnd"] = 1] = "ParagraphEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["PageEnd"] = 2] = "PageEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["ColumnEnd"] = 4] = "ColumnEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["SectionEnd"] = 8] = "SectionEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["DocumentEnd"] = 16] = "DocumentEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["CellTableEnd"] = 64] = "CellTableEnd";
    LayoutRowStateFlags[LayoutRowStateFlags["PageBreakBefore"] = 128] = "PageBreakBefore";
})(LayoutRowStateFlags = exports.LayoutRowStateFlags || (exports.LayoutRowStateFlags = {}));
var LayoutRow = (function (_super) {
    tslib_1.__extends(LayoutRow, _super);
    function LayoutRow(minY) {
        if (minY === void 0) { minY = Number.MAX_SAFE_INTEGER; }
        var _this = _super.call(this, 0, 0, 0, 0) || this;
        _this.boxes = [];
        _this.bookmarkBoxes = [];
        _this.numberingListBox = null;
        _this.flags = new flag_1.Flag(LayoutRowStateFlags.NormallyEnd);
        _this.initialY = minY;
        return _this;
    }
    Object.defineProperty(LayoutRow.prototype, "hasEffectToPageHeight", {
        get: function () { return this.boxes.length != 1 || !this.boxes[0].isSectionBreakBox; },
        enumerable: true,
        configurable: true
    });
    LayoutRow.prototype.getEndPosition = function () {
        return this.columnOffset + this.getLastBoxEndPositionInRow();
    };
    LayoutRow.prototype.getLastBoxEndPositionInRow = function () {
        return list_1.ListUtils.last(this.boxes).getEndPosition();
    };
    LayoutRow.prototype.getStartPosition = function () {
        return this.columnOffset + this.boxes[0].rowOffset;
    };
    LayoutRow.prototype.getLastBox = function () {
        return list_1.ListUtils.last(this.boxes);
    };
    LayoutRow.prototype.isEmpty = function () {
        return this.boxes.length == 0;
    };
    LayoutRow.prototype.increaseRowHeightFromSpacingBeforeAndAfter = function (maxAscent, maxDescent) {
        var lastBox = this.getLastBox();
        if (!lastBox)
            return;
        var ascentOverflow = maxAscent - this.baseLine + this.spacingBefore;
        if (ascentOverflow > 0)
            this.spacingBefore -= Math.min(this.spacingBefore, ascentOverflow);
        var descentOverflow = maxDescent + this.baseLine - this.height;
        if (descentOverflow > 0)
            this.spacingAfter -= Math.min(this.spacingAfter, descentOverflow);
    };
    LayoutRow.prototype.applySpacingBefore = function (value) {
        this.rollbackSpacingBefore();
        this.spacingBefore = value;
        this.height += this.getSpacingBefore();
        this.baseLine += this.getSpacingBefore();
    };
    LayoutRow.prototype.rollbackSpacingBefore = function () {
        this.height = this.height - this.getSpacingBefore();
        this.baseLine = this.baseLine - this.getSpacingBefore();
        this.spacingBefore = 0;
    };
    LayoutRow.prototype.applySpacingAfter = function (value) {
        this.rollbackSpacingAfter();
        this.spacingAfter = value;
        this.height += this.getSpacingAfter();
    };
    LayoutRow.prototype.rollbackSpacingAfter = function () {
        this.height = Math.max(0, this.height - this.getSpacingAfter());
        this.spacingAfter = 0;
    };
    LayoutRow.prototype.getSpacingBefore = function () {
        return this.spacingBefore || 0;
    };
    LayoutRow.prototype.getSpacingAfter = function () {
        return this.spacingAfter || 0;
    };
    LayoutRow.prototype.getLastVisibleBox = function () {
        var index = this.getLastVisibleBoxIndex();
        return index >= 0 ? this.boxes[index] : null;
    };
    LayoutRow.prototype.getLastVisibleBoxIndex = function () {
        for (var lastBoxIndexInRow = this.boxes.length - 1, box; box = this.boxes[lastBoxIndexInRow]; lastBoxIndexInRow--)
            if (box.isVisible())
                return lastBoxIndexInRow;
        return -1;
    };
    LayoutRow.getParagraphSpacingBefore = function (paragraph, prevParagraph, isFirstRowInCell, isFirstCellInRow, isFirstRowInTable) {
        var parProps = paragraph.getParagraphMergedProperties();
        var spacingBefore = Math.abs(unit_converter_1.UnitConverter.twipsToPixelsF(parProps.spacingBefore));
        if (!spacingBefore || !prevParagraph)
            return spacingBefore;
        if (isFirstRowInCell && isFirstCellInRow && !isFirstRowInTable)
            return spacingBefore;
        if (parProps.contextualSpacing && paragraph.paragraphStyle.styleName == prevParagraph.paragraphStyle.styleName)
            return 0;
        if (isFirstRowInCell) {
            return spacingBefore;
        }
        else {
            var prevParProps = prevParagraph.getParagraphMergedProperties();
            var prevParSpacingAfter = unit_converter_1.UnitConverter.twipsToPixelsF(prevParProps.spacingAfter);
            return prevParSpacingAfter >= spacingBefore ? 0 : Math.abs(spacingBefore - prevParSpacingAfter);
        }
    };
    LayoutRow.getParagraphSpacingAfter = function (paragraph, nextParagraph) {
        var parProps = paragraph.getParagraphMergedProperties();
        var spacingAfter = Math.abs(unit_converter_1.UnitConverter.twipsToPixelsF(parProps.spacingAfter));
        if (!spacingAfter || !nextParagraph)
            return spacingAfter;
        return (parProps.contextualSpacing && paragraph.paragraphStyle.styleName == nextParagraph.paragraphStyle.styleName) ? 0 : spacingAfter;
    };
    LayoutRow.prototype.applyXOffsetToBoxes = function (offset) {
        for (var _i = 0, _a = this.boxes; _i < _a.length; _i++) {
            var box = _a[_i];
            box.x += offset;
        }
        if (this.numberingListBox) {
            this.numberingListBox.textBox.x += offset;
            if (this.numberingListBox.separatorBox)
                this.numberingListBox.separatorBox.x += offset;
        }
    };
    LayoutRow.prototype.getLastBoxIndexWhatCanStrikeoutAndUnderline = function () {
        var lastBoxIndexWhatCanStrikeoutAndUnderline = this.boxes.length - 1;
        for (var box = void 0; box = this.boxes[lastBoxIndexWhatCanStrikeoutAndUnderline]; lastBoxIndexWhatCanStrikeoutAndUnderline--)
            if (!box.renderNoStrikeoutAndNoUnderlineIfBoxInEndRow())
                break;
        return lastBoxIndexWhatCanStrikeoutAndUnderline;
    };
    return LayoutRow;
}(rectangle_1.Rectangle));
exports.LayoutRow = LayoutRow;
var LayoutRowWithIndex = (function (_super) {
    tslib_1.__extends(LayoutRowWithIndex, _super);
    function LayoutRowWithIndex() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return LayoutRowWithIndex;
}(LayoutRow));
exports.LayoutRowWithIndex = LayoutRowWithIndex;
