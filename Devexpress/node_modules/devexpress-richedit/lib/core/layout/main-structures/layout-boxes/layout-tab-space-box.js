"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/string");
var measure_info_1 = require("../../../measurer/measure-info");
var layout_character_properties_color_info_1 = require("../../../model/character/layout-character-properties-color-info");
var rich_utils_1 = require("../../../model/rich-utils");
var layout_box_1 = require("./layout-box");
var TabLeaderType;
(function (TabLeaderType) {
    TabLeaderType[TabLeaderType["None"] = 0] = "None";
    TabLeaderType[TabLeaderType["Dots"] = 1] = "Dots";
    TabLeaderType[TabLeaderType["MiddleDots"] = 2] = "MiddleDots";
    TabLeaderType[TabLeaderType["Hyphens"] = 3] = "Hyphens";
    TabLeaderType[TabLeaderType["Underline"] = 4] = "Underline";
    TabLeaderType[TabLeaderType["ThickLine"] = 5] = "ThickLine";
    TabLeaderType[TabLeaderType["EqualSign"] = 6] = "EqualSign";
})(TabLeaderType = exports.TabLeaderType || (exports.TabLeaderType = {}));
var LayoutTabSpaceBox = (function (_super) {
    tslib_1.__extends(LayoutTabSpaceBox, _super);
    function LayoutTabSpaceBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutTabSpaceBox.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.spaceWidth == obj.spaceWidth &&
            this.hiddenTabWidth == obj.hiddenTabWidth &&
            this.tabLeaderSymbol == obj.tabLeaderSymbol;
    };
    LayoutTabSpaceBox.prototype.clone = function () {
        var newObj = new LayoutTabSpaceBox(this.characterProperties, this.colorInfo);
        newObj.copyFrom(this);
        return newObj;
    };
    LayoutTabSpaceBox.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.spaceWidth = obj.spaceWidth;
        this.hiddenTabWidth = obj.hiddenTabWidth;
        this.tabLeaderSymbol = obj.tabLeaderSymbol;
    };
    LayoutTabSpaceBox.prototype.setTabParams = function (tabLeaderSymbol, spaceWidth, hiddenTabWidth) {
        this.tabLeaderSymbol = tabLeaderSymbol;
        this.spaceWidth = spaceWidth;
        this.hiddenTabWidth = hiddenTabWidth;
    };
    LayoutTabSpaceBox.prototype.getType = function () {
        return layout_box_1.LayoutBoxType.TabSpace;
    };
    LayoutTabSpaceBox.prototype.pushInfoForMeasure = function (_info, _showHiddenSymbols) {
        throw new Error(errors_1.Errors.InternalException);
    };
    LayoutTabSpaceBox.prototype.popInfoForMeasure = function (_info, _showHiddenSymbols) {
        throw new Error(errors_1.Errors.InternalException);
    };
    LayoutTabSpaceBox.prototype.isVisible = function () {
        return true;
    };
    LayoutTabSpaceBox.prototype.renderGetContent = function (_renderer) {
        if (this.hiddenTabWidth == 0) {
            var numNbsps = Math.ceil(this.width / Math.max(1, this.spaceWidth));
            return string_1.StringUtils.repeat(this.tabLeaderSymbol, numNbsps);
        }
        var nbspsSpace = this.width - this.hiddenTabWidth;
        var nbspsSpaceLeftPart = nbspsSpace < 0 ? 0 : nbspsSpace / 2;
        var numNbspsLeftPart = Math.floor(nbspsSpaceLeftPart / Math.max(1, this.spaceWidth));
        var nbspsSpaceRightPart = this.width - (numNbspsLeftPart * this.spaceWidth + this.hiddenTabWidth);
        var numNbspsRightPart = nbspsSpaceRightPart < 0 ? 0 : Math.ceil(nbspsSpaceRightPart / Math.max(1, this.spaceWidth));
        return string_1.StringUtils.repeat(this.tabLeaderSymbol, numNbspsLeftPart) + rich_utils_1.RichUtils.specialCharacters.HiddenTabSpace +
            string_1.StringUtils.repeat(this.tabLeaderSymbol, numNbspsRightPart);
    };
    LayoutTabSpaceBox.prototype.renderGetCharacterProperties = function () {
        if (this.characterProperties.fontBold || this.characterProperties.fontItalic || this.colorInfo.textColor) {
            var renderCharProps = this.characterProperties.clone();
            renderCharProps.linkMeasurerSizes(this.characterProperties);
            renderCharProps.fontBold = false;
            renderCharProps.fontItalic = false;
            var colorInfo = new layout_character_properties_color_info_1.LayoutCharacterPropertiesColorInfo(this.colorInfo.textColor ? 0 : this.colorInfo.textColor, this.colorInfo.foregroundColor, this.colorInfo.textColor && !this.colorInfo.strikeoutColor ? this.colorInfo.textColor : this.colorInfo.strikeoutColor, this.colorInfo.textColor && !this.colorInfo.underlineColor ? this.colorInfo.textColor : this.colorInfo.underlineColor);
            return new layout_box_1.LayoutRenderCharacterProperties(renderCharProps, colorInfo);
        }
        else
            return new layout_box_1.LayoutRenderCharacterProperties(this.characterProperties, this.colorInfo);
    };
    LayoutTabSpaceBox.prototype.isWhitespace = function () {
        return true;
    };
    LayoutTabSpaceBox.prototype.isLineBreak = function () {
        return false;
    };
    return LayoutTabSpaceBox;
}(layout_box_1.LayoutBox));
exports.LayoutTabSpaceBox = LayoutTabSpaceBox;
var LayoutTabSpaceBoxJustForBoxIterator = (function (_super) {
    tslib_1.__extends(LayoutTabSpaceBoxJustForBoxIterator, _super);
    function LayoutTabSpaceBoxJustForBoxIterator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutTabSpaceBoxJustForBoxIterator.getTabLeaderMap = function () {
        var _a;
        var tabLeaderMap = (_a = {},
            _a[TabLeaderType.None] = "&nbsp;",
            _a[TabLeaderType.Dots] = rich_utils_1.RichUtils.specialCharacters.Dot,
            _a[TabLeaderType.EqualSign] = rich_utils_1.RichUtils.specialCharacters.EqualSign,
            _a[TabLeaderType.Hyphens] = rich_utils_1.RichUtils.specialCharacters.Hyphen,
            _a[TabLeaderType.MiddleDots] = rich_utils_1.RichUtils.specialCharacters.MiddleDot,
            _a[TabLeaderType.ThickLine] = rich_utils_1.RichUtils.specialCharacters.Underscore,
            _a[TabLeaderType.Underline] = rich_utils_1.RichUtils.specialCharacters.Underscore,
            _a);
        LayoutTabSpaceBoxJustForBoxIterator.tabLeaderSymbolList = [];
        LayoutTabSpaceBoxJustForBoxIterator.tabLeaderTypeList = [];
        number_1.NumberMapUtils.forEach(tabLeaderMap, function (symbol, type) {
            LayoutTabSpaceBoxJustForBoxIterator.tabLeaderSymbolList.push(symbol);
            LayoutTabSpaceBoxJustForBoxIterator.tabLeaderTypeList.push(type);
        });
        return tabLeaderMap;
    };
    LayoutTabSpaceBoxJustForBoxIterator.prototype.getLayoutTabBox = function (tabLeaderType) {
        var leaderMeasureInfo = this.leadersMeasureInfo[tabLeaderType];
        var newTabBox = this.clone();
        newTabBox.setTabParams(LayoutTabSpaceBoxJustForBoxIterator.tabLeaderMap[tabLeaderType], leaderMeasureInfo.resultSize.width, this.showHiddenSymbols ? this.hiddenTabMeasureInfo.resultSize.width : 0);
        newTabBox.height = leaderMeasureInfo.resultSize.height;
        return newTabBox;
    };
    LayoutTabSpaceBoxJustForBoxIterator.prototype.pushInfoForMeasure = function (info, _showHiddenSymbols) {
        var props = this.renderGetCharacterProperties();
        var charProps = props.initProps;
        list_1.ListUtils.forEach(LayoutTabSpaceBoxJustForBoxIterator.tabLeaderSymbolList, function (symbol) { return info.push(new measure_info_1.MeasureInfoNonText(symbol, charProps)); });
        info.push(new measure_info_1.MeasureInfoNonText(rich_utils_1.RichUtils.specialCharacters.HiddenTabSpace, charProps));
    };
    LayoutTabSpaceBoxJustForBoxIterator.prototype.popInfoForMeasure = function (info, showHiddenSymbols) {
        var _this = this;
        this.leadersMeasureInfo = {};
        this.hiddenTabMeasureInfo = info.pop();
        list_1.ListUtils.reverseForEach(LayoutTabSpaceBoxJustForBoxIterator.tabLeaderTypeList, function (type) { return _this.leadersMeasureInfo[type] = info.pop(); });
        this.showHiddenSymbols = showHiddenSymbols;
    };
    LayoutTabSpaceBoxJustForBoxIterator.tabLeaderMap = LayoutTabSpaceBoxJustForBoxIterator.getTabLeaderMap();
    return LayoutTabSpaceBoxJustForBoxIterator;
}(LayoutTabSpaceBox));
exports.LayoutTabSpaceBoxJustForBoxIterator = LayoutTabSpaceBoxJustForBoxIterator;
