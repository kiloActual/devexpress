"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var polygon_1 = require("@devexpress/utils/lib/geometry/polygon");
var layout_box_1 = require("./layout-box");
var AnchoredObjectLevelType;
(function (AnchoredObjectLevelType) {
    AnchoredObjectLevelType[AnchoredObjectLevelType["BehindText"] = 0] = "BehindText";
    AnchoredObjectLevelType[AnchoredObjectLevelType["InText"] = 1] = "InText";
    AnchoredObjectLevelType[AnchoredObjectLevelType["BeforeText"] = 2] = "BeforeText";
})(AnchoredObjectLevelType = exports.AnchoredObjectLevelType || (exports.AnchoredObjectLevelType = {}));
var LayoutAnchoredObjectBox = (function (_super) {
    tslib_1.__extends(LayoutAnchoredObjectBox, _super);
    function LayoutAnchoredObjectBox(characterProperties, colorInfo, belongsToSubDocId, anchorInfo, shape, objectId, rotationInRadians) {
        var _this = _super.call(this, characterProperties, colorInfo) || this;
        _this.yShift = 0;
        _this.belongsToSubDocId = belongsToSubDocId;
        _this.anchorInfo = anchorInfo;
        _this.shape = shape;
        _this.objectId = objectId;
        _this.rotationInRadians = rotationInRadians;
        return _this;
    }
    LayoutAnchoredObjectBox.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.anchorInfo.equals(obj.anchorInfo) &&
            this.shape.equals(obj.shape) &&
            this.rotationInRadians == obj.rotationInRadians &&
            this.belongsToSubDocId == obj.belongsToSubDocId &&
            this.objectId == obj.objectId;
    };
    LayoutAnchoredObjectBox.prototype.isInText = function () {
        return this.levelType == AnchoredObjectLevelType.InText;
    };
    Object.defineProperty(LayoutAnchoredObjectBox.prototype, "levelType", {
        get: function () {
            return this.anchorInfo.levelType;
        },
        enumerable: true,
        configurable: true
    });
    LayoutAnchoredObjectBox.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.belongsToSubDocId = obj.belongsToSubDocId;
        this.rotationInRadians = obj.rotationInRadians;
        this.anchorInfo = obj.anchorInfo;
        this.shape = obj.shape;
        this.objectId = obj.objectId;
    };
    LayoutAnchoredObjectBox.prototype.getContentBounds = function () {
        var bounds = this.createRectangle();
        var outlineWidth = this.shape.outlineWidth;
        bounds.x += outlineWidth / 2;
        bounds.y += outlineWidth / 2;
        bounds.width -= outlineWidth;
        bounds.height -= outlineWidth;
        return bounds;
    };
    LayoutAnchoredObjectBox.prototype.getExtendedBounds = function () {
        var bounds = this.createRectangle();
        var outlineWidth = this.shape.outlineWidth;
        bounds.x -= outlineWidth / 2;
        bounds.y -= outlineWidth / 2;
        bounds.width += outlineWidth;
        bounds.height += outlineWidth;
        return bounds;
    };
    LayoutAnchoredObjectBox.prototype.setContentSize = function (size) {
        var outlineWidth = this.shape.outlineWidth;
        this.width = size.width + outlineWidth;
        this.height = size.height + outlineWidth;
    };
    LayoutAnchoredObjectBox.prototype.pushInfoForMeasure = function (_info, _showHiddenSymbols) { };
    LayoutAnchoredObjectBox.prototype.popInfoForMeasure = function (_info, _showHiddenSymbols) { };
    LayoutAnchoredObjectBox.prototype.isWhitespace = function () {
        return true;
    };
    LayoutAnchoredObjectBox.prototype.isLineBreak = function () {
        return false;
    };
    LayoutAnchoredObjectBox.prototype.getRotatedPolygon = function () {
        var center = this.center;
        var polygon = polygon_1.Polygon.fromRectangle(this);
        return this.rotationInRadians != 0 ? polygon.rotateAround(center, this.rotationInRadians, false, true) : polygon;
    };
    LayoutAnchoredObjectBox.prototype.getOuterBounds = function (applyMargins) {
        var polygon = this.getRotatedPolygon();
        return applyMargins ? polygon.bounds.applyOffsetsOutside(this.anchorInfo.getDistanceMargins()) : polygon.bounds;
    };
    return LayoutAnchoredObjectBox;
}(layout_box_1.LayoutBox));
exports.LayoutAnchoredObjectBox = LayoutAnchoredObjectBox;
