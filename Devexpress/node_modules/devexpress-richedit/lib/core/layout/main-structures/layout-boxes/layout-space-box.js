"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var string_1 = require("@devexpress/utils/lib/utils/string");
var measure_info_1 = require("../../../measurer/measure-info");
var rich_utils_1 = require("../../../model/rich-utils");
var layout_box_1 = require("./layout-box");
var LayoutSpaceBox = (function (_super) {
    tslib_1.__extends(LayoutSpaceBox, _super);
    function LayoutSpaceBox() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutSpaceBox.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.spaceWidth == obj.spaceWidth &&
            this.hiddenSpaceWidth == obj.hiddenSpaceWidth;
    };
    LayoutSpaceBox.prototype.clone = function () {
        var newObj = new LayoutSpaceBox(this.characterProperties, this.colorInfo);
        newObj.copyFrom(this);
        return newObj;
    };
    LayoutSpaceBox.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.spaceWidth = obj.spaceWidth;
        this.hiddenSpaceWidth = obj.hiddenSpaceWidth;
    };
    LayoutSpaceBox.prototype.getType = function () {
        return layout_box_1.LayoutBoxType.Space;
    };
    LayoutSpaceBox.prototype.pushInfoForMeasure = function (info, showHiddenSymbols) {
        info.push(new measure_info_1.MeasureInfoNonText("&nbsp;", this.characterProperties));
        if (showHiddenSymbols)
            info.push(new measure_info_1.MeasureInfoNonText(rich_utils_1.RichUtils.specialCharacters.HiddenSpace, this.characterProperties));
    };
    LayoutSpaceBox.prototype.popInfoForMeasure = function (info, showHiddenSymbols) {
        this.hiddenSpaceWidth = showHiddenSymbols ? info.pop().resultSize.width : 0;
        var elem = info.pop();
        this.setSize(elem.resultSize);
        this.spaceWidth = elem.resultSize.width;
    };
    LayoutSpaceBox.prototype.isVisible = function () {
        return true;
    };
    LayoutSpaceBox.prototype.renderGetContent = function (_renderer) {
        var numNbsps = Math.ceil((this.width - this.hiddenSpaceWidth) / Math.max(1, this.spaceWidth));
        return (this.hiddenSpaceWidth > 0 ? rich_utils_1.RichUtils.specialCharacters.HiddenSpace : "") +
            string_1.StringUtils.repeat("&nbsp;", numNbsps);
    };
    LayoutSpaceBox.prototype.renderNoStrikeoutAndNoUnderlineIfBoxInEndRow = function () {
        return true;
    };
    LayoutSpaceBox.prototype.isWhitespace = function () {
        return true;
    };
    LayoutSpaceBox.prototype.isLineBreak = function () {
        return false;
    };
    return LayoutSpaceBox;
}(layout_box_1.LayoutBox));
exports.LayoutSpaceBox = LayoutSpaceBox;
