"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var encode_1 = require("@devexpress/utils/lib/utils/encode");
var box_wrap_1 = require("../../../layout-formatter/box/box-wrap");
var measure_info_1 = require("../../../measurer/measure-info");
var layout_box_1 = require("./layout-box");
var LayoutTextBox = (function (_super) {
    tslib_1.__extends(LayoutTextBox, _super);
    function LayoutTextBox(characterProperties, colorInfo, text) {
        var _this = _super.call(this, characterProperties, colorInfo) || this;
        _this.text = text;
        return _this;
    }
    LayoutTextBox.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.text == obj.text;
    };
    LayoutTextBox.prototype.clone = function () {
        var newObj = new LayoutTextBox(this.characterProperties, this.colorInfo, this.text);
        newObj.copyFrom(this);
        return newObj;
    };
    LayoutTextBox.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.text = obj.text;
    };
    LayoutTextBox.prototype.getType = function () {
        return layout_box_1.LayoutBoxType.Text;
    };
    LayoutTextBox.prototype.pushInfoForMeasure = function (info, _showHiddenSymbols) {
        info.push(new measure_info_1.MeasureInfoText(this.text, this.characterProperties));
    };
    LayoutTextBox.prototype.popInfoForMeasure = function (info, _showHiddenSymbols) {
        this.setSize(info.pop().resultSize);
    };
    LayoutTextBox.prototype.isVisible = function () {
        return true;
    };
    LayoutTextBox.prototype.isVisibleForRowAlign = function () {
        return true;
    };
    LayoutTextBox.prototype.getLength = function () {
        return this.text.length;
    };
    LayoutTextBox.prototype.getCharOffsetXInPixels = function (measurer, charOffset) {
        if (charOffset == 0)
            return 0;
        else if (charOffset === this.getLength())
            return this.width;
        else {
            var info = new measure_info_1.MeasureInfoText(this.text.substr(0, charOffset), this.characterProperties);
            measurer.measure([info]);
            return info.resultSize.width;
        }
    };
    LayoutTextBox.prototype.calculateCharOffsetByPointX = function (measurer, pointX) {
        var boxRanges = this.getBoxRanges(measurer);
        var boxRangesLength = boxRanges.length;
        for (var i = 0; i < boxRangesLength; i++) {
            if (boxRanges[i].resultSize.width > pointX) {
                var letterWidth = i > 0 ?
                    boxRanges[i].resultSize.width - boxRanges[i - 1].resultSize.width :
                    boxRanges[0].resultSize.width;
                var clickPointOffset = pointX - (i > 0 ? boxRanges[i - 1].resultSize.width : 0);
                if (clickPointOffset / letterWidth > 0.6)
                    i++;
                break;
            }
        }
        return i;
    };
    LayoutTextBox.prototype.splitByWidth = function (measurer, maxWidth, leaveAtLeastOneChar) {
        if (this.getLength() == 1)
            return _super.prototype.splitByWidth.call(this, measurer, maxWidth, leaveAtLeastOneChar);
        var boxRanges = this.getBoxRanges(measurer);
        for (var i = boxRanges.length - 1, info = void 0; info = boxRanges[i]; i--)
            if (info.resultSize.width <= maxWidth || i == 0 && leaveAtLeastOneChar) {
                var newBox = this.clone();
                newBox.text = newBox.text.substr(0, info.text.length);
                layout_box_1.LayoutBox.initializeWithMeasurer([new box_wrap_1.BoxWrap(newBox, null)], measurer, false);
                return newBox;
            }
        return null;
    };
    LayoutTextBox.prototype.splitBoxByPosition = function (measurer, offsetAtStartBox) {
        var nextBox = this.clone();
        nextBox.text = nextBox.text.substr(offsetAtStartBox);
        this.text = this.text.substr(0, offsetAtStartBox);
        nextBox.rowOffset = this.getEndPosition();
        layout_box_1.LayoutBox.initializeWithMeasurer([new box_wrap_1.BoxWrap(this, null), new box_wrap_1.BoxWrap(nextBox, null)], measurer, false);
        return nextBox;
    };
    LayoutTextBox.prototype.getCharIndex = function (char) {
        return this.text.indexOf(char);
    };
    LayoutTextBox.prototype.renderGetContent = function (_renderer) {
        return encode_1.EncodeUtils.encodeHtml(this.text);
    };
    LayoutTextBox.prototype.renderIsWordBox = function () {
        return true;
    };
    LayoutTextBox.prototype.isWhitespace = function () {
        return false;
    };
    LayoutTextBox.prototype.isLineBreak = function () {
        return false;
    };
    LayoutTextBox.prototype.getBoxRanges = function (measurer) {
        var measureInfos = [];
        var textLength = this.text.length;
        for (var i = 1; i <= textLength; i++)
            measureInfos.push(new measure_info_1.MeasureInfoText(this.text.substr(0, i), this.characterProperties));
        measurer.measure(measureInfos);
        return measureInfos;
    };
    return LayoutTextBox;
}(layout_box_1.LayoutBox));
exports.LayoutTextBox = LayoutTextBox;
