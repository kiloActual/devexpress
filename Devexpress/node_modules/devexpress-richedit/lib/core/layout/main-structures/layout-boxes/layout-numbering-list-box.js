"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_level_properties_1 = require("../../../model/numbering-lists/list-level-properties");
var rich_utils_1 = require("../../../model/rich-utils");
var layout_box_1 = require("./layout-box");
var layout_space_box_1 = require("./layout-space-box");
var layout_tab_space_box_1 = require("./layout-tab-space-box");
var layout_text_box_1 = require("./layout-text-box");
var LayoutNumberingListBox = (function (_super) {
    tslib_1.__extends(LayoutNumberingListBox, _super);
    function LayoutNumberingListBox(characterProperties, colorInfo, text, separatorChar, mergedCharacterPropertiesCache, alignment, fontInfoCache) {
        if (alignment === void 0) { alignment = list_level_properties_1.ListNumberAlignment.Left; }
        var _this = _super.call(this, characterProperties, colorInfo) || this;
        _this.textBox = new layout_text_box_1.LayoutTextBox(characterProperties, colorInfo, text);
        _this.alignment = alignment;
        if (separatorChar != '\u0000') {
            var separatorCharacterProperties = characterProperties.clone();
            var fontInfo = null;
            if (fontInfoCache)
                fontInfo = _this.getFont(fontInfoCache);
            if (!fontInfo) {
                fontInfo = characterProperties.fontInfo.clone();
                fontInfo.measurer = characterProperties.fontInfo.measurer;
                fontInfo.name = "Arial";
                fontInfo.cssString = "Arial";
            }
            separatorCharacterProperties.fontInfo = fontInfo;
            if (mergedCharacterPropertiesCache)
                separatorCharacterProperties = mergedCharacterPropertiesCache.getItem(separatorCharacterProperties);
            switch (separatorChar) {
                case rich_utils_1.RichUtils.specialCharacters.TabMark:
                    _this.separatorBox = new layout_tab_space_box_1.LayoutTabSpaceBoxJustForBoxIterator(separatorCharacterProperties, colorInfo);
                    break;
                case rich_utils_1.RichUtils.specialCharacters.Space:
                case rich_utils_1.RichUtils.specialCharacters.EmSpace:
                case rich_utils_1.RichUtils.specialCharacters.EnSpace:
                    _this.separatorBox = new layout_space_box_1.LayoutSpaceBox(separatorCharacterProperties, colorInfo);
                    break;
                default:
                    break;
            }
        }
        return _this;
    }
    LayoutNumberingListBox.prototype.getFont = function (fontInfoCache) {
        var fontInfo = fontInfoCache.getItemByName('Arial');
        if (!fontInfo) {
            fontInfo = fontInfoCache.getItemByName('Times New Roman');
            if (!fontInfo) {
                fontInfo = fontInfoCache.getItemByName('Calibri');
            }
        }
        return fontInfo;
    };
    LayoutNumberingListBox.prototype.equals = function (obj) {
        return obj &&
            _super.prototype.equals.call(this, obj) &&
            this.textBox.equals(obj.textBox) &&
            (!this.separatorBox && !obj.separatorBox || this.separatorBox && obj.separatorBox && this.separatorBox.equals(obj.separatorBox));
    };
    LayoutNumberingListBox.prototype.clone = function () {
        var newObj = new LayoutNumberingListBox(this.characterProperties, this.colorInfo, "0", '\u0000');
        newObj.copyFrom(this);
        return newObj;
    };
    LayoutNumberingListBox.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.textBox = (obj.textBox.clone());
        this.separatorBox = obj.separatorBox.clone();
    };
    LayoutNumberingListBox.prototype.getType = function () {
        return layout_box_1.LayoutBoxType.NumberingList;
    };
    LayoutNumberingListBox.prototype.pushInfoForMeasure = function (info, showHiddenSymbols) {
        this.textBox.pushInfoForMeasure(info, showHiddenSymbols);
        if (this.separatorBox)
            this.separatorBox.pushInfoForMeasure(info, showHiddenSymbols);
    };
    LayoutNumberingListBox.prototype.popInfoForMeasure = function (info, showHiddenSymbols) {
        if (this.separatorBox) {
            this.separatorBox.popInfoForMeasure(info, showHiddenSymbols);
            if (this.separatorBox instanceof layout_tab_space_box_1.LayoutTabSpaceBoxJustForBoxIterator)
                this.separatorBox = this.separatorBox.getLayoutTabBox(layout_tab_space_box_1.TabLeaderType.None);
        }
        this.textBox.popInfoForMeasure(info, showHiddenSymbols);
    };
    LayoutNumberingListBox.prototype.isWhitespace = function () {
        throw new Error(errors_1.Errors.InternalException);
    };
    LayoutNumberingListBox.prototype.renderGetContent = function (_renderer) {
        throw new Error(errors_1.Errors.InternalException);
    };
    ;
    LayoutNumberingListBox.prototype.isLineBreak = function () {
        throw new Error(errors_1.Errors.InternalException);
    };
    return LayoutNumberingListBox;
}(layout_box_1.LayoutBox));
exports.LayoutNumberingListBox = LayoutNumberingListBox;
