"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_change_base_1 = require("../../layout-formatter/changes/changes/layout-change-base");
var layout_area_selection_change_1 = require("../../layout-formatter/changes/changes/selection/layout-area-selection-change");
var layout_page_selection_change_1 = require("../../layout-formatter/changes/changes/selection/layout-page-selection-change");
var layout_page_1 = require("../main-structures/layout-page");
var layout_selection_page_info_1 = require("./layout-selection-page-info");
var LayoutSelectionInfo = (function () {
    function LayoutSelectionInfo(layoutPageFlag, innerClientProperties) {
        this.pageInfos = [];
        this.changes = [];
        this.layoutPageFlag = layoutPageFlag;
        this.innerClientProperties = innerClientProperties;
    }
    LayoutSelectionInfo.prototype.changesApplied = function () {
        this.changes = [];
    };
    LayoutSelectionInfo.prototype.reset = function () {
        this.pageInfos.splice(0);
        this.changes.splice(0);
    };
    LayoutSelectionInfo.prototype.needAtLeastPageIndex = function (pageIndex) {
        while (this.pageInfos.length <= pageIndex)
            this.pageInfos.push(new layout_selection_page_info_1.LayoutSelectionPageInfo());
    };
    LayoutSelectionInfo.prototype.registerItem = function (pageIndex, item) {
        this.needAtLeastPageIndex(pageIndex);
        var pageInfo = this.pageInfos[pageIndex];
        pageInfo.newItems.push(item);
        pageInfo.isChanged = true;
    };
    LayoutSelectionInfo.prototype.collectPageChanges = function (layout) {
        var pages = layout.pages;
        this.pageInfos.splice(pages.length);
        if (this.innerClientProperties.viewsSettings.isSimpleView) {
            if (this.pageInfos[0])
                this.pageInfos[0].changesCollected();
        }
        else {
            for (var pageIndex = 0, pageInfo = void 0; pageInfo = this.pageInfos[pageIndex]; pageIndex++) {
                var pageFlags = pages[pageIndex].flags;
                if (pageFlags.get(layout_page_1.LayoutPageFlags.MustBeRendered) && pageInfo.isChanged) {
                    var maxCount = Math.max(pageInfo.oldItems.length, pageInfo.newItems.length);
                    var pageChanges = [];
                    if (!pageFlags.get(this.layoutPageFlag))
                        pageInfo.oldItems = [];
                    for (var itemIndex = 0; itemIndex < maxCount; itemIndex++) {
                        var oldItem = pageInfo.oldItems[itemIndex];
                        var newItem = pageInfo.newItems[itemIndex];
                        if (oldItem) {
                            if (newItem) {
                                if (!oldItem.equals(newItem))
                                    pageChanges.push(new layout_area_selection_change_1.LayoutAreaSelectionChange(itemIndex, layout_change_base_1.LayoutChangeType.Replaced, newItem));
                            }
                            else {
                                for (var ind = pageInfo.oldItems.length - 1; ind >= itemIndex; ind--)
                                    pageChanges.push(new layout_area_selection_change_1.LayoutAreaSelectionChange(ind, layout_change_base_1.LayoutChangeType.Deleted, oldItem));
                                break;
                            }
                        }
                        else {
                            for (; itemIndex < pageInfo.newItems.length; itemIndex++)
                                pageChanges.push(new layout_area_selection_change_1.LayoutAreaSelectionChange(itemIndex, layout_change_base_1.LayoutChangeType.Inserted, pageInfo.newItems[itemIndex]));
                            break;
                        }
                    }
                    if (pageChanges.length)
                        this.changes.push(new layout_page_selection_change_1.LayoutPageSelectionChange(pageIndex, layout_change_base_1.LayoutChangeType.Updated, pageChanges));
                }
                pageInfo.changesCollected();
            }
        }
    };
    return LayoutSelectionInfo;
}());
exports.LayoutSelectionInfo = LayoutSelectionInfo;
