"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_table_cell_info_1 = require("./layout-table-cell-info");
var LayoutTableInfo = (function () {
    function LayoutTableInfo(backgroundColor, grid) {
        this.isEditable = true;
        this.backgroundColor = backgroundColor;
        this.grid = grid;
    }
    return LayoutTableInfo;
}());
exports.LayoutTableInfo = LayoutTableInfo;
var LayoutTableColumnInfo = (function (_super) {
    tslib_1.__extends(LayoutTableColumnInfo, _super);
    function LayoutTableColumnInfo(parentCell, logicInfo, bound) {
        var _this = _super.call(this, bound.x, bound.y, bound.width, bound.height) || this;
        _this.horizontalBorders = [];
        _this.verticalBorders = [];
        _this.verticalCursorBorders = [];
        _this.horizontalCursorBorders = [];
        _this.tableRows = [];
        _this.parentCell = parentCell;
        _this.logicInfo = logicInfo;
        return _this;
    }
    LayoutTableColumnInfo.prototype.isLastLayoutColumnInModelTable = function () {
        var topColumn = this.getTopLevelColumn();
        return !topColumn.isBoundWithNext() && list_1.ListUtils.last(topColumn.tableRows).rowIndex == topColumn.logicInfo.grid.table.rows.length - 1;
    };
    LayoutTableColumnInfo.prototype.calculateFlags = function () {
        var _this = this;
        this.boundFlags = new flag_1.Flag(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn | layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn);
        list_1.ListUtils.forEach(this.tableRows, function (row) {
            return list_1.ListUtils.forEach(row.rowCells, function (cell) {
                if (!cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn))
                    _this.boundFlags.set(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn, false);
                if (!cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn))
                    _this.boundFlags.set(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn, false);
            });
        });
    };
    LayoutTableColumnInfo.prototype.getTopLevelColumn = function () {
        var currCol = this;
        var parent;
        while (parent = currCol.parentCell)
            currCol = parent.parentRow.parentTable;
        return currCol;
    };
    LayoutTableColumnInfo.prototype.isBoundWithPrev = function () {
        return !this.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn);
    };
    LayoutTableColumnInfo.prototype.isBoundWithNext = function () {
        return !this.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn);
    };
    LayoutTableColumnInfo.getFirstCellInPageThatBoundWithCellPlacedInNextPage = function (tableInfos) {
        var resultCell = null;
        var resultTblNestedLevel = -1;
        var currLvl;
        for (var tblInd = tableInfos.length - 1, tbl = void 0; tbl = tableInfos[tblInd]; tblInd--) {
            var cell = list_1.ListUtils.unsafeAnyOf(tbl.tableRows, function (row) {
                return list_1.ListUtils.unsafeAnyOf(row.rowCells, function (cell) {
                    return !cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn) ? cell : null;
                });
            });
            if (cell && (!resultCell ||
                (currLvl = cell.parentRow.parentTable.logicInfo.grid.table.nestedLevel) > resultTblNestedLevel)) {
                resultCell = cell;
                resultTblNestedLevel = currLvl;
            }
        }
        return resultCell;
    };
    LayoutTableColumnInfo.prototype.isEmpty = function () {
        return !this.tableRows.length;
    };
    return LayoutTableColumnInfo;
}(rectangle_1.Rectangle));
exports.LayoutTableColumnInfo = LayoutTableColumnInfo;
