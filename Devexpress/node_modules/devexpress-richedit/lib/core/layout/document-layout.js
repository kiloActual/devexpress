"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var color_1 = require("../model/color/color");
var ModelPositionHolder = (function () {
    function ModelPositionHolder(pos, posManager) {
        this.pos = posManager.registerPosition(pos);
        this.posManager = posManager;
    }
    Object.defineProperty(ModelPositionHolder.prototype, "modelPosition", {
        get: function () {
            return this.pos.value;
        },
        enumerable: true,
        configurable: true
    });
    ModelPositionHolder.prototype.destructor = function () {
        this.posManager.unregisterPosition(this.pos);
    };
    return ModelPositionHolder;
}());
exports.ModelPositionHolder = ModelPositionHolder;
var AnchorObjectsPositionInfo = (function () {
    function AnchorObjectsPositionInfo(model) {
        this.model = model;
        this.cache = {};
    }
    AnchorObjectsPositionInfo.prototype.add = function (obj, modelPosition) {
        this.delete(obj.objectId);
        this.cache[obj.objectId] = new ModelPositionHolder(modelPosition, this.model.subDocuments[obj.belongsToSubDocId].positionManager);
    };
    AnchorObjectsPositionInfo.prototype.delete = function (id) {
        var info = this.cache[id];
        if (info) {
            info.destructor();
            delete this.cache[id];
        }
    };
    AnchorObjectsPositionInfo.prototype.getPosition = function (objectId) {
        return this.cache[objectId].modelPosition;
    };
    AnchorObjectsPositionInfo.prototype.clear = function () {
        number_1.NumberMapUtils.forEach(this.cache, function (posInfo) { return posInfo.destructor(); });
        this.cache = {};
    };
    return AnchorObjectsPositionInfo;
}());
exports.AnchorObjectsPositionInfo = AnchorObjectsPositionInfo;
var DocumentLayout = (function () {
    function DocumentLayout(anchorObjectsPositionInfo) {
        this.anchorObjectsPositionInfo = anchorObjectsPositionInfo;
        this.setEmptyLayout(color_1.ColorHelper.NO_COLOR);
    }
    DocumentLayout.prototype.setEmptyLayout = function (pageColor) {
        this.pages = [];
        this.validPageCount = 0;
        this.lastMaxNumPages = 0;
        this.isFullyFormatted = false;
        this.pageColor = pageColor;
        this.anchorObjectsPositionInfo.clear();
    };
    DocumentLayout.prototype.getLastValidPage = function () {
        return this.pages[this.validPageCount - 1];
    };
    DocumentLayout.prototype.isPageValid = function (pageIndex) {
        return pageIndex < this.validPageCount && this.pages[pageIndex].isValid;
    };
    return DocumentLayout;
}());
exports.DocumentLayout = DocumentLayout;
