"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var layout_position_creator_1 = require("../layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("./document-layout-details-level");
var layout_point_1 = require("./layout-point");
var LayoutAndModelPositions = (function () {
    function LayoutAndModelPositions(layoutPosition, modelPosition) {
        this.layoutPosition = layoutPosition;
        this.modelPosition = modelPosition;
    }
    return LayoutAndModelPositions;
}());
exports.LayoutAndModelPositions = LayoutAndModelPositions;
var LayoutRowPosition = (function () {
    function LayoutRowPosition() {
        this.row = null;
        this.box = null;
        this.boxIndex = -1;
        this.charOffset = -1;
    }
    return LayoutRowPosition;
}());
exports.LayoutRowPosition = LayoutRowPosition;
var LayoutPositionBase = (function (_super) {
    tslib_1.__extends(LayoutPositionBase, _super);
    function LayoutPositionBase() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.None;
        _this.rowIndex = -1;
        _this.column = null;
        _this.columnIndex = -1;
        _this.pageArea = null;
        _this.pageAreaIndex = -1;
        _this.page = null;
        _this.pageIndex = -1;
        return _this;
    }
    LayoutPositionBase.prototype.getRelatedSubDocumentPagePosition = function () {
        return this.pageArea.subDocument.isMain() ? this.page.getPosition() : 0;
    };
    LayoutPositionBase.prototype.equals = function (obj) {
        if (this.detailsLevel != obj.detailsLevel)
            return false;
        switch (this.detailsLevel) {
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Character: if (this.charOffset != obj.charOffset)
                return false;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Box: if (this.boxIndex != obj.boxIndex)
                return false;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Row: if (this.rowIndex != obj.rowIndex)
                return false;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Column: if (this.columnIndex != obj.columnIndex)
                return false;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea: if (this.pageAreaIndex != obj.pageAreaIndex || this.pageArea.subDocument.id != obj.pageArea.subDocument.id)
                return false;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Page: if (this.pageIndex != obj.pageIndex)
                return false;
        }
        return true;
    };
    LayoutPositionBase.prototype.getOffsetRelativeColumn = function () {
        return new point_1.Point(this.pageArea.x + this.column.x, this.pageArea.y + this.column.y);
    };
    LayoutPositionBase.prototype.stepBackRow = function () {
        if (this.rowIndex == 0)
            return false;
        this.row = this.column.rows[--this.rowIndex];
        return true;
    };
    LayoutPositionBase.prototype.stepForwardRow = function () {
        var newRow = this.column.rows[++this.rowIndex];
        if (newRow) {
            this.row = newRow;
            return true;
        }
        this.rowIndex--;
        return false;
    };
    LayoutPositionBase.prototype.getPositionRelativePage = function (measurer) {
        return new layout_point_1.LayoutPoint(this.page.index, this.getLayoutX(measurer), this.getLayoutY());
    };
    LayoutPositionBase.prototype.getLayoutX = function (measurer, detailsLevel) {
        if (!detailsLevel)
            detailsLevel = this.detailsLevel;
        var xPos = 0;
        switch (detailsLevel) {
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Max:
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Character: xPos += this.box.getCharOffsetXInPixels(measurer, this.charOffset);
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Box: xPos += this.box.x;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Row: xPos += this.row.x;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Column: xPos += this.column.x;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea: xPos += this.pageArea.x;
        }
        return xPos;
    };
    LayoutPositionBase.prototype.getLayoutY = function (detailsLevel) {
        if (!detailsLevel)
            detailsLevel = this.detailsLevel;
        var yPos = 0;
        switch (detailsLevel) {
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Max:
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Character:
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Box: yPos += this.row.baseLine - this.box.getAscent() - this.row.getSpacingBefore();
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Row: yPos += this.row.y;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Column: yPos += this.column.y;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea: yPos += this.pageArea.y;
        }
        return yPos;
    };
    LayoutPositionBase.prototype.getPageAreaBySubDocument = function (subDocument) {
        return subDocument.isMain() ? this.page.mainSubDocumentPageAreas[this.pageAreaIndex] : this.page.otherPageAreas[subDocument.id];
    };
    LayoutPositionBase.prototype.advanceToPrevRow = function (layout) {
        this.rowIndex--;
        if (this.rowIndex < 0) {
            if (!this.pageArea.subDocument.isMain()) {
                this.rowIndex = 0;
                return false;
            }
            this.columnIndex--;
            if (this.columnIndex < 0) {
                this.pageAreaIndex--;
                if (this.pageAreaIndex < 0) {
                    this.pageIndex--;
                    if (this.pageIndex < 0) {
                        this.pageIndex = 0;
                        this.pageAreaIndex = 0;
                        this.columnIndex = 0;
                        this.rowIndex = 0;
                        return false;
                    }
                    this.page = layout.pages[this.pageIndex];
                    this.pageAreaIndex = this.page.mainSubDocumentPageAreas.length - 1;
                }
                this.pageArea = this.page.mainSubDocumentPageAreas[this.pageAreaIndex];
                this.columnIndex = this.pageArea.columns.length - 1;
            }
            this.column = this.pageArea.columns[this.columnIndex];
            this.rowIndex = this.column.rows.length - 1;
        }
        this.row = this.column.rows[this.rowIndex];
        return true;
    };
    LayoutPositionBase.prototype.advanceToNextBoxInRow = function () {
        if (this.boxIndex + 1 < this.row.boxes.length) {
            this.boxIndex++;
            this.box = this.row.boxes[this.boxIndex];
            this.charOffset = 0;
            return true;
        }
        return false;
    };
    LayoutPositionBase.prototype.advanceToPrevBoxInRow = function () {
        if (this.boxIndex > 0) {
            this.boxIndex--;
            this.box = this.row.boxes[this.boxIndex];
            this.charOffset = this.box.getLength() - 1;
            return true;
        }
        return false;
    };
    LayoutPositionBase.prototype.advanceToNextRow = function (layout) {
        this.rowIndex++;
        if (this.rowIndex >= this.column.rows.length) {
            if (!this.pageArea.subDocument.isMain()) {
                this.rowIndex--;
                return false;
            }
            this.rowIndex = 0;
            this.columnIndex++;
            if (this.columnIndex >= this.pageArea.columns.length) {
                this.columnIndex = 0;
                this.pageAreaIndex++;
                if (this.pageAreaIndex >= this.page.mainSubDocumentPageAreas.length) {
                    this.pageAreaIndex = 0;
                    this.pageIndex++;
                    if (this.pageIndex >= layout.validPageCount) {
                        this.pageIndex--;
                        this.pageAreaIndex = this.page.mainSubDocumentPageAreas.length - 1;
                        this.columnIndex = this.pageArea.columns.length - 1;
                        this.rowIndex = this.column.rows.length - 1;
                        return false;
                    }
                    this.page = layout.pages[this.pageIndex];
                }
                this.pageArea = this.page.mainSubDocumentPageAreas[this.pageAreaIndex];
            }
            this.column = this.pageArea.columns[this.columnIndex];
        }
        this.row = this.column.rows[this.rowIndex];
        return true;
    };
    return LayoutPositionBase;
}(LayoutRowPosition));
exports.LayoutPositionBase = LayoutPositionBase;
var LayoutPosition = (function (_super) {
    tslib_1.__extends(LayoutPosition, _super);
    function LayoutPosition(detailsLevel) {
        var _this = _super.call(this) || this;
        _this.detailsLevel = detailsLevel;
        return _this;
    }
    LayoutPosition.ensure = function (formatterController, selection, subDocument, logPosition, detailsLevel, endRowConflictFlags, middleRowConflictFlags) {
        var layout = formatterController.layout;
        if (subDocument.isMain())
            return layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(formatterController, subDocument, logPosition, detailsLevel, endRowConflictFlags, middleRowConflictFlags);
        while (true) {
            var lp = new layout_position_creator_1.LayoutPositionOtherSubDocumentCreator(layout, subDocument, logPosition, selection.pageIndex, detailsLevel)
                .create(endRowConflictFlags, middleRowConflictFlags);
            if (lp)
                return lp;
            if (!formatterController.forceFormatPage(layout.validPageCount))
                return null;
        }
    };
    LayoutPosition.prototype.getLogPosition = function (detailsLevel) {
        if (detailsLevel === void 0) { detailsLevel = null; }
        if (!detailsLevel)
            detailsLevel = this.detailsLevel;
        var position = 0;
        switch (detailsLevel) {
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Max:
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Character: position += this.charOffset;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Box: position += this.box.rowOffset;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Row: position += this.row.columnOffset;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.Column: position += this.column.pageAreaOffset;
            case document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea: position += this.pageArea.pageOffset;
        }
        if (detailsLevel >= document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea && this.pageArea.subDocument.isMain())
            position += this.page.getPosition();
        return position;
    };
    LayoutPosition.prototype.isPositionBoxEnd = function () {
        return this.charOffset == this.box.getLength();
    };
    LayoutPosition.prototype.isLastBoxInRow = function () {
        return this.boxIndex == this.row.boxes.length - 1;
    };
    LayoutPosition.prototype.isPositionAfterLastBoxInRow = function () {
        return this.isLastBoxInRow() && this.isPositionBoxEnd();
    };
    LayoutPosition.prototype.isPositionBeforeFirstBoxInRow = function () {
        return this.boxIndex == 0 && this.charOffset == 0;
    };
    LayoutPosition.prototype.switchToEndPrevBoxInRow = function () {
        if (this.charOffset == 0 && this.boxIndex > 0) {
            this.boxIndex--;
            this.box = this.row.boxes[this.boxIndex];
            this.charOffset = this.box.getLength();
            return true;
        }
        return false;
    };
    LayoutPosition.prototype.switchToStartNextBoxInRow = function () {
        if (this.charOffset == this.box.getLength() && this.boxIndex + 1 < this.row.boxes.length) {
            this.boxIndex++;
            this.box = this.row.boxes[this.boxIndex];
            this.charOffset = 0;
        }
    };
    LayoutPosition.prototype.copyFrom = function (source) {
        this.detailsLevel = source.detailsLevel;
        this.pageIndex = source.pageIndex;
        this.page = source.page;
        this.pageArea = source.pageArea;
        this.pageAreaIndex = source.pageAreaIndex;
        this.column = source.column;
        this.columnIndex = source.columnIndex;
        this.row = source.row;
        this.rowIndex = source.rowIndex;
        this.box = source.box;
        this.boxIndex = source.boxIndex;
        this.charOffset = source.charOffset;
    };
    LayoutPosition.prototype.clone = function () {
        var clone = new LayoutPosition(this.detailsLevel);
        clone.copyFrom(this);
        return clone;
    };
    LayoutPosition.prototype.initByIndexes = function (pageIndex, pageAreaIndex, columnIndex, rowIndex, boxIndex, charOffset) {
        if (pageAreaIndex === void 0) { pageAreaIndex = -1; }
        if (columnIndex === void 0) { columnIndex = -1; }
        if (rowIndex === void 0) { rowIndex = -1; }
        if (boxIndex === void 0) { boxIndex = -1; }
        if (charOffset === void 0) { charOffset = -1; }
        this.pageIndex = pageIndex;
        this.pageAreaIndex = pageAreaIndex;
        this.columnIndex = columnIndex;
        this.rowIndex = rowIndex;
        this.boxIndex = boxIndex;
        this.charOffset = charOffset;
        return this;
    };
    LayoutPosition.prototype.applyObjectsAsMainSubDocument = function (layout, idOtherSubDoc) {
        this.page = layout.pages[this.pageIndex];
        if (idOtherSubDoc < 0) {
            if (this.pageAreaIndex < 0)
                return this;
            this.pageArea = this.page.mainSubDocumentPageAreas[this.pageAreaIndex];
        }
        else
            this.pageArea = this.page.otherPageAreas[idOtherSubDoc];
        if (this.columnIndex < 0)
            return this;
        this.column = this.pageArea.columns[this.columnIndex];
        if (this.rowIndex < 0)
            return this;
        this.row = this.column.rows[this.rowIndex];
        if (this.boxIndex < 0)
            return this;
        this.box = this.row.boxes[this.boxIndex];
        return this;
    };
    LayoutPosition.prototype.posIsStartPage = function () {
        return this.rowIndex == 0 && this.columnIndex == 0 && this.pageAreaIndex == 0;
    };
    LayoutPosition.prototype.isFirstRowOnPage = function () {
        return this.pageAreaIndex == 0 && this.columnIndex == 0 && this.rowIndex == 0;
    };
    return LayoutPosition;
}(LayoutPositionBase));
exports.LayoutPosition = LayoutPosition;
var LayoutPositionDiscardHelper = (function () {
    function LayoutPositionDiscardHelper() {
    }
    LayoutPositionDiscardHelper.onStartCharLevel = function (lp) {
        lp.charOffset = 0;
    };
    LayoutPositionDiscardHelper.onStartBoxLevel = function (lp) {
        lp.boxIndex = 0;
        lp.box = lp.row.boxes[0];
        LayoutPositionDiscardHelper.onStartCharLevel(lp);
    };
    LayoutPositionDiscardHelper.onStartRowLevel = function (lp) {
        lp.rowIndex = 0;
        lp.row = lp.column.rows[0];
        LayoutPositionDiscardHelper.onStartBoxLevel(lp);
    };
    LayoutPositionDiscardHelper.onStartColumnLevel = function (lp) {
        lp.columnIndex = 0;
        lp.column = lp.pageArea.columns[0];
        LayoutPositionDiscardHelper.onStartRowLevel(lp);
    };
    LayoutPositionDiscardHelper.onStartPageAreaLevel = function (lp) {
        lp.pageAreaIndex = 0;
        lp.pageArea = lp.page.mainSubDocumentPageAreas[0];
        LayoutPositionDiscardHelper.onStartColumnLevel(lp);
    };
    LayoutPositionDiscardHelper.onStartPageLevel = function (pages, lp) {
        lp.pageIndex = 0;
        lp.page = pages[0];
        LayoutPositionDiscardHelper.onStartPageAreaLevel(lp);
    };
    LayoutPositionDiscardHelper.onEndCharLevel = function (lp) {
        lp.charOffset = 0;
    };
    LayoutPositionDiscardHelper.onEndBoxLevel = function (lp) {
        lp.boxIndex = lp.row.boxes.length - 1;
        lp.box = lp.row.boxes[lp.boxIndex];
        LayoutPositionDiscardHelper.onEndCharLevel(lp);
    };
    LayoutPositionDiscardHelper.onEndRowLevel = function (lp) {
        lp.rowIndex = lp.column.rows.length - 1;
        lp.row = lp.column.rows[lp.rowIndex];
        LayoutPositionDiscardHelper.onEndBoxLevel(lp);
    };
    LayoutPositionDiscardHelper.onEndColumnLevel = function (lp) {
        lp.columnIndex = lp.pageArea.columns.length - 1;
        lp.column = lp.pageArea.columns[lp.columnIndex];
        LayoutPositionDiscardHelper.onEndRowLevel(lp);
    };
    LayoutPositionDiscardHelper.onEndPageAreaLevel = function (lp) {
        lp.pageAreaIndex = lp.page.mainSubDocumentPageAreas.length - 1;
        lp.pageArea = lp.page.mainSubDocumentPageAreas[lp.pageAreaIndex];
        LayoutPositionDiscardHelper.onEndColumnLevel(lp);
    };
    LayoutPositionDiscardHelper.onEndPageLevel = function (layout, lp) {
        lp.pageIndex = layout.pages.length - 1;
        lp.page = layout.pages[lp.pageIndex];
        LayoutPositionDiscardHelper.onEndPageAreaLevel(lp);
    };
    return LayoutPositionDiscardHelper;
}());
exports.LayoutPositionDiscardHelper = LayoutPositionDiscardHelper;
