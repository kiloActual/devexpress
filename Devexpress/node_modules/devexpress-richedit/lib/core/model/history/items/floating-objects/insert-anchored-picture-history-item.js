"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var position_based_history_item_1 = require("../../base/position-based-history-item");
var InsertAnchoredPictureHistoryItem = (function (_super) {
    tslib_1.__extends(InsertAnchoredPictureHistoryItem, _super);
    function InsertAnchoredPictureHistoryItem(modelManipulator, subDocPos, charPropsBundle, picInfo, options) {
        var _this = _super.call(this, modelManipulator, subDocPos) || this;
        _this.charPropsBundle = charPropsBundle;
        _this.picInfo = picInfo;
        _this.options = options;
        return _this;
    }
    InsertAnchoredPictureHistoryItem.prototype.redo = function () {
        this.modelManipulator.picture.insertAnchoredPictureInner(this.subDocPos, this.charPropsBundle, this.picInfo, this.options);
        this.options = undefined;
    };
    InsertAnchoredPictureHistoryItem.prototype.undo = function () {
        this.modelManipulator.range.removeIntervalWithoutHistory(this.boundSubDocument, new fixed_1.FixedInterval(this.position, 1), false);
    };
    return InsertAnchoredPictureHistoryItem;
}(position_based_history_item_1.PositionBasedHistoryItem));
exports.InsertAnchoredPictureHistoryItem = InsertAnchoredPictureHistoryItem;
var InsertAnchoredTextBoxHistoryItem = (function (_super) {
    tslib_1.__extends(InsertAnchoredTextBoxHistoryItem, _super);
    function InsertAnchoredTextBoxHistoryItem(modelManipulator, subDocPos, charPropsBundle, textBoxInfo) {
        var _this = _super.call(this, modelManipulator, subDocPos) || this;
        _this.charPropsBundle = charPropsBundle;
        _this.textBoxInfo = textBoxInfo;
        return _this;
    }
    InsertAnchoredTextBoxHistoryItem.prototype.redo = function () {
        this.modelManipulator.textBox.insertAnchoredTextBox(this.subDocPos, this.charPropsBundle, this.textBoxInfo);
    };
    InsertAnchoredTextBoxHistoryItem.prototype.undo = function () {
        this.modelManipulator.range.removeIntervalWithoutHistory(this.boundSubDocument, new fixed_1.FixedInterval(this.position, 1), false);
    };
    return InsertAnchoredTextBoxHistoryItem;
}(position_based_history_item_1.PositionBasedHistoryItem));
exports.InsertAnchoredTextBoxHistoryItem = InsertAnchoredTextBoxHistoryItem;
