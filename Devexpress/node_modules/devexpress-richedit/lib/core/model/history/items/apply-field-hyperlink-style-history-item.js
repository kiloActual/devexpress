"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var character_property_descriptor_1 = require("../../character/character-property-descriptor");
var character_style_1 = require("../../character/character-style");
var enums_1 = require("../../character/enums");
var model_iterator_1 = require("../../model-iterator");
var sub_document_1 = require("../../sub-document");
var interval_based_history_item_1 = require("../base/interval-based-history-item");
var apply_style_history_items_1 = require("./apply-style-history-items");
var character_properties_history_items_1 = require("./character-properties-history-items");
var ApplyFieldHyperlinkStyleHistoryItem = (function (_super) {
    tslib_1.__extends(ApplyFieldHyperlinkStyleHistoryItem, _super);
    function ApplyFieldHyperlinkStyleHistoryItem(modelManipulator, subDocInterval) {
        var _this = _super.call(this, modelManipulator, subDocInterval) || this;
        _this.historyItems = [];
        return _this;
    }
    ApplyFieldHyperlinkStyleHistoryItem.prototype.redo = function () {
        if (ApplyFieldHyperlinkStyleHistoryItem.mask === undefined)
            throw new Error("CharacterPropertiesMask defined later than that class");
        if (this.historyItems.length > 0) {
            for (var i = 0, histItem; histItem = this.historyItems[i]; i++)
                histItem.redo();
            return;
        }
        var charHyperlinkStyle = this.modelManipulator.model.getCharacterStyleByName(character_style_1.CharacterStyle.hyperlinkStyleName);
        var intervalEnd = this.interval.end;
        this.boundSubDocument.splitRun(this.interval.start);
        this.boundSubDocument.splitRun(intervalEnd);
        var modelIterator = new model_iterator_1.ModelIterator(this.boundSubDocument, false);
        modelIterator.setPosition(this.interval.start);
        var histItem;
        do {
            var run = modelIterator.run;
            var runMergedProperties = run.getCharacterMergedProperties();
            var runInterval = new fixed_1.FixedInterval(modelIterator.chunk.startLogPosition.value + run.startOffset, run.getLength());
            histItem = new apply_style_history_items_1.ApplyCharacterStyleHistoryItem(this.modelManipulator, this.subDocInterval, charHyperlinkStyle, false);
            histItem.redo();
            this.historyItems.push(histItem);
            for (var _i = 0, _a = character_property_descriptor_1.CharacterPropertyDescriptor.whatNeedSetWhenCreateHyperlinkField; _i < _a.length; _i++) {
                var desc = _a[_i];
                histItem = new (desc.getHistoryItemConstructor())(this.modelManipulator, new sub_document_1.SubDocumentInterval(this.boundSubDocument, runInterval), desc.getProp(runMergedProperties), true);
                histItem.redo();
                this.historyItems.push(histItem);
            }
            histItem = new character_properties_history_items_1.FontUseValueHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(this.boundSubDocument, runInterval), ApplyFieldHyperlinkStyleHistoryItem.mask);
            histItem.redo();
            this.historyItems.push(histItem);
        } while (runInterval.start < intervalEnd && modelIterator.moveToNextRun());
    };
    ApplyFieldHyperlinkStyleHistoryItem.prototype.undo = function () {
        for (var i = this.historyItems.length - 1, histItem; histItem = this.historyItems[i]; i--)
            histItem.undo();
        this.boundSubDocument.splitRun(this.interval.start);
        this.boundSubDocument.splitRun(this.interval.end);
        var modelIterator = new model_iterator_1.ModelIterator(this.boundSubDocument, false);
        modelIterator.setPosition(this.interval.start);
        do {
        } while (modelIterator.chunk.startLogPosition.value + modelIterator.run.startOffset < this.interval.end && modelIterator.moveToNextRun());
    };
    ApplyFieldHyperlinkStyleHistoryItem.mask = enums_1.CharacterPropertiesMask.UseAll & ~(enums_1.CharacterPropertiesMask.UseFontUnderlineType | enums_1.CharacterPropertiesMask.UseForeColorIndex);
    return ApplyFieldHyperlinkStyleHistoryItem;
}(interval_based_history_item_1.IntervalBasedHistoryItem));
exports.ApplyFieldHyperlinkStyleHistoryItem = ApplyFieldHyperlinkStyleHistoryItem;
