"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var properties_bundle_1 = require("../../../rich-utils/properties-bundle");
var inserted_1 = require("../../changes/sub-document/field/inserted");
var field_1 = require("../../fields/field");
var insert_text_manipulator_params_1 = require("../../manipulators/text-manipulator/insert-text-manipulator-params");
var rich_utils_1 = require("../../rich-utils");
var run_type_1 = require("../../runs/run-type");
var sub_document_1 = require("../../sub-document");
var history_item_1 = require("../base/history-item");
var FieldInsertHistoryItem = (function (_super) {
    tslib_1.__extends(FieldInsertHistoryItem, _super);
    function FieldInsertHistoryItem(modelManipulator, subDocument, startCodePos, codePartLength, resultPartLength, showCode, charPropsBundle) {
        var _this = _super.call(this, modelManipulator) || this;
        _this.subDocument = subDocument;
        _this.startFieldPos = startCodePos;
        _this.separatorPos = _this.startFieldPos + 1 + codePartLength;
        _this.endPos = _this.separatorPos + 1 + resultPartLength + 1;
        _this.showCode = showCode;
        _this.charPropsBundle = charPropsBundle;
        return _this;
    }
    FieldInsertHistoryItem.prototype.redo = function () {
        var specChars = rich_utils_1.RichUtils.specialCharacters;
        var textManipulator = this.modelManipulator.text;
        var characterStyle = this.charPropsBundle.style;
        var charProp = this.charPropsBundle.props;
        textManipulator.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, this.startFieldPos), new properties_bundle_1.MaskedCharacterPropertiesBundle(charProp, characterStyle), run_type_1.RunType.FieldCodeStartRun, specChars.FieldCodeStartRun));
        textManipulator.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, this.separatorPos), new properties_bundle_1.MaskedCharacterPropertiesBundle(charProp, characterStyle), run_type_1.RunType.FieldCodeEndRun, specChars.FieldCodeEndRun));
        textManipulator.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, this.endPos - 1), new properties_bundle_1.MaskedCharacterPropertiesBundle(charProp, characterStyle), run_type_1.RunType.FieldResultEndRun, specChars.FieldResultEndRun));
        var fields = this.subDocument.fields;
        var fieldIndex = field_1.Field.normedBinaryIndexOf(fields, this.startFieldPos + 1);
        var newFieldIndex = fieldIndex + 1;
        var newField = new field_1.Field(this.subDocument.positionManager, newFieldIndex, this.startFieldPos, this.separatorPos, this.endPos, this.showCode, undefined);
        field_1.Field.addField(fields, newField);
        this.modelManipulator.notifyModelChanged(new inserted_1.FieldInsertedSubDocumentChange(this.subDocument.id, this.startFieldPos, this.separatorPos, this.endPos));
    };
    FieldInsertHistoryItem.prototype.undo = function () {
        this.modelManipulator.range.removeIntervalWithoutHistory(this.subDocument, new fixed_1.FixedInterval(this.startFieldPos, 1), false);
        this.modelManipulator.range.removeIntervalWithoutHistory(this.subDocument, new fixed_1.FixedInterval(this.endPos - 2, 1), false);
        this.modelManipulator.range.removeIntervalWithoutHistory(this.subDocument, new fixed_1.FixedInterval(this.separatorPos - 1, 1), false);
    };
    return FieldInsertHistoryItem;
}(history_item_1.HistoryItem));
exports.FieldInsertHistoryItem = FieldInsertHistoryItem;
