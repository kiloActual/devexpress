"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var sub_document_inserter_1 = require("../../manipulators/document/sub-document-inserter");
var history_item_1 = require("../base/history-item");
var InsertSubDocumentHistoryItem = (function (_super) {
    tslib_1.__extends(InsertSubDocumentHistoryItem, _super);
    function InsertSubDocumentHistoryItem(modelManipulator, options, targetSubDocPos, sourceSubDocInterval) {
        var _this = _super.call(this, modelManipulator) || this;
        _this.targetSubDocPos = targetSubDocPos;
        _this.sourceSubDocInterval = sourceSubDocInterval;
        _this.options = options;
        return _this;
    }
    InsertSubDocumentHistoryItem.prototype.redo = function () {
        var inserter = new sub_document_inserter_1.SubDocumentInserter(this.modelManipulator, this.options, this.targetSubDocPos, this.sourceSubDocInterval);
        inserter.insert();
        this.newTables = inserter.newTables;
        this.insertedInterval = inserter.insertedInterval;
    };
    InsertSubDocumentHistoryItem.prototype.undo = function () {
        for (var i = 0, table = void 0; table = this.newTables[i]; i++)
            this.modelManipulator.table.removeTable(this.targetSubDocPos.subDocument, table);
        this.modelManipulator.range.removeIntervalWithoutHistory(this.targetSubDocPos.subDocument, new fixed_1.FixedInterval(this.targetSubDocPos.position, this.sourceSubDocInterval.interval.length), true);
    };
    return InsertSubDocumentHistoryItem;
}(history_item_1.HistoryItem));
exports.InsertSubDocumentHistoryItem = InsertSubDocumentHistoryItem;
