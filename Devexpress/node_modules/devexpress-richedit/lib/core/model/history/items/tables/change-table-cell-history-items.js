"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var create_table_history_item_1 = require("./create-table-history-item");
var ShiftTableStartPositionToTheRightHistoryItem = (function (_super) {
    tslib_1.__extends(ShiftTableStartPositionToTheRightHistoryItem, _super);
    function ShiftTableStartPositionToTheRightHistoryItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShiftTableStartPositionToTheRightHistoryItem.prototype.redo = function () {
        this.modelManipulator.table.shiftTableStartPositionToTheRight(this.boundSubDocument, this.getTable());
    };
    ShiftTableStartPositionToTheRightHistoryItem.prototype.undo = function () {
        this.modelManipulator.table.restoreShiftedTableStartPositionToTheRight(this.boundSubDocument, this.getTable());
    };
    return ShiftTableStartPositionToTheRightHistoryItem;
}(create_table_history_item_1.TableBasedHistoryItem));
exports.ShiftTableStartPositionToTheRightHistoryItem = ShiftTableStartPositionToTheRightHistoryItem;
var TableRowConditionalFormattingHistoryItem = (function (_super) {
    tslib_1.__extends(TableRowConditionalFormattingHistoryItem, _super);
    function TableRowConditionalFormattingHistoryItem(modelManipulator, boundSubDocument, tableIndex, rowIndex, formatting) {
        var _this = _super.call(this, modelManipulator, boundSubDocument, tableIndex) || this;
        _this.formatting = formatting;
        _this.rowIndex = rowIndex;
        return _this;
    }
    TableRowConditionalFormattingHistoryItem.prototype.redo = function () {
        var row = this.getTable().rows[this.rowIndex];
        this.oldFormatting = row.conditionalFormatting;
        row.conditionalFormatting = this.formatting;
    };
    TableRowConditionalFormattingHistoryItem.prototype.undo = function () {
        this.getTable().rows[this.rowIndex].conditionalFormatting = this.oldFormatting;
    };
    return TableRowConditionalFormattingHistoryItem;
}(create_table_history_item_1.TableBasedHistoryItem));
exports.TableRowConditionalFormattingHistoryItem = TableRowConditionalFormattingHistoryItem;
var TableCellConditionalFormattingHistoryItem = (function (_super) {
    tslib_1.__extends(TableCellConditionalFormattingHistoryItem, _super);
    function TableCellConditionalFormattingHistoryItem(modelManipulator, boundSubDocument, tableIndex, rowIndex, cellIndex, formatting) {
        var _this = _super.call(this, modelManipulator, boundSubDocument, tableIndex) || this;
        _this.formatting = formatting;
        _this.rowIndex = rowIndex;
        _this.cellIndex = cellIndex;
        return _this;
    }
    TableCellConditionalFormattingHistoryItem.prototype.redo = function () {
        var cell = this.getTable().rows[this.rowIndex].cells[this.cellIndex];
        this.oldFormatting = cell.conditionalFormatting;
        cell.conditionalFormatting = this.formatting;
    };
    TableCellConditionalFormattingHistoryItem.prototype.undo = function () {
        this.getTable().rows[this.rowIndex].cells[this.cellIndex].conditionalFormatting = this.oldFormatting;
    };
    return TableCellConditionalFormattingHistoryItem;
}(create_table_history_item_1.TableBasedHistoryItem));
exports.TableCellConditionalFormattingHistoryItem = TableCellConditionalFormattingHistoryItem;
