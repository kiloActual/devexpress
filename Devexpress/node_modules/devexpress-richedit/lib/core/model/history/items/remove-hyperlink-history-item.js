"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var character_style_1 = require("../../character/character-style");
var create_range_copy_operation_1 = require("../../manipulators/range/create-range-copy-operation");
var sub_document_1 = require("../../sub-document");
var history_item_1 = require("../base/history-item");
var apply_style_history_items_1 = require("./apply-style-history-items");
var RemoveHyperlinkHistoryItem = (function (_super) {
    tslib_1.__extends(RemoveHyperlinkHistoryItem, _super);
    function RemoveHyperlinkHistoryItem(modelManipulator, subDocument, field) {
        var _this = _super.call(this, modelManipulator) || this;
        _this.subDocument = subDocument;
        _this.fieldIndex = field.index;
        _this.startPos = field.getFieldStartPosition();
        _this.separatorPos = field.getSeparatorPosition();
        _this.endPos = field.getFieldEndPosition();
        _this.hyperlinkInfo = field.getHyperlinkInfo().clone();
        return _this;
    }
    RemoveHyperlinkHistoryItem.prototype.redo = function () {
        var resultInterval = fixed_1.FixedInterval.fromPositions(this.separatorPos + 1, this.endPos - 1);
        if (!this.styleHistory) {
            var charDefaultStyle = this.modelManipulator.model.getCharacterStyleByName(character_style_1.CharacterStyle.defaultParagraphCharacterStyleName);
            this.styleHistory = new apply_style_history_items_1.ApplyCharacterStyleHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(this.subDocument, resultInterval), charDefaultStyle, false);
        }
        this.styleHistory.redo();
        var rangeCopy = resultInterval.length ?
            create_range_copy_operation_1.RangeCopy.create(new sub_document_1.SubDocumentIntervals(this.subDocument, [resultInterval])) :
            null;
        var fieldInterval = fixed_1.FixedInterval.fromPositions(this.startPos, this.endPos);
        this.removeOperationResult = this.modelManipulator.range.removeIntervalInner(this.subDocument, fieldInterval, false);
        if (rangeCopy)
            rangeCopy.insertTo(this.modelManipulator, new sub_document_1.SubDocumentPosition(this.subDocument, this.startPos));
    };
    RemoveHyperlinkHistoryItem.prototype.undo = function () {
        this.modelManipulator.range.restoreRemovedInterval(this.subDocument, this.removeOperationResult);
        this.styleHistory.undo();
    };
    return RemoveHyperlinkHistoryItem;
}(history_item_1.HistoryItem));
exports.RemoveHyperlinkHistoryItem = RemoveHyperlinkHistoryItem;
