"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var control_1 = require("../../options/control");
var history_item_1 = require("./history-item");
var History = (function () {
    function History(options) {
        this.historyItems = [];
        this.currentIndex = -1;
        this.transaction = null;
        this.incrementalId = -1;
        this.transactionLevel = -1;
        this.unmodifiedIndex = -1;
        this.currTransactionId = 0;
        this.transactionMap = {};
        this.options = options;
    }
    History.prototype.isModified = function () {
        if (this.unmodifiedIndex == this.currentIndex)
            return false;
        var startIndex = Math.min(this.unmodifiedIndex, this.currentIndex);
        var endIndex = Math.max(this.unmodifiedIndex, this.currentIndex);
        for (var i = startIndex + 1; i <= endIndex; i++) {
            if (this.historyItems[i].changeModified())
                return true;
        }
        return false;
    };
    History.prototype.undo = function () {
        if (!this.canUndo())
            return;
        this.historyItems[this.currentIndex].undo();
        this.currentIndex--;
    };
    History.prototype.redo = function () {
        if (!this.canRedo())
            return;
        this.currentIndex++;
        this.historyItems[this.currentIndex].redo();
    };
    History.prototype.canUndo = function () {
        return this.currentIndex >= 0 && control_1.ControlOptions.isEnabled(this.options.undo);
    };
    History.prototype.canRedo = function () {
        return this.currentIndex < this.historyItems.length - 1 && control_1.ControlOptions.isEnabled(this.options.undo);
    };
    History.prototype.beginTransaction = function () {
        this.transactionLevel++;
        if (this.transactionLevel == 0)
            this.transaction = new history_item_1.CompositionHistoryItem();
        var id = this.currTransactionId++;
        this.transactionMap[id] = this.transaction;
        return id;
    };
    History.prototype.addTransaction = function (action) {
        this.beginTransaction();
        action(this);
        this.endTransaction();
    };
    History.prototype.endTransaction = function () {
        if (--this.transactionLevel >= 0)
            return;
        var transactionLength = this.transaction.historyItems.length;
        if (transactionLength > 1)
            this.addInternal(this.transaction);
        else if (transactionLength == 1)
            this.addInternal(this.transaction.historyItems.pop());
        this.transaction = null;
    };
    History.prototype.addAndRedo = function (historyItem) {
        this.add(historyItem);
        historyItem.redo();
    };
    History.prototype.add = function (historyItem) {
        if (this.transactionLevel >= 0)
            this.transaction.add(historyItem);
        else
            this.addInternal(historyItem);
    };
    History.prototype.addInternal = function (historyItem) {
        if (this.currentIndex < this.historyItems.length - 1) {
            this.historyItems.splice(this.currentIndex + 1);
            this.unmodifiedIndex = Math.min(this.unmodifiedIndex, this.currentIndex);
        }
        this.historyItems.push(historyItem);
        this.currentIndex++;
        this.deleteOldItems();
    };
    History.prototype.deleteOldItems = function () {
        var exceedItemsCount = this.historyItems.length - History.MAX_HISTORY_ITEM_COUNT;
        if (exceedItemsCount > 0 && this.currentIndex > exceedItemsCount) {
            this.historyItems.splice(0, exceedItemsCount);
            this.currentIndex -= exceedItemsCount;
        }
    };
    History.prototype.getNextId = function () {
        this.incrementalId++;
        return this.incrementalId;
    };
    History.prototype.clear = function () {
        this.currentIndex = -1;
        this.unmodifiedIndex = -1;
        this.incrementalId = -1;
        this.historyItems = [];
    };
    History.prototype.resetModified = function () {
        this.unmodifiedIndex = this.currentIndex;
    };
    History.prototype.getCurrentItemId = function () {
        if (this.currentIndex == -1)
            return -1;
        var currentItem = this.historyItems[this.currentIndex];
        if (currentItem.uniqueId == -1)
            currentItem.uniqueId = this.getNextId();
        return currentItem.uniqueId;
    };
    History.MAX_HISTORY_ITEM_COUNT = 100;
    return History;
}());
exports.History = History;
