"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enums_1 = require("./enums");
var SectionHeadersFooters = (function () {
    function SectionHeadersFooters(section) {
        this.indices = {};
        this.section = section;
        this.setObjectIndex(enums_1.HeaderFooterType.Even, SectionHeadersFooters.INVALID_INDEX);
        this.setObjectIndex(enums_1.HeaderFooterType.Odd, SectionHeadersFooters.INVALID_INDEX);
        this.setObjectIndex(enums_1.HeaderFooterType.First, SectionHeadersFooters.INVALID_INDEX);
    }
    SectionHeadersFooters.prototype.getObject = function (type) {
        var index = this.getObjectIndex(type);
        return this.getObjectsCache()[index];
    };
    SectionHeadersFooters.prototype.getObjectIndex = function (type) {
        return this.indices[type];
    };
    SectionHeadersFooters.prototype.setObjectIndex = function (type, objectIndex) {
        this.indices[type] = objectIndex;
    };
    SectionHeadersFooters.prototype.getActualObject = function (firstPageOfSection, isEvenPage) {
        var type = SectionHeadersFooters.getActualObjectType(this.section, firstPageOfSection, isEvenPage);
        var index = this.getObjectIndex(type);
        return this.getObjectsCache()[index];
    };
    SectionHeadersFooters.prototype.copyFrom = function (source) {
        this.indices = {};
        this.setObjectIndex(enums_1.HeaderFooterType.Even, source.getObjectIndex(enums_1.HeaderFooterType.Even));
        this.setObjectIndex(enums_1.HeaderFooterType.Odd, source.getObjectIndex(enums_1.HeaderFooterType.Odd));
        this.setObjectIndex(enums_1.HeaderFooterType.First, source.getObjectIndex(enums_1.HeaderFooterType.First));
    };
    SectionHeadersFooters.prototype.isLinkedToPrevious = function (type) {
        var previousSection = this.section.documentModel.getPreviousSection(this.section);
        return previousSection && this.getContainer(previousSection).getObjectIndex(type) === this.getObjectIndex(type);
    };
    SectionHeadersFooters.prototype.canLinkToPrevious = function () {
        return !!this.section.documentModel.getPreviousSection(this.section);
    };
    SectionHeadersFooters.getActualObjectType = function (section, firstPageOfSection, isEvenPage) {
        if (firstPageOfSection && section.sectionProperties.differentFirstPage)
            return enums_1.HeaderFooterType.First;
        return isEvenPage && section.documentModel.differentOddAndEvenPages ? enums_1.HeaderFooterType.Even : enums_1.HeaderFooterType.Odd;
    };
    SectionHeadersFooters.isLinkedToPrevious = function (section, headerFooterType) {
        return section.headers.isLinkedToPrevious(headerFooterType) || section.footers.isLinkedToPrevious(headerFooterType);
    };
    SectionHeadersFooters.INVALID_INDEX = -1;
    return SectionHeadersFooters;
}());
exports.SectionHeadersFooters = SectionHeadersFooters;
var SectionHeaders = (function (_super) {
    tslib_1.__extends(SectionHeaders, _super);
    function SectionHeaders() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SectionHeaders.prototype.getContainer = function (section) {
        return section.headers;
    };
    SectionHeaders.prototype.getObjectsCache = function () {
        return this.section.documentModel.headers;
    };
    SectionHeaders.prototype.clone = function () {
        var clone = new SectionHeaders(this.section);
        clone.copyFrom(this);
        return clone;
    };
    return SectionHeaders;
}(SectionHeadersFooters));
exports.SectionHeaders = SectionHeaders;
var SectionFooters = (function (_super) {
    tslib_1.__extends(SectionFooters, _super);
    function SectionFooters() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SectionFooters.prototype.getContainer = function (section) {
        return section.footers;
    };
    SectionFooters.prototype.getObjectsCache = function () {
        return this.section.documentModel.footers;
    };
    SectionFooters.prototype.clone = function () {
        var clone = new SectionFooters(this.section);
        clone.copyFrom(this);
        return clone;
    };
    return SectionFooters;
}(SectionHeadersFooters));
exports.SectionFooters = SectionFooters;
