"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = require("@devexpress/utils/lib/utils/string");
var enums_1 = require("./enums");
var theme_font_scheme_part_1 = require("./theme-font-scheme-part");
var ThemeFontScheme = (function () {
    function ThemeFontScheme() {
        this.name = "";
        this.minorFont = new theme_font_scheme_part_1.ThemeFontSchemePart();
        this.majorFont = new theme_font_scheme_part_1.ThemeFontSchemePart();
    }
    Object.defineProperty(ThemeFontScheme.prototype, "isValidate", {
        get: function () { return !string_1.StringUtils.isNullOrEmpty(this.name) && this.minorFont.isValid && this.majorFont.isValid; },
        enumerable: true,
        configurable: true
    });
    ThemeFontScheme.prototype.getTypeface = function (schemeStyle, currentUICulture) {
        if (schemeStyle == enums_1.XlFontSchemeStyles.None)
            return "";
        if (schemeStyle == enums_1.XlFontSchemeStyles.Minor)
            return this.minorFont.getTypeface(currentUICulture);
        return this.majorFont.getTypeface(currentUICulture);
    };
    ThemeFontScheme.prototype.copyFrom = function (sourceObj) {
        this.name = sourceObj.name;
        this.majorFont.copyFrom(sourceObj.majorFont);
        this.minorFont.copyFrom(sourceObj.minorFont);
    };
    ThemeFontScheme.prototype.clear = function () {
        this.name = "";
        this.majorFont.clear();
        this.minorFont.clear();
    };
    return ThemeFontScheme;
}());
exports.ThemeFontScheme = ThemeFontScheme;
