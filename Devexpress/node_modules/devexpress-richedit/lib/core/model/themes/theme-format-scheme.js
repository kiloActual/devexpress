"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var enums_1 = require("./enums");
var ThemeFormatScheme = (function () {
    function ThemeFormatScheme() {
        this.backgroundFillStyleList = [];
        this.fillStyleList = [];
        this.lineStyleList = [];
        this.effectStyleList = [];
        this.name = "";
    }
    Object.defineProperty(ThemeFormatScheme.prototype, "isValidate", {
        get: function () {
            return this.checkValidation();
        },
        enumerable: true,
        configurable: true
    });
    ThemeFormatScheme.prototype.getOutlineByType = function (type) {
        return this.getElementByType(type, this.lineStyleList);
    };
    ThemeFormatScheme.prototype.getOutlineByIndex = function (index) {
        return this.getElementByIndex(index, this.lineStyleList);
    };
    ThemeFormatScheme.prototype.getFillByType = function (type) {
        return this.getElementByType(type, this.fillStyleList);
    };
    ThemeFormatScheme.prototype.getFillByIndex = function (index) {
        var backgroundIndex = 1000;
        if (index < backgroundIndex)
            return this.getElementByIndex(index, this.fillStyleList);
        return this.getElementByIndex(index - backgroundIndex, this.backgroundFillStyleList);
    };
    ThemeFormatScheme.prototype.getEffectStyle = function (type) {
        return this.getElementByType(type, this.effectStyleList);
    };
    ThemeFormatScheme.prototype.getElementByType = function (type, items) {
        if (type == enums_1.StyleMatrixElementType.Subtle)
            return items[0];
        if (type == enums_1.StyleMatrixElementType.Moderate)
            return items[1];
        if (type == enums_1.StyleMatrixElementType.Intense)
            return items[2];
        return null;
    };
    ThemeFormatScheme.prototype.getElementByIndex = function (index, items) {
        var count = items.length;
        return index < 1 || count == 0 ? null : items[Math.min(index, count) - 1];
    };
    ThemeFormatScheme.prototype.checkValidation = function () {
        return this.backgroundFillStyleList.length >= 3 && this.fillStyleList.length >= 3 && this.lineStyleList.length >= 3 && this.effectStyleList.length >= 3;
    };
    ThemeFormatScheme.prototype.copyFrom = function (obj) {
        this.clear();
        this.name = obj.name;
        this.backgroundFillStyleList = list_1.ListUtils.map(obj.backgroundFillStyleList, function (e) { return e.clone(); });
        this.fillStyleList = list_1.ListUtils.map(obj.fillStyleList, function (e) { return e.clone(); });
        this.lineStyleList = list_1.ListUtils.map(obj.lineStyleList, function (e) { return e.clone(); });
        this.effectStyleList = list_1.ListUtils.map(obj.effectStyleList, function (e) { return e.clone(); });
    };
    ThemeFormatScheme.prototype.clear = function () {
        this.name = "";
        list_1.ListUtils.clear(this.backgroundFillStyleList);
        list_1.ListUtils.clear(this.fillStyleList);
        list_1.ListUtils.clear(this.lineStyleList);
        list_1.ListUtils.clear(this.effectStyleList);
    };
    return ThemeFormatScheme;
}());
exports.ThemeFormatScheme = ThemeFormatScheme;
