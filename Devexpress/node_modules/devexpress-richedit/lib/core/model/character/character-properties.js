"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var common_1 = require("@devexpress/utils/lib/utils/common");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var math_1 = require("@devexpress/utils/lib/utils/math");
var color_1 = require("../color/color");
var color_model_info_1 = require("../color/color-model-info");
var shading_info_1 = require("../shadings/shading-info");
var shading_pattern_1 = require("../shadings/shading-pattern");
var composite_font_info_1 = require("./composite-font-info");
var enums_1 = require("./enums");
var lang_info_1 = require("./lang-info");
var layout_character_properties_color_info_1 = require("./layout-character-properties-color-info");
var CharacterProperties = (function () {
    function CharacterProperties() {
        this.measurerSizes = Object.create(null);
        this.fontSize = 11;
        this.fontBold = false;
        this.fontItalic = false;
        this.fontInfo = null;
        this.script = enums_1.CharacterFormattingScript.Normal;
        this.fontStrikeoutType = enums_1.StrikeoutType.None;
        this.fontUnderlineType = enums_1.UnderlineType.None;
        this.allCaps = false;
        this.underlineWordsOnly = false;
        this.strikeoutWordsOnly = false;
        this.noProof = false;
        this.hidden = false;
        this.langInfo = new lang_info_1.LangInfo();
        this.compositeFontInfo = new composite_font_info_1.CompositeFontInfo();
        this.textColor = color_model_info_1.ColorModelInfo.nullColor;
        this.shadingInfo = shading_info_1.ShadingInfo.nullColor;
        this.highlightColor = color_model_info_1.ColorModelInfo.nullColor;
        this.strikeoutColor = color_model_info_1.ColorModelInfo.nullColor;
        this.underlineColor = color_model_info_1.ColorModelInfo.nullColor;
    }
    CharacterProperties.prototype.calculateHash = function () {
        return this.fontSize ^
            math_1.MathUtils.somePrimes[0] * common_1.boolToInt(this.fontBold) ^
            math_1.MathUtils.somePrimes[1] * common_1.boolToInt(this.fontItalic) ^
            math_1.MathUtils.somePrimes[2] * this.shadingInfo.getHashCode() ^
            math_1.MathUtils.somePrimes[3] * this.textColor.getHashCode() ^
            math_1.MathUtils.somePrimes[4] * this.highlightColor.getHashCode();
    };
    CharacterProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    CharacterProperties.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.fontBold == obj.fontBold &&
            this.fontItalic == obj.fontItalic &&
            (this.fontInfo && obj.fontInfo && this.fontInfo.equals(obj.fontInfo)) &&
            this.fontSize == obj.fontSize &&
            this.script == obj.script &&
            this.fontStrikeoutType == obj.fontStrikeoutType &&
            this.fontUnderlineType == obj.fontUnderlineType &&
            this.allCaps == obj.allCaps &&
            this.underlineWordsOnly == obj.underlineWordsOnly &&
            this.strikeoutWordsOnly == obj.strikeoutWordsOnly &&
            this.noProof == obj.noProof &&
            this.hidden == obj.hidden &&
            this.shadingInfo.equals(obj.shadingInfo) &&
            this.textColor.equals(obj.textColor) &&
            this.highlightColor.equals(obj.highlightColor) &&
            this.strikeoutColor.equals(obj.strikeoutColor) &&
            this.underlineColor.equals(obj.underlineColor) &&
            (this.langInfo && obj.langInfo && this.langInfo.equals(obj.langInfo)) &&
            (this.compositeFontInfo && this.compositeFontInfo.equals(obj.compositeFontInfo));
    };
    CharacterProperties.prototype.clone = function () {
        var result = new CharacterProperties();
        result.copyFrom(this);
        return result;
    };
    CharacterProperties.prototype.copyFrom = function (obj) {
        this.fontInfo = obj.fontInfo;
        this.fontSize = obj.fontSize;
        this.fontBold = obj.fontBold;
        this.fontItalic = obj.fontItalic;
        this.script = obj.script;
        this.fontStrikeoutType = obj.fontStrikeoutType;
        this.fontUnderlineType = obj.fontUnderlineType;
        this.allCaps = obj.allCaps;
        this.underlineWordsOnly = obj.underlineWordsOnly;
        this.strikeoutWordsOnly = obj.strikeoutWordsOnly;
        this.noProof = obj.noProof;
        this.hidden = obj.hidden;
        this.shadingInfo = obj.shadingInfo ? obj.shadingInfo.clone() : new shading_info_1.ShadingInfo(shading_pattern_1.ShadingPattern.Clear, color_model_info_1.ColorModelInfo.noColor, color_model_info_1.ColorModelInfo.noColor);
        this.textColor = obj.textColor ? obj.textColor.clone() : color_model_info_1.ColorModelInfo.noColor;
        this.highlightColor = obj.highlightColor ? obj.highlightColor.clone() : color_model_info_1.ColorModelInfo.noColor;
        this.strikeoutColor = obj.strikeoutColor ? obj.strikeoutColor.clone() : color_model_info_1.ColorModelInfo.noColor;
        this.underlineColor = obj.underlineColor ? obj.underlineColor.clone() : color_model_info_1.ColorModelInfo.noColor;
        this.langInfo = obj.langInfo ? obj.langInfo.clone() : new lang_info_1.LangInfo();
        this.compositeFontInfo = obj.compositeFontInfo ? obj.compositeFontInfo.clone() : new composite_font_info_1.CompositeFontInfo();
        this.clearSizes();
    };
    CharacterProperties.prototype.getSize = function (text) {
        return this.measurerSizes[text];
    };
    CharacterProperties.prototype.setSize = function (text, size) {
        this.measurerSizes[text] = size;
    };
    CharacterProperties.prototype.clearSizes = function () {
        this.measurerSizes = Object.create(null);
    };
    CharacterProperties.prototype.linkMeasurerSizes = function (obj) {
        this.measurerSizes = obj.measurerSizes;
    };
    CharacterProperties.prototype.getLayoutColorInfo = function (colorProvider) {
        return new layout_character_properties_color_info_1.LayoutCharacterPropertiesColorInfo(this.textColor.toRgb(colorProvider), CharacterProperties.getActualBackgroundColor(this, colorProvider), this.strikeoutColor.toRgb(colorProvider), this.underlineColor.toRgb(colorProvider));
    };
    CharacterProperties.getActualBackgroundColor = function (charProps, colorProvider) {
        var backColor = charProps.shadingInfo.getActualColor(colorProvider);
        var highlightColor = charProps.highlightColor.toRgb(colorProvider);
        return enum_1.EnumUtils.isAnyOf(highlightColor, color_1.ColorHelper.NO_COLOR, color_1.ColorHelper.AUTOMATIC_COLOR) ? backColor : highlightColor;
    };
    return CharacterProperties;
}());
exports.CharacterProperties = CharacterProperties;
var MaskedCharacterProperties = (function (_super) {
    tslib_1.__extends(MaskedCharacterProperties, _super);
    function MaskedCharacterProperties() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.useValue = enums_1.CharacterPropertiesMask.UseNone;
        return _this;
    }
    MaskedCharacterProperties.prototype.calculateHash = function () {
        return _super.prototype.calculateHash.call(this) +
            math_1.MathUtils.somePrimes[15] * this.useValue;
    };
    MaskedCharacterProperties.prototype.getUseValue = function (value) {
        return (this.useValue & value) != 0;
    };
    MaskedCharacterProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.useValue |= mask;
        else
            this.useValue &= ~mask;
    };
    MaskedCharacterProperties.prototype.clone = function () {
        var result = new MaskedCharacterProperties();
        result.copyFrom(this);
        return result;
    };
    MaskedCharacterProperties.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.useValue = obj.useValue;
    };
    MaskedCharacterProperties.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj)
            && this.useValue == obj.useValue;
    };
    MaskedCharacterProperties.createDefault = function (model) {
        var prop = model.defaultCharacterProperties.clone();
        prop.useValue = 0;
        return prop;
    };
    MaskedCharacterProperties.prototype.setValue = function (desc, value) {
        desc.setProp(this, value);
        this.setUseValue(desc.maskValue(), true);
    };
    return MaskedCharacterProperties;
}(CharacterProperties));
exports.MaskedCharacterProperties = MaskedCharacterProperties;
