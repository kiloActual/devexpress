"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var selection_intervals_info_1 = require("../../selection/selection-intervals-info");
var character_property_descriptor_1 = require("./character-property-descriptor");
var CharacterPropertiesApplier = (function () {
    function CharacterPropertiesApplier(modelManager, inputPosition, newCharProps, subDocument, intervals) {
        this.modelManager = modelManager;
        this.inputPosition = inputPosition;
        this.newCharProps = newCharProps;
        this.modelManip = this.modelManager.modelManipulator;
        this.subDoc = subDocument;
        this.intervals = intervals;
    }
    CharacterPropertiesApplier.prototype.apply = function () {
        var history = this.modelManager.history;
        this.maskedCharProps = this.inputPosition.getMaskedCharacterProperties();
        this.charPropsRaw = this.inputPosition.getMergedCharacterPropertiesRaw();
        this.charPropsFull = this.inputPosition.getMergedCharacterPropertiesFull();
        this.charPropsRaw = this.inputPosition.getMergedCharacterPropertiesRaw();
        this.oldCharPropsRaw = this.charPropsRaw.clone();
        var changed = 0;
        history.beginTransaction();
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.allCaps);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.size);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.bold);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.italic);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.script);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.underlineType);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.underlineWordsOnly);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutWordsOnly);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.noProof);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.hidden);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.textColor);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.highlightColor);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutColor);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.underlineColor);
        changed |= this.applyProp(character_property_descriptor_1.CharacterPropertyDescriptor.langInfo);
        history.endTransaction();
        return !!changed;
    };
    CharacterPropertiesApplier.prototype.applyProp = function (descriptor) {
        var newValue = descriptor.getProp(this.newCharProps);
        var currValue = descriptor.getProp(this.oldCharPropsRaw);
        if (newValue !== undefined && newValue !== currValue) {
            descriptor.setProp(this.maskedCharProps, newValue);
            descriptor.setProp(this.charPropsRaw, newValue);
            descriptor.setProp(this.charPropsFull, newValue);
            this.maskedCharProps.setUseValue(descriptor.maskValue(), true);
            for (var _i = 0, _a = this.intervals; _i < _a.length; _i++) {
                var interval = _a[_i];
                if (interval.length > 0)
                    this.modelManager.history.addAndRedo(new (descriptor.getHistoryItemConstructor())(this.modelManip, new selection_intervals_info_1.SelectionIntervalsInfo(this.subDoc, [interval]), newValue, true));
            }
            return 1;
        }
        return 0;
    };
    return CharacterPropertiesApplier;
}());
exports.CharacterPropertiesApplier = CharacterPropertiesApplier;
