"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var abstract_numbering_list_added_1 = require("../../changes/model/list/abstract-numbering-list-added");
var abstract_numbering_list_deleted_1 = require("../../changes/model/list/abstract-numbering-list-deleted");
var i_override_list_level_changed_1 = require("../../changes/model/list/i-override-list-level-changed");
var numbering_list_added_1 = require("../../changes/model/list/numbering-list-added");
var numbering_list_deleted_1 = require("../../changes/model/list/numbering-list-deleted");
var paragraph_numbering_list_changed_1 = require("../../changes/sub-document/list/paragraph-numbering-list-changed");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var json_list_enums_1 = require("../../json/enums/json-list-enums");
var numbering_list_1 = require("../../numbering-lists/numbering-list");
var base_manipulator_1 = require("../base-manipulator");
var list_level_character_properties_manipulator_1 = require("./list-level-character-properties-manipulator");
var list_level_paragraph_properties_manipulator_1 = require("./list-level-paragraph-properties-manipulator");
var list_level_properties_manipulator_1 = require("./list-level-properties-manipulator");
var NumberingListManipulator = (function (_super) {
    tslib_1.__extends(NumberingListManipulator, _super);
    function NumberingListManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.listLevelProperties = new list_level_properties_manipulator_1.ListLevelPropertiesManipulator(manipulator);
        _this.listLevelCharacterProperties = new list_level_character_properties_manipulator_1.ListLevelCharacterPropertiesManipulator(manipulator);
        _this.listLevelParagraphProperties = new list_level_paragraph_properties_manipulator_1.ListLevelParagraphPropertiesManipulator(manipulator);
        return _this;
    }
    NumberingListManipulator.prototype.addAbstractNumberingList = function (abstractNumberingList) {
        var newIndex = this.model.abstractNumberingLists.push(abstractNumberingList) - 1;
        abstractNumberingList.deleted = false;
        this.modelManipulator.notifyModelChanged(new abstract_numbering_list_added_1.AbstractNumberingListAddedModelChange(newIndex));
        return newIndex;
    };
    NumberingListManipulator.prototype.deleteAbstractNumberingList = function (abstractNumberingListIndex) {
        this.model.abstractNumberingLists[abstractNumberingListIndex].deleted = true;
        this.model.abstractNumberingLists.splice(abstractNumberingListIndex, 1);
        this.modelManipulator.notifyModelChanged(new abstract_numbering_list_deleted_1.AbstractNumberingListDeletedModelChange(abstractNumberingListIndex));
    };
    NumberingListManipulator.prototype.addNumberingList = function (numberingList) {
        var newIndex = this.model.numberingLists.push(numberingList) - 1;
        numberingList.deleted = false;
        this.modelManipulator.notifyModelChanged(new numbering_list_added_1.NumberingListAddedModelChange(newIndex));
        return newIndex;
    };
    NumberingListManipulator.prototype.deleteNumberingList = function (numberingListIndex) {
        this.model.numberingLists.splice(numberingListIndex, 1);
        this.modelManipulator.notifyModelChanged(new numbering_list_deleted_1.NumberingListDeletedModelChange(numberingListIndex));
    };
    NumberingListManipulator.prototype.setIOverrideListLevelOverrideStart = function (numberingListIndex, levelIndex, overrideStart) {
        var numberingList = this.model.numberingLists[numberingListIndex];
        var listLevel = numberingList.levels[levelIndex];
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        oldState.register(new history_item_state_object_1.HistoryItemListLevelStateObject(false, numberingListIndex, levelIndex, listLevel.overrideStart));
        listLevel.overrideStart = overrideStart;
        newState.register(new history_item_state_object_1.HistoryItemListLevelStateObject(false, numberingListIndex, levelIndex, overrideStart));
        this.modelManipulator.notifyModelChanged(new i_override_list_level_changed_1.IOverrideListLevelChangedModelChange(json_list_enums_1.JSONIOverrideListLevelProperty.OverrideStart, newState));
        return oldState;
    };
    NumberingListManipulator.prototype.restoreIOverrideListLevelOverrideStart = function (state) {
        var stateObject = state.objects[0];
        var numberingList = this.model.numberingLists[stateObject.numberingListIndex];
        var listLevel = numberingList.levels[stateObject.listLevelIndex];
        listLevel.overrideStart = stateObject.value;
        this.modelManipulator.notifyModelChanged(new i_override_list_level_changed_1.IOverrideListLevelChangedModelChange(json_list_enums_1.JSONIOverrideListLevelProperty.OverrideStart, stateObject.value));
    };
    NumberingListManipulator.prototype.setIOverrideListLevelNewStart = function (numberingListIndex, levelIndex, newStart) {
        var numberingList = this.model.numberingLists[numberingListIndex];
        var listLevel = numberingList.levels[levelIndex];
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        oldState.register(new history_item_state_object_1.HistoryItemListLevelStateObject(false, numberingListIndex, levelIndex, listLevel.getNewStart()));
        listLevel.setNewStart(newStart);
        newState.register(new history_item_state_object_1.HistoryItemListLevelStateObject(false, numberingListIndex, levelIndex, newStart));
        this.modelManipulator.notifyModelChanged(new i_override_list_level_changed_1.IOverrideListLevelChangedModelChange(json_list_enums_1.JSONIOverrideListLevelProperty.NewStart, newState));
        return oldState;
    };
    NumberingListManipulator.prototype.restoreIOverrideListLevelNewStart = function (state) {
        var stateObject = state.objects[0];
        var numberingList = this.model.numberingLists[stateObject.numberingListIndex];
        var listLevel = numberingList.levels[stateObject.listLevelIndex];
        listLevel.setNewStart(stateObject.value);
        this.modelManipulator.notifyModelChanged(new i_override_list_level_changed_1.IOverrideListLevelChangedModelChange(json_list_enums_1.JSONIOverrideListLevelProperty.NewStart, stateObject.value));
    };
    NumberingListManipulator.prototype.setParagraphNumberingList = function (subDocument, paragraphIndex, numberingIndex, listLevelIndex) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var paragraph = subDocument.paragraphs[paragraphIndex];
        var oldAbstractNumberingListIndex = paragraph.getAbstractNumberingListIndex();
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(paragraph.interval, [paragraph.numberingListIndex, paragraph.listLevelIndex]));
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(paragraph.interval, [numberingIndex, listLevelIndex]));
        paragraph.numberingListIndex = numberingIndex;
        paragraph.listLevelIndex = listLevelIndex;
        paragraph.resetParagraphMergedProperties();
        this.modelManipulator.notifyModelChanged(new paragraph_numbering_list_changed_1.ParagraphNumberingListChangedSubDocumentChange(subDocument, newState, oldAbstractNumberingListIndex));
        return oldState;
    };
    NumberingListManipulator.prototype.removeNumberingListFromParagraph = function (subDocument, paragraphIndex) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var paragraph = subDocument.paragraphs[paragraphIndex];
        var oldAbstractNumberingListIndex = paragraph.getAbstractNumberingListIndex();
        var newListIndex = numbering_list_1.NumberingList.NumberingListNotSettedIndex;
        if (paragraph.isInStyleList())
            newListIndex = numbering_list_1.NumberingList.NoNumberingListIndex;
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(paragraph.interval, [paragraph.numberingListIndex, paragraph.listLevelIndex]));
        paragraph.numberingListIndex = newListIndex;
        paragraph.listLevelIndex = -1;
        paragraph.resetParagraphMergedProperties();
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(paragraph.interval, [newListIndex, -1]));
        this.modelManipulator.notifyModelChanged(new paragraph_numbering_list_changed_1.ParagraphNumberingListChangedSubDocumentChange(subDocument, newState, oldAbstractNumberingListIndex));
        return oldState;
    };
    NumberingListManipulator.prototype.restoreParagraphNumberingList = function (subDocument, state) {
        var paragraph = subDocument.getParagraphsByInterval(state.interval)[0];
        var oldAbstractNumberingListIndex = paragraph.getAbstractNumberingListIndex();
        paragraph.numberingListIndex = state.objects[0].value[0];
        paragraph.listLevelIndex = state.objects[0].value[1];
        paragraph.resetParagraphMergedProperties();
        this.modelManipulator.notifyModelChanged(new paragraph_numbering_list_changed_1.ParagraphNumberingListChangedSubDocumentChange(subDocument, state, oldAbstractNumberingListIndex));
    };
    return NumberingListManipulator;
}(base_manipulator_1.BaseManipulator));
exports.NumberingListManipulator = NumberingListManipulator;
