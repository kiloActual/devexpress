"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_character_property_changed_1 = require("../../changes/model/list/list-level-character-property-changed");
var character_property_descriptor_1 = require("../../character/character-property-descriptor");
var document_model_1 = require("../../document-model");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var list_level_1 = require("../../numbering-lists/list-level");
var base_manipulator_1 = require("../base-manipulator");
var ListLevelCharacterPropertiesManipulator = (function (_super) {
    tslib_1.__extends(ListLevelCharacterPropertiesManipulator, _super);
    function ListLevelCharacterPropertiesManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.fontBold = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.bold);
        _this.fontItalic = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.italic);
        _this.fontName = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo);
        _this.fontSize = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.size);
        _this.fontCaps = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.allCaps);
        _this.fontStrikeoutType = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType);
        _this.fontStrikeoutWordsOnly = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutWordsOnly);
        _this.fontUnderlineType = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineType);
        _this.fontHidden = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.hidden);
        _this.script = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.script);
        _this.fontUnderlineWordsOnly = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineWordsOnly);
        _this.fontNoProof = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.noProof);
        _this.textColor = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.textColor);
        _this.shadingInfo = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo);
        _this.highlightColor = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.highlightColor);
        _this.fontStrikeoutColor = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutColor);
        _this.fontUnderlineColor = new CharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineColor);
        return _this;
    }
    return ListLevelCharacterPropertiesManipulator;
}(base_manipulator_1.BaseManipulator));
exports.ListLevelCharacterPropertiesManipulator = ListLevelCharacterPropertiesManipulator;
var CharacterPropertiesManipulator = (function (_super) {
    tslib_1.__extends(CharacterPropertiesManipulator, _super);
    function CharacterPropertiesManipulator(manipulator, descriptor) {
        var _this = _super.call(this, manipulator) || this;
        _this.descriptor = descriptor;
        return _this;
    }
    CharacterPropertiesManipulator.prototype.setValue = function (model, isAbstractList, listIndex, listLevelIndex, newValue, newUse) {
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        var numberingList = isAbstractList ? model.abstractNumberingLists[listIndex] : model.numberingLists[listIndex];
        var listLevel = numberingList.levels[listLevelIndex];
        var properties = listLevel.getCharacterProperties();
        if (listLevel instanceof list_level_1.NumberingListReferenceLevel) {
            var abstractNumberingListIndex = numberingList.abstractNumberingListIndex;
            oldState.register(new history_item_state_object_1.HistoryItemListLevelUseStateObject(true, abstractNumberingListIndex, listLevelIndex, this.descriptor.getProp(properties), properties.getUseValue(this.descriptor.maskValue())));
            this.setValueCore(listLevel, newValue, newUse);
            newState.register(new history_item_state_object_1.HistoryItemListLevelUseStateObject(true, abstractNumberingListIndex, listLevelIndex, newValue, newUse));
        }
        else {
            oldState.register(new history_item_state_object_1.HistoryItemListLevelUseStateObject(isAbstractList, listIndex, listLevelIndex, this.descriptor.getProp(properties), properties.getUseValue(this.descriptor.maskValue())));
            this.setValueCore(listLevel, newValue, newUse);
            newState.register(new history_item_state_object_1.HistoryItemListLevelUseStateObject(isAbstractList, listIndex, listLevelIndex, newValue, newUse));
        }
        this.model.resetMergedFormattingCache(document_model_1.ResetFormattingCacheType.Character);
        this.modelManipulator.notifyModelChanged(new list_level_character_property_changed_1.ListLevelCharacterPropertyChangedModelChange(this.descriptor.getJSONProperty(), newState));
        return oldState;
    };
    CharacterPropertiesManipulator.prototype.restoreValue = function (model, state) {
        var stateObject = state.objects[0];
        var numberingList = stateObject.isAbstractNumberingList ? model.abstractNumberingLists[stateObject.numberingListIndex] : model.numberingLists[stateObject.numberingListIndex];
        var listLevel = numberingList.levels[stateObject.listLevelIndex];
        this.setValueCore(listLevel, stateObject.value, stateObject.use);
        this.model.resetMergedFormattingCache(document_model_1.ResetFormattingCacheType.Character);
        this.modelManipulator.notifyModelChanged(new list_level_character_property_changed_1.ListLevelCharacterPropertyChangedModelChange(this.descriptor.getJSONProperty(), state));
    };
    CharacterPropertiesManipulator.prototype.setValueCore = function (level, newValue, newUse) {
        var properties = level.getCharacterProperties().clone();
        this.descriptor.setProp(properties, newValue);
        properties.setUseValue(this.descriptor.maskValue(), newUse);
        level.setCharacterProperties(properties);
        level.onCharacterPropertiesChanged();
    };
    return CharacterPropertiesManipulator;
}(base_manipulator_1.BaseManipulator));
