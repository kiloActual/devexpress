"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var search_1 = require("@devexpress/utils/lib/utils/search");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var text_buffer_changed_1 = require("../changes/sub-document/text/text-buffer-changed");
var history_item_state_1 = require("../history/states/history-item-state");
var history_item_state_object_1 = require("../history/states/history-item-state-object");
var sentence_model_builder_1 = require("../sentence-model-builder");
var base_manipulator_1 = require("./base-manipulator");
var TextCaseManipulator = (function (_super) {
    tslib_1.__extends(TextCaseManipulator, _super);
    function TextCaseManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextCaseManipulator.prototype.applyUpperCase = function (layoutFormatterManager, selection, subDocument, interval) {
        return (new UpperCaseModifier(layoutFormatterManager, selection, subDocument, this.modelManipulator, interval)).modify();
    };
    TextCaseManipulator.prototype.applyLowerCase = function (layoutFormatterManager, selection, subDocument, interval) {
        return (new LowerCaseModifier(layoutFormatterManager, selection, subDocument, this.modelManipulator, interval)).modify();
    };
    TextCaseManipulator.prototype.applyCapitalizeEachWordCase = function (layoutFormatterManager, selection, subDocument, interval) {
        return (new CapitalizeEachWordCaseModifier(layoutFormatterManager, selection, subDocument, this.modelManipulator, interval)).modify();
    };
    TextCaseManipulator.prototype.applyToggleCase = function (layoutFormatterManager, selection, subDocument, interval) {
        return (new ToggleCaseModifier(layoutFormatterManager, selection, subDocument, this.modelManipulator, interval)).modify();
    };
    TextCaseManipulator.prototype.applySentenceCase = function (layoutFormatterManager, selection, subDocument, interval) {
        return (new SentenceCaseModifier(layoutFormatterManager, selection, subDocument, this.modelManipulator, interval)).modify();
    };
    TextCaseManipulator.prototype.applyBufferState = function (subDocument, oldState) {
        var chunks = subDocument.chunks;
        for (var i = 0, stateValue; stateValue = oldState.objects[i]; i++) {
            var oldText = stateValue.value;
            var oldTextPosition = stateValue.interval.start;
            var chunkIndex = search_1.SearchUtils.normedInterpolationIndexOf(chunks, function (c) { return c.startLogPosition.value; }, oldTextPosition);
            for (var chunk; oldText.length > 0 && (chunk = chunks[chunkIndex]); chunkIndex++) {
                var currPosForInsertInThisChunk = oldTextPosition - chunk.startLogPosition.value;
                var chunkTextBefore = chunk.textBuffer.substr(0, currPosForInsertInThisChunk);
                var chunkTextAfter = chunk.textBuffer.substr(currPosForInsertInThisChunk + oldText.length);
                var lengthInsertedText = chunk.textBuffer.length - currPosForInsertInThisChunk - chunkTextAfter.length;
                chunk.textBuffer = [chunkTextBefore, oldText.substr(0, lengthInsertedText), chunkTextAfter].join("");
                oldTextPosition += lengthInsertedText;
                oldText = oldText.substr(lengthInsertedText);
            }
        }
        if (!oldState.isEmpty())
            this.modelManipulator.notifyModelChanged(new text_buffer_changed_1.TextBufferChangedSubDocumentChange(subDocument.id, oldState));
    };
    return TextCaseManipulator;
}(base_manipulator_1.BaseManipulator));
exports.TextCaseManipulator = TextCaseManipulator;
var TextCaseModifierBase = (function () {
    function TextCaseModifierBase(layoutFormatterManager, selection, subDocument, modelManipulator, interval) {
        this.layoutFormatterManager = layoutFormatterManager;
        this.selection = selection;
        this.subDocument = subDocument;
        this.interval = interval;
        this.modelManipulator = modelManipulator;
    }
    TextCaseModifierBase.prototype.modify = function () {
        this.newState = new history_item_state_1.HistoryItemIntervalState();
        this.oldState = new history_item_state_1.HistoryItemIntervalState();
        var sentences = sentence_model_builder_1.SentenceStructureBuilder.getBuilder(this.layoutFormatterManager, this.selection, this.subDocument, this.interval, true).sentences;
        for (var sentenceIndex = 0, sentence; sentence = sentences[sentenceIndex]; sentenceIndex++)
            this.modifyCore(sentence);
        this.modelManipulator.textCase.applyBufferState(this.subDocument, this.newState);
        if (!this.newState.isEmpty())
            this.modelManipulator.notifyModelChanged(new text_buffer_changed_1.TextBufferChangedSubDocumentChange(this.subDocument.id, this.newState));
        return this.oldState;
    };
    return TextCaseModifierBase;
}());
var TextCaseSimpleModifier = (function (_super) {
    tslib_1.__extends(TextCaseSimpleModifier, _super);
    function TextCaseSimpleModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextCaseSimpleModifier.prototype.modifyCore = function (sentence) {
        for (var wordIndex = 0, wordInfo; wordInfo = sentence.words[wordIndex]; wordIndex++) {
            for (var wordPartIndex = 0, wordPart; wordPart = wordInfo.parts[wordPartIndex]; wordPartIndex++) {
                if (wordPart.position < this.interval.start)
                    continue;
                if (wordPart.position >= this.interval.end)
                    return;
                switch (wordPart.type) {
                    case layout_box_1.LayoutBoxType.Text:
                        this.oldState.register(new history_item_state_object_1.HistoryItemTextBufferStateObject(wordPart.position, wordPart.text));
                        var newText = this.applyModifier(wordIndex, wordPartIndex, wordPart.text);
                        this.newState.register(new history_item_state_object_1.HistoryItemTextBufferStateObject(wordPart.position, newText));
                        break;
                }
            }
        }
    };
    return TextCaseSimpleModifier;
}(TextCaseModifierBase));
var LowerCaseModifier = (function (_super) {
    tslib_1.__extends(LowerCaseModifier, _super);
    function LowerCaseModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LowerCaseModifier.prototype.applyModifier = function (_wordIndex, _wordPartIndex, text) {
        return text.toLowerCase();
    };
    return LowerCaseModifier;
}(TextCaseSimpleModifier));
var UpperCaseModifier = (function (_super) {
    tslib_1.__extends(UpperCaseModifier, _super);
    function UpperCaseModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UpperCaseModifier.prototype.applyModifier = function (_wordIndex, _wordPartIndex, text) {
        return text.toUpperCase();
    };
    return UpperCaseModifier;
}(TextCaseSimpleModifier));
var CapitalizeEachWordCaseModifier = (function (_super) {
    tslib_1.__extends(CapitalizeEachWordCaseModifier, _super);
    function CapitalizeEachWordCaseModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CapitalizeEachWordCaseModifier.prototype.applyModifier = function (_wordIndex, wordPartIndex, text) {
        return wordPartIndex == 0 ? text[0].toUpperCase() + text.substr(1).toLowerCase() : text.toLowerCase();
    };
    return CapitalizeEachWordCaseModifier;
}(TextCaseSimpleModifier));
var ToggleCaseModifier = (function (_super) {
    tslib_1.__extends(ToggleCaseModifier, _super);
    function ToggleCaseModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToggleCaseModifier.prototype.applyModifier = function (_wordIndex, _wordPartIndex, text) {
        var result = "";
        for (var i = 0; i < text.length; i++) {
            var char = text[i];
            var lowerChar = char.toLowerCase();
            result += lowerChar === char ? char.toUpperCase() : lowerChar;
        }
        return result;
    };
    return ToggleCaseModifier;
}(TextCaseSimpleModifier));
var SentenceCaseModifier = (function (_super) {
    tslib_1.__extends(SentenceCaseModifier, _super);
    function SentenceCaseModifier() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SentenceCaseModifier.prototype.applyModifier = function (wordIndex, wordPartIndex, text) {
        return wordIndex == 0 && wordPartIndex == 0 ? text[0].toUpperCase() + text.substr(1).toLowerCase() : text.toLowerCase();
    };
    return SentenceCaseModifier;
}(TextCaseSimpleModifier));
