"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shape_changed_1 = require("../../changes/sub-document/anchor/shape-changed");
var shape_property_changed_1 = require("../../changes/sub-document/anchor/shape-property-changed");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var json_floating_enums_1 = require("../../json/enums/json-floating-enums");
var base_manipulator_1 = require("../base-manipulator");
var ShapeManipulator = (function (_super) {
    tslib_1.__extends(ShapeManipulator, _super);
    function ShapeManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.fillColor = new ShapePropertyManipulator(manipulator, json_floating_enums_1.JSONShapeProperty.FillColor, function (prop, val) { return prop.fillColor = val; }, function (prop) { return prop.fillColor; });
        _this.outlineColor = new ShapePropertyManipulator(manipulator, json_floating_enums_1.JSONShapeProperty.OutlineColor, function (prop, val) { return prop.outlineColor = val; }, function (prop) { return prop.outlineColor; });
        _this.outlineWidth = new ShapePropertyManipulator(manipulator, json_floating_enums_1.JSONShapeProperty.OutlineWidth, function (prop, val) { return prop.outlineWidth = val; }, function (prop) { return prop.outlineWidth; });
        return _this;
    }
    ShapeManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var run = subDocument.getRunByPosition(interval.start);
        var anchoredRun = run;
        oldState.register(new history_item_state_object_1.HistoryItemIntervalShapeStateObject(interval, anchoredRun.shape.clone()));
        anchoredRun.shape = newValue;
        newState.register(new history_item_state_object_1.HistoryItemIntervalShapeStateObject(interval, newValue));
        this.modelManipulator.notifyModelChanged(new shape_changed_1.ShapeChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, newState));
        return oldState;
    };
    ShapeManipulator.prototype.restoreValue = function (subDocument, state) {
        var stateValue = state.lastObject;
        var run = subDocument.getRunByPosition(stateValue.interval.start);
        var anchoredRun = run;
        anchoredRun.shape = stateValue.value;
        this.modelManipulator.notifyModelChanged(new shape_changed_1.ShapeChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, state));
    };
    return ShapeManipulator;
}(base_manipulator_1.BaseManipulator));
exports.ShapeManipulator = ShapeManipulator;
var ShapePropertyManipulator = (function () {
    function ShapePropertyManipulator(manipulator, jsonShapeProperty, setPropertyValue, getPropertyValue) {
        this.manipulator = manipulator;
        this.jsonShapeProperty = jsonShapeProperty;
        this.setPropertyValue = setPropertyValue;
        this.getPropertyValue = getPropertyValue;
    }
    ShapePropertyManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var run = subDocument.getRunByPosition(interval.start);
        var anchoredRun = run;
        var shape = anchoredRun.shape.clone();
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, this.getPropertyValue(shape)));
        this.setPropertyValue(shape, newValue);
        anchoredRun.shape = shape;
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, newValue));
        this.manipulator.notifyModelChanged(new shape_property_changed_1.ShapePropertyChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, this.jsonShapeProperty, newState));
        return oldState;
    };
    ShapePropertyManipulator.prototype.restoreValue = function (subDocument, state) {
        if (state.isEmpty())
            return;
        var stateValue = state.lastObject;
        var run = subDocument.getRunByPosition(stateValue.interval.start);
        var anchoredRun = run;
        this.setPropertyValue(anchoredRun.shape, stateValue.value);
        this.manipulator.notifyModelChanged(new shape_property_changed_1.ShapePropertyChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, this.jsonShapeProperty, state));
    };
    return ShapePropertyManipulator;
}());
exports.ShapePropertyManipulator = ShapePropertyManipulator;
