"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var base_manipulator_1 = require("../base-manipulator");
var inline_pictures_updated_1 = require("../../changes/sub-document/picture/inline-pictures-updated");
var updated_image_info_1 = require("../picture-manipulator/loader/updated-image-info");
var ImageManipulator = (function (_super) {
    tslib_1.__extends(ImageManipulator, _super);
    function ImageManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ImageManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var pictureRun = subDocument.getRunByPosition(interval.start);
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, [pictureRun.info.cacheInfo.base64, pictureRun.size.actualSize]));
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, [newValue[0], newValue[1]]));
        this.setPropertyValue(subDocument, newState, pictureRun, true);
        return oldState;
    };
    ImageManipulator.prototype.restoreValue = function (subDocument, state) {
        if (state.isEmpty())
            return;
        var pictureRun = subDocument.getRunByPosition(state.interval.start);
        this.setPropertyValue(subDocument, state, pictureRun, false);
    };
    ImageManipulator.prototype.setPropertyValue = function (subDocument, state, pictureRun, loaded) {
        var imageCache = this.modelManipulator.model.cache.imageCache;
        var newValue = state.lastObject.value;
        var newInfo = imageCache.createUnloadedInfoByBase64(newValue[0], newValue[1]);
        newInfo.isLoaded = loaded;
        pictureRun.size.cacheInfo = newInfo;
        this.notifyModelChanged(state.interval.start, newInfo, pictureRun.size, subDocument);
    };
    ImageManipulator.prototype.notifyModelChanged = function (position, imageInfo, size, subDocument) {
        this.modelManipulator.notifyModelChanged(new inline_pictures_updated_1.InlinePicturesUpdatedSubDocumentChange(subDocument.id, new updated_image_info_1.UpdatedImageInfo(position, imageInfo, size)));
    };
    return ImageManipulator;
}(base_manipulator_1.BaseManipulator));
exports.ImageManipulator = ImageManipulator;
