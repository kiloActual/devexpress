"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var anchored_text_box_size_changed_1 = require("../../changes/sub-document/anchor/anchored-text-box-size-changed");
var anchored_picture_size_changed_1 = require("../../changes/sub-document/picture/anchored-picture-size-changed");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var base_manipulator_1 = require("../base-manipulator");
var AnchorSizeManipulatorBase = (function (_super) {
    tslib_1.__extends(AnchorSizeManipulatorBase, _super);
    function AnchorSizeManipulatorBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnchorSizeManipulatorBase.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var run = subDocument.getRunByPosition(interval.start);
        var anchoredRun = run;
        oldState.register(new history_item_state_object_1.HistoryItemIntervalAnchorSizeStateObject(interval, anchoredRun.size.clone()));
        anchoredRun.size = newValue;
        newState.register(new history_item_state_object_1.HistoryItemIntervalAnchorSizeStateObject(interval, newValue));
        this.notify(newState.interval, anchoredRun.anchoredObjectID, newState, subDocument);
        return oldState;
    };
    AnchorSizeManipulatorBase.prototype.restoreValue = function (subDocument, state) {
        var stateValue = state.lastObject;
        var run = subDocument.getRunByPosition(stateValue.interval.start);
        var anchoredRun = run;
        anchoredRun.size = stateValue.value;
        this.notify(state.interval, anchoredRun.anchoredObjectID, state, subDocument);
    };
    return AnchorSizeManipulatorBase;
}(base_manipulator_1.BaseManipulator));
exports.AnchorSizeManipulatorBase = AnchorSizeManipulatorBase;
var AnchorTextBoxSizeManipulator = (function (_super) {
    tslib_1.__extends(AnchorTextBoxSizeManipulator, _super);
    function AnchorTextBoxSizeManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnchorTextBoxSizeManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        return _super.prototype.setValue.call(this, subDocument, interval, newValue);
    };
    AnchorTextBoxSizeManipulator.prototype.notify = function (interval, objectId, newState, subDocument) {
        this.modelManipulator.notifyModelChanged(new anchored_text_box_size_changed_1.AnchoredTextBoxSizeChangedSubDocumentChange(subDocument.id, objectId, interval.start, newState));
    };
    return AnchorTextBoxSizeManipulator;
}(AnchorSizeManipulatorBase));
exports.AnchorTextBoxSizeManipulator = AnchorTextBoxSizeManipulator;
var AnchorPictureSizeManipulator = (function (_super) {
    tslib_1.__extends(AnchorPictureSizeManipulator, _super);
    function AnchorPictureSizeManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnchorPictureSizeManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        return _super.prototype.setValue.call(this, subDocument, interval, newValue);
    };
    AnchorPictureSizeManipulator.prototype.notify = function (interval, objectId, newState, subDocument) {
        this.modelManipulator.notifyModelChanged(new anchored_picture_size_changed_1.AnchoredPictureSizeChangedSubDocumentChange(subDocument.id, objectId, interval.start, newState));
    };
    return AnchorPictureSizeManipulator;
}(AnchorSizeManipulatorBase));
exports.AnchorPictureSizeManipulator = AnchorPictureSizeManipulator;
