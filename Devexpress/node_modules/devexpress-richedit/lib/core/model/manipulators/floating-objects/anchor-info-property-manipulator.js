"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var anchor_info_property_changed_1 = require("../../changes/sub-document/anchor/anchor-info-property-changed");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var run_type_1 = require("../../runs/run-type");
var base_manipulator_1 = require("../base-manipulator");
var AnchorInfoPropertyManipulator = (function (_super) {
    tslib_1.__extends(AnchorInfoPropertyManipulator, _super);
    function AnchorInfoPropertyManipulator(manipulator, jsonAnchorInfoProperty, setPropertyValue, getPropertyValue) {
        var _this = _super.call(this, manipulator) || this;
        _this.jsonAnchorInfoProperty = jsonAnchorInfoProperty;
        _this.setPropertyValue = setPropertyValue;
        _this.getPropertyValue = getPropertyValue;
        return _this;
    }
    AnchorInfoPropertyManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var run = subDocument.getRunByPosition(interval.start);
        var anchoredRun = run.getType() == run_type_1.RunType.AnchoredPictureRun ? run : run;
        var anchorInfo = anchoredRun.anchorInfo.clone();
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, this.getPropertyValue(anchorInfo)));
        this.setPropertyValue(anchorInfo, newValue);
        anchoredRun.anchorInfo = anchorInfo;
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, newValue));
        this.modelManipulator.notifyModelChanged(new anchor_info_property_changed_1.AnchorInfoPropertyChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, this.jsonAnchorInfoProperty, newState));
        return oldState;
    };
    AnchorInfoPropertyManipulator.prototype.restoreValue = function (subDocument, state) {
        if (state.isEmpty())
            return;
        var stateValue = state.lastObject;
        var run = subDocument.getRunByPosition(stateValue.interval.start);
        var anchoredRun = run.getType() == run_type_1.RunType.AnchoredPictureRun ? run : run;
        this.setPropertyValue(anchoredRun.anchorInfo, stateValue.value);
        this.modelManipulator.notifyModelChanged(new anchor_info_property_changed_1.AnchorInfoPropertyChangedSubDocumentChange(subDocument.id, anchoredRun.anchoredObjectID, this.jsonAnchorInfoProperty, state));
    };
    return AnchorInfoPropertyManipulator;
}(base_manipulator_1.BaseManipulator));
exports.AnchorInfoPropertyManipulator = AnchorInfoPropertyManipulator;
