"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var simple_run_inserted_1 = require("../../changes/sub-document/text/simple-run-inserted");
var history_item_1 = require("../../history/base/history-item");
var insert_text_history_item_1 = require("../../history/items/insert-text-history-item");
var runs_base_manipulator_1 = require("../runs-base-manipulator");
var chunk_size_corrector_1 = require("./chunk-size-corrector");
var InsertTextViaHistoryResult = (function () {
    function InsertTextViaHistoryResult(inserted, insertedInterval) {
        this.inserted = inserted;
        this.insertedInterval = insertedInterval;
    }
    return InsertTextViaHistoryResult;
}());
exports.InsertTextViaHistoryResult = InsertTextViaHistoryResult;
var TextManipulator = (function (_super) {
    tslib_1.__extends(TextManipulator, _super);
    function TextManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.chunkSizeCorrector = new chunk_size_corrector_1.ChunkSizeCorrector();
        return _this;
    }
    TextManipulator.prototype.insertTextViaHistory = function (params) {
        if (!params.correctAndCheckParams())
            return new InsertTextViaHistoryResult(false, null);
        this.history.addAndRedo(new insert_text_history_item_1.InsertTextHistoryItem(this.modelManipulator, params));
        return new InsertTextViaHistoryResult(true, new fixed_1.FixedInterval(params.subDocPos.position, params.text.length));
    };
    TextManipulator.prototype.insertTextInner = function (params) {
        var insertedRun = this.insertRunInternal(params.subDocPos, params.charPropsBundle, params.runType, params.text);
        var textRun = params.subDocPos.subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex];
        textRun.paragraph.length += params.text.length;
        this.chunkSizeCorrector.correctChunkSizeAtInsertPosition(params.subDocPos.subDocument, params.subDocPos.position);
        this.modelManipulator.notifyModelChanged(new simple_run_inserted_1.SimpleRunInsertedSubDocumentChange(params.subDocPos.subDocument.id, params.subDocPos.position, params.text.length, textRun.maskedCharacterProperties, textRun.characterStyle, params.runType, params.text));
    };
    TextManipulator.prototype.getLastModifiableHistoryItem = function (checkType) {
        var _a;
        return (_a = this.getLastModifiableHistoryItemNode(checkType)) === null || _a === void 0 ? void 0 : _a.item;
    };
    TextManipulator.prototype.getLastModifiableHistoryItemNode = function (checkType) {
        var history = this.history;
        if (!history)
            return null;
        var historyItems = history.historyItems;
        var result = history.currentIndex == historyItems.length - 1 ? this.getLastHistoryItemNode(historyItems, null, checkType) : null;
        return !result.empty ? result : null;
    };
    TextManipulator.prototype.getLastHistoryItemNode = function (historyItems, parent, checkType) {
        for (var ind = historyItems.length - 1, item = void 0; item = historyItems[ind]; ind--) {
            if (!item.canBeMerged())
                return new NullHistoryItemNode();
            else if (checkType(item))
                return new HistoryItemNode(item, parent);
            else if (item instanceof history_item_1.CompositionHistoryItem) {
                var lowLevelResult = this.getLastHistoryItemNode(item.historyItems, new ParentHistoryItemNode(item, parent), checkType);
                if (lowLevelResult.exist)
                    return lowLevelResult;
            }
        }
        return new UndefinedHistoryItemNode();
    };
    return TextManipulator;
}(runs_base_manipulator_1.RunsBaseManipulator));
exports.TextManipulator = TextManipulator;
var HistoryItemNode = (function () {
    function HistoryItemNode(item, parent) {
        this.item = item;
        this.parent = parent;
    }
    Object.defineProperty(HistoryItemNode.prototype, "root", {
        get: function () {
            var result = this;
            while (result.parent)
                result = result.parent;
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HistoryItemNode.prototype, "exist", {
        get: function () { return this.item !== undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HistoryItemNode.prototype, "empty", {
        get: function () { return !this.item; },
        enumerable: true,
        configurable: true
    });
    return HistoryItemNode;
}());
var ParentHistoryItemNode = (function (_super) {
    tslib_1.__extends(ParentHistoryItemNode, _super);
    function ParentHistoryItemNode(item, parent) {
        return _super.call(this, item, parent) || this;
    }
    return ParentHistoryItemNode;
}(HistoryItemNode));
var UndefinedHistoryItemNode = (function (_super) {
    tslib_1.__extends(UndefinedHistoryItemNode, _super);
    function UndefinedHistoryItemNode() {
        return _super.call(this, undefined, null) || this;
    }
    return UndefinedHistoryItemNode;
}(HistoryItemNode));
var NullHistoryItemNode = (function (_super) {
    tslib_1.__extends(NullHistoryItemNode, _super);
    function NullHistoryItemNode() {
        return _super.call(this, null, null) || this;
    }
    return NullHistoryItemNode;
}(HistoryItemNode));
