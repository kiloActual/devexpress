"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var grid_maker_1 = require("../../tables/grid/grid-maker");
var table_base_structures_1 = require("../../tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../tables/secondary-structures/table-units");
var TableNormalizator = (function () {
    function TableNormalizator(table, setGridBefore, setGridAfter, setWidthBefore, setWidthAfter, setCellSpan, setVerticalMerging) {
        this.setGridBefore = setGridBefore;
        this.setGridAfter = setGridAfter;
        this.setWidthBefore = setWidthBefore;
        this.setWidthAfter = setWidthAfter;
        this.setCellSpan = setCellSpan;
        this.setVerticalMerging = setVerticalMerging;
        this.table = table;
        this.tableCellGridInfos = [];
        this.tableCellInfos = [];
        grid_maker_1.GridMaker.fillGridInfo(this.table, this.tableCellGridInfos, this.tableCellInfos);
    }
    TableNormalizator.prototype.normalizeAll = function () {
        this.transformTableToSquare();
        this.normalizeAllHorizontalSpans();
        this.normalizeWidthBeforeAfter();
        this.normalizeVerticalSpans();
        return this;
    };
    TableNormalizator.prototype.transformTableToSquare = function () {
        var rows = this.table.rows;
        var logicalCells = list_1.ListUtils.maxExtended(rows, function (row) { return row.getTotalCellsInRowConsiderGrid(); }).maxValue;
        for (var rowIndex = 0, row = void 0; row = rows[rowIndex]; rowIndex++)
            if (logicalCells != row.getTotalCellsInRowConsiderGrid())
                this.setGridAfter(this.table, rowIndex, logicalCells);
        return this;
    };
    TableNormalizator.prototype.normalizeAllHorizontalSpans = function () {
        var _this = this;
        var rowsIndexesInterval = new fixed_1.FixedInterval(0, this.tableCellGridInfos.length);
        var _loop_1 = function (gridCellIndex) {
            if (list_1.ListUtils.allOfOnInterval(rowsIndexesInterval, function (rowIndex) {
                var info = _this.tableCellGridInfos[rowIndex][gridCellIndex];
                return info ? gridCellIndex < info.getGridCellIndexEnd(_this.table) - 1 : true;
            })) {
                list_1.ListUtils.forEachOnInterval(rowsIndexesInterval, function (rowIndex) {
                    var info = _this.tableCellGridInfos[rowIndex][gridCellIndex];
                    if (info) {
                        var cellIndex = info.getCellIndexAbs(rowIndex);
                        _this.setCellSpan(_this.table, rowIndex, cellIndex, _this.table.rows[rowIndex].cells[cellIndex].columnSpan - 1);
                    }
                    else {
                        var row = _this.table.rows[rowIndex];
                        if (gridCellIndex < row.gridBefore)
                            _this.setGridBefore(_this.table, rowIndex, row.gridBefore - 1);
                        else
                            _this.setGridAfter(_this.table, rowIndex, row.gridAfter - 1);
                    }
                });
            }
        };
        for (var gridCellIndex = this.tableCellGridInfos[0].length - 2; gridCellIndex >= 0; --gridCellIndex) {
            _loop_1(gridCellIndex);
        }
        return this;
    };
    TableNormalizator.prototype.normalizeWidthBeforeAfter = function () {
        var rows = this.table.rows;
        for (var rowIndex = 0, row = void 0; row = rows[rowIndex]; rowIndex++) {
            TableNormalizator.setWidthBeforeAfter(this.table, rowIndex, row.gridBefore, row.widthBefore, this.setWidthBefore);
            TableNormalizator.setWidthBeforeAfter(this.table, rowIndex, row.gridAfter, row.widthAfter, this.setWidthAfter);
        }
    };
    TableNormalizator.prototype.normalizeVerticalSpans = function () {
        var _this = this;
        var rows = this.table.rows;
        list_1.ListUtils.forEach(rows, function (row, rowIndex) {
            list_1.ListUtils.forEach(row.cells, function (cell, cellIndex) {
                var info = _this.tableCellInfos[rowIndex][cellIndex];
                var mustBe = info.getNumRowsInCell() == 1 ? table_base_structures_1.TableCellMergingState.None : (info.getStartRowIndex() == rowIndex ? table_base_structures_1.TableCellMergingState.Restart : table_base_structures_1.TableCellMergingState.Continue);
                if (cell.verticalMerging != mustBe)
                    _this.setVerticalMerging(_this.table, rowIndex, cellIndex, mustBe);
            });
        });
    };
    TableNormalizator.setWidthBeforeAfter = function (table, rowIndex, gridNum, width, setWidth) {
        if (gridNum == 0 && (width.type != table_units_1.TableWidthUnitType.Nil || width.value != 0))
            setWidth(table, rowIndex, table_units_1.TableWidthUnit.createDefault());
    };
    return TableNormalizator;
}());
exports.TableNormalizator = TableNormalizator;
