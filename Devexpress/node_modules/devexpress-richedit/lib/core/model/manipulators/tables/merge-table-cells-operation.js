"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var paragraph_properties_history_items_1 = require("../../history/items/paragraph-properties-history-items");
var table_cell_properties_history_items_1 = require("../../history/items/tables/table-cell-properties-history-items");
var sub_document_1 = require("../../sub-document");
var table_1 = require("../../tables/main-structures/table");
var table_cell_properties_1 = require("../../tables/properties/table-cell-properties");
var table_base_structures_1 = require("../../tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../tables/secondary-structures/table-units");
var table_utils_1 = require("../../tables/table-utils");
var insert_paragraph_manipulator_params_1 = require("../paragraph-manipulator/insert-paragraph-manipulator-params");
var MergeTableCellsOperationBase = (function () {
    function MergeTableCellsOperationBase(modelManager, subDocument) {
        this.needDeleteNextTableCell = false;
        this.modelManager = modelManager;
        this.subDocument = subDocument;
    }
    Object.defineProperty(MergeTableCellsOperationBase.prototype, "modelManipulator", {
        get: function () { return this.modelManager.modelManipulator; },
        enumerable: true,
        configurable: true
    });
    MergeTableCellsOperationBase.prototype.execute = function (position, suppressNormalizeTableRows, inpPos) {
        var nextCellPosition = this.calculateNextCell(position);
        this.updateCellsProperties(position, nextCellPosition);
        var nextCell = nextCellPosition.cell;
        var cell = position.cell;
        var isEmptyCell = this.isEmptyCell(cell);
        var isEmptyNextCell = this.isEmptyCell(nextCell);
        if (!isEmptyNextCell) {
            var insertPosition = cell.endParagrapPosition.value - 1;
            var nextCellLastParagraph = this.subDocument.paragraphs[this.getCellLastParagraphIndex(nextCell)];
            if (!isEmptyCell) {
                this.modelManager.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(this.subDocument, insertPosition), inpPos));
                insertPosition++;
            }
            this.applyParagraphProperties(this.getCellLastParagraphIndex(cell), nextCellLastParagraph);
            this.modelManager.modelManipulator.range.copyIntervalTo(this.subDocument, fixed_1.FixedInterval.fromPositions(nextCell.startParagraphPosition.value, nextCell.endParagrapPosition.value - 1), insertPosition);
        }
        this.deleteTableCellWithContent(nextCellPosition);
        this.modelManipulator.table.normalizeCellColumnSpans(this.subDocument, position.table, true);
        if (!suppressNormalizeTableRows)
            this.modelManipulator.table.normalizeRows(this.subDocument, cell.parentRow.parentTable);
    };
    MergeTableCellsOperationBase.prototype.getCellLastParagraphIndex = function (cell) {
        return this.subDocument.getParagraphIndexByPosition(cell.endParagrapPosition.value - 1);
    };
    MergeTableCellsOperationBase.prototype.applyParagraphProperties = function (targetIndex, source) {
        var target = this.subDocument.paragraphs[targetIndex];
        if (!target.maskedParagraphProperties.equals(source.maskedParagraphProperties) || target.numberingListIndex !== source.numberingListIndex || target.listLevelIndex !== source.listLevelIndex || target.tabs.equals(source.tabs) || target.paragraphStyle !== source.paragraphStyle)
            this.modelManager.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphPropertiesHistoryItem(this.modelManager.modelManipulator, this.subDocument, targetIndex, source.maskedParagraphProperties, source.paragraphStyle, source.numberingListIndex, source.listLevelIndex, source.tabs));
    };
    MergeTableCellsOperationBase.prototype.deleteTableCellWithContent = function (nextCellPosition) {
        if (this.needDeleteNextTableCell)
            this.modelManipulator.table.removeTableCellWithContent(this.subDocument, nextCellPosition.table, nextCellPosition.rowIndex, nextCellPosition.cellIndex);
        else {
            var nextCell = nextCellPosition.cell;
            this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, fixed_1.FixedInterval.fromPositions(nextCell.startParagraphPosition.value, nextCell.endParagrapPosition.value - 1)), true, false);
        }
    };
    MergeTableCellsOperationBase.prototype.isEmptyCell = function (cell) {
        return cell.endParagrapPosition.value - cell.startParagraphPosition.value === 1;
    };
    return MergeTableCellsOperationBase;
}());
exports.MergeTableCellsOperationBase = MergeTableCellsOperationBase;
var MergeTwoTableCellsHorizontallyOperation = (function (_super) {
    tslib_1.__extends(MergeTwoTableCellsHorizontallyOperation, _super);
    function MergeTwoTableCellsHorizontallyOperation() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.needDeleteNextTableCell = true;
        return _this;
    }
    MergeTwoTableCellsHorizontallyOperation.prototype.calculateNextCell = function (position) {
        var nextCellIndex = position.cellIndex + 1;
        return table_1.TablePosition.createAndInit(position.table, position.rowIndex, nextCellIndex);
    };
    MergeTwoTableCellsHorizontallyOperation.prototype.updateCellsProperties = function (patternCellPosition, nextCellPosition) {
        var patternCell = patternCellPosition.cell;
        var nextCell = nextCellPosition.cell;
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellColumnSpanHistoryItem(this.modelManager.modelManipulator, this.subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, patternCell.columnSpan + nextCell.columnSpan));
        var patternCellPreferredWidth = patternCell.preferredWidth;
        var nextCellPreferredWidth = nextCell.preferredWidth;
        if (patternCellPreferredWidth && nextCellPreferredWidth && nextCellPreferredWidth.type === patternCellPreferredWidth.type) {
            var newPreferredWidth = table_units_1.TableWidthUnit.create(patternCellPreferredWidth.value + nextCellPreferredWidth.value, patternCellPreferredWidth.type);
            this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManager.modelManipulator, this.subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, newPreferredWidth));
        }
    };
    return MergeTwoTableCellsHorizontallyOperation;
}(MergeTableCellsOperationBase));
exports.MergeTwoTableCellsHorizontallyOperation = MergeTwoTableCellsHorizontallyOperation;
var MergeTwoTableCellsVerticallyOperation = (function (_super) {
    tslib_1.__extends(MergeTwoTableCellsVerticallyOperation, _super);
    function MergeTwoTableCellsVerticallyOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MergeTwoTableCellsVerticallyOperation.prototype.calculateNextCell = function (position) {
        var nextRowIndex = position.rowIndex + 1;
        var nextRow = position.table.rows[nextRowIndex];
        var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(position.cell);
        return table_1.TablePosition.createAndInit(position.table, nextRowIndex, table_utils_1.TableCellUtils.getCellIndexByColumnIndex(nextRow, columnIndex));
    };
    MergeTwoTableCellsVerticallyOperation.prototype.updateCellsProperties = function (patternCellPosition, nextCellPosition) {
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.Restart));
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, nextCellPosition.table.index, nextCellPosition.rowIndex, nextCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.Continue));
    };
    return MergeTwoTableCellsVerticallyOperation;
}(MergeTableCellsOperationBase));
exports.MergeTwoTableCellsVerticallyOperation = MergeTwoTableCellsVerticallyOperation;
var InsertTableCellWithShiftToTheDownOperation = (function (_super) {
    tslib_1.__extends(InsertTableCellWithShiftToTheDownOperation, _super);
    function InsertTableCellWithShiftToTheDownOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableCellWithShiftToTheDownOperation.prototype.calculateNextCell = function (position) {
        return table_1.TablePosition.createAndInit(position.table, position.rowIndex - 1, position.cellIndex);
    };
    InsertTableCellWithShiftToTheDownOperation.prototype.updateCellsProperties = function (patternCellPosition, nextCellPosition) {
        var manipulator = this.modelManager.modelManipulator;
        var subDocument = this.subDocument;
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellBordersHistoryItem(manipulator, subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, [
            nextCellPosition.cell.properties.borders.topBorder.clone(),
            nextCellPosition.cell.properties.borders.rightBorder.clone(),
            nextCellPosition.cell.properties.borders.bottomBorder.clone(),
            nextCellPosition.cell.properties.borders.leftBorder.clone(),
            nextCellPosition.cell.properties.borders.topLeftDiagonalBorder.clone(),
            nextCellPosition.cell.properties.borders.topRightDiagonalBorder.clone()
        ], [nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopBorder),
            nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseRightBorder),
            nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder),
            nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder),
            nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder),
            nextCellPosition.cell.properties.getUseValue(table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder)]));
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellShadingInfoHistoryItem(manipulator, subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, nextCellPosition.cell.properties.shadingInfo, true));
        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalAlignmentHistoryItem(manipulator, subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, nextCellPosition.cell.properties.verticalAlignment, true));
    };
    InsertTableCellWithShiftToTheDownOperation.prototype.deleteTableCellWithContent = function (nextCellPosition) {
        var nextCell = nextCellPosition.cell;
        if (nextCell.endParagrapPosition.value - nextCell.startParagraphPosition.value > 1)
            this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, fixed_1.FixedInterval.fromPositions(nextCell.startParagraphPosition.value, nextCell.endParagrapPosition.value - 1)), true, false);
    };
    return InsertTableCellWithShiftToTheDownOperation;
}(MergeTableCellsOperationBase));
exports.InsertTableCellWithShiftToTheDownOperation = InsertTableCellWithShiftToTheDownOperation;
var DeleteOneTableCellWithShiftToTheUpOperation = (function (_super) {
    tslib_1.__extends(DeleteOneTableCellWithShiftToTheUpOperation, _super);
    function DeleteOneTableCellWithShiftToTheUpOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DeleteOneTableCellWithShiftToTheUpOperation.prototype.execute = function (position, suppressNormalizeTableRows, inpPos) {
        if (position.rowIndex === position.table.rows.length - 1)
            this.deleteContentFromCell(position.cell);
        else {
            this.deleteContentFromCell(position.cell);
            _super.prototype.execute.call(this, position, suppressNormalizeTableRows, inpPos);
        }
    };
    DeleteOneTableCellWithShiftToTheUpOperation.prototype.updateCellsProperties = function (patternCellPosition, nextCellPosition) {
        if (patternCellPosition.cell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
            this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, patternCellPosition.table.index, patternCellPosition.rowIndex, patternCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.None));
            if (nextCellPosition.rowIndex === nextCellPosition.table.rows.length - 1)
                this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, nextCellPosition.table.index, nextCellPosition.rowIndex, nextCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.None));
            else {
                var afterNextCellPosition = this.calculateNextCell(nextCellPosition);
                if (afterNextCellPosition.cell && afterNextCellPosition.cell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                    this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, nextCellPosition.table.index, nextCellPosition.rowIndex, nextCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.Restart));
                else
                    this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, this.subDocument, nextCellPosition.table.index, nextCellPosition.rowIndex, nextCellPosition.cellIndex, table_base_structures_1.TableCellMergingState.None));
            }
        }
    };
    DeleteOneTableCellWithShiftToTheUpOperation.prototype.deleteContentFromCell = function (cell) {
        var cellInterval = cell.interval;
        if (--cellInterval.length > 0)
            this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, cellInterval), true, false);
    };
    return DeleteOneTableCellWithShiftToTheUpOperation;
}(MergeTwoTableCellsVerticallyOperation));
exports.DeleteOneTableCellWithShiftToTheUpOperation = DeleteOneTableCellWithShiftToTheUpOperation;
