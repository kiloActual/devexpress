"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var calculator_1 = require("../../../layout-formatter/table/grid-engine/calculators/column-width-engine/calculator");
var border_info_1 = require("../../borders/border-info");
var enums_1 = require("../../borders/enums");
var table_style_changed_1 = require("../../changes/sub-document/style/table-style-changed");
var cell_inserted_1 = require("../../changes/sub-document/table/cell-inserted");
var cell_merged_horizontally_1 = require("../../changes/sub-document/table/cell-merged-horizontally");
var cell_removed_1 = require("../../changes/sub-document/table/cell-removed");
var cell_splitted_horizontally_1 = require("../../changes/sub-document/table/cell-splitted-horizontally");
var created_1 = require("../../changes/sub-document/table/created");
var removed_1 = require("../../changes/sub-document/table/removed");
var row_inserted_1 = require("../../changes/sub-document/table/row-inserted");
var row_removed_1 = require("../../changes/sub-document/table/row-removed");
var start_position_shifted_1 = require("../../changes/sub-document/table/start-position-shifted");
var paragraph_properties_history_items_1 = require("../../history/items/paragraph-properties-history-items");
var remove_interval_history_item_1 = require("../../history/items/remove-interval-history-item");
var change_table_cell_history_items_1 = require("../../history/items/tables/change-table-cell-history-items");
var create_table_history_item_1 = require("../../history/items/tables/create-table-history-item");
var remove_table_cell_history_item_1 = require("../../history/items/tables/remove-table-cell-history-item");
var remove_table_history_item_1 = require("../../history/items/tables/remove-table-history-item");
var remove_table_row_history_item_1 = require("../../history/items/tables/remove-table-row-history-item");
var table_cell_properties_history_items_1 = require("../../history/items/tables/table-cell-properties-history-items");
var table_properties_history_items_1 = require("../../history/items/tables/table-properties-history-items");
var table_row_properties_history_items_1 = require("../../history/items/tables/table-row-properties-history-items");
var model_iterator_1 = require("../../model-iterator");
var paragraph_properties_1 = require("../../paragraph/paragraph-properties");
var sub_document_1 = require("../../sub-document");
var table_1 = require("../../tables/main-structures/table");
var table_cell_1 = require("../../tables/main-structures/table-cell");
var table_row_1 = require("../../tables/main-structures/table-row");
var table_cell_properties_1 = require("../../tables/properties/table-cell-properties");
var table_properties_1 = require("../../tables/properties/table-properties");
var table_row_properties_1 = require("../../tables/properties/table-row-properties");
var table_base_structures_1 = require("../../tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../tables/secondary-structures/table-units");
var table_utils_1 = require("../../tables/table-utils");
var base_manipulator_1 = require("../base-manipulator");
var insert_paragraph_manipulator_params_1 = require("../paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_table_cell_operation_1 = require("./insert-table-cell-operation");
var insert_table_row_operation_1 = require("./insert-table-row-operation");
var merge_table_cells_operation_1 = require("./merge-table-cells-operation");
var table_cell_properties_manipulator_1 = require("./table-cell-properties-manipulator");
var table_properties_manipulator_1 = require("./table-properties-manipulator");
var table_row_properties_manipulator_1 = require("./table-row-properties-manipulator");
var TablesManipulator = (function (_super) {
    tslib_1.__extends(TablesManipulator, _super);
    function TablesManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.cellProperties = new table_cell_properties_manipulator_1.TableCellPropertiesManipulator(manipulator);
        _this.tableProperties = new table_properties_manipulator_1.TablePropertiesManipulator(manipulator);
        _this.rowProperties = new table_row_properties_manipulator_1.TableRowPropertiesManipulator(manipulator);
        return _this;
    }
    TablesManipulator.removeTableCore = function (table, tables, tablesByLevels) {
        var position = table.getStartPosition();
        var tblLevel = tablesByLevels[table.nestedLevel];
        tblLevel.splice(search_1.SearchUtils.binaryIndexOf(tblLevel, function (t) { return t.getStartPosition() - position; }), 1);
        tables.splice(table.index, 1);
        table_1.Table.advanceIndices(tables, table.index, -1);
    };
    TablesManipulator.prototype.createTable = function (subDocument, firstParagraphIndex, rowCount, cellCount) {
        var paragraph = subDocument.paragraphs[firstParagraphIndex];
        var parentCell = table_1.Table.getTableCellByPosition(subDocument.tables, paragraph.startLogPosition.value);
        var newTable = new table_1.Table(new table_properties_1.TableProperties(), subDocument.documentModel.getDefaultTableStyle());
        this.createTableStructure(subDocument, firstParagraphIndex, newTable, rowCount, cellCount);
        this.insertTableCore(newTable, subDocument.tables, subDocument.tablesByLevels, parentCell);
        this.modelManipulator.notifyModelChanged(new created_1.TableCreatedSubDocumentChange(subDocument.id, newTable));
        return newTable;
    };
    TablesManipulator.prototype.removeTable = function (subDocument, table) {
        var startPosition = table.getStartPosition();
        var endPosition = table.getEndPosition();
        table.destructor(subDocument.positionManager);
        var removedText = subDocument.getText(table.interval);
        TablesManipulator.removeTableCore(table, subDocument.tables, subDocument.tablesByLevels);
        this.modelManipulator.notifyModelChanged(new removed_1.TableRemovedSubDocumentChange(subDocument.id, startPosition, endPosition, table.nestedLevel, removedText));
    };
    TablesManipulator.prototype.restoreRemovedTable = function (subDocument, table, cellsRanges) {
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                var cellRange = cellsRanges[rowIndex][cellIndex];
                cell.startParagraphPosition = subDocument.positionManager.registerPosition(cellRange.start);
                cell.endParagrapPosition = subDocument.positionManager.registerPosition(cellRange.end);
            }
        }
        table.parentCell = table_1.Table.getTableCellByPosition(subDocument.tables, table.getStartPosition());
        this.insertTableCore(table, subDocument.tables, subDocument.tablesByLevels, table.parentCell);
        this.modelManipulator.notifyModelChanged(new created_1.TableCreatedSubDocumentChange(subDocument.id, table));
    };
    TablesManipulator.prototype.pasteTable = function (subDocument, patternTable, position) {
        var patternCell = table_1.Table.getTableCellByPosition(subDocument.tables, position);
        var newTable = new table_1.Table(patternTable.properties, this.model.stylesManager.addTableStyle(patternTable.style));
        newTable.preferredWidth = patternTable.preferredWidth.clone();
        newTable.lookTypes = patternTable.lookTypes;
        for (var rowIndex = 0, patternRow = void 0; patternRow = patternTable.rows[rowIndex]; rowIndex++) {
            var newRow = new table_row_1.TableRow(newTable, subDocument.documentModel.cache.tableRowPropertiesCache.getItem(patternRow.properties.clone()));
            newRow.gridAfter = patternRow.gridAfter;
            newRow.gridBefore = patternRow.gridBefore;
            if (patternRow.tablePropertiesException)
                newRow.tablePropertiesException = patternRow.tablePropertiesException.clone();
            newRow.widthAfter = patternRow.widthAfter.clone();
            newRow.widthBefore = patternRow.widthBefore.clone();
            newRow.height = patternRow.height.clone();
            if (patternRow.tablePropertiesException)
                newRow.tablePropertiesException = patternRow.tablePropertiesException.clone();
            for (var cellIndex = 0, patternCell_1; patternCell_1 = patternRow.cells[cellIndex]; cellIndex++) {
                var cellLength = patternCell_1.endParagrapPosition.value - patternCell_1.startParagraphPosition.value;
                var newCell = new table_cell_1.TableCell(newRow, subDocument.documentModel.cache.tableCellPropertiesCache.getItem(patternCell_1.properties.clone()));
                newCell.startParagraphPosition = subDocument.positionManager.registerPosition(position);
                position += cellLength;
                newCell.endParagrapPosition = subDocument.positionManager.registerPosition(position);
                newCell.columnSpan = patternCell_1.columnSpan;
                newCell.conditionalFormatting = patternCell_1.conditionalFormatting;
                newCell.verticalMerging = patternCell_1.verticalMerging;
                newCell.preferredWidth = patternCell_1.preferredWidth.clone();
                newRow.cells.push(newCell);
            }
            newTable.rows.push(newRow);
        }
        this.insertTableCore(newTable, subDocument.tables, subDocument.tablesByLevels, patternCell);
        this.modelManipulator.notifyModelChanged(new created_1.TableCreatedSubDocumentChange(subDocument.id, newTable));
        return newTable;
    };
    TablesManipulator.prototype.insertRow = function (subDocument, tableIndex, patternRow, targetRowIndex, cellIntervals) {
        var table = subDocument.tables[tableIndex];
        var row = new table_row_1.TableRow(table, patternRow.properties);
        if (cellIntervals.length !== patternRow.cells.length)
            throw new Error("cellIntervals.length should be equal to patternRow.cells.length");
        row.gridAfter = patternRow.gridAfter;
        row.gridBefore = patternRow.gridBefore;
        row.height = patternRow.height.clone();
        row.properties = patternRow.properties;
        row.tablePropertiesException = patternRow.tablePropertiesException;
        row.widthAfter = patternRow.widthAfter.clone();
        row.widthBefore = patternRow.widthBefore.clone();
        for (var i = 0, interval = void 0; interval = cellIntervals[i]; i++) {
            var patternCell = patternRow.cells[i];
            var cell = new table_cell_1.TableCell(row, patternCell.properties);
            cell.startParagraphPosition = subDocument.positionManager.registerPosition(interval.start);
            cell.endParagrapPosition = subDocument.positionManager.registerPosition(interval.end);
            cell.columnSpan = patternCell.columnSpan;
            cell.conditionalFormatting = patternCell.conditionalFormatting;
            cell.preferredWidth = patternCell.preferredWidth.clone();
            cell.verticalMerging = patternCell.verticalMerging;
            cell.style = patternCell.style;
            row.cells.push(cell);
        }
        table.rows.splice(targetRowIndex, 0, row);
        var nextRow = table.rows[targetRowIndex + 1];
        if (nextRow) {
            subDocument.positionManager.unregisterPosition(nextRow.cells[0].startParagraphPosition);
            nextRow.cells[0].startParagraphPosition = subDocument.positionManager.registerPosition(row.getEndPosition());
        }
        this.modelManipulator.notifyModelChanged(new row_inserted_1.TableRowInsertedSubDocumentChange(subDocument.id, table, targetRowIndex));
    };
    TablesManipulator.prototype.removeRow = function (subDocument, tableIndex, rowIndex) {
        var table = subDocument.tables[tableIndex];
        TablesManipulator.removeRowCore(subDocument, table, rowIndex);
        this.modelManipulator.notifyModelChanged(new row_removed_1.TableRowRemovedSubDocumentChange(subDocument.id, table, rowIndex));
    };
    TablesManipulator.removeRowCore = function (subDocument, table, rowIndex) {
        var row = table.rows[rowIndex];
        row.destructor(subDocument.positionManager);
        var nextRow = table.rows[rowIndex + 1];
        if (nextRow) {
            var nextRowFirstCell = nextRow.cells[0];
            subDocument.positionManager.unregisterPosition(nextRowFirstCell.startParagraphPosition);
            nextRowFirstCell.startParagraphPosition = subDocument.positionManager.registerPosition(row.getStartPosition());
        }
        table.rows.splice(rowIndex, 1);
    };
    TablesManipulator.prototype.removeCell = function (subDocument, table, rowIndex, cellIndex) {
        var row = table.rows[rowIndex];
        var cell = row.cells[cellIndex];
        var nextCell = row.cells[cellIndex + 1];
        if (!nextCell && table.rows.length > rowIndex + 1)
            nextCell = table.rows[rowIndex + 1].cells[0];
        cell.destructor(subDocument.positionManager);
        if (nextCell) {
            subDocument.positionManager.unregisterPosition(nextCell.startParagraphPosition);
            nextCell.startParagraphPosition = subDocument.positionManager.registerPosition(cell.startParagraphPosition.value);
        }
        row.cells.splice(cellIndex, 1);
        this.modelManipulator.notifyModelChanged(new cell_removed_1.TableCellRemovedSubDocumentChange(subDocument.id, table, rowIndex, cellIndex));
    };
    TablesManipulator.prototype.insertCell = function (subDocument, table, rowIndex, cellIndex, patternCell, length) {
        var row = table.rows[rowIndex];
        var cell = new table_cell_1.TableCell(row, patternCell.properties);
        cell.columnSpan = patternCell.columnSpan;
        cell.conditionalFormatting = patternCell.conditionalFormatting;
        cell.preferredWidth = patternCell.preferredWidth.clone();
        cell.style = patternCell.style;
        cell.verticalMerging = patternCell.verticalMerging;
        var startPosition = 0;
        if (cellIndex > 0)
            startPosition = row.cells[cellIndex - 1].endParagrapPosition.value;
        else if (rowIndex > 0)
            startPosition = table.rows[rowIndex - 1].getEndPosition();
        else
            startPosition = table.getStartPosition();
        cell.startParagraphPosition = subDocument.positionManager.registerPosition(startPosition);
        cell.endParagrapPosition = subDocument.positionManager.registerPosition(startPosition + length);
        row.cells.splice(cellIndex, 0, cell);
        var nextCell = row.cells[cellIndex + 1];
        if (!nextCell && table.rows.length > rowIndex + 1)
            nextCell = table.rows[rowIndex + 1].cells[0];
        if (nextCell) {
            subDocument.positionManager.unregisterPosition(nextCell.startParagraphPosition);
            nextCell.startParagraphPosition = subDocument.positionManager.registerPosition(cell.endParagrapPosition.value);
        }
        this.modelManipulator.notifyModelChanged(new cell_inserted_1.TableCellInsertedSubDocumentChange(subDocument.id, table, rowIndex, cellIndex));
    };
    TablesManipulator.prototype.insertParagraphToTheCellStartAndShiftContent = function (subDocument, cell, inpPos) {
        var table = cell.parentRow.parentTable;
        this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(subDocument, cell.startParagraphPosition.value), inpPos));
        var nextTable = subDocument.tables[table.index + 1];
        var shiftingTables = [];
        while (nextTable && nextTable.nestedLevel > table.nestedLevel) {
            var nextTableStartPosition = nextTable.getStartPosition();
            if (nextTableStartPosition === cell.startParagraphPosition.value)
                shiftingTables.push(nextTable);
            else if (nextTableStartPosition > cell.startParagraphPosition.value)
                break;
            nextTable = subDocument.tables[nextTable.index + 1];
        }
        for (var i = shiftingTables.length - 1, shiftingTable = void 0; shiftingTable = shiftingTables[i]; i--) {
            this.history.addAndRedo(new change_table_cell_history_items_1.ShiftTableStartPositionToTheRightHistoryItem(this.modelManipulator, subDocument, shiftingTable.index));
        }
    };
    TablesManipulator.prototype.changeTableStartPosition = function (subDocument, table, newPosition) {
        var cell = table.rows[0].cells[0];
        var oldPosition = cell.startParagraphPosition.value;
        subDocument.positionManager.unregisterPosition(cell.startParagraphPosition);
        cell.startParagraphPosition = subDocument.positionManager.registerPosition(newPosition);
        this.modelManipulator.notifyModelChanged(new start_position_shifted_1.TableStartPositionShiftedSubDocumentChange(subDocument.id, table, oldPosition, newPosition));
    };
    TablesManipulator.prototype.shiftTableStartPositionToTheRight = function (subDocument, table) {
        this.changeTableStartPosition(subDocument, table, table.rows[0].cells[0].startParagraphPosition.value + 1);
    };
    TablesManipulator.prototype.restoreShiftedTableStartPositionToTheRight = function (subDocument, table) {
        this.changeTableStartPosition(subDocument, table, table.rows[0].cells[0].startParagraphPosition.value - 1);
    };
    TablesManipulator.prototype.splitTableCellHorizontally = function (subDocument, table, rowIndex, cellIndex, rightDirection, copyProperties) {
        var row = table.rows[rowIndex];
        if (rightDirection)
            this.splitTableCellToTheRightCore(subDocument, row, cellIndex, copyProperties);
        else
            this.splitTableCellToTheLeftCore(subDocument, row, cellIndex, copyProperties);
        this.modelManipulator.notifyModelChanged(new cell_splitted_horizontally_1.TableCellSplittedHorizontallySubDocumentChange(subDocument.id, table, rowIndex, rightDirection ? cellIndex : (cellIndex + 1), rightDirection));
    };
    TablesManipulator.prototype.restoreSplittedCellHorizontally = function (subDocument, table, rowIndex, cellIndex, rightDirection) {
        var row = table.rows[rowIndex];
        var targetCell = row.cells[cellIndex];
        var removingCell = rightDirection ? row.cells[cellIndex + 1] : row.cells[cellIndex - 1];
        if (rightDirection) {
            subDocument.positionManager.unregisterPosition(targetCell.endParagrapPosition);
            targetCell.endParagrapPosition = subDocument.positionManager.registerPosition(removingCell.endParagrapPosition.value);
            removingCell.destructor(subDocument.positionManager);
            row.cells.splice(cellIndex + 1, 1);
        }
        else {
            subDocument.positionManager.unregisterPosition(targetCell.startParagraphPosition);
            targetCell.startParagraphPosition = subDocument.positionManager.registerPosition(removingCell.startParagraphPosition.value);
            removingCell.destructor(subDocument.positionManager);
            row.cells.splice(cellIndex - 1, 1);
        }
        this.modelManipulator.notifyModelChanged(new cell_merged_horizontally_1.TableCellMergedHorizontallySubDocumentChange(subDocument.id, table, rowIndex, rightDirection ? cellIndex : (cellIndex - 1), rightDirection));
    };
    TablesManipulator.prototype.splitTableCellToTheLeftCore = function (subDocument, row, splittingCellIndex, copyProperties) {
        if (splittingCellIndex < 0)
            throw new Error("splittingCellIndex should be > 0");
        var splittingCell = row.cells[splittingCellIndex];
        var movingParagraph = subDocument.getParagraphByPosition(splittingCell.startParagraphPosition.value);
        var newTableCell = new table_cell_1.TableCell(row, copyProperties ?
            splittingCell.properties : subDocument.documentModel.cache.tableCellPropertiesCache.getItem(new table_cell_properties_1.TableCellProperties()));
        newTableCell.preferredWidth = splittingCell.preferredWidth.clone();
        row.cells.splice(splittingCellIndex, 0, newTableCell);
        newTableCell.startParagraphPosition = subDocument.positionManager.registerPosition(movingParagraph.startLogPosition.value);
        newTableCell.endParagrapPosition = subDocument.positionManager.registerPosition(movingParagraph.getEndPosition());
        subDocument.positionManager.unregisterPosition(splittingCell.startParagraphPosition);
        splittingCell.startParagraphPosition = subDocument.positionManager.registerPosition(movingParagraph.getEndPosition());
    };
    TablesManipulator.prototype.splitTableCellToTheRightCore = function (subDocument, row, splittingCellIndex, copyProperties) {
        if (splittingCellIndex < 0)
            throw new Error("splittingCellIndex should be > 0");
        var splittingCell = row.cells[splittingCellIndex];
        var movingParagraph = subDocument.getParagraphByPosition(splittingCell.endParagrapPosition.value - 1);
        var newTableCell = new table_cell_1.TableCell(row, copyProperties ?
            splittingCell.properties : subDocument.documentModel.cache.tableCellPropertiesCache.getItem(new table_cell_properties_1.TableCellProperties()));
        newTableCell.preferredWidth = splittingCell.preferredWidth.clone();
        row.cells.splice(splittingCellIndex + 1, 0, newTableCell);
        newTableCell.startParagraphPosition = subDocument.positionManager.registerPosition(movingParagraph.startLogPosition.value);
        newTableCell.endParagrapPosition = subDocument.positionManager.registerPosition(movingParagraph.getEndPosition());
        subDocument.positionManager.unregisterPosition(splittingCell.endParagrapPosition);
        splittingCell.endParagrapPosition = subDocument.positionManager.registerPosition(movingParagraph.startLogPosition.value);
    };
    TablesManipulator.prototype.setTableStyle = function (subDocument, tableIndex, style) {
        var table = subDocument.tables[tableIndex];
        table.style = style;
        this.resetParagraphCharacterMergedProperties(subDocument, tableIndex);
        this.modelManipulator.notifyModelChanged(new table_style_changed_1.TableStyleChangedSubDocumentChange(subDocument.id, table, style));
    };
    TablesManipulator.prototype.removeTableWithContent = function (subDocument, table) {
        this.history.beginTransaction();
        this.removeNestedTablesByParentTable(subDocument, table);
        this.history.addAndRedo(new remove_table_history_item_1.RemoveTableHistoryItem(this.modelManipulator, subDocument, table.index));
        this.history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, fixed_1.FixedInterval.fromPositions(table.getStartPosition(), table.getEndPosition())), false));
        this.history.endTransaction();
    };
    TablesManipulator.prototype.removeTableCellWithContent = function (subDocument, table, rowIndex, cellIndex) {
        var cell = table.rows[rowIndex].cells[cellIndex];
        this.removeNestedTablesByParentCell(subDocument, cell);
        this.history.addAndRedo(new remove_table_cell_history_item_1.RemoveTableCellHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex));
        this.history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, cell.interval), false));
    };
    TablesManipulator.prototype.removeTableRowWithContent = function (subDocument, table, rowIndex) {
        var row = table.rows[rowIndex];
        this.removeNestedTables(subDocument, row);
        this.updateVerticalMergingState(subDocument, table, rowIndex);
        this.history.addAndRedo(new remove_table_row_history_item_1.RemoveTableRowHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex));
        this.history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, fixed_1.FixedInterval.fromPositions(row.getStartPosition(), row.getEndPosition())), false));
    };
    TablesManipulator.prototype.updateVerticalMergingState = function (subDocument, table, rowIndex) {
        var row = table.rows[rowIndex];
        for (var cellIndex = row.cells.length - 1, cell = void 0; cell = row.cells[cellIndex]; cellIndex--) {
            if (cell.verticalMerging !== table_base_structures_1.TableCellMergingState.None) {
                var columnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(cell);
                var nextRow = table.rows[rowIndex + 1];
                var nextRowCellIndex = nextRow ? table_utils_1.TableCellUtils.getCellIndexByColumnIndex(nextRow, columnIndex) : -1;
                var nextRowCell = nextRow ? nextRow.cells[nextRowCellIndex] : null;
                if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Restart) {
                    if (nextRowCell) {
                        var afterNextRow = table.rows[rowIndex + 2];
                        var afterNextRowCell = afterNextRow ? afterNextRow.cells[table_utils_1.TableCellUtils.getCellIndexByEndColumnIndex(afterNextRow, columnIndex)] : null;
                        if (afterNextRowCell && afterNextRowCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex + 1, nextRowCellIndex, table_base_structures_1.TableCellMergingState.Restart));
                        else
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex + 1, nextRowCellIndex, table_base_structures_1.TableCellMergingState.None));
                    }
                }
                else if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue && rowIndex > 0) {
                    var prevRow = table.rows[rowIndex - 1];
                    var prevRowCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(prevRow, columnIndex);
                    var prevRowCell = prevRow.cells[prevRowCellIndex];
                    if (prevRowCell && prevRowCell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
                        if (!nextRowCell || nextRowCell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex - 1, prevRowCellIndex, table_base_structures_1.TableCellMergingState.None));
                    }
                }
            }
        }
    };
    TablesManipulator.prototype.removeNestedTables = function (subDocument, row) {
        var nextNestedTable = subDocument.tables[row.parentTable.index + 1];
        var nestedTables = [];
        while (nextNestedTable && nextNestedTable.nestedLevel > row.parentTable.nestedLevel) {
            if (this.isNestedTableInRow(nextNestedTable, row))
                nestedTables.push(nextNestedTable);
            nextNestedTable = subDocument.tables[nextNestedTable.index + 1];
        }
        for (var i = nestedTables.length - 1, nestedTable = void 0; nestedTable = nestedTables[i]; i--)
            this.history.addAndRedo(new remove_table_history_item_1.RemoveTableHistoryItem(this.modelManipulator, subDocument, nestedTable.index));
    };
    TablesManipulator.prototype.isNestedTableInRow = function (table, parentRow) {
        return table.parentCell && (table.parentCell.parentRow === parentRow || this.isNestedTableInRow(table.parentCell.parentRow.parentTable, parentRow));
    };
    TablesManipulator.prototype.removeNestedTablesByParentTable = function (subDocument, parentTable) {
        var nextNestedTable = subDocument.tables[parentTable.index + 1];
        var nestedTables = [];
        while (nextNestedTable && nextNestedTable.nestedLevel > parentTable.nestedLevel) {
            if (this.isNestedTableInTable(nextNestedTable, parentTable))
                nestedTables.push(nextNestedTable);
            nextNestedTable = subDocument.tables[nextNestedTable.index + 1];
        }
        for (var i = nestedTables.length - 1, nestedTable = void 0; nestedTable = nestedTables[i]; i--)
            this.history.addAndRedo(new remove_table_history_item_1.RemoveTableHistoryItem(this.modelManipulator, subDocument, nestedTable.index));
    };
    TablesManipulator.prototype.removeNestedTablesByParentCell = function (subDocument, parentCell) {
        var nextNestedTable = subDocument.tables[parentCell.parentRow.parentTable.index + 1];
        var nestedTables = [];
        while (nextNestedTable && nextNestedTable.nestedLevel > parentCell.parentRow.parentTable.nestedLevel) {
            if (this.isNestedTableInCell(nextNestedTable, parentCell))
                nestedTables.push(nextNestedTable);
            nextNestedTable = subDocument.tables[nextNestedTable.index + 1];
        }
        for (var i = nestedTables.length - 1, nestedTable = void 0; nestedTable = nestedTables[i]; i--)
            this.history.addAndRedo(new remove_table_history_item_1.RemoveTableHistoryItem(this.modelManipulator, subDocument, nestedTable.index));
    };
    TablesManipulator.prototype.isNestedTableInCell = function (table, parentCell) {
        return table.parentCell && (table.parentCell === parentCell || this.isNestedTableInCell(table.parentCell.parentRow.parentTable, parentCell));
    };
    TablesManipulator.prototype.isNestedTableInTable = function (table, parentTable) {
        return table.parentCell && (table.parentCell.parentRow.parentTable === parentTable || this.isNestedTableInTable(table.parentCell.parentRow.parentTable, parentTable));
    };
    TablesManipulator.prototype.normalizeVerticalSpans = function (subDocument, table) {
        var rowCount = table.rows.length;
        if (rowCount === 1) {
            var row = table.rows[0];
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                if (cell.verticalMerging !== table_base_structures_1.TableCellMergingState.None)
                    this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, 0, cellIndex, table_base_structures_1.TableCellMergingState.None));
            }
            return;
        }
        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            var row = table.rows[rowIndex];
            var columnIndex = row.gridBefore;
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                switch (cell.verticalMerging) {
                    case table_base_structures_1.TableCellMergingState.Restart:
                        if (rowIndex == rowCount - 1)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                        else {
                            var bottomCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(table.rows[rowIndex + 1], columnIndex);
                            var bottomCell = table.rows[rowIndex + 1].cells[bottomCellIndex];
                            if (!bottomCell || bottomCell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                                this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                        }
                        break;
                    case table_base_structures_1.TableCellMergingState.Continue:
                        if (rowIndex === 0)
                            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                        else {
                            var topCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(table.rows[rowIndex - 1], columnIndex);
                            var topCell = table.rows[rowIndex - 1].cells[topCellIndex];
                            if (!topCell || topCell.verticalMerging === table_base_structures_1.TableCellMergingState.None) {
                                if (rowIndex == rowCount - 1)
                                    this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                                else {
                                    var bottomCellIndex = table_utils_1.TableCellUtils.getCellIndexByColumnIndex(table.rows[rowIndex + 1], columnIndex);
                                    var bottomCell = table.rows[rowIndex + 1].cells[bottomCellIndex];
                                    if (bottomCell && bottomCell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue)
                                        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.Restart));
                                    else
                                        this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, cellIndex, table_base_structures_1.TableCellMergingState.None));
                                }
                            }
                        }
                        break;
                }
                columnIndex += cell.columnSpan;
            }
        }
    };
    TablesManipulator.prototype.normalizeTableGrid = function (subDocument, table) {
        var maxEndColumnIndex = -1;
        for (var i = 0, row = void 0; row = table.rows[i]; i++) {
            maxEndColumnIndex = Math.max(maxEndColumnIndex, row.getTotalCellsInRowConsiderGrid() - 1);
        }
        for (var i = 0, row = void 0; row = table.rows[i]; i++) {
            var currentEndColumnIndex = row.getTotalCellsInRowConsiderGrid() - 1;
            var gridAfterDelta = maxEndColumnIndex - currentEndColumnIndex;
            if (gridAfterDelta != 0)
                this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridAfterHistoryItem(this.modelManipulator, subDocument, table.index, i, row.gridAfter + gridAfterDelta));
        }
    };
    TablesManipulator.prototype.normalizeCellColumnSpans = function (subDocument, table, canNormalizeWidthBeforeAndWidthAfter) {
        var _this = this;
        TablesManipulator.normalizeRowsGridBefore(table, canNormalizeWidthBeforeAndWidthAfter, function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridBeforeHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); }, function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridAfterHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); }, function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowWidthBeforeHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); }, function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowWidthAfterHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); });
        var intervals = calculator_1.Calculator.getIntervals(table);
        for (var i = table.rows.length - 1; i >= 0; i--) {
            TablesManipulator.normalizeTableRow(table, i, intervals.slice(0), function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridBeforeHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); }, function (t, ri, val) { return _this.history.addAndRedo(new table_row_properties_history_items_1.TableRowGridAfterHistoryItem(_this.modelManipulator, subDocument, t.index, ri, val)); }, function (t, ri, ci, val) { return _this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellColumnSpanHistoryItem(_this.modelManipulator, subDocument, t.index, ri, ci, val)); });
        }
    };
    TablesManipulator.normalizeCellColumnSpansWithoutHistory = function (table, canNormalizeWidthBeforeAndWidthAfter) {
        TablesManipulator.normalizeRowsGridBefore(table, canNormalizeWidthBeforeAndWidthAfter, function (t, ri, val) { return t.rows[ri].gridBefore = val; }, function (t, ri, val) { return t.rows[ri].gridAfter = val; }, function (t, ri, val) { return t.rows[ri].widthBefore = val; }, function (t, ri, val) { return t.rows[ri].widthAfter = val; });
        var intervals = calculator_1.Calculator.getIntervals(table);
        for (var i = table.rows.length - 1; i >= 0; i--) {
            TablesManipulator.normalizeTableRow(table, i, intervals.slice(0), function (t, ri, val) { return t.rows[ri].gridBefore = val; }, function (t, ri, val) { return t.rows[ri].gridAfter = val; }, function (t, ri, ci, val) { return t.rows[ri].cells[ci].columnSpan = val; });
        }
    };
    TablesManipulator.normalizeTableRow = function (table, rowIndex, intervals, setGridBefore, setGridAfter, setColumnSpan) {
        var row = table.rows[rowIndex];
        var span = TablesManipulator.calculateNewSpan(row.gridBefore, intervals);
        if (row.gridBefore != span)
            setGridBefore(table, rowIndex, span);
        for (var i = 0, cell = void 0; cell = row.cells[i]; i++) {
            span = TablesManipulator.calculateNewSpan(cell.columnSpan, intervals);
            if (cell.columnSpan !== span)
                setColumnSpan(table, rowIndex, i, span);
        }
        span = TablesManipulator.calculateNewSpan(row.gridAfter, intervals);
        if (row.gridAfter !== span)
            setGridAfter(table, rowIndex, span);
    };
    TablesManipulator.calculateNewSpan = function (oldSpan, intervals) {
        var result = 0;
        var totalSum = 0;
        while (totalSum < oldSpan) {
            totalSum += intervals[0].colSpan;
            result++;
            intervals.splice(0, 1);
        }
        return result;
    };
    TablesManipulator.normalizeRowsGridBefore = function (table, canNormalizeWidthBeforeAndWidthAfter, setGridBefore, setGridAfter, setWidthBefore, setWidthAfter) {
        var minGridBefore = table.rows[0].gridBefore;
        var minGridAfter = table.rows[0].gridAfter;
        for (var i = 1, row = void 0; row = table.rows[i]; i++) {
            minGridBefore = Math.min(minGridBefore, row.gridBefore);
            minGridAfter = Math.min(minGridAfter, row.gridAfter);
        }
        if (minGridBefore == 0 && minGridAfter == 0)
            return;
        for (var i = 0, row = void 0; row = table.rows[i]; i++) {
            if (minGridBefore !== 0)
                setGridBefore(table, i, row.gridBefore - minGridBefore);
            if (row.gridBefore === 0 && (row.widthBefore.type != table_units_1.TableWidthUnitType.Nil || row.widthBefore.value != 0) && canNormalizeWidthBeforeAndWidthAfter)
                setWidthBefore(table, i, table_units_1.TableWidthUnit.createDefault());
            if (minGridAfter != 0)
                setGridAfter(table, i, row.gridAfter - minGridAfter);
            if (row.gridAfter == 0 && (row.widthAfter.type != table_units_1.TableWidthUnitType.Nil || row.widthAfter.value != 0) && canNormalizeWidthBeforeAndWidthAfter)
                setWidthAfter(table, i, table_units_1.TableWidthUnit.createDefault());
        }
    };
    TablesManipulator.prototype.normalizeTableCellWidth = function (subDocument, table) {
        var maxWidth = 5000;
        for (var i = 0, row = void 0; row = table.rows[i]; i++) {
            var totalWidth = 0;
            var tableCellPreferredWidths = [];
            for (var j = 0, cell = void 0; cell = row.cells[j]; j++) {
                var tableCellPreferredWidth = cell.preferredWidth;
                tableCellPreferredWidths.push(tableCellPreferredWidth);
                if (tableCellPreferredWidth.type === table_units_1.TableWidthUnitType.FiftiethsOfPercent)
                    totalWidth += tableCellPreferredWidth.value;
                else {
                    totalWidth = 0;
                    break;
                }
            }
            if (totalWidth <= maxWidth)
                continue;
            for (var j = 0; j < row.cells.length; j++) {
                var newValue = tableCellPreferredWidths[j].value * maxWidth / totalWidth;
                var newWidth = tableCellPreferredWidths[j].clone();
                newWidth.value = newValue;
                this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, i, j, newWidth));
            }
        }
    };
    TablesManipulator.prototype.createTableStructure = function (subDocument, paragraphIndex, newTable, rowCount, cellCount) {
        var paragraph = subDocument.paragraphs[paragraphIndex];
        for (var rowIndex = 0; rowIndex < rowCount; rowIndex++) {
            var row = new table_row_1.TableRow(newTable, subDocument.documentModel.cache.tableRowPropertiesCache.getItem(new table_row_properties_1.TableRowProperties()));
            newTable.rows.push(row);
            for (var cellIndex = 0; cellIndex < cellCount; cellIndex++) {
                var cell = new table_cell_1.TableCell(row, subDocument.documentModel.cache.tableCellPropertiesCache.getItem(new table_cell_properties_1.TableCellProperties()));
                row.cells.push(cell);
                cell.startParagraphPosition = subDocument.positionManager.registerPosition(paragraph.startLogPosition.value);
                cell.endParagrapPosition = subDocument.positionManager.registerPosition(paragraph.getEndPosition());
                paragraph = subDocument.paragraphs[++paragraphIndex];
            }
        }
    };
    TablesManipulator.prototype.fullCellWidth = function (widths, startSpan, cellSpan) {
        return list_1.ListUtils.accumulate(widths, 0, function (acc, w) { return acc + w; }, startSpan, startSpan + cellSpan);
    };
    TablesManipulator.prototype.initializeColumnWidthsWhenInsertTable = function (subDocument, table, avaliableSpace) {
        var _this = this;
        this.history.addAndRedo(new table_properties_history_items_1.TablePreferredWidthHistoryItem(this.modelManipulator, subDocument, table.index, table_units_1.TableWidthUnit.create(0, table_units_1.TableWidthUnitType.Auto)));
        var widths = this.distributeWidthsToAllColumns(table, avaliableSpace);
        this.forEachCell(table, function (pos, cellSpan) {
            _this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellPreferredWidthHistoryItem(_this.modelManipulator, subDocument, table.index, pos.rowIndex, pos.cellIndex, table_units_1.TableWidthUnit.create(_this.fullCellWidth(widths, cellSpan, pos.cell.columnSpan), table_units_1.TableWidthUnitType.ModelUnits)));
        });
    };
    TablesManipulator.prototype.validateTableIndent = function (subDocument, table) {
        var paragraphIndex = subDocument.getParagraphIndexByPosition(table.getStartPosition());
        var paragraph = subDocument.paragraphs[paragraphIndex];
        var leftIndent = paragraph.getParagraphMergedProperties().leftIndent;
        var firstLineIndent = paragraph.getParagraphMergedProperties().firstLineIndent;
        var firstLineIndentType = paragraph.getParagraphMergedProperties().firstLineIndentType;
        if (leftIndent === 0 && firstLineIndent === 0 && firstLineIndentType === paragraph_properties_1.ParagraphFirstLineIndent.None)
            return;
        var endParagraphIndex = subDocument.getParagraphIndexByPosition(table.getEndPosition() - 1);
        for (; paragraphIndex <= endParagraphIndex; paragraphIndex++) {
            paragraph = subDocument.paragraphs[paragraphIndex];
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphLeftIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), 0, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), 0, true));
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphFirstLineIndentTypeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, paragraph.interval), paragraph_properties_1.ParagraphFirstLineIndent.None, true));
        }
    };
    TablesManipulator.prototype.tryJoinTables = function (subDocument, table) {
        var paragraphIndex = subDocument.getParagraphIndexByPosition(table.getStartPosition());
        if (paragraphIndex === 0)
            return;
        var previousParagraph = subDocument.paragraphs[paragraphIndex - 1];
        var previousParagraphCell = table_1.Table.getTableCellByPosition(subDocument.tables, previousParagraph.startLogPosition.value);
        if (!previousParagraphCell || table.nestedLevel !== previousParagraphCell.parentRow.parentTable.nestedLevel)
            return;
        this.joinTablesCore(subDocument, [previousParagraphCell.parentRow.parentTable, table]);
    };
    TablesManipulator.prototype.joinTablesCore = function (_subDocument, tables) {
        if (tables.length < 2)
            throw new Error("tables.length should be > 2");
    };
    TablesManipulator.prototype.forEachCell = function (table, func) {
        var pos = new table_1.TablePosition(table, -1, -1);
        while (pos.moveToNextRow()) {
            var cellSpan = pos.row.gridBefore;
            while (pos.moveToNextCell()) {
                func(pos, cellSpan);
                cellSpan += pos.cell.columnSpan;
            }
        }
    };
    TablesManipulator.prototype.distributeWidthsToAllColumns = function (table, width) {
        var count = table.getTotalVirtualColumnsCount();
        var colWidth = Math.max(Math.ceil(width / count), 1);
        var result = list_1.ListUtils.initByValue(count - 1, colWidth);
        result.push(Math.max(1, Math.ceil(width - colWidth * (count - 1))));
        return result;
    };
    TablesManipulator.prototype.insertTableCore = function (table, tables, tablesByLevels, parentCell) {
        table.nestedLevel = parentCell ? parentCell.parentRow.parentTable.nestedLevel + 1 : 0;
        table.parentCell = parentCell;
        var position = table.getStartPosition();
        if (!tablesByLevels[table.nestedLevel])
            tablesByLevels[table.nestedLevel] = [];
        var indexInNestedLevel = search_1.SearchUtils.normedInterpolationIndexOf(tablesByLevels[table.nestedLevel], function (t) { return t.getStartPosition(); }, position);
        tablesByLevels[table.nestedLevel].splice(indexInNestedLevel + 1, 0, table);
        if (!parentCell)
            table.index = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(tables, function (t) { return t.getStartPosition(); }, position) + 1);
        else {
            var parentTable = parentCell.parentRow.parentTable;
            var index = parentTable.index + 1;
            for (var nextTable = void 0; nextTable = tables[index]; index++) {
                if (nextTable.getStartPosition() >= position)
                    break;
            }
            table.index = index;
        }
        tables.splice(table.index, 0, table);
        table_1.Table.advanceIndices(tables, table.index + 1, 1);
    };
    TablesManipulator.prototype.normalizeVerticalMerging = function (subDocument, table, rowIndex, cellIndex) {
        var row = table.rows[rowIndex];
        for (var nextCellIndex = cellIndex + 1, nextCell = void 0; nextCell = row.cells[nextCellIndex]; nextCellIndex++) {
            if (nextCell.verticalMerging === table_base_structures_1.TableCellMergingState.None)
                continue;
            var nextCellVerticalMerging = nextCell.verticalMerging;
            var firstCellInMergingGroupPosition = table_1.Table.getFirstCellPositionInVerticalMergingGroup(table_1.TablePosition.createAndInit(table, rowIndex, nextCellIndex).init());
            var startColumnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(firstCellInMergingGroupPosition.cell);
            var verticalSpanCellPositions = table_utils_1.TableCellUtils.getVerticalSpanCellPositions(firstCellInMergingGroupPosition, startColumnIndex);
            this.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManipulator, subDocument, table.index, rowIndex, nextCellIndex, table_base_structures_1.TableCellMergingState.None));
            if (nextCellVerticalMerging === table_base_structures_1.TableCellMergingState.Restart) {
                if (verticalSpanCellPositions.length > 2)
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[1], table_base_structures_1.TableCellMergingState.Restart));
                else {
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[0], table_base_structures_1.TableCellMergingState.None));
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[1], table_base_structures_1.TableCellMergingState.None));
                }
            }
            else {
                var nextCellIndexInMergingGroup = table_1.TablePosition.indexOfCell(verticalSpanCellPositions, nextCell);
                if (nextCellIndexInMergingGroup === 1)
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[0], table_base_structures_1.TableCellMergingState.None));
                if (verticalSpanCellPositions.length - 2 === nextCellIndexInMergingGroup)
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[verticalSpanCellPositions.length - 1], table_base_structures_1.TableCellMergingState.None));
                else if (verticalSpanCellPositions.length - 1 !== nextCellIndexInMergingGroup)
                    this.history.addAndRedo(table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem.fromPosition(this.modelManipulator, subDocument, verticalSpanCellPositions[nextCellIndexInMergingGroup + 1], table_base_structures_1.TableCellMergingState.Restart));
            }
        }
    };
    TablesManipulator.prototype.normalizeRows = function (subDocument, table) {
        for (var i = table.rows.length - 1, row = void 0; row = table.rows[i]; i--) {
            if (this.areAllCellsHasVerticalMerge(row)) {
                var height = row.height;
                if (height.type !== table_units_1.TableHeightUnitType.Auto && i > 0) {
                    var prevRowHeight = table.rows[i - 1].height;
                    this.history.addAndRedo(new table_row_properties_history_items_1.TableRowHeightHistoryItem(this.modelManipulator, subDocument, table.index, i - 1, table_units_1.TableHeightUnit.create(prevRowHeight.value + height.value, height.type)));
                }
                this.removeTableRowWithContent(subDocument, table, i);
            }
        }
    };
    TablesManipulator.prototype.areAllCellsHasVerticalMerge = function (row) {
        for (var i = 0, cell = void 0; cell = row.cells[i]; i++) {
            if (cell.verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                return false;
        }
        return true;
    };
    TablesManipulator.prototype.mergeTwoTableCellsHorizontally = function (subDocument, cellPosition, inpPos) {
        new merge_table_cells_operation_1.MergeTwoTableCellsHorizontallyOperation(this.modelManipulator.modelManager, subDocument).execute(cellPosition, true, inpPos);
    };
    TablesManipulator.prototype.mergeTwoTableCellsVertically = function (subDocument, cellPosition, inpPos) {
        new merge_table_cells_operation_1.MergeTwoTableCellsVerticallyOperation(this.modelManipulator.modelManager, subDocument).execute(cellPosition, true, inpPos);
    };
    TablesManipulator.prototype.insertCellToTheRight = function (subDocument, table, rowIndex, cellIndex, inpPos, canNormalizeTable, canNormalizeVerticalMerging, canCopyProperties) {
        if (canNormalizeTable === void 0) { canNormalizeTable = true; }
        if (canNormalizeVerticalMerging === void 0) { canNormalizeVerticalMerging = true; }
        if (canCopyProperties === void 0) { canCopyProperties = true; }
        new insert_table_cell_operation_1.InsertTableCellToTheRightOperation(this.modelManipulator.modelManager, subDocument)
            .execute(table, rowIndex, cellIndex, canNormalizeTable, canNormalizeVerticalMerging, canCopyProperties, inpPos);
    };
    TablesManipulator.prototype.insertCellToTheLeft = function (subDocument, table, rowIndex, cellIndex, inpPos, canNormalizeTable, canNormalizeVerticalMerging, canCopyProperties) {
        if (canNormalizeTable === void 0) { canNormalizeTable = true; }
        if (canNormalizeVerticalMerging === void 0) { canNormalizeVerticalMerging = true; }
        if (canCopyProperties === void 0) { canCopyProperties = true; }
        new insert_table_cell_operation_1.InsertTableCellToTheLeftOperation(this.modelManipulator.modelManager, subDocument)
            .execute(table, rowIndex, cellIndex, canNormalizeTable, canNormalizeVerticalMerging, canCopyProperties, inpPos);
    };
    TablesManipulator.prototype.insertRowBelow = function (subDocument, table, rowIndex, inpPos) {
        new insert_table_row_operation_1.InsertTableRowBelowOperation(this.modelManipulator.modelManager, subDocument).execute(table, rowIndex, inpPos);
    };
    TablesManipulator.prototype.insertRowAbove = function (subDocument, table, rowIndex, inpPos) {
        new insert_table_row_operation_1.InsertTableRowAboveOperation(this.modelManipulator.modelManager, subDocument).execute(table, rowIndex, inpPos);
    };
    TablesManipulator.prototype.insertTable = function (subDocument, rowCount, cellCount, position, availableWidth, inpPos, applyInitialBorders) {
        if (applyInitialBorders === void 0) { applyInitialBorders = false; }
        if (rowCount < 1 || cellCount < 1)
            throw new Error("rowCount and cellCount must be greater than 0");
        this.history.beginTransaction();
        var targetParagraphIndex = subDocument.getParagraphIndexByPosition(position);
        var targetParagraph = subDocument.paragraphs[targetParagraphIndex];
        if (targetParagraph.startLogPosition.value !== position || search_1.SearchUtils.binaryIndexOf(subDocument.tables, function (t) { return t.getEndPosition() - position; }) >= 0) {
            this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(subDocument, position), inpPos));
            position++;
            targetParagraphIndex++;
        }
        var newParagraphCount = rowCount * cellCount;
        for (var i = 0; i < newParagraphCount; i++)
            this.modelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(subDocument, position + i), inpPos));
        this.history.addAndRedo(new create_table_history_item_1.CreateTableHistoryItem(this.modelManipulator, subDocument, targetParagraphIndex, rowCount, cellCount));
        var table = table_1.Table.getTableByPosition(subDocument.tables, position, true);
        this.initializeColumnWidthsWhenInsertTable(subDocument, table, availableWidth);
        this.validateTableIndent(subDocument, table);
        this.history.addAndRedo(new table_properties_history_items_1.TableLookTypesHistoryItem(this.modelManipulator, subDocument, table.index, table_base_structures_1.TableLookTypes.ApplyFirstRow | table_base_structures_1.TableLookTypes.ApplyFirstColumn | table_base_structures_1.TableLookTypes.DoNotApplyColumnBanding));
        this.tryJoinTables(subDocument, table);
        if (applyInitialBorders)
            this.applyInitialBorders(subDocument, table);
        this.history.endTransaction();
        return table;
    };
    TablesManipulator.prototype.applyInitialBorders = function (subDocument, table) {
        var newTableBorder = new border_info_1.BorderInfo();
        newTableBorder.style = enums_1.BorderLineStyle.Single;
        newTableBorder.width = 15;
        newTableBorder.color = this.model.colorProvider.getModelColorFromRgba(0);
        this.history.addAndRedo(new table_properties_history_items_1.TableBordersHistoryItem(this.modelManipulator, subDocument, table.index, [
            newTableBorder.clone(), newTableBorder.clone(), newTableBorder.clone(), newTableBorder.clone(),
            newTableBorder.clone(), newTableBorder.clone()
        ], [true, true, true, true, true, true]));
    };
    TablesManipulator.prototype.removeTablesOnInterval = function (subDocInterval, removeTableIfItMatchesWithInterval) {
        var subDocument = subDocInterval.subDocument;
        var interval = subDocInterval.interval;
        var intervalEnd = interval.end;
        var startTableIndex = Math.max(search_1.SearchUtils.normedInterpolationIndexOf(subDocument.tables, function (t) { return t.getStartPosition(); }, interval.start), 0);
        while (startTableIndex > 0 && subDocument.tables[startTableIndex].nestedLevel > 0)
            startTableIndex--;
        var tablesForRemoving = [];
        for (var tableIndex = startTableIndex, table = void 0; table = subDocument.tables[tableIndex]; tableIndex++) {
            var tableStartPosition = table.getStartPosition();
            if (intervalEnd <= tableStartPosition)
                break;
            var tableEndPosition = table.getEndPosition();
            var tblInterval = table.interval;
            if (tableStartPosition === interval.start && tableEndPosition === intervalEnd) {
                if (removeTableIfItMatchesWithInterval)
                    tablesForRemoving.push(table);
            }
            else if (interval.containsInterval(tblInterval))
                tablesForRemoving.push(table);
        }
        for (var i = tablesForRemoving.length - 1; i >= 0; i--)
            this.history.addAndRedo(new remove_table_history_item_1.RemoveTableHistoryItem(this.modelManipulator, subDocument, tablesForRemoving[i].index));
    };
    TablesManipulator.prototype.resetParagraphCharacterMergedProperties = function (subDocument, tableIndex) {
        var table = subDocument.tables[tableIndex];
        var tableStartPosition = table.getStartPosition();
        var tableEndPosition = table.getEndPosition();
        var modelIterator = new model_iterator_1.ModelIterator(subDocument, false);
        modelIterator.setPosition(tableStartPosition);
        var currPar = null;
        do {
            var run = modelIterator.run;
            if (currPar != run.paragraph) {
                currPar = run.paragraph;
                if (currPar.startLogPosition.value >= tableEndPosition)
                    break;
                currPar.resetParagraphMergedProperties();
            }
            run.resetCharacterMergedProperties();
        } while (modelIterator.moveToNextRun());
    };
    return TablesManipulator;
}(base_manipulator_1.BaseManipulator));
exports.TablesManipulator = TablesManipulator;
