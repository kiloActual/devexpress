"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cell_property_changed_1 = require("../../changes/sub-document/table/cell-property-changed");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var json_table_cell_enums_1 = require("../../json/enums/table/json-table-cell-enums");
var table_cell_properties_1 = require("../../tables/properties/table-cell-properties");
var TableCellPropertiesManipulator = (function () {
    function TableCellPropertiesManipulator(manipulator) {
        this.cellMargins = new TableCellComplexPropertyWithUseManipulator(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.CellMargins, [table_cell_properties_1.TableCellPropertiesMask.UseTopMargin, table_cell_properties_1.TableCellPropertiesMask.UseRightMargin, table_cell_properties_1.TableCellPropertiesMask.UseBottomMargin, table_cell_properties_1.TableCellPropertiesMask.UseLeftMargin], function (prop, vals) { prop.cellMargins.top = vals[0]; prop.cellMargins.right = vals[1]; prop.cellMargins.bottom = vals[2]; prop.cellMargins.left = vals[3]; }, function (prop) { return [prop.cellMargins.top, prop.cellMargins.right, prop.cellMargins.bottom, prop.cellMargins.left]; });
        this.borders = new TableCellComplexPropertyWithUseManipulator(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.Borders, [table_cell_properties_1.TableCellPropertiesMask.UseTopBorder, table_cell_properties_1.TableCellPropertiesMask.UseRightBorder, table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder, table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder, table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder, table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder], function (prop, vals) {
            prop.borders.topBorder = vals[0] || prop.borders.topBorder;
            prop.borders.rightBorder = vals[1] || prop.borders.rightBorder;
            prop.borders.bottomBorder = vals[2] || prop.borders.bottomBorder;
            prop.borders.leftBorder = vals[3] || prop.borders.leftBorder;
            prop.borders.topLeftDiagonalBorder = vals[4] || prop.borders.topLeftDiagonalBorder;
            prop.borders.topRightDiagonalBorder = vals[5] || prop.borders.topRightDiagonalBorder;
        }, function (prop) { return [prop.borders.topBorder, prop.borders.rightBorder, prop.borders.bottomBorder, prop.borders.leftBorder, prop.borders.topLeftDiagonalBorder, prop.borders.topRightDiagonalBorder]; });
        this.preferredWidth = new TableCellPropertiesManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.PreferredWidth, function (cell, val) { return cell.preferredWidth = val; }, function (cell) { return cell.preferredWidth; });
        this.hideCellMark = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.HideCellMark, table_cell_properties_1.TableCellPropertiesMask.UseHideCellMark, function (prop, val) { return prop.hideCellMark = val; }, function (prop) { return prop.hideCellMark; });
        this.noWrap = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.NoWrap, table_cell_properties_1.TableCellPropertiesMask.UseNoWrap, function (prop, val) { return prop.noWrap = val; }, function (prop) { return prop.noWrap; });
        this.fitText = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.FitText, table_cell_properties_1.TableCellPropertiesMask.UseFitText, function (prop, val) { return prop.fitText = val; }, function (prop) { return prop.fitText; });
        this.textDirection = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.TextDirection, table_cell_properties_1.TableCellPropertiesMask.UseTextDirection, function (prop, val) { return prop.textDirection = val; }, function (prop) { return prop.textDirection; });
        this.verticalAlignment = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.VerticalAlignment, table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment, function (prop, val) { return prop.verticalAlignment = val; }, function (prop) { return prop.verticalAlignment; });
        this.shadingInfo = new TableCellPropertiesWithUseManipulatorCore(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.BackgroundColor, table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex, function (prop, val) { return prop.shadingInfo = val; }, function (prop) { return prop.shadingInfo; });
        this.columnSpan = new TableCellPropertyManipulator(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.ColumnSpan, function (cell, val) { return cell.columnSpan = val; }, function (cell) { return cell.columnSpan; });
        this.verticalMerging = new TableCellPropertyManipulator(manipulator, json_table_cell_enums_1.JSONServerTableCellProperty.VerticalMerging, function (cell, val) { return cell.verticalMerging = val; }, function (cell) { return cell.verticalMerging; });
    }
    return TableCellPropertiesManipulator;
}());
exports.TableCellPropertiesManipulator = TableCellPropertiesManipulator;
var TableCellPropertiesManipulatorCore = (function () {
    function TableCellPropertiesManipulatorCore(manipulator, jsonTableCellProperty, setProperty, getProperty) {
        this.manipulator = manipulator;
        this.jsonTableCellProperty = jsonTableCellProperty;
        this.setProperty = setProperty;
        this.getProperty = getProperty;
    }
    TableCellPropertiesManipulatorCore.prototype.setValue = function (subDocument, tableIndex, rowIndex, cellIndex, newValue) {
        var table = subDocument.tables[tableIndex];
        var tableStartPosition = table.getStartPosition();
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        var row = table.rows[rowIndex];
        var cell = row.cells[cellIndex];
        oldState.register(new history_item_state_object_1.HistoryItemTableCellStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, this.getProperty(cell)));
        this.setProperty(cell, newValue);
        newState.register(new history_item_state_object_1.HistoryItemTableCellStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, newValue));
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, newState));
        return oldState;
    };
    TableCellPropertiesManipulatorCore.prototype.restoreValue = function (subDocument, state) {
        var table = subDocument.tables[state.lastObject.tableIndex];
        var row = table.rows[state.lastObject.rowIndex];
        var cell = row.cells[state.lastObject.cellIndex];
        this.setProperty(cell, state.lastObject.value);
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, state));
    };
    return TableCellPropertiesManipulatorCore;
}());
var TableCellPropertyManipulator = (function () {
    function TableCellPropertyManipulator(manipulator, jsonTableCellProperty, setProperty, getProperty) {
        this.manipulator = manipulator;
        this.jsonTableCellProperty = jsonTableCellProperty;
        this.setProperty = setProperty;
        this.getProperty = getProperty;
    }
    TableCellPropertyManipulator.prototype.setValue = function (subDocument, tableIndex, rowIndex, cellIndex, newValue) {
        var table = subDocument.tables[tableIndex];
        var tableStartPosition = table.getStartPosition();
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        var cell = table.rows[rowIndex].cells[cellIndex];
        oldState.register(new history_item_state_object_1.HistoryItemTableCellStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, this.getProperty(cell)));
        this.setProperty(cell, newValue);
        newState.register(new history_item_state_object_1.HistoryItemTableCellStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, newValue));
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, newState));
        return oldState;
    };
    TableCellPropertyManipulator.prototype.restoreValue = function (subDocument, state) {
        var table = subDocument.tables[state.lastObject.tableIndex];
        var cell = table.rows[state.lastObject.rowIndex].cells[state.lastObject.cellIndex];
        this.setProperty(cell, state.lastObject.value);
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, state));
    };
    return TableCellPropertyManipulator;
}());
var TableCellComplexPropertyWithUseManipulator = (function () {
    function TableCellComplexPropertyWithUseManipulator(manipulator, jsonTableCellProperty, masks, setProperties, getProperties) {
        this.manipulator = manipulator;
        this.jsonTableCellProperty = jsonTableCellProperty;
        this.setProperties = setProperties;
        this.getProperties = getProperties;
        this.masks = masks;
    }
    TableCellComplexPropertyWithUseManipulator.prototype.setValue = function (subDocument, tableIndex, rowIndex, cellIndex, newValues, newUses) {
        var table = subDocument.tables[tableIndex];
        var tableStartPosition = table.getStartPosition();
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        var cell = table.rows[rowIndex].cells[cellIndex];
        var properties = cell.properties;
        var oldUseValues = [];
        for (var _i = 0, _a = this.masks; _i < _a.length; _i++) {
            var mask = _a[_i];
            oldUseValues.push(properties.getUseValue(mask));
        }
        oldState.register(new history_item_state_object_1.HistoryItemTableCellComplexUseStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, this.getProperties(properties), oldUseValues));
        this.setValuesCore(subDocument.documentModel.cache, cell, newValues, newUses);
        newState.register(new history_item_state_object_1.HistoryItemTableCellComplexUseStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, newValues, newUses));
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, newState));
        return oldState;
    };
    TableCellComplexPropertyWithUseManipulator.prototype.restoreValue = function (subDocument, state) {
        var table = subDocument.tables[state.lastObject.tableIndex];
        var cell = table.rows[state.lastObject.rowIndex].cells[state.lastObject.cellIndex];
        this.setValuesCore(subDocument.documentModel.cache, cell, state.lastObject.value, state.lastObject.uses);
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, state));
    };
    TableCellComplexPropertyWithUseManipulator.prototype.setValuesCore = function (cache, cell, newValues, newUses) {
        var properties = cell.properties.clone();
        this.setProperties(properties, newValues);
        for (var i = this.masks.length - 1; i >= 0; i--) {
            if (newUses[i] !== undefined)
                properties.setUseValue(this.masks[i], newUses[i]);
        }
        cell.properties = cache.tableCellPropertiesCache.getItem(properties);
    };
    return TableCellComplexPropertyWithUseManipulator;
}());
var TableCellPropertiesWithUseManipulatorCore = (function () {
    function TableCellPropertiesWithUseManipulatorCore(manipulator, jsonTableCellProperty, tableCellPropertiesMask, setProperty, getProperty) {
        this.manipulator = manipulator;
        this.tableCellPropertiesMask = tableCellPropertiesMask;
        this.jsonTableCellProperty = jsonTableCellProperty;
        this.setProperty = setProperty;
        this.getProperty = getProperty;
    }
    TableCellPropertiesWithUseManipulatorCore.prototype.setValue = function (subDocument, tableIndex, rowIndex, cellIndex, newValue, newUse) {
        var table = subDocument.tables[tableIndex];
        var tableStartPosition = table.getStartPosition();
        var newState = new history_item_state_1.HistoryItemState();
        var oldState = new history_item_state_1.HistoryItemState();
        var cell = table.rows[rowIndex].cells[cellIndex];
        var properties = cell.properties;
        oldState.register(new history_item_state_object_1.HistoryItemTableCellUseStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, this.getProperty(properties), properties.getUseValue(this.tableCellPropertiesMask)));
        this.setValueCore(subDocument.documentModel.cache, cell, newValue, newUse);
        newState.register(new history_item_state_object_1.HistoryItemTableCellUseStateObject(tableStartPosition, table.nestedLevel, tableIndex, rowIndex, cellIndex, newValue, newUse));
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, newState));
        return oldState;
    };
    TableCellPropertiesWithUseManipulatorCore.prototype.restoreValue = function (subDocument, state) {
        var table = subDocument.tables[state.lastObject.tableIndex];
        var cell = table.rows[state.lastObject.rowIndex].cells[state.lastObject.cellIndex];
        this.setValueCore(subDocument.documentModel.cache, cell, state.lastObject.value, state.lastObject.use);
        this.manipulator.notifyModelChanged(new cell_property_changed_1.TableCellPropertyChangedSubDocumentChange(subDocument, this.jsonTableCellProperty, state));
    };
    TableCellPropertiesWithUseManipulatorCore.prototype.setValueCore = function (cache, cell, newValue, newUse) {
        var properties = cell.properties.clone();
        this.setProperty(properties, newValue);
        properties.setUseValue(this.tableCellPropertiesMask, newUse);
        cell.properties = cache.tableCellPropertiesCache.getItem(properties);
    };
    return TableCellPropertiesWithUseManipulatorCore;
}());
