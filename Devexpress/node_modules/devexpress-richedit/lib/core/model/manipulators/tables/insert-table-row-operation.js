"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var insert_paragraph_history_item_1 = require("../../history/items/insert-paragraph-history-item");
var insert_table_row_history_item_1 = require("../../history/items/tables/insert-table-row-history-item");
var table_cell_properties_history_items_1 = require("../../history/items/tables/table-cell-properties-history-items");
var sub_document_1 = require("../../sub-document");
var table_base_structures_1 = require("../../tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../tables/table-utils");
var insert_paragraph_manipulator_params_1 = require("../paragraph-manipulator/insert-paragraph-manipulator-params");
var InsertTableRowOperationBase = (function () {
    function InsertTableRowOperationBase(modelManager, subDocument) {
        this.modelManager = modelManager;
        this.subDocument = subDocument;
    }
    Object.defineProperty(InsertTableRowOperationBase.prototype, "modelManipulator", {
        get: function () { return this.modelManager.modelManipulator; },
        enumerable: true,
        configurable: true
    });
    InsertTableRowOperationBase.prototype.execute = function (table, patternRowIndex, inpPos) {
        var patternRow = table.rows[patternRowIndex];
        var insertParagraphsPositionInfo = this.getInsertParagraphsPositionInfo(table, patternRowIndex);
        this.insertParagraphs(this.subDocument, insertParagraphsPositionInfo, patternRow, inpPos);
        patternRowIndex = this.insertRowsCore(table, patternRowIndex);
        this.correctVerticalMerging(this.subDocument, table, patternRowIndex);
    };
    InsertTableRowOperationBase.prototype.insertParagraphs = function (subDocument, insertPosition, patternRow, inpPos) {
        var needShiftCellContent = !!insertPosition.cell;
        for (var i = patternRow.cells.length - 1, patternCell = void 0; patternCell = patternRow.cells[i]; i--) {
            if (needShiftCellContent) {
                this.modelManipulator.table.insertParagraphToTheCellStartAndShiftContent(this.subDocument, insertPosition.cell, inpPos);
                needShiftCellContent = false;
                continue;
            }
            var patternCellRun = subDocument.getRunByPosition(patternCell.startParagraphPosition.value);
            var patternCellParagraph = subDocument.getParagraphByPosition(patternCell.startParagraphPosition.value);
            this.modelManager.history.addAndRedo(new insert_paragraph_history_item_1.InsertParagraphHistoryItem(this.modelManager.modelManipulator, new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, insertPosition.position), patternCellRun.getCharPropsBundle(subDocument.documentModel), patternCellParagraph.getParagraphBundleFull(subDocument.documentModel))));
        }
    };
    return InsertTableRowOperationBase;
}());
exports.InsertTableRowOperationBase = InsertTableRowOperationBase;
var InsertTableRowAboveOperation = (function (_super) {
    tslib_1.__extends(InsertTableRowAboveOperation, _super);
    function InsertTableRowAboveOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableRowAboveOperation.prototype.insertRowsCore = function (table, patternRowIndex) {
        var newCellsIntervals = [];
        var patternRow = table.rows[patternRowIndex];
        var newCellStartPosition = patternRow.getStartPosition();
        var cellsCount = patternRow.cells.length;
        for (var i = 0; i < cellsCount; i++)
            newCellsIntervals.push(new fixed_1.FixedInterval(newCellStartPosition + i, 1));
        this.modelManager.history.addAndRedo(new insert_table_row_history_item_1.InsertTableRowHistoryItem(this.modelManager.modelManipulator, this.subDocument, table.index, table.rows[patternRowIndex], patternRowIndex, newCellsIntervals));
        return patternRowIndex + 1;
    };
    InsertTableRowAboveOperation.prototype.getInsertParagraphsPositionInfo = function (table, patternRowIndex) {
        return {
            cell: table.rows[patternRowIndex].cells[0],
            position: table.rows[patternRowIndex].getStartPosition()
        };
    };
    InsertTableRowAboveOperation.prototype.correctVerticalMerging = function (subDocument, table, patternRowIndex) {
        var patternRow = table.rows[patternRowIndex];
        for (var i = 0, patternCell = void 0; patternCell = patternRow.cells[i]; i++) {
            if (patternCell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart)
                this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, subDocument, table.index, patternRowIndex - 1, i, table_base_structures_1.TableCellMergingState.None));
        }
    };
    return InsertTableRowAboveOperation;
}(InsertTableRowOperationBase));
exports.InsertTableRowAboveOperation = InsertTableRowAboveOperation;
var InsertTableRowBelowOperation = (function (_super) {
    tslib_1.__extends(InsertTableRowBelowOperation, _super);
    function InsertTableRowBelowOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InsertTableRowBelowOperation.prototype.insertRowsCore = function (table, patternRowIndex) {
        var newCellsIntervals = [];
        var patternRow = table.rows[patternRowIndex];
        var newCellStartPosition = patternRow.getEndPosition();
        var cellsCount = patternRow.cells.length;
        for (var i = 0; i < cellsCount; i++)
            newCellsIntervals.push(new fixed_1.FixedInterval(newCellStartPosition + i, 1));
        this.modelManager.history.addAndRedo(new insert_table_row_history_item_1.InsertTableRowHistoryItem(this.modelManager.modelManipulator, this.subDocument, table.index, table.rows[patternRowIndex], patternRowIndex + 1, newCellsIntervals));
        return patternRowIndex;
    };
    InsertTableRowBelowOperation.prototype.getInsertParagraphsPositionInfo = function (table, patternRowIndex) {
        return {
            cell: table.rows[patternRowIndex + 1] ? table.rows[patternRowIndex + 1].cells[0] : null,
            position: table.rows[patternRowIndex].getEndPosition()
        };
    };
    InsertTableRowBelowOperation.prototype.correctVerticalMerging = function (subDocument, table, patternRowIndex) {
        var patternRow = table.rows[patternRowIndex];
        var newRowIndex = patternRowIndex + 1;
        var nextRow = table.rows[newRowIndex + 1];
        for (var i = 0, patternCell = void 0; patternCell = patternRow.cells[i]; i++) {
            if (patternCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue) {
                if (!nextRow)
                    this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, subDocument, table.index, newRowIndex, i, table_base_structures_1.TableCellMergingState.None));
                else {
                    var sourceCellStartColumnIndex = table_utils_1.TableCellUtils.getStartColumnIndex(patternCell);
                    var indexInNextRow = table_utils_1.TableCellUtils.getAbsoluteCellIndexInRow(nextRow, sourceCellStartColumnIndex);
                    if (nextRow.cells[indexInNextRow].verticalMerging !== table_base_structures_1.TableCellMergingState.Continue)
                        this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, subDocument, table.index, newRowIndex, i, table_base_structures_1.TableCellMergingState.None));
                }
            }
            else if (patternCell.verticalMerging === table_base_structures_1.TableCellMergingState.Restart)
                this.modelManager.history.addAndRedo(new table_cell_properties_history_items_1.TableCellVerticalMergingHistoryItem(this.modelManager.modelManipulator, subDocument, table.index, newRowIndex, i, table_base_structures_1.TableCellMergingState.Continue));
        }
    };
    return InsertTableRowBelowOperation;
}(InsertTableRowOperationBase));
exports.InsertTableRowBelowOperation = InsertTableRowBelowOperation;
