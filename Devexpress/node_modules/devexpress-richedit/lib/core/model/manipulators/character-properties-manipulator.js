"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_formatting_changed_1 = require("../changes/sub-document/properties/character-formatting-changed");
var character_properties_changed_1 = require("../changes/sub-document/properties/character-properties-changed");
var character_properties_1 = require("../character/character-properties");
var character_property_descriptor_1 = require("../character/character-property-descriptor");
var apply_style_history_items_1 = require("../history/items/apply-style-history-items");
var character_properties_history_items_1 = require("../history/items/character-properties-history-items");
var history_item_state_1 = require("../history/states/history-item-state");
var history_item_state_object_1 = require("../history/states/history-item-state-object");
var json_character_enums_1 = require("../json/enums/json-character-enums");
var control_1 = require("../options/control");
var sub_document_1 = require("../sub-document");
var base_manipulator_1 = require("./base-manipulator");
var CharacterPropertiesManipulator = (function (_super) {
    tslib_1.__extends(CharacterPropertiesManipulator, _super);
    function CharacterPropertiesManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.fontBold = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.bold);
        _this.fontItalic = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.italic);
        _this.fontName = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo);
        _this.fontSize = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.size);
        _this.fontCaps = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.allCaps);
        _this.fontStrikeoutType = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType);
        _this.fontStrikeoutWordsOnly = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutWordsOnly);
        _this.fontUnderlineType = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineType);
        _this.fontHidden = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.hidden);
        _this.script = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.script);
        _this.fontUnderlineWordsOnly = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineWordsOnly);
        _this.fontNoProof = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.noProof);
        _this.langInfo = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.langInfo);
        _this.compositeFontInfo = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.compositeFontInfo);
        _this.textColor = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.textColor);
        _this.shadingInfo = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo);
        _this.fontHighlightColor = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.highlightColor);
        _this.fontStrikeoutColor = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutColor);
        _this.fontUnderlineColor = new MaskedCharacterPropertiesManipulator(manipulator, character_property_descriptor_1.CharacterPropertyDescriptor.underlineColor);
        _this.useValue = new CharacterPropertiesUseValueManipulator(manipulator);
        _this.modelManipulator = manipulator;
        return _this;
    }
    CharacterPropertiesManipulator.prototype.resetCharacterFormatting = function (subDocument, interval) {
        this.history.addAndRedo(new character_properties_history_items_1.CharacterPropertiesHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), character_properties_1.MaskedCharacterProperties.createDefault(this.model)));
        this.history.addAndRedo(new apply_style_history_items_1.ApplyCharacterStyleHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, interval), this.model.getDefaultCharacterStyle(), true));
    };
    CharacterPropertiesManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return oldState;
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var iterator = subDocument.getRunIterator(interval);
        while (iterator.moveNext()) {
            var run = iterator.currentRun;
            oldState.register(new history_item_state_object_1.HistoryItemIntervalCharacterPropertiesStateObject(iterator.currentInterval(), run.maskedCharacterProperties.clone()));
            run.setCharacterProperties(newValue);
            run.onCharacterPropertiesChanged();
        }
        newState.register(new history_item_state_object_1.HistoryItemIntervalCharacterPropertiesStateObject(interval, newValue));
        this.modelManipulator.notifyModelChanged(new character_properties_changed_1.CharacterPropertiesChangedSubDocumentChange(subDocument.id, newState));
        return oldState;
    };
    CharacterPropertiesManipulator.prototype.restoreValue = function (subDocument, state) {
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return;
        for (var stateValue, i = 0; stateValue = state.objects[i]; i++) {
            var iterator = subDocument.getRunIterator(stateValue.interval);
            while (iterator.moveNext()) {
                var run = iterator.currentRun;
                run.setCharacterProperties(stateValue.value);
                run.onCharacterPropertiesChanged();
            }
        }
        this.modelManipulator.notifyModelChanged(new character_properties_changed_1.CharacterPropertiesChangedSubDocumentChange(subDocument.id, state));
    };
    return CharacterPropertiesManipulator;
}(base_manipulator_1.BaseManipulator));
exports.CharacterPropertiesManipulator = CharacterPropertiesManipulator;
var CharacterPropertiesUseValueManipulator = (function () {
    function CharacterPropertiesUseValueManipulator(manipulator) {
        this.manipulator = manipulator;
    }
    CharacterPropertiesUseValueManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return oldState;
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var iterator = subDocument.getRunIterator(interval);
        while (iterator.moveNext()) {
            var run = iterator.currentRun;
            oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(iterator.currentInterval(), run.maskedCharacterProperties.useValue));
            var properties = run.maskedCharacterProperties.clone();
            properties.useValue = newValue;
            run.setCharacterProperties(properties);
            run.onCharacterPropertiesChanged();
        }
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, newValue));
        this.manipulator.notifyModelChanged(new character_formatting_changed_1.CharacterFormattingChangedSubDocumentChange(subDocument.id, json_character_enums_1.JSONCharacterFormattingProperty.UseValue, newState));
        return oldState;
    };
    CharacterPropertiesUseValueManipulator.prototype.restoreValue = function (subDocument, state) {
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return;
        for (var stateValue, i = 0; stateValue = state.objects[i]; i++) {
            var iterator = subDocument.getRunIterator(stateValue.interval);
            while (iterator.moveNext()) {
                var run = iterator.currentRun;
                var properties = run.maskedCharacterProperties.clone();
                properties.useValue = stateValue.value;
                run.setCharacterProperties(properties);
                run.onCharacterPropertiesChanged();
            }
        }
        this.manipulator.notifyModelChanged(new character_formatting_changed_1.CharacterFormattingChangedSubDocumentChange(subDocument.id, json_character_enums_1.JSONCharacterFormattingProperty.UseValue, state));
    };
    return CharacterPropertiesUseValueManipulator;
}());
var MaskedCharacterPropertiesManipulator = (function () {
    function MaskedCharacterPropertiesManipulator(manipulator, descriptor) {
        this.manipulator = manipulator;
        this.descriptor = descriptor;
    }
    MaskedCharacterPropertiesManipulator.prototype.setValue = function (subDocument, interval, newValue, newUse) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return oldState;
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var mask = this.descriptor.maskValue();
        var iterator = subDocument.getRunIterator(interval);
        while (iterator.moveNext()) {
            var currentInterval = iterator.currentInterval();
            var properties = iterator.currentRun.maskedCharacterProperties.clone();
            newState.register(new history_item_state_object_1.HistoryItemIntervalUseStateObject(currentInterval, newValue, newUse));
            oldState.register(new history_item_state_object_1.HistoryItemIntervalUseStateObject(currentInterval, this.descriptor.getProp(properties), properties.getUseValue(mask)));
            this.descriptor.setProp(properties, newValue);
            properties.setUseValue(mask, newUse);
            iterator.currentRun.setCharacterProperties(properties);
            if (iterator.currentRun.hasCharacterMergedProperies() && newUse) {
                var mergedProperties = iterator.currentRun.getCharacterMergedProperties().clone();
                this.descriptor.setProp(mergedProperties, newValue);
                iterator.currentRun.setCharacterMergedProperies(mergedProperties);
            }
            else
                iterator.currentRun.onCharacterPropertiesChanged();
        }
        this.manipulator.notifyModelChanged(new character_formatting_changed_1.CharacterFormattingChangedSubDocumentChange(subDocument.id, this.descriptor.getJSONProperty(), newState));
        return oldState;
    };
    MaskedCharacterPropertiesManipulator.prototype.restoreValue = function (subDocument, state) {
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.characterFormatting))
            return;
        if (state.isEmpty())
            return;
        for (var i = 0, stateItem; stateItem = state.objects[i]; i++) {
            var iterator = subDocument.getRunIterator(stateItem.interval);
            while (iterator.moveNext()) {
                var properties = iterator.currentRun.maskedCharacterProperties.clone();
                this.descriptor.setProp(properties, stateItem.value);
                properties.setUseValue(this.descriptor.maskValue(), stateItem.use);
                iterator.currentRun.setCharacterProperties(properties);
                iterator.currentRun.onCharacterPropertiesChanged();
            }
        }
        this.manipulator.notifyModelChanged(new character_formatting_changed_1.CharacterFormattingChangedSubDocumentChange(subDocument.id, this.descriptor.getJSONProperty(), state));
    };
    return MaskedCharacterPropertiesManipulator;
}());
