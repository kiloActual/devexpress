"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var initializer_1 = require("@devexpress/utils/lib/class/initializer");
var errors_1 = require("@devexpress/utils/lib/errors");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var properties_bundle_1 = require("../../../rich-utils/properties-bundle");
var hyperlink_info_changed_1 = require("../../changes/sub-document/field/hyperlink-info-changed");
var inserted_1 = require("../../changes/sub-document/field/inserted");
var field_1 = require("../../fields/field");
var character_properties_history_items_1 = require("../../history/items/character-properties-history-items");
var numbering_list_1 = require("../../numbering-lists/numbering-list");
var run_type_1 = require("../../runs/run-type");
var sub_document_1 = require("../../sub-document");
var table_1 = require("../../tables/main-structures/table");
var insert_paragraph_manipulator_params_1 = require("../paragraph-manipulator/insert-paragraph-manipulator-params");
var text_box_manipulator_1 = require("../text-box-manipulator");
var insert_text_manipulator_params_1 = require("../text-manipulator/insert-text-manipulator-params");
var SubDocumentInserterOptions = (function (_super) {
    tslib_1.__extends(SubDocumentInserterOptions, _super);
    function SubDocumentInserterOptions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.insertParagraphMarkBeforeIfStartsWithTable = true;
        _this.enableCharacterStyleCreation = true;
        _this.enableParagraphStyleCreation = true;
        _this.enableTableStyleCreation = true;
        return _this;
    }
    return SubDocumentInserterOptions;
}(initializer_1.Initializer));
exports.SubDocumentInserterOptions = SubDocumentInserterOptions;
var SubDocumentInserter = (function () {
    function SubDocumentInserter(targetModelManipulator, options, targetSubDocPos, sourceSubDocInterval) {
        var _a;
        this.numberingListIndexesMap = {};
        this.abstractNumberingListIndexesMap = {};
        this.unloadedCacheImageInfo = [];
        if (!targetModelManipulator.modelManager.clientMode) {
            options.enableCharacterStyleCreation = false;
            options.enableParagraphStyleCreation = false;
            options.enableTableStyleCreation = false;
        }
        this.targetModelManipulator = targetModelManipulator;
        this.options = options;
        this.targetSubDocPos = targetSubDocPos;
        this.sourceSubDocInterval = sourceSubDocInterval;
        this.newTables = [];
        this.runHandlers = (_a = {},
            _a[run_type_1.RunType.TextRun] = this.textRunHandler.bind(this),
            _a[run_type_1.RunType.ParagraphRun] = this.paragraphRunHandler.bind(this),
            _a[run_type_1.RunType.SectionRun] = this.sectionRunHandler.bind(this),
            _a[run_type_1.RunType.FieldCodeStartRun] = this.fieldCodeRunHandler.bind(this),
            _a[run_type_1.RunType.FieldCodeEndRun] = this.textRunHandler.bind(this),
            _a[run_type_1.RunType.FieldResultEndRun] = this.textRunHandler.bind(this),
            _a[run_type_1.RunType.LayoutDependentRun] = this.textRunHandler.bind(this),
            _a[run_type_1.RunType.InlinePictureRun] = this.inlinePictureRunHandler.bind(this),
            _a[run_type_1.RunType.InlineTextBoxRun] = this.notSupportedRunHandler.bind(this),
            _a[run_type_1.RunType.AnchoredPictureRun] = this.anchoredPictureRunHandler.bind(this),
            _a[run_type_1.RunType.AnchoredTextBoxRun] = this.anchoredTextBoxRunHandler.bind(this),
            _a[run_type_1.RunType.Undefined] = this.notSupportedRunHandler.bind(this),
            _a[run_type_1.RunType.FootNoteRun] = this.notSupportedRunHandler.bind(this),
            _a[run_type_1.RunType.EndNoteRun] = this.notSupportedRunHandler.bind(this),
            _a[run_type_1.RunType.NoteSeparatorRun] = this.notSupportedRunHandler.bind(this),
            _a[run_type_1.RunType.NoteContinuationSeparatorRun] = this.notSupportedRunHandler.bind(this),
            _a);
    }
    Object.defineProperty(SubDocumentInserter.prototype, "history", {
        get: function () { return this.targetModelManipulator.modelManager.history; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentInserter.prototype, "modelsConstOffset", {
        get: function () { return this.targetStartPosition - this.sourceInterval.start; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentInserter.prototype, "sameModel", {
        get: function () { return this.sourceDocumentModel === this.targetDocumentModel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SubDocumentInserter.prototype, "currInsertSubDocumentPosition", {
        get: function () {
            return new sub_document_1.SubDocumentPosition(this.targetSubDocument, this.currentTargetPosition);
        },
        enumerable: true,
        configurable: true
    });
    SubDocumentInserter.prototype.insert = function () {
        var _this = this;
        this.sourceSubDocument = this.sourceSubDocInterval.subDocument;
        this.sourceInterval = this.sourceSubDocInterval.interval;
        this.targetSubDocument = this.targetSubDocPos.subDocument;
        this.targetStartPosition = this.targetSubDocPos.position;
        this.sourceDocumentModel = this.sourceSubDocInterval.subDocument.documentModel;
        this.targetDocumentModel = this.targetSubDocPos.subDocument.documentModel;
        this.currentTargetPosition = this.targetSubDocPos.position;
        this.constRunIterator = this.sourceSubDocInterval.subDocument.getConstRunIterator(this.sourceSubDocInterval.interval);
        this.fromFieldIndexesWhatNeedCopyInfo = [];
        this.history.addTransaction(function () {
            _this.prependTableByParagraph();
            while (_this.constRunIterator.moveNext()) {
                var currentRun = _this.constRunIterator.currentRun;
                var handler = _this.runHandlers[currentRun.getType()];
                if (!handler)
                    throw new Error(errors_1.Errors.internalExceptionTemplate("SubDocumentInserter. Inknown run type \"" + currentRun.getType() + ".\""));
                handler(currentRun);
                _this.currentTargetPosition += currentRun.getLength();
            }
            _this.collectTables();
            _this.collectFields();
            _this.collectBookmarks();
            list_1.ListUtils.unique(_this.unloadedCacheImageInfo, function (a, b) { return a.currId - b.currId; }).forEach(function (info) { return _this.targetModelManipulator.picture.loader.load(info); });
        });
        this.insertedInterval = fixed_1.FixedInterval.fromPositions(this.targetSubDocPos.position, this.currentTargetPosition);
    };
    SubDocumentInserter.prototype.fieldCodeRunHandler = function (currentRun) {
        var fromGlobPos = this.constRunIterator.currentChunk.startLogPosition.value + currentRun.startOffset;
        this.fromFieldIndexesWhatNeedCopyInfo.push(field_1.Field.normedBinaryIndexOf(this.sourceSubDocument.fields, fromGlobPos + 1));
        this.textRunHandler(currentRun);
    };
    SubDocumentInserter.prototype.textRunHandler = function (currentRun) {
        this.targetModelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), currentRun.getType() == run_type_1.RunType.LayoutDependentRun && this.targetSubDocument.isMain() ? run_type_1.RunType.TextRun : currentRun.getType(), this.constRunIterator.currentChunk.getRunText(currentRun)));
    };
    SubDocumentInserter.prototype.inlinePictureRunHandler = function (currentRun) {
        this.targetModelManipulator.picture.insertInlinePictureInner(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), this.getInlinePictureInfo(currentRun.info));
    };
    SubDocumentInserter.prototype.anchoredPictureRunHandler = function (currentRun) {
        this.targetModelManipulator.picture.insertAnchoredPictureInner(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), this.getAnchorPictureInfo(currentRun.info));
    };
    SubDocumentInserter.prototype.anchoredTextBoxRunHandler = function (currentRun) {
        var currentAnchoredTextBoxRun = currentRun;
        if (this.targetSubDocument.isTextBox()) {
            this.targetModelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), run_type_1.RunType.TextRun, " "));
        }
        else {
            var newAnchoredTextBox = this.targetModelManipulator.textBox.insertAnchoredTextBox(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), new text_box_manipulator_1.BaseTextBoxInfo(null, currentAnchoredTextBoxRun.size.clone(), currentAnchoredTextBoxRun.shape.clone(), currentAnchoredTextBoxRun.anchorInfo.clone(), currentAnchoredTextBoxRun.textBoxProperties.clone(), currentAnchoredTextBoxRun.containerProperties.clone()));
            var sourceSubDoc = this.sourceDocumentModel.subDocuments[currentAnchoredTextBoxRun.subDocId];
            var targetSubDoc = this.targetModelManipulator.model.subDocuments[newAnchoredTextBox.subDocId];
            new SubDocumentInserter(this.targetModelManipulator, this.options, new sub_document_1.SubDocumentPosition(targetSubDoc, 0), new sub_document_1.SubDocumentInterval(sourceSubDoc, new fixed_1.FixedInterval(0, sourceSubDoc.getDocumentEndPosition())))
                .insert();
            this.targetModelManipulator.range.removeIntervalInner(targetSubDoc, new fixed_1.FixedInterval(targetSubDoc.getDocumentEndPosition() - 2, 1), false);
        }
    };
    SubDocumentInserter.prototype.paragraphRunHandler = function (currentRun) {
        this.targetModelManipulator.paragraph.insertParagraphInner(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), this.getMaskedParagraphPropertiesBundleFull(currentRun.paragraph), true, function () { }));
    };
    SubDocumentInserter.prototype.sectionRunHandler = function (currentRun) {
        this.targetModelManipulator.section.insertSection(this.currInsertSubDocumentPosition, this.getCharPropsBundle(currentRun), this.constRunIterator.currentSection.sectionProperties.clone(), true, this.getMaskedParagraphPropertiesBundleFull(currentRun.paragraph), true);
    };
    SubDocumentInserter.prototype.notSupportedRunHandler = function (_currentRun) {
    };
    SubDocumentInserter.prototype.collectTables = function () {
        var sourceTables = this.sourceSubDocument.tables;
        var startTblInd = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(sourceTables, function (t) { return t.getStartPosition(); }, this.sourceSubDocInterval.interval.start));
        var modelsConstOffset = this.modelsConstOffset;
        for (var tblInd = startTblInd, sourceTbl = void 0; sourceTbl = sourceTables[tblInd]; tblInd++) {
            var sourceTableInterval = sourceTbl.interval;
            if (sourceTableInterval.start >= this.sourceSubDocInterval.interval.end)
                break;
            var intersection = algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(sourceTbl.interval, this.sourceSubDocInterval.interval);
            if (!intersection || intersection.length != sourceTbl.interval.length)
                continue;
            var patternTable = this.getPatternTable(sourceTbl);
            var targetTable = this.targetModelManipulator.table.pasteTable(this.targetSubDocument, patternTable, modelsConstOffset + sourceTbl.getStartPosition());
            patternTable.destructor(this.sourceSubDocInterval.subDocument.positionManager);
            this.newTables.push(targetTable);
        }
    };
    SubDocumentInserter.prototype.getPatternTable = function (sourceTable) {
        var targetTable = sourceTable.clone(this.sourceSubDocInterval.subDocument);
        targetTable.properties = this.getTableProperties(sourceTable.properties);
        targetTable.style = this.getTableStyle(sourceTable.style);
        for (var _i = 0, _a = targetTable.rows; _i < _a.length; _i++) {
            var targetRow = _a[_i];
            targetRow.properties = this.getTableRowProperties(targetRow.properties);
            targetRow.tablePropertiesException = this.getTableProperties(targetRow.tablePropertiesException);
            for (var _b = 0, _c = targetRow.cells; _b < _c.length; _b++) {
                var targetCell = _c[_b];
                targetCell.properties = this.getTableCellProperties(targetCell.properties);
                targetCell.style = this.getTableCellStyle(targetCell.style);
            }
        }
        return targetTable;
    };
    SubDocumentInserter.prototype.collectFields = function () {
        if (this.fromFieldIndexesWhatNeedCopyInfo.length > 0) {
            var sourceFields = this.sourceSubDocument.fields;
            var targetFields = this.targetSubDocument.fields;
            var modelsConstOffset = this.modelsConstOffset;
            var toStartCodePosFirstField = modelsConstOffset + sourceFields[this.fromFieldIndexesWhatNeedCopyInfo[0]].getCodeStartPosition();
            var toFieldIndex = field_1.Field.normedBinaryIndexOf(targetFields, toStartCodePosFirstField);
            if (toFieldIndex < 0 || targetFields[toFieldIndex].getCodeStartPosition() < toStartCodePosFirstField)
                toFieldIndex++;
            while (this.fromFieldIndexesWhatNeedCopyInfo.length > 0) {
                var fromField = this.sourceSubDocument.fields[this.fromFieldIndexesWhatNeedCopyInfo.shift()];
                var newField = new field_1.Field(this.targetSubDocument.positionManager, toFieldIndex, fromField.getFieldStartPosition() + modelsConstOffset, fromField.getSeparatorPosition() + modelsConstOffset, fromField.getFieldEndPosition() + modelsConstOffset, fromField.showCode, fromField.isHyperlinkField() ? fromField.getHyperlinkInfo().clone() : undefined);
                field_1.Field.addField(targetFields, newField);
                toFieldIndex++;
                this.targetModelManipulator.notifyModelChanged(new inserted_1.FieldInsertedSubDocumentChange(this.targetSubDocument.id, newField.getFieldStartPosition(), newField.getSeparatorPosition(), newField.getFieldEndPosition()));
                if (newField.isHyperlinkField())
                    this.targetModelManipulator.notifyModelChanged(new hyperlink_info_changed_1.HyperlinkInfoChangedSubDocumentChange(this.targetSubDocument.id, newField.getResultInterval(), newField.getCodeInterval(), newField.getHyperlinkInfo()));
            }
        }
    };
    SubDocumentInserter.prototype.collectBookmarks = function () {
        this.targetModelManipulator.bookmark.insertBookmarksFromSubDocument(this.sourceSubDocument, this.targetSubDocument, this.sourceInterval, this.modelsConstOffset);
    };
    SubDocumentInserter.prototype.prependTableByParagraph = function () {
        var _this = this;
        if (this.options.insertParagraphMarkBeforeIfStartsWithTable) {
            var tbl = table_1.Table.getTableByPosition(this.sourceSubDocument.tables, this.sourceInterval.start, false);
            if (tbl && tbl.getStartPosition() == this.sourceInterval.start &&
                (this.targetSubDocument.getParagraphByPosition(this.targetStartPosition).startLogPosition.value != this.targetStartPosition ||
                    list_1.ListUtils.unsafeAnyOf(this.targetSubDocument.tables, function (tbl) { return tbl.getEndPosition() == _this.targetStartPosition; }))) {
                this.targetModelManipulator.paragraph.insertParagraphViaHistory(insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams.makeParamsByPosition(new sub_document_1.SubDocumentPosition(this.targetSubDocument, this.targetStartPosition)));
                this.history.addAndRedo(new character_properties_history_items_1.FontHiddenHistoryItem(this.targetModelManipulator, new sub_document_1.SubDocumentInterval(this.targetSubDocument, new fixed_1.FixedInterval(this.targetStartPosition, 1)), true, true));
                this.targetStartPosition++;
                this.currentTargetPosition++;
            }
        }
    };
    SubDocumentInserter.prototype.getFontInfo = function (font) {
        var fontInfoCache = this.targetDocumentModel.cache.fontInfoCache;
        var targetFont = fontInfoCache.getItemByName(font.name);
        return targetFont ? targetFont :
            this.targetModelManipulator.modelManager.richOptions.fonts.getPermittedFont(fontInfoCache, font);
    };
    SubDocumentInserter.prototype.getColorModelInfo = function (color) {
        return this.targetDocumentModel.cache.colorModelInfoCache.getItem(color);
    };
    SubDocumentInserter.prototype.getCharPropsBundle = function (run) {
        return new properties_bundle_1.MaskedCharacterPropertiesBundle(this.getMaskedCharacterProperties(run.maskedCharacterProperties), this.getCharacterStyle(run.characterStyle));
    };
    SubDocumentInserter.prototype.getMaskedParagraphPropertiesBundleFull = function (paragraph) {
        return new properties_bundle_1.MaskedParagraphPropertiesBundleFull(this.getMaskedParagraphProperties(paragraph.maskedParagraphProperties), this.getParagraphStyle(paragraph.paragraphStyle), this.getParagraphListInfo(paragraph), paragraph.tabs.clone());
    };
    SubDocumentInserter.prototype.getMaskedCharacterProperties = function (properties) {
        var props = properties.clone();
        if (props.fontInfo)
            props.fontInfo = this.getFontInfo(props.fontInfo);
        props.highlightColor = this.getColorModelInfo(props.highlightColor);
        props.textColor = this.getColorModelInfo(props.textColor);
        props.underlineColor = this.getColorModelInfo(props.underlineColor);
        props.strikeoutColor = this.getColorModelInfo(props.strikeoutColor);
        return props;
    };
    SubDocumentInserter.prototype.getMaskedParagraphProperties = function (properties) {
        var props = properties.clone();
        props.shadingInfo = this.targetDocumentModel.cache.shadingInfoCache.getItem(props.shadingInfo);
        return props;
    };
    SubDocumentInserter.prototype.getTableProperties = function (properties) {
        var props = properties.clone();
        return props;
    };
    SubDocumentInserter.prototype.getTableRowProperties = function (properties) {
        var props = properties.clone();
        return props;
    };
    SubDocumentInserter.prototype.getTableCellProperties = function (properties) {
        var props = properties.clone();
        return props;
    };
    SubDocumentInserter.prototype.getCharacterStyle = function (style) {
        var targetStyle = this.targetDocumentModel.stylesManager.getCharacterStyleByName(style.styleName);
        if (targetStyle)
            return targetStyle;
        if (!this.options.enableCharacterStyleCreation)
            return this.targetDocumentModel.stylesManager.getDefaultCharacterStyle();
        targetStyle = style.clone();
        this.targetDocumentModel.stylesManager.registerCharacterStyle(targetStyle);
        targetStyle.maskedCharacterProperties = this.getMaskedCharacterProperties(targetStyle.maskedCharacterProperties);
        if (targetStyle.parent)
            targetStyle.parent = this.getCharacterStyle(targetStyle.parent);
        if (targetStyle.linkedStyle)
            targetStyle.linkedStyle = this.getParagraphStyle(targetStyle.linkedStyle);
        return targetStyle;
    };
    SubDocumentInserter.prototype.getParagraphStyle = function (style) {
        var targetStyle = this.targetDocumentModel.stylesManager.getParagraphStyleByName(style.styleName);
        if (targetStyle)
            return targetStyle;
        if (!this.options.enableParagraphStyleCreation)
            return this.targetDocumentModel.stylesManager.getDefaultParagraphStyle();
        targetStyle = style.clone();
        this.targetDocumentModel.stylesManager.registerParagraphStyle(targetStyle);
        targetStyle.maskedCharacterProperties = this.getMaskedCharacterProperties(targetStyle.maskedCharacterProperties);
        targetStyle.maskedParagraphProperties = this.getMaskedParagraphProperties(targetStyle.maskedParagraphProperties);
        if (targetStyle.parent)
            targetStyle.parent = this.getParagraphStyle(targetStyle.parent);
        if (targetStyle.linkedStyle)
            targetStyle.linkedStyle = this.getCharacterStyle(targetStyle.linkedStyle);
        return targetStyle;
    };
    SubDocumentInserter.prototype.getTableStyle = function (style) {
        var _this = this;
        var targetStyle = this.targetDocumentModel.stylesManager.getTableStyleByName(style.styleName);
        if (targetStyle)
            return targetStyle;
        if (!this.options.enableTableStyleCreation)
            return this.targetDocumentModel.stylesManager.getDefaultTableStyle();
        targetStyle = style.clone();
        this.targetDocumentModel.stylesManager.registerTableStyle(targetStyle);
        targetStyle.baseConditionalStyle = this.getTableConditionalStyle(targetStyle.baseConditionalStyle);
        targetStyle.conditionalStyles = number_1.NumberMapUtils.map(targetStyle.conditionalStyles, function (cs) { return _this.getTableConditionalStyle(cs); });
        if (targetStyle.parent)
            targetStyle.parent = this.getTableStyle(targetStyle.parent);
        return targetStyle;
    };
    SubDocumentInserter.prototype.getTableConditionalStyle = function (style) {
        var targetStyle = style.clone();
        targetStyle.maskedCharacterProperties = this.getMaskedCharacterProperties(targetStyle.maskedCharacterProperties);
        targetStyle.maskedParagraphProperties = this.getMaskedParagraphProperties(targetStyle.maskedParagraphProperties);
        targetStyle.tableProperties = this.getTableProperties(targetStyle.tableProperties);
        targetStyle.tableRowProperties = this.getTableRowProperties(targetStyle.tableRowProperties);
        targetStyle.tableCellProperties = this.getTableCellProperties(targetStyle.tableCellProperties);
        return targetStyle;
    };
    SubDocumentInserter.prototype.getTableCellStyle = function (style) {
        if (!style)
            return style;
        var targetStyle = this.targetDocumentModel.stylesManager.getTableCellStyleByName(style.styleName);
        if (targetStyle)
            return targetStyle;
        return this.targetDocumentModel.stylesManager.getDefaultTableCellStyle();
    };
    SubDocumentInserter.prototype.getCacheImageInfo = function (sourceCacheInfo) {
        var info = null;
        if (sourceCacheInfo.isLoaded) {
            if (this.targetModelManipulator.modelManager.clientMode)
                info = this.targetDocumentModel.cache.imageCache.createLoadedInfo(sourceCacheInfo.base64, sourceCacheInfo.size);
            else
                info = this.targetDocumentModel.cache.imageCache.createUnloadedInfoByBase64(sourceCacheInfo.base64, sourceCacheInfo.size);
        }
        else if (sourceCacheInfo.imageUrl)
            info = this.targetDocumentModel.cache.imageCache.createUnloadedInfoByUrl(sourceCacheInfo.imageUrl);
        else if (sourceCacheInfo.file)
            info = this.targetDocumentModel.cache.imageCache.createUnloadedInfoByFile(sourceCacheInfo.file);
        else
            info = this.targetDocumentModel.cache.imageCache.createUnloadedInfoByBase64(sourceCacheInfo.base64);
        if (!info.isLoaded)
            this.unloadedCacheImageInfo.push(info);
        return info;
    };
    SubDocumentInserter.prototype.getInlinePictureInfo = function (sourceInfo) {
        var targetPicInfo = sourceInfo.clone();
        targetPicInfo.size.cacheInfo = this.getCacheImageInfo(targetPicInfo.size.cacheInfo);
        return targetPicInfo;
    };
    SubDocumentInserter.prototype.getAnchorPictureInfo = function (sourceInfo) {
        var targetPicInfo = sourceInfo.clone();
        targetPicInfo.size.cacheInfo = this.getCacheImageInfo(targetPicInfo.size.cacheInfo);
        return targetPicInfo;
    };
    SubDocumentInserter.prototype.getParagraphListInfo = function (sourceParagraph) {
        var result = new properties_bundle_1.ParagraphListInfo(-1, sourceParagraph.listLevelIndex);
        if (sourceParagraph.numberingListIndex >= 0) {
            if (this.sameModel) {
                var sourceNumbList = this.sourceDocumentModel.numberingLists[sourceParagraph.numberingListIndex];
                result.numberingListIndex = this.targetDocumentModel.getNumberingListIndexById(sourceNumbList.getId());
                if (result.numberingListIndex < 0) {
                    var targetAbstrNumbListInd = this.targetDocumentModel.getAbstractNumberingListIndexById(this.sourceDocumentModel.abstractNumberingLists[sourceNumbList.abstractNumberingListIndex].getId());
                    if (targetAbstrNumbListInd < 0) {
                        var targetAbstrNumbList = new numbering_list_1.AbstractNumberingList(this.targetDocumentModel);
                        targetAbstrNumbList.copyFrom(this.sourceDocumentModel.abstractNumberingLists[sourceNumbList.abstractNumberingListIndex]);
                        targetAbstrNumbList.resetId();
                        targetAbstrNumbList.getId();
                        targetAbstrNumbListInd = this.targetModelManipulator.numberingList.addAbstractNumberingList(targetAbstrNumbList);
                    }
                    var targetNumberingList = new numbering_list_1.NumberingList(this.targetDocumentModel, targetAbstrNumbListInd);
                    targetNumberingList.copyFrom(sourceNumbList);
                    result.numberingListIndex = this.targetModelManipulator.numberingList.addNumberingList(targetNumberingList);
                }
            }
            else {
                var targetNumbListInd = this.numberingListIndexesMap[sourceParagraph.numberingListIndex];
                if (targetNumbListInd !== undefined) {
                    result.numberingListIndex = targetNumbListInd;
                }
                else {
                    var sourceNumbList = this.sourceDocumentModel.numberingLists[sourceParagraph.numberingListIndex];
                    var targetAbstrNumbListInd = this.getAbstractNumberingListId(sourceNumbList.abstractNumberingListIndex);
                    var targetNumberingList = new numbering_list_1.NumberingList(this.targetDocumentModel, targetAbstrNumbListInd);
                    targetNumberingList.copyFrom(sourceNumbList);
                    targetNumberingList.resetId();
                    targetNumberingList.getId();
                    result.numberingListIndex = this.targetModelManipulator.numberingList.addNumberingList(targetNumberingList);
                    this.numberingListIndexesMap[sourceParagraph.numberingListIndex] = result.numberingListIndex;
                }
            }
        }
        if (result.numberingListIndex < 0) {
            var targetParagraph = this.targetSubDocument.getParagraphByPosition(this.currentTargetPosition);
            var targetParagraphNumberingListIndex = targetParagraph.getNumberingListIndex();
            if (targetParagraphNumberingListIndex >= 0) {
                if (this.targetStartPosition === targetParagraph.startLogPosition.value) {
                    result.numberingListIndex = targetParagraphNumberingListIndex;
                    result.listLevelIndex = targetParagraph.getListLevelIndex();
                }
            }
        }
        return result;
    };
    SubDocumentInserter.prototype.getAbstractNumberingListId = function (sourceAbstrNumbListIndex) {
        var targetIndex = this.abstractNumberingListIndexesMap[sourceAbstrNumbListIndex];
        if (targetIndex !== undefined)
            return targetIndex;
        var targetAbstrNumbList = new numbering_list_1.AbstractNumberingList(this.targetDocumentModel);
        targetAbstrNumbList.copyFrom(this.sourceDocumentModel.abstractNumberingLists[sourceAbstrNumbListIndex]);
        targetAbstrNumbList.resetId();
        targetAbstrNumbList.getId();
        targetIndex = this.targetModelManipulator.numberingList.addAbstractNumberingList(targetAbstrNumbList);
        this.abstractNumberingListIndexesMap[sourceAbstrNumbListIndex] = targetIndex;
        return targetIndex;
    };
    return SubDocumentInserter;
}());
exports.SubDocumentInserter = SubDocumentInserter;
