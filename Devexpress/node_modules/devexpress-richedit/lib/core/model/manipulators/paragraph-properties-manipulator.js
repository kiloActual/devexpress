"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var paragraph_formatting_changed_1 = require("../changes/sub-document/properties/paragraph-formatting-changed");
var paragraph_properties_changed_1 = require("../changes/sub-document/properties/paragraph-properties-changed");
var history_item_state_1 = require("../history/states/history-item-state");
var history_item_state_object_1 = require("../history/states/history-item-state-object");
var json_paragraph_enums_1 = require("../json/enums/json-paragraph-enums");
var control_1 = require("../options/control");
var paragraph_properties_1 = require("../paragraph/paragraph-properties");
var base_manipulator_1 = require("./base-manipulator");
var ParagraphPropertiesManipulator = (function (_super) {
    tslib_1.__extends(ParagraphPropertiesManipulator, _super);
    function ParagraphPropertiesManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.align = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.alignment);
        _this.contextualSpacing = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.contextualSpacing);
        _this.rightToLeft = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.rightToLeft);
        _this.afterAutoSpacing = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.afterAutoSpacing);
        _this.shadingInfo = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.shadingInfo);
        _this.beforeAutoSpacing = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.beforeAutoSpacing);
        _this.firstLineIndent = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent);
        _this.keepLinesTogether = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.keepLinesTogether);
        _this.firstLineIndentType = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType);
        _this.leftIndent = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.leftIndent);
        _this.lineSpacing = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing);
        _this.lineSpacingType = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacingType);
        _this.outlineLevel = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.outlineLevel);
        _this.pageBreakBefore = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.pageBreakBefore);
        _this.rightIndent = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.rightIndent);
        _this.spacingAfter = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.spacingAfter);
        _this.spacingBefore = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.spacingBefore);
        _this.suppressHyphenation = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.suppressHyphenation);
        _this.suppressLineNumbers = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.suppressLineNumbers);
        _this.widowOrphanControl = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.widowOrphanControl);
        _this.divId = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.divId);
        _this.keepWithNext = new MaskedParagraphPropertiesManipulator(manipulator, paragraph_properties_1.ParagraphPropertyDescriptor.keepWithNext);
        _this.useValue = new ParagraphPropertiesUseValueManipulator(manipulator);
        return _this;
    }
    ParagraphPropertiesManipulator.prototype.changeAllProperties = function (subDocument, paragraphIndex, properties, style, tabs, numberingListIndex, listLevelIndex) {
        var paragraph = subDocument.paragraphs[paragraphIndex];
        paragraph.setParagraphProperties(properties);
        paragraph.paragraphStyle = style;
        paragraph.tabs = tabs.clone();
        paragraph.numberingListIndex = numberingListIndex;
        paragraph.listLevelIndex = listLevelIndex;
        paragraph.onParagraphPropertiesChanged();
        this.modelManipulator.notifyModelChanged(new paragraph_properties_changed_1.ParagraphPropertiesChangedSubDocumentChange(subDocument.id, paragraphIndex, subDocument.paragraphs[paragraphIndex].interval, properties, style, tabs, new properties_bundle_1.ParagraphListInfo(numberingListIndex, listLevelIndex)));
    };
    return ParagraphPropertiesManipulator;
}(base_manipulator_1.BaseManipulator));
exports.ParagraphPropertiesManipulator = ParagraphPropertiesManipulator;
var ParagraphPropertiesUseValueManipulator = (function () {
    function ParagraphPropertiesUseValueManipulator(manipulator) {
        this.manipulator = manipulator;
    }
    ParagraphPropertiesUseValueManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.paragraphFormatting))
            return oldState;
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var paragraphs = subDocument.getParagraphsByInterval(interval);
        for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) {
            var properties = paragraph.maskedParagraphProperties.clone();
            oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(new fixed_1.FixedInterval(paragraph.startLogPosition.value, paragraph.length), properties.useValue));
            newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(new fixed_1.FixedInterval(paragraph.startLogPosition.value, paragraph.length), newValue));
            properties.useValue = newValue;
            paragraph.setParagraphProperties(properties);
            paragraph.onParagraphPropertiesChanged();
        }
        this.manipulator.notifyModelChanged(new paragraph_formatting_changed_1.ParagraphFormattingChangedSubDocumentChange(subDocument.id, json_paragraph_enums_1.JSONParagraphFormattingProperty.UseValue, newState));
        return oldState;
    };
    ParagraphPropertiesUseValueManipulator.prototype.restoreValue = function (subDocument, state) {
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.paragraphFormatting))
            return;
        for (var stateValue, i = 0; stateValue = state.objects[i]; i++) {
            var paragraphs = subDocument.getParagraphsByInterval(stateValue.interval);
            for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) {
                var properties = paragraph.maskedParagraphProperties.clone();
                properties.useValue = stateValue.value;
                paragraph.setParagraphProperties(properties);
                paragraph.onParagraphPropertiesChanged();
            }
        }
        this.manipulator.notifyModelChanged(new paragraph_formatting_changed_1.ParagraphFormattingChangedSubDocumentChange(subDocument.id, json_paragraph_enums_1.JSONParagraphFormattingProperty.UseValue, state));
    };
    return ParagraphPropertiesUseValueManipulator;
}());
var MaskedParagraphPropertiesManipulator = (function () {
    function MaskedParagraphPropertiesManipulator(manipulator, descriptor) {
        this.manipulator = manipulator;
        this.descriptor = descriptor;
    }
    MaskedParagraphPropertiesManipulator.prototype.setValue = function (subDocument, interval, newValue, newUse) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.paragraphFormatting))
            return oldState;
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var paragraphs = subDocument.getParagraphsByInterval(interval);
        for (var i = 0, paragraph; paragraph = paragraphs[i]; i++) {
            var currentInterval = paragraph.interval;
            var properties = paragraph.maskedParagraphProperties.clone();
            oldState.register(new history_item_state_object_1.HistoryItemIntervalUseStateObject(currentInterval, this.descriptor.getProp(properties), properties.getUseValue(this.descriptor.maskValue())));
            newState.register(new history_item_state_object_1.HistoryItemIntervalUseStateObject(currentInterval, newValue, newUse));
            this.descriptor.setProp(properties, newValue);
            properties.setUseValue(this.descriptor.maskValue(), newUse);
            paragraph.setParagraphProperties(properties);
            if (paragraph.hasParagraphMergedProperies() && newUse) {
                var mergedProperties = paragraph.getParagraphMergedProperties().clone();
                this.descriptor.setProp(mergedProperties, newValue);
                paragraph.setParagraphMergedProperies(mergedProperties);
            }
            else
                paragraph.onParagraphPropertiesChanged();
        }
        this.manipulator.notifyModelChanged(new paragraph_formatting_changed_1.ParagraphFormattingChangedSubDocumentChange(subDocument.id, this.descriptor.getJSONProperty(), newState));
        return oldState;
    };
    MaskedParagraphPropertiesManipulator.prototype.restoreValue = function (subDocument, state) {
        if (!control_1.ControlOptions.isEnabled(subDocument.documentModel.options.paragraphFormatting))
            return;
        if (state.isEmpty())
            return;
        for (var i = 0, stateItem; stateItem = state.objects[i]; i++) {
            var paragraphs = subDocument.getParagraphsByInterval(stateItem.interval);
            for (var j = 0, paragraph; paragraph = paragraphs[j]; j++) {
                var properties = paragraph.maskedParagraphProperties.clone();
                this.descriptor.setProp(properties, stateItem.value);
                properties.setUseValue(this.descriptor.maskValue(), stateItem.use);
                paragraph.setParagraphProperties(properties);
                if (paragraph.hasParagraphMergedProperies()) {
                    var mergedProperties = paragraph.getParagraphMergedProperties().clone();
                    this.descriptor.setProp(mergedProperties, stateItem.value);
                    paragraph.setParagraphMergedProperies(mergedProperties);
                }
                else
                    paragraph.onParagraphPropertiesChanged();
            }
        }
        this.manipulator.notifyModelChanged(new paragraph_formatting_changed_1.ParagraphFormattingChangedSubDocumentChange(subDocument.id, this.descriptor.getJSONProperty(), state));
    };
    return MaskedParagraphPropertiesManipulator;
}());
