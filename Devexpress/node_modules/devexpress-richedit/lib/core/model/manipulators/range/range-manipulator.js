"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var hyperlink_info_changed_1 = require("../../changes/sub-document/field/hyperlink-info-changed");
var inserted_1 = require("../../changes/sub-document/field/inserted");
var history_runs_1 = require("../../character/history-runs");
var field_1 = require("../../fields/field");
var paragraph_properties_history_items_1 = require("../../history/items/paragraph-properties-history-items");
var remove_interval_history_item_1 = require("../../history/items/remove-interval-history-item");
var paragraph_properties_1 = require("../../paragraph/paragraph-properties");
var paragraph_style_1 = require("../../paragraph/paragraph-style");
var run_type_1 = require("../../runs/run-type");
var sub_document_1 = require("../../sub-document");
var base_manipulator_1 = require("../base-manipulator");
var insert_paragraph_manipulator_params_1 = require("../paragraph-manipulator/insert-paragraph-manipulator-params");
var insert_text_manipulator_params_1 = require("../text-manipulator/insert-text-manipulator-params");
var create_range_copy_operation_1 = require("./create-range-copy-operation");
var remove_interval_operation_1 = require("./remove-interval-operation");
var restore_removed_interval_operation_1 = require("./restore-removed-interval-operation");
var RangeManipulator = (function (_super) {
    tslib_1.__extends(RangeManipulator, _super);
    function RangeManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RangeManipulator.prototype.copyIntervalTo = function (subDocument, interval, toPosition) {
        var _this = this;
        this.history.addTransaction(function () {
            create_range_copy_operation_1.RangeCopy.create(new sub_document_1.SubDocumentIntervals(subDocument, [interval]))
                .insertTo(_this.modelManipulator, new sub_document_1.SubDocumentPosition(subDocument, toPosition));
        });
    };
    RangeManipulator.prototype.moveIntervalTo = function (subDocInterval, toPosition) {
        subDocInterval.validateInterval();
        this.history.beginTransaction();
        var rangeCopy = create_range_copy_operation_1.RangeCopy.create(new sub_document_1.SubDocumentIntervals(subDocInterval.subDocument, [subDocInterval.interval]));
        var insertedInterval = rangeCopy.insertTo(this.modelManipulator, new sub_document_1.SubDocumentPosition(subDocInterval.subDocument, toPosition));
        if (toPosition < subDocInterval.interval.start)
            this.removeInterval(new sub_document_1.SubDocumentInterval(subDocInterval.subDocument, new fixed_1.FixedInterval(subDocInterval.interval.start + insertedInterval.length, subDocInterval.interval.length)), false, true);
        else {
            this.removeInterval(subDocInterval, false, true);
            insertedInterval.start -= subDocInterval.interval.length;
        }
        this.history.endTransaction();
        return insertedInterval;
    };
    RangeManipulator.prototype.removeIntervalInner = function (subDocument, interval, setPropertiesSecondParagraph) {
        var operation = new remove_interval_operation_1.RemoveIntervalOperation(this.modelManipulator, subDocument);
        return operation.execute(interval, setPropertiesSecondParagraph, true);
    };
    RangeManipulator.prototype.removeIntervalWithoutHistory = function (subDocument, interval, setPropertiesSecondParagraph) {
        var operation = new remove_interval_operation_1.RemoveIntervalOperation(this.modelManipulator, subDocument);
        operation.execute(interval, setPropertiesSecondParagraph, false);
    };
    RangeManipulator.prototype.restoreRemovedInterval = function (subDocument, removeOperationResult) {
        new restore_removed_interval_operation_1.RestoreRemovedIntervalOperation(this.modelManipulator, subDocument).execute(removeOperationResult);
    };
    RangeManipulator.prototype.unpackHistoryRunsToModel = function (subDocument, historyRuns) {
        var fields = subDocument.fields;
        var fieldStackHistory = [];
        for (var historyRunIndex = 0, historyRun; historyRun = historyRuns[historyRunIndex]; historyRunIndex++) {
            switch (historyRun.type) {
                case run_type_1.RunType.ParagraphRun: {
                    if (!(historyRun instanceof history_runs_1.HistoryRunParagraph))
                        throw new Error("In unpackHistoryRunsToModel type text run = TextRunType.ParagraphRun, but type historyRun != HistoryRunParagraph. historyRun.offsetAtStartDocument = " +
                            historyRun.offsetAtStartDocument + ", historyRun.text = " + historyRun.text);
                    var historyRunParagraph = historyRun;
                    this.modelManipulator.paragraph.insertParagraphInner(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, historyRunParagraph.offsetAtStartDocument), historyRunParagraph.charPropsBundle, historyRunParagraph.parPropsBundle, historyRunParagraph.applyDirectlyToNewParagraph));
                    break;
                }
                case run_type_1.RunType.SectionRun: {
                    if (!(historyRun instanceof history_runs_1.HistoryRunSection))
                        throw new Error("In unpackHistoryRunsToModel type text run = TextRunType.SectionRun, but type historyRun != HistoryRunSection. historyRun.offsetAtStartDocument = " +
                            historyRun.offsetAtStartDocument + ", historyRun.text = " + historyRun.text);
                    var historyRunSection = historyRun;
                    this.modelManipulator.section.insertSection(new sub_document_1.SubDocumentPosition(subDocument, historyRunSection.offsetAtStartDocument), historyRunSection.charPropsBundle, historyRunSection.sectionProperties, true, historyRunSection.parPropsBundle, historyRunSection.applyDirectlyToNewParagraph);
                    break;
                }
                case run_type_1.RunType.InlinePictureRun: {
                    if (!(historyRun instanceof history_runs_1.HistoryRunInlinePicture))
                        throw new Error("In unpackHistoryRunsToModel type text run = TextRunType.InlinePictureRun, but type historyRun != HistoryRunInlinePicture. historyRun.offsetAtStartDocument = " +
                            historyRun.offsetAtStartDocument + ", historyRun.text = " + historyRun.text);
                    this.modelManipulator.picture.insertInlinePictureInner(new sub_document_1.SubDocumentPosition(subDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.picInfo, historyRun.options);
                    break;
                }
                case run_type_1.RunType.FieldCodeStartRun: {
                    if (!(historyRun instanceof history_runs_1.HistoryRunFieldCodeStart))
                        throw new Error("In unpackHistoryRunsToModel type text run = TextRunType.HistoryRunFieldCodeStart, but type historyRun != HistoryRunFieldCodeStart. historyRun.offsetAtStartDocument = " +
                            historyRun.offsetAtStartDocument + ", historyRun.text = " + historyRun.text);
                    fieldStackHistory.push(historyRun);
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    break;
                }
                case run_type_1.RunType.FieldResultEndRun: {
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    var histFieldCodeStartRun = fieldStackHistory.pop();
                    var fieldInsertIndex = 0;
                    if (fields.length > 0) {
                        fieldInsertIndex = Math.max(0, field_1.Field.normedBinaryIndexOf(fields, histFieldCodeStartRun.startPosition + 1));
                        if (histFieldCodeStartRun.startPosition > fields[fieldInsertIndex].getFieldStartPosition())
                            fieldInsertIndex++;
                    }
                    var newField = new field_1.Field(subDocument.positionManager, fieldInsertIndex, histFieldCodeStartRun.startPosition, histFieldCodeStartRun.separatorPosition, histFieldCodeStartRun.endPosition, histFieldCodeStartRun.showCode, histFieldCodeStartRun.hyperlinkInfo ? histFieldCodeStartRun.hyperlinkInfo.clone() : undefined);
                    field_1.Field.addField(fields, newField);
                    this.modelManipulator.notifyModelChanged(new inserted_1.FieldInsertedSubDocumentChange(subDocument.id, histFieldCodeStartRun.startPosition, histFieldCodeStartRun.separatorPosition, histFieldCodeStartRun.endPosition));
                    if (histFieldCodeStartRun.hyperlinkInfo)
                        this.modelManipulator.notifyModelChanged(new hyperlink_info_changed_1.HyperlinkInfoChangedSubDocumentChange(subDocument.id, fixed_1.FixedInterval.fromPositions(histFieldCodeStartRun.separatorPosition + 1, histFieldCodeStartRun.endPosition - 1), fixed_1.FixedInterval.fromPositions(histFieldCodeStartRun.startPosition + 1, histFieldCodeStartRun.separatorPosition), histFieldCodeStartRun.hyperlinkInfo));
                    break;
                }
                default: {
                    this.modelManipulator.text.insertTextInner(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, historyRun.offsetAtStartDocument), historyRun.charPropsBundle, historyRun.type, historyRun.text));
                    break;
                }
            }
        }
    };
    RangeManipulator.prototype.removeInterval = function (subDocInterval, removeTableIfItMatchesWithInterval, clearLastParagraphIfIntervalMatchesWholeDocument) {
        if (subDocInterval.interval.length == 0)
            return;
        this.history.beginTransaction();
        this.modelManipulator.table.removeTablesOnInterval(subDocInterval, removeTableIfItMatchesWithInterval);
        var documentEndPosition = subDocInterval.subDocument.getDocumentEndPosition();
        var isWholeDocumentRemoved = clearLastParagraphIfIntervalMatchesWholeDocument &&
            subDocInterval.interval.start === 0 && subDocInterval.interval.length === documentEndPosition;
        if (subDocInterval.interval.end == documentEndPosition)
            subDocInterval.interval.length -= 1;
        var setPropertiesSecondParagraph = search_1.SearchUtils.binaryIndexOf(subDocInterval.subDocument.paragraphs, function (p) { return p.startLogPosition.value - subDocInterval.interval.start; }) >= 0;
        this.history.addAndRedo(new remove_interval_history_item_1.RemoveIntervalHistoryItem(this.modelManipulator, subDocInterval, setPropertiesSecondParagraph));
        if (isWholeDocumentRemoved) {
            this.history.addAndRedo(new paragraph_properties_history_items_1.ParagraphPropertiesHistoryItem(this.modelManipulator, subDocInterval.subDocument, 0, paragraph_properties_1.MaskedParagraphProperties.createDefault(this.model), this.model.getDefaultParagraphStyle(), -1, -1, new paragraph_style_1.TabProperties()));
            this.modelManipulator.characterProperties.resetCharacterFormatting(subDocInterval.subDocument, new fixed_1.FixedInterval(0, 1));
        }
        this.history.endTransaction();
    };
    return RangeManipulator;
}(base_manipulator_1.BaseManipulator));
exports.RangeManipulator = RangeManipulator;
