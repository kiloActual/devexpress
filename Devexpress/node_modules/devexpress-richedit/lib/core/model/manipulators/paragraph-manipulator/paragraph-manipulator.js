"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var paragraph_inserted_1 = require("../../changes/sub-document/text/paragraph-inserted");
var insert_paragraph_history_item_1 = require("../../history/items/insert-paragraph-history-item");
var paragraph_1 = require("../../paragraph/paragraph");
var rich_utils_1 = require("../../rich-utils");
var run_type_1 = require("../../runs/run-type");
var simple_runs_1 = require("../../runs/simple-runs");
var runs_base_manipulator_1 = require("../runs-base-manipulator");
var ParagraphManipulator = (function (_super) {
    tslib_1.__extends(ParagraphManipulator, _super);
    function ParagraphManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ParagraphManipulator.prototype.insertParagraphViaHistory = function (params) {
        if (!params.correctAndCheckParams())
            return new fixed_1.FixedInterval(params.subDocPos.position, 0);
        this.history.addAndRedo(new insert_paragraph_history_item_1.InsertParagraphHistoryItem(this.modelManipulator, params));
        return new fixed_1.FixedInterval(params.subDocPos.position, 1);
    };
    ParagraphManipulator.prototype.insertParagraphInner = function (params) {
        var subDocument = params.subDocPos.subDocument;
        if (ParagraphManipulator.insertParagraphInEnd(subDocument, params.subDocPos.position, params.charPropsBundle)) {
            this.modelManipulator.notifyModelChanged(new paragraph_inserted_1.ParagraphInsertedSubDocumentChange(subDocument.id, params.subDocPos.position, list_1.ListUtils.last(subDocument.paragraphs)));
            return;
        }
        var insertedRun = this.insertRunInternal(params.subDocPos, params.charPropsBundle, run_type_1.RunType.ParagraphRun, rich_utils_1.RichUtils.specialCharacters.ParagraphMark);
        var currentRun = subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex];
        var oldParagraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, params.subDocPos.position + 1);
        var oldParagraph = subDocument.paragraphs[oldParagraphIndex];
        subDocument.positionManager.unregisterPosition(oldParagraph.startLogPosition);
        var newParagraph = new paragraph_1.Paragraph(subDocument, null, 1, null, null);
        newParagraph.onParagraphPropertiesChanged();
        this.applyParagraphProperties(newParagraph, oldParagraph, !params.applyDirectlyToNewParagraph, params.parPropsBundle);
        currentRun.paragraph = newParagraph;
        subDocument.paragraphs.splice(oldParagraphIndex, 0, newParagraph);
        var indexRun = insertedRun.runIndex - 1;
        completeExecuteAllCycles: for (var indexChunk = insertedRun.chunkIndex, chunk; chunk = subDocument.chunks[indexChunk]; indexChunk--) {
            for (var run; run = chunk.textRuns[indexRun]; indexRun--) {
                if (run.isParagraphOrSectionRun())
                    break completeExecuteAllCycles;
                run.paragraph = newParagraph;
                run.onCharacterPropertiesChanged();
                newParagraph.length += run.getLength();
                oldParagraph.length -= run.getLength();
            }
            if (indexChunk > 0)
                indexRun = subDocument.chunks[indexChunk - 1].textRuns.length - 1;
        }
        newParagraph.startLogPosition = subDocument.positionManager.registerPosition(run != undefined ? chunk.startLogPosition.value + run.startOffset + 1 : 0);
        oldParagraph.startLogPosition = subDocument.positionManager.registerPosition(params.subDocPos.position + 1);
        indexRun = insertedRun.runIndex + 1;
        completeExecuteAllCycles: for (var indexChunk = insertedRun.chunkIndex, chunk; chunk = subDocument.chunks[indexChunk]; indexChunk++) {
            for (var run; run = chunk.textRuns[indexRun]; indexRun++) {
                run.onCharacterPropertiesChanged();
                if (run.isParagraphOrSectionRun())
                    break completeExecuteAllCycles;
            }
            indexRun = 0;
        }
        this.modelManipulator.notifyModelChanged(new paragraph_inserted_1.ParagraphInsertedSubDocumentChange(subDocument.id, params.subDocPos.position, newParagraph));
        params.actionAfter(this.modelManipulator.modelManager);
    };
    ParagraphManipulator.prototype.applyParagraphProperties = function (newParagraph, oldParagraph, copyPropertiesToOldParagraph, parPropsBundle) {
        if (parPropsBundle.props) {
            if (copyPropertiesToOldParagraph) {
                oldParagraph.onParagraphPropertiesChanged();
                newParagraph.setParagraphProperties(oldParagraph.maskedParagraphProperties);
                oldParagraph.setParagraphProperties(parPropsBundle.props);
            }
            else {
                newParagraph.setParagraphProperties(parPropsBundle.props);
            }
        }
        else
            newParagraph.setParagraphProperties(oldParagraph.maskedParagraphProperties);
        if (parPropsBundle.style) {
            if (copyPropertiesToOldParagraph) {
                newParagraph.paragraphStyle = oldParagraph.paragraphStyle;
                oldParagraph.paragraphStyle = parPropsBundle.style;
            }
            else {
                newParagraph.paragraphStyle = parPropsBundle.style;
            }
        }
        else
            newParagraph.paragraphStyle = oldParagraph.paragraphStyle;
        if (parPropsBundle.listInfo !== undefined && parPropsBundle.listInfo.listLevelIndex !== undefined && parPropsBundle.listInfo.numberingListIndex !== undefined) {
            if (copyPropertiesToOldParagraph) {
                newParagraph.numberingListIndex = oldParagraph.numberingListIndex;
                newParagraph.listLevelIndex = oldParagraph.listLevelIndex;
                oldParagraph.numberingListIndex = parPropsBundle.listInfo.numberingListIndex;
                oldParagraph.listLevelIndex = parPropsBundle.listInfo.listLevelIndex;
            }
            else {
                newParagraph.numberingListIndex = parPropsBundle.listInfo.numberingListIndex;
                newParagraph.listLevelIndex = parPropsBundle.listInfo.listLevelIndex;
            }
        }
        else {
            newParagraph.numberingListIndex = oldParagraph.numberingListIndex;
            newParagraph.listLevelIndex = oldParagraph.listLevelIndex;
        }
        if (parPropsBundle.tabs) {
            if (copyPropertiesToOldParagraph) {
                newParagraph.tabs = oldParagraph.tabs.clone();
                oldParagraph.tabs = parPropsBundle.tabs;
            }
            else {
                newParagraph.tabs = parPropsBundle.tabs;
            }
        }
        else
            newParagraph.tabs = oldParagraph.tabs.clone();
    };
    ParagraphManipulator.insertParagraphInEnd = function (subDocument, position, charPropsBundle) {
        var lastChunk = subDocument.chunks[subDocument.chunks.length - 1];
        var offsetAtStartDocumentLastSymbol = lastChunk.startLogPosition.value + lastChunk.textBuffer.length;
        if (position >= offsetAtStartDocumentLastSymbol) {
            position = offsetAtStartDocumentLastSymbol;
            var prevParagraph = subDocument.paragraphs[subDocument.paragraphs.length - 1];
            var newParagraph = new paragraph_1.Paragraph(subDocument, subDocument.positionManager.registerPosition(position), 1, prevParagraph.paragraphStyle, prevParagraph.maskedParagraphProperties);
            var newTextRun = new simple_runs_1.ParagraphRun(position - lastChunk.startLogPosition.value, newParagraph, charPropsBundle);
            subDocument.paragraphs.push(newParagraph);
            lastChunk.textRuns.push(newTextRun);
            lastChunk.textBuffer = lastChunk.textBuffer + rich_utils_1.RichUtils.specialCharacters.ParagraphMark;
            var lastSection = subDocument.documentModel.sections[subDocument.documentModel.sections.length - 1];
            lastSection.setLength(subDocument, lastSection.getLength() + 1);
            return true;
        }
        return false;
    };
    return ParagraphManipulator;
}(runs_base_manipulator_1.RunsBaseManipulator));
exports.ParagraphManipulator = ParagraphManipulator;
