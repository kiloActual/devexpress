"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var math_1 = require("@devexpress/utils/lib/utils/math");
var properties_bundle_1 = require("../../../rich-utils/properties-bundle");
var input_position_base_1 = require("../../../selection/input-position-base");
var selection_intervals_info_1 = require("../../../selection/selection-intervals-info");
var apply_style_history_items_1 = require("../../history/items/apply-style-history-items");
var rich_utils_1 = require("../../rich-utils");
var sub_document_1 = require("../../sub-document");
var manipulator_params_base_1 = require("../utils/manipulator-params-base");
var InsertParagraphManipulatorParams = (function (_super) {
    tslib_1.__extends(InsertParagraphManipulatorParams, _super);
    function InsertParagraphManipulatorParams(subDocPos, charPropsBundle, parPropsBundle, applyDirectlyToNewParagraph, actionAfter) {
        if (parPropsBundle === void 0) { parPropsBundle = properties_bundle_1.MaskedParagraphPropertiesBundleFull.notSetted; }
        if (applyDirectlyToNewParagraph === void 0) { applyDirectlyToNewParagraph = true; }
        if (actionAfter === void 0) { actionAfter = function () { }; }
        var _this = _super.call(this, subDocPos, charPropsBundle) || this;
        _this.parPropsBundle = parPropsBundle;
        _this.applyDirectlyToNewParagraph = applyDirectlyToNewParagraph;
        _this.actionAfter = actionAfter;
        return _this;
    }
    InsertParagraphManipulatorParams.prototype.correctParams = function () {
        var documentEndPosition = this.subDocPos.subDocument.getDocumentEndPosition();
        this.subDocPos.position = math_1.MathUtils.restrictValue(this.subDocPos.position, 0, documentEndPosition);
    };
    InsertParagraphManipulatorParams.prototype.checkParams = function () {
        var documentEndPosition = this.subDocPos.subDocument.getDocumentEndPosition();
        return this.innerCheck(this.subDocPos.position >= 0 && this.subDocPos.position <= documentEndPosition, errors_1.Errors.InternalException) &&
            this.innerCheck(!!this.charPropsBundle.props, errors_1.Errors.InternalException) &&
            this.innerCheck(!!this.charPropsBundle.style, errors_1.Errors.InternalException);
    };
    InsertParagraphManipulatorParams.prototype.clone = function () {
        var obj = new InsertParagraphManipulatorParams(this.subDocPos, this.charPropsBundle, this.parPropsBundle, this.applyDirectlyToNewParagraph, this.actionAfter);
        return obj;
    };
    InsertParagraphManipulatorParams.makeParamsByPosition = function (subDocPosition, inpPos) {
        if (inpPos === void 0) { inpPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(subDocPosition.subDocument, subDocPosition.position)); }
        var subDocument = subDocPosition.subDocument;
        var position = subDocPosition.position;
        var characterStyle = inpPos.getCharacterStyle();
        var maskedCharacterProperties = inpPos.getMaskedCharacterProperties();
        var currentParagraph = subDocument.getRunByPosition(position).paragraph;
        var nextParagraphStyle = currentParagraph.paragraphStyle ? currentParagraph.paragraphStyle.nextParagraphStyle : null;
        var needToSetNextStyle = nextParagraphStyle && (currentParagraph.getEndPosition() - 1 == position);
        var needToUseCurrentParagraphLastRunAsSource = currentParagraph.isInList() && !needToSetNextStyle;
        var actionAfter = function () { };
        if (needToUseCurrentParagraphLastRunAsSource) {
            var paragraphLastRun = subDocument.getRunByPosition(currentParagraph.getEndPosition() - 1);
            maskedCharacterProperties = paragraphLastRun.maskedCharacterProperties.clone();
            characterStyle = paragraphLastRun.characterStyle;
        }
        else {
            var startPosition_1 = position + rich_utils_1.RichUtils.specialCharacters.ParagraphMark.length;
            if (needToSetNextStyle && subDocument.isEditable([new fixed_1.FixedInterval(startPosition_1, 1)]))
                actionAfter = function (modelManager) {
                    modelManager.history.addAndRedo(new apply_style_history_items_1.ApplyParagraphStyleHistoryItem(modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(startPosition_1, 0)), modelManager.model.stylesManager.addParagraphStyle(nextParagraphStyle)));
                };
        }
        return new InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, position), new properties_bundle_1.MaskedCharacterPropertiesBundle(maskedCharacterProperties, characterStyle), new properties_bundle_1.MaskedParagraphPropertiesBundleFull(undefined, undefined, properties_bundle_1.ParagraphListInfo.default, undefined), false, actionAfter);
    };
    return InsertParagraphManipulatorParams;
}(manipulator_params_base_1.ManipulatorParamsCharacterPropertiesBased));
exports.InsertParagraphManipulatorParams = InsertParagraphManipulatorParams;
