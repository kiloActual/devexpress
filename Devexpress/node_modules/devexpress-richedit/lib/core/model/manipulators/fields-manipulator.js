"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var input_position_base_1 = require("../../selection/input-position-base");
var selection_intervals_info_1 = require("../../selection/selection-intervals-info");
var fields_show_code_changed_1 = require("../changes/sub-document/field/fields-show-code-changed");
var hyperlink_info_changed_1 = require("../changes/sub-document/field/hyperlink-info-changed");
var field_1 = require("../fields/field");
var tree_creator_1 = require("../fields/tree-creator");
var apply_field_hyperlink_style_history_item_1 = require("../history/items/apply-field-hyperlink-style-history-item");
var change_field_hyperlink_info_history_item_1 = require("../history/items/change-field-hyperlink-info-history-item");
var remove_hyperlink_history_item_1 = require("../history/items/remove-hyperlink-history-item");
var json_field_enums_1 = require("../json/enums/json-field-enums");
var run_type_1 = require("../runs/run-type");
var sub_document_1 = require("../sub-document");
var base_manipulator_1 = require("./base-manipulator");
var insert_text_manipulator_params_1 = require("./text-manipulator/insert-text-manipulator-params");
var UpdateFieldsManipulatorParams = (function () {
    function UpdateFieldsManipulatorParams(subDocsInfo, callback, updateOptions) {
        if (callback === void 0) { callback = function () { }; }
        if (updateOptions === void 0) { updateOptions = new tree_creator_1.UpdateFieldsOptions(); }
        this.subDocsInfo = subDocsInfo;
        this.callback = callback ? callback : function () { };
        this.updateOptions = updateOptions;
    }
    return UpdateFieldsManipulatorParams;
}());
exports.UpdateFieldsManipulatorParams = UpdateFieldsManipulatorParams;
var UpdateFieldsManipulatorResult = (function () {
    function UpdateFieldsManipulatorResult(subDocsInfo) {
        this.subDocsInfo = subDocsInfo;
    }
    return UpdateFieldsManipulatorResult;
}());
exports.UpdateFieldsManipulatorResult = UpdateFieldsManipulatorResult;
var CurrentlyUpdatedSubDocumentInfo = (function () {
    function CurrentlyUpdatedSubDocumentInfo(subDocument, requestId) {
        this.subDocument = subDocument;
        this.requestId = requestId;
        this.result = null;
    }
    return CurrentlyUpdatedSubDocumentInfo;
}());
var FieldsManipulator = (function (_super) {
    tslib_1.__extends(FieldsManipulator, _super);
    function FieldsManipulator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.currentlyUpdatedSubDocumentsInfo = {};
        _this.requestId = 0;
        return _this;
    }
    FieldsManipulator.prototype.setHyperlinkInfoViaHistory = function (subDocument, fieldIndex, newHyperlinkInfo) {
        this.history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(this.modelManipulator, subDocument, fieldIndex, newHyperlinkInfo));
    };
    FieldsManipulator.prototype.setHyperlinkInfoInner = function (subDocument, fieldIndex, newHyperlinkInfo) {
        var field = subDocument.fields[fieldIndex];
        var oldValue = field.getHyperlinkInfo();
        field.setNewHyperlinkInfo(newHyperlinkInfo);
        this.modelManipulator.notifyModelChanged(new hyperlink_info_changed_1.HyperlinkInfoChangedSubDocumentChange(subDocument.id, field.getResultInterval(), field.getCodeInterval(), newHyperlinkInfo));
        return oldValue;
    };
    FieldsManipulator.prototype.setHyperlinkInfoWithReplaceResultAndCode = function (subDocument, fieldIndex, newHyperlinkInfo, shownText) {
        var _this = this;
        var field = subDocument.fields[fieldIndex];
        var inputPosition = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(subDocument, field.getCodeInterval().start));
        var codeNewText = field_1.HyperlinkInfo.getNewCodeText(newHyperlinkInfo);
        this.history.addTransaction(function () {
            _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, field.getCodeInterval()), true, false);
            var param = new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, field.getCodeInterval().start), inputPosition.charPropsBundle, run_type_1.RunType.TextRun, codeNewText);
            _this.modelManipulator.text.insertTextViaHistory(param);
            if (shownText) {
                _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, field.getResultInterval()), true, false);
                var param_1 = new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, field.getResultInterval().start), inputPosition.charPropsBundle, run_type_1.RunType.TextRun, shownText);
                _this.modelManipulator.text.insertTextViaHistory(param_1);
                _this.history.addAndRedo(new apply_field_hyperlink_style_history_item_1.ApplyFieldHyperlinkStyleHistoryItem(_this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, field.getResultInterval())));
            }
            _this.setHyperlinkInfoViaHistory(subDocument, fieldIndex, newHyperlinkInfo);
        });
    };
    FieldsManipulator.prototype.setAllFieldsShowCode = function (showCode, subDocuments) {
        for (var _i = 0, subDocuments_1 = subDocuments; _i < subDocuments_1.length; _i++) {
            var sd = subDocuments_1[_i];
            var fields = sd.fields;
            var fieldIndexStartRecalculateLayout = null;
            for (var fieldIndex = 0, field = void 0; field = fields[fieldIndex]; fieldIndex++) {
                if (field.showCode != showCode) {
                    field.showCode = showCode;
                    if (fieldIndexStartRecalculateLayout === null)
                        fieldIndexStartRecalculateLayout = fieldIndex;
                }
            }
            if (fieldIndexStartRecalculateLayout !== null) {
                this.modelManipulator.notifyModelChanged(new fields_show_code_changed_1.FieldsShowCodeChangedSubDocumentChange(sd.id, fixed_1.FixedInterval.fromPositions(fields[fieldIndexStartRecalculateLayout].getFieldStartPosition(), fields[fields.length - 1].getFieldEndPosition())));
            }
        }
    };
    FieldsManipulator.prototype.setFieldShowCode = function (subDocument, field, showCode) {
        if (field.showCode != showCode) {
            field.showCode = showCode;
            this.modelManipulator.notifyModelChanged(new fields_show_code_changed_1.FieldsShowCodeChangedSubDocumentChange(subDocument.id, field.getAllFieldInterval()));
        }
    };
    FieldsManipulator.prototype.continueUpdateFields = function (model, responce) {
        var subDocument = model.subDocuments[responce[json_field_enums_1.JSONUpdateFieldCommand.SubDocumentId]];
        if (subDocument && subDocument.fieldsWaitingForUpdate)
            subDocument.fieldsWaitingForUpdate.update(responce[json_field_enums_1.JSONUpdateFieldCommand.Info]);
    };
    FieldsManipulator.prototype.updateFields = function (layoutFormatterManager, requestManager, options) {
        var _this = this;
        if (list_1.ListUtils.unsafeAnyOf(options.subDocsInfo, function (sdInfo) { return !!_this.currentlyUpdatedSubDocumentsInfo[sdInfo.subDocument.id]; })) {
            options.callback(new UpdateFieldsManipulatorResult([]));
            return false;
        }
        var sdInfo = list_1.ListUtils.reducedMap(options.subDocsInfo, function (subDocInfo) { return subDocInfo.subDocument.fields.length > 0 ? subDocInfo : null; });
        if (!sdInfo.length) {
            options.callback(new UpdateFieldsManipulatorResult([]));
            return true;
        }
        var currRequestId = this.requestId++;
        for (var _i = 0, sdInfo_1 = sdInfo; _i < sdInfo_1.length; _i++) {
            var info = sdInfo_1[_i];
            this.currentlyUpdatedSubDocumentsInfo[info.subDocument.id] = new CurrentlyUpdatedSubDocumentInfo(info.subDocument, currRequestId);
        }
        this.modelManipulator.modelManager.history.beginTransaction();
        var lastIntervalInfoIndex = sdInfo.length - 1;
        for (var intervalIndex = 0, sdInterval = void 0; sdInterval = sdInfo[intervalIndex]; intervalIndex++) {
            sdInterval.subDocument.fieldsWaitingForUpdate =
                new tree_creator_1.FieldsWaitingForUpdate(this.modelManipulator.modelManager, layoutFormatterManager, requestManager, sdInterval, options.updateOptions, function (result) {
                    result.subDocIntervals.subDocument.fieldsWaitingForUpdate = null;
                    _this.currentlyUpdatedSubDocumentsInfo[result.subDocIntervals.subDocument.id].result = result.subDocIntervals;
                    if (_this.allSubDocsByRequestUpdated(currRequestId)) {
                        _this.modelManipulator.modelManager.history.endTransaction();
                        options.callback(_this.collectResult(currRequestId));
                    }
                });
            sdInterval.subDocument.fieldsWaitingForUpdate.update(null, intervalIndex == lastIntervalInfoIndex);
        }
        return true;
    };
    Object.defineProperty(FieldsManipulator.prototype, "isBusy", {
        get: function () { return number_1.NumberMapUtils.isEmpty(this.currentlyUpdatedSubDocumentsInfo); },
        enumerable: true,
        configurable: true
    });
    FieldsManipulator.prototype.allSubDocsByRequestUpdated = function (requestId) {
        return number_1.NumberMapUtils.allOf(this.currentlyUpdatedSubDocumentsInfo, function (info) { return info.requestId != requestId || !!info.result; });
    };
    FieldsManipulator.prototype.collectResult = function (requestId) {
        var result = new UpdateFieldsManipulatorResult([]);
        var restInfo = {};
        number_1.NumberMapUtils.forEach(this.currentlyUpdatedSubDocumentsInfo, function (info, key) {
            if (info.requestId == requestId)
                result.subDocsInfo.push(info.result);
            else
                restInfo[key] = info;
        });
        this.currentlyUpdatedSubDocumentsInfo = restInfo;
        return result;
    };
    FieldsManipulator.prototype.removeHyperlink = function (subDocument, field) {
        if (!field || !field.isHyperlinkField())
            return;
        this.history.beginTransaction();
        this.history.addAndRedo(new remove_hyperlink_history_item_1.RemoveHyperlinkHistoryItem(this.modelManipulator, subDocument, field));
        this.history.endTransaction();
    };
    FieldsManipulator.prototype.changeHyperlinkInfo = function (subDocument, field, hyperlinkInfo, resultText) {
        var _this = this;
        if (!field || !field.isHyperlinkField())
            return false;
        var codeNewText = field_1.HyperlinkInfo.getNewCodeText(hyperlinkInfo);
        var fieldCodeInterval = field.getCodeInterval();
        this.history.addTransaction(function () {
            if (fieldCodeInterval.length)
                _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, fieldCodeInterval), true, false);
            var inpPos = new input_position_base_1.InputPositionBase().setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(subDocument, fieldCodeInterval.start));
            _this.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, fieldCodeInterval.start), inpPos.charPropsBundle, run_type_1.RunType.TextRun, codeNewText));
            if (resultText) {
                var fieldResultInterval = field.getResultInterval();
                if (fieldResultInterval.length)
                    _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, fieldResultInterval), true, false);
                inpPos.setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromPosition(subDocument, fieldResultInterval.start));
                _this.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(subDocument, fieldResultInterval.start), inpPos.charPropsBundle, run_type_1.RunType.TextRun, resultText));
                _this.history.addAndRedo(new apply_field_hyperlink_style_history_item_1.ApplyFieldHyperlinkStyleHistoryItem(_this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, field.getResultInterval())));
            }
            _this.history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(_this.modelManipulator, subDocument, field.index, hyperlinkInfo));
        });
        return true;
    };
    return FieldsManipulator;
}(base_manipulator_1.BaseManipulator));
exports.FieldsManipulator = FieldsManipulator;
