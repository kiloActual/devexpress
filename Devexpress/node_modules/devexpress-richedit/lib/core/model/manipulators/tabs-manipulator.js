"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var search_1 = require("@devexpress/utils/lib/utils/search");
var deleted_1 = require("../changes/sub-document/tab/deleted");
var inserted_1 = require("../changes/sub-document/tab/inserted");
var history_item_state_1 = require("../history/states/history-item-state");
var history_item_state_object_1 = require("../history/states/history-item-state-object");
var base_manipulator_1 = require("./base-manipulator");
var TabsManipulator = (function (_super) {
    tslib_1.__extends(TabsManipulator, _super);
    function TabsManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TabsManipulator.prototype.insertTabToParagraph = function (subDocument, interval, tabInfo) {
        var paragraphs = subDocument.getParagraphsByInterval(interval);
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        for (var _i = 0, paragraphs_1 = paragraphs; _i < paragraphs_1.length; _i++) {
            var paragraph = paragraphs_1[_i];
            if (this.addTab(paragraph.tabs, tabInfo.clone())) {
                var parInterval = paragraph.interval;
                oldState.register(new history_item_state_object_1.HistoryItemTabStateObject(parInterval, tabInfo.clone()));
                newState.register(new history_item_state_object_1.HistoryItemTabStateObject(parInterval, tabInfo.clone()));
            }
        }
        if (newState.lastObject)
            this.modelManipulator.notifyModelChanged(new inserted_1.TabInsertedSubDocumentChange(subDocument.id, newState));
        return oldState;
    };
    TabsManipulator.prototype.deleteTabAtParagraph = function (subDocument, interval, tabInfo) {
        var paragraphs = subDocument.getParagraphsByInterval(interval);
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        for (var _i = 0, paragraphs_2 = paragraphs; _i < paragraphs_2.length; _i++) {
            var paragraph = paragraphs_2[_i];
            var tabs = paragraph.getTabs();
            if (search_1.SearchUtils.binaryIndexOf(tabs.positions, function (t) { return t.position - tabInfo.position; }) > -1) {
                this.deleteTab(paragraph.tabs, tabInfo);
                var parInterval = paragraph.interval;
                oldState.register(new history_item_state_object_1.HistoryItemTabStateObject(parInterval, tabInfo.clone()));
                newState.register(new history_item_state_object_1.HistoryItemTabStateObject(parInterval, tabInfo.clone()));
                if (search_1.SearchUtils.binaryIndexOf(paragraph.paragraphStyle.tabs.tabsInfo, function (t) { return t.position - tabInfo.position; }) > -1) {
                    tabInfo.deleted = true;
                    this.addTab(paragraph.tabs, tabInfo.clone());
                }
            }
        }
        this.modelManipulator.notifyModelChanged(new deleted_1.TabDeletedSubDocumentChange(subDocument.id, newState));
        return oldState;
    };
    TabsManipulator.prototype.restoreInsertedTabToParagraph = function (subDocument, state) {
        if (state.isEmpty())
            return;
        for (var _i = 0, _a = state.objects; _i < _a.length; _i++) {
            var stateObject = _a[_i];
            var tabInfo = stateObject.value;
            var paragraphs = subDocument.getParagraphsByInterval(stateObject.interval);
            for (var _b = 0, paragraphs_3 = paragraphs; _b < paragraphs_3.length; _b++) {
                var paragraph = paragraphs_3[_b];
                this.deleteTab(paragraph.tabs, tabInfo);
            }
        }
        this.modelManipulator.notifyModelChanged(new deleted_1.TabDeletedSubDocumentChange(subDocument.id, state));
    };
    TabsManipulator.prototype.restoreDeletedTabAtParagraph = function (subDocument, state) {
        if (state.isEmpty())
            return;
        for (var _i = 0, _a = state.objects; _i < _a.length; _i++) {
            var stateObject = _a[_i];
            var tabInfo = stateObject.value;
            var paragraphs = subDocument.getParagraphsByInterval(stateObject.interval);
            for (var _b = 0, paragraphs_4 = paragraphs; _b < paragraphs_4.length; _b++) {
                var paragraph = paragraphs_4[_b];
                this.addTab(paragraph.tabs, tabInfo.clone());
            }
        }
        this.modelManipulator.notifyModelChanged(new inserted_1.TabInsertedSubDocumentChange(subDocument.id, state));
    };
    TabsManipulator.prototype.deleteTab = function (tabProps, tabInfo) {
        var index = tabProps.indexOf(tabInfo);
        if (index < 0)
            return false;
        tabProps.deleteByIndex(index);
        return true;
    };
    TabsManipulator.prototype.addTab = function (tabProps, tabInfo) {
        var index = tabProps.indexOf(tabInfo);
        if (index >= 0 && tabInfo.equals(tabProps.tabsInfo[index]))
            return false;
        tabProps.add(tabInfo);
        return true;
    };
    return TabsManipulator;
}(base_manipulator_1.BaseManipulator));
exports.TabsManipulator = TabsManipulator;
