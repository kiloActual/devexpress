"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var anchored_pictureinserted_1 = require("../../changes/sub-document/picture/anchored-pictureinserted");
var inline_picture_inserted_1 = require("../../changes/sub-document/picture/inline-picture-inserted");
var anchor_info_1 = require("../../floating-objects/anchor-info");
var anchor_info_property_history_item_1 = require("../../history/items/floating-objects/anchor-info-property-history-item");
var change_anchored_picture_size_history_item_1 = require("../../history/items/floating-objects/change-anchored-picture-size-history-item");
var insert_anchored_picture_history_item_1 = require("../../history/items/floating-objects/insert-anchored-picture-history-item");
var shape_property_history_item_1 = require("../../history/items/floating-objects/shape-property-history-item");
var insert_inline_picture_history_item_1 = require("../../history/items/insert-inline-picture-history-item");
var non_visual_drawing_object_info_1 = require("../../history/items/non-visual-drawing-object-info");
var history_item_state_1 = require("../../history/states/history-item-state");
var history_item_state_object_1 = require("../../history/states/history-item-state-object");
var rich_utils_1 = require("../../rich-utils");
var run_type_1 = require("../../runs/run-type");
var shape_1 = require("../../shapes/shape");
var sub_document_1 = require("../../sub-document");
var base_manipulator_1 = require("../base-manipulator");
var runs_base_manipulator_1 = require("../runs-base-manipulator");
var insert_picture_manipulator_params_1 = require("./insert-picture-manipulator-params");
var client_picture_loader_1 = require("./loader/client-picture-loader");
var image_loading_options_1 = require("./loader/image-loading-options");
var server_picture_loader_1 = require("./loader/server-picture-loader");
var change_image_property_history_item_1 = require("../../history/items/floating-objects/change-image-property-history-item");
var InsertPictureViaHistoryResult = (function () {
    function InsertPictureViaHistoryResult(inserted, insertedInterval) {
        this.inserted = inserted;
        this.insertedInterval = insertedInterval;
    }
    return InsertPictureViaHistoryResult;
}());
exports.InsertPictureViaHistoryResult = InsertPictureViaHistoryResult;
var InsertAnchoredPictureViaHistoryResult = (function () {
    function InsertAnchoredPictureViaHistoryResult(inserted, insertedInterval, anchoredObjectID) {
        this.inserted = inserted;
        this.insertedInterval = insertedInterval;
        this.anchoredObjectID = anchoredObjectID;
    }
    return InsertAnchoredPictureViaHistoryResult;
}());
exports.InsertAnchoredPictureViaHistoryResult = InsertAnchoredPictureViaHistoryResult;
var PictureManipulator = (function (_super) {
    tslib_1.__extends(PictureManipulator, _super);
    function PictureManipulator(manipulator) {
        var _this = _super.call(this, manipulator) || this;
        _this.loader = _this.modelManipulator.modelManager.clientMode ?
            new client_picture_loader_1.ClientPictureLoader(manipulator) :
            new server_picture_loader_1.ServerPictureLoader(manipulator);
        _this.descriptionManipulator = new NonVisualDrawingObjectInfoManipulator(manipulator, function (prop, val) { return prop.description = val; }, function (prop) { return prop.description; });
        return _this;
    }
    PictureManipulator.prototype.changeHorizontalPosition = function (subDocument, position, newValue) {
        this.history.beginTransaction();
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.horizontalPositionAlignment, this.modelManipulator.floatingObject.anchorInfo.horizontalPositionAlignment));
        newValue.offset.x;
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.horizontalPositionType, this.modelManipulator.floatingObject.anchorInfo.horizontalPositionType));
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.offset.x, this.modelManipulator.floatingObject.anchorInfo.offsetX));
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.percentOffset.x, this.modelManipulator.floatingObject.anchorInfo.percentOffsetX));
        this.history.endTransaction();
    };
    PictureManipulator.prototype.changeVerticalPosition = function (subDocument, position, newValue) {
        this.history.beginTransaction();
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.verticalPositionAlignment, this.modelManipulator.floatingObject.anchorInfo.verticalPositionAlignment));
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.verticalPositionType, this.modelManipulator.floatingObject.anchorInfo.verticalPositionType));
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.offset.y, this.modelManipulator.floatingObject.anchorInfo.offsetY));
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue.percentOffset.y, this.modelManipulator.floatingObject.anchorInfo.percentOffsetY));
        this.history.endTransaction();
    };
    PictureManipulator.prototype.changeDescription = function (subDocument, position, newValue) {
        this.history.addAndRedo(new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue, this.modelManipulator.picture.descriptionManipulator));
    };
    PictureManipulator.prototype.changeWrapSide = function (subDocument, position, newValue) {
        this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue, this.modelManipulator.floatingObject.anchorInfo.wrapSide));
    };
    PictureManipulator.prototype.changeShapeOutlineWidth = function (subDocument, position, newValue) {
        this.changeNumberedShapeProperty(subDocument, position, newValue, this.modelManipulator.floatingObject.shape.outlineWidth);
    };
    PictureManipulator.prototype.changeShapeOutlineColor = function (subDocument, position, newColor) {
        this.changeNumberedShapeProperty(subDocument, position, newColor, this.modelManipulator.floatingObject.shape.outlineColor);
    };
    PictureManipulator.prototype.changeShapeFillColor = function (subDocument, position, newColor) {
        this.changeNumberedShapeProperty(subDocument, position, newColor, this.modelManipulator.floatingObject.shape.fillColor);
    };
    PictureManipulator.prototype.changeNumberedShapeProperty = function (subDocument, position, newValue, manipulator) {
        this.history.addAndRedo(new shape_property_history_item_1.ShapePropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), newValue, manipulator));
    };
    PictureManipulator.prototype.changePictureSize = function (subDocument, position, size) {
        this.history.addAndRedo(new change_anchored_picture_size_history_item_1.ChangeAnchoredPictureSizeHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), size));
    };
    PictureManipulator.prototype.setFloatingObjectInlineTextWrapType = function (subDocument, position, charPropsBundle) {
        var _this = this;
        var run = subDocument.getRunByPosition(position);
        var interval = new fixed_1.FixedInterval(position, 1);
        var pictureRun = run;
        if (run.getType() !== run_type_1.RunType.InlinePictureRun) {
            this.history.addTransaction(function () {
                _this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, interval), true, false);
                var newInfo = new insert_picture_manipulator_params_1.InlinePictureInfo(pictureRun.size.clone(), new shape_1.Shape(), -1, pictureRun.info.containerProperties, pictureRun.info.nonVisualDrawingProperties);
                _this.modelManipulator.picture.insertInlinePictureViaHistory(new sub_document_1.SubDocumentPosition(subDocument, interval.start), charPropsBundle, newInfo);
            });
        }
    };
    PictureManipulator.prototype.setFloatingObjectTextWrapType = function (subDocument, position, charPropsBundle, isBehindDoc, anchorObjectTextWrapType) {
        var modelManipulator = this.modelManipulator;
        var run = subDocument.getRunByPosition(position);
        this.history.beginTransaction();
        if (run.getType() === run_type_1.RunType.InlinePictureRun) {
            var interval = new fixed_1.FixedInterval(position, 1);
            var pictureRun = run;
            var anchorInfo = new anchor_info_1.AnchorInfo();
            anchorInfo.zOrder = this.modelManipulator.floatingObject.zOrder.getNewZOrder(subDocument);
            this.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(subDocument, interval), true, false);
            var newInfo = new insert_picture_manipulator_params_1.AnchorPictureInfo(pictureRun.size.clone(), new shape_1.Shape(), anchorInfo, pictureRun.info.containerProperties, pictureRun.info.nonVisualDrawingProperties);
            this.modelManipulator.picture.insertAnchoredPictureViaHistory(new sub_document_1.SubDocumentPosition(subDocument, interval.start), charPropsBundle, newInfo, new image_loading_options_1.ImageLoadingOptions(false));
            run = subDocument.getRunByPosition(interval.start);
        }
        var anchoredRun = run.getType() == run_type_1.RunType.AnchoredPictureRun ? run : run;
        if (anchoredRun.anchorInfo.wrapType !== anchorObjectTextWrapType || anchoredRun.anchorInfo.isBehindDoc !== isBehindDoc) {
            this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), anchorObjectTextWrapType, modelManipulator.floatingObject.anchorInfo.wrapType));
            this.history.addAndRedo(new anchor_info_property_history_item_1.AnchorInfoPropertyHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), isBehindDoc, modelManipulator.floatingObject.anchorInfo.isBehindDoc));
        }
        this.history.endTransaction();
    };
    PictureManipulator.prototype.insertInlinePictureViaHistory = function (subDocPos, charPropsBundle, picInfo, options) {
        this.history.addAndRedo(new insert_inline_picture_history_item_1.InsertInlinePictureHistoryItem(this.modelManipulator, subDocPos, charPropsBundle, picInfo, options));
        return new InsertPictureViaHistoryResult(true, new fixed_1.FixedInterval(subDocPos.position, 1));
    };
    PictureManipulator.prototype.insertAnchoredPictureViaHistory = function (subDocPos, charPropsBundle, picInfo, options) {
        this.history.addAndRedo(new insert_anchored_picture_history_item_1.InsertAnchoredPictureHistoryItem(this.modelManipulator, subDocPos, charPropsBundle, picInfo, options));
        return new InsertPictureViaHistoryResult(true, new fixed_1.FixedInterval(subDocPos.position, 1));
    };
    PictureManipulator.prototype.reloadPicture = function (subDocument, position, base64, size) {
        this.history.addAndRedo(new change_image_property_history_item_1.ChangeImagePropertyHistoryItem(this.modelManipulator, new sub_document_1.SubDocumentInterval(subDocument, new fixed_1.FixedInterval(position, 1)), base64, size));
    };
    PictureManipulator.prototype.insertInlinePictureInner = function (subDocPos, charPropsBundle, picInfo, options) {
        if (options === void 0) { options = new image_loading_options_1.ImageLoadingOptions(false); }
        var cacheInfo = picInfo.size.cacheInfo;
        var runPicInfo = picInfo.clone();
        this.loader.load(cacheInfo);
        var insertedRun = this.insertRunInternal(subDocPos, charPropsBundle, run_type_1.RunType.InlinePictureRun, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
        var pictureRun = subDocPos.subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex];
        pictureRun.info = runPicInfo;
        subDocPos.subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex].paragraph.length++;
        this.loader.sizeUpdater.addSizes(subDocPos, options, pictureRun, picInfo.size);
        if (cacheInfo.isLoaded)
            this.loader.sizeUpdater.update(cacheInfo, false);
        this.modelManipulator.notifyModelChanged(new inline_picture_inserted_1.InlinePictureInsertedSubDocumentChange(subDocPos.subDocument.id, subDocPos.position, runPicInfo, pictureRun.info.containerProperties));
        return runPicInfo.publicAPIID;
    };
    PictureManipulator.prototype.insertAnchoredPictureInner = function (subDocPos, charPropsBundle, picInfo, options) {
        if (options === void 0) { options = new image_loading_options_1.ImageLoadingOptions(false); }
        if (subDocPos.subDocument.isTextBox())
            return new InsertAnchoredPictureViaHistoryResult(true, new fixed_1.FixedInterval(subDocPos.position, 1), this.insertInlinePictureInner(subDocPos, charPropsBundle, new insert_picture_manipulator_params_1.InlinePictureInfo(picInfo.size, picInfo.shape, -1, picInfo.containerProperties, picInfo.nonVisualDrawingProperties), options));
        var cacheInfo = picInfo.size.cacheInfo;
        var runPicInfo = picInfo.clone();
        this.loader.load(cacheInfo);
        var insertedRun = this.insertRunInternal(subDocPos, charPropsBundle, run_type_1.RunType.AnchoredPictureRun, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
        var pictureRun = subDocPos.subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex];
        pictureRun.info = runPicInfo;
        subDocPos.subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex].paragraph.length++;
        this.loader.sizeUpdater.addSizes(subDocPos, options, pictureRun, picInfo.size);
        if (cacheInfo.isLoaded)
            this.loader.sizeUpdater.update(cacheInfo, false);
        this.modelManipulator.notifyModelChanged(new anchored_pictureinserted_1.AnchoredPictureInsertedSubDocumentChange(subDocPos.subDocument.id, pictureRun.anchoredObjectID, subDocPos.position, cacheInfo.currId, runPicInfo.size, runPicInfo.anchorInfo, runPicInfo.containerProperties));
        var interval = new fixed_1.FixedInterval(subDocPos.position, 1);
        this.modelManipulator.floatingObject.shape.fillColor.setValue(subDocPos.subDocument, interval.clone(), runPicInfo.shape.fillColor);
        this.modelManipulator.floatingObject.shape.outlineColor.setValue(subDocPos.subDocument, interval.clone(), runPicInfo.shape.outlineColor);
        this.modelManipulator.floatingObject.shape.outlineWidth.setValue(subDocPos.subDocument, interval.clone(), runPicInfo.shape.outlineWidth);
        return new InsertAnchoredPictureViaHistoryResult(true, interval, pictureRun.anchoredObjectID);
    };
    return PictureManipulator;
}(runs_base_manipulator_1.RunsBaseManipulator));
exports.PictureManipulator = PictureManipulator;
var NonVisualDrawingObjectInfoManipulator = (function (_super) {
    tslib_1.__extends(NonVisualDrawingObjectInfoManipulator, _super);
    function NonVisualDrawingObjectInfoManipulator(manipulator, setPropertyValue, getPropertyValue) {
        var _this = _super.call(this, manipulator) || this;
        _this.setPropertyValue = setPropertyValue;
        _this.getPropertyValue = getPropertyValue;
        return _this;
    }
    NonVisualDrawingObjectInfoManipulator.prototype.setValue = function (subDocument, interval, newValue) {
        var oldState = new history_item_state_1.HistoryItemIntervalState();
        var newState = new history_item_state_1.HistoryItemIntervalState();
        var run = subDocument.getRunByPosition(interval.start);
        var pictureRun = run.getType() == run_type_1.RunType.AnchoredPictureRun ? run : run;
        var containerProperties = pictureRun.info.containerProperties;
        oldState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, this.getPropertyValue(containerProperties)));
        this.setPropertyValue(containerProperties, newValue);
        pictureRun.info.containerProperties.copyFrom(containerProperties);
        newState.register(new history_item_state_object_1.HistoryItemIntervalStateObject(interval, newValue));
        return oldState;
    };
    NonVisualDrawingObjectInfoManipulator.prototype.restoreValue = function (subDocument, state) {
        if (state.isEmpty())
            return;
        var stateValue = state.lastObject;
        var run = subDocument.getRunByPosition(stateValue.interval.start);
        var anchoredRun = run.getType() == run_type_1.RunType.AnchoredPictureRun ? run : run;
        this.setPropertyValue(anchoredRun.info.containerProperties, stateValue.value);
    };
    return NonVisualDrawingObjectInfoManipulator;
}(base_manipulator_1.BaseManipulator));
exports.NonVisualDrawingObjectInfoManipulator = NonVisualDrawingObjectInfoManipulator;
