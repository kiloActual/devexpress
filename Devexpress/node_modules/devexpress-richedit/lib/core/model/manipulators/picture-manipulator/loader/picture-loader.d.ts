import { CacheImageInfo, ImageCache } from '../../../caches/images';
import { PictureSize } from '../../../floating-objects/sizes';
import { PictureRunType } from '../../../runs/inline-picture-run';
import { SubDocumentPosition } from '../../../sub-document';
import { ModelManipulator } from '../../model-manipulator';
import { ImageLoadingOptions } from './image-loading-options';
interface IPictureLoadedListener {
    notifyPictureLoaded(): void;
}
export declare type AllPicturesLoaded = (isLoaded: boolean) => void;
declare class PicSizeUpdater {
    private modelManipulator;
    private loadingData;
    private pictureLoadedListener;
    constructor(modelManipulator: ModelManipulator, pictureLoadedListener: IPictureLoadedListener);
    addLoadListener(cacheInfo: CacheImageInfo, callback: () => void): void;
    allPicturesLoaded(): boolean;
    addSizes(subDocPos: SubDocumentPosition, options: ImageLoadingOptions, run: PictureRunType, histItemSize?: PictureSize): void;
    update(cacheInfo: CacheImageInfo, notify: boolean): void;
    private updateInner;
}
export declare abstract class PictureLoader implements IPictureLoadedListener {
    protected modelManipulator: ModelManipulator;
    sizeUpdater: PicSizeUpdater;
    private callbacksInfo;
    constructor(modelManipulator: ModelManipulator);
    notifyPictureLoaded(): void;
    ensureAllPicturesLoaded(timeout: number, callback: AllPicturesLoaded): void;
    load(data: CacheImageInfo): void;
    abstract applyRequest(_jsonObj: any): any;
    protected abstract loadInner(data: CacheImageInfo): any;
    protected finalizeLoading(loadedData: CacheImageInfo, existingInfo?: CacheImageInfo): void;
    protected loadPictureByBase64(data: CacheImageInfo, imageLoaded: (data: CacheImageInfo) => void): void;
    protected loadPictureByUrl(data: CacheImageInfo, imageLoaded: (data: CacheImageInfo) => void): void;
    protected loadPictureByFile(data: CacheImageInfo, imageLoaded: (data: CacheImageInfo) => void): void;
    protected readonly imageCache: ImageCache;
}
export {};
//# sourceMappingURL=picture-loader.d.ts.map
