"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var anchored_text_box_inserted_1 = require("../changes/sub-document/text/anchored-text-box-inserted");
var enums_1 = require("../enums");
var insert_anchored_picture_history_item_1 = require("../history/items/floating-objects/insert-anchored-picture-history-item");
var rich_utils_1 = require("../rich-utils");
var run_type_1 = require("../runs/run-type");
var runs_base_manipulator_1 = require("./runs-base-manipulator");
var BaseTextBoxInfo = (function () {
    function BaseTextBoxInfo(innerSubDocument, size, shape, anchorInfo, textBoxProperties, containerProperties) {
        this.innerSubDocument = innerSubDocument;
        this.size = size;
        this.shape = shape;
        this.anchorInfo = anchorInfo;
        this.textBoxProperties = textBoxProperties;
        this.containerProperties = containerProperties;
    }
    return BaseTextBoxInfo;
}());
exports.BaseTextBoxInfo = BaseTextBoxInfo;
var TextBoxManipulator = (function (_super) {
    tslib_1.__extends(TextBoxManipulator, _super);
    function TextBoxManipulator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextBoxManipulator.prototype.insertAnchoredTextBoxViaHistoty = function (subDocPos, charPropsBundle, textBoxInfo) {
        this.history.addAndRedo(new insert_anchored_picture_history_item_1.InsertAnchoredTextBoxHistoryItem(this.modelManipulator, subDocPos, charPropsBundle, textBoxInfo));
    };
    TextBoxManipulator.prototype.insertAnchoredTextBox = function (subDocPos, charPropsBundle, textBoxInfo) {
        var subDocument = subDocPos.subDocument;
        var insertPositionAtStartDocument = subDocPos.position;
        if (subDocument.isTextBox())
            throw new Error("TextBox can not be inserted into another TextBox");
        var insertedRun = this.modelManipulator.text.insertRunInternal(subDocPos, charPropsBundle, run_type_1.RunType.AnchoredTextBoxRun, rich_utils_1.RichUtils.specialCharacters.ObjectMark);
        var textBoxRun = subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex];
        textBoxRun.size.copyFrom(textBoxInfo.size);
        textBoxRun.shape.copyFrom(textBoxInfo.shape);
        textBoxRun.anchorInfo = textBoxInfo.anchorInfo.clone();
        textBoxRun.containerProperties.copyFrom(textBoxInfo.containerProperties);
        var textBoxSubDoc = textBoxInfo.innerSubDocument ?
            textBoxInfo.innerSubDocument :
            this.model.createSubDocument(enums_1.SubDocumentInfoType.TextBox, subDocument.id);
        textBoxRun.subDocId = textBoxSubDoc.id;
        subDocument.chunks[insertedRun.chunkIndex].textRuns[insertedRun.runIndex].paragraph.length++;
        this.modelManipulator.notifyModelChanged(new anchored_text_box_inserted_1.AnchoredTextBoxInsertedSubDocumentChange(subDocument.id, textBoxRun.anchoredObjectID, textBoxRun.subDocId, insertPositionAtStartDocument, textBoxInfo.anchorInfo, textBoxRun.containerProperties));
        var interval = new fixed_1.FixedInterval(insertPositionAtStartDocument, 1);
        this.modelManipulator.floatingObject.textBoxSize.setValue(subDocument, interval, textBoxInfo.size);
        this.modelManipulator.floatingObject.shape.fillColor.setValue(subDocument, interval, textBoxInfo.shape.fillColor);
        this.modelManipulator.floatingObject.shape.outlineColor.setValue(subDocument, interval, textBoxInfo.shape.outlineColor);
        this.modelManipulator.floatingObject.shape.outlineWidth.setValue(subDocument, interval, textBoxInfo.shape.outlineWidth);
        this.modelManipulator.floatingObject.textBoxProperties.setValue(subDocument, interval, textBoxInfo.textBoxProperties);
        return textBoxRun;
    };
    return TextBoxManipulator;
}(runs_base_manipulator_1.RunsBaseManipulator));
exports.TextBoxManipulator = TextBoxManipulator;
