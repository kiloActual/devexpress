"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var caches_1 = require("./caches/caches");
var font_info_cache_1 = require("./caches/hashed-caches/font-info-cache");
var character_style_1 = require("./character/character-style");
var json_style_enums_1 = require("./json/enums/json-style-enums");
var json_tab_converter_1 = require("./json/importers/json-tab-converter");
var json_table_conditional_style_converter_1 = require("./json/importers/table/json-table-conditional-style-converter");
var web_caches_exporter_1 = require("./json/web-caches-exporter");
var paragraph_style_1 = require("./paragraph/paragraph-style");
var table_cell_style_1 = require("./tables/styles/table-cell-style");
var table_conditional_style_1 = require("./tables/styles/table-conditional-style");
var table_style_1 = require("./tables/styles/table-style");
var string_2 = require("@devexpress/utils/lib/utils/string");
var StylesManager = (function () {
    function StylesManager(documentModel) {
        this.characterAndParagraphStyleGalleryItems = [[], []];
        this.characterStyleNameToIndex = {};
        this.paragraphStyleNameToIndex = {};
        this.numberingListStyleNameToIndex = {};
        this.tableStyleNameToIndex = {};
        this.tableCellStyleNameToIndex = {};
        this.documentModel = documentModel;
    }
    StylesManager.isParagraphStyle = function (styleNameWithPrefix) {
        return string_2.StringUtils.startsAt(styleNameWithPrefix, StylesManager.paragraphPrefix);
    };
    StylesManager.getStyleNameWithoutPrefix = function (styleName) {
        if (StylesManager.paragraphPrefix && StylesManager.isParagraphStyle(styleName))
            return styleName.substr(StylesManager.paragraphPrefix.length);
        return styleName.substr(StylesManager.characterPrefix.length);
    };
    StylesManager.prototype.initCharacterAndParagraphStyleGalleryItems = function () {
        var items = [[], []];
        for (var _i = 0, _a = this.documentModel.paragraphStyles; _i < _a.length; _i++) {
            var ps = _a[_i];
            if (!ps.deleted && !ps.hidden && !ps.semihidden)
                items[0].push({ value: StylesManager.paragraphPrefix + ps.styleName, text: ps.localizedName, data: ps.base64EncodedImage });
        }
        for (var _b = 0, _c = this.documentModel.characterStyles; _b < _c.length; _b++) {
            var cs = _c[_b];
            if (!cs.deleted && !cs.hidden && !cs.semihidden && !cs.linkedStyle)
                items[1].push({ value: StylesManager.characterPrefix + cs.styleName, text: cs.localizedName, data: cs.base64EncodedImage });
        }
        for (var _d = 0, _e = StylesManager.presetParagraphStyles; _d < _e.length; _d++) {
            var ps = _e[_d];
            if (!ps.deleted && !ps.hidden && !ps.semihidden && !this.documentModel.getParagraphStyleByName(ps.styleName))
                items[0].push({ value: StylesManager.paragraphPrefix + ps.styleName, text: ps.localizedName, data: ps.base64EncodedImage });
        }
        for (var _f = 0, _g = StylesManager.presetCharacterStyles; _f < _g.length; _f++) {
            var cs = _g[_f];
            if (!cs.deleted && !cs.hidden && !cs.semihidden && !cs.linkedStyle && !this.documentModel.getCharacterStyleByName(cs.styleName))
                items[1].push({ value: StylesManager.characterPrefix + cs.styleName, text: cs.localizedName, data: cs.base64EncodedImage });
        }
        this.characterAndParagraphStyleGalleryItems = items;
    };
    StylesManager.prototype.registerLink = function (characterStyle, paragraphStyle) {
        characterStyle.linkedStyle = paragraphStyle;
        paragraphStyle.linkedStyle = characterStyle;
    };
    StylesManager.prototype.unregisterLink = function (characterStyle, paragraphStyle) {
        characterStyle.linkedStyle = null;
        paragraphStyle.linkedStyle = null;
    };
    StylesManager.prototype.getCharacterStyleByName = function (styleName) {
        return StylesManager.getStyleByNameCore(styleName, this.documentModel.characterStyles, this.characterStyleNameToIndex);
    };
    StylesManager.prototype.getParagraphStyleByName = function (styleName) {
        return StylesManager.getStyleByNameCore(styleName, this.documentModel.paragraphStyles, this.paragraphStyleNameToIndex);
    };
    StylesManager.prototype.getNumberingListStyleByName = function (styleName) {
        return StylesManager.getStyleByNameCore(styleName, this.documentModel.numberingListStyles, this.numberingListStyleNameToIndex);
    };
    StylesManager.prototype.getTableStyleByName = function (styleName) {
        return StylesManager.getStyleByNameCore(styleName, this.documentModel.tableStyles, this.tableStyleNameToIndex);
    };
    StylesManager.prototype.getTableCellStyleByName = function (styleName) {
        return StylesManager.getStyleByNameCore(styleName, this.documentModel.tableCellStyles, this.tableCellStyleNameToIndex);
    };
    StylesManager.prototype.getDefaultCharacterStyle = function () {
        var _this = this;
        return this.defaultCharacterStyle || this.getDefaultStyleCore(this.documentModel.characterStyles, function (style) {
            _this.defaultCharacterStyle = style;
        });
    };
    StylesManager.prototype.getDefaultParagraphStyle = function () {
        var _this = this;
        return this.defaultParagraphStyle || this.getDefaultStyleCore(this.documentModel.paragraphStyles, function (style) {
            _this.defaultParagraphStyle = style;
        });
    };
    StylesManager.prototype.getDefaultTableStyle = function () {
        return this.getTableStyleByName(table_style_1.TableStyle.DEFAULT_STYLENAME) || this.getTableStyleByName(table_style_1.TableStyle.DEFAULT_STYLENAME_2) || this.documentModel.tableStyles[0] || null;
    };
    StylesManager.prototype.getDefaultTableCellStyle = function () {
        return this.getTableCellStyleByName(table_cell_style_1.TableCellStyle.DEFAULT_STYLENAME) || this.documentModel.tableCellStyles[0] || null;
    };
    StylesManager.prototype.addCharacterStyle = function (style) {
        return style ? this.getCharacterStyleByName(style.styleName) || this.addCharacterStyleCore(style) : null;
    };
    StylesManager.prototype.registerCharacterStyle = function (style) {
        this.characterStyleNameToIndex[style.styleName] = this.documentModel.characterStyles.push(style) - 1;
    };
    StylesManager.prototype.removeLastStyle = function () {
        var style = this.documentModel.characterStyles.pop();
        delete this.characterStyleNameToIndex[style.styleName];
    };
    StylesManager.prototype.addParagraphStyle = function (style) {
        return style ? this.getParagraphStyleByName(style.styleName) || this.addParagraphStyleCore(style) : null;
    };
    StylesManager.prototype.registerParagraphStyle = function (style) {
        this.paragraphStyleNameToIndex[style.styleName] = this.documentModel.paragraphStyles.push(style) - 1;
    };
    StylesManager.prototype.addTableStyle = function (style) {
        return style ? this.getTableStyleByName(style.styleName) || this.addTableStyleCore(style) : null;
    };
    StylesManager.prototype.registerTableStyle = function (style) {
        this.tableStyleNameToIndex[style.styleName] = this.documentModel.tableStyles.push(style) - 1;
    };
    StylesManager.prototype.addTableCellStyle = function (style) {
        return style ? this.getTableCellStyleByName(style.styleName) || this.addTableCellStyleCore(style) : null;
    };
    StylesManager.prototype.addTableStyleCore = function (oldStyle) {
        var _this = this;
        var newStyle = oldStyle.clone();
        this.tableStyleNameToIndex[newStyle.styleName] = this.documentModel.tableStyles.push(newStyle) - 1;
        number_1.NumberMapUtils.forEach(oldStyle.conditionalStyles, function (style, type) {
            return newStyle.conditionalStyles[type] = _this.cloneTableConditionalStyle(style);
        });
        return newStyle;
    };
    StylesManager.prototype.addTableCellStyleCore = function (oldStyle) {
        var newStyle = oldStyle.clone();
        newStyle.characterProperties = this.documentModel.cache.mergedCharacterPropertiesCache.getItem(oldStyle.characterProperties);
        newStyle.tableCellProperties = this.documentModel.cache.tableCellPropertiesCache.getItem(oldStyle.tableCellProperties);
        return newStyle;
    };
    StylesManager.prototype.cloneTableConditionalStyle = function (style) {
        var maskedCharacterProperties = style.maskedCharacterProperties;
        if (maskedCharacterProperties.fontInfo && maskedCharacterProperties.fontInfo.measurer === undefined)
            maskedCharacterProperties.fontInfo = this.documentModel.cache.fontInfoCache.getItemByName(maskedCharacterProperties.fontInfo.name);
        return new table_conditional_style_1.TableConditionalStyle(style.tableProperties.clone(), this.documentModel.cache.tableRowPropertiesCache.getItem(style.tableRowProperties), this.documentModel.cache.tableCellPropertiesCache.getItem(style.tableCellProperties), this.documentModel.cache.maskedParagraphPropertiesCache.getItem(style.maskedParagraphProperties), this.documentModel.cache.maskedCharacterPropertiesCache.getItem(maskedCharacterProperties), style.tabs.clone());
    };
    StylesManager.prototype.addCharacterStyleCore = function (oldStyle) {
        var newStyle = oldStyle.clone();
        this.registerCharacterStyle(newStyle);
        var maskedCharacterProperties = oldStyle.maskedCharacterProperties;
        if (maskedCharacterProperties.fontInfo && maskedCharacterProperties.fontInfo.measurer === undefined)
            maskedCharacterProperties.fontInfo = this.documentModel.cache.fontInfoCache.getItemByName(maskedCharacterProperties.fontInfo.name);
        newStyle.maskedCharacterProperties = this.documentModel.cache.maskedCharacterPropertiesCache.getItem(maskedCharacterProperties);
        newStyle.parent = this.addCharacterStyle(oldStyle.parent);
        newStyle.linkedStyle = this.addParagraphStyle(oldStyle.linkedStyle);
        return newStyle;
    };
    StylesManager.prototype.addParagraphStyleCore = function (oldStyle) {
        var newStyle = oldStyle.clone();
        this.registerParagraphStyle(newStyle);
        var maskedCharacterProperties = oldStyle.maskedCharacterProperties;
        if (maskedCharacterProperties.fontInfo && maskedCharacterProperties.fontInfo.measurer === undefined)
            maskedCharacterProperties.fontInfo = this.documentModel.cache.fontInfoCache.getItemByName(maskedCharacterProperties.fontInfo.name);
        newStyle.maskedCharacterProperties = this.documentModel.cache.maskedCharacterPropertiesCache.getItem(maskedCharacterProperties);
        newStyle.maskedParagraphProperties = this.documentModel.cache.maskedParagraphPropertiesCache.getItem(oldStyle.maskedParagraphProperties);
        newStyle.linkedStyle = this.addCharacterStyle(oldStyle.linkedStyle);
        newStyle.parent = this.addParagraphStyle(oldStyle.parent);
        return newStyle;
    };
    StylesManager.prototype.getDefaultStyleCore = function (styles, updateCache) {
        for (var i = 0, style; style = styles[i]; i++) {
            if (style.isDefault) {
                updateCache(style);
                return style;
            }
        }
    };
    StylesManager.getPresetCharacterStyleLocalizedName = function (styleName) {
        var style = this.getStyleByNameCore(styleName, this.presetCharacterStyles, this.presetCharacterStyleNameToIndex);
        return style && style.localizedName ? style.localizedName : styleName;
    };
    StylesManager.getPresetParagraphStyleLocalizedName = function (styleName) {
        var style = this.getStyleByNameCore(styleName, this.presetParagraphStyles, this.presetParagraphStyleNameToIndex);
        return style && style.localizedName ? style.localizedName : styleName;
    };
    StylesManager.getPresetTableStyleLocalizedName = function (styleName) {
        var style = this.getStyleByNameCore(styleName, this.presetTableStyles, this.presetTableStyleNameToIndex);
        return style && style.localizedName ? style.localizedName : styleName;
    };
    StylesManager.getPresetCharacterStyleByName = function (styleName) {
        return this.getStyleByNameCore(styleName, this.presetCharacterStyles, this.presetCharacterStyleNameToIndex);
    };
    StylesManager.getPresetParagraphStyleByName = function (styleName) {
        return this.getStyleByNameCore(styleName, this.presetParagraphStyles, this.presetParagraphStyleNameToIndex);
    };
    StylesManager.getPresetTableStyleByName = function (styleName) {
        return this.getStyleByNameCore(styleName, this.presetTableStyles, this.presetTableStyleNameToIndex);
    };
    StylesManager.populateGalleryHeaders = function (container) {
        StylesManager.characterStylesGalleryTitle = container[json_style_enums_1.JSONStylesGalleryHeader.Character];
        StylesManager.paragraphStylesGalleryTitle = container[json_style_enums_1.JSONStylesGalleryHeader.Paragraph];
        StylesManager.tableStylesGalleryTitle = container[json_style_enums_1.JSONStylesGalleryHeader.Table];
    };
    StylesManager.populatePresetStyles = function (stylesContainer) {
        if (StylesManager.presetCharacterStyles.length)
            return;
        var characterStylesContainer = stylesContainer[json_style_enums_1.JSONStylesProperty.Character];
        var paragraphStylesContainer = stylesContainer[json_style_enums_1.JSONStylesProperty.Paragraph];
        var tableStylesContainer = stylesContainer[json_style_enums_1.JSONStylesProperty.Table];
        var documentCache = new caches_1.DocumentCache();
        var webCaches = new web_caches_exporter_1.WebCachesExporter(documentCache, stylesContainer[json_style_enums_1.JSONStylesProperty.Caches], null);
        font_info_cache_1.FontInfoCache.fillDefaultFonts(documentCache.fontInfoCache);
        StylesManager.populatePresetCharacterStyles(characterStylesContainer, documentCache);
        StylesManager.populatePresetParagraphStyles(paragraphStylesContainer, documentCache);
        StylesManager.populatePresetTableStyles(tableStylesContainer, documentCache);
        for (var i = 0, style = void 0; style = StylesManager.presetCharacterStyles[i]; i++) {
            var jsonStyle = characterStylesContainer[i];
            style.parent = StylesManager.getPresetCharacterStyleByName(jsonStyle[json_style_enums_1.JSONStyleBaseProperty.ParentStyleName]);
            var linkedStyleName = jsonStyle[json_style_enums_1.JSONCharacterStyleProperty.LinkedStyleName];
            if (linkedStyleName !== undefined)
                style.linkedStyle = StylesManager.getPresetParagraphStyleByName(linkedStyleName);
        }
        for (var i = 0, style = void 0; style = StylesManager.presetParagraphStyles[i]; i++) {
            var jsonStyle = paragraphStylesContainer[i];
            style.parent = StylesManager.getPresetParagraphStyleByName(jsonStyle[json_style_enums_1.JSONStyleBaseProperty.ParentStyleName]);
            var linkedStyleName = jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.LinkedStyleName];
            if (linkedStyleName !== undefined)
                style.linkedStyle = StylesManager.getPresetCharacterStyleByName(linkedStyleName);
            var nextParStyleName = jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.NextParagraphStyleName];
            if (nextParStyleName !== undefined)
                style.nextParagraphStyle = StylesManager.getPresetParagraphStyleByName(nextParStyleName);
        }
        for (var i = 0, style = void 0; style = StylesManager.presetTableStyles[i]; i++)
            style.parent = StylesManager.getPresetTableStyleByName(tableStylesContainer[i][json_style_enums_1.JSONStyleBaseProperty.ParentStyleName]);
        webCaches.dispose();
    };
    StylesManager.populatePresetCharacterStyles = function (characterStylesContainer, cache) {
        StylesManager.presetCharacterStyles = [];
        if (characterStylesContainer) {
            for (var _i = 0, characterStylesContainer_1 = characterStylesContainer; _i < characterStylesContainer_1.length; _i++) {
                var jsonStyle = characterStylesContainer_1[_i];
                var styleName = jsonStyle[json_style_enums_1.JSONStyleBaseProperty.StyleName];
                StylesManager.presetCharacterStyles.push(new character_style_1.CharacterStyle(styleName, StylesManager.presetStylesLocalizedNames[styleName] || jsonStyle[json_style_enums_1.JSONStyleBaseProperty.LocalizedStyleName], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Deleted], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Hidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Semihidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.IsDefault], cache.maskedCharacterPropertiesCache.getItemByJsonKey(jsonStyle[json_style_enums_1.JSONCharacterStyleProperty.CharacterPropertiesCacheIndex]), jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Base64EncodedImage]));
            }
        }
    };
    StylesManager.populatePresetParagraphStyles = function (paragraphStylesContainer, cache) {
        StylesManager.presetParagraphStyles = [];
        if (paragraphStylesContainer) {
            for (var _i = 0, paragraphStylesContainer_1 = paragraphStylesContainer; _i < paragraphStylesContainer_1.length; _i++) {
                var jsonStyle = paragraphStylesContainer_1[_i];
                var styleName = jsonStyle[json_style_enums_1.JSONStyleBaseProperty.StyleName];
                StylesManager.presetParagraphStyles.push(new paragraph_style_1.ParagraphStyle(styleName, StylesManager.presetStylesLocalizedNames[styleName] || jsonStyle[json_style_enums_1.JSONStyleBaseProperty.LocalizedStyleName], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Deleted], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Hidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Semihidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.IsDefault], cache.maskedCharacterPropertiesCache.getItemByJsonKey(jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.CharacterPropertiesCacheIndex]), cache.maskedParagraphPropertiesCache.getItemByJsonKey(jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.ParagraphPropertiesCacheIndex]), json_tab_converter_1.JSONTabConverter.convertFromJSONToTabProperties(jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.Tabs]), !!jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.AutoUpdate], jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.NumberingListIndex], jsonStyle[json_style_enums_1.JSONParagraphStyleProperty.ListLevelIndex], jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Base64EncodedImage]));
            }
        }
    };
    StylesManager.populatePresetTableStyles = function (tableStylesContainer, cache) {
        StylesManager.presetTableStyles = [];
        if (tableStylesContainer) {
            for (var _i = 0, tableStylesContainer_1 = tableStylesContainer; _i < tableStylesContainer_1.length; _i++) {
                var jsonStyle = tableStylesContainer_1[_i];
                var styleName = jsonStyle[json_style_enums_1.JSONStyleBaseProperty.StyleName];
                StylesManager.presetTableStyles.push(new table_style_1.TableStyle(styleName, StylesManager.presetStylesLocalizedNames[styleName] || jsonStyle[json_style_enums_1.JSONStyleBaseProperty.LocalizedStyleName], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Deleted], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Hidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Semihidden], !!jsonStyle[json_style_enums_1.JSONStyleBaseProperty.IsDefault], json_table_conditional_style_converter_1.JSONTableConditionalStyleConverter.convertStylesFromJSON(jsonStyle[json_style_enums_1.JSONTableStyleProperty.ConditionalStyles], cache), json_table_conditional_style_converter_1.JSONTableConditionalStyleConverter.convertFromJSON(jsonStyle[json_style_enums_1.JSONTableStyleProperty.BaseConditionalStyle], cache), jsonStyle[json_style_enums_1.JSONStyleBaseProperty.Base64EncodedImage]));
            }
        }
    };
    StylesManager.getStyleByNameCore = function (styleName, styles, cache) {
        var styleIndex = cache[styleName];
        if (styleIndex === undefined) {
            for (var i = 0, style; style = styles[i]; i++) {
                if (cache[style.styleName] === undefined)
                    cache[style.styleName] = i;
                if (style.styleName === styleName)
                    return style;
            }
            return null;
        }
        else
            return styles[styleIndex];
    };
    StylesManager.prototype.clone = function (documentModel) {
        var result = new StylesManager(documentModel);
        var copyStyles = function (styles) { return list_1.ListUtils.map(styles, function (style) {
            return { value: style.value, text: style.text, data: style.data };
        }); };
        result.characterAndParagraphStyleGalleryItems = [
            copyStyles(this.characterAndParagraphStyleGalleryItems[0]),
            copyStyles(this.characterAndParagraphStyleGalleryItems[1])
        ];
        result.documentModel = documentModel;
        result.characterStyleNameToIndex = string_1.StringMapUtils.shallowCopy(this.characterStyleNameToIndex);
        result.paragraphStyleNameToIndex = string_1.StringMapUtils.shallowCopy(this.paragraphStyleNameToIndex);
        result.numberingListStyleNameToIndex = string_1.StringMapUtils.shallowCopy(this.numberingListStyleNameToIndex);
        result.tableStyleNameToIndex = string_1.StringMapUtils.shallowCopy(this.tableStyleNameToIndex);
        result.tableCellStyleNameToIndex = string_1.StringMapUtils.shallowCopy(this.tableCellStyleNameToIndex);
        return result;
    };
    StylesManager.characterPrefix = "";
    StylesManager.paragraphPrefix = "¶";
    StylesManager.characterStylesGalleryTitle = "Character Styles";
    StylesManager.paragraphStylesGalleryTitle = "Paragraph Styles";
    StylesManager.tableStylesGalleryTitle = "Table Styles";
    StylesManager.presetStylesLocalizedNames = {};
    StylesManager.presetCharacterStyleNameToIndex = {};
    StylesManager.presetParagraphStyleNameToIndex = {};
    StylesManager.presetTableStyleNameToIndex = {};
    StylesManager.presetCharacterStyles = [];
    StylesManager.presetParagraphStyles = [];
    StylesManager.presetTableStyles = [];
    return StylesManager;
}());
exports.StylesManager = StylesManager;
