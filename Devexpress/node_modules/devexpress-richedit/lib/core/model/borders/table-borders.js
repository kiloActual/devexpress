"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var math_1 = require("@devexpress/utils/lib/utils/math");
var table_border_base_1 = require("./table-border-base");
var TableBorders = (function (_super) {
    tslib_1.__extends(TableBorders, _super);
    function TableBorders() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableBorders.prototype.getHashCode = function () {
        return _super.prototype.getHashCode.call(this) ^
            math_1.MathUtils.somePrimes[14] * this.insideHorizontalBorder.getHashCode() ^
            math_1.MathUtils.somePrimes[15] * this.insideVerticalBorder.getHashCode();
    };
    TableBorders.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.insideHorizontalBorder.equals(obj.insideHorizontalBorder) &&
            this.insideVerticalBorder.equals(obj.insideVerticalBorder);
    };
    TableBorders.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.insideHorizontalBorder = obj.insideHorizontalBorder.clone();
        this.insideVerticalBorder = obj.insideVerticalBorder.clone();
    };
    TableBorders.prototype.clone = function () {
        var result = new TableBorders();
        result.copyFrom(this);
        return result;
    };
    TableBorders.create = function (top, right, bottom, left, insideHorizontal, insideVertical) {
        var result = new TableBorders();
        result.topBorder = top;
        result.rightBorder = right;
        result.bottomBorder = bottom;
        result.leftBorder = left;
        result.insideHorizontalBorder = insideHorizontal;
        result.insideVerticalBorder = insideVertical;
        return result;
    };
    return TableBorders;
}(table_border_base_1.TableBordersBase));
exports.TableBorders = TableBorders;
