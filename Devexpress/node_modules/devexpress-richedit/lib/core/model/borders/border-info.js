"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var color_model_info_cache_1 = require("../caches/hashed-caches/color-model-info-cache");
var border_base_1 = require("./border-base");
var enums_1 = require("./enums");
var layout_border_1 = require("./layout-border");
var BorderInfo = (function () {
    function BorderInfo() {
        this.style = enums_1.BorderLineStyle.None;
        this.color = color_model_info_cache_1.ColorModelInfoCache.defaultItem;
        this.width = 0;
        this.offset = 0;
        this.frame = false;
        this.shadow = false;
    }
    BorderInfo.prototype.getHashCode = function () {
        return math_1.MathUtils.somePrimes[0] * this.style ^
            math_1.MathUtils.somePrimes[1] * this.color.getHashCode() ^
            math_1.MathUtils.somePrimes[2] * this.width;
    };
    BorderInfo.prototype.getBorderBase = function (colorProvider) {
        return new border_base_1.BorderBase(this.style, this.width, this.color.toRgb(colorProvider));
    };
    BorderInfo.prototype.getLayoutBorder = function (colorProvider) {
        return new layout_border_1.LayoutBorder(this.style, this.width, this.color.toRgb(colorProvider));
    };
    BorderInfo.prototype.equals = function (obj) {
        return obj && this.style == obj.style &&
            this.color.equals(obj.color) &&
            this.width == obj.width &&
            this.offset == obj.offset &&
            this.frame == obj.frame &&
            this.shadow == obj.shadow;
    };
    BorderInfo.equalsBinary = function (borderInfoA, borderInfoB) {
        return borderInfoA && borderInfoB &&
            borderInfoA.style == borderInfoB.style &&
            borderInfoA.color.equals(borderInfoB.color) &&
            borderInfoA.width == borderInfoB.width &&
            borderInfoA.offset == borderInfoB.offset &&
            borderInfoA.frame == borderInfoB.frame &&
            borderInfoA.shadow == borderInfoB.shadow;
    };
    BorderInfo.prototype.copyFrom = function (obj) {
        this.style = obj.style;
        this.color = obj.color.clone();
        this.width = obj.width;
        this.offset = obj.offset;
        this.frame = obj.frame;
        this.shadow = obj.shadow;
    };
    BorderInfo.prototype.clone = function () {
        var result = new BorderInfo();
        result.copyFrom(this);
        return result;
    };
    return BorderInfo;
}());
exports.BorderInfo = BorderInfo;
