"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ChunkAndRunIndexes = (function () {
    function ChunkAndRunIndexes(chunkIndex, runIndex) {
        this.chunkIndex = chunkIndex;
        this.runIndex = runIndex;
    }
    return ChunkAndRunIndexes;
}());
exports.ChunkAndRunIndexes = ChunkAndRunIndexes;
var FullChunkAndRunInfo = (function () {
    function FullChunkAndRunInfo(chunkIndex, chunk, runIndex, run, charOffset) {
        if (charOffset === void 0) { charOffset = 0; }
        this.chunkIndex = chunkIndex;
        this.chunk = chunk;
        this.runIndex = runIndex;
        this.run = run;
        this.charOffset = charOffset;
    }
    FullChunkAndRunInfo.prototype.getAbsoluteRunPosition = function () {
        return this.chunk.startLogPosition.value + this.run.startOffset;
    };
    FullChunkAndRunInfo.prototype.getAbsolutePosition = function () {
        return this.getAbsoluteRunPosition() + this.charOffset;
    };
    FullChunkAndRunInfo.prototype.getAbsoluteEndRunPosition = function () {
        return this.getAbsoluteRunPosition() + this.run.getLength();
    };
    FullChunkAndRunInfo.prototype.getCurrentChar = function () {
        return this.chunk.textBuffer[this.run.startOffset + this.charOffset];
    };
    FullChunkAndRunInfo.prototype.getRunText = function (from, length) {
        if (from === void 0) { from = 0; }
        if (length === void 0) { length = this.run.getLength(); }
        return this.chunk.textBuffer.substr(this.run.startOffset + from, length);
    };
    return FullChunkAndRunInfo;
}());
exports.FullChunkAndRunInfo = FullChunkAndRunInfo;
