"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var search_1 = require("@devexpress/utils/lib/utils/search");
var position_1 = require("./position");
var PositionManager = (function () {
    function PositionManager() {
        this.positions = [];
    }
    PositionManager.prototype.registerPosition = function (position) {
        var index = search_1.SearchUtils.binaryIndexOf(this.positions, function (p) { return p.value - position; });
        if (index >= 0) {
            var findedPosition = this.positions[index];
            findedPosition.incRefCount();
            return findedPosition;
        }
        var indexWhereInsert = ~index;
        var newPosition = new position_1.Position(position);
        newPosition.incRefCount();
        this.positions.splice(indexWhereInsert, 0, newPosition);
        return newPosition;
    };
    PositionManager.prototype.unregisterPosition = function (position) {
        var exactIndex = this.findPosition(position);
        if (exactIndex != null) {
            var findedPosition = this.positions[exactIndex];
            findedPosition.decRefCount();
            if (!findedPosition.hasReference())
                this.positions.splice(exactIndex, 1);
        }
        else
            throw new Error("PositionManager unregisterPosition: unregister nonexisted Position");
    };
    PositionManager.prototype.findPosition = function (position) {
        var index = search_1.SearchUtils.binaryIndexOf(this.positions, function (p) { return p.value - position.value; });
        if (index >= 0) {
            var exactIndex;
            for (exactIndex = index; exactIndex >= 0 && this.positions[exactIndex].value == position.value; exactIndex--) {
                if (this.positions[exactIndex] == position)
                    return exactIndex;
            }
            var positionsLength = this.positions.length;
            for (exactIndex = index + 1; exactIndex < positionsLength && this.positions[exactIndex].value == position.value; exactIndex++) {
                if (this.positions[exactIndex] == position)
                    return exactIndex;
            }
        }
        return null;
    };
    PositionManager.prototype.reset = function () {
        this.positions = [];
    };
    PositionManager.prototype.advance = function (position, delta) {
        var index = search_1.SearchUtils.binaryIndexOf(this.positions, function (p) { return p.value - position; });
        var advanceIndex = index >= 0 ? index : ~index;
        var positionsLength = this.positions.length;
        if (advanceIndex >= positionsLength)
            return;
        if (index >= 0)
            advanceIndex = this.correctPositionIndex(position, delta, advanceIndex);
        var i;
        for (i = advanceIndex; i < positionsLength; i++)
            this.positions[i].value += delta;
        if (delta < 0 && advanceIndex < positionsLength && advanceIndex >= 0) {
            for (i = advanceIndex; i < positionsLength && this.positions[i].value < position; i++)
                this.positions[i].value = position;
        }
    };
    PositionManager.prototype.correctPositionIndex = function (position, delta, corrIndex) {
        if (delta < 0) {
            while (corrIndex < this.positions.length && this.positions[corrIndex].value == position)
                corrIndex++;
        }
        else {
            while (corrIndex > 0 && this.positions[corrIndex - 1].value == this.positions[corrIndex].value)
                corrIndex--;
        }
        return corrIndex;
    };
    return PositionManager;
}());
exports.PositionManager = PositionManager;
