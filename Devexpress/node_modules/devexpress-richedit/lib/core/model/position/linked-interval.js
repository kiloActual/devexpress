"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var const_1 = require("@devexpress/utils/lib/intervals/const");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var LinkedInterval = (function (_super) {
    tslib_1.__extends(LinkedInterval, _super);
    function LinkedInterval(manager, interval) {
        var _this = _super.call(this) || this;
        _this._start = manager.registerPosition(interval.start);
        _this._end = manager.registerPosition(interval.end);
        return _this;
    }
    Object.defineProperty(LinkedInterval.prototype, "start", {
        get: function () { return this._start.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedInterval.prototype, "length", {
        get: function () { return this._end.value - this._start.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedInterval.prototype, "end", {
        get: function () { return this._end.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LinkedInterval.prototype, "center", {
        get: function () { return (this.start + this.end) / 2; },
        enumerable: true,
        configurable: true
    });
    LinkedInterval.prototype.destructor = function (manager) {
        manager.unregisterPosition(this._start);
        manager.unregisterPosition(this._end);
    };
    LinkedInterval.prototype.equals = function (obj) {
        return obj && this.start == obj.start && this.end == obj.end;
    };
    LinkedInterval.prototype.getFixedInterval = function () {
        return new fixed_1.FixedInterval(this.start, this.length);
    };
    LinkedInterval.prototype.getBoundaryInterval = function () {
        return new boundary_1.BoundaryInterval(this.start, this.end);
    };
    return LinkedInterval;
}(const_1.ConstInterval));
exports.LinkedInterval = LinkedInterval;
