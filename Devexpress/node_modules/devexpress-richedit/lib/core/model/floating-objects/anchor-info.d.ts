import { Margins } from '@devexpress/utils/lib/geometry/margins';
import { Offset } from '@devexpress/utils/lib/geometry/point';
import { ICloneable, IEquatable } from '@devexpress/utils/lib/types';
import { AnchoredObjectLevelType } from '../../layout/main-structures/layout-boxes/layout-anchored-object-box';
import { AnchorObjectHorizontalPositionAlignment, AnchorObjectHorizontalPositionType, AnchorObjectTextWrapSide, AnchorObjectTextWrapType, AnchorObjectVerticalPositionAlignment, AnchorObjectVerticalPositionType } from './enums';
export declare class AnchorInfo implements ICloneable<AnchorInfo>, IEquatable<AnchorInfo> {
    static RELATIVE_COEFF: number;
    allowOverlap: boolean;
    hidden: boolean;
    layoutTableCell: boolean;
    locked: boolean;
    isBehindDoc: boolean;
    leftDistance: number;
    rightDistance: number;
    topDistance: number;
    bottomDistance: number;
    zOrder: number;
    wrapType: AnchorObjectTextWrapType;
    wrapSide: AnchorObjectTextWrapSide;
    horizontalPositionType: AnchorObjectHorizontalPositionType;
    horizontalPositionAlignment: AnchorObjectHorizontalPositionAlignment;
    verticalPositionType: AnchorObjectVerticalPositionType;
    verticalPositionAlignment: AnchorObjectVerticalPositionAlignment;
    offset: Offset;
    percentOffset: Offset;
    clone(): AnchorInfo;
    equals(obj: AnchorInfo): boolean;
    isUsedHorizontalAlignment(): boolean;
    isUsedHorizontalBookLayout(): boolean;
    isUsedHorizontalAbsolutePosition(): boolean;
    isUsedHorizontalRelativePosition(): boolean;
    isUsedVerticalAlignment(): boolean;
    isUsedVerticalAbsolutePosition(): boolean;
    isUsedVerticalRelativePosition(): boolean;
    getRelativeOffsetX(width: number): number;
    getRelativeOffsetY(width: number): number;
    getDistanceMargins(): Margins;
    readonly levelType: AnchoredObjectLevelType;
}
//# sourceMappingURL=anchor-info.d.ts.map
