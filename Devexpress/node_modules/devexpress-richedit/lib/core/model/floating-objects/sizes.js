"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var errors_1 = require("@devexpress/utils/lib/errors");
var size_1 = require("@devexpress/utils/lib/geometry/size");
var enums_1 = require("./enums");
var AnchorInlineBaseSize = (function () {
    function AnchorInlineBaseSize(lockAspectRatio, rotation) {
        this.lockAspectRatio = lockAspectRatio;
        this.rotation = rotation;
    }
    AnchorInlineBaseSize.prototype.clone = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    AnchorInlineBaseSize.prototype.copyFrom = function (obj) {
        this.lockAspectRatio = obj.lockAspectRatio;
        this.rotation = obj.rotation;
    };
    return AnchorInlineBaseSize;
}());
exports.AnchorInlineBaseSize = AnchorInlineBaseSize;
var PictureSize = (function (_super) {
    tslib_1.__extends(PictureSize, _super);
    function PictureSize(lockAspectRatio, rotation, cacheInfo, scale) {
        var _this = _super.call(this, lockAspectRatio, rotation) || this;
        _this.cacheInfo = cacheInfo;
        _this.scale = scale;
        return _this;
    }
    Object.defineProperty(PictureSize.prototype, "originalSize", {
        get: function () { return this.cacheInfo.size; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(PictureSize.prototype, "actualSize", {
        get: function () {
            var _this = this;
            return size_1.Size.initByCommonAction(function (adp) { return adp(_this.cacheInfo.size) * adp(_this.scale) / 100; });
        },
        enumerable: true,
        configurable: true
    });
    PictureSize.prototype.clone = function () {
        return new PictureSize(this.lockAspectRatio, this.rotation, this.cacheInfo, this.scale.clone());
    };
    PictureSize.prototype.cloneToNewSubDocument = function (subDocument) {
        return new PictureSize(this.lockAspectRatio, this.rotation, subDocument.documentModel.cache.imageCache.getPictureData(this.cacheInfo.currId), this.scale.clone());
    };
    PictureSize.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.cacheInfo = obj.cacheInfo;
        this.scale = obj.scale.clone();
    };
    return PictureSize;
}(AnchorInlineBaseSize));
exports.PictureSize = PictureSize;
var InlineTextBoxSize = (function (_super) {
    tslib_1.__extends(InlineTextBoxSize, _super);
    function InlineTextBoxSize(lockAspectRatio, rotation, absoluteSize) {
        var _this = _super.call(this, lockAspectRatio, rotation) || this;
        _this.absoluteSize = absoluteSize;
        return _this;
    }
    Object.defineProperty(InlineTextBoxSize.prototype, "actualSize", {
        get: function () {
            return this.absoluteSize.clone();
        },
        enumerable: true,
        configurable: true
    });
    InlineTextBoxSize.prototype.clone = function () {
        return new InlineTextBoxSize(this.lockAspectRatio, this.rotation, this.absoluteSize);
    };
    InlineTextBoxSize.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.absoluteSize = obj.absoluteSize.clone();
    };
    return InlineTextBoxSize;
}(AnchorInlineBaseSize));
exports.InlineTextBoxSize = InlineTextBoxSize;
var AnchorTextBoxSize = (function (_super) {
    tslib_1.__extends(AnchorTextBoxSize, _super);
    function AnchorTextBoxSize(lockAspectRatio, rotation, absoluteSize, relativeSize, relativeWidthType, relativeHeightType, useAbsoluteSizeWidth, useAbsoluteSizeHeight) {
        var _this = _super.call(this, lockAspectRatio, rotation, absoluteSize) || this;
        _this.flags = new flag_1.Flag();
        _this.relativeSize = relativeSize;
        _this.relativeWidthType = relativeWidthType;
        _this.relativeHeightType = relativeHeightType;
        _this.flags.set(useAbsoluteSizeWidth ? TextBoxSizeFlags.UseAbsoluteSizeWidth : TextBoxSizeFlags.UseRelativeSizeWidth, true);
        _this.flags.set(useAbsoluteSizeHeight ? TextBoxSizeFlags.UseAbsoluteSizeHeight : TextBoxSizeFlags.UseRelativeSizeHeight, true);
        return _this;
    }
    AnchorTextBoxSize.prototype.useAbsoluteWidth = function () {
        return this.flags.get(TextBoxSizeFlags.UseAbsoluteSizeWidth);
    };
    AnchorTextBoxSize.prototype.useAbsoluteHeight = function () {
        return this.flags.get(TextBoxSizeFlags.UseAbsoluteSizeHeight);
    };
    AnchorTextBoxSize.prototype.setUseAbsoluteWidth = function (isUsed) {
        this.flags.set(TextBoxSizeFlags.UseAbsoluteSizeWidth, isUsed);
        this.flags.set(TextBoxSizeFlags.UseRelativeSizeWidth, !isUsed);
    };
    AnchorTextBoxSize.prototype.setUseAbsoluteHeight = function (isUsed) {
        this.flags.set(TextBoxSizeFlags.UseAbsoluteSizeHeight, isUsed);
        this.flags.set(TextBoxSizeFlags.UseRelativeSizeHeight, !isUsed);
    };
    Object.defineProperty(AnchorTextBoxSize.prototype, "actualSize", {
        get: function () {
            if (this.flags.get(TextBoxSizeFlags.UseRelativeSizeWidth))
                throw new Error(errors_1.Errors.InternalException);
            if (this.flags.get(TextBoxSizeFlags.UseRelativeSizeHeight))
                throw new Error(errors_1.Errors.InternalException);
            return this.absoluteSize.clone();
        },
        enumerable: true,
        configurable: true
    });
    AnchorTextBoxSize.prototype.getActualRelativeHeight = function (boundsCalculator) {
        return this.relativeSize.height * this.getAbsHeight(boundsCalculator) / AnchorTextBoxSize.RELATIVE_COEFF;
    };
    AnchorTextBoxSize.prototype.getActualRelativeWidth = function (boundsCalculator) {
        return this.relativeSize.width * this.getAbsWidth(boundsCalculator) / AnchorTextBoxSize.RELATIVE_COEFF;
    };
    AnchorTextBoxSize.prototype.getAbsWidth = function (boundsCalculator) {
        switch (this.relativeWidthType) {
            case enums_1.RelativeWidthType.Margin:
                return boundsCalculator.pageWidth - boundsCalculator.marginLeft - boundsCalculator.marginRight;
            case enums_1.RelativeWidthType.OutsideMargin:
            case enums_1.RelativeWidthType.LeftMargin:
                return boundsCalculator.marginLeft;
            case enums_1.RelativeWidthType.InsideMargin:
            case enums_1.RelativeWidthType.RightMargin:
                return boundsCalculator.marginRight;
            case enums_1.RelativeWidthType.Page:
                return boundsCalculator.pageWidth;
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    AnchorTextBoxSize.prototype.getAbsHeight = function (boundsCalculator) {
        switch (this.relativeHeightType) {
            case enums_1.RelativeHeightType.Margin:
                return boundsCalculator.pageHeight - boundsCalculator.marginTop - boundsCalculator.marginBottom;
            case enums_1.RelativeHeightType.InsideMargin:
            case enums_1.RelativeHeightType.TopMargin:
                return boundsCalculator.marginTop;
            case enums_1.RelativeHeightType.OutsideMargin:
            case enums_1.RelativeHeightType.BottomMargin:
                return boundsCalculator.marginBottom;
            case enums_1.RelativeHeightType.Page:
                return boundsCalculator.pageHeight;
            default: throw new Error(errors_1.Errors.InternalException);
        }
    };
    AnchorTextBoxSize.prototype.clone = function () {
        return new AnchorTextBoxSize(this.lockAspectRatio, this.rotation, this.absoluteSize.clone(), this.relativeSize.clone(), this.relativeWidthType, this.relativeHeightType, this.flags.get(TextBoxSizeFlags.UseAbsoluteSizeWidth), this.flags.get(TextBoxSizeFlags.UseAbsoluteSizeHeight));
    };
    AnchorTextBoxSize.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.relativeSize = obj.relativeSize.clone();
        this.relativeHeightType = obj.relativeHeightType;
        this.relativeWidthType = obj.relativeWidthType;
        this.flags = obj.flags;
    };
    AnchorTextBoxSize.RELATIVE_COEFF = 100000;
    return AnchorTextBoxSize;
}(InlineTextBoxSize));
exports.AnchorTextBoxSize = AnchorTextBoxSize;
var TextBoxSizeFlags;
(function (TextBoxSizeFlags) {
    TextBoxSizeFlags[TextBoxSizeFlags["UseAbsoluteSizeWidth"] = 2] = "UseAbsoluteSizeWidth";
    TextBoxSizeFlags[TextBoxSizeFlags["UseAbsoluteSizeHeight"] = 4] = "UseAbsoluteSizeHeight";
    TextBoxSizeFlags[TextBoxSizeFlags["UseRelativeSizeWidth"] = 8] = "UseRelativeSizeWidth";
    TextBoxSizeFlags[TextBoxSizeFlags["UseRelativeSizeHeight"] = 16] = "UseRelativeSizeHeight";
})(TextBoxSizeFlags = exports.TextBoxSizeFlags || (exports.TextBoxSizeFlags = {}));
