"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var layout_anchored_object_box_1 = require("../../layout/main-structures/layout-boxes/layout-anchored-object-box");
var enums_1 = require("./enums");
var AnchorInfo = (function () {
    function AnchorInfo() {
        this.allowOverlap = true;
        this.hidden = false;
        this.layoutTableCell = true;
        this.locked = false;
        this.isBehindDoc = false;
        this.leftDistance = 188;
        this.rightDistance = 188;
        this.topDistance = 72;
        this.bottomDistance = 72;
        this.zOrder = 0;
        this.wrapType = enums_1.AnchorObjectTextWrapType.Square;
        this.wrapSide = enums_1.AnchorObjectTextWrapSide.Both;
        this.horizontalPositionType = enums_1.AnchorObjectHorizontalPositionType.Column;
        this.horizontalPositionAlignment = enums_1.AnchorObjectHorizontalPositionAlignment.Center;
        this.verticalPositionType = enums_1.AnchorObjectVerticalPositionType.Paragraph;
        this.verticalPositionAlignment = enums_1.AnchorObjectVerticalPositionAlignment.None;
        this.offset = new point_1.Point(0, 0);
        this.percentOffset = new point_1.Point(0, 0);
    }
    Object.defineProperty(AnchorInfo.prototype, "levelType", {
        get: function () {
            return this.wrapType != enums_1.AnchorObjectTextWrapType.None ? layout_anchored_object_box_1.AnchoredObjectLevelType.InText :
                (this.isBehindDoc ? layout_anchored_object_box_1.AnchoredObjectLevelType.BehindText : layout_anchored_object_box_1.AnchoredObjectLevelType.BeforeText);
        },
        enumerable: true,
        configurable: true
    });
    AnchorInfo.prototype.clone = function () {
        var anchorInfo = new AnchorInfo();
        anchorInfo.allowOverlap = this.allowOverlap;
        anchorInfo.hidden = this.hidden;
        anchorInfo.layoutTableCell = this.layoutTableCell;
        anchorInfo.locked = this.locked;
        anchorInfo.isBehindDoc = this.isBehindDoc;
        anchorInfo.leftDistance = this.leftDistance;
        anchorInfo.rightDistance = this.rightDistance;
        anchorInfo.topDistance = this.topDistance;
        anchorInfo.bottomDistance = this.bottomDistance;
        anchorInfo.zOrder = this.zOrder;
        anchorInfo.wrapType = this.wrapType;
        anchorInfo.wrapSide = this.wrapSide;
        anchorInfo.horizontalPositionType = this.horizontalPositionType;
        anchorInfo.horizontalPositionAlignment = this.horizontalPositionAlignment;
        anchorInfo.verticalPositionType = this.verticalPositionType;
        anchorInfo.verticalPositionAlignment = this.verticalPositionAlignment;
        anchorInfo.offset = this.offset.clone();
        anchorInfo.percentOffset = this.percentOffset.clone();
        return anchorInfo;
    };
    AnchorInfo.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.allowOverlap == obj.allowOverlap &&
            this.hidden == obj.hidden &&
            this.layoutTableCell == obj.layoutTableCell &&
            this.locked == obj.locked &&
            this.isBehindDoc == obj.isBehindDoc &&
            this.leftDistance == obj.leftDistance &&
            this.rightDistance == obj.rightDistance &&
            this.topDistance == obj.topDistance &&
            this.bottomDistance == obj.bottomDistance &&
            this.zOrder == obj.zOrder &&
            this.wrapType == obj.wrapType &&
            this.wrapSide == obj.wrapSide &&
            this.horizontalPositionType == obj.horizontalPositionType &&
            this.horizontalPositionAlignment == obj.horizontalPositionAlignment &&
            this.verticalPositionType == obj.verticalPositionType &&
            this.verticalPositionAlignment == obj.verticalPositionAlignment &&
            this.offset.equals(obj.offset) &&
            this.percentOffset.equals(obj.percentOffset);
    };
    AnchorInfo.prototype.isUsedHorizontalAlignment = function () {
        if (!this.horizontalPositionAlignment)
            return false;
        switch (this.horizontalPositionAlignment) {
            case enums_1.AnchorObjectHorizontalPositionAlignment.Left:
            case enums_1.AnchorObjectHorizontalPositionAlignment.Center:
            case enums_1.AnchorObjectHorizontalPositionAlignment.Right:
                return true;
        }
        return false;
    };
    AnchorInfo.prototype.isUsedHorizontalBookLayout = function () {
        if (!this.horizontalPositionAlignment)
            return false;
        switch (this.horizontalPositionAlignment) {
            case enums_1.AnchorObjectHorizontalPositionAlignment.Outside:
            case enums_1.AnchorObjectHorizontalPositionAlignment.Inside:
                return true;
        }
        return false;
    };
    AnchorInfo.prototype.isUsedHorizontalAbsolutePosition = function () {
        return !this.horizontalPositionAlignment && !this.isUsedHorizontalRelativePosition();
    };
    AnchorInfo.prototype.isUsedHorizontalRelativePosition = function () {
        return this.percentOffset.x > 0;
    };
    AnchorInfo.prototype.isUsedVerticalAlignment = function () {
        return !!this.verticalPositionAlignment;
    };
    AnchorInfo.prototype.isUsedVerticalAbsolutePosition = function () {
        return !this.isUsedVerticalAlignment() && !this.isUsedVerticalRelativePosition();
    };
    AnchorInfo.prototype.isUsedVerticalRelativePosition = function () {
        return this.percentOffset.y > 0;
    };
    AnchorInfo.prototype.getRelativeOffsetX = function (width) {
        return width * this.percentOffset.x / AnchorInfo.RELATIVE_COEFF;
    };
    AnchorInfo.prototype.getRelativeOffsetY = function (width) {
        return width * this.percentOffset.y / AnchorInfo.RELATIVE_COEFF;
    };
    AnchorInfo.prototype.getDistanceMargins = function () {
        return new margins_1.Margins(this.leftDistance, this.rightDistance, this.topDistance, this.bottomDistance)
            .applyConverter(unit_converter_1.UnitConverter.twipsToPixels);
    };
    AnchorInfo.RELATIVE_COEFF = 100000;
    return AnchorInfo;
}());
exports.AnchorInfo = AnchorInfo;
