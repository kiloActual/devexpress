"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var font_info_1 = require("../../fonts/font-info");
var measurer_1 = require("../../fonts/measurer");
var hash_based_cache_1 = require("../hash-based-cache");
var FontInfoCache = (function (_super) {
    tslib_1.__extends(FontInfoCache, _super);
    function FontInfoCache(fontMeasurer) {
        var _this = _super.call(this) || this;
        if (!fontMeasurer) {
            _this.fontMeasurer = new measurer_1.FontMeasurer();
            list_1.ListUtils.forEach(FontInfoCache.defaultFonts, function (defaultFont, index) {
                return _this.addItemForMerge(defaultFont.clone(), index);
            });
        }
        else
            _this.fontMeasurer = fontMeasurer;
        return _this;
    }
    Object.defineProperty(FontInfoCache, "defaultFontInfo", {
        get: function () {
            if (!FontInfoCache._defaultFontInfo)
                FontInfoCache._defaultFontInfo = list_1.ListUtils.elementBy(FontInfoCache.defaultFonts, function (f) { return f.name == FontInfoCache.defaultFontName; });
            return FontInfoCache._defaultFontInfo;
        },
        enumerable: true,
        configurable: true
    });
    FontInfoCache.prototype.processNewItem = function (property) {
        property.measurer = this.fontMeasurer;
    };
    FontInfoCache.prototype.getItemByName = function (name) {
        var items = this.hashtable[font_info_1.FontInfo.calculateHashByName(name)];
        return items && items[0] ? items[0] : null;
    };
    FontInfoCache.prototype.getFontNames = function (sort) {
        if (sort === void 0) { sort = false; }
        var result = [];
        number_1.NumberMapUtils.forEach(this.hashtable, function (items) { return items.forEach(function (item) { return result.push(item.name); }); });
        if (sort)
            result.sort();
        return result;
    };
    FontInfoCache.prototype.getAllFonts = function () {
        var result = [];
        number_1.NumberMapUtils.forEach(this.hashtable, function (items) { return items.forEach(function (item) { return result.push(item); }); });
        return result;
    };
    FontInfoCache.prototype.addFont = function (name, cssString) {
        var newFontInfo = FontInfoCache.defaultFontInfo.clone();
        newFontInfo.name = name;
        if (cssString)
            newFontInfo.cssString = FontInfoCache.correctCssString(cssString);
        return this.addItemForMerge(newFontInfo, this.count);
    };
    FontInfoCache.correctCssString = function (cssString) {
        if (cssString.indexOf(' ') != -1) {
            if (cssString[0] == "'" || cssString[0] == "\"")
                cssString = cssString.slice(1);
            var lastChar = cssString[cssString.length - 1];
            if (lastChar == "'" || lastChar == "\"")
                cssString = cssString.substr(0, cssString.length - 1);
            return "'" + cssString + "'";
        }
        return cssString;
    };
    FontInfoCache.prototype.deleteFont = function (info) {
        var hash = font_info_1.FontInfo.calculateHashByName(info.name);
        var items = this.hashtable[hash];
        if (!items || !items[0])
            return;
        delete this.hashtable[hash];
    };
    FontInfoCache.fillDefaultFonts = function (fontInfoCache) {
        if (FontInfoCache.defaultFonts.length == 0)
            FontInfoCache.defaultFonts = list_1.ListUtils.initByCallback(fontInfoCache.count, function (ind) { return fontInfoCache.getItemByJsonKey(ind); });
    };
    FontInfoCache.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.fontMeasurer = obj.fontMeasurer;
    };
    FontInfoCache.prototype.clone = function () {
        var result = new FontInfoCache(null);
        result.copyFrom(this);
        return result;
    };
    FontInfoCache.defaultFonts = [];
    FontInfoCache.defaultFontName = "Calibri";
    return FontInfoCache;
}(hash_based_cache_1.HashBasedCache));
exports.FontInfoCache = FontInfoCache;
