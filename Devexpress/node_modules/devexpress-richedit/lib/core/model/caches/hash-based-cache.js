"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var HashBasedCacheCore = (function () {
    function HashBasedCacheCore() {
        this.clear();
    }
    Object.defineProperty(HashBasedCacheCore.prototype, "count", {
        get: function () { return this.numElements; },
        enumerable: true,
        configurable: true
    });
    ;
    HashBasedCacheCore.prototype.clear = function () {
        this.hashtable = {};
        this.numElements = 0;
    };
    HashBasedCacheCore.prototype.getItem = function (item) {
        var existingElement = this.addItemInternal(this.hashtable, item);
        if (existingElement !== null)
            return existingElement;
        this.processNewItem(item);
        this.numElements++;
        return item;
    };
    HashBasedCacheCore.prototype.findItemByPredicate = function (predicate) {
        return number_1.NumberMapUtils.anyOf(this.hashtable, function (items) {
            return list_1.ListUtils.elementBy(items, function (item) { return predicate(item); });
        });
    };
    HashBasedCacheCore.prototype.processNewItem = function (_item) { };
    HashBasedCacheCore.prototype.isExist = function (item) {
        var hash = item.getHashCode();
        var listOfElements = this.hashtable[hash];
        if (listOfElements) {
            for (var i = 0, elem = void 0; elem = listOfElements[i]; i++) {
                if (elem === item || elem.equals(item))
                    return true;
            }
        }
        return false;
    };
    HashBasedCacheCore.prototype.DEBUG_MAX_CELL_LENGTH = function () {
        return number_1.NumberMapUtils.max(this.hashtable, function (a) { return a.length; }).length;
    };
    HashBasedCacheCore.prototype.removeItems = function (shouldRemove) {
        var _this = this;
        var newHashtable = {};
        var numElements = 0;
        number_1.NumberMapUtils.forEach(this.hashtable, function (items) {
            return items.forEach(function (item) {
                if (!shouldRemove(item)) {
                    _this.addItemInternal(newHashtable, item);
                    numElements++;
                }
            });
        });
        this.hashtable = newHashtable;
        this.numElements = numElements;
    };
    HashBasedCacheCore.prototype.addItemInternal = function (hashtable, item) {
        var hash = item.getHashCode();
        var listOfElements = hashtable[hash];
        if (listOfElements) {
            for (var i = 0, elem = void 0; elem = listOfElements[i]; i++) {
                if (elem === item || elem.equals(item))
                    return elem;
            }
        }
        else
            hashtable[hash] = listOfElements = [];
        listOfElements.push(item);
        return null;
    };
    return HashBasedCacheCore;
}());
exports.HashBasedCacheCore = HashBasedCacheCore;
var HashBasedCache = (function (_super) {
    tslib_1.__extends(HashBasedCache, _super);
    function HashBasedCache() {
        return _super.call(this) || this;
    }
    HashBasedCache.prototype.clearTemporaryCache = function () {
        this.tempCacheForMerge = {};
    };
    HashBasedCache.prototype.clear = function () {
        _super.prototype.clear.call(this);
        this.clearTemporaryCache();
    };
    HashBasedCache.prototype.merge = function (jsonObjs, convertFromJSON) {
        var _this = this;
        number_1.NumberMapUtils.forEach(jsonObjs, function (property, index) {
            return _this.addItemForMerge(convertFromJSON(property), index);
        });
    };
    HashBasedCache.prototype.getItemByJsonKey = function (jsonKey) {
        return this.tempCacheForMerge[jsonKey];
    };
    HashBasedCache.prototype.addItemForMerge = function (item, jsonKey) {
        return this.tempCacheForMerge[jsonKey] = this.getItem(item);
    };
    HashBasedCache.prototype.convertToJSON = function (convertToJSON) {
        var result = [];
        number_1.NumberMapUtils.forEach(this.hashtable, function (items) {
            return list_1.ListUtils.forEach(items, function (item) { return result.push(convertToJSON(item)); });
        });
        return result;
    };
    HashBasedCache.prototype.indexOf = function (_item) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    HashBasedCache.prototype.copyFrom = function (obj) {
        this.hashtable = number_1.NumberMapUtils.map(obj.hashtable, function (el) { return list_1.ListUtils.deepCopy(el); });
        this.tempCacheForMerge = number_1.NumberMapUtils.deepCopy(obj.tempCacheForMerge);
        this.numElements = obj.numElements;
    };
    return HashBasedCache;
}(HashBasedCacheCore));
exports.HashBasedCache = HashBasedCache;
