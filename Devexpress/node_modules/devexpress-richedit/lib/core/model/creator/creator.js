"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var character_properties_1 = require("../character/character-properties");
var character_style_1 = require("../character/character-style");
var enums_1 = require("../character/enums");
var chunk_1 = require("../chunk");
var color_2 = require("../color/color");
var color_model_info_1 = require("../color/color-model-info");
var document_model_1 = require("../document-model");
var drawing_color_1 = require("../drawing/drawing-color");
var drawing_color_model_info_1 = require("../drawing/drawing-color-model-info");
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var numbering_helper_1 = require("../numbering-lists/numbering-helper");
var numbering_list_1 = require("../numbering-lists/numbering-list");
var paragraph_1 = require("../paragraph/paragraph");
var paragraph_properties_1 = require("../paragraph/paragraph-properties");
var paragraph_style_1 = require("../paragraph/paragraph-style");
var rich_utils_1 = require("../rich-utils");
var simple_runs_1 = require("../runs/simple-runs");
var section_1 = require("../section/section");
var section_properties_1 = require("../section/section-properties");
var sub_document_1 = require("../sub-document");
var table_cell_properties_1 = require("../tables/properties/table-cell-properties");
var table_properties_1 = require("../tables/properties/table-properties");
var table_row_properties_1 = require("../tables/properties/table-row-properties");
var table_conditional_style_1 = require("../tables/styles/table-conditional-style");
var table_style_1 = require("../tables/styles/table-style");
var enums_2 = require("../themes/enums");
var ModelCreator = (function () {
    function ModelCreator(options) {
        this.options = options;
    }
    ModelCreator.createTemplateCharProps = function (model) {
        var defProps = new character_properties_1.MaskedCharacterProperties();
        defProps.fontInfo = model.cache.fontInfoCache.getItemByName('Calibri');
        return defProps;
    };
    ModelCreator.createDefaultCharProps = function (model) {
        var defProps = ModelCreator.createTemplateCharProps(model);
        defProps.useValue = enums_1.CharacterPropertiesMask.UseAll;
        return defProps;
    };
    ModelCreator.createTemplateParProps = function () {
        return new paragraph_properties_1.MaskedParagraphProperties();
    };
    ModelCreator.createDefaultParProps = function () {
        var defProps = ModelCreator.createTemplateParProps();
        defProps.useValue = paragraph_properties_1.ParagraphPropertiesMask.UseAll;
        return defProps;
    };
    ModelCreator.createTemplateTableProps = function () {
        return new table_properties_1.TableProperties();
    };
    ModelCreator.createDefaultTableProps = function () {
        var defProps = ModelCreator.createTemplateTableProps();
        defProps.mask = table_properties_1.TablePropertiesMask.UseAll;
        return defProps;
    };
    ModelCreator.createTemplateTableRowProps = function () {
        return new table_row_properties_1.TableRowProperties();
    };
    ModelCreator.createDefaultTableRowProps = function () {
        var defProps = ModelCreator.createTemplateTableRowProps();
        defProps.mask = table_row_properties_1.TableRowPropertiesMask.UseAll;
        return defProps;
    };
    ModelCreator.createTemplateTableCellProps = function () {
        return new table_cell_properties_1.TableCellProperties();
    };
    ModelCreator.createDefaultTableCellProps = function () {
        var defProps = ModelCreator.createTemplateTableCellProps();
        defProps.mask = table_cell_properties_1.TableCellPropertiesMask.UseAll;
        return defProps;
    };
    ModelCreator.createHyperlinkStyleCharProps = function (model) {
        var hyperlinkCharProp = ModelCreator.createTemplateCharProps(model);
        hyperlinkCharProp.useValue = enums_1.CharacterPropertiesMask.UseForeColorIndex | enums_1.CharacterPropertiesMask.UseFontUnderlineType;
        hyperlinkCharProp.textColor = color_model_info_1.ColorModelInfo.makeByColor(color_1.ColorUtils.fromString('#0000ff'));
        hyperlinkCharProp.fontUnderlineType = enums_1.UnderlineType.Single;
        return hyperlinkCharProp;
    };
    ModelCreator.createTemplateSecProps = function () {
        return new section_properties_1.SectionProperties();
    };
    ModelCreator.createTemplateTabProps = function () {
        return new paragraph_style_1.TabProperties();
    };
    ModelCreator.prototype.createModel = function (modelOptions) {
        this.model = new document_model_1.DocumentModel(modelOptions, sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID + 1);
        return this;
    };
    ModelCreator.prototype.setModel = function (model) {
        this.model = model;
        return this;
    };
    ModelCreator.prototype.fillModel = function () {
        var model = this.model;
        var templateCharProps = model.cache.maskedCharacterPropertiesCache.getItem(ModelCreator.createTemplateCharProps(model));
        var templateParProp = model.cache.maskedParagraphPropertiesCache.getItem(ModelCreator.createTemplateParProps());
        var templateTableProp = ModelCreator.createTemplateTableProps();
        var templateTableRowProp = model.cache.tableRowPropertiesCache.getItem(ModelCreator.createTemplateTableRowProps());
        var templateTableCellProp = model.cache.tableCellPropertiesCache.getItem(ModelCreator.createTemplateTableCellProps());
        var templateTabProp = ModelCreator.createTemplateTabProps();
        model.pageBackColor = color_2.ColorHelper.AUTOMATIC_COLOR;
        model.defaultTabWidth = 720;
        model.differentOddAndEvenPages = false;
        model.displayBackgroundShape = false;
        model.defaultCharacterProperties = model.cache.maskedCharacterPropertiesCache.getItem(ModelCreator.createDefaultCharProps(model));
        model.defaultParagraphProperties = model.cache.maskedParagraphPropertiesCache.getItem(ModelCreator.createDefaultParProps());
        model.defaultTableProperties = ModelCreator.createDefaultTableProps();
        model.defaultTableCellProperties = model.cache.tableCellPropertiesCache.getItem(ModelCreator.createDefaultTableCellProps());
        model.defaultTableRowProperties = model.cache.tableRowPropertiesCache.getItem(ModelCreator.createDefaultTableRowProps());
        if (this.options.fillAbstractNumberingListTemplates)
            this.initNumberingListTemplates();
        if (this.options.fillCharStyles) {
            model.stylesManager.addCharacterStyle(new character_style_1.CharacterStyle(character_style_1.CharacterStyle.defaultParagraphCharacterStyleName, character_style_1.CharacterStyle.defaultParagraphCharacterStyleName, false, false, false, true, templateCharProps, null));
            model.stylesManager.addCharacterStyle(new character_style_1.CharacterStyle(character_style_1.CharacterStyle.hyperlinkStyleName, character_style_1.CharacterStyle.hyperlinkStyleName, false, false, false, true, ModelCreator.createHyperlinkStyleCharProps(model), null));
        }
        if (this.options.fillParStyles) {
            model.stylesManager.addParagraphStyle(new paragraph_style_1.ParagraphStyle(paragraph_style_1.ParagraphStyle.normalStyleName, paragraph_style_1.ParagraphStyle.normalStyleName, false, false, false, true, templateCharProps, templateParProp, new paragraph_style_1.TabProperties(), false, -1, -1, null));
        }
        if (this.options.fillTableStyles) {
            var tableConditionalStyle = new table_conditional_style_1.TableConditionalStyle(templateTableProp, templateTableRowProp, templateTableCellProp, templateParProp, templateCharProps, templateTabProp);
            model.stylesManager.addTableStyle(new table_style_1.TableStyle(table_style_1.TableStyle.DEFAULT_STYLENAME, table_style_1.TableStyle.DEFAULT_STYLENAME, false, false, false, true, {}, tableConditionalStyle, null));
        }
        if (this.options.initOfficeTheme)
            this.initOfficeTheme();
        var subDocument = model.mainSubDocument;
        var chunk = new chunk_1.Chunk(subDocument.positionManager.registerPosition(0), '', true);
        subDocument.chunks = [chunk];
        if (this.options.addParagraph) {
            var parChar = rich_utils_1.RichUtils.specialCharacters.ParagraphMark.substr(0);
            subDocument.paragraphs = [new paragraph_1.Paragraph(subDocument, subDocument.positionManager.registerPosition(0), parChar.length, model.getDefaultParagraphStyle(), templateParProp)];
            chunk.textBuffer = parChar;
            chunk.textRuns = [new simple_runs_1.ParagraphRun(0, subDocument.paragraphs[0], new properties_bundle_1.MaskedCharacterPropertiesBundle(templateCharProps, model.characterStyles[0]))];
        }
        if (this.options.addSection)
            model.sections = [new section_1.Section(model, subDocument.positionManager.registerPosition(0), this.options.addParagraph ? 1 : 0, ModelCreator.createTemplateSecProps())];
        return model;
    };
    ModelCreator.prototype.initOfficeTheme = function () {
        this.model.colorProvider.officeTheme.name = 'Office';
        this.model.colorProvider.officeTheme.colors.Accent1 = this.getDrawingColorAsRgb(-12291388);
        this.model.colorProvider.officeTheme.colors.Accent2 = this.getDrawingColorAsRgb(-1213135);
        this.model.colorProvider.officeTheme.colors.Accent3 = this.getDrawingColorAsRgb(-5921371);
        this.model.colorProvider.officeTheme.colors.Accent4 = this.getDrawingColorAsRgb(-16384);
        this.model.colorProvider.officeTheme.colors.Accent5 = this.getDrawingColorAsRgb(-10773547);
        this.model.colorProvider.officeTheme.colors.Accent6 = this.getDrawingColorAsRgb(-9392825);
        this.model.colorProvider.officeTheme.colors.Dark1 = this.getDrawingColorAsSystem(enums_2.SystemColorValues.ScWindowText);
        this.model.colorProvider.officeTheme.colors.Dark2 = this.getDrawingColorAsSystem(enums_2.SystemColorValues.ScWindowText);
        this.model.colorProvider.officeTheme.colors.Light1 = this.getDrawingColorAsSystem(enums_2.SystemColorValues.ScWindow);
        this.model.colorProvider.officeTheme.colors.Light2 = this.getDrawingColorAsRgb(-1579290);
        this.model.colorProvider.officeTheme.colors.FollowedHyperlink = this.getDrawingColorAsRgb(-6992014);
        this.model.colorProvider.officeTheme.colors.Hyperlink = this.getDrawingColorAsRgb(-16423999);
        this.initFontScheme();
    };
    ModelCreator.prototype.initFontScheme = function () {
        this.model.colorProvider.officeTheme.fontScheme.name = 'Office';
        var majorFont = this.model.colorProvider.officeTheme.fontScheme.majorFont;
        var majorSuppFonts = {};
        majorSuppFonts.Arab = 'Times New Roman';
        majorSuppFonts.Beng = 'Vrinda';
        majorSuppFonts.Cans = 'Euphemia';
        majorSuppFonts.Cher = 'Plantagenet Cherokee';
        majorSuppFonts.Deva = 'Mangal';
        majorSuppFonts.Ethi = 'Nyala';
        majorSuppFonts.Geor = 'Sylfaen';
        majorSuppFonts.Gujr = 'Shruti';
        majorSuppFonts.Guru = 'Raavi';
        majorSuppFonts.Hang = '맑은 고딕';
        majorSuppFonts.Hans = '等线 Light';
        majorSuppFonts.Hant = '新細明體';
        majorSuppFonts.Hebr = 'Times New Roman';
        majorSuppFonts.Jpan = '游ゴシック Light';
        majorSuppFonts.Khmr = 'MoolBoran';
        majorSuppFonts.Knda = 'Tunga';
        majorSuppFonts.Laoo = 'DokChampa';
        majorSuppFonts.Mlym = 'Kartika';
        majorSuppFonts.Mong = 'Mongolian Baiti';
        majorSuppFonts.Orya = 'Kalinga';
        majorSuppFonts.Sinh = 'Iskoola Pota';
        majorSuppFonts.Syrc = 'Estrangelo Edessa';
        majorSuppFonts.Taml = 'Latha';
        majorSuppFonts.Telu = 'Gautami';
        majorSuppFonts.Thaa = 'MV Boli';
        majorSuppFonts.Thai = 'Angsana New';
        majorSuppFonts.Tibt = 'Microsoft Himalaya';
        majorSuppFonts.Uigh = 'Microsoft Uighur';
        majorSuppFonts.Viet = 'Times New Roman';
        majorSuppFonts.Yiii = 'Microsoft Yi Baiti';
        majorFont.supplementalFonts = majorSuppFonts;
        majorFont.complexScript.charset = 1;
        majorFont.complexScript.pitchFamily = 0;
        majorFont.complexScript.typeface = '';
        majorFont.complexScript.panose = '';
        majorFont.eastAsian.charset = 1;
        majorFont.eastAsian.pitchFamily = 0;
        majorFont.eastAsian.typeface = '';
        majorFont.eastAsian.panose = '';
        majorFont.latin.charset = 1;
        majorFont.latin.pitchFamily = 0;
        majorFont.latin.typeface = 'Calibri Light';
        majorFont.latin.panose = '020F0302020204030204';
        var minorFont = this.model.colorProvider.officeTheme.fontScheme.minorFont;
        var minorSuppFonts = {};
        minorSuppFonts.Arab = 'Arial';
        minorSuppFonts.Beng = 'Vrinda';
        minorSuppFonts.Cans = 'Euphemia';
        minorSuppFonts.Cher = 'Plantagenet Cherokee';
        minorSuppFonts.Deva = 'Mangal';
        minorSuppFonts.Ethi = 'Nyala';
        minorSuppFonts.Geor = 'Sylfaen';
        minorSuppFonts.Gujr = 'Shruti';
        minorSuppFonts.Guru = 'Raavi';
        minorSuppFonts.Hang = '맑은 고딕';
        minorSuppFonts.Hans = '等线';
        minorSuppFonts.Hant = '新細明體';
        minorSuppFonts.Hebr = 'Arial';
        minorSuppFonts.Jpan = '游明朝';
        minorSuppFonts.Khmr = 'DaunPenh';
        minorSuppFonts.Knda = 'Tunga';
        minorSuppFonts.Laoo = 'DokChampa';
        minorSuppFonts.Mlym = 'Kartika';
        minorSuppFonts.Mong = 'Mongolian Baiti';
        minorSuppFonts.Orya = 'Kalinga';
        minorSuppFonts.Sinh = 'Iskoola Pota';
        minorSuppFonts.Syrc = 'Estrangelo Edessa';
        minorSuppFonts.Taml = 'Latha';
        minorSuppFonts.Telu = 'Gautami';
        minorSuppFonts.Thaa = 'MV Boli';
        minorSuppFonts.Thai = 'Cordia New';
        minorSuppFonts.Tibt = 'Microsoft Himalaya';
        minorSuppFonts.Uigh = 'Microsoft Uighur';
        minorSuppFonts.Viet = 'Arial';
        minorSuppFonts.Yiii = 'Microsoft Yi Baiti';
        minorFont.supplementalFonts = minorSuppFonts;
        minorFont.complexScript.charset = 1;
        minorFont.complexScript.pitchFamily = 0;
        minorFont.complexScript.typeface = '';
        minorFont.complexScript.panose = '';
        minorFont.eastAsian.charset = 1;
        minorFont.eastAsian.pitchFamily = 0;
        minorFont.eastAsian.typeface = '';
        minorFont.eastAsian.panose = '';
        minorFont.latin.charset = 1;
        minorFont.latin.pitchFamily = 0;
        minorFont.latin.typeface = 'Calibri';
        minorFont.latin.panose = '020F0502020204030204';
    };
    ModelCreator.prototype.getDrawingColorAsRgb = function (rgb) {
        return new drawing_color_1.DrawingColor(this.model.cache.drawingColorModelInfoCache.getItem(drawing_color_model_info_1.DrawingColorModelInfo.createRGB(rgb)));
    };
    ModelCreator.prototype.getDrawingColorAsSystem = function (val) {
        return new drawing_color_1.DrawingColor(this.model.cache.drawingColorModelInfoCache.getItem(drawing_color_model_info_1.DrawingColorModelInfo.createSystem(val)));
    };
    ModelCreator.prototype.initNumberingListTemplates = function () {
        var _this = this;
        this.model.abstractNumberingListTemplates = [];
        var leftIndent = 0;
        var numberingTemplate = new numbering_list_1.AbstractNumberingList(this.model);
        list_1.ListUtils.forEach(numberingTemplate.levels, function (level, index) {
            var prop = new list_level_properties_1.ListLevelProperties();
            var parProp = new paragraph_properties_1.MaskedParagraphProperties();
            parProp.copyFrom(_this.model.defaultParagraphProperties);
            prop.displayFormatString = "{" + index + "}.";
            prop.templateCode = numbering_helper_1.NumberingHelper.generateNewTemplateCode(_this.model);
            parProp.firstLineIndent = 360;
            parProp.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
            leftIndent += 720;
            parProp.leftIndent = leftIndent;
            level.setListLevelProperties(prop);
            level.setParagraphProperties(parProp);
        });
        this.model.abstractNumberingListTemplates.push(numberingTemplate);
        leftIndent = 0;
        var bulletTemplate = new numbering_list_1.AbstractNumberingList(this.model);
        list_1.ListUtils.forEach(bulletTemplate.levels, function (level) {
            var prop = new list_level_properties_1.ListLevelProperties();
            var parProp = new paragraph_properties_1.MaskedParagraphProperties();
            parProp.copyFrom(_this.model.defaultParagraphProperties);
            prop.displayFormatString = "\u2022";
            prop.format = 5;
            prop.templateCode = numbering_helper_1.NumberingHelper.generateNewTemplateCode(_this.model);
            level.getCharacterProperties().fontInfo = _this.model.cache.fontInfoCache.getItemByName('Arial');
            parProp.firstLineIndent = 360;
            parProp.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
            leftIndent += 720;
            parProp.leftIndent = leftIndent;
            level.setListLevelProperties(prop);
            level.setParagraphProperties(parProp);
        });
        this.model.abstractNumberingListTemplates.push(bulletTemplate);
        var multiTemplate = new numbering_list_1.AbstractNumberingList(this.model);
        var displayFormatString = '';
        var levelOffset = 360;
        var alignPositionsInDocuments = [360, 792, 1224, 1728, 2232, 2736, 3240, 3744, 4320];
        list_1.ListUtils.forEach(multiTemplate.levels, function (level, index) {
            var prop = new list_level_properties_1.ListLevelProperties();
            var parProp = new paragraph_properties_1.MaskedParagraphProperties();
            parProp.copyFrom(_this.model.defaultParagraphProperties);
            displayFormatString += "{" + index + "}.";
            prop.displayFormatString = displayFormatString;
            level.setListLevelProperties(prop);
            var firstLinePosition = levelOffset * index;
            parProp.leftIndent = alignPositionsInDocuments[index];
            parProp.firstLineIndent = parProp.leftIndent - firstLinePosition;
            parProp.firstLineIndentType = paragraph_properties_1.ParagraphFirstLineIndent.Hanging;
            level.setParagraphProperties(parProp);
        });
        this.model.abstractNumberingListTemplates.push(multiTemplate);
    };
    return ModelCreator;
}());
exports.ModelCreator = ModelCreator;
