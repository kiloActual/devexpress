"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var character_properties_1 = require("../character/character-properties");
var ModelCacheFiller = (function () {
    function ModelCacheFiller(model, fontsSettings) {
        this.model = model;
        this.fontsSettings = fontsSettings;
    }
    ModelCacheFiller.prototype.fillCache = function () {
        var _this = this;
        this.makeFontMap();
        this.replaceCharProperties(this.model, "defaultCharacterProperties");
        this.model.characterStyles.forEach(function (style) { return _this.replaceCharProperties(style, "maskedCharacterProperties"); });
        this.model.paragraphStyles.forEach(function (style) { return _this.replaceCharProperties(style, "maskedCharacterProperties"); });
        this.model.tableStyles.forEach(function (style) {
            _this.replaceCharProperties(style.baseConditionalStyle, 'maskedCharacterProperties');
            number_1.NumberMapUtils.forEach(style.conditionalStyles, function (style) { return _this.replaceCharProperties(style, 'maskedCharacterProperties'); });
        });
        number_1.NumberMapUtils.forEach(this.model.subDocuments, function (sd) { return _this.replaceInModelSubDocument(sd); });
    };
    ModelCacheFiller.prototype.makeFontMap = function () {
        var _this = this;
        var fontInfoCache = this.model.cache.fontInfoCache;
        var fontsSettings = this.fontsSettings;
        this.fontMap = Object.create(null);
        fontInfoCache.getAllFonts().forEach(function (font) { return _this.fontMap[font.name] = fontsSettings.getPermittedFont(fontInfoCache, font); });
    };
    ModelCacheFiller.prototype.replaceCharProperties = function (object, propKey) {
        var props = object[propKey];
        props.fontInfo = props.fontInfo ? this.fontMap[props.fontInfo.name] : this.model.defaultCharacterProperties.fontInfo;
        if (props instanceof character_properties_1.MaskedCharacterProperties)
            object[propKey] = this.model.cache.maskedCharacterPropertiesCache.getItem(props);
        else
            object[propKey] = this.model.cache.mergedCharacterPropertiesCache.getItem(props);
    };
    ModelCacheFiller.prototype.replaceInModelSubDocument = function (sd) {
        var _this = this;
        sd.paragraphs.forEach(function (p) { return p.resetParagraphMergedProperties(); });
        sd.chunks.forEach(function (chunk) {
            chunk.textRuns.forEach(function (run) {
                _this.replaceCharProperties(run, 'maskedCharacterProperties');
                run.resetCharacterMergedProperties();
            });
        });
    };
    return ModelCacheFiller;
}());
exports.ModelCacheFiller = ModelCacheFiller;
