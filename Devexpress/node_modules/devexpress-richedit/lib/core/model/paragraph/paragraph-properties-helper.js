"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var sub_document_1 = require("../sub-document");
var paragraph_properties_1 = require("./paragraph-properties");
var ParagraphPropertiesApplier = (function () {
    function ParagraphPropertiesApplier(modelManager, inputPosition, newParProps, subDocument, intervals) {
        this.modelManager = modelManager;
        this.newParProps = newParProps;
        this.inputPosition = inputPosition;
        this.modelManip = this.modelManager.modelManipulator;
        this.subDoc = subDocument;
        this.intervals = intervals;
    }
    ParagraphPropertiesApplier.prototype.apply = function () {
        var _this = this;
        var history = this.modelManager.history;
        this.parPropsFull = this.inputPosition.getMergedParagraphPropertiesFull();
        this.parPropsRaw = this.inputPosition.getMergedParagraphPropertiesRaw();
        this.oldParPropsRaw = this.parPropsRaw.clone();
        var parIndices = this.subDoc.getParagraphIndicesByIntervals(this.intervals);
        var changed = 0;
        history.beginTransaction();
        list_1.ListUtils.reverseForEach(parIndices, function (parIndex) {
            var paragraph = _this.subDoc.paragraphs[parIndex];
            var interval = _this.subDoc.paragraphs[parIndex].interval;
            _this.oldParPropsRaw = paragraph.getParagraphMergedProperties().clone();
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndentType);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.firstLineIndent);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.widowOrphanControl);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.afterAutoSpacing);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.outlineLevel);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.beforeAutoSpacing);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.pageBreakBefore);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.rightIndent);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.suppressHyphenation);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.suppressLineNumbers);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.keepLinesTogether);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.keepWithNext);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.shadingInfo);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.leftIndent);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacingType);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.lineSpacing);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.alignment);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.contextualSpacing);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.spacingBefore);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.spacingAfter);
            changed |= _this.applyProp(interval, paragraph_properties_1.ParagraphPropertyDescriptor.divId);
        });
        history.endTransaction();
        return !!changed;
    };
    ParagraphPropertiesApplier.prototype.applyProp = function (interval, descriptor) {
        var newValue = descriptor.getProp(this.newParProps);
        var currValue = descriptor.getProp(this.oldParPropsRaw);
        if (newValue !== undefined && newValue !== currValue) {
            descriptor.setProp(this.parPropsFull, newValue);
            descriptor.setProp(this.parPropsRaw, newValue);
            this.modelManager.history.addAndRedo(new (descriptor.getHistoryItemConstructor())(this.modelManip, new sub_document_1.SubDocumentInterval(this.subDoc, interval), newValue, true));
            return 1;
        }
        return 0;
    };
    return ParagraphPropertiesApplier;
}());
exports.ParagraphPropertiesApplier = ParagraphPropertiesApplier;
