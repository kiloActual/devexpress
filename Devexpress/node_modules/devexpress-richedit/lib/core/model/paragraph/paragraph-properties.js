"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var math_1 = require("@devexpress/utils/lib/utils/math");
var border_info_1 = require("../borders/border-info");
var shading_info_1 = require("../shadings/shading-info");
var paragraph_property_descriptors_1 = require("./paragraph-property-descriptors");
var ParagraphPropertiesMask;
(function (ParagraphPropertiesMask) {
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseNone"] = 0] = "UseNone";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseAlignment"] = 1] = "UseAlignment";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseLeftIndent"] = 2] = "UseLeftIndent";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseRightIndent"] = 4] = "UseRightIndent";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseSpacingBefore"] = 8] = "UseSpacingBefore";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseSpacingAfter"] = 16] = "UseSpacingAfter";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseLineSpacing"] = 32] = "UseLineSpacing";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseFirstLineIndent"] = 64] = "UseFirstLineIndent";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseSuppressHyphenation"] = 128] = "UseSuppressHyphenation";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseSuppressLineNumbers"] = 256] = "UseSuppressLineNumbers";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseContextualSpacing"] = 512] = "UseContextualSpacing";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UsePageBreakBefore"] = 1024] = "UsePageBreakBefore";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseBeforeAutoSpacing"] = 2048] = "UseBeforeAutoSpacing";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseAfterAutoSpacing"] = 4096] = "UseAfterAutoSpacing";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseKeepWithNext"] = 8192] = "UseKeepWithNext";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseKeepLinesTogether"] = 16384] = "UseKeepLinesTogether";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseWidowOrphanControl"] = 32768] = "UseWidowOrphanControl";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseOutlineLevel"] = 65536] = "UseOutlineLevel";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseShadingInfoIndex"] = 131072] = "UseShadingInfoIndex";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseLeftBorder"] = 262144] = "UseLeftBorder";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseRightBorder"] = 524288] = "UseRightBorder";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseTopBorder"] = 1048576] = "UseTopBorder";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseBottomBorder"] = 2097152] = "UseBottomBorder";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseDivId"] = 4194304] = "UseDivId";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseBorders"] = 20709376] = "UseBorders";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseRightToLeft"] = 8388608] = "UseRightToLeft";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseBetweenBorder"] = 16777216] = "UseBetweenBorder";
    ParagraphPropertiesMask[ParagraphPropertiesMask["UseAll"] = 2147483647] = "UseAll";
})(ParagraphPropertiesMask = exports.ParagraphPropertiesMask || (exports.ParagraphPropertiesMask = {}));
var ParagraphAlignment;
(function (ParagraphAlignment) {
    ParagraphAlignment[ParagraphAlignment["Left"] = 0] = "Left";
    ParagraphAlignment[ParagraphAlignment["Right"] = 1] = "Right";
    ParagraphAlignment[ParagraphAlignment["Center"] = 2] = "Center";
    ParagraphAlignment[ParagraphAlignment["Justify"] = 3] = "Justify";
    ParagraphAlignment[ParagraphAlignment["JustifyMedium"] = 4] = "JustifyMedium";
    ParagraphAlignment[ParagraphAlignment["JustifyHigh"] = 5] = "JustifyHigh";
    ParagraphAlignment[ParagraphAlignment["JustifyLow"] = 6] = "JustifyLow";
    ParagraphAlignment[ParagraphAlignment["Distribute"] = 7] = "Distribute";
    ParagraphAlignment[ParagraphAlignment["ThaiDistribute"] = 8] = "ThaiDistribute";
})(ParagraphAlignment = exports.ParagraphAlignment || (exports.ParagraphAlignment = {}));
var ParagraphLineSpacingType;
(function (ParagraphLineSpacingType) {
    ParagraphLineSpacingType[ParagraphLineSpacingType["Single"] = 0] = "Single";
    ParagraphLineSpacingType[ParagraphLineSpacingType["Sesquialteral"] = 1] = "Sesquialteral";
    ParagraphLineSpacingType[ParagraphLineSpacingType["Double"] = 2] = "Double";
    ParagraphLineSpacingType[ParagraphLineSpacingType["Multiple"] = 3] = "Multiple";
    ParagraphLineSpacingType[ParagraphLineSpacingType["Exactly"] = 4] = "Exactly";
    ParagraphLineSpacingType[ParagraphLineSpacingType["AtLeast"] = 5] = "AtLeast";
})(ParagraphLineSpacingType = exports.ParagraphLineSpacingType || (exports.ParagraphLineSpacingType = {}));
var ParagraphFirstLineIndent;
(function (ParagraphFirstLineIndent) {
    ParagraphFirstLineIndent[ParagraphFirstLineIndent["None"] = 0] = "None";
    ParagraphFirstLineIndent[ParagraphFirstLineIndent["Indented"] = 1] = "Indented";
    ParagraphFirstLineIndent[ParagraphFirstLineIndent["Hanging"] = 2] = "Hanging";
})(ParagraphFirstLineIndent = exports.ParagraphFirstLineIndent || (exports.ParagraphFirstLineIndent = {}));
var ParagraphPropertyDescriptor = (function () {
    function ParagraphPropertyDescriptor() {
    }
    ParagraphPropertyDescriptor.firstLineIndent = new paragraph_property_descriptors_1.ParagraphPropertiesFirstLineIndentDescriptor();
    ParagraphPropertyDescriptor.widowOrphanControl = new paragraph_property_descriptors_1.ParagraphPropertiesWidowOrphanControlDescriptor();
    ParagraphPropertyDescriptor.firstLineIndentType = new paragraph_property_descriptors_1.ParagraphPropertiesFirstLineIndentTypeDescriptor();
    ParagraphPropertyDescriptor.afterAutoSpacing = new paragraph_property_descriptors_1.ParagraphPropertiesAfterAutoSpacingDescriptor();
    ParagraphPropertyDescriptor.outlineLevel = new paragraph_property_descriptors_1.ParagraphPropertiesOutlineLevelDescriptor();
    ParagraphPropertyDescriptor.beforeAutoSpacing = new paragraph_property_descriptors_1.ParagraphPropertiesBeforeAutoSpacingDescriptor();
    ParagraphPropertyDescriptor.pageBreakBefore = new paragraph_property_descriptors_1.ParagraphPropertiesPageBreakBeforeDescriptor();
    ParagraphPropertyDescriptor.rightIndent = new paragraph_property_descriptors_1.ParagraphPropertiesRightIndentDescriptor();
    ParagraphPropertyDescriptor.suppressHyphenation = new paragraph_property_descriptors_1.ParagraphPropertiesSuppressHyphenationDescriptor();
    ParagraphPropertyDescriptor.lineSpacing = new paragraph_property_descriptors_1.ParagraphPropertiesLineSpacingDescriptor();
    ParagraphPropertyDescriptor.suppressLineNumbers = new paragraph_property_descriptors_1.ParagraphPropertiesSuppressLineNumbersDescriptor();
    ParagraphPropertyDescriptor.keepLinesTogether = new paragraph_property_descriptors_1.ParagraphPropertiesKeepLinesTogetherDescriptor();
    ParagraphPropertyDescriptor.keepWithNext = new paragraph_property_descriptors_1.ParagraphPropertiesKeepWithNextDescriptor();
    ParagraphPropertyDescriptor.shadingInfo = new paragraph_property_descriptors_1.ParagraphPropertiesShadingInfoIndexDescriptor();
    ParagraphPropertyDescriptor.leftIndent = new paragraph_property_descriptors_1.ParagraphPropertiesLeftIndentDescriptor();
    ParagraphPropertyDescriptor.lineSpacingType = new paragraph_property_descriptors_1.ParagraphPropertiesLineSpacingTypeDescriptor();
    ParagraphPropertyDescriptor.alignment = new paragraph_property_descriptors_1.ParagraphPropertiesAlignmentDescriptor();
    ParagraphPropertyDescriptor.contextualSpacing = new paragraph_property_descriptors_1.ParagraphPropertiesContextualSpacingDescriptor();
    ParagraphPropertyDescriptor.spacingBefore = new paragraph_property_descriptors_1.ParagraphPropertiesSpacingBeforeDescriptor();
    ParagraphPropertyDescriptor.spacingAfter = new paragraph_property_descriptors_1.ParagraphPropertiesSpacingAfterDescriptor();
    ParagraphPropertyDescriptor.rightToLeft = new paragraph_property_descriptors_1.ParagraphPropertiesRightToLeftDescriptor();
    ParagraphPropertyDescriptor.leftBorder = new paragraph_property_descriptors_1.ParagraphPropertiesLeftBorderDescriptor();
    ParagraphPropertyDescriptor.rightBorder = new paragraph_property_descriptors_1.ParagraphPropertiesRightBorderDescriptor();
    ParagraphPropertyDescriptor.topBorder = new paragraph_property_descriptors_1.ParagraphPropertiesTopBorderDescriptor();
    ParagraphPropertyDescriptor.bottomBorder = new paragraph_property_descriptors_1.ParagraphPropertiesBottomBorderDescriptor();
    ParagraphPropertyDescriptor.betweenBorder = new paragraph_property_descriptors_1.ParagraphPropertiesBetweenBorderDescriptor();
    ParagraphPropertyDescriptor.divId = new paragraph_property_descriptors_1.ParagraphPropertiesDivIdDescriptor();
    ParagraphPropertyDescriptor.ALL_FIELDS = [
        ParagraphPropertyDescriptor.firstLineIndent,
        ParagraphPropertyDescriptor.widowOrphanControl,
        ParagraphPropertyDescriptor.firstLineIndentType,
        ParagraphPropertyDescriptor.afterAutoSpacing,
        ParagraphPropertyDescriptor.outlineLevel,
        ParagraphPropertyDescriptor.beforeAutoSpacing,
        ParagraphPropertyDescriptor.pageBreakBefore,
        ParagraphPropertyDescriptor.rightIndent,
        ParagraphPropertyDescriptor.suppressHyphenation,
        ParagraphPropertyDescriptor.lineSpacing,
        ParagraphPropertyDescriptor.suppressLineNumbers,
        ParagraphPropertyDescriptor.keepLinesTogether,
        ParagraphPropertyDescriptor.keepWithNext,
        ParagraphPropertyDescriptor.shadingInfo,
        ParagraphPropertyDescriptor.leftIndent,
        ParagraphPropertyDescriptor.lineSpacingType,
        ParagraphPropertyDescriptor.alignment,
        ParagraphPropertyDescriptor.contextualSpacing,
        ParagraphPropertyDescriptor.spacingBefore,
        ParagraphPropertyDescriptor.spacingAfter,
        ParagraphPropertyDescriptor.rightToLeft,
        ParagraphPropertyDescriptor.leftBorder,
        ParagraphPropertyDescriptor.rightBorder,
        ParagraphPropertyDescriptor.topBorder,
        ParagraphPropertyDescriptor.bottomBorder,
        ParagraphPropertyDescriptor.betweenBorder,
        ParagraphPropertyDescriptor.divId
    ];
    return ParagraphPropertyDescriptor;
}());
exports.ParagraphPropertyDescriptor = ParagraphPropertyDescriptor;
var ParagraphProperties = (function () {
    function ParagraphProperties() {
        this.firstLineIndent = 0;
        this.widowOrphanControl = true;
        this.firstLineIndentType = ParagraphFirstLineIndent.None;
        this.afterAutoSpacing = false;
        this.outlineLevel = 0;
        this.beforeAutoSpacing = false;
        this.pageBreakBefore = false;
        this.rightIndent = 0;
        this.suppressHyphenation = false;
        this.lineSpacing = 0;
        this.suppressLineNumbers = false;
        this.keepLinesTogether = false;
        this.keepWithNext = false;
        this.shadingInfo = shading_info_1.ShadingInfo.nullColor;
        this.rightToLeft = false;
        this.leftIndent = 0;
        this.lineSpacingType = ParagraphLineSpacingType.Single;
        this.alignment = ParagraphAlignment.Left;
        this.contextualSpacing = false;
        this.spacingBefore = 0;
        this.spacingAfter = 0;
        this.leftBorder = new border_info_1.BorderInfo();
        this.rightBorder = new border_info_1.BorderInfo();
        this.topBorder = new border_info_1.BorderInfo();
        this.bottomBorder = new border_info_1.BorderInfo();
        this.betweenBorder = new border_info_1.BorderInfo();
        this.divId = 0;
    }
    ParagraphProperties.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.leftIndent ^
            math_1.MathUtils.somePrimes[1] * this.rightIndent ^
            math_1.MathUtils.somePrimes[2] * this.firstLineIndent ^
            math_1.MathUtils.somePrimes[3] * this.spacingBefore ^
            math_1.MathUtils.somePrimes[4] * this.spacingAfter;
    };
    ParagraphProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    ParagraphProperties.prototype.copyFrom = function (obj) {
        this.alignment = obj.alignment;
        this.leftIndent = obj.leftIndent;
        this.rightIndent = obj.rightIndent;
        this.spacingBefore = obj.spacingBefore;
        this.spacingAfter = obj.spacingAfter;
        this.lineSpacing = obj.lineSpacing;
        this.firstLineIndent = obj.firstLineIndent;
        this.suppressHyphenation = obj.suppressHyphenation;
        this.suppressLineNumbers = obj.suppressLineNumbers;
        this.contextualSpacing = obj.contextualSpacing;
        this.pageBreakBefore = obj.pageBreakBefore;
        this.beforeAutoSpacing = obj.beforeAutoSpacing;
        this.afterAutoSpacing = obj.afterAutoSpacing;
        this.keepWithNext = obj.keepWithNext;
        this.keepLinesTogether = obj.keepLinesTogether;
        this.widowOrphanControl = obj.widowOrphanControl;
        this.outlineLevel = obj.outlineLevel;
        this.firstLineIndentType = obj.firstLineIndentType;
        this.lineSpacingType = obj.lineSpacingType;
        this.rightToLeft = obj.rightToLeft;
        this.shadingInfo = obj.shadingInfo ? obj.shadingInfo.clone() : obj.shadingInfo;
        if (obj.leftBorder)
            this.leftBorder.copyFrom(obj.leftBorder);
        else
            this.leftBorder = obj.leftBorder;
        if (obj.rightBorder)
            this.rightBorder.copyFrom(obj.rightBorder);
        else
            this.rightBorder = obj.rightBorder;
        if (obj.topBorder)
            this.topBorder.copyFrom(obj.topBorder);
        else
            this.topBorder = obj.topBorder;
        if (obj.bottomBorder)
            this.bottomBorder.copyFrom(obj.bottomBorder);
        else
            this.bottomBorder = obj.bottomBorder;
        if (obj.betweenBorder)
            this.betweenBorder.copyFrom(obj.betweenBorder);
        else
            this.betweenBorder = obj.betweenBorder;
        this.divId = obj.divId;
    };
    ParagraphProperties.prototype.clone = function () {
        var result = new ParagraphProperties();
        result.copyFrom(this);
        return result;
    };
    ParagraphProperties.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.firstLineIndent == obj.firstLineIndent &&
            this.firstLineIndentType == obj.firstLineIndentType &&
            this.afterAutoSpacing == obj.afterAutoSpacing &&
            this.outlineLevel == obj.outlineLevel &&
            this.beforeAutoSpacing == obj.beforeAutoSpacing &&
            this.pageBreakBefore == obj.pageBreakBefore &&
            this.rightIndent == obj.rightIndent &&
            this.suppressHyphenation == obj.suppressHyphenation &&
            this.lineSpacing == obj.lineSpacing &&
            this.suppressLineNumbers == obj.suppressLineNumbers &&
            this.keepLinesTogether == obj.keepLinesTogether &&
            this.keepWithNext == obj.keepWithNext &&
            this.shadingInfo.equals(obj.shadingInfo) &&
            this.leftIndent == obj.leftIndent &&
            this.lineSpacingType == obj.lineSpacingType &&
            this.alignment == obj.alignment &&
            this.contextualSpacing == obj.contextualSpacing &&
            this.rightToLeft == obj.rightToLeft &&
            this.spacingBefore == obj.spacingBefore &&
            this.spacingAfter == obj.spacingAfter &&
            this.leftBorder.equals(obj.leftBorder) &&
            this.rightBorder.equals(obj.rightBorder) &&
            this.topBorder.equals(obj.topBorder) &&
            this.bottomBorder.equals(obj.bottomBorder) &&
            this.betweenBorder.equals(obj.betweenBorder) &&
            this.divId == obj.divId;
    };
    ParagraphProperties.prototype.getLeftIndentForFirstRow = function () {
        var indent = this.leftIndent;
        switch (this.firstLineIndentType) {
            case ParagraphFirstLineIndent.None:
            case ParagraphFirstLineIndent.Indented:
                indent += this.firstLineIndent;
                break;
            case ParagraphFirstLineIndent.Hanging:
                indent -= this.firstLineIndent;
        }
        return indent;
    };
    ParagraphProperties.prototype.getLeftIndentForOtherRow = function () {
        return this.leftIndent;
    };
    ParagraphProperties.prototype.getLeftIndentForParagraphFrame = function () {
        var indent = this.leftIndent;
        if (this.firstLineIndentType == ParagraphFirstLineIndent.Hanging)
            indent -= this.firstLineIndent;
        return unit_converter_1.UnitConverter.twipsToPixelsF(indent);
    };
    return ParagraphProperties;
}());
exports.ParagraphProperties = ParagraphProperties;
var MaskedParagraphProperties = (function (_super) {
    tslib_1.__extends(MaskedParagraphProperties, _super);
    function MaskedParagraphProperties() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.useValue = ParagraphPropertiesMask.UseNone;
        return _this;
    }
    MaskedParagraphProperties.prototype.getUseValue = function (value) {
        return (this.useValue & value) != 0;
    };
    MaskedParagraphProperties.prototype.calculateHash = function () {
        return _super.prototype.calculateHash.call(this) +
            math_1.MathUtils.somePrimes[15] * this.useValue;
    };
    MaskedParagraphProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.useValue |= mask;
        else
            this.useValue &= ~mask;
    };
    MaskedParagraphProperties.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.useValue = obj.useValue;
    };
    MaskedParagraphProperties.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj)
            && this.useValue == obj.useValue;
    };
    MaskedParagraphProperties.prototype.clone = function () {
        var result = new MaskedParagraphProperties();
        result.copyFrom(this);
        return result;
    };
    MaskedParagraphProperties.createDefault = function (model) {
        var prop = model.defaultParagraphProperties.clone();
        prop.useValue = ParagraphPropertiesMask.UseNone;
        return prop;
    };
    MaskedParagraphProperties.prototype.setValue = function (desc, value) {
        desc.setProp(this, value);
        this.setUseValue(desc.maskValue(), true);
    };
    return MaskedParagraphProperties;
}(ParagraphProperties));
exports.MaskedParagraphProperties = MaskedParagraphProperties;
