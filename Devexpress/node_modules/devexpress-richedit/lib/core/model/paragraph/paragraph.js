"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var character_properties_1 = require("../character/character-properties");
var enums_1 = require("../character/enums");
var number_converter_creator_1 = require("../number-converters/number-converter-creator");
var numbering_list_1 = require("../numbering-lists/numbering-list");
var character_properties_merger_1 = require("../properties-merger/character-properties-merger");
var paragraph_properties_merger_1 = require("../properties-merger/paragraph-properties-merger");
var table_1 = require("../tables/main-structures/table");
var paragraph_style_1 = require("./paragraph-style");
var TabsInfo = (function () {
    function TabsInfo() {
    }
    return TabsInfo;
}());
exports.TabsInfo = TabsInfo;
var TabAlign;
(function (TabAlign) {
    TabAlign[TabAlign["Left"] = 0] = "Left";
    TabAlign[TabAlign["Center"] = 1] = "Center";
    TabAlign[TabAlign["Right"] = 2] = "Right";
    TabAlign[TabAlign["Decimal"] = 3] = "Decimal";
    TabAlign[TabAlign["Numbering"] = 4] = "Numbering";
})(TabAlign = exports.TabAlign || (exports.TabAlign = {}));
var Paragraph = (function () {
    function Paragraph(subDocument, startLogPosition, length, paragraphStyle, maskedParagraphProperties, indexInMaskedParagraphProperitesCache) {
        if (indexInMaskedParagraphProperitesCache === void 0) { indexInMaskedParagraphProperitesCache = undefined; }
        this.numberingListIndex = numbering_list_1.NumberingList.NumberingListNotSettedIndex;
        this.listLevelIndex = -1;
        this.subDocument = subDocument;
        this.startLogPosition = startLogPosition;
        this.length = length;
        this.paragraphStyle = paragraphStyle;
        if (indexInMaskedParagraphProperitesCache === undefined) {
            if (maskedParagraphProperties)
                this.setParagraphProperties(maskedParagraphProperties);
            else
                this.maskedParagraphProperties = null;
        }
        else
            this.maskedParagraphProperties = this.subDocument.documentModel.cache.maskedParagraphPropertiesCache.getItemByJsonKey(indexInMaskedParagraphProperitesCache);
        this.mergedParagraphFormatting = null;
        this.tabs = new paragraph_style_1.TabProperties();
    }
    Object.defineProperty(Paragraph.prototype, "isEmpty", {
        get: function () { return this.length <= 1; },
        enumerable: true,
        configurable: true
    });
    Paragraph.prototype.getParagraphBundleFull = function (model) {
        return new properties_bundle_1.MaskedParagraphPropertiesBundleFull(model.cache.maskedParagraphPropertiesCache.getItem(this.maskedParagraphProperties), model.stylesManager.addParagraphStyle(this.paragraphStyle), new properties_bundle_1.ParagraphListInfo(this.numberingListIndex, this.listLevelIndex), this.tabs.clone());
    };
    Paragraph.prototype.getTableCell = function () {
        var parPos = this.startLogPosition.value;
        var tables = this.subDocument.tables;
        var table = table_1.Table.getTableByPosition(tables, parPos, true);
        if (!table)
            return null;
        var rowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, parPos);
        var row = table.rows[rowIndex];
        var cellIndex = search_1.SearchUtils.normedInterpolationIndexOf(row.cells, function (c) { return c.startParagraphPosition.value; }, parPos);
        var cell = row.cells[cellIndex];
        return cell;
    };
    Paragraph.prototype.isInList = function () {
        return this.getNumberingListIndex() >= 0;
    };
    Paragraph.prototype.isInStyleList = function () {
        return this.paragraphStyle && this.paragraphStyle.numberingListIndex >= 0;
    };
    Paragraph.prototype.getListLevelIndex = function () {
        if (this.listLevelIndex >= 0)
            return this.listLevelIndex;
        return this.paragraphStyle ? this.paragraphStyle.getListLevelIndex() : -1;
    };
    Paragraph.prototype.getListLevel = function () {
        return this.getNumberingList().levels[this.getListLevelIndex()];
    };
    Paragraph.prototype.getNumberingListIndex = function () {
        if (this.numberingListIndex >= 0 || this.numberingListIndex === numbering_list_1.NumberingList.NoNumberingListIndex)
            return this.numberingListIndex;
        return this.paragraphStyle ? this.paragraphStyle.getNumberingListIndex() : -1;
    };
    Paragraph.prototype.getNumberingList = function () {
        return this.subDocument.documentModel.numberingLists[this.getNumberingListIndex()];
    };
    Paragraph.prototype.getAbstractNumberingList = function () {
        var numberingList = this.getNumberingList();
        return numberingList ? numberingList.getAbstractNumberingList() : null;
    };
    Paragraph.prototype.getAbstractNumberingListIndex = function () {
        var numberingList = this.getNumberingList();
        return numberingList ? numberingList.abstractNumberingListIndex : -1;
    };
    Paragraph.prototype.getNumberingListText = function () {
        var counters = this.subDocument.documentModel.getRangeListCounters(this);
        return this.getNumberingListTextCore(counters);
    };
    Paragraph.prototype.getNumberingListTextCore = function (counters) {
        var levels = this.getNumberingList().levels;
        var formatString = levels[this.getListLevelIndex()].getListLevelProperties().displayFormatString;
        return this.formatNumberingListText(formatString, counters, levels);
    };
    Paragraph.prototype.getNumberingListSeparatorChar = function () {
        return this.getListLevel().getListLevelProperties().separator;
    };
    Paragraph.prototype.getNumerationCharacterProperties = function () {
        var merger = new character_properties_merger_1.CharacterPropertiesMerger();
        merger.mergeCharacterProperties(this.getNumberingList().levels[this.getListLevelIndex()].getCharacterProperties());
        var paragraphRunProperties = this.subDocument.getRunByPosition(this.getEndPosition() - 1).getCharacterMergedProperties();
        var maskedParagraphRunProperties = new character_properties_1.MaskedCharacterProperties();
        maskedParagraphRunProperties.copyFrom(paragraphRunProperties);
        maskedParagraphRunProperties.useValue = enums_1.CharacterPropertiesMask.UseAll ^ enums_1.CharacterPropertiesMask.UseFontUnderlineType;
        merger.mergeCharacterProperties(maskedParagraphRunProperties);
        return this.subDocument.documentModel.cache.mergedCharacterPropertiesCache.getItem(merger.getMergedProperties());
    };
    Paragraph.prototype.formatNumberingListText = function (formatString, args, levels) {
        var _a;
        var objArgs = new Array(args.length);
        for (var i = 0; i < args.length; i++) {
            var converter = number_converter_creator_1.NumberConverterCreator.createConverter(levels[i].getListLevelProperties().format, this.subDocument.documentModel.simpleFormattersManager);
            objArgs[i] = converter.convertNumber(args[i]);
        }
        try {
            return (_a = this.subDocument.documentModel.simpleFormattersManager).formatString.apply(_a, tslib_1.__spreadArrays([formatString], objArgs));
        }
        catch (e) {
            try {
                return objArgs[0];
            }
            catch (e) {
                return "";
            }
        }
    };
    Object.defineProperty(Paragraph.prototype, "interval", {
        get: function () { return new fixed_1.FixedInterval(this.startLogPosition.value, this.length); },
        enumerable: true,
        configurable: true
    });
    Paragraph.prototype.getEndPosition = function () {
        return this.startLogPosition.value + this.length;
    };
    Paragraph.prototype.setParagraphProperties = function (properties) {
        this.maskedParagraphProperties = this.subDocument.documentModel.cache.maskedParagraphPropertiesCache.getItem(properties);
    };
    Paragraph.prototype.onParagraphPropertiesChanged = function () {
        this.resetParagraphMergedProperties();
    };
    Paragraph.prototype.resetParagraphMergedProperties = function () {
        this.mergedParagraphFormatting = null;
    };
    Paragraph.prototype.getParagraphMergedProperties = function () {
        if (!this.mergedParagraphFormatting) {
            var merger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
            merger.mergeMaskedParagraphProperties(this.maskedParagraphProperties);
            if (this.isInList())
                merger.mergeMaskedParagraphProperties(this.getListLevel().getParagraphProperties());
            merger.mergeParagraphStyle(this.paragraphStyle);
            var tableCell = this.getTableCell();
            if (tableCell)
                merger.mergeTableStyle(tableCell);
            merger.mergeMaskedParagraphProperties(this.subDocument.documentModel.defaultParagraphProperties);
            this.mergedParagraphFormatting =
                this.subDocument.documentModel.cache.mergedParagraphPropertiesCache.getItem(merger.getMergedProperties());
        }
        return this.mergedParagraphFormatting;
    };
    Paragraph.prototype.setParagraphMergedProperies = function (properties) {
        this.mergedParagraphFormatting = this.subDocument.documentModel.cache.mergedParagraphPropertiesCache.getItem(properties);
    };
    Paragraph.prototype.hasParagraphMergedProperies = function () {
        return !!this.mergedParagraphFormatting;
    };
    Paragraph.prototype.getTabs = function () {
        var result = new TabsInfo();
        result.defaultTabStop = this.subDocument.documentModel.defaultTabWidth;
        result.positions = [];
        if (this.paragraphStyle) {
            var styleTabs = this.paragraphStyle.tabs.tabsInfo;
            for (var i = 0; i < styleTabs.length; i++)
                if (!styleTabs[i].deleted) {
                    var tabPosition = styleTabs[i].clone();
                    var index = search_1.SearchUtils.binaryIndexOf(result.positions, function (t) { return t.position - styleTabs[i].position; });
                    if (index < 0)
                        result.positions.splice(~index, 0, tabPosition);
                    else
                        result.positions[index] = tabPosition;
                }
        }
        var paragraphTabs = this.tabs.tabsInfo;
        for (var i = 0; i < paragraphTabs.length; i++) {
            var index = search_1.SearchUtils.binaryIndexOf(result.positions, function (t) { return t.position - paragraphTabs[i].position; });
            if (index < 0) {
                index = ~index;
                if (!paragraphTabs[i].deleted)
                    result.positions.splice(index, 0, paragraphTabs[i].clone());
            }
            else {
                if (paragraphTabs[i].deleted)
                    result.positions.splice(index, 1);
                else
                    result.positions[index] = paragraphTabs[i].clone();
            }
        }
        return result;
    };
    Paragraph.prototype.clone = function (subDocument) {
        var result = new Paragraph(subDocument, subDocument.positionManager.registerPosition(this.startLogPosition.value), this.length, subDocument.documentModel.stylesManager.getParagraphStyleByName(this.paragraphStyle.styleName), this.maskedParagraphProperties);
        result.tabs = this.tabs.clone();
        result.numberingListIndex = this.numberingListIndex;
        result.listLevelIndex = this.listLevelIndex;
        return result;
    };
    return Paragraph;
}());
exports.Paragraph = Paragraph;
