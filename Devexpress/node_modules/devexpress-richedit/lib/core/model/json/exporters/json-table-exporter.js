"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var json_table_cell_enums_1 = require("../enums/table/json-table-cell-enums");
var json_table_enums_1 = require("../enums/table/json-table-enums");
var json_table_row_enums_1 = require("../enums/table/json-table-row-enums");
var json_table_properties_converter_1 = require("../importers/table/json-table-properties-converter");
var json_table_unit_converter_1 = require("../importers/table/json-table-unit-converter");
var JSONTableExporter = (function () {
    function JSONTableExporter() {
    }
    JSONTableExporter.exportTables = function (subDocument, jsonTables) {
        var tableStyles = subDocument.documentModel.tableStyles;
        for (var _i = 0, _a = subDocument.tables; _i < _a.length; _i++) {
            var table = _a[_i];
            var jsonTable = {};
            jsonTable[json_table_enums_1.JSONEnumTable.StyleIndex] = tableStyles.indexOf(table.style);
            jsonTable[json_table_enums_1.JSONEnumTable.NestedLevel] = table.nestedLevel;
            var jsonTableProperties = json_table_properties_converter_1.JSONTablePropertiesConverter.convertToJSON(table.properties);
            jsonTable[json_table_enums_1.JSONEnumTable.TableProperties] = jsonTableProperties;
            jsonTable[json_table_enums_1.JSONEnumTable.Index] = table.index;
            var jsonTableWidthUnitProperty = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(table.preferredWidth);
            jsonTable[json_table_enums_1.JSONEnumTable.PreferredWidth] = jsonTableWidthUnitProperty;
            jsonTable[json_table_enums_1.JSONEnumTable.LookTypes] = table.lookTypes;
            if (table.parentCell) {
                var parentCell = {};
                parentCell[json_table_enums_1.JSONEnumTableParentCellInfo.CellIndex] = table.parentCell.parentRow.cells.indexOf(table.parentCell);
                parentCell[json_table_enums_1.JSONEnumTableParentCellInfo.RowIndex] = table.rows.indexOf(table.parentCell.parentRow);
                parentCell[json_table_enums_1.JSONEnumTableParentCellInfo.TableIndex] = table.parentCell.parentRow.parentTable.index;
                jsonTable[json_table_enums_1.JSONEnumTable.ParentCell] = parentCell;
            }
            JSONTableExporter.exportTableRows(subDocument, table.rows, jsonTable[json_table_enums_1.JSONEnumTable.Rows] = []);
            jsonTables.push(jsonTable);
        }
    };
    JSONTableExporter.exportTableRows = function (subDocument, tableRows, jsonRows) {
        var tableRowPropertiesCache = subDocument.documentModel.cache.tableRowPropertiesCache;
        for (var _i = 0, tableRows_1 = tableRows; _i < tableRows_1.length; _i++) {
            var row = tableRows_1[_i];
            var jsonRow = {};
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.GridBefore] = row.gridBefore;
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.GridAfter] = row.gridAfter;
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.WidthAfter] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(row.widthAfter);
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.WidthBefore] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(row.widthBefore);
            var tableRowPropertiesIndex = tableRowPropertiesCache.indexOf(row.properties);
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.TableRowPropertiesIndex] = tableRowPropertiesIndex;
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.TablePropertiesException] =
                json_table_properties_converter_1.JSONTablePropertiesConverter.convertToJSON(row.tablePropertiesException);
            jsonRow[json_table_row_enums_1.JSONEnumTableRow.Height] = json_table_unit_converter_1.JSONTableHeightUnitConverter.convertToJSON(row.height);
            JSONTableExporter.exportCells(subDocument, row.cells, jsonRow[json_table_row_enums_1.JSONEnumTableRow.Cells] = []);
            jsonRows.push(jsonRow);
        }
    };
    JSONTableExporter.exportCells = function (subDocument, cells, jsonCells) {
        var cellStyles = subDocument.documentModel.tableCellStyles;
        var tableCellPropertiesCache = subDocument.documentModel.cache.tableCellPropertiesCache;
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            var jsonCell = {};
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.StyleIndex] = cellStyles.indexOf(cell.style);
            var tableCellPropertiesIndex = tableCellPropertiesCache.indexOf(cell.properties);
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.TableCellPropertiesIndex] = tableCellPropertiesIndex;
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.ColumnSpan] = cell.columnSpan;
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.PreferredWidth] = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertToJSON(cell.preferredWidth);
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.VerticalMerging] = cell.verticalMerging;
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.StartParagraphPosition] = cell.startParagraphPosition.value;
            jsonCell[json_table_cell_enums_1.JSONEnumTableCell.EndParagraphPosition] = cell.endParagrapPosition.value;
            jsonCells.push(jsonCell);
        }
    };
    return JSONTableExporter;
}());
exports.JSONTableExporter = JSONTableExporter;
