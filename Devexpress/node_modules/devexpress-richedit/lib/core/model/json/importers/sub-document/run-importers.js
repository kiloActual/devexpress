"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var properties_bundle_1 = require("../../../../rich-utils/properties-bundle");
var insert_picture_manipulator_params_1 = require("../../../manipulators/picture-manipulator/insert-picture-manipulator-params");
var anchored_picture_run_1 = require("../../../runs/anchored-picture-run");
var anchored_text_box_run_1 = require("../../../runs/anchored-text-box-run");
var inline_picture_run_1 = require("../../../runs/inline-picture-run");
var inline_text_box_run_1 = require("../../../runs/inline-text-box-run");
var text_run_1 = require("../../../runs/text-run");
var json_run_enums_1 = require("../../enums/json-run-enums");
var json_shape_converter_1 = require("../json-shape-converter");
var json_anchor_info_converter_1 = require("./json-anchor-info-converter");
var json_text_box_properties_converter_1 = require("./json-text-box-properties-converter");
var json_anchor_text_box_size_converter_1 = require("./sizes/json-anchor-text-box-size-converter");
var json_inline_picture_size_converter_1 = require("./sizes/json-inline-picture-size-converter");
var json_inline_text_box_size_converter_1 = require("./sizes/json-inline-text-box-size-converter");
var non_visual_drawing_object_info_1 = require("../../../manipulators/picture-manipulator/non-visual-drawing-object-info");
var json_non_visual_properties_1 = require("./json-non-visual-properties");
var BaseRunImporter = (function () {
    function BaseRunImporter() {
    }
    BaseRunImporter.prototype.getRun = function (paragraph, startOffset, jsonRun) {
        return this.makeRun(jsonRun, startOffset, paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(this.maskedCharacterPropertiesCache.getItemByJsonKey(jsonRun[json_run_enums_1.JSONRunBaseProperty.MaskedCharacterPropertiesCacheIndex]), this.charStyles[jsonRun[json_run_enums_1.JSONRunBaseProperty.CharacterStyleIndex]]));
    };
    BaseRunImporter.prototype.init = function (maskedCharacterPropertiesCache, charStyles, imageCache, imageCorrespondence) {
        this.imageCorrespondence = imageCorrespondence;
        this.charStyles = charStyles;
        this.maskedCharacterPropertiesCache = maskedCharacterPropertiesCache;
        this.imageCache = imageCache;
    };
    return BaseRunImporter;
}());
exports.BaseRunImporter = BaseRunImporter;
var SimpleRunImporter = (function (_super) {
    tslib_1.__extends(SimpleRunImporter, _super);
    function SimpleRunImporter(runConstructor) {
        var _this = _super.call(this) || this;
        _this.runConstructor = runConstructor;
        return _this;
    }
    SimpleRunImporter.prototype.makeRun = function (_jsonRun, startOffset, paragraph, charPropsBundle) {
        return new this.runConstructor(startOffset, paragraph, charPropsBundle);
    };
    return SimpleRunImporter;
}(BaseRunImporter));
exports.SimpleRunImporter = SimpleRunImporter;
var TextRunImporter = (function (_super) {
    tslib_1.__extends(TextRunImporter, _super);
    function TextRunImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextRunImporter.prototype.makeRun = function (jsonRun, startOffset, paragraph, charPropsBundle) {
        return new text_run_1.TextRun(startOffset, jsonRun[json_run_enums_1.JSONRunBaseProperty.Length], paragraph, charPropsBundle);
    };
    return TextRunImporter;
}(BaseRunImporter));
exports.TextRunImporter = TextRunImporter;
var AnchoredPictureRunImporter = (function (_super) {
    tslib_1.__extends(AnchoredPictureRunImporter, _super);
    function AnchoredPictureRunImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnchoredPictureRunImporter.prototype.makeRun = function (jsonRun, startOffset, paragraph, charPropsBundle) {
        var initId = jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.PictureId];
        var realId = this.imageCorrespondence ? this.imageCorrespondence[initId] : initId;
        var cacheInfo = this.imageCache.getPictureData(realId);
        var run = new anchored_picture_run_1.AnchoredPictureRun(startOffset, paragraph, charPropsBundle, new insert_picture_manipulator_params_1.AnchorPictureInfo(json_inline_picture_size_converter_1.JSONInlinePictureSizeConverterConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.Size], cacheInfo), json_shape_converter_1.JSONShapeConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.Shape]), json_anchor_info_converter_1.JSONAnchorInfoConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.AnchorInfo]), json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.DrawingObjectProperties]), new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo()), -1);
        return run;
    };
    return AnchoredPictureRunImporter;
}(BaseRunImporter));
exports.AnchoredPictureRunImporter = AnchoredPictureRunImporter;
var AnchoredTextBoxRunImporter = (function (_super) {
    tslib_1.__extends(AnchoredTextBoxRunImporter, _super);
    function AnchoredTextBoxRunImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AnchoredTextBoxRunImporter.prototype.makeRun = function (jsonRun, startOffset, paragraph, charPropsBundle) {
        return new anchored_text_box_run_1.AnchoredTextBoxRun(startOffset, paragraph, charPropsBundle, json_shape_converter_1.JSONShapeConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.Shape]), jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.SubDocId], json_anchor_text_box_size_converter_1.JSONAnchorTextBoxSizeConverterConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.Size]), json_anchor_info_converter_1.JSONAnchorInfoConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.AnchorInfo]), -1, json_text_box_properties_converter_1.JSONTextBoxPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.TextBoxProperties]), json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONAnchoredTextBoxRunProperty.DrawingObjectProperties]));
    };
    return AnchoredTextBoxRunImporter;
}(BaseRunImporter));
exports.AnchoredTextBoxRunImporter = AnchoredTextBoxRunImporter;
var InlinePictureRunImporter = (function (_super) {
    tslib_1.__extends(InlinePictureRunImporter, _super);
    function InlinePictureRunImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InlinePictureRunImporter.prototype.makeRun = function (jsonRun, startOffset, paragraph, charPropsBundle) {
        var initId = jsonRun[json_run_enums_1.JSONAnchoredPictureRunProperty.PictureId];
        var realId = this.imageCorrespondence ? this.imageCorrespondence[initId] : initId;
        var cacheInfo = this.imageCache.getPictureData(realId);
        var run = new inline_picture_run_1.InlinePictureRun(startOffset, paragraph, charPropsBundle, new insert_picture_manipulator_params_1.InlinePictureInfo(json_inline_picture_size_converter_1.JSONInlinePictureSizeConverterConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlinePictureRunProperty.Size], cacheInfo), json_shape_converter_1.JSONShapeConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlinePictureRunProperty.Shape]), -1, json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlinePictureRunProperty.DrawingObjectProperties]), new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo()));
        return run;
    };
    return InlinePictureRunImporter;
}(BaseRunImporter));
exports.InlinePictureRunImporter = InlinePictureRunImporter;
var InlineTextBoxRunImporter = (function (_super) {
    tslib_1.__extends(InlineTextBoxRunImporter, _super);
    function InlineTextBoxRunImporter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InlineTextBoxRunImporter.prototype.makeRun = function (jsonRun, startOffset, paragraph, charPropsBundle) {
        return new inline_text_box_run_1.InlineTextBoxRun(startOffset, paragraph, charPropsBundle, json_shape_converter_1.JSONShapeConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlineTextBoxRunProperty.Shape]), jsonRun[json_run_enums_1.JSONInlineTextBoxRunProperty.SubDocId], json_inline_text_box_size_converter_1.JSONInlineTextBoxSizeConverterConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlineTextBoxRunProperty.Size]), json_text_box_properties_converter_1.JSONTextBoxPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlineTextBoxRunProperty.TextBoxProperties]), json_non_visual_properties_1.JSONNonVisualPropertiesConverter.convertFromJSON(jsonRun[json_run_enums_1.JSONInlineTextBoxRunProperty.DrawingObjectProperties]));
    };
    return InlineTextBoxRunImporter;
}(BaseRunImporter));
exports.InlineTextBoxRunImporter = InlineTextBoxRunImporter;
