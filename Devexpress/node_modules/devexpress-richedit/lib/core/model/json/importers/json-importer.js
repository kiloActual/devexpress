"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var size_1 = require("@devexpress/utils/lib/geometry/size");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var section_1 = require("../../section/section");
var json_control_enums_1 = require("../enums/json-control-enums");
var json_document_enums_1 = require("../enums/json-document-enums");
var json_general_enums_1 = require("../enums/json-general-enums");
var json_section_enums_1 = require("../enums/json-section-enums");
var json_sub_document_enums_1 = require("../enums/json-sub-document-enums");
var json_section_properties_converter_1 = require("./section/json-section-properties-converter");
var json_table_cell_properties_converter_1 = require("./table/json-table-cell-properties-converter");
var json_table_properties_converter_1 = require("./table/json-table-properties-converter");
var json_table_row_properties_converter_1 = require("./table/json-table-row-properties-converter");
var JSONImporter = (function () {
    function JSONImporter() {
    }
    JSONImporter.importDocumentProperties = function (documentModel, content) {
        documentModel.defaultTabWidth = content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultTabWidth];
        documentModel.differentOddAndEvenPages = !!content[json_document_enums_1.JSONDocumentPropertiesProperty.DifferentOddAndEvenPages];
        documentModel.displayBackgroundShape = !!content[json_document_enums_1.JSONDocumentPropertiesProperty.DisplayBackgroundShape];
        documentModel.pageBackColor = content[json_document_enums_1.JSONDocumentPropertiesProperty.PageBackColor];
        documentModel.setDefaultCharacterProperties(content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultCharacterProperties]);
        documentModel.setDefaultParagraphProperties(content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultParagraphProperties]);
        documentModel.defaultTableProperties = json_table_properties_converter_1.JSONTablePropertiesConverter.convertFromJSON(content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultTableProperties], documentModel.cache.colorModelInfoCache, documentModel.cache.shadingInfoCache);
        documentModel.defaultTableRowProperties = documentModel.cache.tableRowPropertiesCache.getItem(json_table_row_properties_converter_1.JSONTableRowPropertiesConverter.convertFromJSON(content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultTableRowProperties]));
        documentModel.defaultTableCellProperties = documentModel.cache.tableCellPropertiesCache.getItem(json_table_cell_properties_converter_1.JSONTableCellPropertiesConverter.convertFromJSON(content[json_document_enums_1.JSONDocumentPropertiesProperty.DefaultTableCellProperties], documentModel.cache.colorModelInfoCache, documentModel.cache.shadingInfoCache));
        var protectionProp = content[json_document_enums_1.JSONDocumentPropertiesProperty.ProtectionProperties];
        var enforceProtection = !!(protectionProp[json_document_enums_1.JSONDocumentProtectionPropertiesProperty.EnforceProtection]);
        var protectionType = protectionProp[json_document_enums_1.JSONDocumentProtectionPropertiesProperty.ProtectionType];
        documentModel.aspxIsDocumentProtectionEnabled = enforceProtection && (protectionType === json_document_enums_1.DocumentProtectionType.ReadOnly || protectionType === json_document_enums_1.DocumentProtectionType.AllowComments);
    };
    JSONImporter.importCompatibilitySettings = function (documentModel, json) {
        documentModel.compatibilitySettings.dontJustifyLinesEndingInSoftLineBreak = !!json[json_document_enums_1.JSONCompatibilitySettingsProperty.DontJustifyLinesEndingInSoftLineBreak];
    };
    JSONImporter.importModelHeaderFooter = function (modelContainer, jsonContent, constr) {
        for (var _i = 0, jsonContent_1 = jsonContent; _i < jsonContent_1.length; _i++) {
            var content = jsonContent_1[_i];
            var headerFooter = new constr(content[json_sub_document_enums_1.JSONHeaderFooterInfoProperty.SubDocumentId]);
            headerFooter.headerFooterType = content[json_sub_document_enums_1.JSONHeaderFooterInfoProperty.Type];
            modelContainer.push(headerFooter);
        }
    };
    JSONImporter.importSections = function (documentModel, jsonSections) {
        for (var _i = 0, jsonSections_1 = jsonSections; _i < jsonSections_1.length; _i++) {
            var jsonSection_1 = jsonSections_1[_i];
            documentModel.sections.push(new section_1.Section(documentModel, documentModel.mainSubDocument.positionManager.registerPosition(jsonSection_1[json_section_enums_1.JSONSection.StartPos]), jsonSection_1[json_section_enums_1.JSONSection.Length], json_section_properties_converter_1.JSONSectionPropertiesConverter.convertFromJSON(jsonSection_1[json_section_enums_1.JSONSection.Properties])));
        }
        for (var i = 0, jsonSection; jsonSection = jsonSections[i]; i++) {
            var section = documentModel.sections[i];
            this.importHeaderFooter(section.headers, jsonSection[json_section_enums_1.JSONSection.Headers]);
            this.importHeaderFooter(section.footers, jsonSection[json_section_enums_1.JSONSection.Footers]);
        }
    };
    JSONImporter.importHeaderFooter = function (container, jsonSection) {
        number_1.NumberMapUtils.forEach(jsonSection, function (section, type) { return container.setObjectIndex(type, section); });
    };
    JSONImporter.importOptions = function (controlOptions, json) {
        if (!json)
            return;
        if (json[json_control_enums_1.JSONControlOptionsProperty.Copy] !== undefined)
            controlOptions.copy = json[json_control_enums_1.JSONControlOptionsProperty.Copy];
        if (json[json_control_enums_1.JSONControlOptionsProperty.CreateNew] !== undefined)
            controlOptions.createNew = json[json_control_enums_1.JSONControlOptionsProperty.CreateNew];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Cut] !== undefined)
            controlOptions.cut = json[json_control_enums_1.JSONControlOptionsProperty.Cut];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Drag] !== undefined)
            controlOptions.drag = json[json_control_enums_1.JSONControlOptionsProperty.Drag];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Drop] !== undefined)
            controlOptions.drop = json[json_control_enums_1.JSONControlOptionsProperty.Drop];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Open] !== undefined)
            controlOptions.open = json[json_control_enums_1.JSONControlOptionsProperty.Open];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Paste] !== undefined)
            controlOptions.paste = json[json_control_enums_1.JSONControlOptionsProperty.Paste];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Printing] !== undefined)
            controlOptions.printing = json[json_control_enums_1.JSONControlOptionsProperty.Printing];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Save] !== undefined)
            controlOptions.save = json[json_control_enums_1.JSONControlOptionsProperty.Save];
        if (json[json_control_enums_1.JSONControlOptionsProperty.SaveAs] !== undefined)
            controlOptions.saveAs = json[json_control_enums_1.JSONControlOptionsProperty.SaveAs];
        if (json[json_control_enums_1.JSONControlOptionsProperty.FullScreen] !== undefined)
            controlOptions.fullScreen = json[json_control_enums_1.JSONControlOptionsProperty.FullScreen];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Bookmarks] !== undefined)
            controlOptions.bookmarks = json[json_control_enums_1.JSONControlOptionsProperty.Bookmarks];
        if (json[json_control_enums_1.JSONControlOptionsProperty.CharacterFormatting] !== undefined)
            controlOptions.characterFormatting = json[json_control_enums_1.JSONControlOptionsProperty.CharacterFormatting];
        if (json[json_control_enums_1.JSONControlOptionsProperty.CharacterStyle] !== undefined)
            controlOptions.characterStyle = json[json_control_enums_1.JSONControlOptionsProperty.CharacterStyle];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Fields] !== undefined)
            controlOptions.fields = json[json_control_enums_1.JSONControlOptionsProperty.Fields];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Hyperlinks] !== undefined)
            controlOptions.hyperlinks = json[json_control_enums_1.JSONControlOptionsProperty.Hyperlinks];
        if (json[json_control_enums_1.JSONControlOptionsProperty.InlinePictures] !== undefined)
            controlOptions.inlinePictures = json[json_control_enums_1.JSONControlOptionsProperty.InlinePictures];
        if (json[json_control_enums_1.JSONControlOptionsProperty.ParagraphFormatting] !== undefined)
            controlOptions.paragraphFormatting = json[json_control_enums_1.JSONControlOptionsProperty.ParagraphFormatting];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Paragraphs] !== undefined)
            controlOptions.paragraphs = json[json_control_enums_1.JSONControlOptionsProperty.Paragraphs];
        if (json[json_control_enums_1.JSONControlOptionsProperty.ParagraphStyle] !== undefined)
            controlOptions.paragraphStyle = json[json_control_enums_1.JSONControlOptionsProperty.ParagraphStyle];
        if (json[json_control_enums_1.JSONControlOptionsProperty.ParagraphTabs] !== undefined)
            controlOptions.paragraphTabs = json[json_control_enums_1.JSONControlOptionsProperty.ParagraphTabs];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Sections] !== undefined)
            controlOptions.sections = json[json_control_enums_1.JSONControlOptionsProperty.Sections];
        if (json[json_control_enums_1.JSONControlOptionsProperty.TabSymbol] !== undefined)
            controlOptions.tabSymbol = json[json_control_enums_1.JSONControlOptionsProperty.TabSymbol];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Undo] !== undefined)
            controlOptions.undo = json[json_control_enums_1.JSONControlOptionsProperty.Undo];
        if (json[json_control_enums_1.JSONControlOptionsProperty.NumberingBulleted] !== undefined)
            controlOptions.numberingBulleted = json[json_control_enums_1.JSONControlOptionsProperty.NumberingBulleted];
        if (json[json_control_enums_1.JSONControlOptionsProperty.NumberingMultiLevel] !== undefined)
            controlOptions.numberingMultiLevel = json[json_control_enums_1.JSONControlOptionsProperty.NumberingMultiLevel];
        if (json[json_control_enums_1.JSONControlOptionsProperty.NumberingSimple] !== undefined)
            controlOptions.numberingSimple = json[json_control_enums_1.JSONControlOptionsProperty.NumberingSimple];
        if (json[json_control_enums_1.JSONControlOptionsProperty.HeadersFooters] !== undefined)
            controlOptions.headersFooters = json[json_control_enums_1.JSONControlOptionsProperty.HeadersFooters];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Tables] !== undefined)
            controlOptions.tables = json[json_control_enums_1.JSONControlOptionsProperty.Tables];
        if (json[json_control_enums_1.JSONControlOptionsProperty.TableStyle] !== undefined)
            controlOptions.tableStyle = json[json_control_enums_1.JSONControlOptionsProperty.TableStyle];
        if (json[json_control_enums_1.JSONControlOptionsProperty.TabMarker] !== undefined)
            controlOptions.tabMarker = json[json_control_enums_1.JSONControlOptionsProperty.TabMarker];
        if (json[json_control_enums_1.JSONControlOptionsProperty.PageBreakInsertMode] !== undefined)
            controlOptions.pageBreakInsertMode = json[json_control_enums_1.JSONControlOptionsProperty.PageBreakInsertMode];
        if (json[json_control_enums_1.JSONControlOptionsProperty.AcceptsTab] !== undefined)
            controlOptions.acceptsTab = !!json[json_control_enums_1.JSONControlOptionsProperty.AcceptsTab];
        if (json[json_control_enums_1.JSONControlOptionsProperty.Download] !== undefined)
            controlOptions.download = json[json_control_enums_1.JSONControlOptionsProperty.Download];
        controlOptions.raiseClientEventsOnModificationsViaAPI = !!json[json_control_enums_1.JSONControlOptionsProperty.RaiseClientEventsOnModificationsViaAPI];
    };
    return JSONImporter;
}());
exports.JSONImporter = JSONImporter;
var JSONFixedIntervalConverter = (function () {
    function JSONFixedIntervalConverter() {
    }
    JSONFixedIntervalConverter.convertFromJSON = function (obj) {
        return new fixed_1.FixedInterval(obj[json_general_enums_1.JSONFixedInterval.Start], obj[json_general_enums_1.JSONFixedInterval.Length]);
    };
    JSONFixedIntervalConverter.convertToJSON = function (source) {
        var result = {};
        result[json_general_enums_1.JSONFixedInterval.Start] = source.start;
        result[json_general_enums_1.JSONFixedInterval.Length] = source.length;
        return result;
    };
    JSONFixedIntervalConverter.convertListToJSON = function (intervals) {
        return list_1.ListUtils.accumulate(intervals, [], function (result, interval) {
            result.push(JSONFixedIntervalConverter.convertToJSON(interval));
            return result;
        });
    };
    JSONFixedIntervalConverter.convertListFromJSON = function (jsonIntervals) {
        return list_1.ListUtils.accumulate(jsonIntervals, [], function (result, jsonInterval) {
            result.push(JSONFixedIntervalConverter.convertFromJSON(jsonInterval));
            return result;
        });
    };
    return JSONFixedIntervalConverter;
}());
exports.JSONFixedIntervalConverter = JSONFixedIntervalConverter;
var SizeExporter = (function () {
    function SizeExporter() {
    }
    SizeExporter.convertFromJSON = function (obj) {
        return new size_1.Size(obj[json_general_enums_1.JSONSize.Width], obj[json_general_enums_1.JSONSize.Height]);
    };
    SizeExporter.convertToJSON = function (obj) {
        var jsonSize = {};
        jsonSize[json_general_enums_1.JSONSize.Width] = obj.width;
        jsonSize[json_general_enums_1.JSONSize.Height] = obj.height;
        return jsonSize;
    };
    SizeExporter.convertToJSONSeparately = function (width, height) {
        var jsonSize = {};
        jsonSize[json_general_enums_1.JSONSize.Width] = width;
        jsonSize[json_general_enums_1.JSONSize.Height] = height;
        return jsonSize;
    };
    return SizeExporter;
}());
exports.SizeExporter = SizeExporter;
