"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var table_conditional_style_1 = require("../../../tables/styles/table-conditional-style");
var json_table_structures_enums_1 = require("../../enums/table/json-table-structures-enums");
var json_tab_converter_1 = require("../json-tab-converter");
var json_table_properties_converter_1 = require("./json-table-properties-converter");
var JSONTableConditionalStyleConverter = (function () {
    function JSONTableConditionalStyleConverter() {
    }
    JSONTableConditionalStyleConverter.convertFromJSON = function (obj, cache) {
        var tableProperties = json_table_properties_converter_1.JSONTablePropertiesConverter.convertFromJSON(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableProperties], cache.colorModelInfoCache, cache.shadingInfoCache);
        var tableRowProperties = cache.tableRowPropertiesCache.getItemByJsonKey(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableRowPropertiesIndex]);
        var tableCellProperties = cache.tableCellPropertiesCache.getItemByJsonKey(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableCellPropertiesIndex]);
        var maskedParagraphProperties = cache.maskedParagraphPropertiesCache.getItemByJsonKey(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.MaskedParagraphPropertiesCacheIndex]);
        var maskedCharacterProperties = cache.maskedCharacterPropertiesCache.getItemByJsonKey(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.MaskedCharacterPropertiesCacheIndex]);
        return new table_conditional_style_1.TableConditionalStyle(tableProperties, tableRowProperties, tableCellProperties, maskedParagraphProperties, maskedCharacterProperties, json_tab_converter_1.JSONTabConverter.convertFromJSONToTabProperties(obj[json_table_structures_enums_1.JSONTableConditionalStyleProperty.Tabs]));
    };
    JSONTableConditionalStyleConverter.convertStylesFromJSON = function (jsonCondStyles, cache) {
        return number_1.NumberMapUtils.map(jsonCondStyles, function (obj) { return JSONTableConditionalStyleConverter.convertFromJSON(obj, cache); });
    };
    JSONTableConditionalStyleConverter.convertToJSON = function (documentModel, tableConditionalStyle) {
        var maskedParagraphPropertiesCache = documentModel.cache.maskedParagraphPropertiesCache;
        var maskedCharacterPropertiesCache = documentModel.cache.maskedCharacterPropertiesCache;
        var tableRowPropertiesCache = documentModel.cache.tableRowPropertiesCache;
        var tableCellPropertiesCache = documentModel.cache.tableCellPropertiesCache;
        var jsonTableConditionalStyle = {};
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableProperties] =
            json_table_properties_converter_1.JSONTablePropertiesConverter.convertToJSON(tableConditionalStyle.tableProperties);
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableRowPropertiesIndex] =
            tableRowPropertiesCache.indexOf(tableConditionalStyle.tableRowProperties);
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.TableCellPropertiesIndex] =
            tableCellPropertiesCache.indexOf(tableConditionalStyle.tableCellProperties);
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.MaskedParagraphPropertiesCacheIndex] =
            maskedParagraphPropertiesCache.indexOf(tableConditionalStyle.maskedParagraphProperties);
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.MaskedCharacterPropertiesCacheIndex] =
            maskedCharacterPropertiesCache.indexOf(tableConditionalStyle.maskedCharacterProperties);
        jsonTableConditionalStyle[json_table_structures_enums_1.JSONTableConditionalStyleProperty.Tabs] =
            json_tab_converter_1.JSONTabConverter.convertFromTabPropertiesToJSON(tableConditionalStyle.tabs);
        return jsonTableConditionalStyle;
    };
    JSONTableConditionalStyleConverter.convertStylesToJSON = function (documentModel, tableConditionalStyles) {
        return number_1.NumberMapUtils.map(tableConditionalStyles, function (style) { return JSONTableConditionalStyleConverter.convertToJSON(documentModel, style); });
    };
    return JSONTableConditionalStyleConverter;
}());
exports.JSONTableConditionalStyleConverter = JSONTableConditionalStyleConverter;
