"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var images_1 = require("../../caches/images");
var json_floating_enums_1 = require("../enums/json-floating-enums");
var json_importer_1 = require("./json-importer");
var JSONCacheImageInfoConverter = (function () {
    function JSONCacheImageInfoConverter() {
    }
    JSONCacheImageInfoConverter.convertFromJSON = function (obj) {
        var actualId = obj[json_floating_enums_1.JSONImageCacheInfo.ActualId];
        return new images_1.CacheImageInfo(obj[json_floating_enums_1.JSONImageCacheInfo.Base64], actualId, obj[json_floating_enums_1.JSONImageCacheInfo.TmpId], obj[json_floating_enums_1.JSONImageCacheInfo.Url], undefined, undefined, json_importer_1.SizeExporter.convertFromJSON(obj[json_floating_enums_1.JSONImageCacheInfo.Size]), actualId !== undefined && actualId !== null);
    };
    JSONCacheImageInfoConverter.convertToJSON = function (source, sendBase64) {
        var _a;
        return _a = {},
            _a[json_floating_enums_1.JSONImageCacheInfo.Base64] = sendBase64 ? source.base64 : undefined,
            _a[json_floating_enums_1.JSONImageCacheInfo.ActualId] = source.actualId,
            _a[json_floating_enums_1.JSONImageCacheInfo.TmpId] = source.tmpId,
            _a[json_floating_enums_1.JSONImageCacheInfo.Url] = source.imageUrl,
            _a[json_floating_enums_1.JSONImageCacheInfo.Size] = json_importer_1.SizeExporter.convertToJSON(source.size),
            _a;
    };
    JSONCacheImageInfoConverter.translateImageCorrespondence = function (obj, imageCorrespondence) {
        return list_1.ListUtils.map(obj, function (rawJsonCacheInfo) {
            var info = JSONCacheImageInfoConverter.convertFromJSON(rawJsonCacheInfo);
            info.actualId = imageCorrespondence[info.actualId];
            return JSONCacheImageInfoConverter.convertToJSON(info, true);
        });
    };
    JSONCacheImageInfoConverter.importImageCache = function (imageCache, imageCorrespondence, obj) {
        if (obj) {
            var convertedImages = imageCorrespondence ?
                JSONCacheImageInfoConverter.translateImageCorrespondence(obj, imageCorrespondence) :
                obj;
            for (var _i = 0, convertedImages_1 = convertedImages; _i < convertedImages_1.length; _i++) {
                var jsonImage = convertedImages_1[_i];
                imageCache.registerPictureData(JSONCacheImageInfoConverter.convertFromJSON(jsonImage));
            }
        }
    };
    return JSONCacheImageInfoConverter;
}());
exports.JSONCacheImageInfoConverter = JSONCacheImageInfoConverter;
