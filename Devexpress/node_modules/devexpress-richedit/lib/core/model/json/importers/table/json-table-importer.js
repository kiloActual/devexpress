"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_1 = require("../../../tables/main-structures/table");
var table_cell_1 = require("../../../tables/main-structures/table-cell");
var table_row_1 = require("../../../tables/main-structures/table-row");
var table_utils_1 = require("../../../tables/table-utils");
var json_table_cell_enums_1 = require("../../enums/table/json-table-cell-enums");
var json_table_enums_1 = require("../../enums/table/json-table-enums");
var json_table_row_enums_1 = require("../../enums/table/json-table-row-enums");
var json_table_properties_converter_1 = require("./json-table-properties-converter");
var json_table_unit_converter_1 = require("./json-table-unit-converter");
var JSONTableImporter = (function () {
    function JSONTableImporter() {
    }
    JSONTableImporter.importTables = function (subDocument, jsonTables) {
        if (!jsonTables)
            return;
        var tablesMap = {};
        var subDocumentTables = subDocument.tables;
        for (var _i = 0, jsonTables_1 = jsonTables; _i < jsonTables_1.length; _i++) {
            var jsonTable = jsonTables_1[_i];
            var newTable = new table_1.Table(json_table_properties_converter_1.JSONTablePropertiesConverter.convertFromJSON(jsonTable[json_table_enums_1.JSONEnumTable.TableProperties], subDocument.documentModel.cache.colorModelInfoCache, subDocument.documentModel.cache.shadingInfoCache), subDocument.documentModel.tableStyles[jsonTable[json_table_enums_1.JSONEnumTable.StyleIndex]]);
            subDocumentTables.push(newTable);
            newTable.index = jsonTable[json_table_enums_1.JSONEnumTable.Index];
            tablesMap[newTable.index] = newTable;
            newTable.nestedLevel = jsonTable[json_table_enums_1.JSONEnumTable.NestedLevel];
            newTable.preferredWidth = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertFromJSON(jsonTable[json_table_enums_1.JSONEnumTable.PreferredWidth]);
            newTable.lookTypes = jsonTable[json_table_enums_1.JSONEnumTable.LookTypes];
            var parentCellContent = jsonTable[json_table_enums_1.JSONEnumTable.ParentCell];
            newTable.parentCell = parentCellContent ? JSONTableImporter.getParentCell(parentCellContent, tablesMap) : null;
            for (var _a = 0, _b = jsonTable[json_table_enums_1.JSONEnumTable.Rows]; _a < _b.length; _a++) {
                var jsonRow = _b[_a];
                newTable.rows.push(JSONTableImporter.importTableRow(jsonRow, subDocument, newTable));
            }
            table_utils_1.TableConditionalFormattingCalculator.updateTableWithoutHistory(subDocument.documentModel, newTable);
        }
        table_1.Table.sort(subDocumentTables);
        table_1.Table.fillTableByLevels(subDocument);
    };
    JSONTableImporter.importTableRow = function (jsonRow, subDocument, parentTable) {
        var rowProps = subDocument.documentModel.cache.tableRowPropertiesCache.getItemByJsonKey(jsonRow[json_table_row_enums_1.JSONEnumTableRow.TableRowPropertiesIndex]);
        var newTableRow = new table_row_1.TableRow(parentTable, rowProps);
        newTableRow.gridBefore = jsonRow[json_table_row_enums_1.JSONEnumTableRow.GridBefore];
        newTableRow.gridAfter = jsonRow[json_table_row_enums_1.JSONEnumTableRow.GridAfter];
        newTableRow.widthBefore = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertFromJSON(jsonRow[json_table_row_enums_1.JSONEnumTableRow.WidthBefore]);
        newTableRow.widthAfter = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertFromJSON(jsonRow[json_table_row_enums_1.JSONEnumTableRow.WidthAfter]);
        newTableRow.height = json_table_unit_converter_1.JSONTableHeightUnitConverter.convertFromJSON(jsonRow[json_table_row_enums_1.JSONEnumTableRow.Height]);
        newTableRow.tablePropertiesException = json_table_properties_converter_1.JSONTablePropertiesConverter.convertFromJSON(jsonRow[json_table_row_enums_1.JSONEnumTableRow.TablePropertiesException], subDocument.documentModel.cache.colorModelInfoCache, subDocument.documentModel.cache.shadingInfoCache);
        for (var _i = 0, _a = jsonRow[json_table_row_enums_1.JSONEnumTableRow.Cells]; _i < _a.length; _i++) {
            var rawCell = _a[_i];
            newTableRow.cells.push(JSONTableImporter.importTableCell(rawCell, subDocument, newTableRow));
        }
        return newTableRow;
    };
    JSONTableImporter.importTableCell = function (jsonCell, subDocument, parentRow) {
        var cellProps = subDocument.documentModel.cache.tableCellPropertiesCache.getItemByJsonKey(jsonCell[json_table_cell_enums_1.JSONEnumTableCell.TableCellPropertiesIndex]);
        var newTableCell = new table_cell_1.TableCell(parentRow, cellProps);
        newTableCell.style = null;
        newTableCell.columnSpan = jsonCell[json_table_cell_enums_1.JSONEnumTableCell.ColumnSpan];
        newTableCell.preferredWidth = json_table_unit_converter_1.JSONTableWidthUnitConverter.convertFromJSON(jsonCell[json_table_cell_enums_1.JSONEnumTableCell.PreferredWidth]);
        newTableCell.verticalMerging = jsonCell[json_table_cell_enums_1.JSONEnumTableCell.VerticalMerging];
        newTableCell.startParagraphPosition = subDocument.positionManager.registerPosition(jsonCell[json_table_cell_enums_1.JSONEnumTableCell.StartParagraphPosition]);
        newTableCell.endParagrapPosition = subDocument.positionManager.registerPosition(jsonCell[json_table_cell_enums_1.JSONEnumTableCell.EndParagraphPosition]);
        return newTableCell;
    };
    JSONTableImporter.getParentCell = function (content, tablesMap) {
        var tableIndex = content[json_table_enums_1.JSONEnumTableParentCellInfo.TableIndex];
        var table = tablesMap[tableIndex];
        return table.rows[content[json_table_enums_1.JSONEnumTableParentCellInfo.RowIndex]].cells[content[json_table_enums_1.JSONEnumTableParentCellInfo.CellIndex]];
    };
    return JSONTableImporter;
}());
exports.JSONTableImporter = JSONTableImporter;
