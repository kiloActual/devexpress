"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = require("@devexpress/utils/lib/utils/common");
var font_info_1 = require("../../fonts/font-info");
var json_character_enums_1 = require("../enums/json-character-enums");
var JSONFontInfoConverter = (function () {
    function JSONFontInfoConverter() {
    }
    JSONFontInfoConverter.convertFromJSON = function (obj, result) {
        if (result === void 0) { result = new font_info_1.FontInfo(); }
        result.name = obj[json_character_enums_1.JSONFontInfoProperty.Name];
        result.scriptMultiplier = obj[json_character_enums_1.JSONFontInfoProperty.ScriptMultiplier];
        result.cssString = obj[json_character_enums_1.JSONFontInfoProperty.CssString];
        result.canBeSet = !!obj[json_character_enums_1.JSONFontInfoProperty.CanBeSet];
        result.subScriptOffset = obj[json_character_enums_1.JSONFontInfoProperty.SubScriptOffset];
        result.isLoad = true;
        result.reset();
        return result;
    };
    JSONFontInfoConverter.convertToJSON = function (source) {
        var result = {};
        result[json_character_enums_1.JSONFontInfoProperty.Name] = source.name;
        result[json_character_enums_1.JSONFontInfoProperty.ScriptMultiplier] = source.scriptMultiplier;
        result[json_character_enums_1.JSONFontInfoProperty.CssString] = source.cssString;
        result[json_character_enums_1.JSONFontInfoProperty.CanBeSet] = common_1.boolToInt(source.canBeSet);
        result[json_character_enums_1.JSONFontInfoProperty.SubScriptOffset] = source.subScriptOffset;
        return result;
    };
    return JSONFontInfoConverter;
}());
exports.JSONFontInfoConverter = JSONFontInfoConverter;
