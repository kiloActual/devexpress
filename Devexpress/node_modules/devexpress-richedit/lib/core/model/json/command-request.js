"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var encode_1 = require("@devexpress/utils/lib/utils/encode");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var command_type_1 = require("./command-type");
var json_character_enums_1 = require("./enums/json-character-enums");
var json_top_level_enums_1 = require("./enums/json-top-level-enums");
var ServerCommandRequest = (function () {
    function ServerCommandRequest(requestType, subDocumentId, commandParams) {
        this.type = requestType;
        this.subDocumentId = subDocumentId;
        this.params = commandParams;
    }
    ServerCommandRequest.prototype.getJsonObject = function (withPostData) {
        var request = {};
        request[json_top_level_enums_1.JSONCommandParametersProperty.CommandType] = this.type;
        request[json_top_level_enums_1.JSONCommandParametersProperty.IncId] = this.id;
        request[json_top_level_enums_1.JSONCommandParametersProperty.ServerParams] = this.prepareParams(this.params, withPostData);
        if (this.subDocumentId >= 0)
            request[json_top_level_enums_1.JSONCommandParametersProperty.SubDocumentId] = this.subDocumentId;
        return request;
    };
    ServerCommandRequest.prototype.prepareParams = function (params, withPostData) {
        var _this = this;
        if (params === null || params === undefined)
            return params;
        var type = typeof params;
        if (type == "number" || type == "boolean")
            return params;
        if (type == "string")
            return withPostData ? encode_1.EncodeUtils.prepareTextForCallBackRequest(params) : encode_1.EncodeUtils.prepareTextForRequest(params);
        if (Array.isArray(params))
            return list_1.ListUtils.map(params, function (v) { return _this.prepareParams(v, withPostData); });
        if (params.toJSON)
            return params.toJSON();
        return number_1.NumberMapUtils.map(params, function (value) { return _this.prepareParams(value, withPostData); });
    };
    ServerCommandRequest.isEditRequest = function (request) {
        return ServerCommandRequest.isEditCommandType(request.type);
    };
    ServerCommandRequest.isEditCommandType = function (type) {
        return type < 0;
    };
    ServerCommandRequest.isLoadCommandType = function (type) {
        return type > 0;
    };
    ServerCommandRequest.isUIBlockingCommandType = function (type) {
        return type === command_type_1.CommandType.StartCommand || type === command_type_1.CommandType.OpenDocument || type === command_type_1.CommandType.NewDocument;
    };
    ServerCommandRequest.prototype.isOpenDocumentRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isSaveDocumentRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isSpellCheckerRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isLoadNextChunksRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isGetSetRtfRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isForcePushRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.isPdfExportRequest = function () {
        return false;
    };
    ServerCommandRequest.prototype.extendTextRequest = function (_subDocumentId, _position, _textLength, _characterPropertiesJSON, _characterStyleName, _type, _text) {
        return false;
    };
    return ServerCommandRequest;
}());
exports.ServerCommandRequest = ServerCommandRequest;
var EditCommandRequest = (function (_super) {
    tslib_1.__extends(EditCommandRequest, _super);
    function EditCommandRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditCommandRequest.prototype.getJsonObject = function (withPostData) {
        var request = _super.prototype.getJsonObject.call(this, withPostData);
        request[json_top_level_enums_1.JSONCommandParametersProperty.EditIncId] = this.editIncId;
        return request;
    };
    return EditCommandRequest;
}(ServerCommandRequest));
exports.EditCommandRequest = EditCommandRequest;
var LoadCommandRequest = (function (_super) {
    tslib_1.__extends(LoadCommandRequest, _super);
    function LoadCommandRequest() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LoadCommandRequest.prototype.isOpenDocumentRequest = function () {
        return enum_1.EnumUtils.isAnyOf(this.type, command_type_1.CommandType.OpenDocument, command_type_1.CommandType.NewDocument, command_type_1.CommandType.ReloadDocument);
    };
    LoadCommandRequest.prototype.isSaveDocumentRequest = function () {
        return this.type === command_type_1.CommandType.SaveDocument || this.type === command_type_1.CommandType.SaveAsDocument;
    };
    LoadCommandRequest.prototype.isSpellCheckerRequest = function () {
        return this.type === command_type_1.CommandType.CheckSpelling || this.type === command_type_1.CommandType.AddWordToDictionary;
    };
    LoadCommandRequest.prototype.isGetSetRtfRequest = function () {
        return enum_1.EnumUtils.isAnyOf(this.type, command_type_1.CommandType.GetRtf, command_type_1.CommandType.InsertRtf);
    };
    LoadCommandRequest.prototype.isLoadNextChunksRequest = function () {
        return this.type == command_type_1.CommandType.LoadPieceTable;
    };
    LoadCommandRequest.prototype.isForcePushRequest = function () {
        return this.type === command_type_1.CommandType.ForceSyncWithServer;
    };
    LoadCommandRequest.prototype.isPdfExportRequest = function () {
        return this.type === command_type_1.CommandType.PdfExported;
    };
    return LoadCommandRequest;
}(ServerCommandRequest));
exports.LoadCommandRequest = LoadCommandRequest;
var EditTextBufferCommandRequest = (function (_super) {
    tslib_1.__extends(EditTextBufferCommandRequest, _super);
    function EditTextBufferCommandRequest(requestType, subDocumentId, text, commandParams) {
        var _this = _super.call(this, requestType, subDocumentId, commandParams) || this;
        _this.text = text;
        return _this;
    }
    EditTextBufferCommandRequest.prototype.getJsonObject = function (withPostData) {
        this.params[json_character_enums_1.JSONInsertTextCommandProperty.Text] = this.text;
        return _super.prototype.getJsonObject.call(this, withPostData);
    };
    EditTextBufferCommandRequest.prototype.extendTextRequest = function (subDocumentId, position, textLength, characterPropertiesJSON, characterStyleName, type, text) {
        if (this.subDocumentId == subDocumentId &&
            this.type === command_type_1.CommandType.InsertSimpleRun &&
            this.params[json_character_enums_1.JSONInsertTextCommandProperty.Position] + this.params[json_character_enums_1.JSONInsertTextCommandProperty.Length] === position &&
            this.params[json_character_enums_1.JSONInsertTextCommandProperty.RunType] === type &&
            this.params[json_character_enums_1.JSONInsertTextCommandProperty.CharacterStyleName] === characterStyleName &&
            JSON.stringify(this.params[json_character_enums_1.JSONInsertTextCommandProperty.CharacterProperties]) === JSON.stringify(characterPropertiesJSON)) {
            this.text += text;
            this.params[json_character_enums_1.JSONInsertTextCommandProperty.Length] += textLength;
            return true;
        }
        else
            return false;
    };
    return EditTextBufferCommandRequest;
}(EditCommandRequest));
exports.EditTextBufferCommandRequest = EditTextBufferCommandRequest;
var ClientServerTextBufferChangedCommandRequest = (function (_super) {
    tslib_1.__extends(ClientServerTextBufferChangedCommandRequest, _super);
    function ClientServerTextBufferChangedCommandRequest(requestType, subDocumentId, state, commandParams) {
        var _this = _super.call(this, requestType, subDocumentId, commandParams) || this;
        _this.state = state;
        return _this;
    }
    ClientServerTextBufferChangedCommandRequest.prototype.getJsonObject = function (withPostData) {
        this.params[json_top_level_enums_1.JSONPropertyStateBasedCommand.State] = this.state.toJSON(withPostData);
        return _super.prototype.getJsonObject.call(this, withPostData);
    };
    return ClientServerTextBufferChangedCommandRequest;
}(EditCommandRequest));
exports.ClientServerTextBufferChangedCommandRequest = ClientServerTextBufferChangedCommandRequest;
var RequestParams = (function () {
    function RequestParams(lockQueue, immediateSend, processOnCallback) {
        if (lockQueue === void 0) { lockQueue = false; }
        if (immediateSend === void 0) { immediateSend = false; }
        if (processOnCallback === void 0) { processOnCallback = false; }
        this.lockQueue = false;
        this.immediateSend = false;
        this.processOnCallback = false;
        this.lockQueue = lockQueue;
        this.immediateSend = immediateSend;
        this.processOnCallback = processOnCallback;
    }
    return RequestParams;
}());
exports.RequestParams = RequestParams;
