"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var common_1 = require("@devexpress/utils/lib/utils/common");
var ColorHelper = (function () {
    function ColorHelper() {
    }
    ColorHelper.getPredefinedColor = function (color) {
        return color_1.ColorUtils.fromHashString(color, 0);
    };
    ColorHelper.anyToColor = function (value, defaultValue) {
        if (common_1.isNumber(value) && !isNaN(value))
            return value;
        if (typeof value === "string") {
            var intValue = parseInt(value);
            return !isNaN(intValue) && value == intValue ? intValue : color_1.ColorUtils.fromHashString(value);
        }
        return defaultValue;
    };
    ColorHelper.getActualForeColor = function (foreColor, backColor) {
        if (foreColor == ColorHelper.AUTOMATIC_COLOR) {
            var backColorIsLight = backColor == ColorHelper.AUTOMATIC_COLOR ||
                backColor == ColorHelper.NO_COLOR ||
                ColorHelper.calculateLumaY(backColor) >= ColorHelper.DEFAULT_BOUNDARY_LUMA;
            foreColor = backColorIsLight ? color_1.ColorUtils.DARK_COLOR : color_1.ColorUtils.LIGHT_COLOR;
        }
        return ColorHelper.getCssString(foreColor, true);
    };
    ColorHelper.getCssString = function (color, isAutoColorTranslateToDark) {
        if (color == ColorHelper.AUTOMATIC_COLOR)
            return color_1.ColorUtils.colorToHash(isAutoColorTranslateToDark ? color_1.ColorUtils.DARK_COLOR : color_1.ColorUtils.LIGHT_COLOR);
        return ColorHelper.getCssStringInternal(color);
    };
    ColorHelper.IsDarkColor = function (color) {
        return ColorHelper.calculateLumaY(color) < ColorHelper.DEFAULT_BOUNDARY_LUMA;
    };
    ColorHelper.getCssStringInternal = function (color) {
        var alpfa = color_1.ColorUtils.getAlpha(color);
        switch (alpfa) {
            case 0: return "transparent";
            case 255: return color_1.ColorUtils.colorToHash(color);
            default: return "rgba(" + color_1.ColorUtils.getRed(color) + "," + color_1.ColorUtils.getGreen(color) + "," + color_1.ColorUtils.getBlue(color) + "," + (alpfa / 255) + ")";
        }
    };
    ColorHelper.isEmptyBgColor = function (color) {
        return color === this.AUTOMATIC_COLOR || color === this.NO_COLOR;
    };
    ColorHelper.calculateLumaY = function (color) {
        return ColorHelper.DEFAULT_BOUNDARY_LUMA_RED * color_1.ColorUtils.getRed(color) +
            ColorHelper.DEFAULT_BOUNDARY_LUMA_GREEN * color_1.ColorUtils.getGreen(color) +
            ColorHelper.DEFAULT_BOUNDARY_LUMA_BLUE * color_1.ColorUtils.getBlue(color);
    };
    ColorHelper.DEFAULT_BOUNDARY_LUMA = 60.762 * 65536;
    ColorHelper.DEFAULT_BOUNDARY_LUMA_RED = 0.299 * 65536;
    ColorHelper.DEFAULT_BOUNDARY_LUMA_BLUE = 0.114 * 65536;
    ColorHelper.DEFAULT_BOUNDARY_LUMA_GREEN = 0.587 * 65536;
    ColorHelper.BLACK_COLOR = -16777216;
    ColorHelper.AUTOMATIC_COLOR = 0;
    ColorHelper.NO_COLOR = 16777215;
    return ColorHelper;
}());
exports.ColorHelper = ColorHelper;
