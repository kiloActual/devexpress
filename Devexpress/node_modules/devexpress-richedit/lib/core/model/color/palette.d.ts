import { ConstInterval } from '@devexpress/utils/lib/intervals/const';
import { ColorModelInfo } from './color-model-info';
import { ColorProvider } from './color-provider';
export declare class ColorDifference {
    static RGB(x: number, y: number): number;
    static HSB(x: number, y: number): number;
}
export declare class Palette {
    static readonly BuiltInColorsCount: number;
    static readonly DefaultForegroundColorIndex: number;
    static readonly DefaultBackgroundColorIndex: number;
    static readonly SystemWindowFrameColorIndex: number;
    static readonly System3DFaceColorIndex: number;
    static readonly System3DTextColorIndex: number;
    static readonly System3DHighlightColorIndex: number;
    static readonly System3DShadowColorIndex: number;
    static readonly SystemHighlightColorIndex: number;
    static readonly SystemControlTextColorIndex: number;
    static readonly SystemControlScrollColorIndex: number;
    static readonly SystemControlInverseColorIndex: number;
    static readonly SystemControlBodyColorIndex: number;
    static readonly SystemControlFrameColorIndex: number;
    static readonly DefaultChartForegroundColorIndex: number;
    static readonly DefaultChartBackgroundColorIndex: number;
    static readonly ChartNeutralColorIndex: number;
    static readonly ToolTipFillColorIndex: number;
    static readonly ToolTipTextColorIndex: number;
    static readonly FontAutomaticColorIndex: number;
    private colorTable;
    isCustomIndexedColorTable: boolean;
    constructor();
    getColorByIndex(index: number): number;
    setColor(index: number, color: number): void;
    reset(): void;
    isValidColorIndex(index: number): boolean;
    getColorIndex(colorProvider: ColorProvider, colorInfo: ColorModelInfo, foreground: boolean): number;
    getFontColorIndex(colorProvider: ColorProvider, colorInfo: ColorModelInfo): number;
    getColorIndexByRgbColor(color: number): number;
    getExactColorIndex(color: number, indexInterval: ConstInterval): number;
    getNearestColorIndex(color: number): number;
    getPaletteNearestColorIndex(color: number): number;
    isCompatibleColors(x: number, y: number): boolean;
    getColorDistance(x: number, y: number, rgbWeight: number): number;
    getNearestColorIndexCore(color: number, indexInterval: ConstInterval): number;
    clone(): Palette;
    defaultForegroundColor: number;
    defaultBackgroundColor: number;
    defaultChartForegroundColor: number;
    defaultChartBackgroundColor: number;
    readonly chartNeutralColor: number;
    toolTipTextColor: number;
    fontAutomaticColor: number;
}
//# sourceMappingURL=palette.d.ts.map
