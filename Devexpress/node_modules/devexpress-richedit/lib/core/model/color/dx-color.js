"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var list_1 = require("@devexpress/utils/lib/utils/list");
var color_2 = require("./color");
var color_hsl_1 = require("./color-hsl");
var DXColor = (function () {
    function DXColor() {
    }
    DXColor.isTransparentOrEmpty = function (color) {
        return color == DXColor.empty || color == DXColor.transparent;
    };
    DXColor.isTransparentOrEmptyorNoColor = function (color) {
        return color == color_2.ColorHelper.NO_COLOR || DXColor.isTransparentOrEmpty(color);
    };
    DXColor.isTransparentColor = function (color) {
        return color_1.ColorUtils.getAlpha(color) == 0;
    };
    DXColor.isEmpty = function (color) {
        return color == null || color == undefined;
    };
    DXColor.isSemitransparentColor = function (color) {
        var alpha = color_1.ColorUtils.getAlpha(color);
        return alpha > 0 && alpha < 255;
    };
    DXColor.fromArgb = function (alpha, rgbColor) {
        return (alpha << 24) | (color_1.ColorUtils.getRed(rgbColor) << 16) | (color_1.ColorUtils.getGreen(rgbColor) << 8) | (color_1.ColorUtils.getBlue(rgbColor));
    };
    DXColor.fromRgb = function (red, green, blue) {
        return (255 << 24) | (red << 16) | (green << 8) | (blue);
    };
    DXColor.fromName = function (name) {
        var hash = color_1.ColorUtils.colorNames[name.toLowerCase()];
        return hash ? color_1.ColorUtils.fromHashString(hash) : color_2.ColorHelper.AUTOMATIC_COLOR;
    };
    DXColor.blend = function (color, backgroundColor) {
        if (color_1.ColorUtils.getAlpha(color) >= 255)
            return color;
        var alpha = color_1.ColorUtils.getAlpha(color) / 255.0;
        var one_alpha = 1.0 - alpha;
        return DXColor.fromRgb(Math.floor(color_1.ColorUtils.getRed(color) * alpha + color_1.ColorUtils.getRed(backgroundColor) * one_alpha), Math.floor(color_1.ColorUtils.getGreen(color) * alpha + color_1.ColorUtils.getGreen(backgroundColor) * one_alpha), Math.floor(color_1.ColorUtils.getBlue(color) * alpha + color_1.ColorUtils.getBlue(backgroundColor) * one_alpha));
    };
    DXColor.calculateNearestColor = function (colorsToChooseFrom, startColor) {
        var startHslColor = color_hsl_1.ColorHSL.fromColorRGB(startColor);
        return !colorsToChooseFrom.length ?
            DXColor.empty :
            list_1.ListUtils.min(colorsToChooseFrom, function (color) {
                var hslColor = color_hsl_1.ColorHSL.fromColorRGB(color);
                var hue = Math.abs(hslColor.floatHue - startHslColor.floatHue);
                if (hue > 1.0)
                    hue = 1.0 - hue;
                return Math.pow(hue, 2) +
                    Math.pow(hslColor.floatSaturation - startHslColor.floatSaturation, 2) +
                    Math.pow(hslColor.luminance - startHslColor.luminance, 2);
            });
    };
    DXColor.empty = color_2.ColorHelper.getPredefinedColor("#000000");
    DXColor.transparent = color_1.ColorUtils.fromHashString("#FFFFFF", 0);
    DXColor.white = color_1.ColorUtils.fromHashString(color_1.ColorUtils.colorNames.white, 255);
    return DXColor;
}());
exports.DXColor = DXColor;
