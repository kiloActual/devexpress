"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var protection_1 = require("../options/protection");
var office_theme_base_1 = require("../themes/office-theme-base");
var color_model_info_1 = require("./color-model-info");
var palette_1 = require("./palette");
var ColorProvider = (function () {
    function ColorProvider(colorModelInfoCache) {
        this.rangePermissionColors = {};
        this.rangePermissionColorIndex = 0;
        this.colorModelInfoCache = colorModelInfoCache;
        this.officeTheme = new office_theme_base_1.OfficeTheme();
        this.palette = new palette_1.Palette();
    }
    ColorProvider.prototype.getRgbaFromModelColor = function (color) {
        return color.toRgb(this);
    };
    ColorProvider.prototype.getModelColorFromRgba = function (rgba) {
        return this.colorModelInfoCache.getItem(color_model_info_1.ColorModelInfo.makeByColor(rgba));
    };
    ColorProvider.prototype.getColor = function () {
        if (this.rangePermissionColorIndex >= protection_1.DocumentProtectionSettings.defaultColors.length)
            this.rangePermissionColorIndex = 0;
        var result = protection_1.DocumentProtectionSettings.defaultColors[this.rangePermissionColorIndex];
        this.rangePermissionColorIndex++;
        return result;
    };
    ColorProvider.prototype.clone = function (colorModelInfoCache) {
        var result = new ColorProvider(colorModelInfoCache);
        result.officeTheme = this.officeTheme.clone();
        result.palette = this.palette.clone();
        result.rangePermissionColors = string_1.StringMapUtils.map(this.rangePermissionColors, function (val) { return '' + val; });
        return result;
    };
    return ColorProvider;
}());
exports.ColorProvider = ColorProvider;
