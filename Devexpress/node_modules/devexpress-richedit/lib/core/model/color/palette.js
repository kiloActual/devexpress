"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@devexpress/utils/lib/constants");
var errors_1 = require("@devexpress/utils/lib/errors");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var color_1 = require("@devexpress/utils/lib/utils/color");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var color_model_info_cache_1 = require("../caches/hashed-caches/color-model-info-cache");
var color_hsl_1 = require("./color-hsl");
var d_xsystem_colors_1 = require("./d-xsystem-colors");
var dx_color_1 = require("./dx-color");
var enums_1 = require("./enums");
var ColorDistanceInfo = (function () {
    function ColorDistanceInfo(distance, colorIndex) {
        this.distance = distance;
        this.colorIndex = colorIndex;
    }
    ColorDistanceInfo.comparator = function (a, b) {
        return a.distance - b.distance;
    };
    return ColorDistanceInfo;
}());
var ColorDifference = (function () {
    function ColorDifference() {
    }
    ColorDifference.RGB = function (x, y) {
        return Math.sqrt(Math.pow((color_1.ColorUtils.getRed(x) - color_1.ColorUtils.getRed(y)) / 255, 2) +
            Math.pow((color_1.ColorUtils.getGreen(x) - color_1.ColorUtils.getGreen(y)) / 255, 2) +
            Math.pow((color_1.ColorUtils.getBlue(x) - color_1.ColorUtils.getBlue(y)) / 255, 2));
    };
    ColorDifference.HSB = function (x, y) {
        var xHSL = color_hsl_1.ColorHSL.fromColorRGB(x);
        var yHSL = color_hsl_1.ColorHSL.fromColorRGB(y);
        var deltaH = Math.abs(xHSL.hue - yHSL.hue);
        if (deltaH > 180.0)
            deltaH = 360.0 - deltaH;
        deltaH /= 57.3;
        var deltaB = Math.abs(xHSL.luminance - yHSL.luminance) * 3.0;
        var deltaS = Math.abs(xHSL.saturation - yHSL.saturation) * 1.5;
        return deltaB + deltaH + deltaS;
    };
    return ColorDifference;
}());
exports.ColorDifference = ColorDifference;
var Palette = (function () {
    function Palette() {
        this.reset();
    }
    Palette.prototype.getColorByIndex = function (index) {
        var color = this.colorTable[index];
        if (color === undefined)
            throw new Error(errors_1.Errors.InternalException);
        return color;
    };
    Palette.prototype.setColor = function (index, color) {
        var oldColor = this.colorTable[index];
        if (oldColor !== undefined) {
            if (oldColor != color) {
                this.isCustomIndexedColorTable = true;
                this.colorTable[index] = color;
            }
        }
        else
            throw new Error(errors_1.Errors.InternalException);
    };
    Palette.prototype.reset = function () {
        var _a;
        var sbc = d_xsystem_colors_1.DXSystemColors.scrollBar;
        this.colorTable = (_a = {},
            _a[0] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 0),
            _a[1] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 255),
            _a[2] = color_1.ColorUtils.fromArgbNumber(0, 255, 0, 0),
            _a[3] = color_1.ColorUtils.fromArgbNumber(0, 0, 255, 0),
            _a[4] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 255),
            _a[5] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 0),
            _a[6] = color_1.ColorUtils.fromArgbNumber(0, 255, 0, 255),
            _a[7] = color_1.ColorUtils.fromArgbNumber(0, 0, 255, 255),
            _a[8] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 0),
            _a[9] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 255),
            _a[10] = color_1.ColorUtils.fromArgbNumber(0, 255, 0, 0),
            _a[11] = color_1.ColorUtils.fromArgbNumber(0, 0, 255, 0),
            _a[12] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 255),
            _a[13] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 0),
            _a[14] = color_1.ColorUtils.fromArgbNumber(0, 255, 0, 255),
            _a[15] = color_1.ColorUtils.fromArgbNumber(0, 0, 255, 255),
            _a[16] = color_1.ColorUtils.fromArgbNumber(0, 128, 0, 0),
            _a[17] = color_1.ColorUtils.fromArgbNumber(0, 0, 128, 0),
            _a[18] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 128),
            _a[19] = color_1.ColorUtils.fromArgbNumber(0, 128, 128, 0),
            _a[20] = color_1.ColorUtils.fromArgbNumber(0, 128, 0, 128),
            _a[21] = color_1.ColorUtils.fromArgbNumber(0, 0, 128, 128),
            _a[22] = color_1.ColorUtils.fromArgbNumber(0, 192, 192, 192),
            _a[23] = color_1.ColorUtils.fromArgbNumber(0, 128, 128, 128),
            _a[24] = color_1.ColorUtils.fromArgbNumber(0, 153, 153, 255),
            _a[25] = color_1.ColorUtils.fromArgbNumber(0, 153, 51, 102),
            _a[26] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 204),
            _a[27] = color_1.ColorUtils.fromArgbNumber(0, 204, 255, 255),
            _a[28] = color_1.ColorUtils.fromArgbNumber(0, 102, 0, 102),
            _a[29] = color_1.ColorUtils.fromArgbNumber(0, 255, 128, 128),
            _a[30] = color_1.ColorUtils.fromArgbNumber(0, 0, 102, 204),
            _a[31] = color_1.ColorUtils.fromArgbNumber(0, 204, 204, 255),
            _a[32] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 128),
            _a[33] = color_1.ColorUtils.fromArgbNumber(0, 255, 0, 255),
            _a[34] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 0),
            _a[35] = color_1.ColorUtils.fromArgbNumber(0, 0, 255, 255),
            _a[36] = color_1.ColorUtils.fromArgbNumber(0, 128, 0, 128),
            _a[37] = color_1.ColorUtils.fromArgbNumber(0, 128, 0, 0),
            _a[38] = color_1.ColorUtils.fromArgbNumber(0, 0, 128, 128),
            _a[39] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 255),
            _a[40] = color_1.ColorUtils.fromArgbNumber(0, 0, 204, 255),
            _a[41] = color_1.ColorUtils.fromArgbNumber(0, 204, 255, 255),
            _a[42] = color_1.ColorUtils.fromArgbNumber(0, 204, 255, 204),
            _a[43] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 153),
            _a[44] = color_1.ColorUtils.fromArgbNumber(0, 153, 204, 255),
            _a[45] = color_1.ColorUtils.fromArgbNumber(0, 255, 153, 204),
            _a[46] = color_1.ColorUtils.fromArgbNumber(0, 204, 153, 255),
            _a[47] = color_1.ColorUtils.fromArgbNumber(0, 255, 204, 153),
            _a[48] = color_1.ColorUtils.fromArgbNumber(0, 51, 102, 255),
            _a[49] = color_1.ColorUtils.fromArgbNumber(0, 51, 204, 204),
            _a[50] = color_1.ColorUtils.fromArgbNumber(0, 153, 204, 0),
            _a[51] = color_1.ColorUtils.fromArgbNumber(0, 255, 204, 0),
            _a[52] = color_1.ColorUtils.fromArgbNumber(0, 255, 153, 0),
            _a[53] = color_1.ColorUtils.fromArgbNumber(0, 255, 102, 0),
            _a[54] = color_1.ColorUtils.fromArgbNumber(0, 102, 102, 153),
            _a[55] = color_1.ColorUtils.fromArgbNumber(0, 150, 150, 150),
            _a[56] = color_1.ColorUtils.fromArgbNumber(0, 0, 51, 102),
            _a[57] = color_1.ColorUtils.fromArgbNumber(0, 51, 153, 102),
            _a[58] = color_1.ColorUtils.fromArgbNumber(0, 0, 51, 0),
            _a[59] = color_1.ColorUtils.fromArgbNumber(0, 51, 51, 0),
            _a[60] = color_1.ColorUtils.fromArgbNumber(0, 153, 51, 0),
            _a[61] = color_1.ColorUtils.fromArgbNumber(0, 153, 51, 102),
            _a[62] = color_1.ColorUtils.fromArgbNumber(0, 51, 51, 153),
            _a[63] = color_1.ColorUtils.fromArgbNumber(0, 51, 51, 51),
            _a[Palette.SystemWindowFrameColorIndex] = d_xsystem_colors_1.DXSystemColors.windowFrame,
            _a[Palette.System3DFaceColorIndex] = d_xsystem_colors_1.DXSystemColors.control,
            _a[Palette.System3DTextColorIndex] = d_xsystem_colors_1.DXSystemColors.controlText,
            _a[Palette.System3DHighlightColorIndex] = d_xsystem_colors_1.DXSystemColors.controlLight,
            _a[Palette.System3DShadowColorIndex] = d_xsystem_colors_1.DXSystemColors.controlDark,
            _a[Palette.SystemHighlightColorIndex] = d_xsystem_colors_1.DXSystemColors.highlight,
            _a[Palette.SystemControlTextColorIndex] = d_xsystem_colors_1.DXSystemColors.controlText,
            _a[Palette.SystemControlScrollColorIndex] = sbc,
            _a[Palette.SystemControlInverseColorIndex] = dx_color_1.DXColor.fromArgb(0, sbc),
            _a[Palette.SystemControlBodyColorIndex] = d_xsystem_colors_1.DXSystemColors.window,
            _a[Palette.SystemControlFrameColorIndex] = d_xsystem_colors_1.DXSystemColors.windowFrame,
            _a[Palette.DefaultForegroundColorIndex] = d_xsystem_colors_1.DXSystemColors.windowText,
            _a[Palette.DefaultBackgroundColorIndex] = d_xsystem_colors_1.DXSystemColors.window,
            _a[Palette.DefaultChartForegroundColorIndex] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 0),
            _a[Palette.DefaultChartBackgroundColorIndex] = color_1.ColorUtils.fromArgbNumber(0, 255, 255, 255),
            _a[Palette.ChartNeutralColorIndex] = color_1.ColorUtils.fromArgbNumber(0, 0, 0, 0),
            _a[Palette.ToolTipFillColorIndex] = d_xsystem_colors_1.DXSystemColors.info,
            _a[Palette.ToolTipTextColorIndex] = d_xsystem_colors_1.DXSystemColors.infoText,
            _a[Palette.FontAutomaticColorIndex] = dx_color_1.DXColor.empty,
            _a);
    };
    Object.defineProperty(Palette.prototype, "defaultForegroundColor", {
        get: function () { return this.colorTable[Palette.DefaultForegroundColorIndex]; },
        set: function (val) { this.colorTable[Palette.DefaultForegroundColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "defaultBackgroundColor", {
        get: function () { return this.colorTable[Palette.DefaultBackgroundColorIndex]; },
        set: function (val) { this.colorTable[Palette.DefaultBackgroundColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "defaultChartForegroundColor", {
        get: function () { return this.colorTable[Palette.DefaultChartForegroundColorIndex]; },
        set: function (val) { this.colorTable[Palette.DefaultChartForegroundColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "defaultChartBackgroundColor", {
        get: function () { return this.colorTable[Palette.DefaultChartBackgroundColorIndex]; },
        set: function (val) { this.colorTable[Palette.DefaultChartBackgroundColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "chartNeutralColor", {
        get: function () { return this.colorTable[Palette.ChartNeutralColorIndex]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "toolTipTextColor", {
        get: function () { return this.colorTable[Palette.ToolTipTextColorIndex]; },
        set: function (val) { this.colorTable[Palette.ToolTipTextColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Palette.prototype, "fontAutomaticColor", {
        get: function () { return this.colorTable[Palette.FontAutomaticColorIndex]; },
        set: function (val) { this.colorTable[Palette.FontAutomaticColorIndex] = val; },
        enumerable: true,
        configurable: true
    });
    Palette.prototype.isValidColorIndex = function (index) {
        return this.colorTable[index] !== undefined;
    };
    Palette.prototype.getColorIndex = function (colorProvider, colorInfo, foreground) {
        var defaultItem = color_model_info_cache_1.ColorModelInfoCache.defaultItem;
        if (defaultItem.equals(colorInfo) || colorInfo.colorType == enums_1.ColorType.Auto)
            return foreground ? Palette.DefaultForegroundColorIndex : Palette.DefaultBackgroundColorIndex;
        if (colorInfo.colorType == enums_1.ColorType.Index) {
            if (!this.isValidColorIndex(colorInfo.colorIndex))
                return foreground ? Palette.DefaultForegroundColorIndex : Palette.DefaultBackgroundColorIndex;
            return colorInfo.colorIndex;
        }
        return this.getPaletteNearestColorIndex(colorInfo.toRgb(colorProvider));
    };
    Palette.prototype.getFontColorIndex = function (colorProvider, colorInfo) {
        if (colorInfo.colorType == enums_1.ColorType.Auto)
            return Palette.FontAutomaticColorIndex;
        if (colorInfo.colorType == enums_1.ColorType.Index) {
            if (!this.isValidColorIndex(colorInfo.colorIndex))
                return Palette.FontAutomaticColorIndex;
            return colorInfo.colorIndex;
        }
        return this.getPaletteNearestColorIndex(colorInfo.toRgb(colorProvider));
    };
    Palette.prototype.getColorIndexByRgbColor = function (color) {
        var index = this.getExactColorIndex(color, new boundary_1.BoundaryInterval(0, Palette.FontAutomaticColorIndex + 1));
        if (index != -1)
            return index;
        if (color_1.ColorUtils.getAlpha(color) == 0xFF) {
            color = dx_color_1.DXColor.fromArgb(0, color);
            index = this.getExactColorIndex(color, new boundary_1.BoundaryInterval(0, Palette.FontAutomaticColorIndex + 1));
            if (index != -1)
                return index;
        }
        return Palette.DefaultForegroundColorIndex;
    };
    Palette.prototype.getExactColorIndex = function (color, indexInterval) {
        var index = number_1.NumberMapUtils.keyBy(this.colorTable, function (value, key) { return indexInterval.contains(key) && value == color; });
        return index === null ? -1 : index;
    };
    Palette.prototype.getNearestColorIndex = function (color) {
        var nearest = this.getExactColorIndex(color, new boundary_1.BoundaryInterval(0, 64));
        if (nearest != -1)
            return nearest;
        return this.getNearestColorIndexCore(color, new boundary_1.BoundaryInterval(0, 64));
    };
    Palette.prototype.getPaletteNearestColorIndex = function (color) {
        var nearest = this.getExactColorIndex(color, new boundary_1.BoundaryInterval(8, 63));
        if (nearest != -1)
            return nearest;
        return this.getNearestColorIndexCore(color, new boundary_1.BoundaryInterval(8, 64));
    };
    Palette.prototype.isCompatibleColors = function (x, y) {
        return color_1.ColorUtils.isGray(x) == color_1.ColorUtils.isGray(y);
    };
    Palette.prototype.getColorDistance = function (x, y, rgbWeight) {
        var hsbD = ColorDifference.HSB(x, y);
        var rgbD = ColorDifference.RGB(x, y) * rgbWeight;
        return hsbD + rgbD;
    };
    Palette.prototype.getNearestColorIndexCore = function (color, indexInterval) {
        var _this = this;
        var items = [];
        number_1.NumberMapUtils.forEach(this.colorTable, function (value, key) {
            if (indexInterval.contains(key) && _this.isCompatibleColors(value, color))
                items.push(new ColorDistanceInfo(_this.getColorDistance(color, value, 3.0), key));
        });
        items.sort(ColorDistanceInfo.comparator);
        var limit = 5;
        if (items.length > limit)
            items.splice(limit);
        var nearest = -1;
        var distance = constants_1.Constants.MAX_SAFE_INTEGER;
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            if (nearest == -1) {
                nearest = item.colorIndex;
                distance = this.getColorDistance(color, this.colorTable[item.colorIndex], 1.5);
            }
            else {
                var d = this.getColorDistance(color, this.colorTable[item.colorIndex], 1.5);
                if (d < distance) {
                    nearest = item.colorIndex;
                    distance = d;
                }
            }
        }
        return nearest;
    };
    Palette.prototype.clone = function () {
        var result = new Palette();
        result.isCustomIndexedColorTable = this.isCustomIndexedColorTable;
        result.colorTable = number_1.NumberMapUtils.shallowCopy(this.colorTable);
        return result;
    };
    Palette.BuiltInColorsCount = 8;
    Palette.DefaultForegroundColorIndex = 64;
    Palette.DefaultBackgroundColorIndex = 65;
    Palette.SystemWindowFrameColorIndex = 66;
    Palette.System3DFaceColorIndex = 67;
    Palette.System3DTextColorIndex = 68;
    Palette.System3DHighlightColorIndex = 69;
    Palette.System3DShadowColorIndex = 70;
    Palette.SystemHighlightColorIndex = 71;
    Palette.SystemControlTextColorIndex = 72;
    Palette.SystemControlScrollColorIndex = 73;
    Palette.SystemControlInverseColorIndex = 74;
    Palette.SystemControlBodyColorIndex = 75;
    Palette.SystemControlFrameColorIndex = 76;
    Palette.DefaultChartForegroundColorIndex = 77;
    Palette.DefaultChartBackgroundColorIndex = 78;
    Palette.ChartNeutralColorIndex = 79;
    Palette.ToolTipFillColorIndex = 80;
    Palette.ToolTipTextColorIndex = 81;
    Palette.FontAutomaticColorIndex = 32767;
    return Palette;
}());
exports.Palette = Palette;
