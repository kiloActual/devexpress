"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var drawing_value_constants_1 = require("../drawing/drawing-value-constants");
var dx_color_1 = require("./dx-color");
var ScRGBColor = (function () {
    function ScRGBColor(scR, scG, scB) {
        this._scR = scR;
        this._scG = scG;
        this._scB = scB;
    }
    Object.defineProperty(ScRGBColor.prototype, "scR", {
        get: function () { return this._scR; },
        set: function (value) { this._scR = this.getValidValue(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScRGBColor.prototype, "scG", {
        get: function () { return this._scG; },
        set: function (value) { this._scG = this.getValidValue(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScRGBColor.prototype, "scB", {
        get: function () { return this._scB; },
        set: function (value) { this._scB = this.getValidValue(value); },
        enumerable: true,
        configurable: true
    });
    ScRGBColor.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this._scR ^
            math_1.MathUtils.somePrimes[1] * this._scG ^
            math_1.MathUtils.somePrimes[2] * this._scB;
    };
    ScRGBColor.prototype.toRgb = function () {
        var r = this._scR * 1.0 / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        var g = this._scG * 1.0 / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        var b = this._scB * 1.0 / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        var a = 0.055;
        r = (r <= 0.0031308) ? 12.92 * r : (1 + a) * Math.pow(r, 1 / 2.4) - a;
        g = (g <= 0.0031308) ? 12.92 * g : (1 + a) * Math.pow(g, 1 / 2.4) - a;
        b = (b <= 0.0031308) ? 12.92 * b : (1 + a) * Math.pow(b, 1 / 2.4) - a;
        r *= 255;
        g *= 255;
        b *= 255;
        return dx_color_1.DXColor.fromRgb(Math.round(r), Math.round(g), Math.round(b));
    };
    ScRGBColor.prototype.getValidValue = function (value) {
        return (value < 0) ? 0 : value;
    };
    ScRGBColor.prototype.equals = function (obj) {
        return obj &&
            this._scR == obj._scR &&
            this._scG == obj._scG &&
            this._scB == obj._scB;
    };
    ScRGBColor.defaultValue = new ScRGBColor(0, 0, 0);
    return ScRGBColor;
}());
exports.ScRGBColor = ScRGBColor;
