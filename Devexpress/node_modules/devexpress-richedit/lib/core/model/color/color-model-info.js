"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("@devexpress/utils/lib/errors");
var color_1 = require("@devexpress/utils/lib/utils/color");
var math_1 = require("@devexpress/utils/lib/utils/math");
var json_character_enums_1 = require("../json/enums/json-character-enums");
var color_2 = require("./color");
var color_hsl_1 = require("./color-hsl");
var dx_color_1 = require("./dx-color");
var enums_1 = require("./enums");
var ColorModelInfo = (function () {
    function ColorModelInfo() {
        this._themeColorIndex = enums_1.ThemeColorIndexConstants.None;
        this._themeValue = enums_1.ThemeColorValues.None;
        this._colorIndex = ColorModelInfo.defaultColorIndex;
        this.restoreDefaultValues();
    }
    Object.defineProperty(ColorModelInfo, "nullColor", {
        get: function () { return ColorModelInfo.makeByColor(color_2.ColorHelper.AUTOMATIC_COLOR); },
        enumerable: true,
        configurable: true
    });
    ;
    ColorModelInfo.makeByThemeColorIndex = function (themeColorIndex, tint) {
        if (tint === void 0) { tint = 0; }
        var result = new ColorModelInfo();
        result.themeColorIndex = themeColorIndex;
        result.tint = tint;
        return result;
    };
    ColorModelInfo.makeByColor = function (color, tint) {
        if (tint === void 0) { tint = 0; }
        var result = new ColorModelInfo();
        result.rgb = color;
        result.tint = tint;
        return result;
    };
    ColorModelInfo.makeByColorIndex = function (colorIndex, tint) {
        if (tint === void 0) { tint = 0; }
        var result = new ColorModelInfo();
        result.colorIndex = colorIndex;
        result.tint = tint;
        return result;
    };
    Object.defineProperty(ColorModelInfo.prototype, "colorType", {
        get: function () { return this._colorType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "rgb", {
        get: function () { return this._rgb; },
        set: function (value) {
            this.setColorType(enums_1.ColorType.Rgb);
            if (this._rgb != value)
                this._rgb = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "themeColorIndex", {
        get: function () { return this._themeColorIndex; },
        set: function (value) {
            this.setColorType(enums_1.ColorType.Theme);
            if (this._themeColorIndex != value)
                this._themeColorIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "themeValue", {
        get: function () { return this._themeValue; },
        set: function (value) {
            this.setColorType(enums_1.ColorType.Theme);
            if (this._themeValue != value)
                this._themeValue = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "colorIndex", {
        get: function () { return this._colorIndex; },
        set: function (value) {
            this.setColorType(enums_1.ColorType.Index);
            if (this._colorIndex != value)
                this._colorIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "tint", {
        get: function () { return this._tint; },
        set: function (value) {
            if (Math.abs(value) > 1)
                throw new Error(errors_1.Errors.InternalException);
            this._tint = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ColorModelInfo.prototype, "isEmpty", {
        get: function () { return this.colorType == enums_1.ColorType.Rgb && dx_color_1.DXColor.isTransparentOrEmpty(this.rgb); },
        enumerable: true,
        configurable: true
    });
    ColorModelInfo.prototype.restoreDefaultValues = function () {
        this._themeColorIndex = enums_1.ThemeColorIndexConstants.None;
        this._themeValue = enums_1.ThemeColorValues.None;
        this._colorIndex = ColorModelInfo.defaultColorIndex;
        this._rgb = dx_color_1.DXColor.empty;
        this._colorType = enums_1.ColorType.Rgb;
        this._tint = 0;
    };
    ColorModelInfo.prototype.setColorType = function (colorType) {
        if (this._colorType != colorType) {
            this.restoreDefaultValues();
            this._colorType = colorType;
        }
    };
    ColorModelInfo.makeAuto = function () {
        var result = new ColorModelInfo();
        result.setColorType(enums_1.ColorType.Auto);
        return result;
    };
    ColorModelInfo.prototype.toRgb = function (colorProvider) {
        var color = dx_color_1.DXColor.empty;
        switch (this.colorType) {
            case enums_1.ColorType.Index:
                if (this.colorIndex != ColorModelInfo.defaultColorIndex) {
                    color = colorProvider.palette.getColorByIndex(this.colorIndex);
                    if (color_1.ColorUtils.getAlpha(color) == 0)
                        color = dx_color_1.DXColor.fromArgb(255, color);
                }
                break;
            case enums_1.ColorType.Theme:
                if (this.themeColorIndex != enums_1.ThemeColorIndexConstants.None)
                    color = colorProvider.officeTheme.colors.getColorByThemeColorIndex(colorProvider, this.themeColorIndex);
                break;
            case enums_1.ColorType.Rgb:
                color = this.rgb;
                break;
        }
        return color_hsl_1.ColorHSL.calculateColorRGB(color, this.tint);
    };
    ColorModelInfo.prototype.clone = function () {
        var result = new ColorModelInfo();
        result.copyFrom(this);
        return result;
    };
    ColorModelInfo.prototype.copyFrom = function (value) {
        this._themeColorIndex = value.themeColorIndex;
        this._themeValue = value.themeValue;
        this._colorIndex = value.colorIndex;
        this._rgb = value.rgb;
        this._colorType = value.colorType;
        this.tint = value.tint;
    };
    ColorModelInfo.prototype.equals = function (info) {
        return info &&
            this._colorType == info.colorType &&
            this.rgb == info.rgb &&
            this.themeColorIndex == info.themeColorIndex &&
            this.colorIndex == info.colorIndex &&
            this.tint == info.tint &&
            this.themeValue == info.themeValue;
    };
    ColorModelInfo.equalsBinary = function (a, b) {
        return a && b && (a === b ||
            a._colorType == b._colorType &&
                a._rgb == b._rgb &&
                a._colorIndex == b._colorIndex &&
                a._themeColorIndex == b._themeColorIndex &&
                a._tint == b._tint &&
                a._themeValue == b._themeValue);
    };
    ColorModelInfo.prototype.calculateHash = function () {
        var hash = math_1.MathUtils.somePrimes[0] * this._colorType;
        if (this._rgb !== undefined)
            hash ^= math_1.MathUtils.somePrimes[1] * this._rgb;
        if (this._tint !== undefined)
            hash ^= math_1.MathUtils.somePrimes[2] * this._tint;
        if (this._colorIndex !== undefined)
            hash ^= math_1.MathUtils.somePrimes[3] * this._colorIndex;
        if (this._themeColorIndex !== undefined)
            hash ^= math_1.MathUtils.somePrimes[4] * this._themeColorIndex;
        return hash;
    };
    ColorModelInfo.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    ColorModelInfo.prototype.toJSON = function () {
        var result = {};
        result[json_character_enums_1.JSONColorModelInfoProperty.ColorType] = this.colorType;
        result[json_character_enums_1.JSONColorModelInfoProperty.Tint] = this.tint;
        result[json_character_enums_1.JSONColorModelInfoProperty.ColorIndex] = this.colorIndex;
        result[json_character_enums_1.JSONColorModelInfoProperty.ThemeColorIndex] = this.themeColorIndex;
        result[json_character_enums_1.JSONColorModelInfoProperty.Rgb] = this.rgb;
        return result;
    };
    ColorModelInfo.prototype.toDebugString = function () {
        return "type: " + enums_1.ColorType[this.colorType] + ", rgb " + this.rgb + ", themeColorIndex: " + this.themeColorIndex + ", themeValue: " + this.themeValue;
    };
    ColorModelInfo.defaultColorIndex = -1;
    ColorModelInfo.empty = new ColorModelInfo();
    ColorModelInfo.auto = ColorModelInfo.makeAuto();
    ColorModelInfo.autoColor = ColorModelInfo.makeByColor(color_2.ColorHelper.AUTOMATIC_COLOR);
    ColorModelInfo.noColor = ColorModelInfo.makeByColor(color_2.ColorHelper.NO_COLOR);
    return ColorModelInfo;
}());
exports.ColorModelInfo = ColorModelInfo;
