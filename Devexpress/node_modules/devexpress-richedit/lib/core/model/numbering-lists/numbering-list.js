"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_1 = require("../character/character-properties");
var paragraph_properties_1 = require("../paragraph/paragraph-properties");
var list_level_1 = require("./list-level");
var list_level_properties_1 = require("./list-level-properties");
var NumberingListBase = (function () {
    function NumberingListBase(documentModel, levelCount) {
        this.innerId = -1;
        this.levels = [];
        this.deleted = false;
        this.documentModel = documentModel;
        this.initLevels(levelCount);
    }
    NumberingListBase.prototype.getId = function () {
        if (this.innerId === -1)
            this.innerId = this.generateNewId();
        return this.innerId;
    };
    NumberingListBase.prototype.resetId = function () {
        this.innerId = -1;
    };
    NumberingListBase.prototype.initLevels = function (levelCount) {
        for (var i = 0; i < levelCount; i++) {
            var listLevel = this.createLevel(i);
            this.levels.push(listLevel);
        }
    };
    NumberingListBase.prototype.getLevelType = function (listLevelIndex) {
        if (this.isBulletListLevel(this.levels[listLevelIndex]))
            return NumberingType.Bullet;
        else if (!this.isHybridList())
            return NumberingType.MultiLevel;
        else
            return NumberingType.Simple;
    };
    NumberingListBase.prototype.getListType = function () {
        if (!this.isHybridList())
            return NumberingType.MultiLevel;
        if (this.isBulletListLevel(this.levels[0]))
            return NumberingType.Bullet;
        else
            return NumberingType.Simple;
    };
    NumberingListBase.prototype.equals = function (obj) {
        for (var i = 0, level; level = obj.levels[i]; i++) {
            if (!level.equals(this.levels[i]))
                return false;
        }
        return true;
    };
    NumberingListBase.prototype.externallyEquals = function (obj) {
        if (this.getListType() !== obj.getListType())
            return false;
        var depth = this.getListType() == NumberingType.MultiLevel ? NumberingListBase.depth : 1;
        for (var i = 0; i < depth; i++) {
            if (!this.levels[i].externallyEquals(obj.levels[i]))
                return false;
        }
        return true;
    };
    NumberingListBase.prototype.copyFrom = function (obj) {
        this.innerId = obj.innerId;
        this.deleted = obj.deleted;
        this.copyLevelsFrom(obj.levels);
    };
    NumberingListBase.prototype.isHybridList = function () {
        for (var i = 0, listLevel; listLevel = this.levels[i]; i++) {
            if (listLevel.getListLevelProperties().templateCode !== 0)
                return true;
        }
        return false;
    };
    NumberingListBase.prototype.isBulletListLevel = function (level) {
        return level.getListLevelProperties().displayFormatString.length === 1;
    };
    NumberingListBase.depth = 3;
    NumberingListBase.NoNumberingListIndex = -2;
    NumberingListBase.NumberingListNotSettedIndex = -1;
    return NumberingListBase;
}());
exports.NumberingListBase = NumberingListBase;
var AbstractNumberingList = (function (_super) {
    tslib_1.__extends(AbstractNumberingList, _super);
    function AbstractNumberingList(documentModel) {
        return _super.call(this, documentModel, 9) || this;
    }
    AbstractNumberingList.prototype.generateNewId = function () {
        return this.documentModel.abstractNumberingListsIdProvider.getNextId();
    };
    AbstractNumberingList.prototype.createLevel = function (_index) {
        var characterProperties = character_properties_1.MaskedCharacterProperties.createDefault(this.documentModel);
        var paragraphProperties = paragraph_properties_1.MaskedParagraphProperties.createDefault(this.documentModel);
        return new list_level_1.ListLevel(this.documentModel, characterProperties, paragraphProperties, new list_level_properties_1.ListLevelProperties());
    };
    AbstractNumberingList.prototype.copyLevelsFrom = function (levels) {
        for (var i = 0, level; level = this.levels[i]; i++) {
            level.copyFrom(levels[i]);
        }
    };
    AbstractNumberingList.prototype.clone = function (model) {
        var result = new AbstractNumberingList(model);
        result.copyFrom(this);
        return result;
    };
    return AbstractNumberingList;
}(NumberingListBase));
exports.AbstractNumberingList = AbstractNumberingList;
var NumberingList = (function (_super) {
    tslib_1.__extends(NumberingList, _super);
    function NumberingList(documentModel, abstractNumberingListIndex) {
        var _this = _super.call(this, documentModel, 9) || this;
        if (abstractNumberingListIndex < 0 || abstractNumberingListIndex >= documentModel.abstractNumberingLists.length)
            throw new Error("abstractNumberingListIndex should be positive and less than length of the abstractNumberingLists array");
        _this.abstractNumberingListIndex = abstractNumberingListIndex;
        return _this;
    }
    NumberingList.prototype.getAbstractNumberingList = function () {
        return this.documentModel.abstractNumberingLists[this.abstractNumberingListIndex];
    };
    NumberingList.prototype.generateNewId = function () {
        return this.documentModel.numberingListsIdProvider.getNextId();
    };
    NumberingList.prototype.createLevel = function (index) {
        return new list_level_1.NumberingListReferenceLevel(this, index);
    };
    NumberingList.prototype.copyLevelsFrom = function (levels) {
        for (var i = 0; i < this.levels.length; i++) {
            var sourceLevel = levels[i];
            if (this.levels[i].constructor !== sourceLevel.constructor) {
                if (sourceLevel instanceof list_level_1.OverrideListLevel)
                    this.levels[i] = new list_level_1.OverrideListLevel(this.documentModel, sourceLevel.getCharacterProperties(), sourceLevel.getParagraphProperties(), sourceLevel.getListLevelProperties());
                else
                    this.levels[i] = new list_level_1.NumberingListReferenceLevel(this, i);
            }
            this.levels[i].copyFrom(sourceLevel);
        }
    };
    NumberingList.prototype.clone = function (model) {
        var result = new NumberingList(model, this.abstractNumberingListIndex);
        result.copyFrom(this);
        return result;
    };
    return NumberingList;
}(NumberingListBase));
exports.NumberingList = NumberingList;
var NumberingType;
(function (NumberingType) {
    NumberingType[NumberingType["MultiLevel"] = 0] = "MultiLevel";
    NumberingType[NumberingType["Simple"] = 1] = "Simple";
    NumberingType[NumberingType["Bullet"] = 2] = "Bullet";
})(NumberingType = exports.NumberingType || (exports.NumberingType = {}));
