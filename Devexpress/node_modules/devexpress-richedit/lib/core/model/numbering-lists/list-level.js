"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_merger_1 = require("../properties-merger/character-properties-merger");
var paragraph_properties_merger_1 = require("../properties-merger/paragraph-properties-merger");
var ListLevel = (function () {
    function ListLevel(documentModel, maskedCharacterProperties, maskedParagraphProperties, listLevelProperties) {
        this.documentModel = documentModel;
        this.setCharacterProperties(maskedCharacterProperties);
        this.setParagraphProperties(maskedParagraphProperties);
        this.setListLevelProperties(listLevelProperties);
    }
    ListLevel.prototype.getListLevelProperties = function () {
        return this.listLevelProperties;
    };
    ListLevel.prototype.setListLevelProperties = function (properties) {
        this.listLevelProperties = this.documentModel.cache.listLevelPropertiesCache.getItem(properties);
    };
    ListLevel.prototype.changeListLevelProperties = function (change) {
        var currentPropertiesCopy = this.listLevelProperties.clone();
        change(currentPropertiesCopy);
        this.setListLevelProperties(currentPropertiesCopy);
    };
    ListLevel.prototype.getCharacterProperties = function () {
        return this.maskedCharacterProperties;
    };
    ListLevel.prototype.getParagraphProperties = function () {
        return this.maskedParagraphProperties;
    };
    ListLevel.prototype.setParagraphProperties = function (properties) {
        this.maskedParagraphProperties = this.documentModel.cache.maskedParagraphPropertiesCache.getItem(properties);
    };
    ListLevel.prototype.onParagraphPropertiesChanged = function () {
        this.resetParagraphMergedProperties();
    };
    ListLevel.prototype.resetParagraphMergedProperties = function () {
        this.mergedParagraphProperties = null;
    };
    ListLevel.prototype.getParagraphMergedProperties = function () {
        if (!this.hasParagraphMergedProperies()) {
            var merger = new paragraph_properties_merger_1.ParagraphPropertiesMerger();
            merger.mergeMaskedParagraphProperties(this.maskedParagraphProperties);
            merger.mergeMaskedParagraphProperties(this.documentModel.defaultParagraphProperties);
            this.mergedParagraphProperties = merger.getMergedProperties();
        }
        return this.mergedParagraphProperties;
    };
    ListLevel.prototype.setParagraphMergedProperies = function (properties) {
        this.mergedParagraphProperties = this.documentModel.cache.mergedParagraphPropertiesCache.getItem(properties);
    };
    ListLevel.prototype.hasParagraphMergedProperies = function () {
        return !!this.mergedParagraphProperties;
    };
    ListLevel.prototype.setCharacterProperties = function (properties) {
        this.maskedCharacterProperties = this.documentModel.cache.maskedCharacterPropertiesCache.getItem(properties);
    };
    ListLevel.prototype.onCharacterPropertiesChanged = function () {
        this.resetCharacterMergedProperties();
    };
    ListLevel.prototype.resetCharacterMergedProperties = function () {
        this.mergedCharacterProperties = null;
    };
    ListLevel.prototype.getCharacterMergedProperties = function () {
        if (!this.hasCharacterMergedProperies()) {
            var merger = new character_properties_merger_1.CharacterPropertiesMerger();
            merger.mergeCharacterProperties(this.maskedCharacterProperties);
            merger.mergeCharacterProperties(this.documentModel.defaultCharacterProperties);
            this.mergedCharacterProperties = merger.getMergedProperties();
        }
        return this.mergedCharacterProperties;
    };
    ListLevel.prototype.setCharacterMergedProperies = function (properties) {
        this.mergedCharacterProperties = this.documentModel.cache.mergedCharacterPropertiesCache.getItem(properties);
    };
    ListLevel.prototype.hasCharacterMergedProperies = function () {
        return !!this.mergedCharacterProperties;
    };
    ListLevel.prototype.equals = function (obj) {
        if (obj === this)
            return true;
        if (!obj.getCharacterProperties().equals(this.getCharacterProperties()))
            return false;
        if (!obj.getParagraphProperties().equals(this.getParagraphProperties()))
            return false;
        if (!obj.getListLevelProperties().equals(this.getListLevelProperties()))
            return false;
        return true;
    };
    ListLevel.prototype.externallyEquals = function (obj) {
        if (obj === this)
            return true;
        var result = obj.getListLevelProperties().displayFormatString == this.getListLevelProperties().displayFormatString &&
            obj.getListLevelProperties().format == this.getListLevelProperties().format &&
            obj.getListLevelProperties().start == this.getListLevelProperties().start &&
            obj.getCharacterProperties().fontBold == this.getCharacterProperties().fontBold &&
            obj.getCharacterProperties().fontItalic == this.getCharacterProperties().fontItalic &&
            obj.getCharacterProperties().fontSize == this.getCharacterProperties().fontSize &&
            obj.getCharacterProperties().textColor.equals(this.getCharacterProperties().textColor) &&
            obj.getCharacterProperties().fontInfo.equals(this.getCharacterProperties().fontInfo);
        return result;
    };
    ListLevel.prototype.copyFrom = function (obj) {
        this.setListLevelProperties(obj.getListLevelProperties());
        this.setCharacterProperties(obj.getCharacterProperties());
        this.setParagraphProperties(obj.getParagraphProperties());
        this.onCharacterPropertiesChanged();
        this.onParagraphPropertiesChanged();
    };
    return ListLevel;
}());
exports.ListLevel = ListLevel;
var NumberingListReferenceLevel = (function () {
    function NumberingListReferenceLevel(owner, level) {
        this.overrideStart = false;
        this.newStart = 1;
        this.owner = owner;
        this.level = level;
        this.documentModel = owner.documentModel;
    }
    NumberingListReferenceLevel.prototype.getListLevelProperties = function () {
        return this.getOwnerLevel().getListLevelProperties();
    };
    NumberingListReferenceLevel.prototype.setListLevelProperties = function (properties) {
        this.getOwnerLevel().setListLevelProperties(properties);
    };
    NumberingListReferenceLevel.prototype.getCharacterProperties = function () {
        return this.getOwnerLevel().getCharacterProperties();
    };
    NumberingListReferenceLevel.prototype.getParagraphProperties = function () {
        return this.getOwnerLevel().getParagraphProperties();
    };
    NumberingListReferenceLevel.prototype.setParagraphProperties = function (properties) {
        this.getOwnerLevel().setParagraphProperties(properties);
    };
    NumberingListReferenceLevel.prototype.onParagraphPropertiesChanged = function () {
        this.getOwnerLevel().onParagraphPropertiesChanged();
    };
    NumberingListReferenceLevel.prototype.getParagraphMergedProperties = function () {
        return this.getOwnerLevel().getParagraphMergedProperties();
    };
    NumberingListReferenceLevel.prototype.setParagraphMergedProperies = function (properties) {
        this.getOwnerLevel().setParagraphMergedProperies(properties);
    };
    NumberingListReferenceLevel.prototype.hasParagraphMergedProperies = function () {
        return this.getOwnerLevel().hasParagraphMergedProperies();
    };
    NumberingListReferenceLevel.prototype.resetParagraphMergedProperties = function () {
        this.getOwnerLevel().resetParagraphMergedProperties();
    };
    NumberingListReferenceLevel.prototype.setCharacterProperties = function (properties) {
        this.getOwnerLevel().setCharacterProperties(properties);
    };
    NumberingListReferenceLevel.prototype.onCharacterPropertiesChanged = function () {
        this.getOwnerLevel().onCharacterPropertiesChanged();
    };
    NumberingListReferenceLevel.prototype.getCharacterMergedProperties = function () {
        return this.getOwnerLevel().getCharacterMergedProperties();
    };
    NumberingListReferenceLevel.prototype.setCharacterMergedProperies = function (properties) {
        this.getOwnerLevel().setCharacterMergedProperies(properties);
    };
    NumberingListReferenceLevel.prototype.hasCharacterMergedProperies = function () {
        return this.getOwnerLevel().hasCharacterMergedProperies();
    };
    NumberingListReferenceLevel.prototype.resetCharacterMergedProperties = function () {
        this.getOwnerLevel().resetCharacterMergedProperties();
    };
    NumberingListReferenceLevel.prototype.getNewStart = function () {
        return this.newStart;
    };
    NumberingListReferenceLevel.prototype.setNewStart = function (newStart) {
        this.newStart = newStart;
    };
    NumberingListReferenceLevel.prototype.getOwnerLevel = function () {
        return this.owner.getAbstractNumberingList().levels[this.level];
    };
    NumberingListReferenceLevel.prototype.equals = function (obj) {
        return this.getOwnerLevel().equals(obj.getOwnerLevel());
    };
    NumberingListReferenceLevel.prototype.externallyEquals = function (obj) {
        return this.getOwnerLevel().externallyEquals(obj.getOwnerLevel());
    };
    NumberingListReferenceLevel.prototype.copyFrom = function (obj) {
        if (!(obj instanceof NumberingListReferenceLevel))
            throw new Error("Source level should have equal type");
        this.newStart = obj.newStart;
        this.overrideStart = obj.overrideStart;
    };
    return NumberingListReferenceLevel;
}());
exports.NumberingListReferenceLevel = NumberingListReferenceLevel;
var OverrideListLevel = (function (_super) {
    tslib_1.__extends(OverrideListLevel, _super);
    function OverrideListLevel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.overrideStart = false;
        return _this;
    }
    OverrideListLevel.prototype.getNewStart = function () {
        return this.getListLevelProperties().start;
    };
    OverrideListLevel.prototype.setNewStart = function (newStart) {
        var properties = this.getListLevelProperties().clone();
        properties.start = newStart;
        this.setListLevelProperties(properties);
    };
    OverrideListLevel.prototype.copyFrom = function (obj) {
        if (!(obj instanceof OverrideListLevel))
            throw new Error("Source level should have equal type");
        _super.prototype.copyFrom.call(this, obj);
        this.overrideStart = obj.overrideStart;
    };
    return OverrideListLevel;
}(ListLevel));
exports.OverrideListLevel = OverrideListLevel;
