"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var position_1 = require("../position/position");
var PositionChecker = (function () {
    function PositionChecker(model) {
        this.model = model;
    }
    PositionChecker.prototype.check = function () {
        var _this = this;
        return number_1.NumberMapUtils.allOf(this.model.subDocuments, function (sd) {
            _this.poss = [];
            _this.addParagraphs(sd);
            _this.addTables(sd);
            _this.addFields(sd);
            _this.addBookmarks(sd);
            _this.addRangePermissions(sd);
            if (sd.isMain())
                _this.addSections();
            return _this.compare(_this.poss, list_1.ListUtils.shallowCopy(sd.positionManager.positions));
        });
    };
    PositionChecker.prototype.compare = function (poss, registered) {
        this.sort(registered);
        this.sort(poss);
        var regInterval = new boundary_1.BoundaryInterval(0, 0);
        var prevPos = new position_1.Position(-1);
        for (var _i = 0, poss_1 = poss; _i < poss_1.length; _i++) {
            var currPos = poss_1[_i];
            if (prevPos.value != currPos.value)
                regInterval = this.getNewRegInterval(registered, regInterval);
            if (!this.checkValue(currPos, registered, regInterval))
                return false;
            prevPos = currPos;
        }
        return true;
    };
    PositionChecker.prototype.getNewRegInterval = function (registered, regInterval) {
        regInterval = new boundary_1.BoundaryInterval(regInterval.end, regInterval.end + 1);
        var prevRegPos = registered[regInterval.start];
        for (var currRegPos = void 0; currRegPos = registered[regInterval.end]; regInterval.end++) {
            if (prevRegPos.value != currRegPos.value)
                break;
            prevRegPos = currRegPos;
        }
        return regInterval;
    };
    PositionChecker.prototype.checkValue = function (currPos, registered, regInterval) {
        for (var i = regInterval.start; i < regInterval.end; i++) {
            if (currPos === registered[i])
                return true;
        }
        return false;
    };
    PositionChecker.prototype.sort = function (poss) {
        poss.sort(function (a, b) { return a.value - b.value; });
    };
    PositionChecker.prototype.addSections = function () {
        for (var _i = 0, _a = this.model.sections; _i < _a.length; _i++) {
            var s = _a[_i];
            this.poss.push(s.startLogPosition);
        }
    };
    PositionChecker.prototype.addParagraphs = function (sd) {
        for (var _i = 0, _a = sd.paragraphs; _i < _a.length; _i++) {
            var p = _a[_i];
            this.poss.push(p.startLogPosition);
        }
    };
    PositionChecker.prototype.addTables = function (sd) {
        for (var _i = 0, _a = sd.tables; _i < _a.length; _i++) {
            var t = _a[_i];
            for (var _b = 0, _c = t.rows; _b < _c.length; _b++) {
                var row = _c[_b];
                for (var _d = 0, _e = row.cells; _d < _e.length; _d++) {
                    var cell = _e[_d];
                    this.poss.push(cell.startParagraphPosition);
                    this.poss.push(cell.endParagrapPosition);
                }
            }
        }
    };
    PositionChecker.prototype.addFields = function (sd) {
        for (var _i = 0, _a = sd.fields; _i < _a.length; _i++) {
            var f = _a[_i];
            f.getPositions(this.poss);
        }
    };
    PositionChecker.prototype.addBookmarks = function (sd) {
        for (var _i = 0, _a = sd.bookmarks; _i < _a.length; _i++) {
            var b = _a[_i];
            this.poss.push(b._interval._start);
            this.poss.push(b._interval._end);
        }
    };
    PositionChecker.prototype.addRangePermissions = function (sd) {
        for (var _i = 0, _a = sd.rangePermissions; _i < _a.length; _i++) {
            var r = _a[_i];
            this.poss.push(r._interval._start);
            this.poss.push(r._interval._end);
        }
    };
    return PositionChecker;
}());
exports.PositionChecker = PositionChecker;
