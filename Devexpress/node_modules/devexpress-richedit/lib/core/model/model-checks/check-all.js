"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var grid_1 = require("../../layout-formatter/table/grid-engine/grid");
var run_type_1 = require("../runs/run-type");
var sub_document_1 = require("../sub-document");
var table_1 = require("../tables/main-structures/table");
var table_base_structures_1 = require("../tables/secondary-structures/table-base-structures");
var position_1 = require("./position");
var ModelCheckerResult;
(function (ModelCheckerResult) {
    ModelCheckerResult[ModelCheckerResult["None"] = 0] = "None";
    ModelCheckerResult[ModelCheckerResult["Run"] = 1] = "Run";
    ModelCheckerResult[ModelCheckerResult["Paragraph"] = 2] = "Paragraph";
    ModelCheckerResult[ModelCheckerResult["Chunk"] = 3] = "Chunk";
    ModelCheckerResult[ModelCheckerResult["Section"] = 4] = "Section";
    ModelCheckerResult[ModelCheckerResult["SubDocument"] = 5] = "SubDocument";
    ModelCheckerResult[ModelCheckerResult["Field"] = 6] = "Field";
    ModelCheckerResult[ModelCheckerResult["Table"] = 7] = "Table";
    ModelCheckerResult[ModelCheckerResult["PositionManager"] = 8] = "PositionManager";
})(ModelCheckerResult = exports.ModelCheckerResult || (exports.ModelCheckerResult = {}));
var ModelChecker = (function () {
    function ModelChecker(model) {
        this.results = [];
        this.model = model;
    }
    ModelChecker.prototype.checkAll = function () {
        this.check([
            this.checkModelProps,
            this.checkParagraphs,
            this.checkChunks,
            this.checkSections,
            this.checkParagraphChunk,
            this.checkFields,
            this.checkTables,
            this.checkPositions
        ]);
        return !this.results.length;
    };
    ModelChecker.prototype.check = function (checks) {
        for (var _i = 0, checks_1 = checks; _i < checks_1.length; _i++) {
            var check = checks_1[_i];
            var result = check.call(this);
            if (result != ModelCheckerResult.None && result !== null) {
                this.results.push(result);
                break;
            }
        }
    };
    ModelChecker.prototype.checkModelProps = function () {
        if (!this.model.mainSubDocument)
            return ModelCheckerResult.SubDocument;
        if (!this.model.subDocuments[sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID])
            return ModelCheckerResult.SubDocument;
        return ModelCheckerResult.None;
    };
    ModelChecker.prototype.checkParagraphs = function () {
        var _this = this;
        return number_1.NumberMapUtils.unsafeAnyOf(this.model.subDocuments, function (sd) {
            if (!sd.paragraphs[0] || sd.paragraphs[0].startLogPosition.value != 0)
                return ModelCheckerResult.Paragraph;
            var parPos = 0;
            for (var _i = 0, _a = sd.paragraphs; _i < _a.length; _i++) {
                var par = _a[_i];
                if (par.startLogPosition.value != parPos || par.length < 1 ||
                    !sd.getRunByPosition(par.getEndPosition() - 1).isParagraphOrSectionRun())
                    return ModelCheckerResult.Paragraph;
                var checkTabsResult = _this.checkTabs(par.tabs);
                if (checkTabsResult)
                    return checkTabsResult;
                parPos += par.length;
            }
            return ModelCheckerResult.None;
        });
    };
    ModelChecker.prototype.checkTabs = function (tabs) {
        for (var _i = 0, _a = tabs.tabsInfo; _i < _a.length; _i++) {
            var tab = _a[_i];
            if (tab.leader === undefined)
                return ModelCheckerResult.Paragraph;
        }
        return ModelCheckerResult.None;
    };
    ModelChecker.prototype.checkChunks = function () {
        return number_1.NumberMapUtils.unsafeAnyOf(this.model.subDocuments, function (sd) {
            if (!sd.chunks[0] && sd.chunks[0].startLogPosition.value != 0)
                return ModelCheckerResult.Chunk;
            var chunkPos = 0;
            for (var _i = 0, _a = sd.chunks; _i < _a.length; _i++) {
                var chunk = _a[_i];
                if (chunk.textBuffer.length < 1 || chunk.textRuns.length < 1 || chunk.startLogPosition.value != chunkPos)
                    return ModelCheckerResult.Chunk;
                for (var _b = 0, _c = chunk.textRuns; _b < _c.length; _b++) {
                    var run = _c[_b];
                    if (!run.maskedCharacterProperties.fontInfo || !run.characterStyle)
                        return ModelCheckerResult.Run;
                }
                chunkPos += chunk.textBuffer.length;
            }
            return ModelCheckerResult.None;
        });
    };
    ModelChecker.prototype.checkSections = function () {
        var mainSubDoc = this.model.mainSubDocument;
        if (!this.model.sections[0] || this.model.sections[0].startLogPosition.value != 0)
            return ModelCheckerResult.Section;
        var sectionPos = 0;
        for (var _i = 0, _a = this.model.sections; _i < _a.length; _i++) {
            var section = _a[_i];
            if (sectionPos != section.startLogPosition.value || section.getLength() < 1 ||
                !mainSubDoc.getRunByPosition(section.getEndPosition() - 1).isParagraphOrSectionRun())
                return ModelCheckerResult.Section;
            sectionPos += section.getLength();
        }
        if (list_1.ListUtils.last(this.model.sections).getEndPosition() != list_1.ListUtils.last(mainSubDoc.paragraphs).getEndPosition())
            return ModelCheckerResult.Section;
        return ModelCheckerResult.None;
    };
    ModelChecker.prototype.checkParagraphChunk = function () {
        return number_1.NumberMapUtils.unsafeAnyOf(this.model.subDocuments, function (sd) {
            var lastPos = list_1.ListUtils.last(sd.paragraphs).getEndPosition();
            if (lastPos != list_1.ListUtils.last(sd.chunks).getEndPosition())
                return ModelCheckerResult.Chunk;
            return ModelCheckerResult.None;
        });
    };
    ModelChecker.prototype.checkFields = function () {
        var _this = this;
        return number_1.NumberMapUtils.unsafeAnyOf(this.model.subDocuments, function (sd) {
            var fieldsCopy = list_1.ListUtils.shallowCopy(sd.fields).sort(function (a, b) { return a.getFieldStartPosition() - b.getFieldStartPosition(); });
            if (!list_1.ListUtils.allOf2(fieldsCopy, sd.fields, function (a, b) { return a.index == b.index; }))
                return ModelCheckerResult.Field;
            return list_1.ListUtils.unsafeAnyOf(sd.fields, function (field, index) {
                if (field.index != index)
                    return ModelCheckerResult.Field;
                var result = _this.checkField(sd, field);
                return result;
            });
        });
    };
    ModelChecker.prototype.checkTables = function () {
        var _this = this;
        return number_1.NumberMapUtils.unsafeAnyOf(this.model.subDocuments, function (sd) {
            var tablesCopy = list_1.ListUtils.shallowCopy(sd.tables);
            tablesCopy.sort(table_1.Table.comparer);
            if (!list_1.ListUtils.allOf2(tablesCopy, sd.tables, function (a, b) { return a.index == b.index; }))
                return ModelCheckerResult.Table;
            if (sd.tables.length != list_1.ListUtils.accumulateNumber(sd.tablesByLevels, function (tblOnLevel) { return tblOnLevel.length; }))
                return ModelCheckerResult.Table;
            if (list_1.ListUtils.unsafeAnyOf(sd.tablesByLevels, function (tablesOnLevel) {
                return list_1.ListUtils.unsafeAnyOf(tablesOnLevel, function (table, index) {
                    return table.getStartPosition() - tablesOnLevel[index - 1].getEndPosition() < 1;
                }, 1);
            }))
                return ModelCheckerResult.Table;
            return list_1.ListUtils.unsafeAnyOf(sd.tables, function (table, index) {
                if (table.index != index)
                    return ModelCheckerResult.Table;
                var result = _this.checkTable(sd, table);
                return result;
            });
        });
    };
    ModelChecker.prototype.checkField = function (sd, field) {
        var startPos = field.getFieldStartPosition();
        var codeStartPos = field.getCodeStartPosition();
        var sepPos = field.getSeparatorPosition();
        var resultStartPos = field.getResultStartPosition();
        var resultEndPos = field.getResultEndPosition();
        var endPos = field.getFieldEndPosition();
        if (!(startPos + 1 == codeStartPos &&
            sepPos + 1 == resultStartPos &&
            resultEndPos + 1 == endPos &&
            sepPos > startPos &&
            resultEndPos - sepPos > 0 &&
            sd.getRunByPosition(startPos).getType() == run_type_1.RunType.FieldCodeStartRun &&
            sd.getRunByPosition(sepPos).getType() == run_type_1.RunType.FieldCodeEndRun &&
            sd.getRunByPosition(resultEndPos).getType() == run_type_1.RunType.FieldResultEndRun)) {
            return ModelCheckerResult.Field;
        }
        if (field.parent) {
            if (!this.isParentOfField(field, field.parent))
                return ModelCheckerResult.Field;
        }
        return ModelCheckerResult.None;
    };
    ModelChecker.prototype.isParentOfField = function (field, parent) {
        var allFieldInterval = field.getAllFieldInterval();
        var parentInterval = field.getFieldStartPosition() < parent.getSeparatorPosition() ?
            parent.getCodeInterval() :
            parent.getResultInterval();
        return allFieldInterval.start >= parentInterval.start && allFieldInterval.end <= parentInterval.end;
    };
    ModelChecker.prototype.checkTable = function (sd, table) {
        if (table.parentCell) {
            if (!table.parentCell.interval.containsIntervalWithoutEnd(table.interval))
                return ModelCheckerResult.Table;
        }
        if (!table.rows[0] || !table.rows[0].cells[0])
            return ModelCheckerResult.Table;
        var cellPos = table.rows[0].cells[0].startParagraphPosition.value;
        var numLogicalColumns = table.rows[0].getTotalCellsInRowConsiderGrid();
        for (var row = void 0, rowIndex = 0; row = table.rows[rowIndex]; rowIndex++) {
            if (row.getTotalCellsInRowConsiderGrid() != numLogicalColumns || !row.cells[0])
                return ModelCheckerResult.Table;
            for (var cell = void 0, cellIndex = 0; cell = row.cells[cellIndex]; cellIndex++) {
                var cellInterval = cell.interval;
                if (cellInterval.start != cellPos || cellInterval.length < 1 ||
                    sd.getRunByPosition(cellInterval.end - 1).getType() != run_type_1.RunType.ParagraphRun ||
                    cell.columnSpan < 1) {
                    return ModelCheckerResult.Table;
                }
                cellPos += cellInterval.length;
            }
        }
        var grid = new grid_1.Grid(table);
        for (var row = void 0, rowIndex = 0; row = table.rows[rowIndex]; rowIndex++) {
            for (var cell = void 0, cellIndex = 0; cell = row.cells[cellIndex]; cellIndex++) {
                var info = grid.tableCellInfos[rowIndex][cellIndex];
                switch (cell.verticalMerging) {
                    case table_base_structures_1.TableCellMergingState.None:
                        {
                            if (!(rowIndex == info.getStartRowIndex() && rowIndex + 1 == info.getEndRowIndex())) {
                                return ModelCheckerResult.Table;
                            }
                        }
                        break;
                    case table_base_structures_1.TableCellMergingState.Continue:
                        if (!(rowIndex > info.getStartRowIndex() && rowIndex < info.getEndRowIndex())) {
                            return ModelCheckerResult.Table;
                        }
                        break;
                    case table_base_structures_1.TableCellMergingState.Restart:
                        if (!(rowIndex == info.getStartRowIndex() && info.getEndRowIndex() > rowIndex + 1)) {
                            return ModelCheckerResult.Table;
                        }
                        break;
                    default:
                        return ModelCheckerResult.Table;
                }
            }
        }
        return ModelCheckerResult.None;
    };
    ModelChecker.prototype.checkPositions = function () {
        return new position_1.PositionChecker(this.model).check() ? ModelCheckerResult.None : ModelCheckerResult.PositionManager;
    };
    return ModelChecker;
}());
exports.ModelChecker = ModelChecker;
