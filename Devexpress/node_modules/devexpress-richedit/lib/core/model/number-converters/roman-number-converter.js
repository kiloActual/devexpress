"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var ordinal_based_number_converter_1 = require("./ordinal-based-number-converter");
var RomanNumberConverter = (function (_super) {
    tslib_1.__extends(RomanNumberConverter, _super);
    function RomanNumberConverter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RomanNumberConverter.prototype.convertNumberCore = function (value) {
        var result = "";
        for (var i = this.romans.length - 1; i >= 0; i--) {
            while (value >= this.arabics[i]) {
                value -= this.arabics[i];
                result += this.romans[i];
            }
        }
        return result;
    };
    return RomanNumberConverter;
}(ordinal_based_number_converter_1.OrdinalBasedNumberConverter));
exports.RomanNumberConverter = RomanNumberConverter;
var UpperRomanNumberConverterClassic = (function (_super) {
    tslib_1.__extends(UpperRomanNumberConverterClassic, _super);
    function UpperRomanNumberConverterClassic() {
        var _this = _super.call(this) || this;
        _this.type = list_level_properties_1.NumberingFormat.UpperRoman;
        _this.arabics = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];
        _this.romans = ["I", "IV", "V", "IX", "X", "XL", "L", "XC", "C", "CD", "D", "CM", "M"];
        return _this;
    }
    return UpperRomanNumberConverterClassic;
}(RomanNumberConverter));
exports.UpperRomanNumberConverterClassic = UpperRomanNumberConverterClassic;
var LowerRomanNumberConverterClassic = (function (_super) {
    tslib_1.__extends(LowerRomanNumberConverterClassic, _super);
    function LowerRomanNumberConverterClassic() {
        var _this = _super.call(this) || this;
        _this.type = list_level_properties_1.NumberingFormat.LowerRoman;
        _this.arabics = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];
        _this.romans = ["i", "iv", "v", "ix", "x", "xl", "l", "xc", "c", "cd", "d", "cm", "m"];
        return _this;
    }
    return LowerRomanNumberConverterClassic;
}(RomanNumberConverter));
exports.LowerRomanNumberConverterClassic = LowerRomanNumberConverterClassic;
