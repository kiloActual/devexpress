"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var numerics_provider_1 = require("./numerics-provider");
var ordinal_based_number_converter_1 = require("./ordinal-based-number-converter");
var DigitType;
(function (DigitType) {
    DigitType[DigitType["Zero"] = 0] = "Zero";
    DigitType[DigitType["SingleNumeral"] = 1] = "SingleNumeral";
    DigitType[DigitType["Single"] = 2] = "Single";
    DigitType[DigitType["Teen"] = 3] = "Teen";
    DigitType[DigitType["Tenth"] = 4] = "Tenth";
    DigitType[DigitType["Hundred"] = 5] = "Hundred";
    DigitType[DigitType["Thousand"] = 6] = "Thousand";
    DigitType[DigitType["Million"] = 7] = "Million";
    DigitType[DigitType["Billion"] = 8] = "Billion";
    DigitType[DigitType["Trillion"] = 9] = "Trillion";
    DigitType[DigitType["Quadrillion"] = 10] = "Quadrillion";
    DigitType[DigitType["Quintillion"] = 11] = "Quintillion";
    DigitType[DigitType["Separator"] = 12] = "Separator";
})(DigitType = exports.DigitType || (exports.DigitType = {}));
var DigitInfo = (function () {
    function DigitInfo(provider, value, type) {
        this.provider = provider;
        this.value = value;
        this.type = type;
    }
    DigitInfo.prototype.convertToString = function () {
        var numerics = this.getNumerics();
        return numerics[this.value];
    };
    DigitInfo.prototype.getNumerics = function () {
        return [];
    };
    return DigitInfo;
}());
exports.DigitInfo = DigitInfo;
var SeparatorDigitInfo = (function (_super) {
    tslib_1.__extends(SeparatorDigitInfo, _super);
    function SeparatorDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Separator) || this;
    }
    SeparatorDigitInfo.prototype.getNumerics = function () {
        return this.provider.separator;
    };
    return SeparatorDigitInfo;
}(DigitInfo));
exports.SeparatorDigitInfo = SeparatorDigitInfo;
var QuintillionDigitInfo = (function (_super) {
    tslib_1.__extends(QuintillionDigitInfo, _super);
    function QuintillionDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Quintillion) || this;
    }
    QuintillionDigitInfo.prototype.getNumerics = function () {
        return this.provider.quintillion;
    };
    return QuintillionDigitInfo;
}(DigitInfo));
exports.QuintillionDigitInfo = QuintillionDigitInfo;
var QuadrillionDigitInfo = (function (_super) {
    tslib_1.__extends(QuadrillionDigitInfo, _super);
    function QuadrillionDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Quadrillion) || this;
    }
    QuadrillionDigitInfo.prototype.getNumerics = function () {
        return this.provider.quadrillion;
    };
    return QuadrillionDigitInfo;
}(DigitInfo));
exports.QuadrillionDigitInfo = QuadrillionDigitInfo;
var TrillionDigitInfo = (function (_super) {
    tslib_1.__extends(TrillionDigitInfo, _super);
    function TrillionDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Trillion) || this;
    }
    TrillionDigitInfo.prototype.getNumerics = function () {
        return this.provider.trillion;
    };
    return TrillionDigitInfo;
}(DigitInfo));
exports.TrillionDigitInfo = TrillionDigitInfo;
var BillionDigitInfo = (function (_super) {
    tslib_1.__extends(BillionDigitInfo, _super);
    function BillionDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Billion) || this;
    }
    BillionDigitInfo.prototype.getNumerics = function () {
        return this.provider.billion;
    };
    return BillionDigitInfo;
}(DigitInfo));
exports.BillionDigitInfo = BillionDigitInfo;
var MillionDigitInfo = (function (_super) {
    tslib_1.__extends(MillionDigitInfo, _super);
    function MillionDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Million) || this;
    }
    MillionDigitInfo.prototype.getNumerics = function () {
        return this.provider.million;
    };
    return MillionDigitInfo;
}(DigitInfo));
exports.MillionDigitInfo = MillionDigitInfo;
var ThousandDigitInfo = (function (_super) {
    tslib_1.__extends(ThousandDigitInfo, _super);
    function ThousandDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Million) || this;
    }
    ThousandDigitInfo.prototype.getNumerics = function () {
        return this.provider.thousands;
    };
    return ThousandDigitInfo;
}(DigitInfo));
exports.ThousandDigitInfo = ThousandDigitInfo;
var HundredDigitInfo = (function (_super) {
    tslib_1.__extends(HundredDigitInfo, _super);
    function HundredDigitInfo(provider, value) {
        return _super.call(this, provider, value - 1, DigitType.Hundred) || this;
    }
    HundredDigitInfo.prototype.getNumerics = function () {
        return this.provider.hundreds;
    };
    return HundredDigitInfo;
}(DigitInfo));
exports.HundredDigitInfo = HundredDigitInfo;
var TenthsDigitInfo = (function (_super) {
    tslib_1.__extends(TenthsDigitInfo, _super);
    function TenthsDigitInfo(provider, value) {
        return _super.call(this, provider, value - 2, DigitType.Tenth) || this;
    }
    TenthsDigitInfo.prototype.getNumerics = function () {
        return this.provider.tenths;
    };
    return TenthsDigitInfo;
}(DigitInfo));
exports.TenthsDigitInfo = TenthsDigitInfo;
var TeensDigitInfo = (function (_super) {
    tslib_1.__extends(TeensDigitInfo, _super);
    function TeensDigitInfo(provider, value) {
        return _super.call(this, provider, value, DigitType.Teen) || this;
    }
    TeensDigitInfo.prototype.getNumerics = function () {
        return this.provider.teens;
    };
    return TeensDigitInfo;
}(DigitInfo));
exports.TeensDigitInfo = TeensDigitInfo;
var SingleDigitInfo = (function (_super) {
    tslib_1.__extends(SingleDigitInfo, _super);
    function SingleDigitInfo(provider, value) {
        return _super.call(this, provider, value - 1, DigitType.Single) || this;
    }
    SingleDigitInfo.prototype.getNumerics = function () {
        return this.provider.singles;
    };
    return SingleDigitInfo;
}(DigitInfo));
exports.SingleDigitInfo = SingleDigitInfo;
var ZeroDigitInfo = (function (_super) {
    tslib_1.__extends(ZeroDigitInfo, _super);
    function ZeroDigitInfo(provider) {
        return _super.call(this, provider, 9, DigitType.Zero) || this;
    }
    ZeroDigitInfo.prototype.getNumerics = function () {
        return this.provider.singles;
    };
    return ZeroDigitInfo;
}(DigitInfo));
exports.ZeroDigitInfo = ZeroDigitInfo;
var DescriptiveEnglishNumberConverter = (function (_super) {
    tslib_1.__extends(DescriptiveEnglishNumberConverter, _super);
    function DescriptiveEnglishNumberConverter() {
        var _this = _super.call(this) || this;
        _this.minValue = 0;
        return _this;
    }
    DescriptiveEnglishNumberConverter.prototype.convertNumberCore = function (value) {
        var digits = this.generateDigits(value);
        return this.convertDigitsToString(digits);
    };
    DescriptiveEnglishNumberConverter.prototype.generateDigits = function (value) {
        var digits = [];
        digits = this.generateDigitsCore(digits, value);
        if (digits.length == 0)
            this.addZero(digits);
        return digits;
    };
    DescriptiveEnglishNumberConverter.prototype.generateDigitsCore = function (digits, value) {
        var currentValue = value;
        if (Math.floor(currentValue / 1000000000000000000) != 0)
            this.generateQuintillionDigits(digits, Math.floor(currentValue / 1000000000000000000));
        currentValue = currentValue % 1000000000000000000;
        if (Math.floor(currentValue / 1000000000000000) != 0)
            this.generateQuadrillionDigits(digits, Math.floor(currentValue / 1000000000000000));
        currentValue = currentValue % 1000000000000000;
        if (Math.floor(currentValue / 1000000000000) != 0)
            this.generateTrillionDigits(digits, Math.floor(currentValue / 1000000000000));
        currentValue = currentValue % 1000000000000;
        if (Math.floor(currentValue / 1000000000) != 0)
            this.generateBillionDigits(digits, Math.floor(currentValue / 1000000000));
        currentValue = currentValue % 1000000000;
        if (Math.floor(currentValue / 1000000) != 0)
            this.generateMillionDigits(digits, Math.floor(currentValue / 1000000));
        currentValue = currentValue % 1000000;
        if (Math.floor(currentValue / 1000) != 0)
            this.generateThousandDigits(digits, Math.floor(currentValue / 1000));
        currentValue = currentValue % 1000;
        if (Math.floor(currentValue / 100) != 0)
            this.generateHundredDigits(digits, Math.floor(currentValue / 100));
        currentValue = currentValue % 100;
        if (currentValue == 0)
            return digits;
        if (currentValue >= 20)
            this.generateTenthsDigits(digits, currentValue);
        else {
            if (currentValue >= 10)
                this.generateTeensDigits(digits, currentValue % 10);
            else
                this.generateSinglesDigits(digits, currentValue);
        }
        return digits;
    };
    DescriptiveEnglishNumberConverter.prototype.convertDigitsToString = function (digits) {
        var result = "";
        for (var i = 0; i < digits.length; i++)
            result += digits[i].convertToString();
        if (result.length > 0)
            result = result[0].toUpperCase() + result.substring(1);
        return result;
    };
    DescriptiveEnglishNumberConverter.prototype.addZero = function (digits) {
        digits.push(new ZeroDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider()));
    };
    DescriptiveEnglishNumberConverter.prototype.generateQuintillionDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new QuintillionDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateQuadrillionDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new QuadrillionDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateTrillionDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new TrillionDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateBillionDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new BillionDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateMillionDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new MillionDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateThousandDigits = function (digits, value) {
        this.generateDigitsCore(digits, value);
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new ThousandDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
    };
    DescriptiveEnglishNumberConverter.prototype.generateHundredDigits = function (digits, value) {
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new HundredDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), value));
    };
    DescriptiveEnglishNumberConverter.prototype.generateTenthsDigits = function (digits, value) {
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new TenthsDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), Math.floor(value / 10)));
        this.generateSinglesDigits(digits, value % 10);
    };
    DescriptiveEnglishNumberConverter.prototype.generateTeensDigits = function (digits, value) {
        if (digits.length)
            digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        digits.push(new TeensDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), value));
    };
    DescriptiveEnglishNumberConverter.prototype.generateSinglesDigits = function (digits, value) {
        if (value == 0)
            return;
        if (digits.length != 0) {
            if (digits[digits.length - 1].type == DigitType.Tenth)
                digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 1));
            else
                digits.push(new SeparatorDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), 0));
        }
        digits.push(new SingleDigitInfo(new numerics_provider_1.CardinalEnglishNumericsProvider(), value));
    };
    return DescriptiveEnglishNumberConverter;
}(ordinal_based_number_converter_1.OrdinalBasedNumberConverter));
exports.DescriptiveEnglishNumberConverter = DescriptiveEnglishNumberConverter;
var DescriptiveCardinalEnglishNumberConverter = (function (_super) {
    tslib_1.__extends(DescriptiveCardinalEnglishNumberConverter, _super);
    function DescriptiveCardinalEnglishNumberConverter() {
        var _this = _super.call(this) || this;
        _this.type = list_level_properties_1.NumberingFormat.CardinalText;
        return _this;
    }
    return DescriptiveCardinalEnglishNumberConverter;
}(DescriptiveEnglishNumberConverter));
exports.DescriptiveCardinalEnglishNumberConverter = DescriptiveCardinalEnglishNumberConverter;
var DescriptiveOrdinalEnglishNumberConverter = (function (_super) {
    tslib_1.__extends(DescriptiveOrdinalEnglishNumberConverter, _super);
    function DescriptiveOrdinalEnglishNumberConverter() {
        var _this = _super.call(this) || this;
        _this.type = list_level_properties_1.NumberingFormat.OrdinalText;
        return _this;
    }
    DescriptiveOrdinalEnglishNumberConverter.prototype.generateDigits = function (value) {
        var digits = _super.prototype.generateDigits.call(this, value);
        digits[digits.length - 1].provider = new numerics_provider_1.OrdinalEnglishNumericsProvider();
        return digits;
    };
    return DescriptiveOrdinalEnglishNumberConverter;
}(DescriptiveEnglishNumberConverter));
exports.DescriptiveOrdinalEnglishNumberConverter = DescriptiveOrdinalEnglishNumberConverter;
