"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var constants_1 = require("@devexpress/utils/lib/constants");
var list_level_properties_1 = require("../numbering-lists/list-level-properties");
var OrdinalBasedNumberConverter = (function () {
    function OrdinalBasedNumberConverter() {
        this.maxValue = constants_1.Constants.MAX_SAFE_INTEGER;
        this.minValue = constants_1.Constants.MIN_SAFE_INTEGER;
    }
    OrdinalBasedNumberConverter.prototype.convertNumber = function (value) {
        if (value >= this.minValue && value <= this.maxValue) {
            return this.convertNumberCore(value);
        }
        throw new Error("InvalidNumberConverterValue");
    };
    return OrdinalBasedNumberConverter;
}());
exports.OrdinalBasedNumberConverter = OrdinalBasedNumberConverter;
var OrdinalEnglishNumberConverter = (function (_super) {
    tslib_1.__extends(OrdinalEnglishNumberConverter, _super);
    function OrdinalEnglishNumberConverter(simpleFormattersManager) {
        var _this = _super.call(this) || this;
        _this.ending = ["st", "nd", "rd", "th"];
        _this.simpleFormattersManager = simpleFormattersManager;
        _this.type = list_level_properties_1.NumberingFormat.Ordinal;
        return _this;
    }
    OrdinalEnglishNumberConverter.prototype.convertNumberCore = function (value) {
        var temp = value % 100;
        if (temp < 21) {
            switch (temp) {
                case 1:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[0]);
                case 2:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[1]);
                case 3:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[2]);
                default:
                    return this.simpleFormattersManager.formatString("{0}{1}", value, this.ending[3]);
            }
        }
        value--;
        temp = value % 10;
        if (temp < 3)
            return this.simpleFormattersManager.formatString("{0}{1}", value + 1, this.ending[temp % 3]);
        return this.simpleFormattersManager.formatString("{0}{1}", value + 1, this.ending[3]);
    };
    return OrdinalEnglishNumberConverter;
}(OrdinalBasedNumberConverter));
exports.OrdinalEnglishNumberConverter = OrdinalEnglishNumberConverter;
