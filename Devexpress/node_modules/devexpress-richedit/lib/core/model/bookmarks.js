"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var const_1 = require("@devexpress/utils/lib/intervals/const");
var comparers_1 = require("@devexpress/utils/lib/utils/comparers");
var linked_interval_1 = require("./position/linked-interval");
var BookmarkBase = (function (_super) {
    tslib_1.__extends(BookmarkBase, _super);
    function BookmarkBase(positionManager, interval) {
        var _this = _super.call(this) || this;
        _this._interval = new linked_interval_1.LinkedInterval(positionManager, interval);
        return _this;
    }
    Object.defineProperty(BookmarkBase.prototype, "start", {
        get: function () { return this._interval.start; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkBase.prototype, "length", {
        get: function () { return this._interval.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkBase.prototype, "end", {
        get: function () { return this._interval.end; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BookmarkBase.prototype, "interval", {
        get: function () { return this._interval.getFixedInterval(); },
        enumerable: true,
        configurable: true
    });
    BookmarkBase.prototype.equals = function (obj) {
        return obj && this._interval.equals(obj._interval);
    };
    BookmarkBase.prototype.destructor = function (positionManager) {
        this._interval.destructor(positionManager);
    };
    return BookmarkBase;
}(const_1.ConstInterval));
exports.BookmarkBase = BookmarkBase;
var BookmarkNameValidator = (function () {
    function BookmarkNameValidator() {
    }
    BookmarkNameValidator.isValidName = function (name, allowHiddenBookmarks) {
        return name && name.length && !/\d/.test(name[0]) && (allowHiddenBookmarks || name[0] != "_") &&
            !BookmarkNameValidator.prohibitedSymbolsForName.test(name);
    };
    BookmarkNameValidator.prohibitedSymbolsForName = /.*[\`\~\!\@\#\$\%\^\&\*\(\)\+\{\}\|\:\"\<\>\?\-\=\[\]\.\,\;\'\/\\ ].*/;
    return BookmarkNameValidator;
}());
exports.BookmarkNameValidator = BookmarkNameValidator;
var Bookmark = (function (_super) {
    tslib_1.__extends(Bookmark, _super);
    function Bookmark(positionManager, interval, name) {
        var _this = _super.call(this, positionManager, interval) || this;
        _this.name = "";
        _this.name = name;
        return _this;
    }
    Bookmark.isValidName = function (name, allowHiddenBookmarks) {
        return BookmarkNameValidator.isValidName(name, allowHiddenBookmarks);
    };
    Bookmark.prototype.isHidden = function () {
        return this.name.length > 0 && this.name[0] == "_";
    };
    Bookmark.prototype.isToc = function () {
        return this.name.toUpperCase().indexOf("_TOC") == 0;
    };
    Bookmark.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) && this.name == obj.name;
    };
    Object.defineProperty(Bookmark.prototype, "constBookmark", {
        get: function () {
            return new ConstBookmark(this, this.name);
        },
        enumerable: true,
        configurable: true
    });
    Bookmark.prototype.clone = function (subDocument) {
        return new Bookmark(subDocument.positionManager, this.interval, this.name);
    };
    return Bookmark;
}(BookmarkBase));
exports.Bookmark = Bookmark;
var ConstBookmark = (function (_super) {
    tslib_1.__extends(ConstBookmark, _super);
    function ConstBookmark(interval, name) {
        var _this = _super.call(this) || this;
        _this.interval = new boundary_1.BoundaryInterval(interval.start, interval.end);
        _this.name = name;
        return _this;
    }
    Object.defineProperty(ConstBookmark.prototype, "start", {
        get: function () { return this.interval.start; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConstBookmark.prototype, "length", {
        get: function () { return this.interval.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConstBookmark.prototype, "end", {
        get: function () { return this.interval.end; },
        enumerable: true,
        configurable: true
    });
    ConstBookmark.prototype.equals = function (obj) {
        return obj && this.name == obj.name && this.interval.equals(obj.interval);
    };
    ConstBookmark.prototype.createBookmark = function (positionManager) {
        return new Bookmark(positionManager, this.interval, this.name);
    };
    ConstBookmark.comparer = function (a, b) {
        var diff = a.start - b.start;
        return diff == 0 ? comparers_1.Comparers.string(a.name, b.name) : diff;
    };
    return ConstBookmark;
}(const_1.ConstInterval));
exports.ConstBookmark = ConstBookmark;
var BookmarkAndSubDocument = (function () {
    function BookmarkAndSubDocument(bookmark, subDocument) {
        this.bookmark = bookmark;
        this.subDocument = subDocument;
    }
    return BookmarkAndSubDocument;
}());
exports.BookmarkAndSubDocument = BookmarkAndSubDocument;
