"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var non_visual_drawing_object_info_1 = require("../manipulators/picture-manipulator/non-visual-drawing-object-info");
var run_base_1 = require("./run-base");
var run_type_1 = require("./run-type");
var AnchoredTextBoxRun = (function (_super) {
    tslib_1.__extends(AnchoredTextBoxRun, _super);
    function AnchoredTextBoxRun(startOffset, paragraph, charPropsBundle, shape, subDocId, size, anchorInfo, objectId, textBoxProperties, containerProperties) {
        if (containerProperties === void 0) { containerProperties = new non_visual_drawing_object_info_1.NonVisualDrawingObjectInfo(); }
        var _this = _super.call(this, startOffset, paragraph, charPropsBundle, shape, subDocId, textBoxProperties, containerProperties) || this;
        _this.size = size;
        _this.anchorInfo = anchorInfo;
        _this.anchoredObjectID = objectId < 0 ? run_base_1.RunBase.anchoredObjectIdCounter++ : objectId;
        return _this;
    }
    AnchoredTextBoxRun.prototype.getType = function () {
        return run_type_1.RunType.AnchoredTextBoxRun;
    };
    AnchoredTextBoxRun.prototype.clone = function () {
        return new AnchoredTextBoxRun(this.startOffset, this.paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(this.maskedCharacterProperties, this.characterStyle), this.shape.clone(), this.subDocId, this.size.clone(), this.anchorInfo.clone(), -1, this.textBoxProperties.clone(), this.containerProperties.clone());
    };
    AnchoredTextBoxRun.prototype.cloneToNewSubDocument = function (subDocument) {
        return new AnchoredTextBoxRun(this.startOffset, subDocument.getParagraphByPosition(this.paragraph.startLogPosition.value), new properties_bundle_1.MaskedCharacterPropertiesBundle(subDocument.documentModel.cache.maskedCharacterPropertiesCache.getItem(this.maskedCharacterProperties), subDocument.documentModel.stylesManager.getCharacterStyleByName(this.characterStyle.styleName)), this.shape.clone(), this.subDocId, this.size.clone(), this.anchorInfo.clone(), -1, this.textBoxProperties.clone());
    };
    AnchoredTextBoxRun.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.anchorInfo = obj.anchorInfo.clone();
        this.size = obj.size.clone();
    };
    return AnchoredTextBoxRun;
}(run_base_1.TextBoxRun));
exports.AnchoredTextBoxRun = AnchoredTextBoxRun;
