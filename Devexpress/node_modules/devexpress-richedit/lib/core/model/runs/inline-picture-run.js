"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var run_base_1 = require("./run-base");
var run_type_1 = require("./run-type");
var InlinePictureRun = (function (_super) {
    tslib_1.__extends(InlinePictureRun, _super);
    function InlinePictureRun(startOffset, paragraph, charPropsBundle, info) {
        var _this = _super.call(this, startOffset, paragraph, charPropsBundle, info) || this;
        _this.info.publicAPIID = _this.info.publicAPIID >= 0 ? _this.info.publicAPIID : _this.getNextPublicAPIId();
        return _this;
    }
    Object.defineProperty(InlinePictureRun.prototype, "publicAPIId", {
        get: function () { return this.info.publicAPIID; },
        enumerable: true,
        configurable: true
    });
    InlinePictureRun.prototype.getType = function () {
        return run_type_1.RunType.InlinePictureRun;
    };
    InlinePictureRun.prototype.clone = function () {
        var newInfo = this.info.clone();
        newInfo.publicAPIID = -1;
        return new InlinePictureRun(this.startOffset, this.paragraph, new properties_bundle_1.MaskedCharacterPropertiesBundle(this.maskedCharacterProperties, this.characterStyle), newInfo);
    };
    InlinePictureRun.prototype.cloneToNewSubDocument = function (subDocument) {
        var newInfo = this.info.cloneToNewSubDocument(subDocument);
        return new InlinePictureRun(this.startOffset, subDocument.getParagraphByPosition(this.paragraph.startLogPosition.value), new properties_bundle_1.MaskedCharacterPropertiesBundle(subDocument.documentModel.cache.maskedCharacterPropertiesCache.getItem(this.maskedCharacterProperties), subDocument.documentModel.stylesManager.getCharacterStyleByName(this.characterStyle.styleName)), newInfo);
    };
    InlinePictureRun.prototype.getNextPublicAPIId = function () {
        return InlinePictureRun.nextPublicAPIId++;
    };
    InlinePictureRun.nextPublicAPIId = 0;
    return InlinePictureRun;
}(run_base_1.PictureRun));
exports.InlinePictureRun = InlinePictureRun;
