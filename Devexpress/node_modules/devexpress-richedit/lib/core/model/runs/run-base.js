"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var properties_bundle_1 = require("../../rich-utils/properties-bundle");
var character_properties_merger_1 = require("../properties-merger/character-properties-merger");
var RunBase = (function () {
    function RunBase(startOffset, paragraph, charPropsBundle) {
        this.startOffset = startOffset;
        this.paragraph = paragraph;
        this.characterStyle = charPropsBundle.style;
        this.setCharacterProperties(charPropsBundle.props);
        this.mergedCharacterProperties = null;
    }
    RunBase.prototype.isParagraphOrSectionRun = function () {
        return false;
    };
    RunBase.prototype.setCharacterProperties = function (properties) {
        this.maskedCharacterProperties = this.paragraph.subDocument.documentModel.cache.maskedCharacterPropertiesCache.getItem(properties);
    };
    RunBase.prototype.onCharacterPropertiesChanged = function () {
        this.resetCharacterMergedProperties();
    };
    RunBase.prototype.hasCharacterMergedProperies = function () {
        return !!this.mergedCharacterProperties;
    };
    RunBase.prototype.resetCharacterMergedProperties = function () {
        this.mergedCharacterProperties = null;
    };
    RunBase.prototype.getCharacterMergedProperties = function () {
        if (!this.mergedCharacterProperties) {
            var merger = new character_properties_merger_1.CharacterPropertiesMerger();
            merger.mergeCharacterProperties(this.maskedCharacterProperties);
            merger.mergeCharacterStyle(this.characterStyle);
            merger.mergeParagraphStyle(this.paragraph.paragraphStyle);
            var tableCell = this.paragraph.getTableCell();
            if (tableCell)
                merger.mergeTableStyles(tableCell);
            merger.mergeCharacterProperties(this.paragraph.subDocument.documentModel.defaultCharacterProperties);
            this.mergedCharacterProperties = this.paragraph.subDocument.documentModel.cache.mergedCharacterPropertiesCache.getItem(merger.getMergedProperties());
        }
        return this.mergedCharacterProperties;
    };
    RunBase.prototype.setCharacterMergedProperies = function (properties) {
        this.mergedCharacterProperties = this.paragraph.subDocument.documentModel.cache.mergedCharacterPropertiesCache.getItem(properties);
    };
    RunBase.prototype.copyFrom = function (obj) {
        this.startOffset = obj.startOffset;
        this.paragraph = obj.paragraph;
        this.characterStyle = obj.characterStyle;
        this.maskedCharacterProperties = obj.maskedCharacterProperties;
        this.mergedCharacterProperties = obj.mergedCharacterProperties;
    };
    RunBase.prototype.createSimularity = function (startOffset, length, paragraph, characterStyle, maskedCharacterProperties) {
        var simularity = this.clone();
        simularity.startOffset = startOffset;
        simularity.paragraph = paragraph;
        simularity.characterStyle = characterStyle;
        simularity.maskedCharacterProperties = maskedCharacterProperties;
        simularity.setLength(length);
        return simularity;
    };
    RunBase.prototype.getCharPropsBundle = function (model) {
        return new properties_bundle_1.MaskedCharacterPropertiesBundle(model.cache.maskedCharacterPropertiesCache.getItem(this.maskedCharacterProperties), model.stylesManager.addCharacterStyle(this.characterStyle));
    };
    RunBase.anchoredObjectIdCounter = 0;
    return RunBase;
}());
exports.RunBase = RunBase;
var OneCharRun = (function (_super) {
    tslib_1.__extends(OneCharRun, _super);
    function OneCharRun() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OneCharRun.prototype.getLength = function () {
        return 1;
    };
    OneCharRun.prototype.setLength = function (newLength) {
        if (newLength != 1)
            throw new Error(errors_1.Errors.InternalException);
    };
    OneCharRun.prototype.incLength = function (_additionalLength) {
        throw new Error(errors_1.Errors.InternalException);
    };
    return OneCharRun;
}(RunBase));
exports.OneCharRun = OneCharRun;
var PictureRun = (function (_super) {
    tslib_1.__extends(PictureRun, _super);
    function PictureRun(startOffset, paragraph, charPropsBundle, info) {
        var _this = _super.call(this, startOffset, paragraph, charPropsBundle) || this;
        _this.info = info;
        return _this;
    }
    Object.defineProperty(PictureRun.prototype, "shape", {
        get: function () { return this.info.shape; },
        set: function (val) { this.info.shape = val; },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(PictureRun.prototype, "size", {
        get: function () { return this.info.size; },
        set: function (val) { this.info.size = val; },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(PictureRun.prototype, "cacheInfo", {
        get: function () { return this.info.cacheInfo; },
        enumerable: true,
        configurable: true
    });
    ;
    PictureRun.prototype.getActualSize = function () {
        return this.info.size.actualSize;
    };
    PictureRun.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.info = obj.info.clone();
    };
    return PictureRun;
}(OneCharRun));
exports.PictureRun = PictureRun;
var TextBoxRun = (function (_super) {
    tslib_1.__extends(TextBoxRun, _super);
    function TextBoxRun(startOffset, paragraph, charPropsBundle, shape, subDocId, textBoxProperties, containerProperties) {
        var _this = _super.call(this, startOffset, paragraph, charPropsBundle) || this;
        _this.shape = shape;
        _this.subDocId = subDocId;
        _this.textBoxProperties = textBoxProperties;
        _this.containerProperties = containerProperties;
        return _this;
    }
    TextBoxRun.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.shape = obj.shape.clone();
        this.subDocId = obj.subDocId;
    };
    return TextBoxRun;
}(OneCharRun));
exports.TextBoxRun = TextBoxRun;
