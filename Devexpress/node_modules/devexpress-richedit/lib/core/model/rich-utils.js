"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var special_characters_1 = require("./special-characters");
var RichUtils = (function () {
    function RichUtils() {
    }
    RichUtils.getSelectedParagraphs = function (intervals, subDocument) {
        intervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, true);
        var selectedParagraphs = [];
        for (var i = 0, interval; interval = intervals[i]; i++)
            selectedParagraphs = selectedParagraphs.concat(subDocument.getParagraphsByInterval(interval));
        selectedParagraphs = selectedParagraphs.sort(function (a, b) { return a.startLogPosition.value < b.startLogPosition.value ? -1 : 1; });
        var newSelectedParagraphs = [selectedParagraphs[0]];
        var prevLogPos = newSelectedParagraphs[0].startLogPosition.value;
        for (var i = 1, paragraph; paragraph = selectedParagraphs[i]; i++)
            if (paragraph.startLogPosition.value != prevLogPos) {
                newSelectedParagraphs.push(paragraph);
                prevLogPos = paragraph.startLogPosition.value;
            }
        return { paragraphs: newSelectedParagraphs, intervals: intervals };
    };
    RichUtils.getIntervalsOfSelectedParagraphs = function (intervals, subDocument) {
        var result = [];
        var paragraphs = this.getSelectedParagraphs(intervals, subDocument).paragraphs;
        list_1.ListUtils.forEach(paragraphs, function (p) {
            result.push(fixed_1.FixedInterval.fromPositions(p.startLogPosition.value, p.getEndPosition()));
        });
        return result;
    };
    RichUtils.getCopyPasteGuid = function (guids) {
        return "re-rangecopy&" + guids.sguid + "&" + guids.cguid;
    };
    RichUtils.getNextPredefinedFontSize = function (current) {
        var index = search_1.SearchUtils.normedInterpolationIndexOf(RichUtils.predefinedFontSizes, function (a) { return a; }, current);
        return RichUtils.predefinedFontSizes[index + 1] !== undefined ? RichUtils.predefinedFontSizes[index + 1] : (Math.floor(current / 10) * 10 + 10);
    };
    RichUtils.getPreviousPredefinedFontSize = function (current) {
        var index = search_1.SearchUtils.binaryIndexOf(RichUtils.predefinedFontSizes, function (a) { return a - current; });
        if (index > 0)
            return RichUtils.predefinedFontSizes[index - 1];
        if (index < 0)
            index = ~index;
        if (index === 0)
            return Math.max(1, current - 1);
        var predefinedFontsCount = RichUtils.predefinedFontSizes.length;
        if (index < predefinedFontsCount)
            return RichUtils.predefinedFontSizes[index - 1];
        var newValue = current % 10 > 0 ? (Math.floor(current / 10) * 10) : (Math.floor(current / 10) * 10 - 10);
        if (newValue >= RichUtils.predefinedFontSizes[predefinedFontsCount - 1])
            return newValue;
        return RichUtils.predefinedFontSizes[predefinedFontsCount - 1];
    };
    RichUtils.isLatinLetter = /\w/;
    RichUtils.isWhitespace = /\s/;
    RichUtils.isAlphanumeric = /^[\u00C0-\u1FFF\u2C00-\uD7FF\w]+$/;
    RichUtils.predefinedFontSizes = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];
    RichUtils.minFontSize = 1;
    RichUtils.maxFontSize = 600;
    RichUtils.specialCharacters = new special_characters_1.SpecialCharacters();
    return RichUtils;
}());
exports.RichUtils = RichUtils;
