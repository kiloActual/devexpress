"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var math_1 = require("@devexpress/utils/lib/utils/math");
var CheckBoxState;
(function (CheckBoxState) {
    CheckBoxState[CheckBoxState["Unchecked"] = 0] = "Unchecked";
    CheckBoxState[CheckBoxState["Checked"] = 1] = "Checked";
    CheckBoxState[CheckBoxState["Undefined"] = 25] = "Undefined";
})(CheckBoxState = exports.CheckBoxState || (exports.CheckBoxState = {}));
var CheckBoxSizeMode;
(function (CheckBoxSizeMode) {
    CheckBoxSizeMode[CheckBoxSizeMode["Auto"] = 0] = "Auto";
    CheckBoxSizeMode[CheckBoxSizeMode["Exact"] = 1] = "Exact";
})(CheckBoxSizeMode = exports.CheckBoxSizeMode || (exports.CheckBoxSizeMode = {}));
var FormFieldTextType;
(function (FormFieldTextType) {
    FormFieldTextType[FormFieldTextType["Auto"] = 0] = "Auto";
    FormFieldTextType[FormFieldTextType["Custom"] = 1] = "Custom";
})(FormFieldTextType = exports.FormFieldTextType || (exports.FormFieldTextType = {}));
var CheckBoxProperties = (function () {
    function CheckBoxProperties() {
    }
    CheckBoxProperties.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.size ^
            math_1.MathUtils.somePrimes[1] * this.sizeType;
    };
    CheckBoxProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    CheckBoxProperties.prototype.equals = function (obj) {
        return obj &&
            this.checkBoxState == obj.checkBoxState &&
            this.defaultState == obj.defaultState &&
            this.size == obj.size &&
            this.sizeType == obj.sizeType;
    };
    CheckBoxProperties.prototype.copyFrom = function (obj) {
        obj.checkBoxState = this.checkBoxState;
        obj.defaultState = this.defaultState;
        obj.size = this.size;
        obj.sizeType = this.sizeType;
        obj.hash = this.hash;
    };
    CheckBoxProperties.prototype.clone = function () {
        var result = new CheckBoxProperties();
        result.copyFrom(this);
        return result;
    };
    return CheckBoxProperties;
}());
exports.CheckBoxProperties = CheckBoxProperties;
var MaskedCheckBoxPropertiesMask;
(function (MaskedCheckBoxPropertiesMask) {
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseNone"] = 0] = "UseNone";
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseState"] = 4] = "UseState";
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseDefaultState"] = 8] = "UseDefaultState";
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseSize"] = 16] = "UseSize";
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseSizeMode"] = 32] = "UseSizeMode";
    MaskedCheckBoxPropertiesMask[MaskedCheckBoxPropertiesMask["UseAll"] = 2147483647] = "UseAll";
})(MaskedCheckBoxPropertiesMask = exports.MaskedCheckBoxPropertiesMask || (exports.MaskedCheckBoxPropertiesMask = {}));
var MaskedCheckBoxProperties = (function (_super) {
    tslib_1.__extends(MaskedCheckBoxProperties, _super);
    function MaskedCheckBoxProperties() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.useValue = MaskedCheckBoxPropertiesMask.UseNone;
        return _this;
    }
    MaskedCheckBoxProperties.prototype.calculateHash = function () {
        return _super.prototype.calculateHash.call(this) +
            math_1.MathUtils.somePrimes[15] * this.useValue;
    };
    MaskedCheckBoxProperties.prototype.getUseValue = function (value) {
        return (this.useValue & value) != 0;
    };
    MaskedCheckBoxProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.useValue |= mask;
        else
            this.useValue &= ~mask;
    };
    MaskedCheckBoxProperties.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.useValue == obj.useValue;
    };
    MaskedCheckBoxProperties.prototype.clone = function () {
        var result = new MaskedCheckBoxProperties();
        result.copyFrom(this);
        result.useValue = this.useValue;
        return result;
    };
    return MaskedCheckBoxProperties;
}(CheckBoxProperties));
exports.MaskedCheckBoxProperties = MaskedCheckBoxProperties;
