"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var json_field_enums_1 = require("../../json/enums/json-field-enums");
var insert_text_manipulator_params_1 = require("../../manipulators/text-manipulator/insert-text-manipulator-params");
var run_type_1 = require("../../runs/run-type");
var sub_document_1 = require("../../sub-document");
var field_request_manager_1 = require("../field-request-manager");
var names_1 = require("../names");
var field_code_parser_1 = require("./field-code-parser");
var field_code_parser_doc_variable_1 = require("./field-code-parser-doc-variable");
var FieldCodeParserMailMerge = (function (_super) {
    tslib_1.__extends(FieldCodeParserMailMerge, _super);
    function FieldCodeParserMailMerge() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserMailMerge.prototype, "name", {
        get: function () { return names_1.FieldName.MergeField; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserMailMerge.prototype.getMailMergeType = function () {
        return field_code_parser_1.FieldMailMergeType.MailMerge;
    };
    FieldCodeParserMailMerge.prototype.insertDefaultText = function () {
        if (this.modelManager.richOptions.mailMerge.isEnabled && this.modelManager.richOptions.mailMerge.viewMergedData)
            return false;
        var defaultText = this.modelManager.model.simpleFormattersManager.formatString("<<{0}>>", this.parameterInfoList[0].text);
        this.setInputPositionState();
        this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, this.getTopField().getResultInterval()), true, false);
        this.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, this.getTopField().getResultInterval().start), this.inputPos.charPropsBundle, run_type_1.RunType.TextRun, defaultText));
        return true;
    };
    FieldCodeParserMailMerge.prototype.getRequestData = function () {
        return new field_request_manager_1.FieldMailMergeRequestData(this.parameterInfoList[0].text);
    };
    FieldCodeParserMailMerge.prototype.getMergeFieldName = function () {
        if (this.parameterInfoList.length == 0)
            this.parseSwitchesAndArgs(true);
        return this.parameterInfoList[0] ? this.parameterInfoList[0].text : '';
    };
    FieldCodeParserMailMerge.prototype.applyResponse = function (response) {
        var simpleText = response[json_field_enums_1.JSONUpdateFieldCommandResult.SimpleText];
        if (simpleText === null)
            return false;
        var fieldResultInterval = this.getTopField().getResultInterval();
        this.modelManager.modelManipulator.range.removeInterval(new sub_document_1.SubDocumentInterval(this.subDocument, fieldResultInterval), true, false);
        if (simpleText !== "") {
            this.setInputPositionState();
            this.modelManager.modelManipulator.text.insertTextViaHistory(new insert_text_manipulator_params_1.InsertTextManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, fieldResultInterval.start), this.inputPos.charPropsBundle, run_type_1.RunType.TextRun, this.getFormattedResult(simpleText)));
        }
        return true;
    };
    return FieldCodeParserMailMerge;
}(field_code_parser_doc_variable_1.FieldCodeParserDocVariable));
exports.FieldCodeParserMailMerge = FieldCodeParserMailMerge;
