"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var layout_position_creator_1 = require("../../../layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../../layout/document-layout-details-level");
var names_1 = require("../names");
var field_code_parser_1 = require("./field-code-parser");
var field_code_parser_client_updating_base_1 = require("./field-code-parser-client-updating-base");
var FieldCodeParserPageRef = (function (_super) {
    tslib_1.__extends(FieldCodeParserPageRef, _super);
    function FieldCodeParserPageRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserPageRef.prototype, "name", {
        get: function () { return names_1.FieldName.PageRef; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserPageRef.prototype.fillResult = function () {
        var pos = this.getPosition();
        if (pos == null)
            return true;
        var resultAsLink = false;
        for (var i = 0, switchInfo = void 0; switchInfo = this.switchInfoList[i]; i++)
            if (switchInfo.type == field_code_parser_1.FieldSwitchType.FieldSpecific && switchInfo.name.toUpperCase() == "H")
                resultAsLink = true;
        this.modelManager.history.beginTransaction();
        this.setInputPositionState();
        if (this.subDocument.isMain()) {
            var layoutPosition = layout_position_creator_1.LayoutPositionMainSubDocumentCreator.ensureLayoutPosition(this.layoutFormatterManager, this.subDocument, pos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Page, new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(false), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(true));
            var pageText = this.getFormattedResult(layoutPosition.pageIndex + 1);
            this.replaceTextByInterval(this.getTopField().getResultInterval(), pageText);
            if (resultAsLink)
                this.createLocalHyperLink(this.getTopField().getResultInterval(), this.getBookmarkName());
        }
        else
            this.replaceTextByLayoutDependentRun(this.getTopField().getResultInterval());
        this.modelManager.history.endTransaction();
        return true;
    };
    FieldCodeParserPageRef.prototype.getPosition = function () {
        var bookmark = this.findBookmark(this.getBookmarkName());
        return bookmark ? bookmark.start : null;
    };
    FieldCodeParserPageRef.prototype.getBookmarkName = function () {
        return this.parameterInfoList[0] ? this.parameterInfoList[0].text : "";
    };
    FieldCodeParserPageRef.prototype.findBookmark = function (name) {
        name = name.toUpperCase();
        for (var _i = 0, _a = this.subDocument.bookmarks; _i < _a.length; _i++) {
            var bm = _a[_i];
            if (bm.name.toUpperCase() == name)
                return bm;
        }
        return null;
    };
    return FieldCodeParserPageRef;
}(field_code_parser_client_updating_base_1.FieldCodeParserClientUpdatingBase));
exports.FieldCodeParserPageRef = FieldCodeParserPageRef;
