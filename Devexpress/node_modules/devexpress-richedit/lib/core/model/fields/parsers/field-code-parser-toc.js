"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var layout_tab_space_box_1 = require("../../../layout/main-structures/layout-boxes/layout-tab-space-box");
var properties_bundle_1 = require("../../../rich-utils/properties-bundle");
var bookmarks_1 = require("../../bookmarks");
var bookmark_history_items_1 = require("../../history/items/bookmark-history-items");
var field_insert_history_item_1 = require("../../history/items/field-insert-history-item");
var paragraph_properties_history_items_1 = require("../../history/items/paragraph-properties-history-items");
var insert_paragraph_manipulator_params_1 = require("../../manipulators/paragraph-manipulator/insert-paragraph-manipulator-params");
var paragraph_1 = require("../../paragraph/paragraph");
var paragraph_style_1 = require("../../paragraph/paragraph-style");
var rich_utils_1 = require("../../rich-utils");
var sub_document_1 = require("../../sub-document");
var field_1 = require("../field");
var field_request_manager_1 = require("../field-request-manager");
var names_1 = require("../names");
var tree_creator_1 = require("../tree-creator");
var field_code_parser_1 = require("./field-code-parser");
var field_code_parser_client_updating_base_1 = require("./field-code-parser-client-updating-base");
var FieldCodeParserToc = (function (_super) {
    tslib_1.__extends(FieldCodeParserToc, _super);
    function FieldCodeParserToc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserToc.prototype, "name", {
        get: function () { return names_1.FieldName.Toc; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserToc.prototype.fillResult = function () {
        this.modelManager.history.beginTransaction();
        var params = this.getTocParserParams();
        var tocElements = this.createTocElements(params);
        this.setInputPositionState();
        this.resetParagraphTabs();
        if (tocElements.length > 0)
            this.createToc(tocElements, params);
        else
            this.insertNoTocText();
        this.modelManager.history.endTransaction();
        return true;
    };
    FieldCodeParserToc.prototype.createTocElements = function (params) {
        if (params.fromTc)
            return this.createTocElementsByTc(params);
        if (params.fromSeq)
            return this.createTocElementsBySeq(params);
        return this.createTocElementsByOutlineLevel(params);
    };
    FieldCodeParserToc.prototype.createTocElementsByTc = function (params) {
        var tocElements = [];
        for (var i = 0, field = void 0; field = this.subDocument.fields[i]; i++)
            if (field.isTcField()) {
                var tcInfo = field.getTcInfo();
                if (tcInfo.identifier.toUpperCase() == params.tcIdentifier.toUpperCase() &&
                    (!params.useSpecifiedTcLevels || (tcInfo.level >= params.tcLevelStart && tcInfo.level <= params.tcLevelEnd))) {
                    var bookmarkName = this.getBookmarkName(field.getAllFieldInterval());
                    if (this.isValidHeading(tcInfo.text))
                        tocElements.push(new TocElement(bookmarkName, tcInfo.text, tcInfo.level, false));
                }
            }
        return tocElements;
    };
    FieldCodeParserToc.prototype.createTocElementsBySeq = function (params) {
        var tocElements = [];
        for (var i = 0, field = void 0; field = this.subDocument.fields[i]; i++)
            if (field.isSequenceField()) {
                var seqInfo = field.getSequenceInfo();
                if (seqInfo.identifier.toUpperCase() == params.seqIdentifier.toUpperCase()) {
                    var paragraph = this.subDocument.getParagraphByPosition(field.getCodeStartPosition());
                    var paragraphInterval = paragraph.interval;
                    paragraphInterval.length -= 1;
                    var text = this.subDocument.getSimpleText(paragraphInterval).trim();
                    var bookmarkName = this.getBookmarkName(paragraphInterval);
                    if (this.isValidHeading(text))
                        tocElements.push(new TocElement(bookmarkName, text, 1, false));
                }
            }
        return tocElements;
    };
    FieldCodeParserToc.prototype.createTocElementsByOutlineLevel = function (params) {
        var tocElements = [];
        for (var i = 0, paragraph = void 0; paragraph = this.subDocument.paragraphs[i]; i++) {
            var level = params.fromOutlineLevel ?
                paragraph.getParagraphMergedProperties().outlineLevel :
                paragraph.paragraphStyle.maskedParagraphProperties.outlineLevel;
            if (level > 0 && (!params.useSpecifiedLevels || (level >= params.specifiedLevelStart && level <= params.specifiedLevelEnd))) {
                var paragraphInterval = paragraph.interval;
                paragraphInterval.length -= 1;
                var bookmarkName = this.getBookmarkName(paragraphInterval);
                var mainText = this.subDocument.getSimpleText(paragraph.interval).trim()
                    .replace(new RegExp(rich_utils_1.RichUtils.specialCharacters.TabMark, "gi"), rich_utils_1.RichUtils.specialCharacters.Space);
                var text = mainText;
                var hasNumbering = paragraph.getNumberingListIndex() >= 0;
                if (hasNumbering)
                    text = paragraph.getNumberingListText() + paragraph.getNumberingListSeparatorChar() + mainText;
                if (this.isValidHeading(text))
                    tocElements.push(new TocElement(bookmarkName, text, level, hasNumbering));
            }
        }
        return tocElements;
    };
    FieldCodeParserToc.prototype.createToc = function (tocElements, params) {
        var fieldsForUpdate = [];
        for (var i = 0, tocElement = void 0; tocElement = tocElements[i]; i++) {
            var startPos = this.interval.start;
            this.resetParagraphTabs();
            this.insertHeading(tocElement);
            if (tocElement.hasNumbering)
                this.insertTocNumberingTabInfo(tocElement.level);
            if (!params.useCustomSeparator)
                this.insertDotTabInfo();
            if (!params.omitsPageNumbers || tocElement.level < params.omitsPageNumbersStart || tocElement.level > params.omitsPageNumbersEnd) {
                this.insertSeparator(params);
                fieldsForUpdate.push(this.insetPageRef(tocElement));
            }
            if (params.asHyperlink)
                this.createLocalHyperLink(fixed_1.FixedInterval.fromPositions(startPos, this.interval.end), tocElement.bookmarkName);
            this.setParagraphStyle(tocElement);
            if (tocElements[i + 1]) {
                this.removeInterval(this.interval);
                this.modelManager.modelManipulator.paragraph.insertParagraphViaHistory(new insert_paragraph_manipulator_params_1.InsertParagraphManipulatorParams(new sub_document_1.SubDocumentPosition(this.subDocument, this.interval.start), this.inputPos.charPropsBundle, properties_bundle_1.MaskedParagraphPropertiesBundleFull.notSetted, true, function () { }));
            }
        }
        if (fieldsForUpdate.length > 0) {
            var intervalsForUpdate_1 = [];
            list_1.ListUtils.forEach(fieldsForUpdate, function (field) {
                intervalsForUpdate_1.push(field.getAllFieldInterval());
            });
            new tree_creator_1.FieldsWaitingForUpdate(this.modelManager, this.layoutFormatterManager, new field_request_manager_1.TocFieldRequestManager(), new sub_document_1.SubDocumentIntervals(this.subDocument, intervalsForUpdate_1), new tree_creator_1.UpdateFieldsOptions(), function () { }).update(null);
        }
    };
    FieldCodeParserToc.prototype.insertNoTocText = function () {
        this.replaceTextByInterval(this.interval, this.layoutFormatterManager.stringResources.commonLabels.noTocEntriesFound);
    };
    FieldCodeParserToc.prototype.resetParagraphTabs = function () {
        var paragraphIndex = this.subDocument.getParagraphIndexByPosition(this.interval.start);
        var paragraph = this.subDocument.paragraphs[paragraphIndex];
        var tabs = paragraph.getTabs();
        var tab;
        while (tab = tabs.positions.pop())
            this.modelManager.history.addAndRedo(new paragraph_properties_history_items_1.DeleteTabAtParagraphHistoryItem(this.modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(this.subDocument, paragraph.interval), tab));
    };
    FieldCodeParserToc.prototype.setParagraphStyle = function (tocElement) {
        var paragraph = this.subDocument.paragraphs[this.subDocument.getParagraphIndexByPosition(this.interval.start)];
        this.modelManager.modelManipulator.style.applyParagraphStyleByName(new sub_document_1.SubDocumentInterval(this.subDocument, paragraph.interval), paragraph_style_1.ParagraphStyle.tocStyleName + " " + tocElement.level);
    };
    FieldCodeParserToc.prototype.insertHeading = function (tocElement) {
        this.replaceTextByInterval(this.interval, tocElement.text);
    };
    FieldCodeParserToc.prototype.insertSeparator = function (params) {
        var separator = params.useCustomSeparator ? params.separator : rich_utils_1.RichUtils.specialCharacters.TabMark;
        this.replaceTextByInterval(this.interval, separator);
    };
    FieldCodeParserToc.prototype.insertDotTabInfo = function () {
        var sectionProperties = this.modelManager.model.getSectionByPosition(this.interval.start).sectionProperties;
        var tabPosition = sectionProperties.pageWidth - sectionProperties.marginLeft - sectionProperties.marginRight;
        this.insertTabInfo(tabPosition, layout_tab_space_box_1.TabLeaderType.Dots, paragraph_1.TabAlign.Right, false);
    };
    FieldCodeParserToc.prototype.insertTocNumberingTabInfo = function (level) {
        var tocTabWidth = unit_converter_1.UnitConverter.inchesToTwips(0.31) + (level - 1) * unit_converter_1.UnitConverter.inchesToTwips(0.15);
        this.insertTabInfo(tocTabWidth, layout_tab_space_box_1.TabLeaderType.None, paragraph_1.TabAlign.Left, true);
    };
    FieldCodeParserToc.prototype.insertTabInfo = function (tabPosition, tabLeaderType, tabAlign, isDefault) {
        var interval = this.interval;
        var tabInfo = new paragraph_style_1.TabInfo(tabPosition, tabAlign, tabLeaderType, false, isDefault);
        this.modelManager.history.addAndRedo(new paragraph_properties_history_items_1.InsertTabToParagraphHistoryItem(this.modelManager.modelManipulator, new sub_document_1.SubDocumentInterval(this.subDocument, interval), tabInfo));
    };
    FieldCodeParserToc.prototype.insetPageRef = function (tocElement) {
        var interval = this.interval;
        this.modelManager.history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(this.modelManager.modelManipulator, this.subDocument, interval.start, 0, interval.length, false, this.inputPos.charPropsBundle));
        var fieldIndex = field_1.Field.normedBinaryIndexOf(this.subDocument.fields, interval.start + 1);
        var field = this.subDocument.fields[fieldIndex];
        var code = this.modelManager.model.simpleFormattersManager.formatString("PAGEREF \"{0}\" \\h", tocElement.bookmarkName);
        this.replaceTextByInterval(field.getCodeInterval(), code);
        return field;
    };
    FieldCodeParserToc.prototype.getTocParserParams = function () {
        var params = new TocParserParameters();
        for (var i = 0, switchInfo = void 0; switchInfo = this.switchInfoList[i]; i++)
            if (switchInfo.type == field_code_parser_1.FieldSwitchType.FieldSpecific) {
                switch (switchInfo.name.toLocaleUpperCase()) {
                    case "H":
                        params.asHyperlink = true;
                        break;
                    case "F":
                        params.tcIdentifier = switchInfo.arg;
                        params.fromTc = !!params.tcIdentifier;
                        break;
                    case "C":
                        params.seqIdentifier = switchInfo.arg;
                        params.fromSeq = !!params.seqIdentifier;
                        break;
                    case "U":
                        params.fromOutlineLevel = true;
                        break;
                    case "P":
                        params.useCustomSeparator = true;
                        params.separator = switchInfo.arg;
                        break;
                    case "O":
                        var oArg = new RangedArg(switchInfo.arg);
                        params.useSpecifiedLevels = oArg.isValid();
                        params.specifiedLevelStart = oArg.getStart();
                        params.specifiedLevelEnd = oArg.getEnd();
                        break;
                    case "L":
                        var lArg = new RangedArg(switchInfo.arg);
                        params.useSpecifiedTcLevels = lArg.isValid();
                        params.tcLevelStart = lArg.getStart();
                        params.tcLevelEnd = lArg.getEnd();
                        break;
                    case "N":
                        params.omitsPageNumbers = true;
                        var nArg = new RangedArg(switchInfo.arg);
                        if (nArg.isValid()) {
                            params.omitsPageNumbersStart = nArg.getStart();
                            params.omitsPageNumbersEnd = nArg.getEnd();
                        }
                        else {
                            params.omitsPageNumbersStart = 1;
                            params.omitsPageNumbersEnd = 9;
                        }
                        break;
                }
            }
        return params;
    };
    FieldCodeParserToc.prototype.isValidHeading = function (text) {
        if (!text)
            return false;
        for (var i = 0, char = void 0; char = text[i]; i++)
            if (!rich_utils_1.RichUtils.isWhitespace.test(char))
                return true;
        return false;
    };
    Object.defineProperty(FieldCodeParserToc.prototype, "interval", {
        get: function () {
            var pos = this.getTopField().getResultInterval().end;
            return new fixed_1.FixedInterval(pos, 0);
        },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserToc.prototype.getBookmarkName = function (interval) {
        var bookmark = list_1.ListUtils.elementBy(this.subDocument.bookmarks, function (bm) { return bm.isToc() &&
            bm.start == interval.start && bm.end == interval.end; });
        return bookmark ? bookmark.name : this.createNewBookmark(interval);
    };
    FieldCodeParserToc.prototype.createNewBookmark = function (interval) {
        var name = this.generateNewBookmarkName();
        this.modelManager.history.addAndRedo(new bookmark_history_items_1.CreateBookmarkHistoryItem(this.modelManager.modelManipulator, this.subDocument, new bookmarks_1.ConstBookmark(interval, name)));
        return name;
    };
    FieldCodeParserToc.prototype.generateNewBookmarkName = function () {
        while (true) {
            var name_1 = this.modelManager.model.simpleFormattersManager.formatString("_Toc{0}", math_1.MathUtils.getRandomInt(0, 10000000000));
            for (var i = 0, bookmark = void 0; bookmark = this.subDocument.bookmarks[i]; i++)
                if (bookmark.name.toUpperCase() == name_1.toUpperCase())
                    continue;
            return name_1;
        }
    };
    return FieldCodeParserToc;
}(field_code_parser_client_updating_base_1.FieldCodeParserClientUpdatingBase));
exports.FieldCodeParserToc = FieldCodeParserToc;
var TocParserParameters = (function () {
    function TocParserParameters() {
        this.asHyperlink = false;
        this.fromOutlineLevel = false;
        this.fromTc = false;
        this.fromSeq = false;
        this.useCustomSeparator = false;
        this.useSpecifiedLevels = false;
        this.omitsPageNumbers = false;
        this.useSpecifiedTcLevels = false;
    }
    return TocParserParameters;
}());
exports.TocParserParameters = TocParserParameters;
var TocElement = (function () {
    function TocElement(bookmarkName, text, level, hasNumbering) {
        this.bookmarkName = bookmarkName;
        this.text = text;
        this.level = level;
        this.hasNumbering = hasNumbering;
    }
    return TocElement;
}());
exports.TocElement = TocElement;
var RangedArg = (function () {
    function RangedArg(arg) {
        this.start = Number(arg.split('-')[0]);
        this.end = Number(arg.split('-')[1]);
    }
    RangedArg.prototype.getStart = function () {
        return this.isValid() ? this.start : null;
    };
    RangedArg.prototype.getEnd = function () {
        return this.isValid() ? this.end : null;
    };
    RangedArg.prototype.isValid = function () {
        return !isNaN(this.start) && !isNaN(this.end) && this.start >= 0 && this.end >= 0 && this.end >= this.start;
    };
    return RangedArg;
}());
exports.RangedArg = RangedArg;
