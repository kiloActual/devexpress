"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var json_field_enums_1 = require("../../json/enums/json-field-enums");
var server_model_inserter_1 = require("../../json/importers/server-model-inserter");
var rich_utils_1 = require("../../rich-utils");
var sub_document_1 = require("../../sub-document");
var field_request_manager_1 = require("../field-request-manager");
var names_1 = require("../names");
var field_code_parser_1 = require("./field-code-parser");
var FieldCodeParserDocVariable = (function (_super) {
    tslib_1.__extends(FieldCodeParserDocVariable, _super);
    function FieldCodeParserDocVariable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserDocVariable.prototype, "name", {
        get: function () { return names_1.FieldName.DocVariable; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserDocVariable.prototype.getMailMergeType = function () {
        return field_code_parser_1.FieldMailMergeType.NonMailMerge;
    };
    FieldCodeParserDocVariable.prototype.parseCodeCurrentFieldInternal = function (responce) {
        if (responce && this.fieldID != undefined && responce[this.fieldID]) {
            if (this.applyResponse(responce[this.fieldID]))
                this.parserState = field_code_parser_1.FieldCodeParserState.resultPartCreated;
            else
                this.parserState = field_code_parser_1.FieldCodeParserState.end;
            return true;
        }
        if (!this.parseSwitchesAndArgs(true)) {
            this.parserState = field_code_parser_1.FieldCodeParserState.end;
            return true;
        }
        if (this.insertDefaultText()) {
            this.parserState = field_code_parser_1.FieldCodeParserState.end;
            return true;
        }
        if (!this.placeRequest()) {
            this.parserState = field_code_parser_1.FieldCodeParserState.end;
            return true;
        }
        return false;
    };
    FieldCodeParserDocVariable.prototype.insertDefaultText = function () {
        return false;
    };
    FieldCodeParserDocVariable.prototype.placeRequest = function () {
        if (this.parameterInfoList.length < 1)
            return false;
        this.fieldID = this.subDocument.fieldsWaitingForUpdate.requestManager.add(this.subDocument, this.getRequestData());
        return true;
    };
    FieldCodeParserDocVariable.prototype.getRequestData = function () {
        return new field_request_manager_1.FieldDocVariableRequestData(this.getTopField().getAllFieldInterval(), this.parameterInfoList[0].text, list_1.ListUtils.map(this.parameterInfoList, function (paramInfo) { return paramInfo.clone(); }, 1));
    };
    FieldCodeParserDocVariable.prototype.getFormattedResult = function (value) {
        return _super.prototype.getFormattedResult.call(this, value).replace(/(\r\n)|(\n)|(\r)/g, rich_utils_1.RichUtils.specialCharacters.LineBreak);
    };
    FieldCodeParserDocVariable.prototype.applyResponse = function (response) {
        var fieldResultInterval = this.getTopField().getResultInterval();
        this.setInputPositionState();
        var simpleText = response[json_field_enums_1.JSONUpdateFieldCommandResult.SimpleText];
        if (simpleText !== undefined) {
            if (simpleText !== null)
                if (simpleText !== "")
                    this.replaceTextByInterval(fieldResultInterval, this.getFormattedResult(simpleText));
                else
                    this.removeInterval(fieldResultInterval);
            return true;
        }
        else if (!response[json_field_enums_1.JSONUpdateFieldCommandResult.Caches]) {
            var rangeCopy = response[json_field_enums_1.JSONUpdateFieldCommandResult.DocumentModel];
            this.removeInterval(fieldResultInterval);
            var interval = new fixed_1.FixedInterval(0, rangeCopy.model.mainSubDocument.getDocumentEndPosition() - (rangeCopy.addedUselessParagraphMarkInEnd ? 1 : 0));
            this.modelManager.modelManipulator.documentMerger.mergeDocumentModel(new sub_document_1.SubDocumentInterval(rangeCopy.model.mainSubDocument, interval), new sub_document_1.SubDocumentPosition(this.subDocument, this.getTopField().getResultStartPosition()));
        }
        else {
            this.removeInterval(fieldResultInterval);
            server_model_inserter_1.ServerModelInserter.insertDocumentModelFromServer(this.modelManager, response, this.getTopField().getResultStartPosition(), this.subDocument.id);
            return true;
        }
    };
    return FieldCodeParserDocVariable;
}(field_code_parser_1.FieldCodeParser));
exports.FieldCodeParserDocVariable = FieldCodeParserDocVariable;
