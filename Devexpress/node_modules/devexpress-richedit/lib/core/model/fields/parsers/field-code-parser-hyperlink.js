"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var apply_field_hyperlink_style_history_item_1 = require("../../history/items/apply-field-hyperlink-style-history-item");
var change_field_hyperlink_info_history_item_1 = require("../../history/items/change-field-hyperlink-info-history-item");
var sub_document_1 = require("../../sub-document");
var field_1 = require("../field");
var names_1 = require("../names");
var field_code_parser_1 = require("./field-code-parser");
var field_code_parser_client_updating_base_1 = require("./field-code-parser-client-updating-base");
var FieldCodeParserHyperlink = (function (_super) {
    tslib_1.__extends(FieldCodeParserHyperlink, _super);
    function FieldCodeParserHyperlink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserHyperlink.prototype, "name", {
        get: function () { return names_1.FieldName.Hyperlink; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserHyperlink.prototype.parseCodeCurrentFieldInternal = function (_responce) {
        if (this.parseSwitchesAndArgs(true))
            this.fillResult();
        else
            this.removeInterval(this.getTopField().getResultInterval());
        this.parserState = field_code_parser_1.FieldCodeParserState.end;
        return true;
    };
    FieldCodeParserHyperlink.prototype.fillResult = function () {
        var field = this.getTopField();
        var text = this.parameterInfoList[0] ? this.parameterInfoList[0].text : "";
        var newHyperlinkInfo = this.updateHyperlinkInfo(field, text);
        if (!newHyperlinkInfo) {
            this.removeInterval(this.getTopField().getResultInterval());
            return true;
        }
        var modelManipulator = this.modelManager.modelManipulator;
        var resultInterval = field.getResultInterval();
        if (resultInterval.length == 0) {
            var resultText = text.length > 0 ? text : "#" + newHyperlinkInfo.anchor;
            var newResultInterval = new fixed_1.FixedInterval(resultInterval.start, resultText.length);
            this.setInputPositionState();
            this.replaceTextByInterval(resultInterval, resultText);
            this.modelManager.history.addAndRedo(new apply_field_hyperlink_style_history_item_1.ApplyFieldHyperlinkStyleHistoryItem(modelManipulator, new sub_document_1.SubDocumentInterval(this.subDocument, newResultInterval)));
        }
        this.modelManager.history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(modelManipulator, this.subDocument, field.index, newHyperlinkInfo));
        return true;
    };
    FieldCodeParserHyperlink.prototype.updateHyperlinkInfo = function (field, text) {
        var newHyperlinkInfo = field.isHyperlinkField() ? field.getHyperlinkInfo().clone() : new field_1.HyperlinkInfo("", "", "", false);
        newHyperlinkInfo.visited = false;
        var tipSwitch;
        var bookmarkSwitch;
        for (var i = 0, switchInfo; switchInfo = this.switchInfoList[i]; i++)
            if (switchInfo.type == field_code_parser_1.FieldSwitchType.FieldSpecific) {
                switch (switchInfo.name.toLocaleUpperCase()) {
                    case "O":
                        tipSwitch = switchInfo;
                        break;
                    case "L":
                        bookmarkSwitch = switchInfo;
                        break;
                }
            }
        newHyperlinkInfo.tip = tipSwitch ? tipSwitch.arg : "";
        var splitted = text.split("#");
        if (splitted.length == 1) {
            newHyperlinkInfo.uri = splitted[0];
            newHyperlinkInfo.anchor = bookmarkSwitch ? bookmarkSwitch.arg : "";
            if (newHyperlinkInfo.uri == "" && newHyperlinkInfo.anchor == "")
                return null;
        }
        else {
            newHyperlinkInfo.uri = splitted[0];
            newHyperlinkInfo.anchor = splitted[1];
        }
        return newHyperlinkInfo;
    };
    return FieldCodeParserHyperlink;
}(field_code_parser_client_updating_base_1.FieldCodeParserClientUpdatingBase));
exports.FieldCodeParserHyperlink = FieldCodeParserHyperlink;
