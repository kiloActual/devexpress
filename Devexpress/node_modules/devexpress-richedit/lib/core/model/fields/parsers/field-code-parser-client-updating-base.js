"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var selection_intervals_info_1 = require("../../../selection/selection-intervals-info");
var change_field_hyperlink_info_history_item_1 = require("../../history/items/change-field-hyperlink-info-history-item");
var field_insert_history_item_1 = require("../../history/items/field-insert-history-item");
var field_1 = require("../field");
var field_code_parser_1 = require("./field-code-parser");
var FieldCodeParserClientUpdatingBase = (function (_super) {
    tslib_1.__extends(FieldCodeParserClientUpdatingBase, _super);
    function FieldCodeParserClientUpdatingBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldCodeParserClientUpdatingBase.prototype.getMailMergeType = function () {
        return field_code_parser_1.FieldMailMergeType.NonMailMerge;
    };
    FieldCodeParserClientUpdatingBase.prototype.parseCodeCurrentFieldInternal = function (_responce) {
        this.removeInterval(this.getTopField().getResultInterval());
        if (this.parseSwitchesAndArgs(true))
            this.fillResult();
        this.parserState = field_code_parser_1.FieldCodeParserState.end;
        return true;
    };
    FieldCodeParserClientUpdatingBase.prototype.createLocalHyperLink = function (interval, bookmarkName) {
        this.modelManager.history.addAndRedo(new field_insert_history_item_1.FieldInsertHistoryItem(this.modelManager.modelManipulator, this.subDocument, interval.start, 0, interval.length, false, this.inputPos.charPropsBundle));
        var fieldIndex = field_1.Field.normedBinaryIndexOf(this.subDocument.fields, interval.start + 1);
        var field = this.subDocument.fields[fieldIndex];
        var hyperlinkInfo = new field_1.HyperlinkInfo("", bookmarkName, "", false);
        this.modelManager.history.addAndRedo(new change_field_hyperlink_info_history_item_1.ChangeFieldHyperlinkInfoHistoryItem(this.modelManager.modelManipulator, this.subDocument, field.index, hyperlinkInfo));
        this.inputPos.setIntervals(selection_intervals_info_1.SelectionIntervalsInfo.fromInterval(this.subDocument, field.getCodeInterval()));
        this.replaceTextByInterval(field.getCodeInterval(), this.modelManager.model.simpleFormattersManager.formatString("HYPERLINK \\l \"{0}\"", bookmarkName));
    };
    FieldCodeParserClientUpdatingBase.prototype.fillResult = function () {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    return FieldCodeParserClientUpdatingBase;
}(field_code_parser_1.FieldCodeParser));
exports.FieldCodeParserClientUpdatingBase = FieldCodeParserClientUpdatingBase;
