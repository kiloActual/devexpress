"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var date_time_field_1 = require("@devexpress/utils/lib/formatters/date-time-field");
var names_1 = require("../names");
var field_code_parser_1 = require("./field-code-parser");
var field_code_parser_client_updating_base_1 = require("./field-code-parser-client-updating-base");
var FieldCodeParserDate = (function (_super) {
    tslib_1.__extends(FieldCodeParserDate, _super);
    function FieldCodeParserDate() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FieldCodeParserDate.prototype, "name", {
        get: function () { return names_1.FieldName.Date; },
        enumerable: true,
        configurable: true
    });
    FieldCodeParserDate.prototype.fillResult = function () {
        var dateFormatter = new date_time_field_1.DateTimeFieldFormatter(this.modelManager.richOptions.cultureOpts);
        var currDate = new Date();
        var dateText;
        var dateFormatSwitches = [];
        for (var i = 0, switchInfo; switchInfo = this.switchInfoList[i]; i++)
            if (switchInfo.type == field_code_parser_1.FieldSwitchType.DateAndTime)
                dateFormatSwitches.push(switchInfo);
        switch (dateFormatSwitches.length) {
            case 1:
                dateText = dateFormatter.format(currDate, dateFormatSwitches[0].arg);
                break;
            case 0:
            default:
                dateText = dateFormatter.format(currDate, this.getDefaultFormat());
                break;
        }
        if (dateText) {
            this.setInputPositionState();
            this.replaceTextByInterval(this.getTopField().getResultInterval(), dateText);
        }
        return true;
    };
    FieldCodeParserDate.prototype.getDefaultFormat = function () {
        return this.modelManager.richOptions.fields.defaultDateFormat;
    };
    return FieldCodeParserDate;
}(field_code_parser_client_updating_base_1.FieldCodeParserClientUpdatingBase));
exports.FieldCodeParserDate = FieldCodeParserDate;
