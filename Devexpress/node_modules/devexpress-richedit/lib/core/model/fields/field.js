"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var deleted_1 = require("../changes/sub-document/field/deleted");
var FieldNameType;
(function (FieldNameType) {
    FieldNameType[FieldNameType["None"] = 0] = "None";
    FieldNameType[FieldNameType["CreateDate"] = 1] = "CreateDate";
    FieldNameType[FieldNameType["Date"] = 2] = "Date";
    FieldNameType[FieldNameType["DocVariable"] = 3] = "DocVariable";
    FieldNameType[FieldNameType["Hyperlink"] = 4] = "Hyperlink";
    FieldNameType[FieldNameType["If"] = 5] = "If";
    FieldNameType[FieldNameType["IncludePicture"] = 6] = "IncludePicture";
    FieldNameType[FieldNameType["MergeField"] = 7] = "MergeField";
    FieldNameType[FieldNameType["NumPages"] = 8] = "NumPages";
    FieldNameType[FieldNameType["Page"] = 9] = "Page";
    FieldNameType[FieldNameType["Seq"] = 10] = "Seq";
    FieldNameType[FieldNameType["Symbol"] = 11] = "Symbol";
    FieldNameType[FieldNameType["TC"] = 12] = "TC";
    FieldNameType[FieldNameType["TOC"] = 13] = "TOC";
    FieldNameType[FieldNameType["Formula"] = 14] = "Formula";
    FieldNameType[FieldNameType["FillIn"] = 15] = "FillIn";
})(FieldNameType = exports.FieldNameType || (exports.FieldNameType = {}));
var HyperlinkInfo = (function () {
    function HyperlinkInfo(uri, anchor, tip, visited) {
        this.uri = uri ? uri : "";
        this.anchor = anchor ? anchor : "";
        this.tip = tip ? tip : "";
        this.visited = visited ? visited : false;
    }
    HyperlinkInfo.prototype.clone = function () {
        return new HyperlinkInfo(this.uri, this.anchor, this.tip, this.visited);
    };
    HyperlinkInfo.prototype.getUriPlusAnchor = function () {
        return this.uri + (this.anchor == "" ? "" : "#" + this.anchor);
    };
    HyperlinkInfo.getNewCodeText = function (hyperlinkInfo) {
        return [
            "HYPERLINK \"",
            hyperlinkInfo.uri,
            "\"",
            hyperlinkInfo.tip == "" ? "" : " \\o \"" + hyperlinkInfo.tip + "\"",
            hyperlinkInfo.anchor == "" ? "" : " \\l \"" + hyperlinkInfo.anchor + "\""
        ].join("");
    };
    return HyperlinkInfo;
}());
exports.HyperlinkInfo = HyperlinkInfo;
var SequenceInfo = (function () {
    function SequenceInfo(identifier, repeats, hidesResult, resets, resetsWith) {
        this.identifier = identifier;
        this.repeats = repeats;
        this.hidesResult = hidesResult;
        this.resets = resets;
        this.resetsWith = resetsWith ? resetsWith : 0;
    }
    SequenceInfo.prototype.clone = function () {
        return new SequenceInfo(this.identifier, this.repeats, this.hidesResult, this.resets, this.resetsWith);
    };
    return SequenceInfo;
}());
exports.SequenceInfo = SequenceInfo;
var TcInfo = (function () {
    function TcInfo(identifier, text, level) {
        this.identifier = identifier;
        this.text = text;
        this.level = level;
    }
    TcInfo.prototype.clone = function () {
        return new TcInfo(this.identifier, this.text, this.level);
    };
    return TcInfo;
}());
exports.TcInfo = TcInfo;
var Field = (function () {
    function Field(positionManager, index, startFieldPosition, separatorPosition, endFieldPosition, showCode, hyperlinkInfo) {
        this.codeStartPosition = positionManager.registerPosition(startFieldPosition + 1);
        this.resultStartPosition = positionManager.registerPosition(separatorPosition + 1);
        this.fieldEndPosition = positionManager.registerPosition(endFieldPosition);
        this.index = index;
        this.showCode = showCode;
        this.parent = undefined;
        if (hyperlinkInfo !== undefined)
            this.hyperlinkInfo = hyperlinkInfo;
    }
    Field.prototype.destructor = function (positionManager) {
        positionManager.unregisterPosition(this.codeStartPosition);
        positionManager.unregisterPosition(this.resultStartPosition);
        positionManager.unregisterPosition(this.fieldEndPosition);
    };
    Field.addField = function (fields, newField) {
        var field;
        var fieldIndex;
        fields.splice(newField.index, 0, newField);
        for (fieldIndex = newField.index + 1; field = fields[fieldIndex]; fieldIndex++)
            field.index++;
        for (fieldIndex = newField.index - 1; field = fields[fieldIndex]; fieldIndex--) {
            if (field.getFieldEndPosition() <= newField.getFieldStartPosition())
                break;
        }
        var resetParentFrom = Math.max(0, fieldIndex);
        for (fieldIndex = newField.index + 1; field = fields[fieldIndex]; fieldIndex++) {
            if (field.getFieldStartPosition() >= newField.getFieldEndPosition())
                break;
        }
        var resetParentToIndex = Math.min(fields.length - 1, fieldIndex);
        for (fieldIndex = resetParentFrom; fieldIndex <= resetParentToIndex; fieldIndex++)
            fields[fieldIndex].initParent(fields);
    };
    Field.deleteFieldByIndex = function (subDocument, delFieldIndex, modelManipulator) {
        var fields = subDocument.fields;
        var delField = fields[delFieldIndex];
        for (var fieldIndex = delFieldIndex + 1, field; field = fields[fieldIndex]; fieldIndex++)
            field.index--;
        var delFieldEndPos = delField.getFieldEndPosition();
        for (var i = delFieldIndex + 1, currField; currField = fields[i]; i++) {
            if (currField.parent == delField)
                currField.parent = delField.parent;
            if (currField.getFieldStartPosition() >= delFieldEndPos)
                break;
        }
        fields.splice(delField.index, 1);
        delField.destructor(subDocument.positionManager);
        modelManipulator.notifyModelChanged(new deleted_1.FieldDeletedSubDocumentChange(subDocument.id, delFieldEndPos));
    };
    Field.prototype.isHyperlinkField = function () {
        return !!this.hyperlinkInfo;
    };
    Field.prototype.setNewHyperlinkInfo = function (hyperlinkInfo) {
        this.hyperlinkInfo = hyperlinkInfo;
    };
    Field.prototype.getHyperlinkInfo = function () {
        return this.hyperlinkInfo;
    };
    Field.prototype.getSequenceInfo = function () {
        return this.sequenceInfo;
    };
    Field.prototype.setNewSequenceInfo = function (info) {
        this.sequenceInfo = info;
    };
    Field.prototype.isSequenceField = function () {
        return this.sequenceInfo !== undefined;
    };
    Field.prototype.getTcInfo = function () {
        return this.tcInfo;
    };
    Field.prototype.setNewTcInfo = function (info) {
        this.tcInfo = info;
    };
    Field.prototype.isTcField = function () {
        return this.tcInfo !== undefined;
    };
    Field.prototype.getFieldStartPosition = function () {
        return this.codeStartPosition.value - 1;
    };
    Field.prototype.getCodeStartPosition = function () {
        return this.codeStartPosition.value;
    };
    Field.prototype.getSeparatorPosition = function () {
        return this.resultStartPosition.value - 1;
    };
    Field.prototype.getResultStartPosition = function () {
        return this.resultStartPosition.value;
    };
    Field.prototype.getResultEndPosition = function () {
        return this.fieldEndPosition.value - 1;
    };
    Field.prototype.getFieldEndPosition = function () {
        return this.fieldEndPosition.value;
    };
    Field.prototype.setParent = function (parent) {
        if (parent !== null && (parent.getFieldStartPosition() >= this.getFieldStartPosition() || parent.getFieldEndPosition() <= this.getFieldEndPosition()))
            throw new Error("Incorrect field parent");
        this.parent = parent;
    };
    Field.prototype.initParent = function (fieldList) {
        for (var i = this.index - 1, possibleParent; possibleParent = fieldList[i]; i--) {
            if (possibleParent.getFieldEndPosition() > this.getFieldEndPosition()) {
                this.parent = possibleParent;
                return;
            }
            if (possibleParent.parent == null)
                break;
        }
        this.parent = null;
    };
    Field.normedBinaryIndexOf = function (fields, position) {
        return search_1.SearchUtils.normedInterpolationIndexOf(fields, function (f) { return f.getCodeStartPosition(); }, position);
    };
    Field.binaryIndexOf = function (fields, position) {
        return search_1.SearchUtils.binaryIndexOf(fields, function (f) { return f.getCodeStartPosition() - position; });
    };
    Field.prototype.getAbsolutelyTopLevelField = function () {
        var field = this;
        for (; field.parent; field = field.parent)
            ;
        return field;
    };
    Field.prototype.getCodeInterval = function () {
        return fixed_1.FixedInterval.fromPositions(this.getCodeStartPosition(), this.getSeparatorPosition());
    };
    Field.prototype.getCodeIntervalWithBorders = function () {
        return fixed_1.FixedInterval.fromPositions(this.getFieldStartPosition(), this.getResultStartPosition());
    };
    Field.prototype.getResultInterval = function () {
        return fixed_1.FixedInterval.fromPositions(this.getResultStartPosition(), this.getResultEndPosition());
    };
    Field.prototype.getResultIntervalWithBorders = function () {
        return fixed_1.FixedInterval.fromPositions(this.getResultStartPosition(), this.getFieldEndPosition());
    };
    Field.prototype.getAllFieldInterval = function () {
        return fixed_1.FixedInterval.fromPositions(this.getFieldStartPosition(), this.getFieldEndPosition());
    };
    Field.prototype.getAllFieldIntervalWithoutBorders = function () {
        return fixed_1.FixedInterval.fromPositions(this.getCodeStartPosition(), this.getResultEndPosition());
    };
    Field.prototype.isPlacedInCodeAreaTopLevelField = function (topLevelField) {
        return !!algorithms_1.IntervalAlgorithms.getIntersection(this.getAllFieldInterval(), topLevelField.getCodeInterval());
    };
    Field.prototype.getPositions = function (poss) {
        poss.push(this.codeStartPosition);
        poss.push(this.resultStartPosition);
        poss.push(this.fieldEndPosition);
    };
    Field.correctIntervalDueToFieldsWithoutUiChecks = function (subDocument, newInterval) {
        var fields = subDocument.fields;
        if (newInterval.length && fields.length) {
            var startFieldIndex = Math.max(0, Field.normedBinaryIndexOf(fields, newInterval.start));
            var field = fields[startFieldIndex];
            while (field.parent)
                field = field.parent;
            startFieldIndex = field.index;
            var endFieldIndex = startFieldIndex;
            for (; (field = fields[endFieldIndex]) && (field.getFieldStartPosition() < newInterval.end); endFieldIndex++) {
                if (algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(newInterval, new fixed_1.FixedInterval(field.getFieldStartPosition(), 1)) ||
                    algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(newInterval, new fixed_1.FixedInterval(field.getSeparatorPosition(), 1)) ||
                    algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(newInterval, new fixed_1.FixedInterval(field.getResultEndPosition(), 1)))
                    newInterval.expand(field.getAllFieldInterval());
            }
            return fixed_1.FixedInterval.fromPositions(startFieldIndex, endFieldIndex);
        }
        else
            return new fixed_1.FixedInterval(0, 0);
    };
    Field.correctIntervalDueToFieldsCaseSelectionCollapsed = function (fields, position) {
        var visabilityInfo = FieldVisabilityInfo.getRelativeVisabilityInfo(position, fields);
        for (var i = visabilityInfo.length - 1, fieldInfo = void 0; fieldInfo = visabilityInfo[i]; i--) {
            var field = fieldInfo.field;
            if (field.getCodeInterval().containsWithIntervalEnd(position)) {
                if (fieldInfo.showCode)
                    break;
                else
                    position = field.getFieldStartPosition();
            }
            else {
                var fieldResultInterval = field.getResultInterval();
                if (fieldResultInterval.containsWithIntervalEnd(position)) {
                    if (fieldInfo.showResult) {
                        if (position == fieldResultInterval.start)
                            position = field.getFieldStartPosition();
                        else if (position == fieldResultInterval.end)
                            position = field.getFieldEndPosition();
                        break;
                    }
                    else
                        position = field.getFieldEndPosition();
                }
            }
        }
        return position;
    };
    Field.correctIntervalDueToFields = function (subDocument, newInterval) {
        var fields = subDocument.fields;
        if (!fields.length)
            return;
        if (!newInterval.length)
            return newInterval.start = Field.correctIntervalDueToFieldsCaseSelectionCollapsed(subDocument.fields, newInterval.start);
        var indexesInterval = Field.correctIntervalDueToFieldsWithoutUiChecks(subDocument, newInterval);
        list_1.ListUtils.forEach(fields, function (field) {
            if (field.getResultInterval().equals(newInterval))
                newInterval.expand(field.getAllFieldInterval());
        }, indexesInterval.start, indexesInterval.end);
    };
    Field.correctWhenPositionInStartCode = function (fields, position) {
        if (fields.length < 1)
            return position;
        var field = fields[Math.max(0, Field.normedBinaryIndexOf(fields, position))];
        if (field.getResultStartPosition() == position)
            return field.parent ? Field.correctWhenPositionInStartCode(fields, field.getFieldStartPosition()) : field.getFieldStartPosition();
        return position;
    };
    Field.prototype.clone = function (subDocument) {
        var result = new Field(subDocument.positionManager, this.index, this.getFieldStartPosition(), this.getSeparatorPosition(), this.getFieldEndPosition(), this.showCode, this.hyperlinkInfo ? this.hyperlinkInfo.clone() : this.hyperlinkInfo);
        result.sequenceInfo = this.sequenceInfo ? this.sequenceInfo.clone() : this.sequenceInfo;
        result.tcInfo = this.tcInfo ? this.tcInfo.clone() : this.tcInfo;
        result.disableUpdate = this.disableUpdate;
        result.hideByParent = this.hideByParent;
        result.locked = this.locked;
        return result;
    };
    return Field;
}());
exports.Field = Field;
var FieldVisabilityInfo = (function () {
    function FieldVisabilityInfo(showCode, showResult, field) {
        this.showCode = showCode;
        this.showResult = showResult;
        this.field = field;
    }
    FieldVisabilityInfo.getRelativeVisabilityInfo = function (position, fields) {
        var visabilityInfo = [];
        var currFieldIndex = Field.normedBinaryIndexOf(fields, position + 1);
        if (currFieldIndex < 0)
            return [];
        var currField = fields[currFieldIndex];
        do {
            if (currField.getAllFieldIntervalWithoutBorders().containsWithIntervalEnd(position))
                visabilityInfo.unshift(new FieldVisabilityInfo(currField.showCode, !currField.showCode, currField));
        } while (currField = currField.parent);
        var topLevelFieldInfo = visabilityInfo[0];
        for (var i = 1, fieldInfo; fieldInfo = visabilityInfo[i]; i++) {
            FieldVisabilityInfo.applyTopLevelFieldInfoVisabilityToThisFieldInfo(topLevelFieldInfo, fieldInfo);
            topLevelFieldInfo = fieldInfo;
        }
        return visabilityInfo;
    };
    FieldVisabilityInfo.applyTopLevelFieldInfoVisabilityToThisFieldInfo = function (topLevelFieldInfo, lowLevelFieldInfo) {
        var topLevelFieldAllowShowThisField = lowLevelFieldInfo.field.isPlacedInCodeAreaTopLevelField(topLevelFieldInfo.field) ? topLevelFieldInfo.showCode : topLevelFieldInfo.showResult;
        lowLevelFieldInfo.showCode = lowLevelFieldInfo.showCode && topLevelFieldAllowShowThisField;
        lowLevelFieldInfo.showResult = lowLevelFieldInfo.showResult && topLevelFieldAllowShowThisField;
    };
    FieldVisabilityInfo.prototype.clone = function () {
        return new FieldVisabilityInfo(this.showCode, this.showResult, this.field);
    };
    FieldVisabilityInfo.prototype.copyFrom = function (obj) {
        this.field = obj.field;
        this.showCode = obj.showCode;
        this.showResult = obj.showResult;
    };
    return FieldVisabilityInfo;
}());
exports.FieldVisabilityInfo = FieldVisabilityInfo;
