"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var json_field_enums_1 = require("../json/enums/json-field-enums");
var FieldRequestManager = (function () {
    function FieldRequestManager() {
        this.updateMap = {};
    }
    FieldRequestManager.prototype.getSubDocumentData = function (subDocument) {
        var sdData = this.updateMap[subDocument.id];
        if (!sdData)
            this.updateMap[subDocument.id] = sdData = {};
        return sdData;
    };
    FieldRequestManager.prototype.clear = function (subDocument) {
        if (this.updateMap[subDocument.id])
            delete this.updateMap[subDocument.id];
    };
    FieldRequestManager.prototype.add = function (subDocument, data) {
        var sdData = this.getSubDocumentData(subDocument);
        var fieldId = FieldRequestManager.fieldId++;
        sdData[fieldId] = data;
        return fieldId;
    };
    FieldRequestManager.prototype.checkResponse = function (subDocument, response) {
        var sdData = this.getSubDocumentData(subDocument);
        if (sdData && ((number_1.NumberMapUtils.isEmpty(sdData) ? !!response : !response) ||
            number_1.NumberMapUtils.containsBy(sdData, function (_requestInfo, fieldId) { return !response[fieldId]; })))
            throw new Error(errors_1.Errors.InternalException);
    };
    FieldRequestManager.prototype.requestAsJson = function (subDocument) {
        var _a;
        return _a = {},
            _a[json_field_enums_1.JSONUpdateFieldCommand.ActiveRecord] = this.activeRecord,
            _a[json_field_enums_1.JSONUpdateFieldCommand.Info] = number_1.NumberMapUtils.map(this.getSubDocumentData(subDocument), function (reqData) { return reqData.asJson(); }),
            _a;
    };
    FieldRequestManager.fieldId = 0;
    return FieldRequestManager;
}());
exports.FieldRequestManager = FieldRequestManager;
var TocFieldRequestManager = (function (_super) {
    tslib_1.__extends(TocFieldRequestManager, _super);
    function TocFieldRequestManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TocFieldRequestManager.prototype.sendRequest = function (_subDocument, _activeRecord, _immediateSendRequest) {
    };
    TocFieldRequestManager.prototype.forceSendDelayedRequests = function () {
    };
    return TocFieldRequestManager;
}(FieldRequestManager));
exports.TocFieldRequestManager = TocFieldRequestManager;
var FieldRequestData = (function () {
    function FieldRequestData() {
    }
    return FieldRequestData;
}());
exports.FieldRequestData = FieldRequestData;
var FieldDocVariableRequestData = (function (_super) {
    tslib_1.__extends(FieldDocVariableRequestData, _super);
    function FieldDocVariableRequestData(fieldInterval, fieldName, parameters) {
        var _this = _super.call(this) || this;
        _this.fieldInterval = fieldInterval;
        _this.fieldName = fieldName;
        _this.parameters = parameters;
        return _this;
    }
    Object.defineProperty(FieldDocVariableRequestData.prototype, "serverUpdateFieldType", {
        get: function () { return ServerUpdateFieldType.DocVariable; },
        enumerable: true,
        configurable: true
    });
    FieldDocVariableRequestData.prototype.asJson = function () {
        var _a, _b;
        return _a = {},
            _a[json_field_enums_1.JSONUpdateFieldCommandInfo.ServerUpdateFieldType] = this.serverUpdateFieldType,
            _a[json_field_enums_1.JSONUpdateFieldCommandInfo.Data] = (_b = {},
                _b[json_field_enums_1.JSONUpdateFieldCommandDocVariableInfo.FieldName] = this.fieldName,
                _b[json_field_enums_1.JSONUpdateFieldCommandDocVariableInfo.Parameters] = list_1.ListUtils.map(this.parameters, function (paramInfo) {
                    var _a;
                    return _a = {},
                        _a[json_field_enums_1.JSONUpdateFieldCommandDocVariableParameters.PureText] = paramInfo.text,
                        _a[json_field_enums_1.JSONUpdateFieldCommandDocVariableParameters.IntervalStart] = paramInfo.interval.start,
                        _a[json_field_enums_1.JSONUpdateFieldCommandDocVariableParameters.IntervalEnd] = paramInfo.interval.end,
                        _a;
                }),
                _b),
            _a;
    };
    return FieldDocVariableRequestData;
}(FieldRequestData));
exports.FieldDocVariableRequestData = FieldDocVariableRequestData;
var FieldMailMergeRequestData = (function (_super) {
    tslib_1.__extends(FieldMailMergeRequestData, _super);
    function FieldMailMergeRequestData(fieldName) {
        var _this = _super.call(this) || this;
        _this.fieldName = fieldName;
        return _this;
    }
    Object.defineProperty(FieldMailMergeRequestData.prototype, "serverUpdateFieldType", {
        get: function () { return ServerUpdateFieldType.MergeField; },
        enumerable: true,
        configurable: true
    });
    FieldMailMergeRequestData.prototype.asJson = function () {
        var _a, _b;
        return _a = {},
            _a[json_field_enums_1.JSONUpdateFieldCommandInfo.ServerUpdateFieldType] = this.serverUpdateFieldType,
            _a[json_field_enums_1.JSONUpdateFieldCommandInfo.Data] = (_b = {},
                _b[json_field_enums_1.JSONUpdateFieldCommandDocVariableInfo.FieldName] = this.fieldName,
                _b),
            _a;
    };
    return FieldMailMergeRequestData;
}(FieldRequestData));
exports.FieldMailMergeRequestData = FieldMailMergeRequestData;
var ServerUpdateFieldType;
(function (ServerUpdateFieldType) {
    ServerUpdateFieldType[ServerUpdateFieldType["DocVariable"] = 1] = "DocVariable";
    ServerUpdateFieldType[ServerUpdateFieldType["MergeField"] = 2] = "MergeField";
})(ServerUpdateFieldType = exports.ServerUpdateFieldType || (exports.ServerUpdateFieldType = {}));
