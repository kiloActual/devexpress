"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var math_1 = require("@devexpress/utils/lib/utils/math");
var string_1 = require("@devexpress/utils/lib/utils/string");
var FormFieldProperties = (function () {
    function FormFieldProperties() {
    }
    FormFieldProperties.prototype.calculateHash = function () {
        return string_1.StringUtils.stringHashCode(this.name) ^
            math_1.MathUtils.somePrimes[0] * this.statusTextType;
    };
    FormFieldProperties.prototype.equals = function (obj) {
        return obj &&
            this.name == obj.name &&
            this.enabled == obj.enabled &&
            this.calculateOnExit == obj.calculateOnExit &&
            this.helpTextType == obj.helpTextType &&
            this.helpText == obj.helpText &&
            this.statusTextType == obj.statusTextType &&
            this.statusText == obj.statusText &&
            this.entryMacro == obj.entryMacro &&
            this.exitMacro == obj.exitMacro;
    };
    FormFieldProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    FormFieldProperties.prototype.copyFrom = function (obj) {
        obj.name = this.name;
        obj.enabled = this.enabled;
        obj.calculateOnExit = this.calculateOnExit;
        obj.helpTextType = this.helpTextType;
        obj.helpText = this.helpText;
        obj.statusTextType = this.statusTextType;
        obj.statusText = this.statusText;
        obj.entryMacro = this.entryMacro;
        obj.exitMacro = this.exitMacro;
        obj.hash = this.hash;
    };
    FormFieldProperties.prototype.clone = function () {
        var result = new FormFieldProperties();
        result.copyFrom(this);
        return result;
    };
    return FormFieldProperties;
}());
exports.FormFieldProperties = FormFieldProperties;
var FormFieldPropertiesMask;
(function (FormFieldPropertiesMask) {
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseNone"] = 0] = "UseNone";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseName"] = 4] = "UseName";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseEnabled"] = 8] = "UseEnabled";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseCalculateOnExit"] = 16] = "UseCalculateOnExit";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseHelpTextType"] = 32] = "UseHelpTextType";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseHelpText"] = 64] = "UseHelpText";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseStatusTextType"] = 128] = "UseStatusTextType";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseStatusText"] = 256] = "UseStatusText";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseEntryMacro"] = 512] = "UseEntryMacro";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseExitMacro"] = 1024] = "UseExitMacro";
    FormFieldPropertiesMask[FormFieldPropertiesMask["UseAll"] = 2147483647] = "UseAll";
})(FormFieldPropertiesMask = exports.FormFieldPropertiesMask || (exports.FormFieldPropertiesMask = {}));
var MaskedFormFieldProperties = (function (_super) {
    tslib_1.__extends(MaskedFormFieldProperties, _super);
    function MaskedFormFieldProperties() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.useValue = FormFieldPropertiesMask.UseNone;
        return _this;
    }
    MaskedFormFieldProperties.prototype.calculateHash = function () {
        return _super.prototype.calculateHash.call(this) +
            math_1.MathUtils.somePrimes[15] * this.useValue;
    };
    MaskedFormFieldProperties.prototype.getUseValue = function (value) {
        return (this.useValue & value) != 0;
    };
    MaskedFormFieldProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.useValue |= mask;
        else
            this.useValue &= ~mask;
    };
    MaskedFormFieldProperties.prototype.equals = function (obj) {
        return _super.prototype.equals.call(this, obj) &&
            this.useValue == obj.useValue;
    };
    MaskedFormFieldProperties.prototype.clone = function () {
        var result = new MaskedFormFieldProperties();
        result.copyFrom(this);
        result.useValue = this.useValue;
        return result;
    };
    return MaskedFormFieldProperties;
}(FormFieldProperties));
exports.MaskedFormFieldProperties = MaskedFormFieldProperties;
