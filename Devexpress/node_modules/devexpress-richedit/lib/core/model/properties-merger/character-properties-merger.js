"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var character_properties_1 = require("../character/character-properties");
var character_property_descriptor_1 = require("../character/character-property-descriptor");
var enums_1 = require("../character/enums");
var table_style_character_properties_merger_1 = require("../tables/properties-mergers/table-style-character-properties-merger");
var properties_merger_base_1 = require("./properties-merger-base");
var CharacterPropertiesMerger = (function (_super) {
    tslib_1.__extends(CharacterPropertiesMerger, _super);
    function CharacterPropertiesMerger() {
        return _super.call(this, new character_properties_1.MaskedCharacterProperties(), character_property_descriptor_1.CharacterPropertyDescriptor.ALL_FIELDS) || this;
    }
    CharacterPropertiesMerger.prototype.mergeCharacterProperties = function (maskedCharacterProperties) {
        this.mergeAll(maskedCharacterProperties);
    };
    CharacterPropertiesMerger.prototype.mergeOnlyOwnCharacterProperties = function (sourceProperties, parentProperties) {
        this.mergeOnlyOwnProperties(sourceProperties, parentProperties);
    };
    CharacterPropertiesMerger.prototype.mergeMergedCharacterProperties = function (mergedCharacterProperties) {
        var maskedCharacterProperties = new character_properties_1.MaskedCharacterProperties();
        maskedCharacterProperties.copyFrom(mergedCharacterProperties);
        maskedCharacterProperties.useValue = enums_1.CharacterPropertiesMask.UseAll;
        this.mergeAll(maskedCharacterProperties);
    };
    CharacterPropertiesMerger.prototype.mergeCharacterStyle = function (characterStyle) {
        var currentCharacterStyle = characterStyle;
        while (currentCharacterStyle) {
            this.mergeAll(currentCharacterStyle.maskedCharacterProperties);
            currentCharacterStyle = currentCharacterStyle.parent;
        }
    };
    CharacterPropertiesMerger.prototype.mergeParagraphStyle = function (paragraphStyle) {
        var currentParagraphStyle = paragraphStyle;
        while (currentParagraphStyle) {
            this.mergeAll(currentParagraphStyle.maskedCharacterProperties);
            currentParagraphStyle = currentParagraphStyle.parent;
        }
    };
    CharacterPropertiesMerger.prototype.mergeTableStyles = function (tableCell) {
        var tableStyle = tableCell.parentRow.parentTable.style;
        var fakeContainer = new character_properties_1.MaskedCharacterProperties();
        fakeContainer.useValue = enums_1.CharacterPropertiesMask.UseNone;
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.hidden, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerHidden().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.script, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerScript().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.allCaps, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerAllCaps().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.noProof, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerNoProof().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.bold, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontBold().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.fontInfo, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontName().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.size, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontSize().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.italic, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontItalic().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutType, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontStrikeoutType().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.underlineType, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerFontUnderlineType().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutWordsOnly, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerStrikeoutWordsOnly().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.underlineWordsOnly, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerUnderlineWordsOnly().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.textColor, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerTextColor().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.shadingInfo, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerShadingInfo().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.highlightColor, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerHighlightColor().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.strikeoutColor, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerStrikeoutColor().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
        this.mergeTableProperties(character_property_descriptor_1.CharacterPropertyDescriptor.underlineColor, function () { return new table_style_character_properties_merger_1.TableStyleCharacterPropertiesMergerUnderlineColor().getProperty(fakeContainer, tableStyle, tableCell.conditionalFormatting, null); });
    };
    CharacterPropertiesMerger.prototype.getMergedProperties = function () {
        var result = new character_properties_1.CharacterProperties();
        result.copyFrom(this.innerProperties);
        return result;
    };
    return CharacterPropertiesMerger;
}(properties_merger_base_1.PropertiesMergerBase));
exports.CharacterPropertiesMerger = CharacterPropertiesMerger;
