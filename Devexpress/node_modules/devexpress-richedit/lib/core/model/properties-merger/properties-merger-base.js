"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PropertiesMergerBase = (function () {
    function PropertiesMergerBase(initialialProperties, descriptors) {
        this.innerProperties = initialialProperties;
        this.descriptors = descriptors;
    }
    PropertiesMergerBase.prototype.mergeInternal = function (properties, mask, setValue) {
        if (!this.innerProperties.getUseValue(mask) && properties.getUseValue(mask)) {
            setValue();
            this.innerProperties.setUseValue(mask, true);
        }
    };
    PropertiesMergerBase.prototype.mergeOnlyOwnInternal = function (properties, parentProperties, mask, setValue, equals) {
        if (!this.innerProperties.getUseValue(mask) && properties.getUseValue(mask)) {
            if (!parentProperties.getUseValue(mask) || !equals()) {
                setValue();
                this.innerProperties.setUseValue(mask, true);
            }
        }
    };
    PropertiesMergerBase.prototype.mergeTableProperties = function (descriptor, getValue) {
        var mask = descriptor.maskValue();
        if (this.innerProperties.getUseValue(mask))
            return;
        var prop = getValue();
        if (prop === null)
            return;
        descriptor.setProp(this.innerProperties, prop);
        this.innerProperties.setUseValue(mask, true);
    };
    PropertiesMergerBase.prototype.mergeAll = function (from) {
        if (from) {
            var to = this.innerProperties;
            for (var _i = 0, _a = this.descriptors; _i < _a.length; _i++) {
                var desc = _a[_i];
                var mask = desc.maskValue();
                if (!to.getUseValue(mask) && from.getUseValue(mask)) {
                    desc.setProp(to, desc.getProp(from));
                    to.setUseValue(mask, true);
                }
            }
        }
    };
    PropertiesMergerBase.prototype.mergeOnlyOwnProperties = function (from, parent) {
        var to = this.innerProperties;
        for (var _i = 0, _a = this.descriptors; _i < _a.length; _i++) {
            var desc = _a[_i];
            var mask = desc.maskValue();
            if (!to.getUseValue(mask) && from.getUseValue(mask)) {
                if (parent.getUseValue(mask) && desc.binaryEquals(desc.getProp(from), desc.getProp(parent)))
                    continue;
                desc.setProp(to, desc.getProp(from));
                to.setUseValue(mask, true);
            }
        }
    };
    return PropertiesMergerBase;
}());
exports.PropertiesMergerBase = PropertiesMergerBase;
