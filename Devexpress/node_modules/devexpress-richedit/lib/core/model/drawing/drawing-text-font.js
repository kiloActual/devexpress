"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var string_1 = require("@devexpress/utils/lib/utils/string");
var enums_1 = require("./enums");
var DrawingTextFont = (function () {
    function DrawingTextFont() {
        this.stringArray = ["", ""];
        this.byteArray = [DrawingTextFont.DefaultCharset, DrawingTextFont.DefaultPitchFamily];
    }
    Object.defineProperty(DrawingTextFont.prototype, "typeface", {
        get: function () {
            return this.stringArray[DrawingTextFont.typefaceIndex];
        },
        set: function (value) {
            this.setStringArray(DrawingTextFont.typefaceIndex, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingTextFont.prototype, "panose", {
        get: function () {
            return this.stringArray[DrawingTextFont.panoseIndex];
        },
        set: function (value) {
            this.setStringArray(DrawingTextFont.panoseIndex, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingTextFont.prototype, "charset", {
        get: function () {
            return this.byteArray[DrawingTextFont.charsetIndex];
        },
        set: function (value) {
            this.setByteArray(DrawingTextFont.charsetIndex, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingTextFont.prototype, "pitchFamily", {
        get: function () {
            return this.byteArray[DrawingTextFont.pitchFamilyIndex];
        },
        set: function (value) {
            this.setByteArray(DrawingTextFont.pitchFamilyIndex, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingTextFont.prototype, "isDefault", {
        get: function () {
            return string_1.StringUtils.isNullOrEmpty(this.stringArray[DrawingTextFont.typefaceIndex]) &&
                string_1.StringUtils.isNullOrEmpty(this.stringArray[DrawingTextFont.panoseIndex]) &&
                this.byteArray[DrawingTextFont.charsetIndex] == DrawingTextFont.DefaultCharset &&
                this.byteArray[DrawingTextFont.pitchFamilyIndex] == DrawingTextFont.DefaultPitchFamily;
        },
        enumerable: true,
        configurable: true
    });
    DrawingTextFont.prototype.copyFrom = function (value) {
        this.stringArray[DrawingTextFont.typefaceIndex] = value.stringArray[DrawingTextFont.typefaceIndex];
        this.stringArray[DrawingTextFont.panoseIndex] = value.stringArray[DrawingTextFont.panoseIndex];
        this.byteArray[DrawingTextFont.charsetIndex] = value.byteArray[DrawingTextFont.charsetIndex];
        this.byteArray[DrawingTextFont.pitchFamilyIndex] = value.byteArray[DrawingTextFont.pitchFamilyIndex];
    };
    DrawingTextFont.prototype.clone = function () {
        var result = new DrawingTextFont();
        result.copyFrom(this);
        return result;
    };
    DrawingTextFont.prototype.equals = function (other) {
        return other &&
            this.stringArray[DrawingTextFont.typefaceIndex] == other.stringArray[DrawingTextFont.typefaceIndex] &&
            this.stringArray[DrawingTextFont.panoseIndex] == other.stringArray[DrawingTextFont.panoseIndex] &&
            this.byteArray[DrawingTextFont.charsetIndex] == other.byteArray[DrawingTextFont.charsetIndex] &&
            this.byteArray[DrawingTextFont.pitchFamilyIndex] == other.byteArray[DrawingTextFont.pitchFamilyIndex];
    };
    DrawingTextFont.prototype.clear = function () {
        this.typeface = "";
        this.panose = "";
        this.charset = DrawingTextFont.DefaultCharset;
        this.pitchFamily = DrawingTextFont.DefaultPitchFamily;
    };
    Object.defineProperty(DrawingTextFont.prototype, "type", {
        get: function () {
            return enums_1.DrawingBulletType.Typeface;
        },
        enumerable: true,
        configurable: true
    });
    DrawingTextFont.prototype.setStringArray = function (index, value) {
        if (this.stringArray[index] != value)
            this.stringArray[index] = value;
    };
    DrawingTextFont.prototype.setByteArray = function (index, value) {
        if (this.byteArray[index] != value)
            this.byteArray[index] = value;
    };
    DrawingTextFont.DefaultCharset = 1;
    DrawingTextFont.DefaultPitchFamily = 0;
    DrawingTextFont.typefaceIndex = 0;
    DrawingTextFont.panoseIndex = 1;
    DrawingTextFont.charsetIndex = 0;
    DrawingTextFont.pitchFamilyIndex = 1;
    return DrawingTextFont;
}());
exports.DrawingTextFont = DrawingTextFont;
