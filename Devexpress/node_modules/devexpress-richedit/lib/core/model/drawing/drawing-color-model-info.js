"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var math_1 = require("@devexpress/utils/lib/utils/math");
var string_1 = require("@devexpress/utils/lib/utils/string");
var color_hsl_1 = require("../color/color-hsl");
var d_xsystem_colors_1 = require("../color/d-xsystem-colors");
var dx_color_1 = require("../color/dx-color");
var enums_1 = require("../color/enums");
var sc_rgbcolor_1 = require("../color/sc-rgbcolor");
var enums_2 = require("../themes/enums");
var DrawingColorModelInfo = (function () {
    function DrawingColorModelInfo() {
        this.restoreDefaultValues();
    }
    DrawingColorModelInfo.prototype.calculateHash = function () {
        var hash = math_1.MathUtils.somePrimes[10] * this._colorType;
        switch (this._colorType) {
            case enums_1.DrawingColorType.Hsl:
                hash ^= math_1.MathUtils.somePrimes[0] * this._hsl.calculateHash();
                break;
            case enums_1.DrawingColorType.Preset:
                hash ^= math_1.MathUtils.somePrimes[1] * string_1.StringUtils.stringHashCode(this._preset);
                break;
            case enums_1.DrawingColorType.Rgb:
                hash ^= math_1.MathUtils.somePrimes[2] * this._rgb;
                break;
            case enums_1.DrawingColorType.Scheme:
                hash ^= math_1.MathUtils.somePrimes[3] * this._schemeColor;
                break;
            case enums_1.DrawingColorType.ScRgb:
                hash ^= math_1.MathUtils.somePrimes[4] * this._scRgb.calculateHash();
                break;
            case enums_1.DrawingColorType.System:
                hash ^= math_1.MathUtils.somePrimes[5] * this._systemColor;
                break;
        }
        return hash;
    };
    DrawingColorModelInfo.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    DrawingColorModelInfo.prototype.setColorType = function (colorType) {
        this.restoreDefaultValues();
        this._colorType = colorType;
    };
    Object.defineProperty(DrawingColorModelInfo.prototype, "colorType", {
        get: function () { return this._colorType; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "rgb", {
        get: function () {
            return this._rgb;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.Rgb)
                this.setColorType(enums_1.DrawingColorType.Rgb);
            if (this._rgb != value)
                this._rgb = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "systemColor", {
        get: function () {
            return this._systemColor;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.System)
                this.setColorType(enums_1.DrawingColorType.System);
            if (this._systemColor != value)
                this._systemColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "schemeColor", {
        get: function () {
            return this._schemeColor;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.Scheme)
                this.setColorType(enums_1.DrawingColorType.Scheme);
            if (this._schemeColor != value)
                this._schemeColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "hsl", {
        get: function () {
            return this._hsl;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.Hsl)
                this.setColorType(enums_1.DrawingColorType.Hsl);
            if (!this._hsl.equals(value))
                this._hsl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "preset", {
        get: function () {
            return this._preset;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.Preset)
                this.setColorType(enums_1.DrawingColorType.Preset);
            if (this._preset != value && !string_1.StringUtils.isNullOrEmpty(value))
                this._preset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "scRgb", {
        get: function () {
            return this._scRgb;
        },
        set: function (value) {
            if (this._colorType != enums_1.DrawingColorType.ScRgb)
                this.setColorType(enums_1.DrawingColorType.ScRgb);
            if (!this._scRgb.equals(value))
                this._scRgb = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColorModelInfo.prototype, "isEmpty", {
        get: function () {
            return dx_color_1.DXColor.isTransparentOrEmpty(this._rgb) && this._colorType == enums_1.DrawingColorType.Rgb;
        },
        enumerable: true,
        configurable: true
    });
    DrawingColorModelInfo.createRGB = function (rgb) {
        var result = new DrawingColorModelInfo();
        result.rgb = dx_color_1.DXColor.fromArgb(255, rgb);
        return result;
    };
    DrawingColorModelInfo.createARGB = function (argb) {
        var result = new DrawingColorModelInfo();
        result.rgb = argb;
        return result;
    };
    DrawingColorModelInfo.createSystem = function (systemColor) {
        var result = new DrawingColorModelInfo();
        result.systemColor = systemColor;
        return result;
    };
    DrawingColorModelInfo.createScheme = function (schemeColor) {
        var result = new DrawingColorModelInfo();
        result.schemeColor = schemeColor;
        return result;
    };
    DrawingColorModelInfo.createPreset = function (preset) {
        var result = new DrawingColorModelInfo();
        result.preset = preset;
        return result;
    };
    DrawingColorModelInfo.createScRgb = function (scColor) {
        var result = new DrawingColorModelInfo();
        result.scRgb = scColor;
        return result;
    };
    DrawingColorModelInfo.createHSL = function (hsl) {
        var result = new DrawingColorModelInfo();
        result.hsl = hsl;
        return result;
    };
    DrawingColorModelInfo.sRgbToRgb = function (hexColor) {
        return color_1.ColorUtils.fromHashString(hexColor);
    };
    DrawingColorModelInfo.prototype.toRgb = function (colorProvider, styleColor) {
        if (styleColor === void 0) { styleColor = dx_color_1.DXColor.empty; }
        switch (this._colorType) {
            case enums_1.DrawingColorType.System:
                return this.getRgbFromSystemColor();
            case enums_1.DrawingColorType.Scheme:
                return this.getRgbFromSchemeColor(colorProvider, styleColor);
            case enums_1.DrawingColorType.Hsl:
                return this._hsl.toRgb();
            case enums_1.DrawingColorType.Preset:
                return this.getRgbFromPreset();
            case enums_1.DrawingColorType.ScRgb:
                return this._scRgb.toRgb();
            default:
                return this._rgb;
        }
    };
    DrawingColorModelInfo.prototype.getRgbFromPreset = function () {
        var _a;
        return (_a = color_1.ColorUtils.fromColorName(this._preset)) !== null && _a !== void 0 ? _a : dx_color_1.DXColor.empty;
    };
    DrawingColorModelInfo.prototype.getRgbFromSystemColor = function () {
        return this._systemColor == enums_2.SystemColorValues.Empty ? dx_color_1.DXColor.empty : DrawingColorModelInfo.systemColorTable[this._systemColor];
    };
    DrawingColorModelInfo.prototype.getRgbFromSchemeColor = function (colorProvider, styleColor) {
        if (this._schemeColor == enums_2.SchemeColorValues.Style)
            return styleColor;
        return this._schemeColor == enums_2.SchemeColorValues.Empty ? dx_color_1.DXColor.empty : colorProvider.officeTheme.colors.getColorBySchemeColorValues(colorProvider, this._schemeColor);
    };
    DrawingColorModelInfo.prototype.restoreDefaultValues = function () {
        this._rgb = dx_color_1.DXColor.empty;
        this._schemeColor = enums_2.SchemeColorValues.Empty;
        this._systemColor = enums_2.SystemColorValues.Empty;
        this._preset = "";
        this._scRgb = sc_rgbcolor_1.ScRGBColor.defaultValue;
        this._hsl = color_hsl_1.ColorHSL.defaultValue;
    };
    DrawingColorModelInfo.prototype.clone = function () {
        var result = new DrawingColorModelInfo();
        result.copyFrom(this);
        return result;
    };
    DrawingColorModelInfo.prototype.copyFrom = function (value) {
        this._colorType = value._colorType;
        this._rgb = value._rgb;
        this._schemeColor = value._schemeColor;
        this._systemColor = value._systemColor;
        this._preset = value._preset;
        this._scRgb = value._scRgb;
        this._hsl = value._hsl;
    };
    DrawingColorModelInfo.prototype.equals = function (obj) {
        return obj &&
            this._colorType == obj._colorType &&
            this._rgb == obj._rgb &&
            this._schemeColor == obj._schemeColor &&
            this._systemColor == obj._systemColor &&
            this._preset == obj._preset &&
            this._scRgb.equals(obj._scRgb) &&
            this._hsl.equals(obj._hsl);
    };
    DrawingColorModelInfo.empty = new DrawingColorModelInfo();
    DrawingColorModelInfo.systemColorTable = (_a = {},
        _a[enums_2.SystemColorValues.Sc3dDkShadow] = d_xsystem_colors_1.DXSystemColors.controlDarkDark,
        _a[enums_2.SystemColorValues.Sc3dLight] = d_xsystem_colors_1.DXSystemColors.controlLightLight,
        _a[enums_2.SystemColorValues.ScActiveBorder] = d_xsystem_colors_1.DXSystemColors.activeBorder,
        _a[enums_2.SystemColorValues.ScActiveCaption] = d_xsystem_colors_1.DXSystemColors.activeCaption,
        _a[enums_2.SystemColorValues.ScAppWorkspace] = d_xsystem_colors_1.DXSystemColors.appWorkspace,
        _a[enums_2.SystemColorValues.ScBackground] = d_xsystem_colors_1.DXSystemColors.desktop,
        _a[enums_2.SystemColorValues.ScBtnFace] = d_xsystem_colors_1.DXSystemColors.control,
        _a[enums_2.SystemColorValues.ScBtnHighlight] = d_xsystem_colors_1.DXSystemColors.controlLight,
        _a[enums_2.SystemColorValues.ScBtnShadow] = d_xsystem_colors_1.DXSystemColors.controlDark,
        _a[enums_2.SystemColorValues.ScBtnText] = d_xsystem_colors_1.DXSystemColors.controlText,
        _a[enums_2.SystemColorValues.ScCaptionText] = d_xsystem_colors_1.DXSystemColors.activeCaptionText,
        _a[enums_2.SystemColorValues.ScGradientActiveCaption] = d_xsystem_colors_1.DXSystemColors.gradientActiveCaption,
        _a[enums_2.SystemColorValues.ScGradientInactiveCaption] = d_xsystem_colors_1.DXSystemColors.gradientInactiveCaption,
        _a[enums_2.SystemColorValues.ScGrayText] = d_xsystem_colors_1.DXSystemColors.grayText,
        _a[enums_2.SystemColorValues.ScHighlight] = d_xsystem_colors_1.DXSystemColors.highlight,
        _a[enums_2.SystemColorValues.ScHighlightText] = d_xsystem_colors_1.DXSystemColors.highlightText,
        _a[enums_2.SystemColorValues.ScHotLight] = d_xsystem_colors_1.DXSystemColors.hotTrack,
        _a[enums_2.SystemColorValues.ScInactiveBorder] = d_xsystem_colors_1.DXSystemColors.inactiveBorder,
        _a[enums_2.SystemColorValues.ScInactiveCaption] = d_xsystem_colors_1.DXSystemColors.inactiveCaption,
        _a[enums_2.SystemColorValues.ScInactiveCaptionText] = d_xsystem_colors_1.DXSystemColors.inactiveCaptionText,
        _a[enums_2.SystemColorValues.ScInfoBk] = d_xsystem_colors_1.DXSystemColors.info,
        _a[enums_2.SystemColorValues.ScInfoText] = d_xsystem_colors_1.DXSystemColors.infoText,
        _a[enums_2.SystemColorValues.ScMenu] = d_xsystem_colors_1.DXSystemColors.menu,
        _a[enums_2.SystemColorValues.ScMenuBar] = d_xsystem_colors_1.DXSystemColors.menuBar,
        _a[enums_2.SystemColorValues.ScMenuHighlight] = d_xsystem_colors_1.DXSystemColors.menuHighlight,
        _a[enums_2.SystemColorValues.ScMenuText] = d_xsystem_colors_1.DXSystemColors.menuText,
        _a[enums_2.SystemColorValues.ScScrollBar] = d_xsystem_colors_1.DXSystemColors.scrollBar,
        _a[enums_2.SystemColorValues.ScWindow] = d_xsystem_colors_1.DXSystemColors.window,
        _a[enums_2.SystemColorValues.ScWindowFrame] = d_xsystem_colors_1.DXSystemColors.windowFrame,
        _a[enums_2.SystemColorValues.ScWindowText] = d_xsystem_colors_1.DXSystemColors.windowText,
        _a);
    return DrawingColorModelInfo;
}());
exports.DrawingColorModelInfo = DrawingColorModelInfo;
