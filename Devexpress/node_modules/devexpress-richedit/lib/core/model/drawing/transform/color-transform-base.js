"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var math_1 = require("@devexpress/utils/lib/utils/math");
var dx_color_1 = require("../../color/dx-color");
var ColorTransformBase = (function () {
    function ColorTransformBase() {
    }
    ColorTransformBase.prototype.applyInverseDefaultGamma = function (normalRgb) {
        if (normalRgb < 0)
            return 0;
        if (normalRgb <= 0.04045)
            return normalRgb / 12.92;
        if (normalRgb < 1)
            return Math.pow((normalRgb + 0.055) / 1.055, 2.4);
        return 1;
    };
    ColorTransformBase.prototype.applyInverseDefaultGammaByColor = function (color) {
        return dx_color_1.DXColor.fromRgb(this.toIntValue(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getRed(color)))), this.toIntValue(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getGreen(color)))), this.toIntValue(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getBlue(color)))));
    };
    ColorTransformBase.prototype.applyDefaultGamma = function (normalRgb) {
        if (normalRgb < 0)
            return 0;
        if (normalRgb <= 0.0031308)
            return normalRgb * 12.92;
        if (normalRgb < 1)
            return 1.055 * Math.pow(normalRgb, 1.0 / 2.4) - 0.055;
        return 1;
    };
    ColorTransformBase.prototype.applyDefaultGammaByColor = function (color) {
        return dx_color_1.DXColor.fromRgb(this.toIntValue(this.applyDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getRed(color)))), this.toIntValue(this.applyDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getGreen(color)))), this.toIntValue(this.applyDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getBlue(color)))));
    };
    ColorTransformBase.prototype.toDoubleValue = function (value) {
        return value / 255.0;
    };
    ColorTransformBase.prototype.toIntValue = function (value) {
        return this.getFixRGBValue(Math.round(255 * value));
    };
    ColorTransformBase.prototype.getFixRGBValue = function (rgb) {
        return math_1.MathUtils.restrictValue(rgb, 0, 255);
    };
    return ColorTransformBase;
}());
exports.ColorTransformBase = ColorTransformBase;
