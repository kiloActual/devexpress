"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var math_1 = require("@devexpress/utils/lib/utils/math");
var drawing_value_constants_1 = require("../drawing-value-constants");
var color_transform_base_1 = require("./color-transform-base");
var ColorTransformValueBase = (function (_super) {
    tslib_1.__extends(ColorTransformValueBase, _super);
    function ColorTransformValueBase(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    ColorTransformValueBase.prototype.equals = function (obj) {
        return obj &&
            obj instanceof ColorTransformValueBase &&
            this.value == obj.value;
    };
    ColorTransformValueBase.prototype.getRGBFromValue = function () {
        var rgb = this.value / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        return this.toIntValue(this.applyDefaultGamma(rgb));
    };
    ColorTransformValueBase.prototype.applyRGBOffsetNormalized = function (normalRgb, offset) {
        return this.getFixRGBNormalValue(normalRgb + offset);
    };
    ColorTransformValueBase.prototype.applyRGBOffset = function (rgb) {
        var offset = this.value / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        return this.toIntValue(this.applyDefaultGamma(this.applyRGBOffsetNormalized(this.applyInverseDefaultGamma(this.toDoubleValue(rgb)), offset)));
    };
    ColorTransformValueBase.prototype.applyRGBModulationNormalized = function (normalRgb, modulation) {
        return this.getFixRGBNormalValue(normalRgb * modulation);
    };
    ColorTransformValueBase.prototype.applyRGBModulation = function (rgb) {
        var modulation = this.value / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        return this.applyRGBModulationCore(rgb, modulation);
    };
    ColorTransformValueBase.prototype.getFixRGBNormalValue = function (rgb) {
        return math_1.MathUtils.restrictValue(rgb, 0, 1);
    };
    ColorTransformValueBase.prototype.applyRGBModulationCore = function (rgb, modulation) {
        return this.toIntValue(this.applyDefaultGamma(this.applyRGBModulationNormalized(this.applyInverseDefaultGamma(this.toDoubleValue(rgb)), modulation)));
    };
    return ColorTransformValueBase;
}(color_transform_base_1.ColorTransformBase));
exports.ColorTransformValueBase = ColorTransformValueBase;
