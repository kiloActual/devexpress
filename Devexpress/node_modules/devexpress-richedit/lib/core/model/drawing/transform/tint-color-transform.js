"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var color_1 = require("@devexpress/utils/lib/utils/color");
var dx_color_1 = require("../../color/dx-color");
var drawing_value_constants_1 = require("../drawing-value-constants");
var color_transform_value_base_1 = require("./color-transform-value-base");
var TintColorTransform = (function (_super) {
    tslib_1.__extends(TintColorTransform, _super);
    function TintColorTransform() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TintColorTransform.prototype.clone = function () {
        return new TintColorTransform(this.value);
    };
    TintColorTransform.prototype.applyTransform = function (color) {
        var normalTint = 1 - this.value / drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
        var r = this.toIntValue(this.applyDefaultGamma(this.applyTintCore(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getRed(color))), normalTint)));
        var g = this.toIntValue(this.applyDefaultGamma(this.applyTintCore(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getGreen(color))), normalTint)));
        var b = this.toIntValue(this.applyDefaultGamma(this.applyTintCore(this.applyInverseDefaultGamma(this.toDoubleValue(color_1.ColorUtils.getBlue(color))), normalTint)));
        return dx_color_1.DXColor.fromRgb(r, g, b);
    };
    TintColorTransform.prototype.applyTintCore = function (normalRgb, normalTint) {
        return normalTint > 0 ? normalRgb * (1 - normalTint) + normalTint : normalRgb * (1 + normalTint);
    };
    return TintColorTransform;
}(color_transform_value_base_1.ColorTransformValueBase));
exports.TintColorTransform = TintColorTransform;
