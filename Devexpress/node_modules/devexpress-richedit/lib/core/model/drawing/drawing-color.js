"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var drawing_color_model_info_cache_1 = require("../caches/hashed-caches/drawing-color-model-info-cache");
var dx_color_1 = require("../color/dx-color");
var enums_1 = require("../color/enums");
var drawing_color_model_info_1 = require("./drawing-color-model-info");
var enums_2 = require("./enums");
var alpha_color_transform_1 = require("./transform/alpha-color-transform");
var color_transform_collection_1 = require("./transform/color-transform-collection");
var DrawingColor = (function () {
    function DrawingColor(color, transforms) {
        if (transforms === void 0) { transforms = new color_transform_collection_1.ColorTransformCollection(); }
        this.transforms = transforms;
        this.color = color;
    }
    DrawingColor.createByDrawingColorModel = function (colorInfo) {
        return new DrawingColor(colorInfo);
    };
    DrawingColor.createByColor = function (color) {
        var alpha = color_1.ColorUtils.getAlpha(color);
        return alpha == 255 ?
            new DrawingColor(drawing_color_model_info_1.DrawingColorModelInfo.createARGB(color)) :
            new DrawingColor(drawing_color_model_info_1.DrawingColorModelInfo.createRGB(color), new color_transform_collection_1.ColorTransformCollection([alpha_color_transform_1.AlphaColorTransform.createFromAlpha(alpha)]));
    };
    Object.defineProperty(DrawingColor.prototype, "isEmpty", {
        get: function () { return this.transforms.transforms.length == 0 && this.color.isEmpty; },
        enumerable: true,
        configurable: true
    });
    DrawingColor.prototype.finalColor = function (colorProvider) {
        return this.toRgb(colorProvider, dx_color_1.DXColor.empty);
    };
    Object.defineProperty(DrawingColor.prototype, "originalColor", {
        get: function () { return this; },
        enumerable: true,
        configurable: true
    });
    DrawingColor.prototype.setColorFromRGB = function (rgb) {
        var alpha = color_1.ColorUtils.getAlpha(rgb);
        if (alpha == 255)
            this.rgb = rgb;
        else {
            this.rgb = dx_color_1.DXColor.fromArgb(255, rgb);
            this.transforms.add(alpha_color_transform_1.AlphaColorTransform.createFromAlpha(alpha));
        }
    };
    Object.defineProperty(DrawingColor.prototype, "rgb", {
        get: function () { return this.color.rgb; },
        set: function (value) {
            if (this.color.rgb == value && this.color.colorType == enums_1.DrawingColorType.Rgb)
                return;
            this.color.rgb = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "system", {
        get: function () { return this.color.systemColor; },
        set: function (value) {
            if (this.color.systemColor == value && this.color.colorType == enums_1.DrawingColorType.System)
                return;
            this.color.systemColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "scheme", {
        get: function () { return this.color.schemeColor; },
        set: function (value) {
            if (this.color.schemeColor == value && this.color.colorType == enums_1.DrawingColorType.Scheme)
                return;
            this.color.schemeColor = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "preset", {
        get: function () { return this.color.preset; },
        set: function (value) {
            if (this.color.preset == value && this.color.colorType == enums_1.DrawingColorType.Preset)
                return;
            this.color.preset = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "hsl", {
        get: function () { return this.color.hsl; },
        set: function (value) {
            if (this.color.hsl.equals(value) && this.color.colorType == enums_1.DrawingColorType.Hsl)
                return;
            this.color.hsl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "scRgb", {
        get: function () { return this.color.scRgb; },
        set: function (value) {
            if (this.color.scRgb.equals(value) && this.color.colorType == enums_1.DrawingColorType.ScRgb)
                return;
            this.color.scRgb = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DrawingColor.prototype, "colorType", {
        get: function () { return this.color.colorType; },
        enumerable: true,
        configurable: true
    });
    DrawingColor.prototype.toRgb = function (colorProvider, styleColor) {
        return this.transforms.applyTransform(this.color.toRgb(colorProvider, styleColor));
    };
    Object.defineProperty(DrawingColor.prototype, "type", {
        get: function () { return enums_2.DrawingBulletType.Color; },
        enumerable: true,
        configurable: true
    });
    DrawingColor.prototype.equals = function (obj) {
        return obj &&
            this.color.equals(obj.color) &&
            this.transforms.equals(obj.transforms);
    };
    DrawingColor.prototype.clear = function () {
        this.color = drawing_color_model_info_cache_1.DrawingColorModelInfoCache.defaultItem;
        this.transforms.clear();
    };
    DrawingColor.prototype.clone = function () {
        return new DrawingColor(this.color.clone(), this.transforms.clone());
    };
    return DrawingColor;
}());
exports.DrawingColor = DrawingColor;
