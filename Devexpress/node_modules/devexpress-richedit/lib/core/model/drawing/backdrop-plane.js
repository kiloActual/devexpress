"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var scene3d_vector_1 = require("./scene3d-vector");
var BackdropPlane = (function () {
    function BackdropPlane(normalVector, upVector, anchorPoint) {
        if (normalVector === void 0) { normalVector = new scene3d_vector_1.Scene3DVector(); }
        if (upVector === void 0) { upVector = new scene3d_vector_1.Scene3DVector(); }
        if (anchorPoint === void 0) { anchorPoint = new scene3d_vector_1.Scene3DVector(); }
        this.normalVector = normalVector;
        this.upVector = upVector;
        this.anchorPoint = anchorPoint;
    }
    Object.defineProperty(BackdropPlane.prototype, "isDefault", {
        get: function () {
            return this.anchorPoint.isDefault && this.normalVector.isDefault && this.upVector.isDefault;
        },
        enumerable: true,
        configurable: true
    });
    BackdropPlane.prototype.clone = function () {
        return new BackdropPlane(this.normalVector.clone(), this.upVector.clone(), this.anchorPoint.clone());
    };
    BackdropPlane.prototype.equals = function (obj) {
        return obj &&
            this.normalVector.equals(obj.normalVector) &&
            this.upVector.equals(obj.upVector) &&
            this.anchorPoint.equals(obj.anchorPoint);
    };
    BackdropPlane.prototype.resetToStyle = function () {
        this.normalVector = new scene3d_vector_1.Scene3DVector(0, 0, 0);
        this.upVector = new scene3d_vector_1.Scene3DVector(0, 0, 0);
        this.anchorPoint = new scene3d_vector_1.Scene3DVector(0, 0, 0);
    };
    return BackdropPlane;
}());
exports.BackdropPlane = BackdropPlane;
