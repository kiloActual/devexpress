"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var drawing_value_constants_1 = require("./drawing-value-constants");
var Scene3DPropertiesInfo = (function () {
    function Scene3DPropertiesInfo() {
        this.packedValues = 0x00000000;
        this.zoom = drawing_value_constants_1.DrawingValueConstants.ThousandthOfPercentage;
    }
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "cameraType", {
        get: function () { return this.getUIntValue(Scene3DPropertiesInfo.maskPresetCameraType, 0); },
        set: function (value) { this.setUIntValue(Scene3DPropertiesInfo.maskPresetCameraType, 0, value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "lightRigDirection", {
        get: function () { return this.getUIntValue(Scene3DPropertiesInfo.maskLightRigDirection, 6); },
        set: function (value) { this.setUIntValue(Scene3DPropertiesInfo.maskLightRigDirection, 6, value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "lightRigPreset", {
        get: function () { return this.getUIntValue(Scene3DPropertiesInfo.maskLightRigPreset, 10); },
        set: function (value) { this.setUIntValue(Scene3DPropertiesInfo.maskLightRigPreset, 10, value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "hasCameraRotation", {
        get: function () { return this.getBooleanValue(Scene3DPropertiesInfo.maskHasCameraRotation); },
        set: function (value) { this.setBooleanValue(Scene3DPropertiesInfo.maskHasCameraRotation, value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "hasLightRigRotation", {
        get: function () { return this.getBooleanValue(Scene3DPropertiesInfo.maskHasLightRigRotation); },
        set: function (value) { this.setBooleanValue(Scene3DPropertiesInfo.maskHasLightRigRotation, value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scene3DPropertiesInfo.prototype, "isDefault", {
        get: function () { return this.equals(Scene3DPropertiesInfo.defaultInfo); },
        enumerable: true,
        configurable: true
    });
    Scene3DPropertiesInfo.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.packedValues ^
            math_1.MathUtils.somePrimes[1] * this.fov ^
            math_1.MathUtils.somePrimes[2] * this.zoom;
    };
    Scene3DPropertiesInfo.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    Scene3DPropertiesInfo.prototype.getUIntValue = function (mask, offsetBits) {
        return (this.packedValues & mask) >> offsetBits;
    };
    Scene3DPropertiesInfo.prototype.setUIntValue = function (mask, offsetBits, value) {
        this.packedValues = ~mask;
        this.packedValues |= (value << offsetBits) & mask;
    };
    Scene3DPropertiesInfo.prototype.setBooleanValue = function (mask, bitVal) {
        this.packedValues = bitVal ? (this.packedValues || mask) : (this.packedValues && ~mask);
    };
    Scene3DPropertiesInfo.prototype.getBooleanValue = function (mask) {
        return (this.packedValues & mask) != 0;
    };
    Scene3DPropertiesInfo.prototype.equals = function (obj) {
        return obj &&
            this.packedValues == obj.packedValues &&
            this.fov == obj.fov &&
            this.zoom == obj.zoom;
    };
    Scene3DPropertiesInfo.prototype.clone = function () {
        var obj = new Scene3DPropertiesInfo();
        obj.packedValues = this.packedValues;
        obj.fov = this.fov;
        obj.zoom = this.zoom;
        return obj;
    };
    Scene3DPropertiesInfo.defaultInfo = new Scene3DPropertiesInfo();
    Scene3DPropertiesInfo.maskPresetCameraType = 0x0000003F;
    Scene3DPropertiesInfo.maskLightRigDirection = 0x000003C0;
    Scene3DPropertiesInfo.maskLightRigPreset = 0x00007C00;
    Scene3DPropertiesInfo.maskHasCameraRotation = 0x00008000;
    Scene3DPropertiesInfo.maskHasLightRigRotation = 0x00010000;
    return Scene3DPropertiesInfo;
}());
exports.Scene3DPropertiesInfo = Scene3DPropertiesInfo;
