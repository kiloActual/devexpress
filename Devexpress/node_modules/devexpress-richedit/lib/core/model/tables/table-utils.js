"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var change_table_cell_history_items_1 = require("../history/items/tables/change-table-cell-history-items");
var table_1 = require("./main-structures/table");
var table_properties_merger_1 = require("./properties-mergers/table-properties-merger");
var table_base_structures_1 = require("./secondary-structures/table-base-structures");
var TableCellUtils = (function () {
    function TableCellUtils() {
    }
    TableCellUtils.getCellIndexByColumnIndex = function (row, startColumnIndex) {
        var columnIndex = row.gridBefore;
        for (var i = 0, cell = void 0; cell = row.cells[i]; i++) {
            if (startColumnIndex >= columnIndex && startColumnIndex < columnIndex + cell.columnSpan)
                return i;
            columnIndex += cell.columnSpan;
        }
        return -1;
    };
    TableCellUtils.getCellIndexByEndColumnIndex = function (row, endColumnIndex) {
        var cellIndexByColumnIndex = this.getCellIndexByColumnIndex(row, endColumnIndex);
        if (cellIndexByColumnIndex < 0)
            return -1;
        var cellByColumnIndex = row.cells[cellIndexByColumnIndex];
        if (this.getStartColumnIndex(cellByColumnIndex) + cellByColumnIndex.columnSpan - 1 <= endColumnIndex)
            return cellIndexByColumnIndex;
        if (cellIndexByColumnIndex != 0)
            return cellIndexByColumnIndex - 1;
        return -1;
    };
    TableCellUtils.getStartColumnIndex = function (cell) {
        var columnIndex = cell.parentRow.gridBefore;
        var row = cell.parentRow;
        for (var i = 0, currentCell = void 0; currentCell = row.cells[i]; i++) {
            if (currentCell === cell)
                break;
            columnIndex += currentCell.columnSpan;
        }
        return columnIndex;
    };
    TableCellUtils.getEndColumnIndex = function (cell) {
        return this.getStartColumnIndex(cell) + cell.columnSpan - 1;
    };
    TableCellUtils.getColumnCount = function (table) {
        var row = table.rows[0];
        var result = row.gridBefore + row.gridAfter;
        for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
            result += cell.columnSpan;
        }
        return result;
    };
    TableCellUtils.getCellIndicesByColumnsRange = function (row, interval) {
        var indices = [];
        var startColumnIndex = interval.start;
        while (startColumnIndex < interval.end) {
            var cellIndex = this.getCellIndexByColumnIndex(row, startColumnIndex);
            var cell = row.cells[cellIndex];
            if (!cell)
                return indices;
            indices.push(cellIndex);
            startColumnIndex += startColumnIndex - this.getStartColumnIndex(cell) + cell.columnSpan;
        }
        return indices;
    };
    TableCellUtils.getAbsoluteCellIndexInRow = function (row, columnIndex) {
        if (!row.cells.length)
            throw new Error("Empty row");
        columnIndex -= row.gridBefore;
        var cellIndex = 0;
        var cellsCount = row.cells.length;
        while (columnIndex > 0 && cellIndex < cellsCount) {
            var currentCell = row.cells[cellIndex];
            columnIndex -= currentCell.columnSpan;
            if (columnIndex >= 0)
                cellIndex++;
        }
        return cellIndex;
    };
    TableCellUtils.getVerticalSpanCellPositions = function (restartCellPosition, patternCellStartColumnIndex) {
        var positions = [];
        positions.push(restartCellPosition);
        if (restartCellPosition.cell.verticalMerging !== table_base_structures_1.TableCellMergingState.Restart)
            return positions;
        var table = restartCellPosition.table;
        for (var rowIndex = restartCellPosition.rowIndex + 1, nextRow = void 0; nextRow = table.rows[rowIndex]; rowIndex++) {
            var nextRowCellIndex = this.getCellIndexByColumnIndex(nextRow, patternCellStartColumnIndex);
            var nextCell = nextRow.cells[nextRowCellIndex];
            if (nextCell && nextCell.verticalMerging === table_base_structures_1.TableCellMergingState.Continue)
                positions.push(table_1.TablePosition.createAndInit(table, rowIndex, nextRowCellIndex));
            else
                break;
        }
        return positions;
    };
    TableCellUtils.getSameTableCells = function (firstCell, lastCell) {
        var rightOrder = firstCell.parentRow.parentTable.nestedLevel >= lastCell.parentRow.parentTable.nestedLevel;
        var topLevelCell = rightOrder ? firstCell : lastCell;
        var lowLevelCell = rightOrder ? lastCell : firstCell;
        while (topLevelCell.parentRow.parentTable.nestedLevel > lowLevelCell.parentRow.parentTable.nestedLevel)
            topLevelCell = topLevelCell.parentRow.parentTable.parentCell;
        while (true) {
            if (topLevelCell.parentRow.parentTable === lowLevelCell.parentRow.parentTable)
                return {
                    firstCell: rightOrder ? topLevelCell : lowLevelCell,
                    lastCell: rightOrder ? lowLevelCell : topLevelCell
                };
            topLevelCell = topLevelCell.parentRow.parentTable.parentCell;
            lowLevelCell = lowLevelCell.parentRow.parentTable.parentCell;
            if (!topLevelCell || !lowLevelCell)
                return null;
        }
    };
    return TableCellUtils;
}());
exports.TableCellUtils = TableCellUtils;
var TableConditionalFormattingCalculator = (function () {
    function TableConditionalFormattingCalculator() {
    }
    TableConditionalFormattingCalculator.updateTable = function (control, table, subDocument) {
        var tableStyleColumnBandSize = new table_properties_merger_1.TablePropertiesMergerStyleColumnBandSize()
            .getProperty(table.properties, table.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, control.model.defaultTableProperties);
        var tableStyleRowBandSize = new table_properties_merger_1.TablePropertiesMergerStyleRowBandSize()
            .getProperty(table.properties, table.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, control.model.defaultTableProperties);
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            var rowConditionalFormatting = this.getRowConditionalFormatting(table.lookTypes, tableStyleRowBandSize, table, rowIndex);
            if (row.conditionalFormatting !== rowConditionalFormatting)
                control.history.addAndRedo(new change_table_cell_history_items_1.TableRowConditionalFormattingHistoryItem(control.modelManipulator, subDocument, table.index, rowIndex, rowConditionalFormatting));
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++) {
                var cellConditionalFormatting = rowConditionalFormatting | this.getCellConditionalFormatting(table.lookTypes, tableStyleColumnBandSize, table, rowIndex, cellIndex);
                if (cell.conditionalFormatting !== cellConditionalFormatting)
                    control.history.addAndRedo(new change_table_cell_history_items_1.TableCellConditionalFormattingHistoryItem(control.modelManipulator, subDocument, table.index, rowIndex, cellIndex, cellConditionalFormatting));
            }
        }
    };
    TableConditionalFormattingCalculator.updateTableWithoutHistory = function (model, table) {
        var tableStyleColumnBandSize = new table_properties_merger_1.TablePropertiesMergerStyleColumnBandSize()
            .getProperty(table.properties, table.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, model.defaultTableProperties);
        var tableStyleRowBandSize = new table_properties_merger_1.TablePropertiesMergerStyleRowBandSize()
            .getProperty(table.properties, table.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, model.defaultTableProperties);
        for (var rowIndex = 0, row = void 0; row = table.rows[rowIndex]; rowIndex++) {
            row.conditionalFormatting = this.getRowConditionalFormatting(table.lookTypes, tableStyleRowBandSize, table, rowIndex);
            for (var cellIndex = 0, cell = void 0; cell = row.cells[cellIndex]; cellIndex++)
                cell.conditionalFormatting = row.conditionalFormatting |
                    TableConditionalFormattingCalculator.getCellConditionalFormatting(table.lookTypes, tableStyleColumnBandSize, table, rowIndex, cellIndex);
        }
    };
    TableConditionalFormattingCalculator.getRowConditionalFormatting = function (tableLook, tableStyleRowBandSize, table, rowIndex) {
        var result = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstRow) {
            if (rowIndex === 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.FirstRow;
        }
        if (tableLook & table_base_structures_1.TableLookTypes.ApplyLastRow) {
            if (rowIndex === table.rows.length - 1)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.LastRow;
        }
        if (!(tableLook & table_base_structures_1.TableLookTypes.DoNotApplyRowBanding) && !(result & table_base_structures_1.ConditionalTableStyleFormatting.FirstRow || result & table_base_structures_1.ConditionalTableStyleFormatting.LastRow)) {
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstRow)
                rowIndex--;
            if (Math.floor(rowIndex / tableStyleRowBandSize) % 2 == 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.OddRowBanding;
            else
                result |= table_base_structures_1.ConditionalTableStyleFormatting.EvenRowBanding;
        }
        return result;
    };
    TableConditionalFormattingCalculator.getCellConditionalFormatting = function (tableLook, tableStyleColumnBandSize, table, rowIndex, cellIndex) {
        var result = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        var row = table.rows[rowIndex];
        if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstColumn) {
            if (cellIndex === 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.FirstColumn;
        }
        if (tableLook & table_base_structures_1.TableLookTypes.ApplyLastColumn) {
            if (cellIndex === row.cells.length - 1)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.LastColumn;
        }
        if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstRow && rowIndex === 0) {
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstColumn && cellIndex === 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.TopLeftCell;
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyLastColumn && cellIndex === row.cells.length - 1)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.TopRightCell;
        }
        else if (tableLook & table_base_structures_1.TableLookTypes.ApplyLastRow && rowIndex === table.rows.length - 1) {
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstColumn && cellIndex === 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.BottomLeftCell;
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyLastColumn && cellIndex === row.cells.length - 1)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.BottomRightCell;
        }
        if (!(tableLook & table_base_structures_1.TableLookTypes.DoNotApplyColumnBanding) && !(result & table_base_structures_1.ConditionalTableStyleFormatting.FirstColumn || result & table_base_structures_1.ConditionalTableStyleFormatting.LastColumn)) {
            if (tableLook & table_base_structures_1.TableLookTypes.ApplyFirstColumn)
                cellIndex--;
            if (Math.floor(cellIndex / tableStyleColumnBandSize) % 2 == 0)
                result |= table_base_structures_1.ConditionalTableStyleFormatting.OddColumnBanding;
            else
                result |= table_base_structures_1.ConditionalTableStyleFormatting.EvenColumnBanding;
        }
        return result;
    };
    return TableConditionalFormattingCalculator;
}());
exports.TableConditionalFormattingCalculator = TableConditionalFormattingCalculator;
