"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var CellGridInfo = (function () {
    function CellGridInfo(rowIndex, gridCellIndex, cellIndexes) {
        this.rowIndex = rowIndex;
        this.gridCellIndex = gridCellIndex;
        this.cellIndexes = cellIndexes;
    }
    Object.defineProperty(CellGridInfo.prototype, "rowIndexesInterval", {
        get: function () {
            return new fixed_1.FixedInterval(this.rowIndex, this.cellIndexes.length);
        },
        enumerable: true,
        configurable: true
    });
    CellGridInfo.prototype.getStartRowIndex = function () {
        return this.rowIndex;
    };
    CellGridInfo.prototype.getCellIndex = function (rowIndexInCell) {
        return this.cellIndexes[rowIndexInCell];
    };
    CellGridInfo.prototype.getCellIndexAbs = function (rowIndexInTable) {
        return this.cellIndexes[rowIndexInTable - this.rowIndex];
    };
    CellGridInfo.prototype.getNumRowsInCell = function () {
        return this.cellIndexes.length;
    };
    CellGridInfo.prototype.getGridCellIndex = function () {
        return this.gridCellIndex;
    };
    CellGridInfo.prototype.getGridCellIndexEnd = function (table) {
        return this.gridCellIndex + this.getColumnSpan(table);
    };
    CellGridInfo.prototype.addCellIndex = function (index) {
        this.cellIndexes.push(index);
        return this;
    };
    CellGridInfo.prototype.intersectRow = function (rowIndex) {
        return rowIndex >= this.rowIndex && rowIndex < this.getEndRowIndex();
    };
    CellGridInfo.prototype.getEndRowIndex = function () {
        return this.rowIndex + this.cellIndexes.length;
    };
    CellGridInfo.prototype.getLastRowIndex = function () {
        return this.getEndRowIndex() - 1;
    };
    CellGridInfo.prototype.getColumnSpan = function (table) {
        return table.rows[this.getStartRowIndex()].cells[this.getCellIndex(0)].columnSpan;
    };
    CellGridInfo.prototype.intersectGridColumn = function (columnIndex, columnSpan) {
        return columnIndex >= this.gridCellIndex && columnIndex < this.gridCellIndex + columnSpan;
    };
    return CellGridInfo;
}());
exports.CellGridInfo = CellGridInfo;
