"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var table_cell_properties_merger_1 = require("../properties-mergers/table-cell-properties-merger");
var table_base_structures_1 = require("../secondary-structures/table-base-structures");
var table_units_1 = require("../secondary-structures/table-units");
var TableCell = (function () {
    function TableCell(parentRow, properties) {
        this.preferredWidth = table_units_1.TableWidthUnit.createDefault();
        this.columnSpan = 1;
        this.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        this.conditionalFormatting = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        this.parentRow = parentRow;
        this.properties = properties;
    }
    TableCell.prototype.destructor = function (positionManager) {
        if (this.startParagraphPosition)
            positionManager.unregisterPosition(this.startParagraphPosition);
        if (this.endParagrapPosition)
            positionManager.unregisterPosition(this.endParagrapPosition);
    };
    Object.defineProperty(TableCell.prototype, "interval", {
        get: function () { return fixed_1.FixedInterval.fromPositions(this.startParagraphPosition.value, this.endParagrapPosition.value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableCell.prototype, "isFirstCellInRow", {
        get: function () {
            return this === this.parentRow.cells[0];
        },
        enumerable: true,
        configurable: true
    });
    TableCell.prototype.getActualTopCellBorder = function (defaultCellProperties) {
        var isTopOutsideBorder = this.parentRow.parentTable.rows[0] == this.parentRow;
        return this.getActualBorderCore(new table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop(this.parentRow.tablePropertiesException, isTopOutsideBorder), defaultCellProperties);
    };
    TableCell.prototype.getActualLeftCellBorder = function (defaultCellProperties) {
        var isLeftOutsideBorder = this.parentRow.cells[0] == this;
        return this.getActualBorderCore(new table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft(this.parentRow.tablePropertiesException, isLeftOutsideBorder), defaultCellProperties);
    };
    TableCell.prototype.getActualBottomCellBorder = function (defaultCellProperties) {
        var isBottomOutsideBorder = list_1.ListUtils.last(this.parentRow.parentTable.rows) == this.parentRow;
        return this.getActualBorderCore(new table_cell_properties_merger_1.TableCellPropertiesMergerBorderBottom(this.parentRow.tablePropertiesException, isBottomOutsideBorder), defaultCellProperties);
    };
    TableCell.prototype.getActualRightCellBorder = function (defaultCellProperties) {
        var isRightOutsideBorder = list_1.ListUtils.last(this.parentRow.cells) == this;
        return this.getActualBorderCore(new table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight(this.parentRow.tablePropertiesException, isRightOutsideBorder), defaultCellProperties);
    };
    TableCell.prototype.getActualBorderCore = function (tableCellPropertiesMerger, defaultCellProperties) {
        var tableStyle = this.parentRow.parentTable.style;
        return tableCellPropertiesMerger.getProperty(this.properties, tableStyle, this.conditionalFormatting, defaultCellProperties);
    };
    TableCell.prototype.getActualLeftCellMargin = function (model) {
        return this.getActualCellMarginCore(new table_cell_properties_merger_1.TableCellPropertiesMergerMarginLeft(this.parentRow.parentTable, model, this.parentRow.tablePropertiesException), model.defaultTableCellProperties);
    };
    TableCell.prototype.getActualTopCellMargin = function (model) {
        return this.getActualCellMarginCore(new table_cell_properties_merger_1.TableCellPropertiesMergerMarginTop(this.parentRow.parentTable, model, this.parentRow.tablePropertiesException), model.defaultTableCellProperties);
    };
    TableCell.prototype.getActualRightCellMargin = function (model) {
        return this.getActualCellMarginCore(new table_cell_properties_merger_1.TableCellPropertiesMergerMarginRight(this.parentRow.parentTable, model, this.parentRow.tablePropertiesException), model.defaultTableCellProperties);
    };
    TableCell.prototype.getActualBottomCellMargin = function (model) {
        return this.getActualCellMarginCore(new table_cell_properties_merger_1.TableCellPropertiesMergerMarginBottom(this.parentRow.parentTable, model, this.parentRow.tablePropertiesException), model.defaultTableCellProperties);
    };
    TableCell.prototype.getActualCellMarginCore = function (tableCellPropertiesMerger, defaultTableCellProperties) {
        return tableCellPropertiesMerger.getProperty(this.properties, this.parentRow.parentTable.style, this.conditionalFormatting, defaultTableCellProperties);
    };
    TableCell.prototype.clone = function (subDocument, parentRow) {
        var result = new TableCell(parentRow, subDocument.documentModel.cache.tableCellPropertiesCache.getItem(this.properties));
        result.preferredWidth = this.preferredWidth.clone();
        result.columnSpan = this.columnSpan;
        result.verticalMerging = this.verticalMerging;
        result.startParagraphPosition = subDocument.positionManager.registerPosition(this.startParagraphPosition.value);
        result.endParagrapPosition = subDocument.positionManager.registerPosition(this.endParagrapPosition.value);
        return result;
    };
    return TableCell;
}());
exports.TableCell = TableCell;
