"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var table_properties_1 = require("../properties/table-properties");
var table_base_structures_1 = require("../secondary-structures/table-base-structures");
var table_units_1 = require("../secondary-structures/table-units");
var TableRow = (function () {
    function TableRow(parentTable, properties) {
        this.cells = [];
        this.widthBefore = table_units_1.TableWidthUnit.createDefault();
        this.widthAfter = table_units_1.TableWidthUnit.createDefault();
        this.gridBefore = 0;
        this.gridAfter = 0;
        this.height = table_units_1.TableHeightUnit.createDefault();
        this.tablePropertiesException = new table_properties_1.TableProperties();
        this.conditionalFormatting = table_base_structures_1.ConditionalTableStyleFormatting.WholeTable;
        this.parentTable = parentTable;
        this.properties = properties;
    }
    Object.defineProperty(TableRow.prototype, "logicColumnCount", {
        get: function () { return this.gridBefore + this.gridAfter + list_1.ListUtils.accumulate(this.cells, 0, function (acc, c) { return acc += c.columnSpan; }); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableRow.prototype, "isLastRowInTable", {
        get: function () {
            return list_1.ListUtils.last(this.parentTable.rows) === this;
        },
        enumerable: true,
        configurable: true
    });
    TableRow.prototype.destructor = function (positionManager) {
        for (var cellIndex = 0, cell; cell = this.cells[cellIndex]; cellIndex++)
            cell.destructor(positionManager);
    };
    TableRow.prototype.getStartPosition = function () {
        return this.cells[0].startParagraphPosition.value;
    };
    TableRow.prototype.getEndPosition = function () {
        return list_1.ListUtils.last(this.cells).endParagrapPosition.value;
    };
    Object.defineProperty(TableRow.prototype, "interval", {
        get: function () { return fixed_1.FixedInterval.fromPositions(this.getStartPosition(), this.getEndPosition()); },
        enumerable: true,
        configurable: true
    });
    TableRow.prototype.getCellColumnIndex = function (cellIndex) {
        return list_1.ListUtils.accumulate(this.cells, this.gridBefore, function (acc, cell) { return acc + cell.columnSpan; }, 0, cellIndex);
    };
    TableRow.prototype.getTotalCellsInRowConsiderGrid = function () {
        var cells = this.gridBefore;
        for (var i = 0, cell = void 0; cell = this.cells[i]; i++)
            cells += cell.columnSpan;
        cells += this.gridAfter;
        return cells;
    };
    TableRow.prototype.clone = function (subDocument, parentTable) {
        var result = new TableRow(parentTable, subDocument.documentModel.cache.tableRowPropertiesCache.getItem(this.properties));
        result.parentTable = parentTable;
        result.cells = list_1.ListUtils.map(this.cells, function (r) { return r.clone(subDocument, result); });
        result.widthBefore = this.widthBefore.clone();
        result.widthAfter = this.widthAfter.clone();
        result.gridBefore = this.gridBefore;
        result.gridAfter = this.gridAfter;
        result.height = this.height.clone();
        result.tablePropertiesException = this.tablePropertiesException.clone();
        return result;
    };
    return TableRow;
}());
exports.TableRow = TableRow;
