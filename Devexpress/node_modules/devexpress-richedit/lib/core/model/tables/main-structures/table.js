"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var table_alignment_applier_1 = require("../../../layout-formatter/table/table-alignment-applier");
var table_properties_merger_1 = require("../properties-mergers/table-properties-merger");
var table_base_structures_1 = require("../secondary-structures/table-base-structures");
var table_units_1 = require("../secondary-structures/table-units");
var Table = (function () {
    function Table(properties, style) {
        this.rows = [];
        this.preferredWidth = table_units_1.TableWidthUnit.createDefault();
        this.lookTypes = table_base_structures_1.TableLookTypes.None;
        this.properties = properties;
        this.style = style;
    }
    Table.prototype.getTotalVirtualColumnsCount = function () {
        return list_1.ListUtils.maxExtended(this.rows, function (row) { return row.getTotalCellsInRowConsiderGrid(); }).maxValue;
    };
    Table.prototype.destructor = function (positionManager) {
        for (var rowIndex = 0, tableRow; tableRow = this.rows[rowIndex]; rowIndex++)
            tableRow.destructor(positionManager);
    };
    Object.defineProperty(Table.prototype, "interval", {
        get: function () { return fixed_1.FixedInterval.fromPositions(this.getStartPosition(), this.getEndPosition()); },
        enumerable: true,
        configurable: true
    });
    Table.prototype.getParentTable = function () {
        var parentCell = this.parentCell;
        return parentCell ? this.parentCell.parentRow.parentTable : null;
    };
    Table.prototype.getTopLevelParent = function () {
        var currTable = this;
        while (currTable.parentCell)
            currTable = currTable.getParentTable();
        return currTable;
    };
    Table.prototype.getStartPosition = function () {
        return this.rows[0].getStartPosition();
    };
    Table.prototype.getEndPosition = function () {
        return this.rows[this.rows.length - 1].getEndPosition();
    };
    Table.prototype.getLastCell = function () {
        var lastRow = this.rows[this.rows.length - 1];
        return lastRow.cells[lastRow.cells.length - 1];
    };
    Table.prototype.getFirstCell = function () {
        return this.rows[0].cells[0];
    };
    Table.prototype.getActualLeftBorder = function (defaultTableProperties, isTableOuterBorder) {
        if (isTableOuterBorder === void 0) { isTableOuterBorder = true; }
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderLeft(isTableOuterBorder), defaultTableProperties);
    };
    Table.prototype.getActualRightBorder = function (defaultTableProperties, isTableOuterBorder) {
        if (isTableOuterBorder === void 0) { isTableOuterBorder = true; }
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderRight(isTableOuterBorder), defaultTableProperties);
    };
    Table.prototype.getActualBottomBorder = function (defaultTableProperties, isTableOuterBorder) {
        if (isTableOuterBorder === void 0) { isTableOuterBorder = true; }
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderBottom(isTableOuterBorder), defaultTableProperties);
    };
    Table.prototype.getActualTopBorder = function (defaultTableProperties, isTableOuterBorder) {
        if (isTableOuterBorder === void 0) { isTableOuterBorder = true; }
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderTop(isTableOuterBorder), defaultTableProperties);
    };
    Table.prototype.getActualHorizontalBorder = function (defaultTableProperties) {
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderHorizontal(), defaultTableProperties);
    };
    Table.prototype.getActualVerticalBorder = function (defaultTableProperties) {
        return this.getActualBorderCore(new table_properties_merger_1.TablePropertiesMergerBorderVertical(), defaultTableProperties);
    };
    Table.prototype.getActualBorderCore = function (tablePropertiesMerger, defaultTableProperties) {
        return tablePropertiesMerger.getProperty(this.properties, this.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
    };
    Table.prototype.getActualLeftMargin = function (defaultTableProperties) {
        return this.getActualMarginCore(new table_properties_merger_1.TablePropertiesMergerMarginLeft(), defaultTableProperties);
    };
    Table.prototype.getActualRightMargin = function (defaultTableProperties) {
        return this.getActualMarginCore(new table_properties_merger_1.TablePropertiesMergerMarginRight(), defaultTableProperties);
    };
    Table.prototype.getActualTopMargin = function (defaultTableProperties) {
        return this.getActualMarginCore(new table_properties_merger_1.TablePropertiesMergerMarginTop(), defaultTableProperties);
    };
    Table.prototype.getActualBottomMargin = function (defaultTableProperties) {
        return this.getActualMarginCore(new table_properties_merger_1.TablePropertiesMergerMarginBottom(), defaultTableProperties);
    };
    Table.prototype.getActualMarginCore = function (merger, defaultTableProperties) {
        return merger.getProperty(this.properties, this.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
    };
    Table.prototype.getActualTableAlignment = function () {
        return table_alignment_applier_1.TableAlignmentApplier.getTableAlignment(this);
    };
    Table.prototype.getActualTableIndent = function (defaultTableProperties) {
        var aligment = this.getActualTableAlignment();
        if (aligment != table_base_structures_1.TableRowAlignment.Left)
            return table_units_1.TableWidthUnit.createDefault();
        return new table_properties_merger_1.TablePropertiesMergerIndent().getProperty(this.properties, this.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
    };
    Table.prototype.getActualTableLayout = function (defaultTableProperties) {
        return new table_properties_merger_1.TablePropertiesMergerLayoutType().getProperty(this.properties, this.style, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, defaultTableProperties);
    };
    Table.comparer = function (a, b) {
        var cmpPos = a.getStartPosition() - b.getStartPosition();
        return cmpPos == 0 ? a.nestedLevel - b.nestedLevel : cmpPos;
    };
    Table.sort = function (tables) {
        tables.sort(Table.comparer);
        for (var tableIndex = 0, table = void 0; table = tables[tableIndex]; tableIndex++)
            table.index = tableIndex;
    };
    Table.advanceIndices = function (tables, startIndex, shift) {
        for (var i = startIndex, table = void 0; table = tables[i]; i++)
            table.index += shift;
    };
    Table.fillTableByLevels = function (subDocument) {
        var tableByLevels = subDocument.tablesByLevels;
        var tableByLevelsLength = tableByLevels.length;
        for (var tableIndex = 0, table = void 0; table = subDocument.tables[tableIndex]; tableIndex++) {
            table.index = tableIndex;
            if (table.nestedLevel >= tableByLevelsLength) {
                tableByLevels.push([]);
                tableByLevelsLength++;
            }
            tableByLevels[table.nestedLevel].push(table);
        }
    };
    Table.getTableCellByPosition = function (tables, position) {
        var table = Table.getTableByPosition(tables, position, true);
        return table ? Table.getTableCellByPositionFromTable(table, position) : null;
    };
    Table.getTableCellByPositionFromTable = function (table, position) {
        var rowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, position);
        var row = table.rows[rowIndex];
        var cellIndex = search_1.SearchUtils.normedInterpolationIndexOf(row.cells, function (c) { return c.startParagraphPosition.value; }, position);
        return row.cells[cellIndex];
    };
    Table.getTableByPosition = function (tables, position, maxNestedLevel, tableIndex) {
        if (tableIndex === void 0) { tableIndex = search_1.SearchUtils.normedInterpolationIndexOf(tables, function (t) { return t.getStartPosition(); }, position); }
        if (tableIndex < 0)
            return null;
        var table = tables[tableIndex];
        while (position >= table.getEndPosition()) {
            if (table.nestedLevel === 0)
                return null;
            table = table.getParentTable();
        }
        return Table.correctBoundTable(tables, table.index, position, maxNestedLevel ? function (index) { return ++index; } : function (index) { return --index; });
    };
    Table.correctBoundTable = function (tables, tableIndex, position, indexIterator) {
        var table = tables[tableIndex];
        var tablePos = table.getStartPosition();
        tableIndex = indexIterator(tableIndex);
        for (var neighborTable = void 0; neighborTable = tables[tableIndex]; tableIndex = indexIterator(tableIndex)) {
            var neighborTablePos = neighborTable.getStartPosition();
            if (tablePos != neighborTablePos || position >= neighborTable.getEndPosition())
                break;
            tablePos = neighborTablePos;
            table = neighborTable;
        }
        return table;
    };
    Table.getFirstCellPositionInVerticalMergingGroup = function (tablePosition) {
        if (tablePosition.cell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue)
            return tablePosition;
        var tblPos = tablePosition.clone().init();
        var cellColumnIndex = tblPos.row.getCellColumnIndex(tblPos.cellIndex);
        while (tblPos.moveToPrevRow()) {
            var columnIndex = tblPos.row.gridBefore;
            tblPos.setCell(0);
            do {
                if (cellColumnIndex <= columnIndex) {
                    if (tblPos.cell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue || tblPos.rowIndex == 0)
                        return tblPos;
                    else
                        break;
                }
                columnIndex += tblPos.cell.columnSpan;
            } while (tblPos.moveToNextCell());
        }
        return null;
    };
    Table.prototype.clone = function (subDocument) {
        var result = new Table(this.properties.clone(), subDocument.documentModel.stylesManager.getTableStyleByName(this.style.styleName));
        result.index = this.index;
        result.nestedLevel = this.nestedLevel;
        var tablesOnLevel = subDocument.tablesByLevels[result.nestedLevel];
        if (!tablesOnLevel)
            subDocument.tablesByLevels.push([result]);
        else
            tablesOnLevel.push(result);
        if (this.parentCell)
            result.parentCell = Table.getTableCellByPositionFromTable(subDocument.tables[this.parentCell.parentRow.parentTable.index], this.parentCell.startParagraphPosition.value);
        result.rows = list_1.ListUtils.map(this.rows, function (r) { return r.clone(subDocument, result); });
        result.preferredWidth = this.preferredWidth.clone();
        result.lookTypes = this.lookTypes;
        return result;
    };
    return Table;
}());
exports.Table = Table;
var TablePositionIndexes = (function () {
    function TablePositionIndexes(rowIndex, cellIndex) {
        this.rowIndex = rowIndex;
        this.cellIndex = cellIndex;
    }
    TablePositionIndexes.prototype.equals = function (obj) {
        return obj &&
            this.cellIndex == obj.cellIndex &&
            this.rowIndex == obj.rowIndex;
    };
    TablePositionIndexes.prototype.copyFrom = function (obj) {
        this.rowIndex = obj.rowIndex;
        this.cellIndex = obj.cellIndex;
    };
    TablePositionIndexes.prototype.clone = function () {
        return new TablePositionIndexes(this.rowIndex, this.cellIndex);
    };
    return TablePositionIndexes;
}());
exports.TablePositionIndexes = TablePositionIndexes;
var TablePosition = (function (_super) {
    tslib_1.__extends(TablePosition, _super);
    function TablePosition(table, rowIndex, cellIndex) {
        var _this = _super.call(this, rowIndex, cellIndex) || this;
        _this.table = table;
        return _this;
    }
    TablePosition.prototype.initIndexes = function (rowIndex, cellIndex) {
        this.rowIndex = rowIndex;
        this.cellIndex = cellIndex;
        return this;
    };
    TablePosition.prototype.init = function () {
        this.row = this.table.rows[this.rowIndex];
        this.cell = this.row.cells[this.cellIndex];
        return this;
    };
    TablePosition.prototype.setRow = function (rowIndex) {
        this.rowIndex = rowIndex;
        this.row = this.table.rows[this.rowIndex];
        return this;
    };
    TablePosition.prototype.setCell = function (cellIndex) {
        this.cellIndex = cellIndex;
        this.cell = this.row.cells[cellIndex];
    };
    TablePosition.createAndInit = function (table, rowIndex, cellIndex) {
        var position = new TablePosition(table, rowIndex, cellIndex);
        position.init();
        return position;
    };
    TablePosition.indexOfCell = function (positions, cell) {
        for (var i = 0, pos = void 0; pos = positions[i]; i++) {
            if (pos.cell === cell)
                return i;
        }
        return -1;
    };
    TablePosition.prototype.moveToPrevRow = function () {
        if (!this.rowIndex)
            return false;
        this.rowIndex--;
        this.row = this.table.rows[this.rowIndex];
        return true;
    };
    TablePosition.prototype.moveToNextRow = function () {
        if (this.rowIndex == this.table.rows.length - 1)
            return false;
        this.rowIndex++;
        this.row = this.table.rows[this.rowIndex];
        this.cellIndex = -1;
        return true;
    };
    TablePosition.prototype.moveToNextCell = function () {
        if (this.cellIndex == this.row.cells.length - 1)
            return false;
        this.cellIndex++;
        this.cell = this.row.cells[this.cellIndex];
        return true;
    };
    TablePosition.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.table = obj.table;
        this.row = obj.row;
        this.cell = obj.cell;
    };
    TablePosition.prototype.clone = function () {
        var pos = new TablePosition(this.table, this.rowIndex, this.cellIndex);
        pos.row = this.row;
        pos.cell = this.cell;
        return pos;
    };
    TablePosition.prototype.equals = function (obj) {
        return obj &&
            this.table == obj.table &&
            this.rowIndex == obj.rowIndex &&
            this.cellIndex == obj.cellIndex;
    };
    return TablePosition;
}(TablePositionIndexes));
exports.TablePosition = TablePosition;
