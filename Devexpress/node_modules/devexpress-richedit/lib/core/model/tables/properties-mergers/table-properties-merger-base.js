"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TablePropertiesMergerBase = (function () {
    function TablePropertiesMergerBase() {
    }
    TablePropertiesMergerBase.prototype.getProperty = function (container, style, condStyleFormattingFlags, defaultContainer) {
        if (this.getPropertyInternal(container))
            return this.result;
        if (this.processTablePropertiesException())
            return this.result;
        while (style) {
            var condStyleList = this.getCondTableStyleFormattingListForThisContainer();
            for (var _i = 0, condStyleList_1 = condStyleList; _i < condStyleList_1.length; _i++) {
                var cond = condStyleList_1[_i];
                if (condStyleFormattingFlags & cond) {
                    var condStyle = style.conditionalStyles[cond];
                    if (condStyle && this.getPropertyInternal(this.getContainerFromConditionalStyle(condStyle)))
                        return this.result;
                }
            }
            var baseConditionalStyleContainer = this.getContainerFromConditionalStyle(style.baseConditionalStyle);
            if (baseConditionalStyleContainer && this.getPropertyInternal(baseConditionalStyleContainer))
                return this.result;
            style = style.parent;
        }
        if (this.actionBeforeDefaultValue())
            return this.result;
        return this.getPropertyFromContainer(defaultContainer);
    };
    TablePropertiesMergerBase.prototype.processTablePropertiesException = function () {
        if (!this.tablePropertiesException)
            return false;
        var res = this.getNotMergedProperty();
        if (!res.isFound)
            return false;
        this.result = res.result;
        return true;
    };
    TablePropertiesMergerBase.prototype.getPropertyInternal = function (container) {
        if (!this.canUseValue(container))
            return false;
        this.result = this.getPropertyFromContainer(container);
        return true;
    };
    TablePropertiesMergerBase.prototype.actionBeforeDefaultValue = function () {
        return false;
    };
    return TablePropertiesMergerBase;
}());
exports.TablePropertiesMergerBase = TablePropertiesMergerBase;
var TableMergerNotMergedPropertyResult = (function () {
    function TableMergerNotMergedPropertyResult(isFound, result) {
        this.isFound = isFound;
        this.result = result;
    }
    return TableMergerNotMergedPropertyResult;
}());
exports.TableMergerNotMergedPropertyResult = TableMergerNotMergedPropertyResult;
