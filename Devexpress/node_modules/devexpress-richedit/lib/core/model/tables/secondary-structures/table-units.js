"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var math_1 = require("@devexpress/utils/lib/utils/math");
var TableCustomUnit = (function () {
    function TableCustomUnit() {
    }
    TableCustomUnit.prototype.getHashCode = function () {
        return math_1.MathUtils.somePrimes[0] * this.value ^
            math_1.MathUtils.somePrimes[1] * this.type;
    };
    TableCustomUnit.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.value == obj.value && this.type == obj.type;
    };
    TableCustomUnit.prototype.copyFrom = function (obj) {
        this.value = obj.value;
        this.type = obj.type;
    };
    return TableCustomUnit;
}());
exports.TableCustomUnit = TableCustomUnit;
var TableWidthUnit = (function (_super) {
    tslib_1.__extends(TableWidthUnit, _super);
    function TableWidthUnit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableWidthUnit.createDefault = function () {
        return new TableWidthUnit().init(0, TableWidthUnitType.Nil);
    };
    TableWidthUnit.create = function (value, type) {
        return new TableWidthUnit().init(value, type);
    };
    TableWidthUnit.prototype.init = function (value, type) {
        this.value = Math.floor(value);
        this.type = type;
        return this;
    };
    TableWidthUnit.prototype.clone = function () {
        return new TableWidthUnit().init(this.value, this.type);
    };
    TableWidthUnit.prototype.asNumberNoPercentType = function (converter) {
        switch (this.type) {
            case TableWidthUnitType.Nil:
            case TableWidthUnitType.Auto:
                return 0;
            case TableWidthUnitType.ModelUnits:
                return converter(this.value);
            case TableWidthUnitType.FiftiethsOfPercent:
                return 0;
        }
    };
    TableWidthUnit.prototype.asNumber = function (avaliableWidth, converter) {
        switch (this.type) {
            case TableWidthUnitType.Nil:
            case TableWidthUnitType.Auto:
                return 0;
            case TableWidthUnitType.ModelUnits:
                return converter(this.value);
            case TableWidthUnitType.FiftiethsOfPercent:
                return avaliableWidth * this.value / TableWidthUnit.MAX_PERCENT_WIDTH;
        }
    };
    TableWidthUnit.prototype.divide = function (n) {
        if (n > 1)
            this.value = Math.floor(this.value / n);
    };
    TableWidthUnit.MAX_PERCENT_WIDTH = 5000;
    TableWidthUnit.MUTLIPLIER_FOR_PERCENTS = 50;
    return TableWidthUnit;
}(TableCustomUnit));
exports.TableWidthUnit = TableWidthUnit;
var TableHeightUnit = (function (_super) {
    tslib_1.__extends(TableHeightUnit, _super);
    function TableHeightUnit() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableHeightUnit.prototype.init = function (value, type) {
        this.value = Math.floor(value);
        this.type = type;
        return this;
    };
    TableHeightUnit.prototype.clone = function () {
        return new TableHeightUnit().init(this.value, this.type);
    };
    TableHeightUnit.create = function (value, type) {
        return new TableHeightUnit().init(value, type);
    };
    TableHeightUnit.createDefault = function () {
        return new TableHeightUnit().init(0, TableHeightUnitType.Auto);
    };
    return TableHeightUnit;
}(TableCustomUnit));
exports.TableHeightUnit = TableHeightUnit;
var TableHeightUnitType;
(function (TableHeightUnitType) {
    TableHeightUnitType[TableHeightUnitType["Minimum"] = 0] = "Minimum";
    TableHeightUnitType[TableHeightUnitType["Auto"] = 1] = "Auto";
    TableHeightUnitType[TableHeightUnitType["Exact"] = 2] = "Exact";
})(TableHeightUnitType = exports.TableHeightUnitType || (exports.TableHeightUnitType = {}));
var TableWidthUnitType;
(function (TableWidthUnitType) {
    TableWidthUnitType[TableWidthUnitType["Nil"] = 0] = "Nil";
    TableWidthUnitType[TableWidthUnitType["Auto"] = 1] = "Auto";
    TableWidthUnitType[TableWidthUnitType["FiftiethsOfPercent"] = 2] = "FiftiethsOfPercent";
    TableWidthUnitType[TableWidthUnitType["ModelUnits"] = 3] = "ModelUnits";
})(TableWidthUnitType = exports.TableWidthUnitType || (exports.TableWidthUnitType = {}));
