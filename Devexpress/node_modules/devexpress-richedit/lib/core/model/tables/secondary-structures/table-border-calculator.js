"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = require("@devexpress/utils/lib/utils/color");
var enums_1 = require("../../borders/enums");
var TableBorderInfo = (function () {
    function TableBorderInfo(compoundArray, widthDivider) {
        this.drawingCompoundArray = [];
        this.compoundArray = compoundArray;
        this.widthDivider = widthDivider;
        this.lineCount = Math.floor(compoundArray.length / 2);
        this.widthMultiplier = this.compoundArray[this.compoundArray.length - 1];
        for (var _i = 0, _a = this.compoundArray; _i < _a.length; _i++) {
            var num = _a[_i];
            this.drawingCompoundArray.push(num / this.widthMultiplier);
        }
    }
    TableBorderInfo.prototype.getActualWidth = function (borderWidth) {
        return borderWidth * this.widthMultiplier / this.widthDivider;
    };
    return TableBorderInfo;
}());
var TableBorderCalculator = (function () {
    function TableBorderCalculator() {
    }
    TableBorderCalculator.getPowerfulBorder = function (colorProvider, aBorder, bBorder) {
        if (!aBorder)
            return bBorder;
        if (!bBorder)
            return aBorder;
        var aBorderWeight = TableBorderCalculator.getWeight(aBorder);
        var bBorderWeight = TableBorderCalculator.getWeight(bBorder);
        if (aBorderWeight > bBorderWeight)
            return aBorder;
        if (bBorderWeight > aBorderWeight)
            return bBorder;
        var aBorderStyleWeight = aBorder.style;
        var bBorderStyleWeight = bBorder.style;
        if (aBorderStyleWeight > bBorderStyleWeight)
            return aBorder;
        if (bBorderStyleWeight > aBorderStyleWeight)
            return bBorder;
        var aBorderColor = colorProvider.getRgbaFromModelColor(aBorder.color);
        var bBorderColor = colorProvider.getRgbaFromModelColor(bBorder.color);
        var aBorderBrightness = TableBorderCalculator.getBrightnessLevelOne(aBorderColor);
        var bBorderBrightness = TableBorderCalculator.getBrightnessLevelOne(bBorderColor);
        if (aBorderBrightness == bBorderBrightness) {
            aBorderBrightness = TableBorderCalculator.getBrightnessLevelTwo(aBorderColor);
            bBorderBrightness = TableBorderCalculator.getBrightnessLevelTwo(bBorderColor);
            if (aBorderBrightness == bBorderBrightness) {
                aBorderBrightness = TableBorderCalculator.getBrightnessLevelThree(aBorderColor);
                bBorderBrightness = TableBorderCalculator.getBrightnessLevelThree(bBorderColor);
            }
        }
        if (aBorderBrightness < bBorderBrightness)
            return aBorder;
        if (bBorderBrightness < aBorderBrightness)
            return bBorder;
        return aBorder;
    };
    TableBorderCalculator.getActualWidth = function (borderInfo) {
        var info = TableBorderCalculator.getActualBorderLineStyle(borderInfo.style).info;
        return info ? info.getActualWidth(borderInfo.width) : 0;
    };
    TableBorderCalculator.getBrightnessLevelOne = function (color) {
        return color_1.ColorUtils.getRed(color) + TableBorderCalculator.getBrightnessLevelTwo(color);
    };
    TableBorderCalculator.getBrightnessLevelTwo = function (color) {
        return color_1.ColorUtils.getBlue(color) + 2 * color_1.ColorUtils.getGreen(color);
    };
    TableBorderCalculator.getBrightnessLevelThree = function (color) {
        return color_1.ColorUtils.getGreen(color);
    };
    TableBorderCalculator.getWeight = function (borderInfo) {
        var borderStyle = borderInfo.style;
        var info = TableBorderCalculator.getActualBorderLineStyle(borderStyle).info;
        return info ? (info.lineCount * borderStyle) : (borderStyle == enums_1.BorderLineStyle.Disabled ? Number.MAX_VALUE : 0);
    };
    TableBorderCalculator.getActualBorderLineStyle = function (borderLineStyle) {
        if (borderLineStyle == enums_1.BorderLineStyle.None || borderLineStyle == enums_1.BorderLineStyle.Nil || borderLineStyle == enums_1.BorderLineStyle.Disabled)
            return { actualLineStyle: borderLineStyle, info: null };
        var info = TableBorderCalculator.lineStyleInfo[borderLineStyle];
        if (info)
            return { actualLineStyle: borderLineStyle, info: info };
        return { actualLineStyle: enums_1.BorderLineStyle.Single, info: null };
    };
    TableBorderCalculator.lineStyleInfo = (_a = {},
        _a[enums_1.BorderLineStyle.Single] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.Thick] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.Double] = new TableBorderInfo([0, 1, 2, 3], 1),
        _a[enums_1.BorderLineStyle.Dotted] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.Dashed] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.DotDash] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.DotDotDash] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.Triple] = new TableBorderInfo([0, 1, 2, 3, 4, 5], 1),
        _a[enums_1.BorderLineStyle.ThinThickSmallGap] = new TableBorderInfo([0, 1, 2, 10], 8),
        _a[enums_1.BorderLineStyle.ThickThinSmallGap] = new TableBorderInfo([0, 8, 9, 10], 8),
        _a[enums_1.BorderLineStyle.ThinThickThinSmallGap] = new TableBorderInfo([0, 1, 2, 10, 11, 12], 8),
        _a[enums_1.BorderLineStyle.ThinThickMediumGap] = new TableBorderInfo([0, 1, 2, 4], 2),
        _a[enums_1.BorderLineStyle.ThickThinMediumGap] = new TableBorderInfo([0, 2, 3, 4], 2),
        _a[enums_1.BorderLineStyle.ThinThickThinMediumGap] = new TableBorderInfo([0, 1, 2, 4, 5, 6], 2),
        _a[enums_1.BorderLineStyle.ThinThickLargeGap] = new TableBorderInfo([0, 1, 9, 11], 8),
        _a[enums_1.BorderLineStyle.ThickThinLargeGap] = new TableBorderInfo([0, 2, 10, 11], 8),
        _a[enums_1.BorderLineStyle.ThinThickThinLargeGap] = new TableBorderInfo([0, 1, 9, 11, 19, 20], 8),
        _a[enums_1.BorderLineStyle.Wave] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.DoubleWave] = new TableBorderInfo([0, 1, 1, 2], 1),
        _a[enums_1.BorderLineStyle.DashSmallGap] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.DashDotStroked] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.ThreeDEmboss] = new TableBorderInfo([0, 1, 1, 5, 6], 4),
        _a[enums_1.BorderLineStyle.ThreeDEngrave] = new TableBorderInfo([0, 1, 1, 5, 6], 4),
        _a[enums_1.BorderLineStyle.Outset] = new TableBorderInfo([0, 1], 1),
        _a[enums_1.BorderLineStyle.Inset] = new TableBorderInfo([0, 1], 1),
        _a);
    return TableBorderCalculator;
}());
exports.TableBorderCalculator = TableBorderCalculator;
