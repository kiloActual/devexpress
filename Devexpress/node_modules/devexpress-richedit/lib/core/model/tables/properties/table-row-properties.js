"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var table_base_structures_1 = require("../secondary-structures/table-base-structures");
var table_units_1 = require("../secondary-structures/table-units");
var TableRowProperties = (function () {
    function TableRowProperties() {
        this.mask = 0;
        this.cellSpacing = table_units_1.TableWidthUnit.createDefault();
        this.cantSplit = false;
        this.hideCellMark = false;
        this.header = false;
        this.tableRowAlignment = table_base_structures_1.TableRowAlignment.Left;
        this.divId = 0;
    }
    TableRowProperties.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.mask ^
            math_1.MathUtils.somePrimes[1] * this.cellSpacing.getHashCode();
    };
    TableRowProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    TableRowProperties.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.mask == obj.mask &&
            this.cellSpacing.equals(obj.cellSpacing) &&
            this.cantSplit == obj.cantSplit &&
            this.hideCellMark == obj.hideCellMark &&
            this.header == obj.header &&
            this.tableRowAlignment == obj.tableRowAlignment &&
            this.divId == obj.divId;
    };
    TableRowProperties.prototype.clone = function () {
        var result = new TableRowProperties();
        result.copyFrom(this);
        return result;
    };
    TableRowProperties.prototype.copyFrom = function (obj) {
        this.mask = obj.mask;
        this.cellSpacing = obj.cellSpacing.clone();
        this.cantSplit = obj.cantSplit;
        this.hideCellMark = obj.hideCellMark;
        this.header = obj.header;
        this.tableRowAlignment = obj.tableRowAlignment;
        this.divId = obj.divId;
    };
    TableRowProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.mask |= mask;
        else
            this.mask &= ~mask;
    };
    TableRowProperties.prototype.getUseValue = function (mask) {
        return (this.mask & mask) != 0;
    };
    TableRowProperties.prototype.setValue = function (desc, value) {
        desc.setProp(this, value);
        this.setUseValue(desc.maskValue(), true);
    };
    return TableRowProperties;
}());
exports.TableRowProperties = TableRowProperties;
var TableRowPropertiesMask;
(function (TableRowPropertiesMask) {
    TableRowPropertiesMask[TableRowPropertiesMask["UseNone"] = 0] = "UseNone";
    TableRowPropertiesMask[TableRowPropertiesMask["UseCantSplit"] = 2] = "UseCantSplit";
    TableRowPropertiesMask[TableRowPropertiesMask["UseHideCellMark"] = 4] = "UseHideCellMark";
    TableRowPropertiesMask[TableRowPropertiesMask["UseCellSpacing"] = 128] = "UseCellSpacing";
    TableRowPropertiesMask[TableRowPropertiesMask["UseTableRowAlignment"] = 256] = "UseTableRowAlignment";
    TableRowPropertiesMask[TableRowPropertiesMask["UseShadingInfoIndex"] = 2048] = "UseShadingInfoIndex";
    TableRowPropertiesMask[TableRowPropertiesMask["UseHeader"] = 1024] = "UseHeader";
    TableRowPropertiesMask[TableRowPropertiesMask["UseDivId"] = 4096] = "UseDivId";
    TableRowPropertiesMask[TableRowPropertiesMask["UseAll"] = 2147483647] = "UseAll";
})(TableRowPropertiesMask = exports.TableRowPropertiesMask || (exports.TableRowPropertiesMask = {}));
