"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var border_info_1 = require("../../borders/border-info");
var table_cell_borders_1 = require("../../borders/table-cell-borders");
var shading_info_1 = require("../../shadings/shading-info");
var table_base_structures_1 = require("../secondary-structures/table-base-structures");
var table_units_1 = require("../secondary-structures/table-units");
var table_cell_descriptors_1 = require("./table-cell-descriptors");
var TableCellProperties = (function () {
    function TableCellProperties() {
        this.mask = TableCellPropertiesMask.UseNone;
        this.cellMargins = table_base_structures_1.TableCellMargins.create(table_units_1.TableWidthUnit.createDefault(), table_units_1.TableWidthUnit.createDefault(), table_units_1.TableWidthUnit.createDefault(), table_units_1.TableWidthUnit.createDefault());
        this.borders = table_cell_borders_1.TableCellBorders.create(new border_info_1.BorderInfo(), new border_info_1.BorderInfo(), new border_info_1.BorderInfo(), new border_info_1.BorderInfo(), new border_info_1.BorderInfo(), new border_info_1.BorderInfo());
        this.hideCellMark = false;
        this.noWrap = false;
        this.fitText = false;
        this.textDirection = table_base_structures_1.TextDirection.LeftToRightTopToBottom;
        this.verticalAlignment = table_base_structures_1.TableCellVerticalAlignment.Top;
        this.shadingInfo = shading_info_1.ShadingInfo.noColor;
    }
    TableCellProperties.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.mask ^
            math_1.MathUtils.somePrimes[1] * this.borders.getHashCode() ^
            math_1.MathUtils.somePrimes[2] * this.verticalAlignment ^
            math_1.MathUtils.somePrimes[3] * this.shadingInfo.getHashCode();
    };
    TableCellProperties.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    TableCellProperties.prototype.equals = function (obj) {
        if (!obj)
            return false;
        return this.mask == obj.mask &&
            this.cellMargins.equals(obj.cellMargins) &&
            this.borders.equals(obj.borders) &&
            this.hideCellMark == obj.hideCellMark &&
            this.noWrap == obj.noWrap &&
            this.fitText == obj.fitText &&
            this.textDirection == obj.textDirection &&
            this.verticalAlignment == obj.verticalAlignment &&
            this.shadingInfo.equals(obj.shadingInfo);
    };
    TableCellProperties.prototype.clone = function () {
        var result = new TableCellProperties();
        result.copyFrom(this);
        return result;
    };
    TableCellProperties.prototype.copyFrom = function (obj) {
        this.mask = obj.mask;
        this.cellMargins = obj.cellMargins.clone();
        this.borders = obj.borders.clone();
        this.hideCellMark = obj.hideCellMark;
        this.noWrap = obj.noWrap;
        this.fitText = obj.fitText;
        this.textDirection = obj.textDirection;
        this.verticalAlignment = obj.verticalAlignment;
        if (obj.shadingInfo)
            this.shadingInfo = obj.shadingInfo.clone();
    };
    TableCellProperties.prototype.setUseValue = function (mask, value) {
        if (value)
            this.mask |= mask;
        else
            this.mask &= ~mask;
    };
    TableCellProperties.prototype.getUseValue = function (mask) {
        return (this.mask & mask) != 0;
    };
    TableCellProperties.prototype.setValue = function (desc, value) {
        desc.setProp(this, value);
        this.setUseValue(desc.maskValue(), true);
    };
    return TableCellProperties;
}());
exports.TableCellProperties = TableCellProperties;
var TableCellPropertiesMask;
(function (TableCellPropertiesMask) {
    TableCellPropertiesMask[TableCellPropertiesMask["UseNone"] = 0] = "UseNone";
    TableCellPropertiesMask[TableCellPropertiesMask["UseHideCellMark"] = 2] = "UseHideCellMark";
    TableCellPropertiesMask[TableCellPropertiesMask["UseNoWrap"] = 4] = "UseNoWrap";
    TableCellPropertiesMask[TableCellPropertiesMask["UseFitText"] = 8] = "UseFitText";
    TableCellPropertiesMask[TableCellPropertiesMask["UseLeftMargin"] = 16] = "UseLeftMargin";
    TableCellPropertiesMask[TableCellPropertiesMask["UseRightMargin"] = 32] = "UseRightMargin";
    TableCellPropertiesMask[TableCellPropertiesMask["UseTopMargin"] = 64] = "UseTopMargin";
    TableCellPropertiesMask[TableCellPropertiesMask["UseBottomMargin"] = 128] = "UseBottomMargin";
    TableCellPropertiesMask[TableCellPropertiesMask["UseTextDirection"] = 256] = "UseTextDirection";
    TableCellPropertiesMask[TableCellPropertiesMask["UseVerticalAlignment"] = 512] = "UseVerticalAlignment";
    TableCellPropertiesMask[TableCellPropertiesMask["UseCellConditionalFormatting"] = 2048] = "UseCellConditionalFormatting";
    TableCellPropertiesMask[TableCellPropertiesMask["UseLeftBorder"] = 4096] = "UseLeftBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseRightBorder"] = 8192] = "UseRightBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseTopBorder"] = 16384] = "UseTopBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseBottomBorder"] = 32768] = "UseBottomBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseTopLeftDiagonalBorder"] = 262144] = "UseTopLeftDiagonalBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseTopRightDiagonalBorder"] = 524288] = "UseTopRightDiagonalBorder";
    TableCellPropertiesMask[TableCellPropertiesMask["UseShadingInfoIndex"] = 1048576] = "UseShadingInfoIndex";
    TableCellPropertiesMask[TableCellPropertiesMask["UseAll"] = 2147483647] = "UseAll";
})(TableCellPropertiesMask = exports.TableCellPropertiesMask || (exports.TableCellPropertiesMask = {}));
var TableCellPropertyDescriptor = (function () {
    function TableCellPropertyDescriptor() {
    }
    TableCellPropertyDescriptor.topBorder = new table_cell_descriptors_1.TableCellPropertiesTopBorderDescriptor();
    TableCellPropertyDescriptor.rightBorder = new table_cell_descriptors_1.TableCellPropertiesRightBorderDescriptor();
    TableCellPropertyDescriptor.bottomBorder = new table_cell_descriptors_1.TableCellPropertiesBottomBorderDescriptor();
    TableCellPropertyDescriptor.leftBorder = new table_cell_descriptors_1.TableCellPropertiesLeftBorderDescriptor();
    TableCellPropertyDescriptor.topLeftDiagonalBorder = new table_cell_descriptors_1.TableCellPropertiesTopLeftDiagonalBorderDescriptor();
    TableCellPropertyDescriptor.topRightDiagonalBorder = new table_cell_descriptors_1.TableCellPropertiesTopRightDiagonalBorderDescriptor();
    TableCellPropertyDescriptor.topMargin = new table_cell_descriptors_1.TableCellPropertiesTopMarginDescriptor();
    TableCellPropertyDescriptor.rightMargin = new table_cell_descriptors_1.TableCellPropertiesRightMarginDescriptor();
    TableCellPropertyDescriptor.bottomMargin = new table_cell_descriptors_1.TableCellPropertiesBottomMarginDescriptor();
    TableCellPropertyDescriptor.leftMargin = new table_cell_descriptors_1.TableCellPropertiesLeftMarginDescriptor();
    TableCellPropertyDescriptor.fitText = new table_cell_descriptors_1.TableCellPropertiesFitTextDescriptor();
    TableCellPropertyDescriptor.hideCellMark = new table_cell_descriptors_1.TableCellPropertiesHideCellMarkDescriptor();
    TableCellPropertyDescriptor.noWrap = new table_cell_descriptors_1.TableCellPropertiesNoWrapDescriptor();
    TableCellPropertyDescriptor.shadingInfo = new table_cell_descriptors_1.TableCellPropertiesShadingInfoDescriptor();
    TableCellPropertyDescriptor.textDirection = new table_cell_descriptors_1.TableCellPropertiesTextDirectionDescriptor();
    TableCellPropertyDescriptor.vertivalAlignment = new table_cell_descriptors_1.TableCellPropertiesVerticalAlignmentDescriptor();
    TableCellPropertyDescriptor.ALL_FIELDS = [
        TableCellPropertyDescriptor.topBorder,
        TableCellPropertyDescriptor.rightBorder,
        TableCellPropertyDescriptor.bottomBorder,
        TableCellPropertyDescriptor.leftBorder,
        TableCellPropertyDescriptor.topLeftDiagonalBorder,
        TableCellPropertyDescriptor.topRightDiagonalBorder,
        TableCellPropertyDescriptor.topMargin,
        TableCellPropertyDescriptor.rightMargin,
        TableCellPropertyDescriptor.bottomMargin,
        TableCellPropertyDescriptor.leftMargin,
        TableCellPropertyDescriptor.fitText,
        TableCellPropertyDescriptor.hideCellMark,
        TableCellPropertyDescriptor.noWrap,
        TableCellPropertyDescriptor.shadingInfo,
        TableCellPropertyDescriptor.textDirection,
        TableCellPropertyDescriptor.vertivalAlignment,
    ];
    return TableCellPropertyDescriptor;
}());
exports.TableCellPropertyDescriptor = TableCellPropertyDescriptor;
