"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var FontMappings = (function () {
    function FontMappings(defaultFontName, rules) {
        this.defaultFontName = defaultFontName;
        this.rules = rules ? rules : [];
    }
    FontMappings.prototype.copyFrom = function (obj) {
        var _a;
        this.defaultFontName = obj.defaultFontName;
        this.rules = list_1.ListUtils.map((_a = obj.rules) !== null && _a !== void 0 ? _a : [], function (rule) { return new MappingRule(rule.sourceFontFamily, rule.destinationFontName); });
    };
    return FontMappings;
}());
exports.FontMappings = FontMappings;
var MappingRule = (function () {
    function MappingRule(sourceFontFamily, destinationFontName) {
        this.sourceFontFamily = sourceFontFamily;
        this.destinationFontName = destinationFontName;
    }
    return MappingRule;
}());
exports.MappingRule = MappingRule;
var FontsSettings = (function () {
    function FontsSettings() {
        this._defaultFolder = FontsSettings.defaultBaseUrl;
        this.fonts = [];
        this.mappings = new FontMappings();
        this.fontsMap = Object.create(null);
        this.mapRules = Object.create(null);
    }
    Object.defineProperty(FontsSettings, "defaultBaseUrl", {
        get: function () { return window.location.origin + '/fonts/'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontsSettings.prototype, "defaultFolder", {
        get: function () { return this._defaultFolder; },
        set: function (val) {
            if (!string_1.StringUtils.endsAt(val, '\\') && !string_1.StringUtils.endsAt(val, '/'))
                val += '/';
            this._defaultFolder = val;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(FontsSettings.prototype, "useMappingRules", {
        get: function () { return this.limitedFonts && (!!this.mappings.rules.length || !!this.mappings.defaultFontName); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FontsSettings.prototype, "limitedFonts", {
        get: function () { return !!this.fonts.length; },
        enumerable: true,
        configurable: true
    });
    FontsSettings.prototype.getPermittedFont = function (fontInfoCache, font) {
        var _a;
        if (!this.useMappingRules || this.fontsMap[font.name])
            return font;
        var rule = this.mapRules[font.getFontFamilies()[0]];
        if (rule) {
            var destFont = fontInfoCache.getItemByName(rule.destinationFontName);
            if (destFont)
                return destFont;
        }
        return fontInfoCache.getItemByName((_a = this.mappings.defaultFontName) !== null && _a !== void 0 ? _a : this.fonts[0].name);
    };
    FontsSettings.prototype.copyFrom = function (obj) {
        this.defaultFolder = obj.defaultFolder;
        this.fonts = list_1.ListUtils.map(obj.fonts, function (font) { return FontsSettings.createFont(font); });
        this.mappings.copyFrom(obj.mappings);
        this.initInternal();
    };
    FontsSettings.prototype.init = function (obj) {
        var _a, _b, _c;
        if (obj) {
            this.defaultFolder = (_a = obj.defaultFolder) !== null && _a !== void 0 ? _a : FontsSettings.defaultBaseUrl;
            this.fonts = list_1.ListUtils.map((_b = obj.fonts) !== null && _b !== void 0 ? _b : [], function (font) { return FontsSettings.createFont(font); });
            this.mappings.copyFrom((_c = obj.mappings) !== null && _c !== void 0 ? _c : {});
            this.initInternal();
        }
    };
    FontsSettings.prototype.clone = function () {
        var result = new FontsSettings();
        result.copyFrom(this);
        return result;
    };
    FontsSettings.prototype.initInternal = function () {
        var _this = this;
        this.fontsMap = Object.create(null);
        this.fonts.forEach(function (font) { return _this.fontsMap[font.name] = true; });
        this.mapRules = Object.create(null);
        this.mappings.rules.forEach(function (rule) { return _this.mapRules[rule.sourceFontFamily] = rule; });
    };
    FontsSettings.createFont = function (obj) {
        return {
            name: obj.name,
            fontFamily: obj.fontFamily,
            googleFontsResponse: obj.googleFontsResponse,
            useGoogleFonts: obj.useGoogleFonts,
            italicFontUri: obj.italicFontUri,
            boldFontUri: obj.boldFontUri,
            boldItalicFontUri: obj.boldItalicFontUri,
            regularFontUri: obj.regularFontUri,
        };
    };
    return FontsSettings;
}());
exports.FontsSettings = FontsSettings;
