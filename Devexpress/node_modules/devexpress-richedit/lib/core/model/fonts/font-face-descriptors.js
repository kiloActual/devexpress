"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var FontFaceDescriptors = (function () {
    function FontFaceDescriptors() {
        this.style = 'normal';
        this.weight = "normal";
        this.stretch = "normal";
        this.unicodeRange = "U+0-10FFFF";
        this.variant = "normal";
        this.featureSettings = "normal";
        this.variationSettings = "normal";
        this.display = "auto";
        this._cacheKey = null;
    }
    Object.defineProperty(FontFaceDescriptors, "getDefaultUnicodeRange", {
        get: function () { return new boundary_1.BoundaryInterval(0, 0x10FFFF); },
        enumerable: true,
        configurable: true
    });
    FontFaceDescriptors.prototype.msWordItalic = function () {
        return /^\s*(italic|oblique(\s+\w*)?)\s*$/i.test(this.style);
    };
    FontFaceDescriptors.prototype.msWordBold = function () {
        if (typeof this.weight == "number")
            return this.weight >= 550;
        var numVal = parseInt(this.weight);
        if (!isNaN(numVal))
            return numVal >= 550;
        return /^\s*(bold|bolder)\s*$/i.test(this.weight);
    };
    Object.defineProperty(FontFaceDescriptors.prototype, "cacheKey", {
        get: function () {
            if (!this._cacheKey)
                this._cacheKey = [
                    this.style.toString() +
                        this.weight.toString() +
                        this.stretch.toString() +
                        this.unicodeRange.toString() +
                        this.variant.toString() +
                        this.featureSettings.toString() +
                        this.variationSettings.toString() +
                        this.display.toString()
                ].join('/');
            return this._cacheKey;
        },
        enumerable: true,
        configurable: true
    });
    FontFaceDescriptors.prototype.parseUnicodeRanges = function () {
        var ranges = this.unicodeRange ?
            list_1.ListUtils.reducedMap(this.unicodeRange.split(','), function (range) {
                var wildcardMatch = range.match(/U\+(\w*)(\?+)/i);
                var start = NaN;
                var end = NaN;
                if (wildcardMatch) {
                    var lenOfWildcard = wildcardMatch[2].length;
                    start = parseInt(wildcardMatch[1] + string_1.StringUtils.repeat('0', lenOfWildcard), 16);
                    end = parseInt(wildcardMatch[1] + string_1.StringUtils.repeat('F', lenOfWildcard), 16);
                }
                else {
                    var match = range.match(/U\+(\w+)-?(\w*)/i);
                    if (match) {
                        start = parseInt(match[1], 16);
                        end = match[2].length ? parseInt(match[2], 16) : start;
                    }
                }
                return !isNaN(start) && !isNaN(end) ? new boundary_1.BoundaryInterval(start, end + 1) : null;
            }) :
            [];
        return ranges.length ? ranges.sort() : [FontFaceDescriptors.getDefaultUnicodeRange];
    };
    FontFaceDescriptors.create = function (obj) {
        var result = new FontFaceDescriptors();
        if (!obj)
            return result;
        if (obj.style !== null && obj.style !== undefined)
            result.style = obj.style;
        if (obj.weight !== null && obj.weight !== undefined)
            result.weight = obj.weight;
        if (obj.stretch !== null && obj.stretch !== undefined)
            result.stretch = obj.stretch;
        if (obj.unicodeRange !== null && obj.unicodeRange !== undefined)
            result.unicodeRange = obj.unicodeRange;
        if (obj.variant !== null && obj.variant !== undefined)
            result.variant = obj.variant;
        if (obj.featureSettings !== null && obj.featureSettings !== undefined)
            result.featureSettings = obj.featureSettings;
        if (obj.variationSettings !== null && obj.variationSettings !== undefined)
            result.variationSettings = obj.variationSettings;
        if (obj.display !== null && obj.display !== undefined)
            result.display = obj.display;
        return result;
    };
    FontFaceDescriptors.prototype.clone = function () {
        var result = new FontFaceDescriptors();
        result.style = this.style;
        result.weight = this.weight;
        result.stretch = this.stretch;
        result.unicodeRange = this.unicodeRange;
        result.variant = this.variant;
        result.featureSettings = this.featureSettings;
        result.variationSettings = this.variationSettings;
        result.display = this.display;
        return result;
    };
    return FontFaceDescriptors;
}());
exports.FontFaceDescriptors = FontFaceDescriptors;
