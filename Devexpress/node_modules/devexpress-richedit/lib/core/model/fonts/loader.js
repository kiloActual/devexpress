"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var control_font_1 = require("./control-font");
var ControlFontsLoader = (function () {
    function ControlFontsLoader(controlFontsCache, fontsSettings, showConsoleMessage) {
        this.fontsCache = controlFontsCache;
        this.fontsSettings = fontsSettings;
        this.showConsoleMessage = showConsoleMessage;
    }
    ControlFontsLoader.prototype.loadFonts = function (fonts, loadWithStatus, callback) {
        var _this = this;
        this.needInvalidateLayout = false;
        var fontsToLoad = [];
        var _loop_1 = function (font) {
            font = this_1.fontsCache.addFont(font);
            if (list_1.ListUtils.unsafeAnyOf(loadWithStatus, function (s) { return s == font.status; }))
                fontsToLoad.push(new FontToLoad(font, this_1.fontsSettings));
        };
        var this_1 = this;
        for (var _i = 0, fonts_1 = fonts; _i < fonts_1.length; _i++) {
            var font = fonts_1[_i];
            _loop_1(font);
        }
        var notLoadedFontsCount = fontsToLoad.length;
        if (notLoadedFontsCount) {
            var _loop_2 = function (font) {
                font.font.status = control_font_1.FontLoadStatus.Loading;
                this_2.makeRequest(font, function (data) {
                    font.font.status = data ? control_font_1.FontLoadStatus.Loaded : control_font_1.FontLoadStatus.Error;
                    if (data) {
                        font.font.applySource(data, function () {
                            _this.needInvalidateLayout = true;
                        });
                        if (string_1.StringUtils.endsAt(font.currentPath, '.ttc'))
                            font.font.isFontCollection = true;
                    }
                    notLoadedFontsCount--;
                    if (!notLoadedFontsCount)
                        callback();
                });
            };
            var this_2 = this;
            for (var _a = 0, fontsToLoad_1 = fontsToLoad; _a < fontsToLoad_1.length; _a++) {
                var font = fontsToLoad_1[_a];
                _loop_2(font);
            }
        }
        else
            setTimeout(callback, 0);
    };
    ControlFontsLoader.prototype.makeRequest = function (fontInfo, afterLoading) {
        var _this = this;
        var notLoaded = function () {
            if (_this.showConsoleMessage)
                fontInfo.showError();
            afterLoading(null);
        };
        var xhr = new XMLHttpRequest();
        xhr.onload = function (_e) {
            var fontSource = xhr.response;
            if (xhr.status >= 400 || !fontSource) {
                if (fontInfo.next())
                    _this.makeRequest(fontInfo, afterLoading);
                else
                    notLoaded();
            }
            else
                afterLoading(fontSource);
        };
        xhr.onerror = function () { return notLoaded(); };
        xhr.open("GET", fontInfo.currentPath, true);
        xhr.responseType = "arraybuffer";
        xhr.send();
    };
    return ControlFontsLoader;
}());
exports.ControlFontsLoader = ControlFontsLoader;
var FontToLoad = (function () {
    function FontToLoad(font, fontsSettings) {
        this.sourceUrls = [];
        this.ind = 0;
        this.font = font;
        this.sourceUrls = font.allSourceUrls(fontsSettings.defaultFolder);
    }
    Object.defineProperty(FontToLoad.prototype, "currentPath", {
        get: function () { return this.sourceUrls[this.ind]; },
        enumerable: true,
        configurable: true
    });
    FontToLoad.prototype.next = function () {
        return ++this.ind < this.sourceUrls.length;
    };
    FontToLoad.prototype.showError = function () {
        console.log('Font is not loaded: {name = ' + this.font.fontFamily
            + ', bold = ' + this.font.descriptors.msWordBold()
            + ', italic = ' + this.font.descriptors.msWordItalic() + '}');
    };
    return FontToLoad;
}());
