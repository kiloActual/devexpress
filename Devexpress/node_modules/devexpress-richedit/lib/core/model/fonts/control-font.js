"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var fonts_1 = require("@devexpress/utils/lib/utils/fonts");
var list_1 = require("@devexpress/utils/lib/utils/list");
var font_face_descriptors_1 = require("./font-face-descriptors");
var font_info_1 = require("./font-info");
var fonts_map_1 = require("./fonts-map");
var FontLoadStatus;
(function (FontLoadStatus) {
    FontLoadStatus[FontLoadStatus["Unloaded"] = 0] = "Unloaded";
    FontLoadStatus[FontLoadStatus["Loading"] = 1] = "Loading";
    FontLoadStatus[FontLoadStatus["Loaded"] = 2] = "Loaded";
    FontLoadStatus[FontLoadStatus["Error"] = 3] = "Error";
})(FontLoadStatus = exports.FontLoadStatus || (exports.FontLoadStatus = {}));
var ControlFont = (function () {
    function ControlFont(fontFamily, descriptors, key) {
        this.isFontCollection = false;
        this.status = FontLoadStatus.Unloaded;
        this.sourceUrls = [];
        this._unicodeRanges = null;
        this.fontFamily = fontFamily;
        this.descriptors = descriptors;
        this.cacheKey = key ? key : [this.fontFamily, this.descriptors.cacheKey].join('/');
    }
    Object.defineProperty(ControlFont.prototype, "loaded", {
        get: function () { return this.status == FontLoadStatus.Loaded; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlFont.prototype, "unicodeRanges", {
        get: function () {
            if (!this._unicodeRanges)
                this._unicodeRanges = this.descriptors.parseUnicodeRanges();
            return this._unicodeRanges;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlFont.prototype, "controlFontType", {
        get: function () {
            var controlFontType = new flag_1.Flag();
            controlFontType.set(font_info_1.ControlFontType.Bold, this.descriptors.msWordBold());
            controlFontType.set(font_info_1.ControlFontType.Italic, this.descriptors.msWordItalic());
            return controlFontType.getValue();
        },
        enumerable: true,
        configurable: true
    });
    ControlFont.prototype.applySource = function (data, callback) {
        if (!this.data)
            this.data = data;
        if (fonts_1.fontWebApiAvailable())
            fonts_1.loadFont(this.fontFamily, data, this.descriptors, callback);
        else {
            setTimeout(callback, 0);
        }
    };
    ControlFont.prototype.clone = function () {
        var obj = new ControlFont(this.fontFamily, this.descriptors.clone(), this.cacheKey);
        obj.status = this.status;
        obj.data = this.data;
        obj._unicodeRanges = this._unicodeRanges;
        obj._unicodeRanges = this._unicodeRanges;
        obj.sourceUrls = list_1.ListUtils.shallowCopy(this.sourceUrls);
        obj.isFontCollection = this.isFontCollection;
        return obj;
    };
    ControlFont.prototype.allSourceUrls = function (baseUrl) {
        return list_1.ListUtils.addListOnTail(list_1.ListUtils.shallowCopy(this.sourceUrls), this.defaultUrls(baseUrl));
    };
    ControlFont.prototype.defaultUrls = function (baseUrl) {
        var bold = this.descriptors.msWordBold();
        var italic = this.descriptors.msWordItalic();
        var fileName = bold && italic ?
            this.fontFamily + "z" :
            "" + this.fontFamily + (bold ? 'b' : '') + (italic ? 'i' : '');
        var resultUrls = [];
        var unicuePath = null;
        var fontNameWithExt = fonts_map_1.FONT_NAME_TO_FILE_NAME[fileName];
        if (fontNameWithExt) {
            unicuePath = baseUrl + fontNameWithExt;
            resultUrls.push(unicuePath);
        }
        var addPath = function (extension) {
            var p = "" + baseUrl + fileName + "." + extension;
            if (p !== unicuePath)
                resultUrls.push(p);
        };
        addPath('woff');
        addPath('ttf');
        addPath('ttc');
        return resultUrls;
    };
    ControlFont.createDefault = function (fontFamily, flag) {
        var desc = new font_face_descriptors_1.FontFaceDescriptors();
        if (flag.get(font_info_1.ControlFontType.Bold))
            desc.weight = 'bold';
        if (flag.get(font_info_1.ControlFontType.Italic))
            desc.style = 'italic';
        return new ControlFont(fontFamily, desc);
    };
    return ControlFont;
}());
exports.ControlFont = ControlFont;
