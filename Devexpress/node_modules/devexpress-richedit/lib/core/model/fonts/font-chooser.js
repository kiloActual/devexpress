"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var list_1 = require("@devexpress/utils/lib/utils/list");
var FontChooser = (function () {
    function FontChooser(fontInfoCache) {
        this.fontInfoCache = fontInfoCache;
    }
    FontChooser.isGenericFamily = function (family) {
        return !!FontChooser.genericFontFamilies[family];
    };
    FontChooser.prototype.chooseByCssString = function (cssString) {
        var cssStringFontFamilies = dom_1.DomUtils.getFontFamiliesFromCssString(cssString);
        if (cssStringFontFamilies.length == 0)
            return null;
        if (cssStringFontFamilies.length == 1 && FontChooser.isGenericFamily(cssStringFontFamilies[0]))
            return this.chooseGenericFont[cssStringFontFamilies[0]];
        var exactlyFontInfo = this.fontInfoCache.findItemByPredicate(function (fontInfo) {
            var currFontFamilies = fontInfo.getFontFamilies();
            for (var _i = 0, cssStringFontFamilies_1 = cssStringFontFamilies; _i < cssStringFontFamilies_1.length; _i++) {
                var cssFamily = cssStringFontFamilies_1[_i];
                for (var _a = 0, currFontFamilies_1 = currFontFamilies; _a < currFontFamilies_1.length; _a++) {
                    var currFamily = currFontFamilies_1[_a];
                    if (!FontChooser.isGenericFamily(cssFamily) && currFamily == cssFamily)
                        return true;
                }
            }
            return false;
        });
        return exactlyFontInfo ? exactlyFontInfo : null;
    };
    FontChooser.prototype.chooseGenericFont = function (fontFamily) {
        var genericFontFamily = FontChooser.genericFontFamilies[fontFamily];
        if (!fontFamily)
            return null;
        var foundByDirectName = this.fontInfoCache.findItemByPredicate(function (fontInfo) {
            return list_1.ListUtils.unsafeAnyOf(fontInfo.getFontFamilies(), function (fam) { return fam == genericFontFamily; });
        });
        if (foundByDirectName)
            return foundByDirectName;
        var foundByGenericName = this.fontInfoCache.findItemByPredicate(function (fontInfo) {
            return list_1.ListUtils.unsafeAnyOf(fontInfo.getFontFamilies(), function (fam) { return fam == fontFamily; });
        });
        if (foundByGenericName)
            return foundByGenericName;
        return null;
    };
    FontChooser.genericFontFamilies = {
        "serif": "Times New Roman",
        "sans-serif": "Arial",
        "cursive": "Comic Sans MS",
        "fantasy": "Comic Sans MS",
        "monospace": "Courier New",
    };
    return FontChooser;
}());
exports.FontChooser = FontChooser;
