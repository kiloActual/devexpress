"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/string");
var control_font_1 = require("./control-font");
var ControlFontType;
(function (ControlFontType) {
    ControlFontType[ControlFontType["Regular"] = 0] = "Regular";
    ControlFontType[ControlFontType["Bold"] = 1] = "Bold";
    ControlFontType[ControlFontType["Italic"] = 2] = "Italic";
    ControlFontType[ControlFontType["BoldItalic"] = 3] = "BoldItalic";
})(ControlFontType = exports.ControlFontType || (exports.ControlFontType = {}));
var FontInfo = (function () {
    function FontInfo(name) {
        var _a;
        this.controlFontMap = (_a = {},
            _a[ControlFontType.Regular] = null,
            _a[ControlFontType.Bold] = null,
            _a[ControlFontType.Italic] = null,
            _a[ControlFontType.BoldItalic] = null,
            _a);
        this.name = name;
        this.cssString = name;
        this.isLoad = true;
    }
    FontInfo.prototype.ensureAllControlFontsAssigned = function (controlFontsCache) {
        var _this = this;
        var fontFamily = this.getFontFamilies()[0];
        var ensureFontAssigned = function (type) {
            var fontKey = _this.controlFontMap[type];
            if (!fontKey) {
                var controlFont = controlFontsCache.findSimularFontByType(fontFamily, type);
                if (!controlFont)
                    controlFont = controlFontsCache.addFont(control_font_1.ControlFont.createDefault(fontFamily, new flag_1.Flag(type)));
                _this.controlFontMap[type] = controlFont.cacheKey;
            }
        };
        ensureFontAssigned(ControlFontType.Regular);
        ensureFontAssigned(ControlFontType.Bold);
        ensureFontAssigned(ControlFontType.Italic);
        ensureFontAssigned(ControlFontType.BoldItalic);
    };
    FontInfo.prototype.getFontFamilies = function () {
        return dom_1.DomUtils.getFontFamiliesFromCssString(this.cssString);
    };
    FontInfo.calculateHashByName = function (name) {
        return string_1.StringUtils.stringHashCode(name.toLowerCase());
    };
    FontInfo.prototype.calculateHash = function () {
        return FontInfo.calculateHashByName(this.name);
    };
    FontInfo.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    FontInfo.prototype.copyFrom = function (obj) {
        this.name = obj.name;
        this.scriptMultiplier = obj.scriptMultiplier;
        this.canBeSet = obj.canBeSet;
        this.cssString = obj.cssString;
        this.subScriptOffset = obj.subScriptOffset;
        this.controlFontMap = number_1.NumberMapUtils.shallowCopy(obj.controlFontMap);
    };
    FontInfo.prototype.equals = function (obj) {
        return obj && this.name == obj.name &&
            this.scriptMultiplier == obj.scriptMultiplier;
    };
    FontInfo.equalsBinary = function (fontInfoA, fontInfoB) {
        return fontInfoA && fontInfoB &&
            fontInfoA.name == fontInfoB.name &&
            fontInfoA.scriptMultiplier == fontInfoB.scriptMultiplier;
    };
    FontInfo.prototype.clone = function () {
        var obj = new FontInfo(null);
        obj.copyFrom(this);
        return obj;
    };
    FontInfo.prototype.getBaseLine = function () {
        if (this.baseLine === undefined)
            this.measure();
        return this.baseLine;
    };
    FontInfo.prototype.getHeightFactor = function () {
        if (this.heightFactor === undefined)
            this.measure();
        return this.heightFactor;
    };
    FontInfo.prototype.reset = function () {
        this.baseLine = undefined;
        this.heightFactor = undefined;
    };
    FontInfo.prototype.getAscent = function (boxHeight) {
        return this.getBaseLine() * boxHeight;
    };
    FontInfo.prototype.getDescent = function (boxHeight) {
        return boxHeight - this.getAscent(boxHeight);
    };
    FontInfo.prototype.measure = function () {
        var info = this.measurer.getFontMeasurerInfo(this);
        this.baseLine = info.baseLine;
        this.heightFactor = info.heightFactor;
    };
    return FontInfo;
}());
exports.FontInfo = FontInfo;
