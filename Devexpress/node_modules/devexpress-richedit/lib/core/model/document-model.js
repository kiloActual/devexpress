"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var manager_1 = require("@devexpress/utils/lib/formatters/manager");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var properties_bundle_1 = require("../rich-utils/properties-bundle");
var border_info_1 = require("./borders/border-info");
var enums_1 = require("./borders/enums");
var caches_1 = require("./caches/caches");
var character_properties_1 = require("./character/character-properties");
var enums_2 = require("./character/enums");
var chunk_1 = require("./chunk");
var color_1 = require("./color/color");
var color_provider_1 = require("./color/color-provider");
var enums_3 = require("./enums");
var json_document_enums_1 = require("./json/enums/json-document-enums");
var json_masked_character_properties_converter_1 = require("./json/importers/json-masked-character-properties-converter");
var json_masked_paragraph_properties_converter_1 = require("./json/importers/json-masked-paragraph-properties-converter");
var numbering_list_counters_calculator_1 = require("./numbering-lists/numbering-list-counters-calculator");
var numbering_list_id_provider_1 = require("./numbering-lists/numbering-list-id-provider");
var document_protection_1 = require("./options/document-protection");
var paragraph_1 = require("./paragraph/paragraph");
var paragraph_properties_1 = require("./paragraph/paragraph-properties");
var password_hash_code_calculator_1 = require("./protection/password-hash-code-calculator");
var rich_utils_1 = require("./rich-utils");
var simple_runs_1 = require("./runs/simple-runs");
var styles_manager_1 = require("./styles-manager");
var sub_document_1 = require("./sub-document");
var sub_document_infos_1 = require("./sub-document-infos");
var web_settings_1 = require("./web-settings");
var comparer_1 = require("./model-checks/comparer");
var tree_creator_1 = require("./fields/tree-creator");
var field_code_parser_hyperlink_1 = require("./fields/parsers/field-code-parser-hyperlink");
var find_replace_helper_1 = require("./find-replace-helper");
var DocumentModel = (function () {
    function DocumentModel(modelOptions, subDocumentsIdCounter) {
        if (subDocumentsIdCounter === void 0) { subDocumentsIdCounter = 1; }
        this.aspxIsDocumentProtectionEnabled = false;
        this.sections = [];
        this.headers = [];
        this.footers = [];
        this.characterStyles = [];
        this.paragraphStyles = [];
        this.numberingListStyles = [];
        this.tableStyles = [];
        this.tableCellStyles = [];
        this.subDocuments = {};
        this.abstractNumberingListTemplates = [];
        this.abstractNumberingLists = [];
        this.numberingLists = [];
        this.abstractNumberingListsIdProvider = new numbering_list_id_provider_1.AbstractNumberingListIdProvider(this);
        this.numberingListsIdProvider = new numbering_list_id_provider_1.NumberingListIdProvider(this);
        this.repositoryBorderItem = new border_info_1.BorderInfo();
        this.compatSettings = [];
        this.subDocumentsIdCounter = -1;
        this.loaded = false;
        this.documentProtectionProperties = new document_protection_1.DocumentProtectionProperties();
        this.modelOptions = modelOptions;
        this.simpleFormattersManager = new manager_1.SimpleFormattersManager(modelOptions.cultureOpts);
        this.cache = new caches_1.DocumentCache();
        this.mainSubDocument = this.importSubDocument(sub_document_infos_1.SubDocumentInfoBase.create(enums_3.SubDocumentInfoType.Main, sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID, -1));
        this.stylesManager = new styles_manager_1.StylesManager(this);
        this.subDocumentsIdCounter = subDocumentsIdCounter;
        this.colorProvider = new color_provider_1.ColorProvider(this.cache.colorModelInfoCache);
        this.initRepositoryBorderItem();
        this.webSettings = new web_settings_1.WebSettings();
        this.compatibilitySettings = new CompatibilitySettings();
        this.docVariables = new DocumentVariables();
    }
    ;
    Object.defineProperty(DocumentModel.prototype, "options", {
        get: function () { return this.modelOptions.control; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(DocumentModel.prototype, "isDocumentProtectionEnabled", {
        get: function () {
            var properties = this.documentProtectionProperties;
            return this.aspxIsDocumentProtectionEnabled ||
                (properties.enforceProtection && properties.protectionType != json_document_enums_1.DocumentProtectionType.None);
        },
        enumerable: true,
        configurable: true
    });
    DocumentModel.prototype.getAllBookmarks = function (getHiddenToo) {
        var result = [];
        number_1.NumberMapUtils.forEach(this.subDocuments, function (subDoc) {
            if (getHiddenToo)
                list_1.ListUtils.addListOnTail(result, subDoc.bookmarks);
            else
                list_1.ListUtils.forEach(subDoc.bookmarks, function (bm) {
                    if (!bm.isHidden())
                        result.push(bm);
                });
        });
        return result;
    };
    DocumentModel.prototype.initRepositoryBorderItem = function () {
        this.repositoryBorderItem.color = this.colorProvider.getModelColorFromRgba(color_1.ColorHelper.AUTOMATIC_COLOR);
        this.repositoryBorderItem.style = enums_1.BorderLineStyle.Single;
        this.repositoryBorderItem.width = unit_converter_1.UnitConverter.pixelsToTwipsF(1);
    };
    DocumentModel.prototype.getCharacterStyleByName = function (name) {
        return this.stylesManager.getCharacterStyleByName(name);
    };
    DocumentModel.prototype.getParagraphStyleByName = function (name) {
        return this.stylesManager.getParagraphStyleByName(name);
    };
    DocumentModel.prototype.getNumberingListStyleByName = function (name) {
        return this.stylesManager.getNumberingListStyleByName(name);
    };
    DocumentModel.prototype.getTableStyleByName = function (name) {
        return this.stylesManager.getTableStyleByName(name);
    };
    DocumentModel.prototype.getTableCellStyleByName = function (name) {
        return this.stylesManager.getTableCellStyleByName(name);
    };
    DocumentModel.prototype.getDefaultCharacterStyle = function () {
        return this.stylesManager.getDefaultCharacterStyle();
    };
    DocumentModel.prototype.getDefaultParagraphStyle = function () {
        return this.stylesManager.getDefaultParagraphStyle();
    };
    DocumentModel.prototype.getDefaultTableStyle = function () {
        return this.stylesManager.getDefaultTableStyle();
    };
    DocumentModel.prototype.getDefaultTableCellStyle = function () {
        return this.stylesManager.getDefaultTableCellStyle();
    };
    DocumentModel.prototype.setDefaultCharacterProperties = function (obj) {
        var serverProps = json_masked_character_properties_converter_1.JSONMaskedCharacterPropertiesConverter.convertFromJSON(obj, this.cache.colorModelInfoCache, this.cache.shadingInfoCache, this.cache.fontInfoCache);
        serverProps.setUseValue(enums_2.CharacterPropertiesMask.UseAll, true);
        this.defaultCharacterProperties = this.cache.maskedCharacterPropertiesCache.getItem(serverProps);
    };
    DocumentModel.prototype.setDefaultParagraphProperties = function (obj) {
        var serverProps = json_masked_paragraph_properties_converter_1.JSONMaskedParagraphPropertiesConverter.convertFromJSON(obj, this.cache.colorModelInfoCache, this.cache.shadingInfoCache);
        serverProps.setUseValue(paragraph_properties_1.ParagraphPropertiesMask.UseAll, true);
        this.defaultParagraphProperties = this.cache.maskedParagraphPropertiesCache.getItem(serverProps);
    };
    DocumentModel.prototype.getSectionsByInterval = function (interval) {
        var result = [], section;
        var endPosition = interval.end;
        var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.sections, function (s) { return s.startLogPosition.value; }, interval.start);
        for (; section = this.sections[sectionIndex]; sectionIndex++) {
            if (section.startLogPosition.value > endPosition)
                break;
            result.push(section);
        }
        return result;
    };
    DocumentModel.prototype.getSectionIndicesByIntervals = function (intervals) {
        var result = [];
        for (var i = 0, interval; interval = intervals[i]; i++) {
            var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.sections, function (s) { return s.startLogPosition.value; }, interval.start);
            var intervalEnd = interval.end;
            result.push(sectionIndex++);
            for (var section = void 0; section = this.sections[sectionIndex]; sectionIndex++) {
                if (section.startLogPosition.value < intervalEnd)
                    result.push(sectionIndex);
                else
                    break;
            }
        }
        return list_1.ListUtils.uniqueNumber(result);
    };
    DocumentModel.prototype.getSectionByPosition = function (position) {
        var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.sections, function (s) { return s.startLogPosition.value; }, position);
        return this.sections[sectionIndex];
    };
    DocumentModel.prototype.getCurrentLength = function () {
        var lastChunk = this.mainSubDocument.getLastChunk();
        var lastRun = lastChunk.textRuns[lastChunk.textRuns.length - 1];
        return lastChunk.startLogPosition.value + lastRun.startOffset + lastRun.getLength();
    };
    DocumentModel.prototype.isLoaded = function () {
        if (this.loaded)
            return true;
        var lastChunk = this.mainSubDocument.getLastChunk();
        this.loaded = lastChunk ? lastChunk.isLast : false;
        return this.loaded;
    };
    DocumentModel.prototype.getNumberingListIndexById = function (id) {
        for (var i = 0, numberingList; numberingList = this.numberingLists[i]; i++) {
            if (numberingList.getId() === id)
                return i;
        }
        return -1;
    };
    DocumentModel.prototype.getAbstractNumberingListIndexById = function (id) {
        for (var i = 0, abstractNumberingList; abstractNumberingList = this.abstractNumberingLists[i]; i++) {
            if (abstractNumberingList.getId() === id)
                return i;
        }
        return -1;
    };
    DocumentModel.prototype.getRangeListCounters = function (paragraph) {
        var calculator = new numbering_list_counters_calculator_1.NumberingListCountersCalculator(paragraph.getAbstractNumberingList());
        return calculator.calculateCounters(paragraph);
    };
    DocumentModel.prototype.resetMergedFormattingCache = function (type) {
        this.mainSubDocument.resetMergedFormattingCache(type);
    };
    DocumentModel.prototype.getPreviousSection = function (section) {
        var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.sections, function (s) { return s.startLogPosition.value; }, section.startLogPosition.value);
        return this.sections[sectionIndex - 1];
    };
    DocumentModel.prototype.getNextSection = function (section) {
        var sectionIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.sections, function (s) { return s.startLogPosition.value; }, section.startLogPosition.value);
        return this.sections[sectionIndex + 1];
    };
    DocumentModel.prototype.importSubDocument = function (info) {
        return this.createSubDocumentInternal(info, true);
    };
    DocumentModel.prototype.updateHyperlinkFields = function (processor, subDocument, interval) {
        for (var _i = 0, _a = subDocument.fields; _i < _a.length; _i++) {
            var field = _a[_i];
            if (interval.containsInterval(field.getAllFieldInterval())) {
                var fieldParser = tree_creator_1.FieldsWaitingForUpdate.getParser(processor.modelManager, processor.layoutFormatterManager, processor.createFieldRequestManager(), subDocument, field);
                if (fieldParser instanceof field_code_parser_hyperlink_1.FieldCodeParserHyperlink && !field.getHyperlinkInfo()) {
                    fieldParser.parseCodeCurrentFieldInternal(null);
                }
            }
        }
    };
    DocumentModel.prototype.createSubDocument = function (subDocumentInfoType, parentSubDocumentId, disableInit) {
        if (disableInit === void 0) { disableInit = false; }
        var id = this.subDocumentsIdCounter++;
        var info = sub_document_infos_1.SubDocumentInfoBase.create(subDocumentInfoType, id, parentSubDocumentId);
        if (info.getType() !== subDocumentInfoType)
            throw new Error("SubDocument.type doesn't equal to info.type");
        return this.createSubDocumentInternal(info, disableInit);
    };
    DocumentModel.prototype.createSubDocumentInternal = function (info, disableInit) {
        if (this.subDocuments[info.subDocumentId])
            throw new Error("SubDocument with this ID already exists");
        var subDocument = new sub_document_1.SubDocument(this, info);
        if (!disableInit)
            this.initNewSubDocument(subDocument);
        this.subDocuments[info.subDocumentId] = subDocument;
        return subDocument;
    };
    DocumentModel.prototype.initNewSubDocument = function (subDocument) {
        subDocument.chunks = [new chunk_1.Chunk(subDocument.positionManager.registerPosition(0), "", true)];
        subDocument.paragraphs.push(new paragraph_1.Paragraph(subDocument, subDocument.positionManager.registerPosition(0), 1, this.getDefaultParagraphStyle(), paragraph_properties_1.MaskedParagraphProperties.createDefault(this)));
        subDocument.chunks[0].textRuns.push(new simple_runs_1.ParagraphRun(0, subDocument.paragraphs[0], new properties_bundle_1.MaskedCharacterPropertiesBundle(character_properties_1.MaskedCharacterProperties.createDefault(this), this.getDefaultCharacterStyle())));
        subDocument.chunks[0].textBuffer = rich_utils_1.RichUtils.specialCharacters.ParagraphMark;
    };
    DocumentModel.prototype.checkPasswordHash = function (hash, expectedHash) {
        if (expectedHash == null || expectedHash.length <= 0)
            return true;
        return password_hash_code_calculator_1.PasswordHashCodeCalculator.compareByteArrays(hash, expectedHash);
    };
    DocumentModel.prototype.checkLegacyDocumentProtectionPassword = function (calculator, password) {
        var hash = calculator.calculateLegacyPasswordHash(password);
        return this.checkPasswordHash(hash, this.documentProtectionProperties.word2003PasswordHash);
    };
    DocumentModel.prototype.checkOpenXmlDocumentProtectionPassword = function (calculator, password) {
        var hash = calculator.calculatePasswordHash(password, this.documentProtectionProperties.passwordPrefix, this.documentProtectionProperties.hashIterationCount, this.documentProtectionProperties.hashAlgorithmType);
        return this.checkPasswordHash(hash, this.documentProtectionProperties.passwordHash);
    };
    DocumentModel.prototype.checkDocumentProtectionPassword = function (password) {
        var calculator = new password_hash_code_calculator_1.PasswordHashCodeCalculator();
        if (this.documentProtectionProperties.passwordPrefix && this.documentProtectionProperties.passwordHash)
            return this.checkOpenXmlDocumentProtectionPassword(calculator, password);
        this.checkLegacyDocumentProtectionPassword(calculator, password);
    };
    DocumentModel.prototype.findAll = function (searchSettings) {
        var foundIntervals = [];
        var findReplaceHelper = new find_replace_helper_1.FindReplaceHelper(searchSettings.modelManager, searchSettings.formatterManager, searchSettings.pageIndex, searchSettings.subDocument, searchSettings.layout, searchSettings.storeSelection);
        findReplaceHelper.setSearchParams(searchSettings.text, null, find_replace_helper_1.SearchDirection.All, searchSettings.matchCase, false, 0, false);
        while (findReplaceHelper.findNext() !== find_replace_helper_1.FindReplaceState.SearchEnd) {
            var lastFound = findReplaceHelper.getLastFound();
            foundIntervals.push(lastFound);
        }
        return foundIntervals;
    };
    DocumentModel.prototype.clone = function () {
        var model = new DocumentModel(this.modelOptions, this.subDocumentsIdCounter);
        model.modelOptions = this.modelOptions.clone();
        model.defaultTabWidth = this.defaultTabWidth;
        model.differentOddAndEvenPages = this.differentOddAndEvenPages;
        model.displayBackgroundShape = this.displayBackgroundShape;
        model.pageBackColor = this.pageBackColor;
        model.aspxIsDocumentProtectionEnabled = this.aspxIsDocumentProtectionEnabled;
        model.webSettings = this.webSettings.clone();
        model.compatSettings = list_1.ListUtils.deepCopy(this.compatSettings);
        model.compatibilitySettings = this.compatibilitySettings.clone();
        model.cache = this.cache.clone();
        model.defaultCharacterProperties = this.defaultCharacterProperties.clone();
        model.defaultParagraphProperties = this.defaultParagraphProperties.clone();
        model.defaultTableProperties = this.defaultTableProperties.clone();
        model.defaultTableRowProperties = this.defaultTableRowProperties.clone();
        model.defaultTableCellProperties = this.defaultTableCellProperties.clone();
        model.stylesManager = this.stylesManager.clone(model);
        model.characterStyles = list_1.ListUtils.deepCopy(this.characterStyles);
        model.paragraphStyles = list_1.ListUtils.deepCopy(this.paragraphStyles);
        model.numberingListStyles = list_1.ListUtils.deepCopy(this.numberingListStyles);
        model.tableStyles = list_1.ListUtils.deepCopy(this.tableStyles);
        model.tableCellStyles = list_1.ListUtils.deepCopy(this.tableCellStyles);
        model.headers = list_1.ListUtils.deepCopy(this.headers);
        model.footers = list_1.ListUtils.deepCopy(this.footers);
        model.sections = list_1.ListUtils.map(this.sections, function (s) { return s.cloneToNewModel(model); });
        model.abstractNumberingListTemplates = list_1.ListUtils.map(this.abstractNumberingListTemplates, function (list) { return list.clone(model); });
        model.abstractNumberingLists = list_1.ListUtils.map(this.abstractNumberingLists, function (list) { return list.clone(model); });
        model.numberingLists = list_1.ListUtils.map(this.numberingLists, function (list) { return list.clone(model); });
        model.abstractNumberingListsIdProvider = this.abstractNumberingListsIdProvider.clone(model);
        model.numberingListsIdProvider = this.numberingListsIdProvider.clone(model);
        model.repositoryBorderItem = this.repositoryBorderItem.clone();
        model.colorProvider = this.colorProvider.clone(model.cache.colorModelInfoCache);
        model.simpleFormattersManager = new manager_1.SimpleFormattersManager(model.modelOptions.cultureOpts);
        model.documentProtectionProperties = this.documentProtectionProperties.clone();
        model.subDocumentsIdCounter = this.subDocumentsIdCounter;
        model.subDocuments = number_1.NumberMapUtils.map(this.subDocuments, function (sd) { return sd.clone(model); });
        model.mainSubDocument = model.subDocuments[sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID];
        model.loaded = this.loaded;
        return model;
    };
    DocumentModel.prototype.compare = function (source, format) {
        if (format === void 0) { format = null; }
        return new comparer_1.ModelComparer(this, source, format).compareAll();
    };
    return DocumentModel;
}());
exports.DocumentModel = DocumentModel;
var SearchSettings = (function () {
    function SearchSettings(modelManager, formatterManager, layout, subDocument, text, matchCase, highlightResults, pageIndex, storeSelection) {
        this.modelManager = modelManager;
        this.formatterManager = formatterManager;
        this.layout = layout;
        this.subDocument = subDocument;
        this.text = text;
        this.matchCase = matchCase;
        this.highlightResults = highlightResults;
        this.pageIndex = pageIndex;
        this.storeSelection = storeSelection;
    }
    return SearchSettings;
}());
exports.SearchSettings = SearchSettings;
var ResetFormattingCacheType;
(function (ResetFormattingCacheType) {
    ResetFormattingCacheType[ResetFormattingCacheType["Character"] = 1] = "Character";
    ResetFormattingCacheType[ResetFormattingCacheType["Paragraph"] = 2] = "Paragraph";
    ResetFormattingCacheType[ResetFormattingCacheType["All"] = 2147483647] = "All";
})(ResetFormattingCacheType = exports.ResetFormattingCacheType || (exports.ResetFormattingCacheType = {}));
var CompatibilitySettings = (function () {
    function CompatibilitySettings() {
        this.dontJustifyLinesEndingInSoftLineBreak = false;
    }
    CompatibilitySettings.prototype.clone = function () {
        var result = new CompatibilitySettings();
        result.dontJustifyLinesEndingInSoftLineBreak = this.dontJustifyLinesEndingInSoftLineBreak;
        return result;
    };
    return CompatibilitySettings;
}());
exports.CompatibilitySettings = CompatibilitySettings;
var DocumentVariables = (function () {
    function DocumentVariables() {
        this._map = {};
    }
    Object.defineProperty(DocumentVariables.prototype, "count", {
        get: function () {
            return Object.keys(this._map).length;
        },
        enumerable: true,
        configurable: true
    });
    DocumentVariables.prototype.contains = function (name) {
        return Object.prototype.hasOwnProperty.call(this._map, name.toLowerCase());
    };
    DocumentVariables.prototype.getValue = function (name) {
        return this._map[name.toLowerCase()];
    };
    DocumentVariables.prototype.addValue = function (name, value) {
        this._map[name.toLowerCase()] = value;
    };
    DocumentVariables.prototype.foreach = function (callback) {
        for (var name_1 in this._map)
            callback(name_1, this._map[name_1]);
    };
    return DocumentVariables;
}());
exports.DocumentVariables = DocumentVariables;
