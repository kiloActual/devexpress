"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var math_1 = require("@devexpress/utils/lib/utils/math");
var color_model_info_1 = require("../color/color-model-info");
var json_shading_info_converter_1 = require("../json/importers/json-shading-info-converter");
var shading_pattern_1 = require("./shading-pattern");
var shading_pattern_helper_1 = require("./shading-pattern-helper");
var ShadingInfo = (function () {
    function ShadingInfo(shadingPattern, backColor, foreColor) {
        this.shadingPattern = shadingPattern;
        this.backColor = backColor;
        this.foreColor = foreColor;
    }
    Object.defineProperty(ShadingInfo, "noColor", {
        get: function () { return ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.noColor); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShadingInfo, "auto", {
        get: function () { return ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.auto); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ShadingInfo, "nullColor", {
        get: function () { return ShadingInfo.createByColor(color_model_info_1.ColorModelInfo.makeByColor(0)); },
        enumerable: true,
        configurable: true
    });
    ShadingInfo.createByColor = function (backColor) {
        return new ShadingInfo(shading_pattern_1.ShadingPattern.Clear, backColor, color_model_info_1.ColorModelInfo.nullColor);
    };
    ShadingInfo.createByFullData = function (cache, pattern, fill, patternColor) {
        return new ShadingInfo(pattern, cache.getItem(color_model_info_1.ColorModelInfo.makeByColor(fill)), cache.getItem(color_model_info_1.ColorModelInfo.makeByColor(patternColor)));
    };
    ShadingInfo.prototype.getActualColor = function (colorProvider) {
        var fill = this.backColor.toRgb(colorProvider);
        var patternColor = this.foreColor.toRgb(colorProvider);
        return shading_pattern_helper_1.ShadingHelper.getActualBackColor(fill, patternColor, this.shadingPattern);
    };
    ShadingInfo.prototype.equals = function (obj) {
        return obj &&
            this.shadingPattern == obj.shadingPattern &&
            this.backColor.equals(obj.backColor) &&
            this.foreColor.equals(obj.foreColor);
    };
    ShadingInfo.equalsBinary = function (a, b) {
        return a && b && (a === b ||
            a.shadingPattern == b.shadingPattern &&
                a.backColor.equals(b.backColor) &&
                a.foreColor.equals(b.foreColor));
    };
    ShadingInfo.prototype.clone = function () {
        return new ShadingInfo(this.shadingPattern, this.backColor, this.foreColor);
    };
    ShadingInfo.prototype.calculateHash = function () {
        return math_1.MathUtils.somePrimes[0] * this.shadingPattern ^
            math_1.MathUtils.somePrimes[1] * this.backColor.getHashCode() ^
            math_1.MathUtils.somePrimes[2] * this.foreColor.getHashCode();
    };
    ShadingInfo.prototype.getHashCode = function () {
        return this.hash === undefined ? this.hash = this.calculateHash() : this.hash;
    };
    ShadingInfo.prototype.toJSON = function () {
        return json_shading_info_converter_1.JSONShadingInfoConverter.convertToJSON(this);
    };
    return ShadingInfo;
}());
exports.ShadingInfo = ShadingInfo;
