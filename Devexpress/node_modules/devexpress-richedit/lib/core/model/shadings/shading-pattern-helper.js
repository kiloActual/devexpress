"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dx_color_1 = require("../color/dx-color");
var shading_pattern_1 = require("./shading-pattern");
var ShadingPatternInfo = (function () {
    function ShadingPatternInfo(shadingPatternValue, shadingPattern) {
        this.shadingPatternValue = shadingPatternValue;
        this.shadingPattern = shadingPattern;
    }
    return ShadingPatternInfo;
}());
var ShadingHelper = (function () {
    function ShadingHelper() {
    }
    ShadingHelper.initStatics = function () {
        ShadingHelper.infos = [
            new ShadingPatternInfo(0, shading_pattern_1.ShadingPattern.Clear),
            new ShadingPatternInfo(25, shading_pattern_1.ShadingPattern.Pct2),
            new ShadingPatternInfo(50, shading_pattern_1.ShadingPattern.Pct5),
            new ShadingPatternInfo(75, shading_pattern_1.ShadingPattern.Pct7),
            new ShadingPatternInfo(100, shading_pattern_1.ShadingPattern.Pct10),
            new ShadingPatternInfo(125, shading_pattern_1.ShadingPattern.Pct12),
            new ShadingPatternInfo(150, shading_pattern_1.ShadingPattern.Pct15),
            new ShadingPatternInfo(175, shading_pattern_1.ShadingPattern.Pct17),
            new ShadingPatternInfo(200, shading_pattern_1.ShadingPattern.Pct20),
            new ShadingPatternInfo(225, shading_pattern_1.ShadingPattern.Pct22),
            new ShadingPatternInfo(250, shading_pattern_1.ShadingPattern.Pct25),
            new ShadingPatternInfo(275, shading_pattern_1.ShadingPattern.Pct27),
            new ShadingPatternInfo(300, shading_pattern_1.ShadingPattern.Pct30),
            new ShadingPatternInfo(325, shading_pattern_1.ShadingPattern.Pct32),
            new ShadingPatternInfo(350, shading_pattern_1.ShadingPattern.Pct35),
            new ShadingPatternInfo(375, shading_pattern_1.ShadingPattern.Pct37),
            new ShadingPatternInfo(400, shading_pattern_1.ShadingPattern.Pct40),
            new ShadingPatternInfo(425, shading_pattern_1.ShadingPattern.Pct42),
            new ShadingPatternInfo(450, shading_pattern_1.ShadingPattern.Pct45),
            new ShadingPatternInfo(475, shading_pattern_1.ShadingPattern.Pct47),
            new ShadingPatternInfo(500, shading_pattern_1.ShadingPattern.Pct50),
            new ShadingPatternInfo(525, shading_pattern_1.ShadingPattern.Pct52),
            new ShadingPatternInfo(550, shading_pattern_1.ShadingPattern.Pct55),
            new ShadingPatternInfo(575, shading_pattern_1.ShadingPattern.Pct57),
            new ShadingPatternInfo(600, shading_pattern_1.ShadingPattern.Pct60),
            new ShadingPatternInfo(625, shading_pattern_1.ShadingPattern.Pct62),
            new ShadingPatternInfo(650, shading_pattern_1.ShadingPattern.Pct65),
            new ShadingPatternInfo(675, shading_pattern_1.ShadingPattern.Pct67),
            new ShadingPatternInfo(700, shading_pattern_1.ShadingPattern.Pct70),
            new ShadingPatternInfo(725, shading_pattern_1.ShadingPattern.Pct72),
            new ShadingPatternInfo(750, shading_pattern_1.ShadingPattern.Pct75),
            new ShadingPatternInfo(775, shading_pattern_1.ShadingPattern.Pct77),
            new ShadingPatternInfo(800, shading_pattern_1.ShadingPattern.Pct80),
            new ShadingPatternInfo(825, shading_pattern_1.ShadingPattern.Pct82),
            new ShadingPatternInfo(850, shading_pattern_1.ShadingPattern.Pct85),
            new ShadingPatternInfo(875, shading_pattern_1.ShadingPattern.Pct87),
            new ShadingPatternInfo(900, shading_pattern_1.ShadingPattern.Pct90),
            new ShadingPatternInfo(925, shading_pattern_1.ShadingPattern.Pct92),
            new ShadingPatternInfo(950, shading_pattern_1.ShadingPattern.Pct95),
            new ShadingPatternInfo(975, shading_pattern_1.ShadingPattern.Pct97),
            new ShadingPatternInfo(1000, shading_pattern_1.ShadingPattern.Solid),
        ];
        ShadingHelper.shadingPatterns = {};
        ShadingHelper.patternMultipliers = {};
        for (var _i = 0, _a = ShadingHelper.infos; _i < _a.length; _i++) {
            var info = _a[_i];
            ShadingHelper.shadingPatterns[info.shadingPatternValue] = info.shadingPattern;
            ShadingHelper.patternMultipliers[info.shadingPattern] = info.shadingPatternValue;
        }
        return ShadingHelper.infos;
    };
    ShadingHelper.calculateShadingPattern = function (shadingPatternValue) {
        var value = ShadingHelper.shadingPatterns[shadingPatternValue];
        return value === undefined ? shading_pattern_1.ShadingPattern.Clear : value;
    };
    ShadingHelper.getShadingPattern = function (index) {
        return ShadingHelper.infos[index].shadingPattern;
    };
    ShadingHelper.calculateShadingPatternValue = function (shadingPattern) {
        var value = ShadingHelper.patternMultipliers[shadingPattern];
        return value === undefined ? -1 : value;
    };
    ShadingHelper.getActualBackColor = function (fill, patternColor, pattern) {
        if (pattern == shading_pattern_1.ShadingPattern.Clear || pattern == shading_pattern_1.ShadingPattern.Nil)
            return fill;
        var white = dx_color_1.DXColor.white;
        if ((dx_color_1.DXColor.isTransparentOrEmpty(fill) || fill == white) && dx_color_1.DXColor.isTransparentOrEmpty(patternColor)) {
            var multiplier = ShadingHelper.patternMultipliers[pattern];
            if (multiplier !== undefined) {
                var intensity = 255 * (1000 - multiplier) / 1000;
                return dx_color_1.DXColor.fromRgb(intensity, intensity, intensity);
            }
        }
        return pattern != shading_pattern_1.ShadingPattern.Solid && !dx_color_1.DXColor.isTransparentOrEmpty(fill) ? fill : patternColor;
    };
    ShadingHelper.getActualBackColorByMultiplier = function (fill, patternColor, multiplier) {
        var white = dx_color_1.DXColor.white;
        if ((dx_color_1.DXColor.isTransparentOrEmpty(fill) || fill == white) && dx_color_1.DXColor.isTransparentOrEmpty(patternColor)) {
            var intensity = 255 * (1000 - multiplier) / 1000;
            return dx_color_1.DXColor.fromRgb(intensity, intensity, intensity);
        }
        return multiplier == 1000 ? fill : patternColor;
    };
    ShadingHelper.infos = ShadingHelper.initStatics();
    return ShadingHelper;
}());
exports.ShadingHelper = ShadingHelper;
