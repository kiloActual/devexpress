"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var SubDocumentChangesStorer = (function () {
    function SubDocumentChangesStorer() {
        this.map = {};
    }
    SubDocumentChangesStorer.prototype.addChange = function (subDocumentId, interval) {
        this.getSubDocumentIntervals(subDocumentId).push(interval);
    };
    SubDocumentChangesStorer.prototype.addChanges = function (subDocumentId, intervals) {
        var sdChanges = this.getSubDocumentIntervals(subDocumentId);
        for (var _i = 0, intervals_1 = intervals; _i < intervals_1.length; _i++) {
            var interval = intervals_1[_i];
            sdChanges.push(interval);
        }
    };
    SubDocumentChangesStorer.prototype.finalizeChanges = function (subDocumentId, intervals) {
        var sdChanges = this.getSubDocumentIntervals(subDocumentId);
        this.map = {};
        return algorithms_1.IntervalAlgorithms.getIntersectionsTwoArraysOfIntervalTemplate(intervals, algorithms_1.IntervalAlgorithms.getMergedIntervalsTemplate(sdChanges, true, SubDocumentChangesStorer.intervalTemplate), SubDocumentChangesStorer.intervalTemplate);
    };
    SubDocumentChangesStorer.prototype.getSubDocumentIntervals = function (subDocumentId) {
        var sdChanges = this.map[subDocumentId];
        if (sdChanges === undefined)
            sdChanges = this.map[subDocumentId] = [];
        return sdChanges;
    };
    SubDocumentChangesStorer.intervalTemplate = new fixed_1.FixedInterval(0, 0);
    return SubDocumentChangesStorer;
}());
exports.SubDocumentChangesStorer = SubDocumentChangesStorer;
