"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var layout_table_cell_info_1 = require("../../../layout/table/layout-table-cell-info");
var base_advance_helper_1 = require("./base-advance-helper");
var LayoutPositionAdvanceForwardHelper = (function (_super) {
    tslib_1.__extends(LayoutPositionAdvanceForwardHelper, _super);
    function LayoutPositionAdvanceForwardHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutPositionAdvanceForwardHelper.prototype.advance = function () {
        return this.finalHandle(this.advanceBoxSimple(false, true) ? true : this.moveToNextRow());
    };
    LayoutPositionAdvanceForwardHelper.prototype.moveToNextRow = function () {
        var oldCell = this.lp.row.tableCellInfo;
        if (!oldCell)
            return this.advanceRowSimple(true, true);
        if (this.advanceRowSimple(false, true)) {
            var newCell = this.lp.row.tableCellInfo;
            if (newCell && (newCell == oldCell || newCell.parentRow.parentTable.parentCell == oldCell))
                return true;
        }
        return this.moveToNextCell(oldCell);
    };
    LayoutPositionAdvanceForwardHelper.prototype.moveToNextCell = function (cell) {
        var logicInfo = cell.parentRow.parentTable.logicInfo;
        var grid = logicInfo.grid;
        var rowIndex = cell.parentRow.rowIndex;
        var info = grid.tableCellGridInfos[rowIndex][cell.cellGridIndex];
        if (!cell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn)) {
            this.setRowByGridInfo(true, logicInfo, info, true, true);
            return true;
        }
        var nextTableCellGridInfo = base_advance_helper_1.LayoutPositionBaseAdvanceHelper.getNextTableCellGridInfo(true, grid, info, info.getStartRowIndex(), info.getCellIndex(0) + 1);
        if (nextTableCellGridInfo) {
            var moveToPrev = nextTableCellGridInfo.getStartRowIndex() <= rowIndex;
            var tmpLp = this.lp.clone();
            if (!this.setRowByGridInfo(true, logicInfo, nextTableCellGridInfo, !moveToPrev, false)) {
                this.lp.copyFrom(tmpLp);
                if (!moveToPrev)
                    this.setRowByGridInfo(true, logicInfo, nextTableCellGridInfo, true, true);
                else
                    throw new Error(errors_1.Errors.InternalException);
            }
            return true;
        }
        var parentTbl = cell.parentRow.parentTable;
        var parentCell = parentTbl.parentCell;
        if (parentCell) {
            var indInternalTable = number_1.NumberMapUtils.keyBy(parentCell.internalTables, function (tbl) { return tbl == parentTbl; });
            var row = parentCell.layoutRows[indInternalTable];
            if (row) {
                this.setLayoutRow(row.indexInColumn, true);
                return true;
            }
            return this.toNextRowAfterTable(parentTbl);
        }
        this.lp.copyFrom(this.oldLp);
        return this.toNextRowAfterTable(cell.parentRow.parentTable);
    };
    LayoutPositionAdvanceForwardHelper.prototype.toNextRowAfterTable = function (table) {
        var logicInfo = table.logicInfo;
        var prevLp = this.lp.clone();
        var sameTable = list_1.ListUtils.elementBy(this.lp.column.tablesInfo, function (tbl) { return tbl.logicInfo == logicInfo; });
        while (this.advanceColumnSimple(true, true)) {
            var tmpSameTable = list_1.ListUtils.elementBy(this.lp.column.tablesInfo, function (tbl) { return tbl.logicInfo == logicInfo; });
            if (!tmpSameTable)
                break;
            prevLp = this.lp.clone();
            sameTable = tmpSameTable;
        }
        this.lp.copyFrom(prevLp);
        var rowInd = list_1.ListUtils.accumulate(list_1.ListUtils.last(sameTable.tableRows).rowCells, -1, function (acc, cell) {
            return Math.max(list_1.ListUtils.last(cell.layoutRows).indexInColumn, acc);
        }) + 1;
        var layoutRow = this.lp.column.rows[rowInd];
        if (layoutRow) {
            var parentCell = sameTable.parentCell;
            if (!parentCell)
                return this.setLayoutRow(rowInd, true);
            if (layoutRow.tableCellInfo == parentCell)
                return this.setLayoutRow(rowInd, true);
            var lInfo = parentCell.parentRow.parentTable.logicInfo;
            var info = lInfo.grid.tableCellGridInfos[parentCell.parentRow.rowIndex][parentCell.cellGridIndex];
            if (parentCell.boundFlags.get(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn)) {
                this.setLayoutRow(rowInd, true);
                return true;
            }
            this.setRowByGridInfo(true, lInfo, info, true, true);
            return true;
        }
        if (!this.advanceColumnSimple(true, true))
            return false;
        this.setLayoutRow(0, true);
        return true;
    };
    return LayoutPositionAdvanceForwardHelper;
}(base_advance_helper_1.LayoutPositionBaseAdvanceHelper));
exports.LayoutPositionAdvanceForwardHelper = LayoutPositionAdvanceForwardHelper;
