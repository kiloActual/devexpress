"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var min_max_1 = require("../../../../../../base-utils/min-max");
var min_max_2 = require("@devexpress/utils/lib/class/min-max");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var table_1 = require("../../../../../model/tables/main-structures/table");
var grid_1 = require("../../grid");
var table_cell_width_calculator_1 = require("./table-cell-width-calculator");
var TableWidthCalculator = (function () {
    function TableWidthCalculator(subDocument, boxIterator, cache, table, avaliableSpacing) {
        this.containsCellsMergedByHorizontal = false;
        this.table = table;
        this.map = {};
        var grid = new grid_1.Grid(this.table);
        var pos = new table_1.TablePosition(this.table, -1, -1);
        while (pos.moveToNextRow())
            while (pos.moveToNextCell()) {
                var cellWidth = new table_cell_width_calculator_1.TableCellWidthCalculator(subDocument, boxIterator, grid, cache, pos, avaliableSpacing).cellWidth();
                this.register(new CellHorizontalBoundsInfo(new CellHorizontalBounds(grid.tableCellInfos[pos.rowIndex][pos.cellIndex].getGridCellIndex(), pos.cell.columnSpan), cellWidth));
            }
    }
    TableWidthCalculator.prototype.register = function (info) {
        var key = info.pos.columnIndex * 250 + info.pos.span;
        var existingCellInfo = this.map[key];
        if (existingCellInfo)
            min_max_1.updateMinMaxBounds(existingCellInfo.info, info.info);
        else
            this.map[key] = info;
        if (!this.containsCellsMergedByHorizontal)
            this.containsCellsMergedByHorizontal = info.pos.span > 1;
    };
    TableWidthCalculator.prototype.tableWidth = function () {
        if (!this.containsCellsMergedByHorizontal) {
            var min_1 = 0;
            var max_1 = 0;
            number_1.NumberMapUtils.forEach(this.map, function (value) {
                min_1 += value.info.minElement;
                max_1 += value.info.maxElement;
            });
            return new min_max_2.MinMaxNumber(min_1, max_1);
        }
        var list = number_1.NumberMapUtils.toList(this.map);
        list = list.sort(function (a, b) {
            var diffByColumns = a.pos.columnIndex - b.pos.columnIndex;
            return diffByColumns ? diffByColumns : a.pos.span - b.pos.span;
        });
        var summaryListLength = list.length;
        var summary = list_1.ListUtils.initByCallback(summaryListLength + 1, function () { return new min_max_2.MinMaxNumber(0, 0); });
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var info = list_2[_i];
            var existingSummary = summary[info.pos.columnIndex];
            var newSummary = new min_max_2.MinMaxNumber(existingSummary.minElement + info.info.minElement, existingSummary.maxElement + info.info.maxElement);
            for (var i = info.pos.endColumnIndex; i < summaryListLength; i++) {
                var oldSummary = summary[i];
                if (oldSummary.minElement > newSummary.minElement && oldSummary.maxElement > newSummary.maxElement)
                    break;
                min_max_1.updateMinMaxBounds(oldSummary, newSummary);
            }
            ;
        }
        return summary[summaryListLength - 1];
    };
    return TableWidthCalculator;
}());
exports.TableWidthCalculator = TableWidthCalculator;
var CellHorizontalBounds = (function () {
    function CellHorizontalBounds(columnIndex, span) {
        this.columnIndex = columnIndex;
        this.span = span;
    }
    Object.defineProperty(CellHorizontalBounds.prototype, "endColumnIndex", {
        get: function () { return this.columnIndex + this.span; },
        enumerable: true,
        configurable: true
    });
    return CellHorizontalBounds;
}());
var CellHorizontalBoundsInfo = (function () {
    function CellHorizontalBoundsInfo(pos, info) {
        this.pos = pos;
        this.info = info;
    }
    return CellHorizontalBoundsInfo;
}());
