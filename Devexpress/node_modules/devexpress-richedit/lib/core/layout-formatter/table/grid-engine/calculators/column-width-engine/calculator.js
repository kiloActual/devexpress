"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_units_1 = require("../../../../../model/tables/secondary-structures/table-units");
var column_interval_1 = require("./column-interval");
var iterator_1 = require("./iterator");
var Calculator = (function () {
    function Calculator() {
    }
    Calculator.getIntervals = function (table) {
        var rows = table.rows;
        var currRowTableGrid = Calculator.columnsInfo(rows[0]);
        for (var nextRowIndex = 1, nextRow = void 0; nextRow = rows[nextRowIndex]; nextRowIndex++) {
            var nextRowTableGrid = Calculator.columnsInfo(nextRow);
            currRowTableGrid = Calculator.mergeRowColumnIntervals(currRowTableGrid, nextRowTableGrid);
        }
        return currRowTableGrid;
    };
    Calculator.columnsInfo = function (row) {
        var columns = [];
        if (row.gridBefore > 0)
            columns.push(new column_interval_1.ColumnInterval(row.widthBefore.value, row.gridBefore, row.widthBefore.type));
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            var cellPreferredWidth = cell.preferredWidth;
            columns.push(new column_interval_1.ColumnInterval(cellPreferredWidth.value, cell.columnSpan, cellPreferredWidth.type));
        }
        if (row.gridAfter > 0)
            columns.push(new column_interval_1.ColumnInterval(row.widthAfter.value, row.gridAfter, row.widthAfter.type));
        return columns;
    };
    Calculator.mergeRowColumnIntervals = function (currRowTableGrid, nextRowTableGrid) {
        var mergedTableGrid = [];
        var currRowIterator = new iterator_1.ColumnIntervalWidthIterator(currRowTableGrid);
        var nextRowIterator = new iterator_1.ColumnIntervalWidthIterator(nextRowTableGrid);
        while (!currRowIterator.endOfIntervals() && !nextRowIterator.endOfIntervals()) {
            var currIntervalSpan = currRowIterator.interval.colSpan;
            var nextIntervalSpan = nextRowIterator.interval.colSpan;
            if (currIntervalSpan > nextIntervalSpan)
                Calculator.processDependedIntervals(currRowIterator, nextRowIterator, mergedTableGrid);
            else if (nextIntervalSpan > currIntervalSpan)
                Calculator.processDependedIntervals(nextRowIterator, currRowIterator, mergedTableGrid);
            else {
                var newInterval = Calculator.mergeIntervalsDifferentRows(currRowIterator.interval, nextRowIterator.interval);
                mergedTableGrid.push(newInterval);
                currRowIterator.advance(newInterval);
                nextRowIterator.advance(newInterval);
            }
        }
        Calculator.copyRestIntervals(currRowIterator, mergedTableGrid);
        Calculator.copyRestIntervals(nextRowIterator, mergedTableGrid);
        return mergedTableGrid;
    };
    Calculator.mergeIntervalsDifferentRows = function (currRowTableColumnInterval, nextRowTableColumnInterval) {
        var colSpan = currRowTableColumnInterval.colSpan;
        if (currRowTableColumnInterval.type == nextRowTableColumnInterval.type)
            return new column_interval_1.ColumnInterval(Math.max(currRowTableColumnInterval.width, nextRowTableColumnInterval.width), colSpan, currRowTableColumnInterval.type);
        if (currRowTableColumnInterval.type == table_units_1.TableWidthUnitType.FiftiethsOfPercent)
            return Calculator.mergeIntervalsDifferentRowsDifferentTypes(currRowTableColumnInterval, nextRowTableColumnInterval, colSpan);
        if (nextRowTableColumnInterval.type == table_units_1.TableWidthUnitType.FiftiethsOfPercent)
            return Calculator.mergeIntervalsDifferentRowsDifferentTypes(nextRowTableColumnInterval, currRowTableColumnInterval, colSpan);
        if (currRowTableColumnInterval.type == table_units_1.TableWidthUnitType.ModelUnits)
            return new column_interval_1.ColumnInterval(currRowTableColumnInterval.width, colSpan, table_units_1.TableWidthUnitType.ModelUnits);
        return new column_interval_1.ColumnInterval(nextRowTableColumnInterval.width, colSpan, table_units_1.TableWidthUnitType.ModelUnits);
    };
    Calculator.mergeIntervalsDifferentRowsDifferentTypes = function (percentBasedInterval, anotherBasedInterval, colSpan) {
        return anotherBasedInterval.width > 0 ?
            new column_interval_1.ColumnInterval(anotherBasedInterval.width, colSpan, anotherBasedInterval.type) :
            new column_interval_1.ColumnInterval(percentBasedInterval.width, colSpan, percentBasedInterval.type);
    };
    Calculator.copyRestIntervals = function (iterator, to) {
        while (!iterator.endOfIntervals()) {
            to.push(iterator.interval);
            iterator.advance(iterator.interval);
        }
    };
    Calculator.processDependedIntervals = function (masterIterator, slaveIterator, mergedRowsIntervals) {
        var deferredTableGrid = [];
        var autoSizeIntervalsCount = 0;
        var masterInterval = masterIterator.interval;
        do {
            var slaveInterval = slaveIterator.interval;
            if (slaveInterval.type == table_units_1.TableWidthUnitType.Auto || slaveInterval.type == table_units_1.TableWidthUnitType.Nil)
                autoSizeIntervalsCount++;
            deferredTableGrid.push(slaveInterval);
            slaveIterator.advance(slaveInterval);
            masterInterval = masterInterval.substract(slaveInterval);
        } while (masterInterval.colSpan > 0 && !slaveIterator.endOfIntervals() && slaveIterator.interval.colSpan <= masterInterval.colSpan);
        var calculateNotSetIntervals = masterInterval.type == table_units_1.TableWidthUnitType.ModelUnits && autoSizeIntervalsCount > 0;
        var newWidth = calculateNotSetIntervals ? masterInterval.width / autoSizeIntervalsCount : 0;
        for (var _i = 0, deferredTableGrid_1 = deferredTableGrid; _i < deferredTableGrid_1.length; _i++) {
            var interval = deferredTableGrid_1[_i];
            if (calculateNotSetIntervals && (interval.type == table_units_1.TableWidthUnitType.Auto || interval.type == table_units_1.TableWidthUnitType.Nil)) {
                interval.type = table_units_1.TableWidthUnitType.ModelUnits;
                interval.width = newWidth;
            }
            mergedRowsIntervals.push(masterIterator.interval.colSpan > 1 ? interval : Calculator.mergeIntervalsDifferentRows(masterIterator.interval, interval));
            masterIterator.advance(interval);
        }
    };
    return Calculator;
}());
exports.Calculator = Calculator;
