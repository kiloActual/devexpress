"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var table_1 = require("../../../../model/tables/main-structures/table");
var table_cell_properties_merger_1 = require("../../../../model/tables/properties-mergers/table-cell-properties-merger");
var table_base_structures_1 = require("../../../../model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../../model/tables/secondary-structures/table-units");
var border_helper_1 = require("../../borders/border-helper");
var formatter_1 = require("../../formatter");
var TablePropertiesCache = (function () {
    function TablePropertiesCache(model, table, grid, innerClientProperties) {
        this.borderProvider = new border_helper_1.TableBorderInfoProvider(model, table, unit_converter_1.UnitConverter.twipsToPixels);
        this.indent = table.getActualTableIndent(model.defaultTableProperties);
        if (innerClientProperties.viewsSettings.isSimpleView && table.nestedLevel == 0 && this.indent.value < 0) {
            this.indent = this.indent.clone();
            this.indent.value = 0;
        }
        this.layoutType = table.getActualTableLayout(model.defaultTableProperties);
        this.preferredWidth = this.getActualPreferredWidth(table);
        var pos = new table_1.TablePosition(table, -1, -1);
        this.rows = [];
        while (pos.moveToNextRow())
            this.rows.push(new TableRowPropertiesCache(model, this.borderProvider, pos, this.rows, grid));
    }
    Object.defineProperty(TablePropertiesCache.prototype, "isFixedTableWidth", {
        get: function () {
            var type = this.preferredWidth.type;
            return type == table_units_1.TableWidthUnitType.FiftiethsOfPercent || type == table_units_1.TableWidthUnitType.ModelUnits;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TablePropertiesCache.prototype, "isFixedAlgoritm", {
        get: function () {
            return this.layoutType == table_base_structures_1.TableLayoutType.Fixed && this.isFixedTableWidth;
        },
        enumerable: true,
        configurable: true
    });
    TablePropertiesCache.prototype.getActualPreferredWidth = function (table) {
        var result = table.preferredWidth;
        if (result.type == table_units_1.TableWidthUnitType.ModelUnits && result.value == 0)
            result = table_units_1.TableWidthUnit.createDefault();
        return result;
    };
    return TablePropertiesCache;
}());
exports.TablePropertiesCache = TablePropertiesCache;
var TableRowPropertiesCache = (function () {
    function TableRowPropertiesCache(model, tblBrdProv, pos, rows, grid) {
        this.cells = [];
        while (pos.moveToNextCell()) {
            if (pos.cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue) {
                var cellInfo = grid.tableCellInfos[pos.rowIndex][pos.cellIndex];
                var rowIndex = cellInfo.getStartRowIndex();
                this.cells.push(rows[rowIndex].cells[cellInfo.getCellIndexAbs(rowIndex)]);
            }
            else
                this.cells.push(new TableCellPropertiesCache(model, tblBrdProv, pos));
        }
    }
    return TableRowPropertiesCache;
}());
exports.TableRowPropertiesCache = TableRowPropertiesCache;
var TableCellPropertiesCache = (function () {
    function TableCellPropertiesCache(model, tblBrdProv, pos) {
        var tableStyle = pos.table.style;
        var defCellProps = model.defaultTableCellProperties;
        this.noWrap = new table_cell_properties_merger_1.TableCellPropertiesMergerNoWrap().getProperty(pos.cell.properties, tableStyle, pos.cell.conditionalFormatting, defCellProps);
        this.horizontalMargins =
            formatter_1.Formatter.getCellMargin(pos.cell.getActualLeftCellMargin(model)) +
                formatter_1.Formatter.getCellMargin(pos.cell.getActualRightCellMargin(model));
        this.leftBorderWidth = border_helper_1.BorderHelper.getLeftBorder(model.colorProvider, pos, pos.row.cells[pos.cellIndex - 1], tblBrdProv, unit_converter_1.UnitConverter.twipsToPixels).width;
        this.rightBorderWidth = border_helper_1.BorderHelper.getRightBorder(model.colorProvider, pos, pos.row.cells[pos.cellIndex + 1], tblBrdProv, unit_converter_1.UnitConverter.twipsToPixels).width;
        this.spacing = tblBrdProv.cellSpacings[pos.rowIndex] *
            ((pos.cell.parentRow.gridBefore == 0 && pos.cellIndex == 0) ||
                (pos.cell.parentRow.gridAfter == 0 && pos.cellIndex == pos.row.cells.length - 1) ?
                3 : 2);
    }
    return TableCellPropertiesCache;
}());
exports.TableCellPropertiesCache = TableCellPropertiesCache;
