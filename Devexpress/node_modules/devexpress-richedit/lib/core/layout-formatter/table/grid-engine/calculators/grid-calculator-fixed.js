"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var table_units_1 = require("../../../../model/tables/secondary-structures/table-units");
var column_interval_1 = require("./column-interval");
var grid_calculator_1 = require("./grid-calculator");
var GridCalculatorFixed = (function (_super) {
    tslib_1.__extends(GridCalculatorFixed, _super);
    function GridCalculatorFixed() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridCalculatorFixed.prototype.makeInterval = function (interval) {
        return new column_interval_1.ColumnIntervalFixed(interval);
    };
    GridCalculatorFixed.prototype.autofitTail = function (totalWidth, estimatedTableWidth) {
        if (totalWidth.toFixed(this.accuracy) > estimatedTableWidth.toFixed(this.accuracy))
            this.compressTableGrid(estimatedTableWidth);
    };
    GridCalculatorFixed.prototype.applyCellsWidth = function (intervals) {
        var totalPercentWidth = 0;
        var totalModelUnitWidth = 0;
        var unsetCount = 0;
        for (var i = 0; i < intervals.length; i++) {
            var interval = intervals[i];
            switch (interval.type) {
                case table_units_1.TableWidthUnitType.FiftiethsOfPercent:
                    totalPercentWidth += interval.width;
                    if (totalPercentWidth > this.maxPercentWidth) {
                        interval.width = Math.max(0, this.maxPercentWidth - totalPercentWidth + interval.width);
                        totalPercentWidth = this.maxPercentWidth;
                    }
                    break;
                case table_units_1.TableWidthUnitType.ModelUnits:
                    totalModelUnitWidth += interval.width;
                    break;
                case table_units_1.TableWidthUnitType.Auto:
                case table_units_1.TableWidthUnitType.Nil:
                    unsetCount++;
                    break;
            }
        }
        var tableWidth = this.getFixedTableWidthInTwips();
        var totalPercentWidthInModelUnit = tableWidth;
        if (totalModelUnitWidth != 0 || unsetCount != 0)
            totalPercentWidthInModelUnit = tableWidth * totalPercentWidth / this.maxPercentWidth;
        var restModelUnitWidth = tableWidth;
        if (totalPercentWidthInModelUnit > 0)
            restModelUnitWidth = Math.min(tableWidth - totalPercentWidthInModelUnit, totalModelUnitWidth);
        var restForUnsetColumns = tableWidth - totalModelUnitWidth - totalPercentWidthInModelUnit;
        for (var i = 0; i < intervals.length; i++) {
            var gridColumn = this.columns[i];
            var interval = intervals[i];
            var width = 0;
            switch (interval.type) {
                case table_units_1.TableWidthUnitType.FiftiethsOfPercent:
                    gridColumn.type = table_units_1.TableWidthUnitType.FiftiethsOfPercent;
                    gridColumn.percentValue = interval.width;
                    width = totalPercentWidthInModelUnit * interval.width / totalPercentWidth;
                    break;
                case table_units_1.TableWidthUnitType.ModelUnits:
                    if (interval.width > 0) {
                        width = restModelUnitWidth * interval.width / totalModelUnitWidth;
                        restModelUnitWidth -= width;
                        totalModelUnitWidth -= interval.width;
                    }
                    break;
                case table_units_1.TableWidthUnitType.Auto:
                case table_units_1.TableWidthUnitType.Nil:
                    width = restForUnsetColumns / unsetCount;
                    restForUnsetColumns -= width;
                    unsetCount--;
                    break;
            }
            width = Math.max(grid_calculator_1.GridCalculator.minColumnWidth, width);
            width = unit_converter_1.UnitConverter.twipsToPixelsF(width);
            gridColumn.updateMinBound(width);
            gridColumn.updateMaxBound(width);
        }
    };
    return GridCalculatorFixed;
}(grid_calculator_1.GridCalculator));
exports.GridCalculatorFixed = GridCalculatorFixed;
