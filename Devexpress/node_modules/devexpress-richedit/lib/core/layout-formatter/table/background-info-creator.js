"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var layout_table_row_info_1 = require("../../layout/table/layout-table-row-info");
var table_cell_properties_merger_1 = require("../../model/tables/properties-mergers/table-cell-properties-merger");
var table_base_structures_1 = require("../../model/tables/secondary-structures/table-base-structures");
var TableBackgroundInfoCreator = (function () {
    function TableBackgroundInfoCreator() {
    }
    TableBackgroundInfoCreator.createBackgroundInfos = function (colorProvider, defaultTblCellProps, grid, currTableColumnInfo, currColumnVerticalBorders, currColumnHorizontalBorders, rowInfo) {
        var tableStyle = grid.table.style;
        var modelRows = grid.table.rows;
        for (var rowIndexInColumn = 0, vertRowBrds = void 0; vertRowBrds = currColumnVerticalBorders[rowIndexInColumn]; rowIndexInColumn++) {
            var tblRowInfo = currTableColumnInfo.tableRows[rowIndexInColumn];
            var modelRowIndex = tblRowInfo.rowIndex;
            var rowCellSpacing = rowInfo[modelRowIndex].cellSpacing;
            var cells = modelRows[modelRowIndex].cells;
            var rowHorizontalBorders = currColumnHorizontalBorders[rowIndexInColumn];
            var isRowFirstInColumn = rowIndexInColumn == 0;
            var isRowLastInColumn = rowIndexInColumn == currColumnVerticalBorders.length - 1;
            for (var cellIndex = 0, cellVerticalBorders = void 0; cellVerticalBorders = vertRowBrds[cellIndex]; cellIndex++) {
                var cell = cells[cellIndex];
                if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue && rowIndexInColumn != 0)
                    continue;
                var isCellLastInRow = cellIndex == vertRowBrds.length - 1;
                var cellGridInfo = grid.tableCellInfos[modelRowIndex][cellIndex];
                var lastCellRowIndex = Math.min(cellGridInfo.getStartRowIndex() + cellGridInfo.getNumRowsInCell() - modelRowIndex + rowIndexInColumn, currColumnVerticalBorders.length) - 1;
                var cellLastBrdsLines = currColumnHorizontalBorders[lastCellRowIndex];
                var rect = new rectangle_1.Rectangle(0, 0, 0, 0);
                if (rowCellSpacing) {
                    var isCellFirstInRow = cellIndex == 0;
                    var leftBrdIndex = isCellFirstInRow ? 1 : 0;
                    var rightBrdIndex = cellVerticalBorders.length - (isCellLastInRow ? 2 : 1);
                    rect.x = cellVerticalBorders[leftBrdIndex].xPos + cellVerticalBorders[leftBrdIndex].borderInfo.width;
                    rect.width = cellVerticalBorders[rightBrdIndex].xPos - rect.x;
                    var topHorBrdLine = rowHorizontalBorders[isRowFirstInColumn ? 1 : 0];
                    rect.y = topHorBrdLine.yPosition + topHorBrdLine.maxWidth;
                    rect.height = cellLastBrdsLines[cellLastBrdsLines.length - (isRowLastInColumn ? 2 : 1)].yPosition - rect.y;
                }
                else {
                    rect.x = cellVerticalBorders[0].xPos + cellVerticalBorders[0].borderInfo.width;
                    var rightBrd = isCellLastInRow ? cellVerticalBorders[1] : vertRowBrds[cellIndex + 1][0];
                    rect.width = rightBrd.xPos - rect.x;
                    var topHorBrdLine = rowHorizontalBorders[0];
                    var botHorBrdLine = lastCellRowIndex == currColumnVerticalBorders.length - 1 ?
                        currColumnHorizontalBorders[lastCellRowIndex][1] : currColumnHorizontalBorders[lastCellRowIndex + 1][0];
                    rect.y = topHorBrdLine.yPosition + topHorBrdLine.maxWidth;
                    rect.height = botHorBrdLine.yPosition - rect.y;
                }
                var getColorFromCell = cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue ?
                    modelRows[cellGridInfo.getStartRowIndex()].cells[cellGridInfo.getCellIndex(0)] :
                    cell;
                var cellBackgroundColor = new table_cell_properties_merger_1.TableCellPropertiesMergerShadingInfo()
                    .getProperty(getColorFromCell.properties, tableStyle, getColorFromCell.conditionalFormatting, defaultTblCellProps).getActualColor(colorProvider);
                tblRowInfo.backgroundInfos.push(new layout_table_row_info_1.LayoutTableCellBackgroundInfo(rect, cellBackgroundColor));
            }
        }
    };
    return TableBackgroundInfoCreator;
}());
exports.TableBackgroundInfoCreator = TableBackgroundInfoCreator;
