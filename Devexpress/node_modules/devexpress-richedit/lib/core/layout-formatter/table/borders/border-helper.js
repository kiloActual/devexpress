"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var border_info_1 = require("../../../model/borders/border-info");
var table_cell_properties_merger_1 = require("../../../model/tables/properties-mergers/table-cell-properties-merger");
var table_row_properties_merger_1 = require("../../../model/tables/properties-mergers/table-row-properties-merger");
var table_border_calculator_1 = require("../../../model/tables/secondary-structures/table-border-calculator");
var horizontal_line_borders_info_1 = require("./horizontal-line-borders-info");
var layout_table_border_1 = require("./layout-table-border");
var layout_table_horizontal_border_1 = require("./layout-table-horizontal-border");
var TableBorderInfoProvider = (function () {
    function TableBorderInfoProvider(model, table, converter) {
        this.cellSpacings = list_1.ListUtils.map(table.rows, function (row) { return new table_row_properties_merger_1.TableRowPropertiesMergerCellSpacing(model, table, row.tablePropertiesException)
            .getProperty(row.properties, table.style, row.conditionalFormatting, model.defaultTableRowProperties)
            .asNumberNoPercentType(converter); });
        var defaultProperties = model.defaultTableProperties;
        this.leftBorder = table.getActualLeftBorder(defaultProperties);
        this.rightBorder = table.getActualRightBorder(defaultProperties);
        this.bottomBorder = table.getActualBottomBorder(defaultProperties);
        this.topBorder = table.getActualTopBorder(defaultProperties);
        this.horizontalBorder = table.getActualHorizontalBorder(defaultProperties);
        this.verticalBorder = table.getActualVerticalBorder(defaultProperties);
        this.leftBorder = TableBorderInfoProvider.borderConvertToPixels(this.leftBorder, converter);
        this.rightBorder = TableBorderInfoProvider.borderConvertToPixels(this.rightBorder, converter);
        this.topBorder = TableBorderInfoProvider.borderConvertToPixels(this.topBorder, converter);
        this.bottomBorder = TableBorderInfoProvider.borderConvertToPixels(this.bottomBorder, converter);
        this.horizontalBorder = TableBorderInfoProvider.borderConvertToPixels(this.horizontalBorder, converter);
        this.verticalBorder = TableBorderInfoProvider.borderConvertToPixels(this.verticalBorder, converter);
    }
    TableBorderInfoProvider.borderConvertToPixels = function (brdInfo, converter) {
        if (!brdInfo)
            return null;
        var newBrd = brdInfo.clone();
        newBrd.width = converter(newBrd.width);
        return newBrd;
    };
    return TableBorderInfoProvider;
}());
exports.TableBorderInfoProvider = TableBorderInfoProvider;
var BorderHelper = (function () {
    function BorderHelper(tableInfo, model) {
        this.colorProvider = model.colorProvider;
        this.tableInfo = tableInfo;
        this.tblbrdProvider = new TableBorderInfoProvider(model, tableInfo.table, unit_converter_1.UnitConverter.twipsToPixels);
    }
    BorderHelper.prototype.rowCellSpacing = function (rowIndex) {
        return this.tblbrdProvider.cellSpacings[rowIndex];
    };
    Object.defineProperty(BorderHelper.prototype, "borderHorizontal", {
        get: function () {
            return this.tblbrdProvider.horizontalBorder;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BorderHelper.prototype, "grid", {
        get: function () { return this.tableInfo.grid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BorderHelper.prototype, "tblStyle", {
        get: function () { return this.tableInfo.table.style; },
        enumerable: true,
        configurable: true
    });
    BorderHelper.prototype.getVerticalBorders = function () {
        var _this = this;
        var verticalBorders = [];
        var rows = this.grid.table.rows;
        var tblInfos = this.grid.tableCellInfos;
        for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
            var cellSpacing = this.rowCellSpacing(rowIndex);
            var rowBorders = [];
            var lastRowCellIndex = row.cells.length - 1;
            var cells = row.cells;
            verticalBorders.push(rowBorders);
            for (var cellIndex = 0, cell; cell = cells[cellIndex]; cellIndex++) {
                var cellBorders = [];
                rowBorders.push(cellBorders);
                var cellInfo = tblInfos[rowIndex][cellIndex];
                var cellForBorders = cellInfo.getStartRowIndex() != rowIndex ? rows[cellInfo.getStartRowIndex()].cells[cellInfo.getCellIndex(0)] : cell;
                if (cellSpacing > 0) {
                    if (cellIndex == 0) {
                        cellBorders.push(this.mergeVerticalBorders(null, null, null, null, true, this.tblbrdProvider.leftBorder, function (borderWidth) {
                            return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex()] - borderWidth / 2);
                        }));
                        cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft, null, null, false, this.tblbrdProvider.leftBorder, function (_borderWidth) {
                            return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex()] + cellSpacing * 2);
                        }));
                    }
                    else
                        cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft, null, null, false, this.tblbrdProvider.verticalBorder, function (_borderWidth) {
                            return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex()] + cellSpacing);
                        }));
                    cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight, null, null, false, this.tblbrdProvider.verticalBorder, function (borderWidth) {
                        return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex() + cell.columnSpan] - cellSpacing * (cellIndex == cells.length - 1 ? 2 : 1) - borderWidth);
                    }));
                    if (cellIndex == lastRowCellIndex)
                        cellBorders.push(this.mergeVerticalBorders(null, null, null, null, true, this.tblbrdProvider.rightBorder, function (borderWidth) {
                            return Math.floor(_this.getCellEndGridPosition(rowIndex, cellIndex) - borderWidth / 2);
                        }));
                }
                else {
                    if (cellIndex == 0)
                        cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft, null, null, true, this.tblbrdProvider.leftBorder, function (borderWidth) {
                            return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex()] - borderWidth / 2);
                        }));
                    else {
                        var leftCell = cells[cellIndex - 1];
                        cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft, leftCell, table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight, false, this.tblbrdProvider.verticalBorder, function (_borderWidth) {
                            return Math.floor(_this.grid.columns.positions[cellInfo.getGridCellIndex()]);
                        }));
                    }
                    if (cellIndex == lastRowCellIndex)
                        cellBorders.push(this.mergeVerticalBorders(cellForBorders, table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight, null, null, true, this.tblbrdProvider.rightBorder, function (borderWidth) {
                            return Math.floor(_this.getCellEndGridPosition(rowIndex, cellIndex) - borderWidth / 2);
                        }));
                }
            }
        }
        return verticalBorders;
    };
    BorderHelper.prototype.getVerticalCursorBorders = function () {
        var verticalBorders = [];
        var rows = this.grid.table.rows;
        var tblInfos = this.grid.tableCellInfos;
        for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
            var rowBorders = [];
            var lastRowCellIndex = row.cells.length - 1;
            verticalBorders.push(rowBorders);
            for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                var cellBorders = [];
                rowBorders.push(cellBorders);
                if (this.rowCellSpacing(rowIndex) > 0)
                    this.populateVerticalCursorBordersWithSpacing(cellIndex, rowIndex, lastRowCellIndex, this.rowCellSpacing(rowIndex), cellBorders, tblInfos[rowIndex][cellIndex]);
                else
                    this.populateVerticalCursorBorders(cellIndex, rowIndex, lastRowCellIndex, cellBorders, tblInfos[rowIndex][cellIndex]);
            }
        }
        return verticalBorders;
    };
    BorderHelper.prototype.populateVerticalCursorBordersWithSpacing = function (cellIndex, rowIndex, lastRowCellIndex, cellSpacing, cellBorders, cellInfo) {
        if (cellIndex == 0)
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[cellInfo.getGridCellIndex()]));
        else
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[cellInfo.getGridCellIndex()], cellSpacing));
        if (cellIndex == lastRowCellIndex)
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[this.getCellGridColumnIndex(rowIndex, cellIndex)]));
    };
    BorderHelper.prototype.populateVerticalCursorBorders = function (cellIndex, rowIndex, lastRowCellIndex, cellBorders, cellInfo) {
        if (cellIndex == 0)
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[cellInfo.getGridCellIndex()]));
        else
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[cellInfo.getGridCellIndex()]));
        if (cellIndex == lastRowCellIndex)
            cellBorders.push(this.createVerticalCursorBorder(this.grid.columns.positions[this.getCellGridColumnIndex(rowIndex, cellIndex)]));
    };
    BorderHelper.prototype.getCellGridColumnIndex = function (rowIndex, cellIndex) {
        var cellGridStartPos = this.grid.tableCellInfos[rowIndex][cellIndex].getGridCellIndex();
        var cellGridColumnEndIndex = cellGridStartPos + this.grid.table.rows[rowIndex].cells[cellIndex].columnSpan;
        return cellGridColumnEndIndex;
    };
    BorderHelper.prototype.createVerticalCursorBorder = function (modelXPos, cellSpacing) {
        if (cellSpacing === void 0) { cellSpacing = -1; }
        var DEFAULT_CURSOR_BORDER_WIDTH = 4;
        var size = cellSpacing != -1 ? cellSpacing : DEFAULT_CURSOR_BORDER_WIDTH;
        return new layout_table_border_1.LayoutCursorVerticalTableBorder(Math.floor(modelXPos - size / 2), 0, 0, new border_info_1.BorderInfo().getLayoutBorder(this.colorProvider));
    };
    BorderHelper.prototype.mergeVerticalBorders = function (cellA, mergerCellA, cellB, mergerCellB, isOutsideCellBorders, tableBorderInfo, getX) {
        var brd = BorderHelper.mergeThreeBorders(this.colorProvider, cellA, mergerCellA, cellB, mergerCellB, isOutsideCellBorders, tableBorderInfo, this.tblStyle, unit_converter_1.UnitConverter.twipsToPixels);
        var tableVerticalBorder = new layout_table_border_1.LayoutTableBorder(0, 0, 0, brd ? brd.getLayoutBorder(this.colorProvider) : null);
        if (tableVerticalBorder.borderInfo)
            tableVerticalBorder.xPos = getX(tableVerticalBorder.borderInfo.width);
        return tableVerticalBorder;
    };
    BorderHelper.prototype.getHorizontalBordersByRow = function (rowIndex, isRowFirstInLayoutColumn, isRowLastInLayoutColumn) {
        var linesInRow = [];
        if (this.rowCellSpacing(rowIndex) > 0) {
            if (isRowFirstInLayoutColumn || rowIndex == 0)
                linesInRow.push(this.collectTableHorizontalBorders(this.tblbrdProvider.topBorder, rowIndex));
            linesInRow.push(this.collectOneCellAndTableHorizontalBorders(rowIndex, table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop, rowIndex - 1, this.tblbrdProvider.horizontalBorder, !isRowFirstInLayoutColumn));
            linesInRow.push(this.collectOneCellAndTableHorizontalBorders(rowIndex, table_cell_properties_merger_1.TableCellPropertiesMergerBorderBottom, rowIndex + 1, this.tblbrdProvider.horizontalBorder, !isRowLastInLayoutColumn));
            if (isRowLastInLayoutColumn)
                linesInRow.push(this.collectTableHorizontalBorders(this.tblbrdProvider.bottomBorder, rowIndex));
        }
        else {
            if (isRowFirstInLayoutColumn || rowIndex == 0)
                linesInRow.push(this.collectOneCellAndTableHorizontalBorders(rowIndex, table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop, rowIndex - 1, this.tblbrdProvider.topBorder, false));
            else
                linesInRow.push(this.collectThreeBorders(rowIndex, table_cell_properties_merger_1.TableCellPropertiesMergerBorderTop, table_cell_properties_merger_1.TableCellPropertiesMergerBorderBottom, this.tblbrdProvider.horizontalBorder));
            if (isRowLastInLayoutColumn)
                linesInRow.push(this.collectOneCellAndTableHorizontalBorders(rowIndex, table_cell_properties_merger_1.TableCellPropertiesMergerBorderBottom, rowIndex + 1, this.tblbrdProvider.bottomBorder, false));
        }
        return linesInRow;
    };
    BorderHelper.prototype.collectTableHorizontalBorders = function (tableBorderInfo, rowIndex) {
        var cells = this.grid.table.rows[rowIndex].cells;
        var lastCellIndex = cells.length - 1;
        var lastCell = cells[lastCellIndex];
        var firstCellGridInfo = this.grid.tableCellInfos[rowIndex][0];
        var lastCellGridInfo = this.grid.tableCellInfos[rowIndex][lastCellIndex];
        var horizBorder = new layout_table_horizontal_border_1.LayoutTableHorizontalBorder();
        horizBorder.borderInfo = tableBorderInfo.getLayoutBorder(this.colorProvider);
        horizBorder.xPosition = Math.floor(this.grid.columns.positions[firstCellGridInfo.getGridCellIndex()]);
        horizBorder.length = Math.ceil(this.grid.columns.positions[lastCellGridInfo.getGridCellIndex() + lastCell.columnSpan]) - horizBorder.xPosition;
        var horizBordersInfo = new horizontal_line_borders_info_1.HorizontalLineBordersInfo(true);
        horizBordersInfo.borders.push(horizBorder);
        horizBordersInfo.updateWidth(tableBorderInfo ? tableBorderInfo.width : 0);
        return horizBordersInfo;
    };
    BorderHelper.prototype.collectOneCellAndTableHorizontalBorders = function (cellBorderRowIndex, getCurrCellBorderMerger, tableBorderRowIndex, tableBorderInfo, isTableBorderRowIndexValid) {
        var rows = this.grid.table.rows;
        var cells = rows[cellBorderRowIndex].cells;
        var rowCellSpacing = this.rowCellSpacing(cellBorderRowIndex);
        var horizBordersInfo = new horizontal_line_borders_info_1.HorizontalLineBordersInfo(true);
        for (var cellIndex = 0, cell = void 0; cell = cells[cellIndex]; cellIndex++) {
            var currCellGridTableInfo = this.grid.tableCellInfos[cellBorderRowIndex][cellIndex];
            var currCellGridStartIndex = currCellGridTableInfo.getGridCellIndex();
            var tableCellGridTableInfo = isTableBorderRowIndexValid ?
                this.grid.tableCellGridInfos[tableBorderRowIndex][currCellGridStartIndex] :
                null;
            if (currCellGridTableInfo == tableCellGridTableInfo)
                continue;
            var currCellXPosition = Math.floor(this.grid.columns.positions[currCellGridStartIndex] + rowCellSpacing * (cellIndex == 0 ? 2 : 1));
            var currCellEndGridColumn = Math.ceil(this.grid.columns.positions[currCellGridStartIndex + cell.columnSpan] - rowCellSpacing * (cellIndex == cells.length - 1 ? 2 : 1));
            var currCellBorder = getCurrCellBorderMerger ?
                TableBorderInfoProvider.borderConvertToPixels((new getCurrCellBorderMerger(cell.parentRow.tablePropertiesException, !isTableBorderRowIndexValid))
                    .getProperty(cell.properties, this.tblStyle, cell.conditionalFormatting, null), unit_converter_1.UnitConverter.twipsToPixels) :
                null;
            var horizBorder = new layout_table_horizontal_border_1.LayoutTableHorizontalBorder();
            horizBorder.xPosition = currCellXPosition;
            horizBorder.length = currCellEndGridColumn - currCellXPosition;
            var brd = (currCellBorder ? currCellBorder : tableBorderInfo);
            horizBorder.borderInfo = brd ? brd.getLayoutBorder(this.colorProvider) : null;
            horizBordersInfo.borders.push(horizBorder);
            horizBordersInfo.updateWidth(horizBorder.borderInfo ? horizBorder.borderInfo.width : 0);
        }
        return horizBordersInfo;
    };
    BorderHelper.prototype.collectThreeBorders = function (rowIndex, getCurrCellBorderMerger, getTopCellBorderMerger, tableBorderInfo) {
        var horizBordersInfo = new horizontal_line_borders_info_1.HorizontalLineBordersInfo(true);
        var gridColumnsNum = this.grid.columns.numColumns;
        var prevRowIndex = rowIndex - 1;
        var gridInfosPrevRow = this.grid.tableCellGridInfos[prevRowIndex];
        var gridInfosCurrRow = this.grid.tableCellGridInfos[rowIndex];
        var prevRowCells = this.grid.table.rows[prevRowIndex].cells;
        var currRowCells = this.grid.table.rows[rowIndex].cells;
        for (var cellGridIndex = 0; cellGridIndex < gridColumnsNum; cellGridIndex++) {
            var prevCellInfo = gridInfosPrevRow[cellGridIndex];
            var currCellInfo = gridInfosCurrRow[cellGridIndex];
            if (!prevCellInfo && !currCellInfo ||
                prevCellInfo && prevRowIndex != prevCellInfo.getStartRowIndex() + prevCellInfo.getNumRowsInCell() - 1)
                continue;
            var prevCell = prevCellInfo ? prevRowCells[prevCellInfo.getCellIndex(prevRowIndex - prevCellInfo.getStartRowIndex())] : null;
            var currCell = currCellInfo ? currRowCells[currCellInfo.getCellIndex(rowIndex - currCellInfo.getStartRowIndex())] : null;
            var horizBorder = new layout_table_horizontal_border_1.LayoutTableHorizontalBorder();
            horizBorder.xPosition = Math.floor(this.grid.columns.positions[cellGridIndex]);
            horizBorder.length = Math.ceil(this.grid.columns.width[cellGridIndex]);
            var brd = BorderHelper.mergeThreeBorders(this.colorProvider, currCell, getCurrCellBorderMerger, prevCell, getTopCellBorderMerger, false, tableBorderInfo, this.tblStyle, unit_converter_1.UnitConverter.twipsToPixels);
            horizBorder.borderInfo = brd ? brd.getLayoutBorder(this.colorProvider) : null;
            horizBordersInfo.updateWidth(horizBorder.borderInfo ? horizBorder.borderInfo.width : 0);
            horizBordersInfo.borders.push(horizBorder);
        }
        return horizBordersInfo;
    };
    BorderHelper.prototype.getCellEndGridPosition = function (rowIndex, cellIndex) {
        var cellGridStartPos = this.grid.tableCellInfos[rowIndex][cellIndex].getGridCellIndex();
        var cellGridColumnEndIndex = cellGridStartPos + this.grid.table.rows[rowIndex].cells[cellIndex].columnSpan;
        return Math.ceil(this.grid.columns.positions[cellGridColumnEndIndex]);
    };
    BorderHelper.mergeThreeBorders = function (colorProvider, cellA, mergerCellA, cellB, mergerCellB, isOutsideCellBorders, tableBorderInfo, tblStyle, converter) {
        var tblBrd;
        if (cellA && cellB) {
            tblBrd = table_border_calculator_1.TableBorderCalculator.getPowerfulBorder(colorProvider, TableBorderInfoProvider.borderConvertToPixels((new mergerCellA(cellA.parentRow.tablePropertiesException, isOutsideCellBorders))
                .getProperty(cellA.properties, tblStyle, cellA.conditionalFormatting, null), converter), TableBorderInfoProvider.borderConvertToPixels((new mergerCellB(cellB.parentRow.tablePropertiesException, isOutsideCellBorders))
                .getProperty(cellB.properties, tblStyle, cellB.conditionalFormatting, null), converter));
        }
        else {
            var cell = cellA || cellB;
            if (cell)
                tblBrd = TableBorderInfoProvider.borderConvertToPixels((new (mergerCellA || mergerCellB)(cell.parentRow.tablePropertiesException, isOutsideCellBorders))
                    .getProperty(cell.properties, tblStyle, cell.conditionalFormatting, null), converter);
        }
        if (!tblBrd)
            tblBrd = tableBorderInfo;
        return tblBrd;
    };
    BorderHelper.getLeftBorder = function (colorProvider, pos, siblingCell, tblBrdProv, converter) {
        return BorderHelper.getRightLeftBorder(colorProvider, pos, siblingCell, tblBrdProv, converter, pos.cellIndex == 0, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft, table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight);
    };
    BorderHelper.getRightBorder = function (colorProvider, pos, siblingCell, tblBrdProv, converter) {
        return BorderHelper.getRightLeftBorder(colorProvider, pos, siblingCell, tblBrdProv, converter, pos.cellIndex == pos.row.cells.length - 1, table_cell_properties_merger_1.TableCellPropertiesMergerBorderRight, table_cell_properties_merger_1.TableCellPropertiesMergerBorderLeft);
    };
    BorderHelper.getRightLeftBorder = function (colorProvider, pos, siblingCell, tblBrdProv, converter, isOutsideBorder, currentMerger, siblingMerger) {
        var tableStyle = pos.table.style;
        return tblBrdProv.cellSpacings[pos.rowIndex] > 0 ?
            BorderHelper.mergeThreeBorders(colorProvider, pos.cell, currentMerger, null, null, isOutsideBorder, isOutsideBorder ? tblBrdProv.leftBorder : tblBrdProv.verticalBorder, tableStyle, converter) :
            (isOutsideBorder ?
                BorderHelper.mergeThreeBorders(colorProvider, pos.cell, currentMerger, null, null, isOutsideBorder, tblBrdProv.leftBorder, tableStyle, converter) :
                BorderHelper.mergeThreeBorders(colorProvider, pos.cell, currentMerger, siblingCell, siblingMerger, isOutsideBorder, tblBrdProv.verticalBorder, tableStyle, converter));
    };
    return BorderHelper;
}());
exports.BorderHelper = BorderHelper;
