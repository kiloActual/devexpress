"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var LayoutTableBorder = (function () {
    function LayoutTableBorder(xPos, yPos, length, borderInfo) {
        this.xPos = xPos;
        this.yPos = yPos;
        this.length = length;
        this.borderInfo = borderInfo;
    }
    LayoutTableBorder.prototype.clone = function () {
        return new LayoutTableBorder(this.xPos, this.yPos, this.length, this.borderInfo.clone());
    };
    LayoutTableBorder.prototype.copyFrom = function (obj) {
        this.xPos = obj.xPos;
        this.yPos = obj.yPos;
        this.length = obj.length;
        this.borderInfo = obj.borderInfo.clone();
    };
    LayoutTableBorder.prototype.canCombineVertical = function (border) {
        return Math.abs(this.xPos - border.xPos) < 2 && Math.abs(this.yPos + this.length - border.yPos) < 2 && this.borderInfo.equals(border.borderInfo);
    };
    return LayoutTableBorder;
}());
exports.LayoutTableBorder = LayoutTableBorder;
var LayoutCursorHorizontalTableBorder = (function (_super) {
    tslib_1.__extends(LayoutCursorHorizontalTableBorder, _super);
    function LayoutCursorHorizontalTableBorder(xPos, yPos, length, borderInfo, layoutRowIndex) {
        var _this = _super.call(this, xPos, yPos, length, borderInfo) || this;
        _this.layoutRowIndex = layoutRowIndex;
        return _this;
    }
    LayoutCursorHorizontalTableBorder.prototype.clone = function () {
        return new LayoutCursorHorizontalTableBorder(this.xPos, this.yPos, this.length, this.borderInfo.clone(), this.layoutRowIndex);
    };
    LayoutCursorHorizontalTableBorder.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
        this.layoutRowIndex = obj.layoutRowIndex;
    };
    LayoutCursorHorizontalTableBorder.prototype.canCombine = function (border) {
        var limitX = Math.abs(this.xPos + this.length - border.xPos);
        var limitY = Math.abs(this.yPos - border.yPos);
        return limitX < 3 && limitY < 3 && this.layoutRowIndex == border.layoutRowIndex;
    };
    return LayoutCursorHorizontalTableBorder;
}(LayoutTableBorder));
exports.LayoutCursorHorizontalTableBorder = LayoutCursorHorizontalTableBorder;
var LayoutCursorVerticalTableBorder = (function (_super) {
    tslib_1.__extends(LayoutCursorVerticalTableBorder, _super);
    function LayoutCursorVerticalTableBorder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutCursorVerticalTableBorder.prototype.clone = function () {
        return new LayoutCursorVerticalTableBorder(this.xPos, this.yPos, this.length, this.borderInfo.clone());
    };
    LayoutCursorVerticalTableBorder.prototype.copyFrom = function (obj) {
        _super.prototype.copyFrom.call(this, obj);
    };
    return LayoutCursorVerticalTableBorder;
}(LayoutTableBorder));
exports.LayoutCursorVerticalTableBorder = LayoutCursorVerticalTableBorder;
