"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BorderMerger = (function () {
    function BorderMerger() {
    }
    BorderMerger.getFinalReducedVerticalBorders = function (vertBorders) {
        var resultBorders = [];
        var allVerticalBorders = [];
        for (var _i = 0, vertBorders_1 = vertBorders; _i < vertBorders_1.length; _i++) {
            var rowBorders = vertBorders_1[_i];
            for (var _a = 0, rowBorders_1 = rowBorders; _a < rowBorders_1.length; _a++) {
                var cellBorders = rowBorders_1[_a];
                for (var _b = 0, cellBorders_1 = cellBorders; _b < cellBorders_1.length; _b++) {
                    var border = cellBorders_1[_b];
                    allVerticalBorders.push(border);
                }
            }
        }
        allVerticalBorders.sort(function (a, b) {
            var xPosDiff = a.xPos - b.xPos;
            if (Math.abs(xPosDiff) > 1)
                return xPosDiff;
            var yPosDiff = a.yPos - b.yPos;
            if (yPosDiff != 0)
                return yPosDiff;
            return 0;
        });
        var prevBorder = allVerticalBorders[0];
        resultBorders.push(prevBorder);
        for (var brdIndex = 1, border = void 0; border = allVerticalBorders[brdIndex]; brdIndex++) {
            if (prevBorder.canCombineVertical(border))
                prevBorder.length = border.yPos + border.length - prevBorder.yPos;
            else {
                prevBorder = border;
                resultBorders.push(prevBorder);
            }
        }
        return resultBorders;
    };
    BorderMerger.getFinalReducedHorizontalBorders = function (horBorders) {
        var resultBorders = [];
        for (var _i = 0, horBorders_1 = horBorders; _i < horBorders_1.length; _i++) {
            var horLines = horBorders_1[_i];
            for (var _a = 0, horLines_1 = horLines; _a < horLines_1.length; _a++) {
                var line = horLines_1[_a];
                var borders = line.borders;
                var prevBorder = borders[0].getLayoutTableBorder(line);
                resultBorders.push(prevBorder);
                for (var brdIndex = 1, border = void 0; border = borders[brdIndex]; brdIndex++) {
                    if (Math.abs(prevBorder.xPos + prevBorder.length - border.xPosition) < 2 && prevBorder.borderInfo.equals(border.borderInfo))
                        prevBorder.length = border.xPosition + border.length - prevBorder.xPos;
                    else {
                        prevBorder = border.getLayoutTableBorder(line);
                        resultBorders.push(prevBorder);
                    }
                }
            }
        }
        return resultBorders;
    };
    return BorderMerger;
}());
exports.BorderMerger = BorderMerger;
