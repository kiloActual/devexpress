"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var layout_table_info_1 = require("../../../layout/table/layout-table-info");
var table_1 = require("../../../model/tables/main-structures/table");
var table_cell_properties_merger_1 = require("../../../model/tables/properties-mergers/table-cell-properties-merger");
var table_properties_merger_1 = require("../../../model/tables/properties-mergers/table-properties-merger");
var table_base_structures_1 = require("../../../model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../model/tables/secondary-structures/table-units");
var border_helper_1 = require("../borders/border-helper");
var creator_1 = require("../grid-engine/creator");
var cell_info_1 = require("./cell-info");
var cell_order_helper_1 = require("./cell-order-helper");
var row_info_1 = require("./row-info");
var TableInfo = (function () {
    function TableInfo(rowFormatter, table, tableMaxWidth, xPosition, yOffset) {
        var _this = this;
        this.empiricalOffset = unit_converter_1.UnitConverter.inchesToPixels(0.07);
        this.minRowIndex = 0;
        this.verticalBorders = [];
        this.verticalCursorBorders = [];
        this.isThisColumnFirstInTable = true;
        this.rowFormatter = rowFormatter;
        this.model = this.rowFormatter.manager.model;
        this.maxWidth = tableMaxWidth;
        this.columnWidth = tableMaxWidth;
        this.position = new table_1.TablePosition(table, 0, 0).init();
        this.bordersHelper = new border_helper_1.BorderHelper(this, this.model);
        this.init(xPosition, yOffset);
        this.rows = list_1.ListUtils.map(this.table.rows, function (_row, rowIndex) { return new row_info_1.RowInfo(_this, rowIndex); });
        this.verticalBorders = this.bordersHelper.getVerticalBorders();
        this.verticalCursorBorders = this.bordersHelper.getVerticalCursorBorders();
        var _loop_1 = function (rowInfo) {
            rowInfo.cells = list_1.ListUtils.map(rowInfo.row.cells, function (_cell, cellIndex) { return new cell_info_1.CellInfo(cellIndex, rowInfo); });
        };
        for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
            var rowInfo = _a[_i];
            _loop_1(rowInfo);
        }
        this.cellOrderHelper = new cell_order_helper_1.CellOrderHelper(this);
    }
    Object.defineProperty(TableInfo.prototype, "table", {
        get: function () { return this.position.table; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "tableStyle", {
        get: function () { return this.table.style; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "tblProps", {
        get: function () { return this.table.properties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "defaultTblProps", {
        get: function () { return this.model.defaultTableProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "defaultTblRowProps", {
        get: function () { return this.model.defaultTableRowProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "defaultTblCellProps", {
        get: function () { return this.model.defaultTableCellProperties; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "currRowInfo", {
        get: function () { return this.rows[this.position.rowIndex]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "currCellInfo", {
        get: function () { return this.currRowInfo.cells[this.position.cellIndex]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "isThisTableRowFirstInColumn", {
        get: function () { return this.currLayoutTableColumnInfo.tableRows.length == 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "isCurrRowLastInTable", {
        get: function () { return this.position.rowIndex == this.grid.table.rows.length - 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "currTablePositionIndexes", {
        get: function () {
            var actCellInfo = this.currCellInfo;
            return new table_1.TablePositionIndexes(actCellInfo.rowInfo.rowIndex, actCellInfo.cellIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableInfo.prototype, "isSimpleView", {
        get: function () {
            return this.rowFormatter.manager.innerClientProperties.viewsSettings.isSimpleView;
        },
        enumerable: true,
        configurable: true
    });
    TableInfo.prototype.init = function (xPosition, yOffset) {
        var firstCellLeftMargin = 0;
        var firstCellRightMargin = 0;
        var isRtfFile = true;
        if (this.table.nestedLevel == 0 && isRtfFile && !this.isSimpleView) {
            var firstRow = this.table.rows[0];
            var firstCell = firstRow.cells[0];
            firstCellLeftMargin = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginLeft(this.table, this.model, firstRow.tablePropertiesException)
                .getProperty(firstCell.properties, this.tableStyle, firstCell.conditionalFormatting, null)
                .asNumberNoPercentType(unit_converter_1.UnitConverter.twipsToPixels);
            firstCellRightMargin = new table_cell_properties_merger_1.TableCellPropertiesMergerMarginRight(this.table, this.model, firstRow.tablePropertiesException)
                .getProperty(firstCell.properties, this.tableStyle, firstCell.conditionalFormatting, null)
                .asNumberNoPercentType(unit_converter_1.UnitConverter.twipsToPixels);
        }
        var diff = this.moveRowDownToFitTable(yOffset, this.getEstimatedTableWidth(this.table, this.maxWidth), this.maxWidth);
        this.maxWidth = this.maxWidth + (diff.xDiff ? -diff.xDiff : firstCellLeftMargin + firstCellRightMargin);
        this.grid = creator_1.createGrid(this.table, this.rowFormatter.iterator, this.maxWidth, this.rowFormatter.manager.innerClientProperties);
        var tableIndent = this.table.getActualTableIndent(this.defaultTblProps);
        if (this.isSimpleView && this.table.nestedLevel == 0 && tableIndent.value < 0) {
            tableIndent = tableIndent.clone();
            tableIndent.value = 0;
        }
        var tableIndentInPixels = tableIndent.asNumberNoPercentType(unit_converter_1.UnitConverter.twipsToPixels);
        this.xPositionStart = xPosition + tableIndentInPixels + (diff.xDiff ? diff.xDiff : -firstCellLeftMargin) +
            this.getShiftHorizontalPosition(xPosition);
        this.yPositionStart = yOffset + diff.yDiff;
    };
    TableInfo.prototype.getShiftHorizontalPosition = function (xPosition) {
        var freeSpaceFromTable = this.columnWidth - this.grid.commonWidth;
        if (freeSpaceFromTable >= 0)
            return 0;
        var tableAlignment = this.table.getActualTableAlignment();
        if (tableAlignment == table_base_structures_1.TableRowAlignment.Center) {
            var result = freeSpaceFromTable / 2 - xPosition;
            if (result < 0 && this.isSimpleView)
                result = 0;
            return result;
        }
        else if (tableAlignment == table_base_structures_1.TableRowAlignment.Right)
            return freeSpaceFromTable - xPosition;
        return 0;
    };
    TableInfo.prototype.getEstimatedTableWidth = function (table, maxWidth) {
        var preferredWidth = table.preferredWidth;
        var minWidth = 3 * table.rows[0].getTotalCellsInRowConsiderGrid();
        if (table.properties.layoutType == table_base_structures_1.TableLayoutType.Autofit && (preferredWidth.type == table_units_1.TableWidthUnitType.Auto || preferredWidth.type == table_units_1.TableWidthUnitType.Nil))
            return minWidth;
        else
            return Math.min(table.preferredWidth ? table.preferredWidth.asNumber(maxWidth, unit_converter_1.UnitConverter.twipsToPixels) : minWidth, maxWidth);
    };
    TableInfo.prototype.getRelationByColumnY = function (lp, absY) {
        return absY - lp.pageArea.y - lp.column.y;
    };
    TableInfo.prototype.getRelationByColumnX = function (lp, absX) {
        return absX - lp.pageArea.x - lp.column.x;
    };
    TableInfo.prototype.moveRowDownToFitTable = function (yOffset, getEstimatedTableWidth, maxAvalibleWidth) {
        var _this = this;
        var lp = this.rowFormatter.manager.activeFormatter.layoutPosition;
        var xDiff = 0;
        var currentYOffset = yOffset;
        var expectedTableHeight = this.rowFormatter.iterator.getWrap(false).box.height * this.table.rows.length;
        var maxYOffset = lp.column.bottom - expectedTableHeight - this.empiricalOffset;
        if (this.table.nestedLevel == 0 && lp.pageArea.subDocument.isMain()) {
            var anchoredObjects_1 = [];
            number_1.NumberMapUtils.forEach(lp.page.anchoredObjectHolder.objects, function (ancObj) {
                if (ancObj.isInText() && yOffset <= _this.getRelationByColumnY(lp, ancObj.y + ancObj.height))
                    return anchoredObjects_1.push(ancObj);
            });
            anchoredObjects_1.sort(function (a, b) { return a.y - b.y; });
            var suitableAnchorObjectWidth = maxAvalibleWidth - getEstimatedTableWidth;
            xDiff = this.getXDiff(anchoredObjects_1, currentYOffset, lp, expectedTableHeight);
            for (var i = 0; i < anchoredObjects_1.length && xDiff > suitableAnchorObjectWidth; i++) {
                var ancObj = anchoredObjects_1[i];
                var nextYPos = this.getRelationByColumnY(lp, ancObj.y + ancObj.height) + this.empiricalOffset;
                if (maxYOffset < nextYPos) {
                    xDiff = 0;
                    break;
                }
                currentYOffset = nextYPos;
                xDiff = this.getXDiff(anchoredObjects_1, currentYOffset, lp, expectedTableHeight);
            }
        }
        return { xDiff: xDiff, yDiff: currentYOffset - yOffset };
    };
    TableInfo.prototype.getXDiff = function (anchoredObjects, yOffset, lp, expectedTableHeight) {
        var _this = this;
        var xDiff = 0;
        anchoredObjects.forEach(function (ancObj) {
            if (ancObj.isInText() && algorithms_1.IntervalAlgorithms.getIntersectionNonNullLength(new fixed_1.FixedInterval(_this.getRelationByColumnY(lp, ancObj.y), ancObj.height), new fixed_1.FixedInterval(yOffset, expectedTableHeight))) {
                xDiff = Math.max(xDiff, _this.getRelationByColumnX(lp, ancObj.right) + _this.empiricalOffset);
            }
        });
        return xDiff;
    };
    TableInfo.prototype.initLayoutInfo = function (yPos, parentCell, column) {
        this.currColumnHorizontalBorders = [];
        var logicInfo = this.currLayoutTableColumnInfo ?
            this.currLayoutTableColumnInfo.logicInfo :
            new layout_table_info_1.LayoutTableInfo(new table_properties_merger_1.TablePropertiesMergerShadingInfo()
                .getProperty(this.tblProps, this.tableStyle, table_base_structures_1.ConditionalTableStyleFormatting.WholeTable, this.defaultTblProps)
                .getActualColor(this.model.colorProvider), this.grid);
        this.currLayoutTableColumnInfo = new layout_table_info_1.LayoutTableColumnInfo(parentCell, logicInfo, new rectangle_1.Rectangle(this.xPositionStart, yPos, this.grid.commonWidth, 0));
        this.rows[this.minRowIndex].initLayoutInfo(true, column);
    };
    return TableInfo;
}());
exports.TableInfo = TableInfo;
