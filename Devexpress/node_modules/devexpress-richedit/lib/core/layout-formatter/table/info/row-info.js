"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_table_row_info_1 = require("../../../layout/table/layout-table-row-info");
var table_row_properties_merger_1 = require("../../../model/tables/properties-mergers/table-row-properties-merger");
var table_base_structures_1 = require("../../../model/tables/secondary-structures/table-base-structures");
var formatter_1 = require("../formatter");
var other_1 = require("../other");
var RowInfo = (function () {
    function RowInfo(tableInfo, rowIndex) {
        this.cells = [];
        this.tableInfo = tableInfo;
        this.rowIndex = rowIndex;
        this.howManyColumnsConsiderTableRow = 0;
        this.init();
    }
    Object.defineProperty(RowInfo.prototype, "row", {
        get: function () { return this.tableInfo.table.rows[this.rowIndex]; },
        enumerable: true,
        configurable: true
    });
    RowInfo.prototype.init = function () {
        var row = this.row;
        var cantSplit = new table_row_properties_merger_1.TableRowPropertiesMergerCantSplit().getProperty(row.properties, this.tableInfo.tableStyle, row.conditionalFormatting, this.tableInfo.defaultTblRowProps);
        var horizontalAlignment = new table_row_properties_merger_1.TableRowPropertiesMergerHorizontalAlignment(row.tablePropertiesException)
            .getProperty(row.properties, this.tableInfo.tableStyle, row.conditionalFormatting, this.tableInfo.defaultTblRowProps);
        this.heightInfo = new other_1.TableRowHeightInfo(cantSplit, row.height, horizontalAlignment);
        this.cellSpacing = new table_row_properties_merger_1.TableRowPropertiesMergerCellSpacing(this.tableInfo.model, this.tableInfo.table, row.tablePropertiesException)
            .getProperty(row.properties, this.tableInfo.tableStyle, row.conditionalFormatting, this.tableInfo.defaultTblRowProps)
            .asNumberNoPercentType(unit_converter_1.UnitConverter.twipsToPixels);
        this.topAndBottomMargins = new other_1.TopAndBottomMarginsForRow();
        for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue)
                continue;
            this.topAndBottomMargins.addCellTopMargin(formatter_1.Formatter.getCellMargin(cell.getActualTopCellMargin(this.tableInfo.model)));
            this.topAndBottomMargins.addCellBottomMargin(formatter_1.Formatter.getCellMargin(cell.getActualBottomCellMargin(this.tableInfo.model)));
        }
    };
    RowInfo.prototype.initLayoutInfo = function (isFirstRowInColumn, column) {
        var prevTblRow = list_1.ListUtils.last(this.tableInfo.currLayoutTableColumnInfo.tableRows);
        this.currLayoutTableRowInfo = new layout_table_row_info_1.LayoutTableRowInfo(this.tableInfo.currLayoutTableColumnInfo, new rectangle_1.Rectangle(this.tableInfo.xPositionStart, prevTblRow ? prevTblRow.bottom : this.tableInfo.currLayoutTableColumnInfo.y, 0, 0), this.tableInfo.minRowIndex);
        this.tableInfo.currRowHorizontalBorders = this.tableInfo.bordersHelper.getHorizontalBordersByRow(this.currLayoutTableRowInfo.rowIndex, this.tableInfo.isThisTableRowFirstInColumn || isFirstRowInColumn, true);
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cell.initLayoutInfo();
        }
        this.layoutRowIndexInColumn = column.rows.length;
    };
    RowInfo.prototype.clearLayoutInfo = function () {
        this.currLayoutTableRowInfo = null;
        this.tableInfo.currRowHorizontalBorders = null;
        for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cell.clearLayoutInfo();
        }
    };
    return RowInfo;
}());
exports.RowInfo = RowInfo;
