"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@devexpress/utils/lib/constants");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var layout_table_cell_info_1 = require("../../../layout/table/layout-table-cell-info");
var table_1 = require("../../../model/tables/main-structures/table");
var table_base_structures_1 = require("../../../model/tables/secondary-structures/table-base-structures");
var formatter_1 = require("../formatter");
var CellInfo = (function () {
    function CellInfo(cellIndex, rowInfo) {
        this._isStartOnThisColumn = false;
        this.cellIndex = cellIndex;
        this.rowInfo = rowInfo;
        this.actualCellInfo = this.getActuallCellInfo();
        this.init();
    }
    CellInfo.prototype.getContentModelPosition = function (maxNestedLevel) {
        var formatter = this.innerFormatter;
        return formatter && formatter.tableInfo.table.nestedLevel <= maxNestedLevel ?
            formatter.tableInfo.currCellInfo.getContentModelPosition(maxNestedLevel) : this.contentModelPosition;
    };
    Object.defineProperty(CellInfo.prototype, "xContentInterval", {
        get: function () {
            return this.actualCellInfo._xContentInterval;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "xInterval", {
        get: function () {
            return this.actualCellInfo._xInterval;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "currLayoutRowContentWidth", {
        get: function () {
            return this.innerFormatter ?
                this.innerFormatter.tableInfo.currCellInfo.currLayoutRowContentWidth :
                this.actualCellInfo.xContentInterval.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "nestedTableMaxWidth", {
        get: function () {
            return this.actualCellInfo.xContentInterval.length;
        },
        enumerable: true,
        configurable: true
    });
    CellInfo.prototype.getCurrLayoutRowOffset = function (considerInnerFormatter) {
        return (considerInnerFormatter && this.innerFormatter) ?
            this.innerFormatter.tableInfo.currCellInfo.getCurrLayoutRowOffset(true) :
            new point_1.Point(this.xContentInterval.start, this.currLayoutTableCellInfo.bottom);
    };
    Object.defineProperty(CellInfo.prototype, "isSomeLayoutRowsPlaced", {
        get: function () { return this.cell.startParagraphPosition.value != this.contentModelPosition; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "heightBeforeContent", {
        get: function () { return this.actualCellInfo._heightBeforeContent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "heightAfterContent", {
        get: function () { return this.actualCellInfo._heightAfterContent; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "tableInfo", {
        get: function () { return this.rowInfo.tableInfo; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "cell", {
        get: function () { return this.rowInfo.row.cells[this.cellIndex]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "isContendFullyPlaced", {
        get: function () { return this.actualCellInfo._contentModelPosition == this.actualCellInfo.cell.endParagrapPosition.value; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "currLayoutTableCellInfo", {
        get: function () { return this.actualCellInfo._currLayoutTableCellInfo; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "contentModelPosition", {
        get: function () { return this.actualCellInfo._contentModelPosition; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "actualTableIndexes", {
        get: function () {
            return new table_1.TablePositionIndexes(this.actualCellInfo.rowInfo.rowIndex, this.actualCellInfo.cellIndex);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "minBottomPosition", {
        get: function () { return this.actualCellInfo._minBottomPosition; },
        set: function (val) { this.actualCellInfo._minBottomPosition = Math.max(val, this.actualCellInfo._minBottomPosition); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "innerFormatter", {
        get: function () { return this.actualCellInfo._innerFormatter; },
        set: function (val) { this.actualCellInfo._innerFormatter = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "isStartOnThisColumn", {
        set: function (val) { this.actualCellInfo._isStartOnThisColumn = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "marginLeft", {
        get: function () { return this.actualCellInfo._marginLeft; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CellInfo.prototype, "marginRight", {
        get: function () { return this.actualCellInfo._marginRight; },
        enumerable: true,
        configurable: true
    });
    CellInfo.prototype.getActuallCellInfo = function () {
        if (this.cell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue)
            return this;
        var cellGridInfo = this.tableInfo.grid.tableCellInfos[this.rowInfo.rowIndex][this.cellIndex];
        return this.tableInfo.rows[cellGridInfo.getStartRowIndex()].cells[cellGridInfo.getCellIndex(0)];
    };
    CellInfo.prototype.cellFullyFormatted = function () {
        this.cellPartiallyFormatted(this.actualCellInfo.cell.endParagrapPosition.value);
    };
    CellInfo.prototype.cellPartiallyFormatted = function (endPos) {
        this.actualCellInfo._contentModelPosition = endPos;
    };
    CellInfo.prototype.undoContentModelPosition = function () {
        this.actualCellInfo._contentModelPosition = this.actualCellInfo._savedContentModelPosition;
    };
    CellInfo.prototype.storeContentModelPosition = function () {
        this.actualCellInfo._savedContentModelPosition = this.actualCellInfo._contentModelPosition;
    };
    CellInfo.prototype.init = function () {
        var cell = this.cell;
        if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue) {
            this._xInterval = null;
            this._xContentInterval = null;
            this._heightBeforeContent = null;
            this._heightAfterContent = null;
            this._marginLeft = null;
            this._marginRight = null;
            this._savedContentModelPosition = this._contentModelPosition = null;
            return;
        }
        var rowIndex = this.rowInfo.rowIndex;
        var isFirstCellInRow = this.cellIndex == 0;
        var isLastCellInRow = this.rowInfo.row.cells.length - 1 == this.cellIndex;
        var cellInfo = this.tableInfo.grid.tableCellInfos[rowIndex][this.cellIndex];
        var rowCellSpacing = this.rowInfo.cellSpacing;
        this._marginLeft = formatter_1.Formatter.getCellMargin(cell.getActualLeftCellMargin(this.tableInfo.model));
        this._marginRight = formatter_1.Formatter.getCellMargin(cell.getActualRightCellMargin(this.tableInfo.model));
        var cellStartXPosition = this.tableInfo.xPositionStart +
            this.tableInfo.grid.columns.positions[cellInfo.getGridCellIndex()];
        var cellEndXPosition = this.tableInfo.xPositionStart +
            this.tableInfo.grid.columns.positions[cellInfo.getGridCellIndex() + cell.columnSpan];
        var verticalBordersCurrCell = this.tableInfo.verticalBorders[rowIndex][this.cellIndex];
        var brdCellLeft = verticalBordersCurrCell[rowCellSpacing > 0 && isFirstCellInRow ? 1 : 0];
        var cellStartContentXPosition = Math.max(cellStartXPosition + this._marginLeft +
            rowCellSpacing * (isFirstCellInRow ? 2 : 1), brdCellLeft.borderInfo ? this.tableInfo.xPositionStart + brdCellLeft.xPos + brdCellLeft.borderInfo.width : -Number.MAX_VALUE);
        var brdCellRight;
        if (rowCellSpacing > 0 || isLastCellInRow)
            brdCellRight = verticalBordersCurrCell[verticalBordersCurrCell.length - (rowCellSpacing > 0 && isLastCellInRow ? 2 : 1)];
        else
            brdCellRight = this.tableInfo.verticalBorders[rowIndex][this.cellIndex + 1][0];
        var cellEndContentXPosition = Math.min(cellEndXPosition -
            (this._marginRight + rowCellSpacing * (isLastCellInRow ? 2 : 1)), brdCellRight.borderInfo ? this.tableInfo.xPositionStart + brdCellRight.xPos : constants_1.Constants.MAX_SAFE_INTEGER);
        this._xInterval = fixed_1.FixedInterval.fromPositions(cellStartXPosition, cellEndXPosition);
        this._xContentInterval = fixed_1.FixedInterval.fromPositions(cellStartContentXPosition, cellEndContentXPosition);
        this._savedContentModelPosition = this._contentModelPosition = cell.startParagraphPosition.value;
    };
    CellInfo.prototype.initLayoutInfo = function () {
        var isFirstRow = this.tableInfo.currRowInfo.rowIndex == 0;
        var isLastRow = this.tableInfo.currRowInfo.rowIndex == this.tableInfo.rows.length - 1;
        this.actualCellInfo._minBottomPosition = 0;
        var rowCellSpacing = this.rowInfo.cellSpacing;
        var horBrdLastIndex = this.tableInfo.currRowHorizontalBorders.length - 1;
        var borderBeforeWidth = this.tableInfo.currRowHorizontalBorders[0].maxWidth;
        var borderAfterWidth = this.tableInfo.currRowHorizontalBorders[horBrdLastIndex].maxWidth;
        this.actualCellInfo._heightBeforeContent = (isFirstRow ? borderBeforeWidth : borderBeforeWidth / 2) +
            this.rowInfo.topAndBottomMargins.topMargin;
        this.actualCellInfo._heightAfterContent = (isLastRow ? borderAfterWidth : borderAfterWidth / 2) +
            this.rowInfo.topAndBottomMargins.bottomMargin;
        if (rowCellSpacing > 0) {
            this.actualCellInfo._heightBeforeContent +=
                rowCellSpacing * (this.tableInfo.isThisColumnFirstInTable ? 2 : 1) +
                    (this.tableInfo.isThisTableRowFirstInColumn ? this.tableInfo.currRowHorizontalBorders[1].maxWidth : 0);
            this.actualCellInfo._heightAfterContent +=
                this.tableInfo.currRowHorizontalBorders[horBrdLastIndex - 1].maxWidth +
                    (this.tableInfo.isCurrRowLastInTable ? 2 : 1) * rowCellSpacing;
        }
        this.actualCellInfo._currLayoutTableCellInfo = new layout_table_cell_info_1.LayoutTableCellInfo(this.rowInfo.currLayoutTableRowInfo, new rectangle_1.Rectangle(this.xInterval.start, this.tableInfo.currRowInfo.currLayoutTableRowInfo.y, this.xInterval.length, this.actualCellInfo._heightBeforeContent), this.tableInfo.grid.tableCellInfos[this.rowInfo.rowIndex][this.cellIndex].getGridCellIndex(), this.xContentInterval.length);
        if (this.actualCellInfo._isStartOnThisColumn)
            this.currLayoutTableCellInfo.boundFlags.set(layout_table_cell_info_1.TableCellBoundFlags.StartOnThisColumn, false);
    };
    CellInfo.prototype.clearLayoutInfo = function () {
        this.actualCellInfo._heightAfterContent = null;
        this.actualCellInfo._heightBeforeContent = null;
        this.actualCellInfo._currLayoutTableCellInfo = null;
    };
    return CellInfo;
}());
exports.CellInfo = CellInfo;
