"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var table_1 = require("../../../model/tables/main-structures/table");
var CellOrderHelper = (function () {
    function CellOrderHelper(tableInfo) {
        this.tableInfo = tableInfo;
    }
    CellOrderHelper.prototype.getFirstNotFullyRenderedCell = function (startRowIndex) {
        var _this = this;
        var pos = list_1.ListUtils.unsafeAnyOf(this.tableInfo.rows, function (_, rowInd) {
            return _this.getNextPositionOnRow(rowInd, 0, false, true, function () { return true; });
        }, startRowIndex);
        if (list_1.ListUtils.allOf(this.tableInfo.table.rows[startRowIndex].cells, function (_cell, cellIndex) {
            var cellInfo = _this.tableInfo.rows[startRowIndex].cells[cellIndex];
            return cellInfo.isContendFullyPlaced ||
                startRowIndex < _this.tableInfo.grid.tableCellInfos[startRowIndex][cellIndex].getEndRowIndex() - 1 &&
                    cellInfo.isSomeLayoutRowsPlaced;
        }))
            return this.getFirstNotFullyRenderedCell(startRowIndex + 1);
        return pos;
    };
    CellOrderHelper.prototype.getNextPos = function (currTblPos) {
        var _this = this;
        var info = this.tableInfo.grid.tableCellInfos[currTblPos.rowIndex][currTblPos.cellIndex];
        var nextGridCellIndex = info.getGridCellIndex() + info.getColumnSpan(this.tableInfo.grid.table);
        var ind = this.getNextPositionOnRow(currTblPos.rowIndex, nextGridCellIndex, false, false, function () { return true; });
        if (ind)
            return ind;
        if (this.getNextPositionOnRow(currTblPos.rowIndex, 0, true, true, function (info) { return info.getEndRowIndex() - 1 == currTblPos.rowIndex; }))
            return null;
        var res = list_1.ListUtils.unsafeAnyOf(this.tableInfo.rows, function (_, rowInd) { return _this.getNextPositionOnRow(rowInd, 0, false, false, function (info) { return info.getStartRowIndex() == rowInd; }); }, currTblPos.rowIndex + 1);
        if (res && res.rowIndex > currTblPos.rowIndex + 1) {
            var prevRowIndex = res.rowIndex - 1;
            var cells = this.tableInfo.rows[prevRowIndex].cells;
            var cantMoveToNextRow = false;
            for (var cellIndex = 0, cellInfo = void 0; cellInfo = cells[cellIndex]; cellIndex++) {
                var cellGridInfo = this.tableInfo.grid.tableCellInfos[prevRowIndex][cellIndex];
                if (cellGridInfo.getLastRowIndex() > prevRowIndex) {
                    cantMoveToNextRow = false;
                    break;
                }
                else if (cellGridInfo.getLastRowIndex() == prevRowIndex) {
                    if (!cellInfo.isContendFullyPlaced)
                        cantMoveToNextRow = true;
                }
            }
            if (cantMoveToNextRow)
                return null;
        }
        return res;
    };
    CellOrderHelper.prototype.isTableFullyFormatted = function () {
        return !this.getNextPositionOnRow(this.tableInfo.rows.length - 1, 0, true, true, function () { return true; });
    };
    CellOrderHelper.prototype.getNextPositionOnRow = function (rowIndex, startGridCellIndex, isConsiderGridBeforeAndAfter, isSkipConsiderRenderInThisColumn, handleCell) {
        var numCells = this.tableInfo.grid.columns.positions.length - 1;
        var cellInfos = this.tableInfo.grid.tableCellGridInfos[rowIndex];
        var table = this.tableInfo.grid.table;
        for (var cellGridIndex = startGridCellIndex; cellGridIndex < numCells;) {
            var info = cellInfos[cellGridIndex];
            if (info) {
                if (handleCell(info)) {
                    if (!this.isCellContendFullyPlaced(info) && (isSkipConsiderRenderInThisColumn || !this.cellRenderedOnThisColumn(info)))
                        return new table_1.TablePositionIndexes(rowIndex, info.getCellIndex(rowIndex - info.getStartRowIndex()));
                }
                cellGridIndex += info.getColumnSpan(table);
            }
            else {
                if (isConsiderGridBeforeAndAfter) {
                    var rowGridInfo = this.tableInfo.grid.tableCellGridInfos[rowIndex - 1];
                    if (rowGridInfo) {
                        var elem = rowGridInfo[cellGridIndex];
                        if (elem && !this.isCellContendFullyPlaced(elem) && (isSkipConsiderRenderInThisColumn || !this.cellRenderedOnThisColumn(info)))
                            return new table_1.TablePositionIndexes(rowIndex - 1, elem.getCellIndex(rowIndex - 1 - elem.getStartRowIndex()));
                    }
                }
                cellGridIndex++;
            }
        }
        return null;
    };
    CellOrderHelper.prototype.isCellContendFullyPlaced = function (info) {
        var rowIndex = info.getStartRowIndex();
        var cellIndex = info.getCellIndex(0);
        var cellInfo = this.tableInfo.rows[rowIndex].cells[cellIndex];
        return cellInfo.isContendFullyPlaced;
    };
    CellOrderHelper.prototype.cellRenderedOnThisColumn = function (info) {
        var cellGridIndex = info.getGridCellIndex();
        var minRowIndex = info.getStartRowIndex();
        var rows = this.tableInfo.currLayoutTableColumnInfo.tableRows;
        for (var layoutRowIndex = rows.length - 1, row = void 0; (row = rows[layoutRowIndex]) && row.rowIndex >= minRowIndex; layoutRowIndex--)
            if (row.getCellIndexByExactlyCellGridIndex(cellGridIndex) >= 0)
                return true;
        return false;
    };
    return CellOrderHelper;
}());
exports.CellOrderHelper = CellOrderHelper;
