"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var layout_table_cell_info_1 = require("../../layout/table/layout-table-cell-info");
var table_cell_properties_merger_1 = require("../../model/tables/properties-mergers/table-cell-properties-merger");
var table_base_structures_1 = require("../../model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../model/tables/secondary-structures/table-units");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var background_info_creator_1 = require("./background-info-creator");
var border_merger_1 = require("./borders/border-merger");
var borders_creator_1 = require("./borders/borders-creator");
var horizontal_cursor_borders_helper_1 = require("./horizontal-cursor-borders-helper");
var table_info_1 = require("./info/table-info");
var size_compressor_1 = require("./size-compressor");
var table_alignment_applier_1 = require("./table-alignment-applier");
var AddRowToTableResult;
(function (AddRowToTableResult) {
    AddRowToTableResult[AddRowToTableResult["None"] = 0] = "None";
    AddRowToTableResult[AddRowToTableResult["RowAdded"] = 1] = "RowAdded";
    AddRowToTableResult[AddRowToTableResult["TableFinished"] = 2] = "TableFinished";
    AddRowToTableResult[AddRowToTableResult["GoToNextColumn"] = 4] = "GoToNextColumn";
})(AddRowToTableResult = exports.AddRowToTableResult || (exports.AddRowToTableResult = {}));
var Formatter = (function () {
    function Formatter(rowFormatter, tablePositions, column, tableMaxWidth, offset, parentCell, index, avaliableHeight, parentFormatter) {
        this.isFullyFormatted = false;
        this.parentFormatter = parentFormatter;
        var tblPos = tablePositions[index];
        if (tblPos.rowIndex != 0 || tblPos.cellIndex != 0)
            throw new Error(errors_1.Errors.InternalException);
        this.tableInfo = new table_info_1.TableInfo(rowFormatter, tblPos.table, tableMaxWidth, offset.x, offset.y);
        this.initColumn(column, parentCell, avaliableHeight);
        if (++index < tablePositions.length)
            this.createInnerFormatter(tablePositions);
    }
    Object.defineProperty(Formatter.prototype, "needAddSomeLayoutRows", {
        get: function () {
            return this.columnWasEmpty &&
                this.noReadyTableRows &&
                this.tableInfo.currCellInfo.currLayoutTableCellInfo.isEmpty() || !this.tableInfo.rowFormatter.manager.activeFormatter.subDocument.isMain();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "noReadyTableRows", {
        get: function () {
            var formatter = this;
            do {
                if (formatter.tableInfo.currLayoutTableColumnInfo.tableRows.length)
                    return false;
            } while (formatter = formatter.parentFormatter);
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "columnWasEmpty", {
        get: function () { return this.parentFormatter ? this.parentFormatter.columnWasEmpty : this._columnWasEmpty; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "isCurrTableCellFirstInRow", {
        get: function () { return this.position.cellIndex == 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "isCurrTableRowIsFirstInTable", {
        get: function () { return this.position.rowIndex == 0; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "currLayoutRowOffset", {
        get: function () { return this.tableInfo.currCellInfo.getCurrLayoutRowOffset(true); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "currLayoutRowContentWidth", {
        get: function () { return this.tableInfo.currCellInfo.currLayoutRowContentWidth; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "nestedTableMaxWidth", {
        get: function () { return this.tableInfo.currCellInfo.nestedTableMaxWidth; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "nestedLevel", {
        get: function () { return this.tableInfo.table.nestedLevel; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "isCurrLayoutRowIsFirstInCell", {
        get: function () {
            return this.tableInfo.currRowInfo.cells[this.position.cellIndex].currLayoutTableCellInfo.layoutRows.length == 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "actualFormatter", {
        get: function () {
            var formatter = this.tableInfo.currCellInfo.innerFormatter;
            return formatter ? formatter.actualFormatter : this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "position", {
        get: function () { return this.tableInfo.position; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Formatter.prototype, "grid", {
        get: function () { return this.tableInfo.grid; },
        enumerable: true,
        configurable: true
    });
    Formatter.prototype.createInnerFormatter = function (tablePositions) {
        var avaliableHeight = this.getAvaliableSpaceForCellContent();
        var index = this.nestedLevel + 1;
        this.tableInfo.currCellInfo.innerFormatter = new Formatter(this.tableInfo.rowFormatter, tablePositions, this.column, this.nestedTableMaxWidth, this.currLayoutRowOffset, this.tableInfo.currCellInfo.currLayoutTableCellInfo, index, avaliableHeight, this);
    };
    Formatter.prototype.createNextCellFormatter = function () {
        var tblPoss = this.tableInfo.rowFormatter.getNextBoxWrapInfo().info.tablePosition;
        if (tblPoss && tblPoss.length > this.nestedLevel + 1 && !this.tableInfo.currCellInfo.innerFormatter)
            this.createInnerFormatter(tblPoss);
    };
    Formatter.prototype.resetPosition = function (newPos, forceEndAndStartRow, maxNestedLevel) {
        if (maxNestedLevel === void 0) { maxNestedLevel = constants_1.Constants.MAX_SAFE_INTEGER; }
        log_1.Log.print(log_source_1.LogSource.TableFormatter, "resetPosition", function () { return "rowIndex: " + newPos.rowIndex + ", cellIndex: " + newPos.cellIndex + ", forceEndAndStartRow: " + forceEndAndStartRow; });
        var initNewRow = forceEndAndStartRow || newPos.rowIndex > this.tableInfo.minRowIndex;
        if (initNewRow) {
            this.finishRow();
            this.tableInfo.minRowIndex = Math.max(newPos.rowIndex, this.tableInfo.minRowIndex);
        }
        var cellGridInfo = this.tableInfo.grid.tableCellInfos[newPos.rowIndex][newPos.cellIndex];
        var cellIndex = cellGridInfo.getCellIndex(this.tableInfo.minRowIndex - cellGridInfo.getStartRowIndex());
        this.position.initIndexes(this.tableInfo.minRowIndex, cellIndex).init();
        this.tableInfo.rowFormatter.setPosition(this.tableInfo.currCellInfo.getContentModelPosition(maxNestedLevel), false, false);
        if (initNewRow)
            this.tableInfo.currRowInfo.initLayoutInfo(forceEndAndStartRow, this.column);
    };
    Formatter.prototype.initColumn = function (column, parentCell, avaliableHeight) {
        this.columnStart(column, false, this.tableInfo.yPositionStart, parentCell, avaliableHeight);
    };
    Formatter.prototype.columnStart = function (column, weNeedToGoDeeper, yPos, parentCell, avaliableHeight) {
        if (weNeedToGoDeeper === void 0) { weNeedToGoDeeper = true; }
        if (yPos === void 0) { yPos = 0; }
        if (parentCell === void 0) { parentCell = null; }
        if (avaliableHeight === void 0) { avaliableHeight = null; }
        this.column = column;
        this._columnWasEmpty = !this.column.rows.length;
        this.tableInfo.initLayoutInfo(yPos, parentCell, this.column);
        this.tableInfo.avaliableHeight = avaliableHeight === null ?
            this.column.height - this.tableInfo.currLayoutTableColumnInfo.y :
            avaliableHeight;
        if (weNeedToGoDeeper)
            for (var _i = 0, _a = this.tableInfo.rows; _i < _a.length; _i++) {
                var rowInfo = _a[_i];
                for (var _b = 0, _c = rowInfo.cells; _b < _c.length; _b++) {
                    var cellInfo = _c[_b];
                    if (cellInfo.innerFormatter)
                        cellInfo.innerFormatter.columnStart(column, true, cellInfo.getCurrLayoutRowOffset(false).y, cellInfo.currLayoutTableCellInfo, this.getAvaliableSpaceForCellContent(cellInfo));
                }
            }
    };
    Formatter.prototype.findNextCell = function (result, info) {
        var wrap = this.tableInfo.rowFormatter.getNextBoxWrapInfo();
        var tblPoss;
        if (!wrap) {
            if (!this.tableInfo.rowFormatter.iterator.allBoxesGiven())
                throw new Error(errors_1.Errors.InternalException);
            tblPoss = null;
        }
        else
            tblPoss = wrap.info.tablePosition;
        var currTblPos = tblPoss ? tblPoss[this.nestedLevel] : null;
        if (!currTblPos ||
            !(this.tableInfo.currCellInfo.actualTableIndexes.equals(currTblPos) && this.tableInfo.table.index == currTblPos.table.index)) {
            this.tableInfo.currCellInfo.cellFullyFormatted();
            this.finishCell();
            this.setNextCell(result);
        }
        wrap = this.tableInfo.rowFormatter.getNextBoxWrapInfo();
        tblPoss = wrap ? wrap.info.tablePosition : null;
        if (tblPoss && !result.get(AddRowToTableResult.TableFinished) && !this.tableInfo.currCellInfo.innerFormatter &&
            (tblPoss.length > info.tablePosition.length ||
                tblPoss.length == info.tablePosition.length && list_1.ListUtils.last(tblPoss).table.index != list_1.ListUtils.last(info.tablePosition).table.index))
            this.createInnerFormatter(tblPoss);
    };
    Formatter.prototype.isLayoutRowIsLastOnCell = function () {
        var wrap = this.tableInfo.rowFormatter.getNextBoxWrapInfo();
        var tblPoss;
        if (!wrap) {
            if (!this.tableInfo.rowFormatter.iterator.allBoxesGiven())
                return true;
            tblPoss = null;
        }
        else
            tblPoss = wrap.info.tablePosition;
        var nextTblPos = tblPoss ? tblPoss[this.nestedLevel] : null;
        return !nextTblPos || !this.tableInfo.currCellInfo.actualTableIndexes.equals(nextTblPos);
    };
    Formatter.prototype.resetCaseInTextAnchorObject = function (info, obj) {
        if (this.nestedLevel < info.tablePosition.length - 1)
            return this.tableInfo.currCellInfo.innerFormatter.resetCaseInTextAnchorObject(info, obj);
        else {
            var isNeedGoToNextColumn = false;
            if (this.tableInfo.rowFormatter.manager.activeFormatter.subDocument.isMain()) {
                var lp = this.tableInfo.rowFormatter.manager.activeFormatter.layoutPosition;
                isNeedGoToNextColumn = obj.bottom > lp.pageArea.y + lp.column.y + this.tableInfo.currLayoutTableColumnInfo.y +
                    this.tableInfo.avaliableHeight - this.tableInfo.currCellInfo.heightAfterContent;
            }
            this.resetFromRow(new flag_1.Flag());
            this.tableInfo.currCellInfo.minBottomPosition = obj.bottom;
            return isNeedGoToNextColumn;
        }
    };
    Formatter.prototype.applyResultOfTopLevelFormatters = function (result, info, lowLevelFormatters) {
        if (lowLevelFormatters === void 0) { lowLevelFormatters = []; }
        if (this.nestedLevel < info.tablePosition.length - 1) {
            lowLevelFormatters.push(this);
            this.tableInfo.currCellInfo.innerFormatter.applyResultOfTopLevelFormatters(result, info, lowLevelFormatters);
        }
        else
            for (var formatter = void 0; formatter = lowLevelFormatters.pop();)
                formatter.processResultOfTopLevelFormatter(result, info);
    };
    Formatter.prototype.processResultOfTopLevelFormatter = function (result, info) {
        var cellInfo = this.tableInfo.currCellInfo;
        if (result.anyOf(AddRowToTableResult.TableFinished, AddRowToTableResult.GoToNextColumn)) {
            var innerLayoutTblColInfo = cellInfo.innerFormatter.tableInfo.currLayoutTableColumnInfo;
            if (!innerLayoutTblColInfo.isEmpty()) {
                if (!result.get(AddRowToTableResult.TableFinished))
                    cellInfo.innerFormatter.columnEnd();
                cellInfo.currLayoutTableCellInfo.internalTables[cellInfo.currLayoutTableCellInfo.layoutRows.length] = innerLayoutTblColInfo;
                cellInfo.currLayoutTableCellInfo.height += cellInfo.innerFormatter.tableInfo.currLayoutTableColumnInfo.height;
            }
            if (result.get(AddRowToTableResult.TableFinished))
                cellInfo.innerFormatter = null;
            else
                this.tableInfo.rowFormatter.iterator.setNextValidWrapPosition(cellInfo.innerFormatter.tableInfo.table.getEndPosition(), info.tablePosition.length);
            result.set(AddRowToTableResult.TableFinished, false);
            result.set(AddRowToTableResult.GoToNextColumn, false);
            this.findNextCell(result, info);
        }
    };
    Formatter.prototype.getRowHeight = function (rowInfo, rowHeight) {
        var preferredHeight = rowInfo.heightInfo.preferredHeightValue;
        switch (rowInfo.heightInfo.preferredHeightType) {
            case table_units_1.TableHeightUnitType.Exact:
                return preferredHeight;
            case table_units_1.TableHeightUnitType.Minimum:
                return Math.max(preferredHeight, rowHeight);
            default:
                return rowHeight;
        }
    };
    Formatter.prototype.addLayoutRow = function (rowResult, info) {
        var cellInfo = this.tableInfo.currCellInfo;
        if (this.nestedLevel < info.tablePosition.length - 1)
            return cellInfo.innerFormatter.addLayoutRow(rowResult, info);
        var result = new flag_1.Flag(AddRowToTableResult.None);
        var avalHeight = this.getAvaliableSpaceForCellContent();
        var row = rowResult.row;
        var currCellInfo = cellInfo.currLayoutTableCellInfo;
        if (currCellInfo.internalTables[currCellInfo.layoutRows.length] &&
            this.isLayoutRowIsLastOnCell() && row.boxes.length == 1 && row.boxes[0].getType() == layout_box_1.LayoutBoxType.ParagraphMark)
            row.height = 0;
        var rowHeight = cellInfo.cellIndex == 0 && currCellInfo.layoutRows.length == 0
            ? this.getRowHeight(cellInfo.rowInfo, row.height) : row.height;
        if (!cellInfo.innerFormatter && (rowHeight <= avalHeight || this.needAddSomeLayoutRows)) {
            row.y = Math.max(row.y, currCellInfo.bottom);
            row.tableCellInfo = currCellInfo;
            currCellInfo.layoutRows.push(row);
            currCellInfo.height = row.bottom - currCellInfo.y;
            result.set(AddRowToTableResult.RowAdded, true);
            this.tableInfo.currRowInfo.layoutRowIndexInColumn =
                Math.min(this.tableInfo.currRowInfo.layoutRowIndexInColumn, this.column.rows.length);
            this.tableInfo.currCellInfo.cellPartiallyFormatted(rowResult.rowStartPos + row.getLastBoxEndPositionInRow());
        }
        else {
            this.cantPlaceRow(result, rowResult.rowStartPos);
        }
        return result;
    };
    Formatter.prototype.cantPlaceRow = function (result, cellNewStartContentPos) {
        if (this.tableInfo.currCellInfo.currLayoutTableCellInfo.isEmpty()) {
            this.resetFromRow(result);
        }
        else {
            this.tableInfo.currCellInfo.cellPartiallyFormatted(cellNewStartContentPos);
            this.finishCell();
            this.setNextCell(result);
        }
    };
    Formatter.prototype.resetFromRow = function (result) {
        this.cancelPlaceRow();
        var curTablePositions = this.tableInfo.rowFormatter.iterator.getWrap(false).info.tablePosition;
        var newPos = this.tableInfo.cellOrderHelper.getFirstNotFullyRenderedCell(this.tableInfo.minRowIndex);
        this.resetPosition(newPos, true, curTablePositions ? curTablePositions.length - 1 : undefined);
        this.tableInfo.currRowInfo.initLayoutInfo(true, this.column);
        var tablePositions = this.tableInfo.rowFormatter.iterator.getWrap(false).info.tablePosition;
        if (this.nestedLevel + 1 < tablePositions.length)
            this.createInnerFormatter(tablePositions);
        result.set(AddRowToTableResult.GoToNextColumn, true);
    };
    Formatter.prototype.setNextCell = function (result) {
        var newPos = this.tableInfo.cellOrderHelper.getNextPos(this.tableInfo.currTablePositionIndexes);
        if (!newPos) {
            if (this.tableInfo.cellOrderHelper.isTableFullyFormatted()) {
                this.finishRow();
                this.finishTable();
                result.set(AddRowToTableResult.TableFinished, true);
                return;
            }
            else {
                result.set(AddRowToTableResult.GoToNextColumn, true);
                var newPos_1 = this.tableInfo.cellOrderHelper.getFirstNotFullyRenderedCell(this.tableInfo.minRowIndex);
                this.resetPosition(newPos_1, true);
            }
        }
        else
            this.resetPosition(newPos, false);
        this.createNextCellFormatter();
    };
    Formatter.prototype.finishCell = function () {
        var cellInfo = this.tableInfo.currCellInfo;
        var layTblCellInfo = cellInfo.currLayoutTableCellInfo;
        if (!layTblCellInfo || layTblCellInfo.isEmpty())
            return;
        if (!cellInfo.isContendFullyPlaced)
            layTblCellInfo.boundFlags.set(layout_table_cell_info_1.TableCellBoundFlags.EndOnThisColumn, false);
        this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells.push(layTblCellInfo);
        layTblCellInfo.height += cellInfo.heightAfterContent;
        var lp = this.tableInfo.rowFormatter.manager.activeFormatter.layoutPosition;
        var minHeight = cellInfo.minBottomPosition - (lp.pageArea.y + lp.column.y + layTblCellInfo.y);
        layTblCellInfo.height = Math.max(layTblCellInfo.height, minHeight);
    };
    Formatter.prototype.cancelPlaceRow = function () {
        this.column.rows.splice(this.tableInfo.currRowInfo.layoutRowIndexInColumn);
        this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells = [];
        for (var _i = 0, _a = this.tableInfo.currRowInfo.cells; _i < _a.length; _i++) {
            var cell = _a[_i];
            cell.undoContentModelPosition();
        }
    };
    Formatter.prototype.finishRow = function () {
        var rowInfo = this.tableInfo.currRowInfo;
        if (rowInfo.currLayoutTableRowInfo.rowCells.length) {
            rowInfo.currLayoutTableRowInfo.rowCells.sort(function (cellA, cellB) { return cellA.cellGridIndex - cellB.cellGridIndex; });
            this.applyBottomHorizontalBordersChangesForPrevRow();
            this.tableInfo.currColumnHorizontalBorders.push(this.tableInfo.currRowHorizontalBorders);
            this.tableInfo.currLayoutTableColumnInfo.tableRows.push(rowInfo.currLayoutTableRowInfo);
            rowInfo.howManyColumnsConsiderTableRow++;
            this.setRowHeight();
            this.extendCellHeightToRowHeight();
            for (var _i = 0, _a = rowInfo.cells; _i < _a.length; _i++) {
                var cell = _a[_i];
                if (!cell.isContendFullyPlaced)
                    cell.isStartOnThisColumn = true;
                cell.storeContentModelPosition();
            }
            this.tableInfo.lastRowBottomBoundPosition = rowInfo.currLayoutTableRowInfo.bottom;
        }
        rowInfo.clearLayoutInfo();
    };
    Formatter.prototype.columnEnd = function () {
        if (!this.tableInfo.currLayoutTableColumnInfo.tableRows.length)
            return;
        this.setCellsHeight();
        var currColumnVerticalBorders = [];
        var currColumnVerticalCursorBorders = [];
        borders_creator_1.BorderCreator.setColumnHorizontalBorders(this.tableInfo.currLayoutTableColumnInfo, this.tableInfo.rows, this.tableInfo.currColumnHorizontalBorders, this.tableInfo.isThisColumnFirstInTable);
        borders_creator_1.BorderCreator.setColumnVerticalBorders(this.tableInfo.currLayoutTableColumnInfo, this.grid, this.tableInfo.rows, this.tableInfo.isThisColumnFirstInTable, this.tableInfo.currColumnHorizontalBorders, currColumnVerticalBorders, this.tableInfo.verticalBorders, true);
        borders_creator_1.BorderCreator.setColumnVerticalBorders(this.tableInfo.currLayoutTableColumnInfo, this.grid, this.tableInfo.rows, this.tableInfo.isThisColumnFirstInTable, this.tableInfo.currColumnHorizontalBorders, currColumnVerticalCursorBorders, this.tableInfo.verticalCursorBorders, false);
        this.tableInfo.currLayoutTableColumnInfo.calculateFlags();
        this.column.tablesInfo.push(this.tableInfo.currLayoutTableColumnInfo);
        this.tableInfo.currLayoutTableColumnInfo.height = this.tableInfo.lastRowBottomBoundPosition - this.tableInfo.currLayoutTableColumnInfo.y;
        this.setRowsVerticalBounds(currColumnVerticalBorders);
        background_info_creator_1.TableBackgroundInfoCreator.createBackgroundInfos(this.tableInfo.rowFormatter.manager.model.colorProvider, this.tableInfo.defaultTblCellProps, this.grid, this.tableInfo.currLayoutTableColumnInfo, currColumnVerticalBorders, this.tableInfo.currColumnHorizontalBorders, this.tableInfo.rows);
        this.tableInfo.currLayoutTableColumnInfo.horizontalBorders =
            border_merger_1.BorderMerger.getFinalReducedHorizontalBorders(this.tableInfo.currColumnHorizontalBorders);
        this.tableInfo.currLayoutTableColumnInfo.horizontalCursorBorders =
            horizontal_cursor_borders_helper_1.TableHorizontalCursorBordersHelper.getHorizontalCursorBorders(this.tableInfo.currLayoutTableColumnInfo);
        this.tableInfo.currLayoutTableColumnInfo.verticalBorders =
            border_merger_1.BorderMerger.getFinalReducedVerticalBorders(currColumnVerticalBorders);
        this.tableInfo.currLayoutTableColumnInfo.verticalCursorBorders =
            border_merger_1.BorderMerger.getFinalReducedVerticalBorders(currColumnVerticalCursorBorders);
        table_alignment_applier_1.TableAlignmentApplier.applyHorizontalAlignment(this.tableInfo.currLayoutTableColumnInfo, this.tableInfo.maxWidth);
        table_alignment_applier_1.TableAlignmentApplier.applyCellsVerticalAlignment(this.tableInfo.defaultTblCellProps, this.grid, this.tableInfo.currLayoutTableColumnInfo, this.tableInfo.rows);
        if (this.position.table.nestedLevel == 0)
            for (var _i = 0, _a = this.tableInfo.currLayoutTableColumnInfo.tableRows; _i < _a.length; _i++) {
                var row = _a[_i];
                size_compressor_1.LayoutTableSizeCompressor.tableRowContentCompress(row);
            }
        this.tableInfo.isThisColumnFirstInTable = false;
    };
    Formatter.prototype.finishTable = function () {
        this.columnEnd();
        this.tableInfo.rowFormatter.setPosition(this.tableInfo.table.getEndPosition(), false, false);
        this.isFullyFormatted = true;
    };
    Formatter.prototype.getAvaliableSpaceForCellContent = function (cellInfo) {
        if (cellInfo === void 0) { cellInfo = this.tableInfo.currCellInfo; }
        return this.tableInfo.currLayoutTableColumnInfo.y + this.tableInfo.avaliableHeight -
            cellInfo.currLayoutTableCellInfo.bottom - cellInfo.heightAfterContent;
    };
    Formatter.prototype.setCellsHeight = function () {
        var layoutTableRows = this.tableInfo.currLayoutTableColumnInfo.tableRows;
        for (var layoutRowIndex = 0, layTblRow = void 0; layTblRow = layoutTableRows[layoutRowIndex]; layoutRowIndex++) {
            var currentTableRowIndex = layTblRow.rowIndex;
            var currTableRowGridInfo = this.grid.tableCellInfos[currentTableRowIndex];
            var cells = this.grid.table.rows[currentTableRowIndex].cells;
            for (var cellIndex = 0, cell = void 0; cell = cells[cellIndex]; cellIndex++) {
                if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue)
                    continue;
                var currTableCellGridInfo = currTableRowGridInfo[cellIndex];
                var cellGridIndex = currTableCellGridInfo.getGridCellIndex();
                var layTblCell = list_1.ListUtils.elementBy(layTblRow.rowCells, function (cell) { return cell.cellGridIndex == cellGridIndex; });
                if (layTblCell)
                    layTblCell.height = Formatter.getCellHeight(layoutTableRows, layoutRowIndex, currTableCellGridInfo.getEndRowIndex());
            }
        }
    };
    Formatter.getCellHeight = function (layTblRows, startRowIndex, endModelRowIndex) {
        var height = 0;
        for (var layTblRow = void 0; (layTblRow = layTblRows[startRowIndex]) && layTblRow.rowIndex < endModelRowIndex; startRowIndex++)
            height += layTblRow.height;
        return height;
    };
    Formatter.prototype.setRowsVerticalBounds = function (currColumnVerticalBorders) {
        var tableX = this.tableInfo.currLayoutTableColumnInfo.x;
        var rows = this.tableInfo.currLayoutTableColumnInfo.tableRows;
        for (var rowIndex = 0, row = void 0; row = rows[rowIndex]; rowIndex++) {
            var vertRowBrds = currColumnVerticalBorders[rowIndex];
            var lastBrdInRow = list_1.ListUtils.last(list_1.ListUtils.last(vertRowBrds));
            var xPosForFirstBorder = vertRowBrds[0][0].xPos;
            row.x = tableX + xPosForFirstBorder;
            row.width = lastBrdInRow.xPos - xPosForFirstBorder;
        }
    };
    Formatter.setRowHeightInternal = function (tableLayoutRow) {
        tableLayoutRow.height = list_1.ListUtils.accumulate(tableLayoutRow.rowCells, 0, function (acc, cell) { return Math.max(acc, cell.height); });
    };
    Formatter.prototype.setRowHeightWhenRowBelongsToManyColumns = function () {
        var rowIndex = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowIndex;
        if (this.grid.table.rows.length - 1 == rowIndex)
            return Formatter.setRowHeightInternal(this.tableInfo.currRowInfo.currLayoutTableRowInfo);
        var cellGridIndexLongCells = [];
        var height = 0;
        var tableCellGridInfos = this.grid.tableCellGridInfos;
        for (var _i = 0, _a = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells; _i < _a.length; _i++) {
            var layoutCell = _a[_i];
            var cellGridIndex = layoutCell.cellGridIndex;
            if (tableCellGridInfos[rowIndex][cellGridIndex] === tableCellGridInfos[rowIndex + 1][cellGridIndex])
                cellGridIndexLongCells.push(cellGridIndex);
            else
                height = Math.max(height, layoutCell.height);
        }
        if (height == 0)
            return Formatter.setRowHeightInternal(this.tableInfo.currRowInfo.currLayoutTableRowInfo);
        var rows = this.grid.table.rows;
        if (cellGridIndexLongCells.length > 0 &&
            !list_1.ListUtils.unsafeAnyOf(this.grid.tableCellInfos, function (rowGridInfo, rowInd) {
                return list_1.ListUtils.unsafeAnyOf(rowGridInfo, function (cellGridInfo, cellInd) {
                    return rows[rowInd].cells[cellInd].verticalMerging != table_base_structures_1.TableCellMergingState.Continue ||
                        !list_1.ListUtils.unsafeAnyOf(cellGridIndexLongCells, function (ind) { return ind == cellGridInfo.getGridCellIndex(); });
                });
            }, rowIndex + 1)) {
            return Formatter.setRowHeightInternal(this.tableInfo.currRowInfo.currLayoutTableRowInfo);
        }
        this.tableInfo.currRowInfo.currLayoutTableRowInfo.height = height;
        return;
    };
    Formatter.prototype.setRowHeight = function () {
        var rowIndex = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowIndex;
        if (this.tableInfo.currRowInfo.howManyColumnsConsiderTableRow > 1)
            return this.setRowHeightWhenRowBelongsToManyColumns();
        var height = this.tableInfo.rows[rowIndex].heightInfo;
        var cells = this.grid.table.rows[rowIndex].cells;
        var maxCellHeightStartAndEndOnThisRow = 0;
        for (var cellIndex = 0, cell = void 0; cell = cells[cellIndex]; cellIndex++) {
            if (cell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue)
                continue;
            var cellGridInfo = this.grid.tableCellInfos[rowIndex][cellIndex];
            if (rowIndex == cellGridInfo.getEndRowIndex() - 1) {
                var startRowIndexInColumn = Math.max(0, this.tableInfo.currLayoutTableColumnInfo.tableRows.length - cellGridInfo.getNumRowsInCell());
                var firstRowInCell = this.tableInfo.currLayoutTableColumnInfo.tableRows[startRowIndexInColumn];
                var gridCellIndex = cellGridInfo.getGridCellIndex();
                var topCell = list_1.ListUtils.elementBy(firstRowInCell.rowCells, function (cell) { return cell.cellGridIndex == gridCellIndex; });
                if (topCell)
                    maxCellHeightStartAndEndOnThisRow = Math.max(maxCellHeightStartAndEndOnThisRow, list_1.ListUtils.accumulate(this.tableInfo.rows, topCell.height, function (acc, rowInfo) { return acc - rowInfo.heightInfo.contentHeight; }, firstRowInCell.rowIndex, rowIndex));
            }
        }
        for (var _i = 0, _a = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells; _i < _a.length; _i++) {
            var layoutCellInfo = _a[_i];
            var cellGridInfo = this.grid.tableCellGridInfos[rowIndex][layoutCellInfo.cellGridIndex];
            var cellStartRowIndex = cellGridInfo.getStartRowIndex();
            var cell = cells[cellGridInfo.getCellIndex(rowIndex - cellStartRowIndex)];
            if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.None)
                maxCellHeightStartAndEndOnThisRow = Math.max(maxCellHeightStartAndEndOnThisRow, layoutCellInfo.height);
        }
        switch (height.preferredHeightType) {
            case table_units_1.TableHeightUnitType.Exact:
                this.tableInfo.currRowInfo.currLayoutTableRowInfo.height = height.preferredHeightValue;
                break;
            case table_units_1.TableHeightUnitType.Auto:
                this.tableInfo.currRowInfo.currLayoutTableRowInfo.height = Math.max(maxCellHeightStartAndEndOnThisRow, height.contentHeight);
                break;
            case table_units_1.TableHeightUnitType.Minimum:
                this.tableInfo.currRowInfo.currLayoutTableRowInfo.height =
                    Math.max(maxCellHeightStartAndEndOnThisRow, height.contentHeight, height.preferredHeightValue);
                break;
        }
        height.contentHeight = this.tableInfo.currRowInfo.currLayoutTableRowInfo.height;
    };
    Formatter.prototype.extendCellHeightToRowHeight = function () {
        var rowHeight = this.tableInfo.currRowInfo.currLayoutTableRowInfo.height;
        for (var _i = 0, _a = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells; _i < _a.length; _i++) {
            var cellInfo = _a[_i];
            cellInfo.height = Math.max(cellInfo.height, rowHeight);
        }
    };
    Formatter.prototype.applyBottomHorizontalBordersChangesForPrevRow = function () {
        if (this.tableInfo.currLayoutTableColumnInfo.tableRows.length == 0)
            return;
        var rowIndex = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowIndex;
        var isFirstRow = !rowIndex;
        var prevRowInfoRowIndex = list_1.ListUtils.last(this.tableInfo.currLayoutTableColumnInfo.tableRows).rowIndex;
        var isPrevRowLastInTable = prevRowInfoRowIndex == this.grid.table.rows.length - 1;
        var cellSpacingPrevRow = this.tableInfo.rows[prevRowInfoRowIndex].cellSpacing;
        var prevRowHorizBorders = list_1.ListUtils.last(this.tableInfo.currColumnHorizontalBorders);
        var delta = 0;
        if (cellSpacingPrevRow > 0) {
            var lastBrd = prevRowHorizBorders.pop();
            var lastLastBrd = prevRowHorizBorders.pop();
            var newBrd = this.tableInfo.bordersHelper.collectOneCellAndTableHorizontalBorders(rowIndex - 1, table_cell_properties_merger_1.TableCellPropertiesMergerBorderBottom, rowIndex, this.tableInfo.bordersHelper.borderHorizontal, true);
            prevRowHorizBorders.push(newBrd);
            delta = lastLastBrd.maxWidth + lastBrd.maxWidth - newBrd.maxWidth + (isPrevRowLastInTable ? cellSpacingPrevRow : 0);
        }
        else {
            var prevRowHorizBordersWidth = prevRowHorizBorders.pop().maxWidth;
            if (isFirstRow)
                delta = prevRowHorizBordersWidth;
        }
        if (delta == 0)
            return;
        this.tableInfo.currRowInfo.currLayoutTableRowInfo.height -= delta;
        for (var _i = 0, _a = this.tableInfo.currRowInfo.currLayoutTableRowInfo.rowCells; _i < _a.length; _i++) {
            var tblCell = _a[_i];
            tblCell.y -= delta;
            for (var _b = 0, _c = tblCell.layoutRows; _b < _c.length; _b++) {
                var row = _c[_b];
                row.y -= delta;
            }
        }
    };
    Formatter.getCellMargin = function (cellMargin) {
        return cellMargin.asNumberNoPercentType(unit_converter_1.UnitConverter.twipsToPixels);
    };
    return Formatter;
}());
exports.Formatter = Formatter;
