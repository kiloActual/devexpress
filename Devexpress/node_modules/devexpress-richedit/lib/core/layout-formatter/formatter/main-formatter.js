"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var constants_1 = require("@devexpress/utils/lib/constants");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var common_1 = require("@devexpress/utils/lib/utils/common");
var list_1 = require("@devexpress/utils/lib/utils/list");
var document_layout_details_level_1 = require("../../layout/document-layout-details-level");
var layout_position_1 = require("../../layout/layout-position");
var layout_page_1 = require("../../layout/main-structures/layout-page");
var layout_row_1 = require("../../layout/main-structures/layout-row");
var layout_table_info_1 = require("../../layout/table/layout-table-info");
var enums_1 = require("../../model/section/enums");
var section_1 = require("../../model/section/section");
var section_properties_1 = require("../../model/section/section-properties");
var sub_document_1 = require("../../model/sub-document");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_list_helper_1 = require("../../rich-utils/debug/logger/base-logger/log-list-helper");
var log_obj_to_str_1 = require("../../rich-utils/debug/logger/base-logger/log-obj-to-str");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var log_obj_to_str_layout_1 = require("../../rich-utils/debug/logger/layout-logger/log-obj-to-str-layout");
var page_changes_collector_1 = require("../changes/engine/page-changes-collector");
var base_formatter_1 = require("./base-formatter");
var enums_2 = require("./enums");
var TryReusePageResult;
(function (TryReusePageResult) {
    TryReusePageResult[TryReusePageResult["CreateNewPage"] = 1] = "CreateNewPage";
    TryReusePageResult[TryReusePageResult["UseOldPage"] = 2] = "UseOldPage";
    TryReusePageResult[TryReusePageResult["RestartFromTableStartPosition"] = 3] = "RestartFromTableStartPosition";
})(TryReusePageResult || (TryReusePageResult = {}));
var MainFormatter = (function (_super) {
    tslib_1.__extends(MainFormatter, _super);
    function MainFormatter(formatterManager) {
        var _this = _super.call(this, formatterManager, sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID) || this;
        _this.state = enums_2.LayoutFormatterState.DocumentStart;
        _this.stateMap[enums_2.LayoutFormatterState.DocumentStart] = _this.processStateDocumentStart;
        _this.stateMap[enums_2.LayoutFormatterState.PageStart] = _this.processStatePageStart;
        _this.stateMap[enums_2.LayoutFormatterState.PageAreaEnd] = _this.processStatePageAreaEnd;
        _this.stateMap[enums_2.LayoutFormatterState.PageEnd] = _this.processStatePageEnd;
        _this.stateMap[enums_2.LayoutFormatterState.DocumentEnd] = _this.processStateDocumentEnd;
        _this.stateMap[enums_2.LayoutFormatterState.End] = _this.processStateEnd;
        return _this;
    }
    MainFormatter.prototype.formatNext = function () {
        do {
            if (!this.stateMap[this.state].call(this))
                return false;
        } while (MainFormatter.notAllowBreakOnState[this.state](this.layoutPosition));
        return true;
    };
    MainFormatter.prototype.processStateDocumentStart = function () {
        this.manager.activeFormatter = this;
        this.initDocumentStart();
        this.layoutPosition = new layout_position_1.LayoutPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.None);
        this.layoutPosition.pageIndex = 0;
        this.state = enums_2.LayoutFormatterState.PageStart;
        return true;
    };
    MainFormatter.prototype.processStatePageStart = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        var wrap = this.rowFormatter.iterator.getWrap(false);
        if (!wrap)
            return false;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStatePageStart", function () { return "SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        var pages = this.manager.layout.pages;
        var boundsCalculator = this.manager.boundsCalculator;
        boundsCalculator.initWhenPageStart();
        var prevPage = pages[this.layoutPosition.pageIndex - 1];
        var prevPageSection = !prevPage ? null : this.manager.model.getSectionByPosition(prevPage.getPosition());
        var currentPageSectionIndex = wrap.info.sectionIndex;
        var currentPageSection = this.manager.model.sections[currentPageSectionIndex];
        var isFirstPageOfSection = prevPageSection != currentPageSection;
        if (this.manager.innerClientProperties.viewsSettings.isSimpleView) {
            var widthForSimpleView = this.manager.innerClientProperties.viewsSettings.widthOfPage;
            var section = new section_1.Section(currentPageSection.documentModel, currentPageSection.startLogPosition, currentPageSection.getLength(), section_properties_1.SectionProperties.createSimpleSectionProperties(widthForSimpleView, constants_1.Constants.MAX_SAFE_INTEGER));
            section.sectionProperties.margins.copyFrom(this.manager.innerClientProperties.viewsSettings.paddings);
            section.sectionProperties.margins.applyConverter(unit_converter_1.UnitConverter.pixelsToTwips);
            boundsCalculator.init(section);
            boundsCalculator.setHeaderBounds(0);
            boundsCalculator.setFooterBounds(0);
        }
        else if (isFirstPageOfSection)
            boundsCalculator.init(currentPageSection);
        boundsCalculator.calculatePageBounds(prevPage ? prevPage.bottom : 0);
        var tryReuseResult = this.manager.floatingRestartInfoHolder.isRestartByAnchorObjects ?
            [TryReusePageResult.CreateNewPage] :
            this.tryReusePage(boundsCalculator.pageBounds);
        switch (tryReuseResult[0]) {
            case TryReusePageResult.CreateNewPage:
                this.createNextPage(boundsCalculator.pageBounds);
                this.manager.floatingRestartInfoHolder.setCalculatedObjects(this.layoutPosition);
                break;
            case TryReusePageResult.UseOldPage:
                break;
            case TryReusePageResult.RestartFromTableStartPosition:
                this.manager.invalidator.onIntervalChanged(this.subDocument.id, new fixed_1.FixedInterval(tryReuseResult[1], 1));
                return true;
        }
        var pageIndex = this.layoutPosition.pageIndex;
        var actualPage = this.layoutPosition.page;
        actualPage.flags.set(layout_page_1.LayoutPageFlags.IsFirstPageOfSection, isFirstPageOfSection);
        actualPage.index = pageIndex;
        actualPage.layoutPageIndex = prevPage ? prevPage.layoutPageIndex + 1 : 0;
        actualPage.pageOrdinal = this.calculatePageOrdinal(prevPage, isFirstPageOfSection, currentPageSection);
        actualPage.startPageSectionIndex = currentPageSectionIndex;
        if (prevPage && isFirstPageOfSection && ((currentPageSection.sectionProperties.startType === enums_1.SectionStartType.EvenPage && !common_1.isEven(actualPage.layoutPageIndex)) ||
            (currentPageSection.sectionProperties.startType === enums_1.SectionStartType.OddPage && common_1.isEven(actualPage.layoutPageIndex))))
            actualPage.layoutPageIndex++;
        if (!this.manager.innerClientProperties.viewsSettings.isSimpleView) {
            this.formatOtherHeaderFooterPageArea(currentPageSection.headers, function (obj) {
                return _this.manager.otherPageAreaFormatter.formatHeaderPageArea(actualPage, obj);
            });
            if (this.manager.floatingRestartInfoHolder.isRestartByAnchorObjects)
                return true;
            this.formatOtherHeaderFooterPageArea(currentPageSection.footers, function (obj) {
                return _this.manager.otherPageAreaFormatter.formatFooterPageArea(actualPage, obj);
            });
            if (this.manager.floatingRestartInfoHolder.isRestartByAnchorObjects)
                return true;
        }
        boundsCalculator.calculateMainPageAreaBounds(-1);
        boundsCalculator.calculateColumnBounds(list_1.ListUtils.last(boundsCalculator.mainPageAreasBounds));
        this.pageAreaBounds = list_1.ListUtils.last(boundsCalculator.mainPageAreasBounds);
        this.columnBounds = list_1.ListUtils.last(boundsCalculator.mainColumnsBounds);
        return true;
    };
    MainFormatter.prototype.calculatePageOrdinal = function (prevPage, firstPageOfSection, currentSection) {
        var _a;
        var nextPageOrdinalType = currentSection.sectionProperties.startType;
        var pageOrdinal;
        if (firstPageOfSection && !currentSection.sectionProperties.continueNumbering)
            pageOrdinal = currentSection.sectionProperties.firstPageNumber;
        else
            pageOrdinal = ((_a = prevPage === null || prevPage === void 0 ? void 0 : prevPage.pageOrdinal) !== null && _a !== void 0 ? _a : 0) + 1;
        var isPageOrdinalOdd = ((pageOrdinal) % 2) != 0;
        switch (nextPageOrdinalType) {
            case enums_1.SectionStartType.OddPage:
                if (isPageOrdinalOdd)
                    return pageOrdinal;
                else
                    return pageOrdinal + 1;
            case enums_1.SectionStartType.EvenPage:
                if (!isPageOrdinalOdd)
                    return pageOrdinal;
                else
                    return pageOrdinal + 1;
            default:
            case enums_1.SectionStartType.Continuous:
                return pageOrdinal;
        }
    };
    MainFormatter.prototype.processStatePageAreaEnd = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        base_formatter_1.BaseFormatter.correctColumnOffsets(this.layoutPosition.pageArea);
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStatePageAreaEnd", function () { return "SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Page;
        this.state = enums_2.LayoutFormatterState.PageEnd;
        return true;
    };
    MainFormatter.prototype.processStatePageEnd = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        var layout = this.manager.layout;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStatePageEnd", function () { return "SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        var createdPage = this.layoutPosition.page;
        createdPage.isValid = true;
        MainFormatter.correctPageOffsets(createdPage);
        this.state = this.lastRowInfo.row.flags.get(layout_row_1.LayoutRowStateFlags.DocumentEnd) ?
            enums_2.LayoutFormatterState.DocumentEnd : enums_2.LayoutFormatterState.PageStart;
        if (!this.tableFormatter) {
            layout.validPageCount = this.layoutPosition.pageIndex + 1;
            layout.lastMaxNumPages = Math.max(layout.lastMaxNumPages, createdPage.layoutPageIndex + 1);
        }
        createdPage.calculateContentIntervals(this.manager.layout.anchorObjectsPositionInfo, false);
        createdPage.setRenderLevelCalculator(this.manager.layout.anchorObjectsPositionInfo);
        var pageChange = page_changes_collector_1.PageChangesCollector.collectPageChanges(layout.pages, createdPage);
        this.manager.changesManager.addPageChange(pageChange);
        this.copyFlagsFromOldPage(layout.pages[createdPage.index], createdPage);
        layout.pages[createdPage.index] = createdPage;
        var tblCellInfo = list_1.ListUtils.last(createdPage.mainSubDocumentPageAreas[0].columns[0].rows).tableCellInfo;
        if (!tblCellInfo ||
            tblCellInfo.parentRow.rowIndex == tblCellInfo.parentRow.parentTable.logicInfo.grid.table.rows.length - 1 &&
                !tblCellInfo.parentRow.parentTable.isBoundWithNext())
            this.manager.onPagesReady();
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.None;
        this.layoutPosition.pageIndex++;
        this.layoutPosition.page = null;
        return true;
    };
    MainFormatter.prototype.processStateDocumentEnd = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStateDocumentEnd", function () { return "SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        var layout = this.manager.layout;
        this.manager.removeRedundantHelper.removeRedundantPage(layout, layout.validPageCount);
        layout.isFullyFormatted = true;
        layout.lastMaxNumPages = list_1.ListUtils.last(this.manager.layout.pages).layoutPageIndex + 1;
        this.manager.layoutDependentRunCache.recalculateHeaderFooterPageAreas();
        this.manager.onPagesReady();
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStateDocumentEnd(end)\n", log_1.Log.w(3, log_1.Log.join)("\n")(log_1.Log.map(function (page, index) { return "\tPage[" + index + "]Intervals: " + log_list_helper_1.LogListHelper.level_1(log_obj_to_str_1.LogObjToStr.fixedInterval, page.getContentIntervals(), "\t\t", "\t")(); }, this.manager.layout.pages)));
        this.state = enums_2.LayoutFormatterState.End;
        this.manager.anchoredObjectsManager.reset();
        return false;
    };
    MainFormatter.prototype.processStateEnd = function () {
        return false;
    };
    MainFormatter.prototype.copyFlagsFromOldPage = function (oldPage, createdPage) {
        if (oldPage) {
            var oldFlags = oldPage.flags.clone();
            oldFlags.set(layout_page_1.LayoutPageFlags.IsFirstPageOfSection, createdPage.flags.get(layout_page_1.LayoutPageFlags.IsFirstPageOfSection));
            oldFlags.set(layout_page_1.LayoutPageFlags.IsIntervalsCorrect, createdPage.flags.get(layout_page_1.LayoutPageFlags.IsIntervalsCorrect));
            createdPage.flags = oldFlags;
        }
    };
    MainFormatter.prototype.createNextPage = function (pageBounds) {
        var newPage = new layout_page_1.LayoutPage();
        newPage.setGeomerty(pageBounds);
        newPage.setAbsolutePosition(this.rowFormatter.getPosition());
        this.state = enums_2.LayoutFormatterState.PageAreaStart;
        this.layoutPosition.page = newPage;
        this.layoutPosition.pageAreaIndex = 0;
        this.layoutPosition.pageArea = null;
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Page;
    };
    MainFormatter.prototype.tryReusePage = function (pageBounds) {
        var pages = this.manager.layout.pages;
        var page = pages[this.layoutPosition.pageIndex];
        if (!page || !page.isValid || this.tableFormatter || !page.equals(pageBounds) || page.getPosition() != this.rowFormatter.getPosition())
            return [TryReusePageResult.CreateNewPage];
        this.layoutPosition.pageAreaIndex = page.mainSubDocumentPageAreas.length - 1;
        var pageArea = list_1.ListUtils.last(page.mainSubDocumentPageAreas);
        var column = pageArea.getLastColumn();
        this.lastRowInfo.setRowInfo(column.getLastRow(), page.getPosition() + pageArea.pageOffset + column.pageAreaOffset, false);
        var firstBoundWithNextCellOnPage = layout_table_info_1.LayoutTableColumnInfo.getFirstCellInPageThatBoundWithCellPlacedInNextPage(column.tablesInfo);
        var nextBoxIteratorPosition = firstBoundWithNextCellOnPage ?
            page.getPosition() + pageArea.pageOffset + column.pageAreaOffset + firstBoundWithNextCellOnPage.getEndPosition() :
            page.getEndPosition();
        var nextPage = this.manager.layout.pages[page.index + 1];
        var tableColumn = this.getLastWidowTableColumn(column);
        if (tableColumn &&
            (!nextPage || !nextPage.isValid || nextBoxIteratorPosition != nextPage.getPosition())) {
            return [TryReusePageResult.RestartFromTableStartPosition, this.getTableRestartPosition(tableColumn)];
        }
        this.rowFormatter.setPosition(nextBoxIteratorPosition, false, !this.tableFormatter);
        this.state = enums_2.LayoutFormatterState.PageEnd;
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Page;
        this.layoutPosition.page = page.deepCopy();
        return [TryReusePageResult.UseOldPage];
    };
    MainFormatter.prototype.getTableRestartPosition = function (tableColumn) {
        return tableColumn.getTopLevelColumn().logicInfo.grid.table.interval.start;
    };
    MainFormatter.prototype.getLastWidowTableColumn = function (column) {
        if (!column.tablesInfo[0])
            return null;
        var index = this.getWidowTableLastColumnIndex(column);
        return column.tablesInfo[index];
    };
    MainFormatter.prototype.getWidowTableLastColumnIndex = function (column) {
        var lastTable = column.tablesInfo[0].logicInfo.grid.table;
        for (var i = 1; i < column.tablesInfo.length; i++) {
            if (lastTable != column.tablesInfo[i].logicInfo.grid.table)
                return i - 1;
        }
        return column.tablesInfo.length - 1;
    };
    MainFormatter.prototype.formatOtherHeaderFooterPageArea = function (container, format) {
        var isEvenPage = common_1.isEven(this.layoutPosition.page.layoutPageIndex);
        var isFirstPageOfSection = this.layoutPosition.page.flags.get(layout_page_1.LayoutPageFlags.IsFirstPageOfSection);
        var actualObject = container.getActualObject(isFirstPageOfSection, isEvenPage);
        format(actualObject);
    };
    MainFormatter.prototype.setParamsForRestart = function (state, newLp, newLastRowInfo, resetTableFormatter) {
        this.state = state;
        this.layoutPosition = newLp;
        this.lastRowInfo = newLastRowInfo;
        if (resetTableFormatter)
            this.tableFormatter = null;
    };
    MainFormatter.prototype.setBoundsForRestart = function (pageAreaBounds, columnBounds) {
        this.pageAreaBounds = pageAreaBounds;
        this.columnBounds = columnBounds;
    };
    MainFormatter.correctPageOffsets = function (page) {
        var pageAreas = page.mainSubDocumentPageAreas;
        if (!pageAreas.length)
            return;
        var offsetFirstPageAreaFromPage = pageAreas[0].pageOffset;
        if (offsetFirstPageAreaFromPage != 0) {
            page.setAbsolutePosition(page.getPosition() + offsetFirstPageAreaFromPage);
            for (var _i = 0, pageAreas_1 = pageAreas; _i < pageAreas_1.length; _i++) {
                var pageArea = pageAreas_1[_i];
                pageArea.pageOffset -= offsetFirstPageAreaFromPage;
            }
        }
    };
    MainFormatter.notAllowBreakOnState = (_a = {},
        _a[enums_2.LayoutFormatterState.DocumentStart] = function (_lp) { return true; },
        _a[enums_2.LayoutFormatterState.PageStart] = function (lp) { return lp.pageIndex == 0; },
        _a[enums_2.LayoutFormatterState.PageAreaStart] = function (lp) { return lp.pageAreaIndex == 0; },
        _a[enums_2.LayoutFormatterState.ColumnStart] = function (lp) { return lp.columnIndex == 0; },
        _a[enums_2.LayoutFormatterState.RowFormatting] = function (lp) { return lp.rowIndex == 0; },
        _a[enums_2.LayoutFormatterState.DocumentEnd] = function (_lp) { return false; },
        _a[enums_2.LayoutFormatterState.PageEnd] = function (_lp) { return false; },
        _a[enums_2.LayoutFormatterState.PageAreaEnd] = function (_lp) { return false; },
        _a[enums_2.LayoutFormatterState.ColumnEnd] = function (_lp) { return false; },
        _a);
    return MainFormatter;
}(base_formatter_1.BaseFormatter));
exports.MainFormatter = MainFormatter;
