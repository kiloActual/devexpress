"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var constants_1 = require("@devexpress/utils/lib/constants");
var errors_1 = require("@devexpress/utils/lib/errors");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var document_layout_details_level_1 = require("../../layout/document-layout-details-level");
var layout_position_1 = require("../../layout/layout-position");
var layout_anchored_object_box_1 = require("../../layout/main-structures/layout-boxes/layout-anchored-object-box");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var layout_column_1 = require("../../layout/main-structures/layout-column");
var layout_page_area_1 = require("../../layout/main-structures/layout-page-area");
var layout_row_1 = require("../../layout/main-structures/layout-row");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var log_obj_to_str_layout_1 = require("../../rich-utils/debug/logger/layout-logger/log-obj-to-str-layout");
var paragraph_frame_changes_collector_1 = require("../changes/engine/paragraph-frame-changes-collector");
var layout_row_bounds_manager_1 = require("../floating/layout-row-bounds-manager");
var formatter_1 = require("../row/formatter");
var result_1 = require("../row/result");
var row_spacing_before_applier_1 = require("../row/utils/row-spacing-before-applier");
var formatter_2 = require("../table/formatter");
var enums_1 = require("./enums");
var last_row_info_1 = require("./utils/last-row-info");
var restart_preparer_1 = require("./utils/restart-preparer");
var BaseFormatter = (function () {
    function BaseFormatter(manager, subDocId) {
        this.layoutRowBoundsCalculator = new layout_row_bounds_manager_1.LayoutRowBoundsCalculator();
        this.manager = manager;
        this.rowFormatter = new formatter_1.RowFormatter(manager, subDocId);
        this.state = enums_1.LayoutFormatterState.PageAreaStart;
        this.stateMap = {};
        this.stateMap[enums_1.LayoutFormatterState.PageAreaStart] = this.processStatePageAreaStart;
        this.stateMap[enums_1.LayoutFormatterState.ColumnStart] = this.processStateColumnStart;
        this.stateMap[enums_1.LayoutFormatterState.RowFormatting] = this.processStateRowFormatting;
        this.stateMap[enums_1.LayoutFormatterState.ColumnEnd] = this.processStateColumnEnd;
    }
    BaseFormatter.prototype.initDocumentStart = function () {
        this.rowFormatter.documentStart();
        this.lastRowInfo = new last_row_info_1.LastRowInfo(this.subDocument.paragraphs);
        this.lastRowInfo.reset(this.rowFormatter);
    };
    Object.defineProperty(BaseFormatter.prototype, "subDocument", {
        get: function () {
            return this.rowFormatter.subDocument;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseFormatter.prototype, "currColumnHeight", {
        get: function () {
            return this.layoutPosition.rowIndex == 0 ? 0 : this.layoutPosition.column.rows[this.layoutPosition.rowIndex - 1].bottom;
        },
        enumerable: true,
        configurable: true
    });
    BaseFormatter.prototype.formatPageArea = function (pageAreaBounds, columnBounds, page) {
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "formatPageArea", "pageIndex: " + page.index);
        this.pageAreaBounds = pageAreaBounds;
        this.columnBounds = columnBounds;
        if (!this.layoutPosition) {
            this.layoutPosition = new layout_position_1.LayoutPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.None);
            this.layoutPosition.page = page;
            this.layoutPosition.pageIndex = page.index;
        }
        while (this.stateMap[this.state].call(this) && this.state != enums_1.LayoutFormatterState.PageAreaEnd)
            ;
    };
    BaseFormatter.prototype.processStatePageAreaStart = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStatePageAreaStart", function () { return " SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        this.createNextPageArea();
        if (this.subDocument.isMain())
            this.layoutPosition.page.mainSubDocumentPageAreas.push(this.layoutPosition.pageArea);
        else
            this.layoutPosition.page.otherPageAreas[this.subDocument.id] = this.layoutPosition.pageArea;
        return true;
    };
    BaseFormatter.prototype.processStateColumnStart = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStateColumnStart", function () { return " SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        var columnBounds = this.columnBounds[this.layoutPosition.columnIndex];
        this.createNextColumn(columnBounds);
        this.layoutPosition.pageArea.columns.push(this.layoutPosition.column);
        if (this.tableFormatter)
            this.tableFormatter.columnStart(this.layoutPosition.column);
        var bounds = new fixed_1.FixedInterval(this.layoutPosition.pageArea.x + columnBounds.x, columnBounds.width);
        this.layoutRowBoundsCalculator.resetByColumn(this.layoutPosition.page.anchoredObjectHolder.objects, bounds, this.subDocument.isTextBox());
        return true;
    };
    BaseFormatter.prototype.initializeTextBoxSizeForAutoFitTables = function () {
        var _this = this;
        var tblPos = this.rowFormatter.getNextBoxWrapInfo().info.tablePosition[0];
        if (tblPos.rowIndex == 0 && tblPos.cellIndex == 0) {
            number_1.NumberMapUtils.forEach(this.manager.anchoredObjectsManager.textBoxContextSizeCalculators, function (obj) {
                var currTblPoss = obj.wrap.info.tablePosition;
                if (currTblPoss && currTblPoss[0].table.index == tblPos.table.index)
                    obj.calculateSize(_this.manager.boundsCalculator);
            });
        }
    };
    BaseFormatter.prototype.processStateRowFormatting = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        var wrap = this.rowFormatter.getNextBoxWrapInfo();
        var startRowOffset = wrap.box.rowOffset;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStateRowFormatting", function () { return "pos:" + startRowOffset + ", SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        if (!this.tableFormatter && this.applyPageBreakBefore())
            return true;
        if (!this.tableFormatter && wrap.info.tablePosition) {
            this.initializeTextBoxSizeForAutoFitTables();
            this.tableFormatter = new formatter_2.Formatter(this.rowFormatter, wrap.info.tablePosition, this.layoutPosition.column, layout_column_1.LayoutColumn.findSectionColumnWithMinimumWidth(this.columnBounds), new point_1.Point(0, this.getTableStartYOffsetPosition()), null, 0, null, null);
            this.tableFormatter.tableInfo.currLayoutTableColumnInfo.logicInfo.isEditable = this.tableIsEditable(this.tableFormatter.tableInfo.table);
        }
        var rowResult = this.createRow();
        if (rowResult.flags.get(result_1.RowFormatterResultFlag.NotEnoughChunks))
            return false;
        var addRowInTableResult = this.tableFormatter ?
            this.tableFormatter.addLayoutRow(rowResult, wrap.info) :
            new flag_1.Flag(formatter_2.AddRowToTableResult.RowAdded);
        if (addRowInTableResult.get(formatter_2.AddRowToTableResult.RowAdded)) {
            var row = rowResult.row;
            if (this.subDocument.isMain() && !this.tableFormatter && this.cantPlaceRowOnThisColumn(row, startRowOffset))
                return true;
            this.pushRow(row, startRowOffset, rowResult.paragraphIndex);
            if (this.placeAnchorObjects(rowResult)) {
                if (this.tableFormatter) {
                    var bounds = new fixed_1.FixedInterval(this.layoutPosition.pageArea.x + this.layoutPosition.column.x +
                        this.layoutPosition.row.tableCellInfo.x, this.layoutPosition.row.tableCellInfo.width);
                    var obj = list_1.ListUtils.elementBy(rowResult.newAnchoredObjects, function (obj) { return obj.levelType == layout_anchored_object_box_1.AnchoredObjectLevelType.InText; });
                    this.layoutRowBoundsCalculator.addTableInTextObject(obj, bounds);
                    if (this.tableFormatter.resetCaseInTextAnchorObject(wrap.info, obj)) {
                        if (!this.layoutPosition.column.rows[0]) {
                            this.manager.floatingRestartInfoHolder.storeInfo(this.layoutPosition);
                            new restart_preparer_1.RestartPreparer(this.manager).restartFromPage(this.layoutPosition.pageIndex, false, false);
                        }
                        else
                            this.state = enums_1.LayoutFormatterState.ColumnEnd;
                    }
                }
                else {
                    this.manager.floatingRestartInfoHolder.storeInfo(this.layoutPosition);
                    new restart_preparer_1.RestartPreparer(this.manager).restartByAnchoredObject(this.layoutPosition.page);
                    if (!this.subDocument.isMain())
                        this.state = enums_1.LayoutFormatterState.PageAreaEnd;
                }
                this.isColumnOk();
                return true;
            }
            if (this.tableFormatter) {
                this.tableFormatter.actualFormatter.findNextCell(addRowInTableResult, wrap.info);
            }
        }
        if (this.tableFormatter)
            this.tableFormatter.applyResultOfTopLevelFormatters(addRowInTableResult, wrap.info);
        if (addRowInTableResult.get(formatter_2.AddRowToTableResult.TableFinished))
            this.tableFormatter = null;
        if (addRowInTableResult.get(formatter_2.AddRowToTableResult.GoToNextColumn) || this.layoutPosition.row.flags.anyOf(layout_row_1.LayoutRowStateFlags.ColumnEnd, layout_row_1.LayoutRowStateFlags.DocumentEnd, layout_row_1.LayoutRowStateFlags.SectionEnd, layout_row_1.LayoutRowStateFlags.PageEnd)) {
            this.isColumnOk();
            this.state = enums_1.LayoutFormatterState.ColumnEnd;
        }
        return true;
    };
    BaseFormatter.prototype.processStateColumnEnd = function () {
        var _this = this;
        this.manager.activeFormatter = this;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatter, "processStateColumnEnd", function () { return " SubDocId: " + _this.subDocument.id + ", LayPos: " + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(_this.layoutPosition); });
        var createdColumn = this.layoutPosition.column;
        createdColumn.rows.sort(function (a, b) { return a.columnOffset - b.columnOffset; });
        BaseFormatter.correctRowOffsets(createdColumn);
        if (this.tableFormatter)
            this.tableFormatter.columnEnd();
        createdColumn.tablesInfo.sort(function (a, b) { return a.logicInfo.grid.table.index - b.logicInfo.grid.table.index; });
        list_1.ListUtils.forEach(createdColumn.rows, function (row, index) {
            if (row.tableCellInfo)
                row.indexInColumn = index;
        });
        this.layoutPosition.page.anchoredObjectHolder.onColumnEnd(this);
        var lastRow = createdColumn.getLastRow();
        lastRow.flags.set(layout_row_1.LayoutRowStateFlags.ColumnEnd, true);
        if (this.manager.innerClientProperties.viewsSettings.isSimpleView) {
            var lastAnchorBox = number_1.NumberMapUtils.max(this.layoutPosition.page.anchoredObjectHolder.objects, function (a) { return a.bottom; });
            var margins = this.manager.innerClientProperties.viewsSettings.paddings;
            var pageInfo = this.manager.innerClientProperties.viewsSettings.pageVerticalInfo;
            var lastRowBottomPos = lastRow.bottom + margins.top;
            var bottomPosition = lastAnchorBox ? Math.max(lastAnchorBox.bottom, lastRowBottomPos) : lastRowBottomPos;
            var minPageContentHeight = bottomPosition + margins.bottom;
            var minVisibleAreaHeight = minPageContentHeight +
                pageInfo.topMargin + pageInfo.topPageBorderWidth + pageInfo.bottomPageBorderWidth + pageInfo.bottomMargin;
            var diff = Math.floor(Math.max(0, this.manager.controlHeightProvider.getVisibleAreaHeight(false) - minVisibleAreaHeight));
            var finalPageHeight = minPageContentHeight + diff;
            var columnHeight = finalPageHeight - margins.vertical;
            this.layoutPosition.column.height = columnHeight;
            this.layoutPosition.pageArea.height = columnHeight;
            this.layoutPosition.page.height = finalPageHeight;
        }
        createdColumn.paragraphFrames = paragraph_frame_changes_collector_1.ParagraphFrameCollector.collect(this.manager.model.colorProvider, createdColumn, this.subDocument.isMain() ?
            this.layoutPosition.page.getPosition() + this.layoutPosition.pageArea.pageOffset : 0, this.subDocument.paragraphs);
        if (lastRow.flags.anyOf(layout_row_1.LayoutRowStateFlags.DocumentEnd, layout_row_1.LayoutRowStateFlags.PageEnd, layout_row_1.LayoutRowStateFlags.SectionEnd)) {
            this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea;
            this.state = enums_1.LayoutFormatterState.PageAreaEnd;
        }
        else {
            if (this.layoutPosition.columnIndex + 1 < this.columnBounds.length) {
                this.state = enums_1.LayoutFormatterState.ColumnStart;
                this.layoutPosition.columnIndex++;
                this.layoutPosition.column = null;
            }
            else
                this.state = enums_1.LayoutFormatterState.PageAreaEnd;
        }
        return true;
    };
    BaseFormatter.prototype.createNextPageArea = function () {
        var newPageArea = new layout_page_area_1.LayoutPageArea(this.subDocument);
        newPageArea.setGeomerty(this.pageAreaBounds);
        newPageArea.pageOffset = this.subDocument.isMain() ? 0 : this.rowFormatter.getPosition();
        this.state = enums_1.LayoutFormatterState.ColumnStart;
        this.layoutPosition.pageArea = newPageArea;
        this.layoutPosition.columnIndex = 0;
        this.layoutPosition.column = null;
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.PageArea;
    };
    BaseFormatter.prototype.createNextColumn = function (columnBounds) {
        var newColumn = new layout_column_1.LayoutColumn();
        newColumn.setGeomerty(columnBounds);
        newColumn.pageAreaOffset = this.layoutPosition.columnIndex == 0 || !this.subDocument.isMain() ?
            0 :
            this.rowFormatter.getPosition() - this.layoutPosition.pageArea.pageOffset - this.layoutPosition.page.getPosition();
        this.state = enums_1.LayoutFormatterState.RowFormatting;
        this.layoutPosition.column = newColumn;
        this.layoutPosition.rowIndex = 0;
        this.layoutPosition.detailsLevel = document_layout_details_level_1.DocumentLayoutDetailsLevel.Column;
    };
    BaseFormatter.prototype.pushRow = function (row, rowAbsStartPos, parIndex) {
        this.layoutPosition.row = row;
        this.layoutPosition.column.rows.push(row);
        this.layoutPosition.rowIndex++;
        this.lastRowInfo.setFullRowInfo(row, rowAbsStartPos, parIndex);
        BaseFormatter.correctBoxOffsets(row);
    };
    BaseFormatter.prototype.createRow = function () {
        var rowSpacingBeforeApplier = this.tableFormatter ?
            new row_spacing_before_applier_1.TableRowSpacingBeforeApplier(this.lastRowInfo.row, this.subDocument.paragraphs, this.tableFormatter.isCurrLayoutRowIsFirstInCell, this.tableFormatter.isCurrTableCellFirstInRow, this.tableFormatter.isCurrTableRowIsFirstInTable) :
            new row_spacing_before_applier_1.RowSpacingBeforeApplier(this.lastRowInfo.row, this.subDocument.paragraphs, this.layoutPosition.rowIndex == 0, this.lastRowInfo.paragraphIndex);
        var offsetRelativeColumn = this.layoutPosition.getOffsetRelativeColumn();
        var absOffset = this.tableFormatter ?
            offsetRelativeColumn.clone().offsetByPoint(this.tableFormatter.currLayoutRowOffset) :
            this.getCurrOffsetForRow(offsetRelativeColumn);
        var minimumOfY = constants_1.Constants.MIN_SAFE_INTEGER;
        if (!this.tableFormatter && this.lastRowInfo.row && this.manager.innerClientProperties.viewsSettings.isSimpleView &&
            list_1.ListUtils.unsafeAnyOf(this.lastRowInfo.row.boxes, function (b) {
                return enum_1.EnumUtils.isAnyOf(b.getType(), layout_box_1.LayoutBoxType.ColumnBreak, layout_box_1.LayoutBoxType.PageBreak, layout_box_1.LayoutBoxType.SectionMark);
            })) {
            var lastRowBottomPos_1 = this.lastRowInfo.row.bottom;
            var ancObj_1 = null;
            number_1.NumberMapUtils.forEach(this.layoutPosition.page.anchoredObjectHolder.objects, function (obj) {
                if (!obj.isInText() && (obj.bottom > lastRowBottomPos_1) &&
                    (!ancObj_1 || obj.bottom > ancObj_1.bottom))
                    ancObj_1 = obj;
            });
            if (ancObj_1)
                minimumOfY = ancObj_1.bottom + 1;
        }
        var maxLayoutRowWidth = this.tableFormatter ? this.tableFormatter.currLayoutRowContentWidth : this.layoutPosition.column.width;
        this.rowFormatter.formatRow(Math.max(minimumOfY, absOffset.y), new fixed_1.FixedInterval(absOffset.x, maxLayoutRowWidth), rowSpacingBeforeApplier);
        var rowResult = this.rowFormatter.result;
        if (rowResult.row)
            rowResult.row.moveRectangleByPoint(offsetRelativeColumn.multiply(-1, -1));
        return rowResult;
    };
    BaseFormatter.prototype.getCurrOffsetForRow = function (offsetRelativeColumn) {
        var prevRow = list_1.ListUtils.last(this.layoutPosition.column.rows);
        if (!prevRow)
            return offsetRelativeColumn;
        var offset = offsetRelativeColumn.clone();
        offset.y += prevRow.tableCellInfo ?
            prevRow.tableCellInfo.parentRow.parentTable.getTopLevelColumn().bottom :
            prevRow.bottom;
        return offset;
    };
    BaseFormatter.prototype.applyPageBreakBefore = function () {
        var wrapInfo = this.rowFormatter.getNextBoxWrapInfo();
        if (wrapInfo && this.lastRowInfo.isNextRowFirstInParagraph() &&
            this.subDocument.paragraphs[wrapInfo.info.paragraphIndex].getParagraphMergedProperties().pageBreakBefore &&
            this.layoutPosition.rowIndex !== 0 && this.manager.innerClientProperties.viewsSettings.isPrintLayoutView) {
            this.lastRowInfo.row.flags.set(layout_row_1.LayoutRowStateFlags.PageEnd, true);
            this.state = enums_1.LayoutFormatterState.ColumnEnd;
            return true;
        }
        return false;
    };
    BaseFormatter.prototype.cantPlaceRowOnThisColumn = function (row, startRowPosition) {
        if (this.layoutPosition.rowIndex != 0 && row.bottom > this.layoutPosition.column.height && row.hasEffectToPageHeight) {
            this.rowFormatter.setPosition(startRowPosition, false, !this.tableFormatter);
            this.state = enums_1.LayoutFormatterState.ColumnEnd;
            return true;
        }
        return false;
    };
    BaseFormatter.prototype.tableIsEditable = function (table) {
        var tableInterval = fixed_1.FixedInterval.fromPositions(table.getStartPosition(), table.getEndPosition());
        return this.subDocument.isEditable([tableInterval]);
    };
    BaseFormatter.prototype.placeAnchorObjects = function (rowResult) {
        var _this = this;
        if (!rowResult.newAnchoredObjects.length)
            return false;
        var needRestartFromPageStart = false;
        list_1.ListUtils.forEach(rowResult.newAnchoredObjects, function (obj) {
            _this.manager.layout.anchorObjectsPositionInfo.add(obj, obj.rowOffset);
            switch (obj.getType()) {
                case layout_box_1.LayoutBoxType.AnchorTextBox: {
                    var textBox = obj;
                    if (textBox.internalSubDocId >= 0) {
                        _this.manager.otherPageAreaFormatter.setTextBoxContent(_this.layoutPosition.page, textBox);
                        _this.layoutPosition.page.anchoredObjectHolder.addObject(_this.manager, textBox);
                        var pageArea = _this.layoutPosition.page.otherPageAreas[textBox.internalSubDocId];
                        var contentBounds = textBox.getContentBounds();
                        pageArea.x = contentBounds.x;
                        pageArea.y = contentBounds.y;
                    }
                    break;
                }
                case layout_box_1.LayoutBoxType.AnchorPicture: {
                    _this.layoutPosition.page.anchoredObjectHolder.addObject(_this.manager, obj);
                    break;
                }
                default: throw new Error(errors_1.Errors.InternalException);
            }
            if (obj.levelType == layout_anchored_object_box_1.AnchoredObjectLevelType.InText)
                needRestartFromPageStart = true;
        });
        return needRestartFromPageStart;
    };
    BaseFormatter.prototype.getTableStartYOffsetPosition = function () {
        if (!this.lastRowInfo.row || !this.layoutPosition.column.rows.length)
            return 0;
        if (!this.lastRowInfo.row.tableCellInfo)
            return this.lastRowInfo.row.bottom;
        return this.lastRowInfo.row.tableCellInfo.parentRow.parentTable.getTopLevelColumn().bottom;
    };
    BaseFormatter.correctColumnOffsets = function (pageArea) {
        var columns = pageArea.columns;
        if (!columns.length)
            return;
        var offsetFirstColumnFromPageArea = columns[0].pageAreaOffset;
        if (offsetFirstColumnFromPageArea != 0) {
            pageArea.pageOffset += offsetFirstColumnFromPageArea;
            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i];
                column.pageAreaOffset -= offsetFirstColumnFromPageArea;
            }
        }
    };
    BaseFormatter.correctRowOffsets = function (column) {
        var rows = column.rows;
        if (!rows.length)
            return;
        var offsetFirstRowFromColumn = rows[0].columnOffset;
        if (offsetFirstRowFromColumn != 0) {
            column.pageAreaOffset += offsetFirstRowFromColumn;
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                row.columnOffset -= offsetFirstRowFromColumn;
            }
        }
    };
    BaseFormatter.correctBoxOffsets = function (row) {
        var boxes = row.boxes;
        if (!boxes)
            return;
        var offsetFirstBoxFromRow = boxes[0].rowOffset;
        if (offsetFirstBoxFromRow != 0) {
            row.columnOffset += offsetFirstBoxFromRow;
            for (var _i = 0, boxes_1 = boxes; _i < boxes_1.length; _i++) {
                var box = boxes_1[_i];
                box.rowOffset -= offsetFirstBoxFromRow;
            }
        }
    };
    BaseFormatter.prototype.isColumnOk = function () {
        if (this.state == enums_1.LayoutFormatterState.ColumnEnd && !this.layoutPosition.column.rows[0])
            throw new Error(errors_1.Errors.InternalException);
    };
    return BaseFormatter;
}());
exports.BaseFormatter = BaseFormatter;
