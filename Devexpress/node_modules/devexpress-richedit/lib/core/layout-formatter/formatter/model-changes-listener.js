"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var enums_1 = require("../../model/changes/enums");
var json_character_enums_1 = require("../../model/json/enums/json-character-enums");
var json_floating_enums_1 = require("../../model/json/enums/json-floating-enums");
var json_list_enums_1 = require("../../model/json/enums/json-list-enums");
var json_paragraph_enums_1 = require("../../model/json/enums/json-paragraph-enums");
var json_section_enums_1 = require("../../model/json/enums/json-section-enums");
var json_table_cell_enums_1 = require("../../model/json/enums/table/json-table-cell-enums");
var json_table_enums_1 = require("../../model/json/enums/table/json-table-enums");
var json_table_row_enums_1 = require("../../model/json/enums/table/json-table-row-enums");
var run_type_1 = require("../../model/runs/run-type");
var enums_2 = require("../../model/section/enums");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_obj_to_str_1 = require("../../rich-utils/debug/logger/base-logger/log-obj-to-str");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var ModelChangesListener = (function () {
    function ModelChangesListener(invalidator) {
        this.invalidator = invalidator;
    }
    ModelChangesListener.prototype.modelChanged = function (change) {
        switch (change.type) {
            case enums_1.ModelChangeType.PageColor: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.PageColor", "pageColor:" + change.newColor);
                this.invalidator.onChangedAllLayout();
                break;
            }
            case enums_1.ModelChangeType.DefaultTabWidth: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.DefaultTabWidth", "defaultTabWidth:" + change.newDefaultTabWidth);
                this.invalidator.onChangedAllLayout();
                break;
            }
            case enums_1.ModelChangeType.DifferentOddAndEvenPages: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.DifferentOddAndEvenPages", "newValue:" + change.newValue);
                this.invalidator.onChangedAllLayout();
                break;
            }
            case enums_1.ModelChangeType.HeaderFooterCreated: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.HeaderFooterCreated", function () { return "isHeader:" + change.isHeader + ", type:" + enums_2.HeaderFooterType[change.headerFooterType] + ", subDocumentInfo:" + log_obj_to_str_1.LogObjToStr.headerFooterSubDocumentInfoBase(change.subDocumentInfo); });
                this.invalidator.onChangedAllLayout();
                break;
            }
            case enums_1.ModelChangeType.HeaderFooterIndexChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.HeaderFooterIndexChanged", function () { return "sectionIndex:" + change.sectionIndex + ", isHeader:" + change.isHeader + ", type:" + enums_2.HeaderFooterType[change.headerFooterType] + ", newIndex:" + change.newIndex; });
                this.invalidator.onHeaderFooterIndexChanged(change.sectionIndex, change.headerFooterType);
                break;
            }
            case enums_1.ModelChangeType.SectionFormattingChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.SectionFormattingChanged", function () { return "property:" + json_section_enums_1.JSONSectionProperty[change.property] + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemSectionStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onChangedSections(change.startSectionIndex, change.endSectionIndex);
                break;
            }
            case enums_1.ModelChangeType.CreateStyleLink: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.CreateStyleLink", "paragraphStyleName:" + change.paragraphStyleName);
                break;
            }
            case enums_1.ModelChangeType.DeleteStyleLink: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.DeleteStyleLink", "paragraphStyleName:" + change.paragraphStyleName);
                break;
            }
            case enums_1.ModelChangeType.AbstractNumberingListAdded: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AbstractNumberingListAdded", "index:" + change.index);
                break;
            }
            case enums_1.ModelChangeType.AbstractNumberingListDeleted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AbstractNumberingListDeleted", "index:" + change.index);
                break;
            }
            case enums_1.ModelChangeType.NumberingListAdded: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.NumberingListAdded", "index:" + change.index);
                break;
            }
            case enums_1.ModelChangeType.NumberingListDeleted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.NumberingListDeleted", "index:" + change.index);
                break;
            }
            case enums_1.ModelChangeType.ListLevelPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ListLevelPropertyChanged", "property:" + json_list_enums_1.JSONListLevelProperty[change.property] + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemListLevelStateObject, change.newState, "\t", "\n")());
                this.invalidator.onListLevelChanged(change.newState);
                break;
            }
            case enums_1.ModelChangeType.ListLevelParagraphPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ListLevelParagraphPropertyChanged", function () { return "property:" + json_paragraph_enums_1.JSONParagraphFormattingProperty[change.property] + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemListLevelUseStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onListLevelChanged(change.newState);
                break;
            }
            case enums_1.ModelChangeType.ListLevelCharacterPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ListLevelCharacterPropertyChanged", function () { return "property:" + json_character_enums_1.JSONCharacterFormattingProperty[change.property] + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemListLevelUseStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onListLevelChanged(change.newState);
                break;
            }
            case enums_1.ModelChangeType.IOverrideListLevelChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.IOverrideListLevelChanged", function () { return "property:" + json_list_enums_1.JSONIOverrideListLevelProperty[change.property] + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemListLevelStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onListLevelChanged(change.newState);
                break;
            }
            case enums_1.ModelChangeType.BookmarkCreated: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.BookmarkCreated", function () { return "subDocumentId:" + change.subDocumentId; });
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.makeByConstInterval(change.bkmTempate.interval));
                break;
            }
            case enums_1.ModelChangeType.BookmarkDeleted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.BookmarkDeleted", function () { return "subDocumentId:" + change.subDocumentId; });
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.makeByConstInterval(change.bkmTempate.interval));
                break;
            }
            case enums_1.ModelChangeType.TabInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TabInserted", function () { return "subDocumentId:" + change.subDocumentId + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.TabDeleted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TabDeleted", function () { return "subDocumentId:" + change.subDocumentId + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.InlinePictureInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.InlinePictureInserted", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", id:" + change.picInfo.cacheInfo.currId; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, 1, false);
                break;
            }
            case enums_1.ModelChangeType.InlinePicturesUpdated: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.InlinePicturesUpdated", function () { return "subDocumentId:" + change.subDocumentId; });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.updatedImageInfo.position, 1));
                break;
            }
            case enums_1.ModelChangeType.AnchoredPictureInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchoredPictureInserted", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", id:" + change.id + ", scaleX:" + change.size.scale.width + ", scaleY:" + change.size.scale.height + ", anchorInfo:" + change.anchorInfo; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, 1, false);
                break;
            }
            case enums_1.ModelChangeType.AnchoredPictureSizeChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchoredPictureSizeChanged", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.position, 1));
                break;
            }
            case enums_1.ModelChangeType.InlineObjectRunPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.InlineObjectRunPropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_floating_enums_1.JSONInlineObjectProperty[change.property] + ", position:" + change.position + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                var interval = change.newState.interval;
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.fromPositions(Math.max(0, interval.start - 1), interval.end));
                break;
            }
            case enums_1.ModelChangeType.HyperlinkInfoChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.HyperlinkInfoChanged", function () { return "subDocumentId:" + change.subDocumentId + ", fieldResultInterval:" + log_obj_to_str_1.LogObjToStr.fixedInterval(change.fieldResultInterval) + ", newHyperlinkInfo:" + log_obj_to_str_1.LogObjToStr.hyperlinkInfo(change.newHyperlinkInfo); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.fieldResultInterval);
                break;
            }
            case enums_1.ModelChangeType.FieldsShowCodeChanged: {
                this.invalidator.onIntervalChanged(change.subDocumentId, change.fieldInterval);
                break;
            }
            case enums_1.ModelChangeType.SimpleRunInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.SimpleRunInserted", function () { return "subDocumentId:" + change.subDocumentId + ", logPosition:" + change.position + ", length:" + length + " type:" + run_type_1.RunType[change.runType]; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, change.length, false);
                break;
            }
            case enums_1.ModelChangeType.TextBufferChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.SimpleRunInserted", function () { return "subDocumentId:" + change.subDocumentId + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.ParagraphInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TextBufferChanged", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, 1, true);
                break;
            }
            case enums_1.ModelChangeType.SectionInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.SectionInserted", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position; });
                this.invalidator.onChangedSections(change.sectionIndex, change.sectionIndex);
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchoredTextBoxInserted", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", anchorInfo:" + change.anchorInfo; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, 1, false);
                break;
            }
            case enums_1.ModelChangeType.AnchorObjectRemoved: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchorObjectRemoved", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position; });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.position, 1));
                break;
            }
            case enums_1.ModelChangeType.IntervalRemoved: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.IntervalRemoved", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.interval.start + ", length:" + change.interval.length; });
                this.invalidator.onContentInserted(change.subDocumentId, change.interval.start, -change.interval.length, false);
                break;
            }
            case enums_1.ModelChangeType.ParagraphMerged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphMerged", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", getPropertiesFromNext:" + change.getPropertiesFromNext; });
                this.invalidator.onContentInserted(change.subDocumentId, change.position, -1, true);
                break;
            }
            case enums_1.ModelChangeType.SectionMerged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.SectionMerged", function () { return "sectionIndex:" + change.sectionIndex + ", getPropertiesFromNext:" + change.getPropertiesFromNext; });
                this.invalidator.onChangedSections(change.sectionIndex, change.sectionIndex);
                break;
            }
            case enums_1.ModelChangeType.CharacterFormattingChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.CharacterFormattingChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_character_enums_1.JSONCharacterFormattingProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.CharacterPropertiesChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.CharacterPropertiesChanged", function () { return "subDocumentId:" + change.subDocumentId + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.ParagraphFormattingChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphFormattingChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_paragraph_enums_1.JSONParagraphFormattingProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                var interval = change.newState.interval;
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.fromPositions(Math.max(0, interval.start - 1), interval.end));
                break;
            }
            case enums_1.ModelChangeType.ParagraphPropertiesChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphPropertiesChanged", function () { return "subDocumentId:" + change.subDocumentId + ", paragraphIndex: " + change.paragraphIndex + "}"; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.paragraphInterval);
                break;
            }
            case enums_1.ModelChangeType.ParagraphAndCharacterMergedPropertiesReset: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphAndCharacterMergedPropertiesReset", function () { return "subDocumentId:" + change.subDocumentId + ", interval:" + log_obj_to_str_1.LogObjToStr.fixedInterval(change.interval); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.interval);
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxSizeChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchoredTextBoxSizeChanged", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.position, 1));
                break;
            }
            case enums_1.ModelChangeType.AnchoredTextBoxPropertiesChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchoredTextBoxPropertiesChanged", function () { return "subDocumentId:" + change.subDocumentId + ", position:" + change.position + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.position, 1));
                break;
            }
            case enums_1.ModelChangeType.AnchorInfoPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.AnchorInfoPropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_floating_enums_1.JSONAnchorInfoProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                if (change.property === json_floating_enums_1.JSONAnchorInfoProperty.ZOrder)
                    this.invalidator.onChangedAllLayout();
                else
                    this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.newState.interval.start, 1));
                break;
            }
            case enums_1.ModelChangeType.ShapeChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ShapePropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.newState.interval.start, 1));
                break;
            }
            case enums_1.ModelChangeType.ShapePropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ShapePropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_floating_enums_1.JSONShapeProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, new fixed_1.FixedInterval(change.newState.interval.start, 1));
                break;
            }
            case enums_1.ModelChangeType.CharacterStyleApplied: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.CharacterStyleApplied", function () { return "subDocumentId:" + change.subDocumentId + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemIntervalState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")(); });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.ParagraphStyleApplied: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphStyleApplied. subDocumentId:" + change.subDocumentId + ", newState:", change.newState);
                this.invalidator.onIntervalChanged(change.subDocumentId, change.newState.interval);
                break;
            }
            case enums_1.ModelChangeType.TableStyleChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableStyleChanged", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", newStyleName:" + change.newStyle.styleName; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.ParagraphNumberingListChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.ParagraphNumberingListChanged", function () { return "subDocumentId:" + change.subDocumentId + ", newState:" + log_obj_to_str_1.LogObjToStr.historyItemIntervalState(log_obj_to_str_1.LogObjToStr.historyItemIntervalStateObject, change.newState, "\t", "\n")() + ", oldAbstractNumberingListIndex: " + change.oldAbstractNumberingListIndex; });
                var intervals = [change.newState.interval];
                var intervalStart = change.newState.interval.start;
                var paragraphIndex = search_1.SearchUtils.normedInterpolationIndexOf(change.subDocument.paragraphs, function (p) { return p.startLogPosition.value; }, intervalStart);
                var newAbstractNumberingListIndex = change.subDocument.paragraphs[paragraphIndex].getAbstractNumberingListIndex();
                for (var i = paragraphIndex + 1, paragraph = void 0; paragraph = change.subDocument.paragraphs[i]; i++) {
                    var parAbstractNumberingListIndex = paragraph.getAbstractNumberingListIndex();
                    if (parAbstractNumberingListIndex === change.oldAbstractNumberingListIndex || parAbstractNumberingListIndex === newAbstractNumberingListIndex)
                        intervals.push(paragraph.interval);
                }
                var mergedIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, true);
                for (var _i = 0, mergedIntervals_1 = mergedIntervals; _i < mergedIntervals_1.length; _i++) {
                    var interval = mergedIntervals_1[_i];
                    this.invalidator.onIntervalChanged(change.subDocumentId, interval);
                }
                break;
            }
            case enums_1.ModelChangeType.TableCreated: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCreated", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableRemoved: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableRemoved", function () { return "subDocumentId:" + change.subDocumentId + ", startPosition:" + change.startPosition + ", endPosition:" + change.endPosition + ", nestedLevel:" + change.nestedLevel; });
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.fromPositions(change.startPosition, change.endPosition));
                break;
            }
            case enums_1.ModelChangeType.TableStartPositionShifted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableStartPositionShifted", function () { return "subDocumentId:" + change.subDocumentId + ", oldPosition:" + change.oldPosition + ", newPosition:" + change.newPosition + ", tableIndex:" + change.table.index; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableCellPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCellPropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_table_cell_enums_1.JSONServerTableCellProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemTableCellStateObject, change.newState, "\t", "\n")(); });
                for (var _a = 0, _b = change.newState.objects; _a < _b.length; _a++) {
                    var state = _b[_a];
                    this.invalidator.onIntervalChanged(change.subDocumentId, change.subDocument.tables[state.tableIndex].getTopLevelParent().interval);
                }
                break;
            }
            case enums_1.ModelChangeType.TablePropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TablePropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_table_enums_1.JSONEnumTableProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemTableStateObject, change.newState, "\t", "\n")(); });
                for (var _c = 0, _d = change.newState.objects; _c < _d.length; _c++) {
                    var state = _d[_c];
                    this.invalidator.onIntervalChanged(change.subDocumentId, change.subDocument.tables[state.tableIndex].getTopLevelParent().interval);
                }
                break;
            }
            case enums_1.ModelChangeType.TableRowPropertyChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableRowPropertyChanged", function () { return "subDocumentId:" + change.subDocumentId + ", property:" + json_table_row_enums_1.JSONServerTableRowProperty[change.property] + ", newState:\n" + log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemTableRowStateObject, change.newState, "\t", "\n")(); });
                for (var _e = 0, _f = change.newState.objects; _e < _f.length; _e++) {
                    var state = _f[_e];
                    this.invalidator.onIntervalChanged(change.subDocumentId, change.subDocument.tables[state.tableIndex].getTopLevelParent().interval);
                }
                break;
            }
            case enums_1.ModelChangeType.TableCellSplittedHorizontally: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCellSplittedHorizontally", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex + ", cellIndex:" + change.cellIndex + ", rightDirection:" + change.rightDirection; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableCellMergedHorizontally: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCellMergedHorizontally", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex + ", cellIndex:" + change.cellIndex + ", rightDirection:" + change.rightDirection; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableRowInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableRowInserted", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableRowRemoved: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableRowRemoved", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableCellRemoved: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCellRemoved", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex + ", cellIndex:" + change.cellIndex; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.TableCellInserted: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.TableCellInserted", function () { return "subDocumentId:" + change.subDocumentId + ", tableIndex:" + change.table.index + ", rowIndex:" + change.rowIndex + ", cellIndex:" + change.cellIndex; });
                this.invalidator.onIntervalChanged(change.subDocumentId, change.table.getTopLevelParent().interval);
                break;
            }
            case enums_1.ModelChangeType.DocumentProtectionChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.DocumentProtectionChanged", "enforceProtection:" + change.documentProtectionProperties.enforceProtection);
                this.invalidator.onChangedAllLayout();
                break;
            }
            case enums_1.ModelChangeType.RangePermissionsChanged: {
                log_1.Log.print(log_source_1.LogSource.LayoutFormatterNotifier, "modelChanged.RangePermissionsChanged", function () { return "subDocumentId:" + change.subDocumentId + ",  interval:" + log_obj_to_str_1.LogObjToStr.fixedInterval(change.permission.interval) + ", userName:" + change.permission.userName + ", group:" + change.permission.group; });
                this.invalidator.onIntervalChanged(change.subDocumentId, fixed_1.FixedInterval.makeByConstInterval(change.permission.interval));
                break;
            }
        }
    };
    return ModelChangesListener;
}());
exports.ModelChangesListener = ModelChangesListener;
