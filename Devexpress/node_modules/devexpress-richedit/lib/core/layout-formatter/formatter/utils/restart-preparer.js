"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var document_layout_details_level_1 = require("../../../layout/document-layout-details-level");
var layout_position_1 = require("../../../layout/layout-position");
var layout_box_1 = require("../../../layout/main-structures/layout-boxes/layout-box");
var layout_page_1 = require("../../../layout/main-structures/layout-page");
var column_change_1 = require("../../changes/changes/column-change");
var layout_change_base_1 = require("../../changes/changes/layout-change-base");
var page_area_change_1 = require("../../changes/changes/page-area-change");
var page_change_1 = require("../../changes/changes/page-change");
var enums_1 = require("../enums");
var last_row_info_1 = require("./last-row-info");
var RestartPreparer = (function () {
    function RestartPreparer(manager) {
        this.manager = manager;
    }
    RestartPreparer.prototype.restartCommonPart = function (modelPosition) {
        if (this.manager.mainFormatter.rowFormatter.getPosition() < modelPosition) {
            this.manager.mainFormatter.rowFormatter.iterator.setPosition(this.manager.mainFormatter.rowFormatter.getPosition(), true, true);
            return false;
        }
        this.manager.mainFormatter.rowFormatter.numberingListCountersManager.reset();
        this.manager.mainFormatter.rowFormatter.setPosition(modelPosition, true, true);
        return true;
    };
    RestartPreparer.prototype.restartFromPage = function (pageIndex, isRestartNow, resetTableFormatter) {
        var modelPosition = layout_page_1.LayoutPage.getPrevPageLastPostion(this.manager, pageIndex);
        if (!this.restartCommonPart(modelPosition))
            return;
        var newLp = new layout_position_1.LayoutPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.None);
        newLp.pageIndex = pageIndex;
        var newLastRowInfo = new last_row_info_1.LastRowInfo(this.manager.mainFormatter.rowFormatter.subDocument.paragraphs);
        var prevPage = this.manager.layout.pages[pageIndex - 1];
        if (!prevPage)
            newLastRowInfo.reset(this.manager.mainFormatter.rowFormatter);
        else {
            var pageArea = list_1.ListUtils.last(prevPage.mainSubDocumentPageAreas);
            var column = pageArea.getLastColumn();
            newLastRowInfo.setRowInfo(column.getLastRow(), prevPage.getPosition() + pageArea.pageOffset + column.pageAreaOffset, false);
        }
        var boundsCalculator = this.manager.boundsCalculator;
        boundsCalculator.init(this.manager.model.getSectionByPosition(modelPosition));
        this.manager.mainFormatter.setParamsForRestart(enums_1.LayoutFormatterState.PageStart, newLp, newLastRowInfo, resetTableFormatter);
        if (isRestartNow)
            this.manager.runFormatting(pageIndex);
    };
    RestartPreparer.prototype.restartHeaderFooterInternal = function (subDocument, pageIndex) {
        var page = this.manager.layout.pages[pageIndex];
        this.manager.changesManager.addPageChange(new page_change_1.PageChange(pageIndex, layout_change_base_1.LayoutChangeType.Updated, [], []));
        if (subDocument.isHeader())
            this.manager.otherPageAreaFormatter.formatHeaderPageArea(page, subDocument.info);
        else
            this.manager.otherPageAreaFormatter.formatFooterPageArea(page, subDocument.info);
        this.manager.onPagesReady();
        this.restartFromPage(pageIndex, true, true);
    };
    RestartPreparer.prototype.restartFormatingAllLayout = function () {
        while (this.manager.layout.pages.shift())
            this.manager.changesManager.addPageChange(new page_change_1.PageChange(0, layout_change_base_1.LayoutChangeType.Deleted, [], []));
        this.manager.layout.setEmptyLayout(this.manager.model.pageBackColor);
        this.manager.mainFormatter.rowFormatter.setPosition(0, true, true);
        this.manager.mainFormatter.rowFormatter.numberingListCountersManager.reset();
        var newLastRow = new last_row_info_1.LastRowInfo(this.manager.mainFormatter.rowFormatter.subDocument.paragraphs);
        newLastRow.reset(this.manager.mainFormatter.rowFormatter);
        this.manager.mainFormatter.setParamsForRestart(enums_1.LayoutFormatterState.DocumentStart, null, newLastRow, true);
        this.manager.runFormatting(0);
    };
    RestartPreparer.prototype.restartByAnchoredObject = function (page) {
        var pageIndex = page.index;
        var subDocument = this.manager.mainFormatter.subDocument;
        if (!subDocument.tables.length)
            return this.restartFromPage(pageIndex, false, true);
        var lp = new layout_position_1.LayoutPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Page);
        lp.pageIndex = pageIndex;
        lp.page = page;
        var table = this.manager.invalidator.isPageStartWithMultipageTable(page);
        if (!table) {
            if (!this.manager.mainFormatter.tableFormatter || this.manager.activeFormatter.subDocument.isMain())
                return this.restartFromPage(pageIndex, false, true);
            return this.restartFromPage(pageIndex, false, false);
        }
        labelEnd: for (lp.pageAreaIndex = 0; lp.pageArea = lp.page.mainSubDocumentPageAreas[lp.pageAreaIndex]; lp.pageAreaIndex++) {
            for (lp.columnIndex = 0; lp.column = lp.pageArea.columns[lp.columnIndex]; lp.columnIndex++) {
                for (lp.rowIndex = 0; lp.row = lp.column.rows[lp.rowIndex]; lp.rowIndex++) {
                    if (!lp.row.tableCellInfo ||
                        lp.row.tableCellInfo.parentRow.parentTable.getTopLevelColumn().logicInfo.grid.table.index != table.index)
                        break labelEnd;
                }
            }
        }
        if (!lp.pageArea || !lp.column || !lp.row)
            return this.restartFromPage(pageIndex, false, true);
        this.restartFromRow(lp, this.manager.invalidator.getStartModelPositionOfRow(lp), false, false);
        this.manager.floatingRestartInfoHolder.init();
    };
    RestartPreparer.prototype.restartFromRow = function (lp, modelPosition, isRestartNow, removePrevAncObjects) {
        if (removePrevAncObjects === void 0) { removePrevAncObjects = true; }
        if (lp.isFirstRowOnPage())
            return this.restartFromPage(lp.page.index, isRestartNow, true);
        var mainFormatter = this.manager.mainFormatter;
        var newLastRowInfo = new last_row_info_1.LastRowInfo(mainFormatter.rowFormatter.subDocument.paragraphs);
        var prevRowLP = lp.clone();
        if (prevRowLP.advanceToPrevRow(this.manager.layout)) {
            newLastRowInfo.setRowInfo(prevRowLP.row, lp.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Column) + prevRowLP.row.columnOffset, true);
        }
        else {
            newLastRowInfo.setRowInfo(null, 0, true);
        }
        if (!this.restartCommonPart(modelPosition))
            return;
        var pageChange = this.createNewLayoutPage(lp, modelPosition);
        if (removePrevAncObjects) {
            var ancPosInfo_1 = this.manager.layout.anchorObjectsPositionInfo;
            var rowPos_1 = this.manager.invalidator.getStartModelPositionOfRow(lp);
            lp.page.anchoredObjectHolder.objects = number_1.NumberMapUtils.reducedMap(lp.page.anchoredObjectHolder.objects, function (obj) {
                if (ancPosInfo_1.getPosition(obj.objectId) >= rowPos_1) {
                    if (obj.getType() == layout_box_1.LayoutBoxType.AnchorTextBox) {
                        var id = obj.internalSubDocId;
                        delete lp.page.otherPageAreas[id];
                        pageChange.otherPageAreaChanges.push(new page_area_change_1.PageAreaChange(id, layout_change_base_1.LayoutChangeType.Deleted));
                    }
                    else
                        pageChange.anchoredPictureChanges.push(new layout_change_base_1.AnchoredPictureChange(obj.objectId, layout_change_base_1.LayoutChangeType.Deleted));
                    return null;
                }
                else
                    return obj;
            });
        }
        this.setBoundsCalculatorState(modelPosition, lp.page, lp.pageIndex);
        var boundsCalculator = this.manager.boundsCalculator;
        var pageAreaBounds = list_1.ListUtils.last(boundsCalculator.mainPageAreasBounds);
        var columnsBounds = list_1.ListUtils.last(boundsCalculator.mainColumnsBounds);
        mainFormatter.setBoundsForRestart(pageAreaBounds, columnsBounds);
        var bounds = new fixed_1.FixedInterval(lp.pageArea.x + columnsBounds[lp.columnIndex].x, columnsBounds[lp.columnIndex].width);
        mainFormatter.layoutRowBoundsCalculator.resetByColumn(lp.page.anchoredObjectHolder.objects, bounds, false);
        mainFormatter.setParamsForRestart(enums_1.LayoutFormatterState.RowFormatting, lp, newLastRowInfo, true);
        if (isRestartNow)
            this.manager.runFormatting(lp.page.index);
    };
    RestartPreparer.prototype.setBoundsCalculatorState = function (modelPosition, page, pageIndex) {
        var boundsCalculator = this.manager.boundsCalculator;
        boundsCalculator.init(this.manager.model.getSectionByPosition(modelPosition));
        var prevPage = this.manager.layout.pages[pageIndex - 1];
        boundsCalculator.calculatePageBounds(prevPage ? prevPage.bottom : 0);
        var layoutOtherPageAreasInfo = page.getLayoutOtherPageAreasInfo();
        if (layoutOtherPageAreasInfo.headerPageArea)
            boundsCalculator.setHeaderBounds(layoutOtherPageAreasInfo.headerPageArea.columns[0].height);
        if (layoutOtherPageAreasInfo.footerPageArea)
            boundsCalculator.setFooterBounds(layoutOtherPageAreasInfo.footerPageArea.columns[0].height);
        boundsCalculator.calculateMainPageAreaBounds(-1);
        boundsCalculator.calculateColumnBounds(boundsCalculator.mainPageAreasBounds[boundsCalculator.mainPageAreasBounds.length - 1]);
    };
    RestartPreparer.prototype.createNewLayoutPage = function (lp, modelPosition) {
        var pageChange = new page_change_1.PageChange(lp.pageIndex, layout_change_base_1.LayoutChangeType.Updated, [], []);
        lp.page = lp.page.deepCopy();
        lp.pageArea = lp.page.mainSubDocumentPageAreas[lp.pageAreaIndex];
        lp.column = lp.pageArea.columns[lp.columnIndex];
        lp.row = lp.column.rows[lp.rowIndex];
        this.manager.removeRedundantHelper.removeRedundantPageAreas(lp.page, lp.pageAreaIndex + 1, pageChange);
        var pageAreaChange = new page_area_change_1.PageAreaChange(lp.pageAreaIndex, layout_change_base_1.LayoutChangeType.Updated);
        pageChange.mainPageAreaChanges.push(pageAreaChange);
        this.manager.removeRedundantHelper.removeRedundantColumnsFromArea(lp.pageArea, lp.columnIndex + 1, pageAreaChange);
        var columnChange = new column_change_1.ColumnChange(lp.columnIndex, layout_change_base_1.LayoutChangeType.Updated);
        pageAreaChange.columnChanges.push(columnChange);
        this.manager.removeRedundantHelper.removeRedundantRowsFromColumn(lp.column, lp.rowIndex, columnChange);
        var tblIndex = list_1.ListUtils.indexBy(lp.column.tablesInfo, function (tbl) { return tbl.logicInfo.grid.table.getStartPosition() >= modelPosition; });
        this.manager.removeRedundantHelper.removeRedundantTableInfosFromColumn(lp.column, tblIndex == -1 ? lp.column.tablesInfo.length : tblIndex, columnChange);
        return pageChange;
    };
    return RestartPreparer;
}());
exports.RestartPreparer = RestartPreparer;
