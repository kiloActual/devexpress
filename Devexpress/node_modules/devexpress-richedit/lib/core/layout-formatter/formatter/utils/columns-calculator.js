"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var ColumnCalculator = (function () {
    function ColumnCalculator() {
    }
    ColumnCalculator.generateSectionColumns = function (properties) {
        var availablePageWidth = properties.pageWidth - (properties.marginLeft + properties.marginRight + properties.space * (properties.columnCount - 1));
        var availablePageHeight = properties.pageHeight - (properties.marginTop + properties.marginBottom);
        var columnOffsetX = properties.marginLeft;
        var sectionColumns = [];
        for (var i = 0; i < properties.columnCount; i++) {
            var columnWidth = Math.max(properties.equalWidthColumns ? Math.floor(availablePageWidth / (properties.columnCount - i)) : properties.columnsInfo[i].width, 1);
            var column = new rectangle_1.Rectangle(unit_converter_1.UnitConverter.twipsToPixelsF(columnOffsetX), unit_converter_1.UnitConverter.twipsToPixelsF(properties.marginTop), Math.max(unit_converter_1.UnitConverter.twipsToPixelsF(columnWidth), 1), unit_converter_1.UnitConverter.twipsToPixelsF(availablePageHeight));
            sectionColumns.push(column);
            columnOffsetX += columnWidth + (properties.equalWidthColumns ? properties.space : properties.columnsInfo[i].space);
            availablePageWidth -= columnWidth;
        }
        return sectionColumns;
    };
    ColumnCalculator.findMinimalColumnSize = function (properties) {
        return list_1.ListUtils.min(ColumnCalculator.generateSectionColumns(properties), function (a) { return a.width; }).createSize();
    };
    return ColumnCalculator;
}());
exports.ColumnCalculator = ColumnCalculator;
