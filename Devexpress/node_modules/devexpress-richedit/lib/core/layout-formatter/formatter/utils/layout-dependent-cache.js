"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var page_changes_collector_1 = require("../../changes/engine/page-changes-collector");
var LayoutDependentRunCache = (function () {
    function LayoutDependentRunCache(manager) {
        this.manager = manager;
        this.reset();
    }
    LayoutDependentRunCache.prototype.reset = function () {
        this.cache = {};
    };
    LayoutDependentRunCache.prototype.add = function (pageIndex, subDocId) {
        var val = this.cache[pageIndex];
        if (!val)
            this.cache[pageIndex] = [subDocId];
        else if (!list_1.ListUtils.unsafeAnyOf(val, function (v) { return v == subDocId; }))
            val.push(subDocId);
    };
    LayoutDependentRunCache.prototype.recalculateHeaderFooterPageAreas = function () {
        var _this = this;
        var pages = this.manager.layout.pages;
        number_1.NumberMapUtils.forEach(this.cache, function (listOfSubDocId, pageIndex) {
            var page = pages[pageIndex];
            if (!page)
                return;
            var oldPageAreas = number_1.NumberMapUtils.shallowCopy(page.otherPageAreas);
            list_1.ListUtils.forEach(listOfSubDocId, function (subDocId) {
                var pageArea = page.otherPageAreas[subDocId];
                if (!pageArea || !pageArea.subDocument.isHeaderFooter())
                    return;
                var section = _this.manager.model.sections[page.startPageSectionIndex];
                _this.manager.boundsCalculator.init(section);
                if (pageArea.subDocument.isHeader())
                    _this.manager.otherPageAreaFormatter.formatHeaderPageArea(page, pageArea.subDocument.info);
                else
                    _this.manager.otherPageAreaFormatter.formatFooterPageArea(page, pageArea.subDocument.info);
            });
            _this.manager.changesManager.addPageChange(page_changes_collector_1.PageChangesCollector.collectHeaderFooterChanges(pageIndex, oldPageAreas, page.otherPageAreas));
        });
    };
    return LayoutDependentRunCache;
}());
exports.LayoutDependentRunCache = LayoutDependentRunCache;
