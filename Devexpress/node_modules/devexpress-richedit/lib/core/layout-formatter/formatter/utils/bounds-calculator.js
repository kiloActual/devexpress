"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var browser_1 = require("@devexpress/utils/lib/browser");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var rectangle_1 = require("@devexpress/utils/lib/geometry/rectangle");
var list_1 = require("@devexpress/utils/lib/utils/list");
var BoundsCalculator = (function () {
    function BoundsCalculator() {
    }
    BoundsCalculator.prototype.init = function (section) {
        this.section = section;
        var sectionProperties = this.section.sectionProperties;
        this.equalWidthColumns = sectionProperties.equalWidthColumns;
        this.columnCount = sectionProperties.columnCount;
        this.space = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.space);
        this.marginTop = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.marginTop);
        this.marginBottom = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.marginBottom);
        if (browser_1.Browser.Safari) {
            var correctedTop = Math.floor(this.marginTop);
            this.marginBottom -= this.marginTop - correctedTop;
            this.marginTop = correctedTop;
        }
        this.marginRight = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.marginRight);
        this.marginBottom = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.marginBottom);
        this.marginLeft = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.marginLeft);
        this.pageWidth = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.pageWidth);
        this.pageHeight = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.pageHeight);
        this.headerOffset = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.headerOffset);
        this.footerOffset = unit_converter_1.UnitConverter.twipsToPixelsF(sectionProperties.footerOffset);
        this.columnsInfo = list_1.ListUtils.map(sectionProperties.columnsInfo, function (columnProps) { return columnProps.clone().applyConverter(unit_converter_1.UnitConverter.twipsToPixelsF); });
        this.avaliablePageHeight = this.pageHeight - (this.marginTop + this.marginBottom);
        this.availableHeaderFooterWidth = this.pageWidth - this.marginLeft - this.marginRight;
    };
    BoundsCalculator.prototype.initWhenPageStart = function () {
        this.mainPageAreasBounds = [];
        this.mainColumnsBounds = [];
    };
    BoundsCalculator.prototype.setHeaderBounds = function (currHeight) {
        if (currHeight == 0) {
            this.headerPageAreaBounds = null;
            this.headerColumnBounds = null;
            return;
        }
        var height = currHeight == -1 ? Number.MAX_VALUE :
            Math.max(this.marginTop - this.headerOffset, Math.min(Math.floor(this.pageHeight * BoundsCalculator.MAX_HEADER_FOOTER_HEIGHT_COEFF), currHeight));
        this.headerPageAreaBounds = new rectangle_1.Rectangle(this.marginLeft, this.headerOffset, this.availableHeaderFooterWidth, height);
        this.headerColumnBounds = new rectangle_1.Rectangle(0, 0, this.headerPageAreaBounds.width, this.headerPageAreaBounds.height);
    };
    BoundsCalculator.prototype.setFooterBounds = function (currHeight) {
        if (currHeight == 0) {
            this.footerPageAreaBounds = null;
            this.footerColumnBounds = null;
            return;
        }
        if (currHeight == -1) {
            this.footerPageAreaBounds = new rectangle_1.Rectangle(this.marginLeft, this.pageHeight - this.footerOffset, this.availableHeaderFooterWidth, Number.MAX_VALUE);
            this.footerColumnBounds = new rectangle_1.Rectangle(0, 0, this.footerPageAreaBounds.width, this.footerPageAreaBounds.height);
        }
        else {
            currHeight = Math.min(Math.round(this.pageHeight * BoundsCalculator.MAX_HEADER_FOOTER_HEIGHT_COEFF), currHeight);
            var pageAreaHeight = Math.max(this.marginBottom - this.footerOffset, currHeight);
            this.footerPageAreaBounds = new rectangle_1.Rectangle(this.marginLeft, this.pageHeight - pageAreaHeight - this.footerOffset, this.availableHeaderFooterWidth, pageAreaHeight);
            this.footerColumnBounds = new rectangle_1.Rectangle(0, pageAreaHeight - currHeight, this.footerPageAreaBounds.width, currHeight);
        }
    };
    BoundsCalculator.prototype.calculateMainPageAreaBounds = function (previousMainPageAreaHeight) {
        var y;
        if (previousMainPageAreaHeight > 0) {
            var previousPageAreaBounds = this.mainPageAreasBounds[this.mainPageAreasBounds.length - 1];
            for (var _i = 0, _a = this.mainColumnsBounds[this.mainColumnsBounds.length - 1]; _i < _a.length; _i++) {
                var colBound = _a[_i];
                colBound.height = previousMainPageAreaHeight;
            }
            previousPageAreaBounds.height = previousMainPageAreaHeight;
            y = previousPageAreaBounds.bottom;
        }
        else
            y = Math.max(this.marginTop, this.headerPageAreaBounds ? this.headerPageAreaBounds.bottom : 0);
        var height = Math.min(this.pageHeight - this.marginBottom, this.footerPageAreaBounds ? this.footerPageAreaBounds.y : Number.MAX_VALUE) - y;
        this.mainPageAreasBounds.push(new rectangle_1.Rectangle(this.marginLeft, y, this.availableHeaderFooterWidth, height));
    };
    BoundsCalculator.prototype.calculateColumnBounds = function (pageAreaBounds) {
        if (this.equalWidthColumns) {
            var oneColumnWidth_1 = Math.floor((this.availableHeaderFooterWidth - (this.columnCount - 1) * this.space) / this.columnCount);
            var colWidthPlusSpace_1 = oneColumnWidth_1 + this.space;
            this.mainColumnsBounds.push(list_1.ListUtils.initByCallback(this.columnCount, function (columnIndex) {
                return new rectangle_1.Rectangle(colWidthPlusSpace_1 * columnIndex, 0, oneColumnWidth_1, pageAreaBounds.height);
            }));
        }
        else {
            var currXPos_1 = 0;
            this.mainColumnsBounds.push(list_1.ListUtils.map(this.columnsInfo, function (columnInfo) {
                var rect = new rectangle_1.Rectangle(currXPos_1, 0, Math.max(1, columnInfo.width), pageAreaBounds.height);
                currXPos_1 += columnInfo.width + columnInfo.space;
                return rect;
            }));
        }
    };
    BoundsCalculator.prototype.calculatePageBounds = function (y) {
        this.pageBounds = new rectangle_1.Rectangle(0, y, this.pageWidth, this.pageHeight);
    };
    BoundsCalculator.MAX_HEADER_FOOTER_HEIGHT_COEFF = 0.48;
    return BoundsCalculator;
}());
exports.BoundsCalculator = BoundsCalculator;
