"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var FloatingRestartInfoHolder = (function () {
    function FloatingRestartInfoHolder() {
        this.anchorRestartFromPageIndex = -1;
        this.oldAnchorObjectsFromPage = {};
        this.oldOtherTextBoxPageAreas = {};
        this.init();
    }
    FloatingRestartInfoHolder.prototype.init = function () {
        this.anchorRestartFromPageIndex = -1;
        this.oldAnchorObjectsFromPage = {};
        this.oldOtherTextBoxPageAreas = {};
    };
    FloatingRestartInfoHolder.prototype.storeInfo = function (lp) {
        this.anchorRestartFromPageIndex = lp.pageIndex;
        this.oldAnchorObjectsFromPage = lp.page.anchoredObjectHolder.objects;
        this.oldOtherTextBoxPageAreas = number_1.NumberMapUtils.reducedMap(lp.page.otherPageAreas, function (pa) {
            return pa.subDocument.isTextBox() ? pa : null;
        });
    };
    Object.defineProperty(FloatingRestartInfoHolder.prototype, "isRestartByAnchorObjects", {
        get: function () {
            return this.anchorRestartFromPageIndex != -1;
        },
        enumerable: true,
        configurable: true
    });
    FloatingRestartInfoHolder.prototype.setCalculatedObjects = function (lp) {
        if (this.isRestartByAnchorObjects) {
            if (this.anchorRestartFromPageIndex == lp.pageIndex) {
                lp.page.anchoredObjectHolder.objects = this.oldAnchorObjectsFromPage;
                number_1.NumberMapUtils.forEach(this.oldOtherTextBoxPageAreas, function (textBoxPA) {
                    return lp.page.otherPageAreas[textBoxPA.subDocument.id] = textBoxPA;
                });
            }
            this.init();
        }
    };
    return FloatingRestartInfoHolder;
}());
exports.FloatingRestartInfoHolder = FloatingRestartInfoHolder;
