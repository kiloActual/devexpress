"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var column_change_1 = require("../../changes/changes/column-change");
var layout_change_base_1 = require("../../changes/changes/layout-change-base");
var page_area_change_1 = require("../../changes/changes/page-area-change");
var page_change_1 = require("../../changes/changes/page-change");
var RemoveRedundantHelper = (function () {
    function RemoveRedundantHelper(changesManager) {
        this.changesManager = changesManager;
    }
    RemoveRedundantHelper.removeRendundant = function (fromIndex, list, pushChange) {
        var result = fromIndex < list.length;
        for (var index = list.length - 1; index >= fromIndex; index--) {
            list.pop();
            pushChange(index);
        }
        return result;
    };
    RemoveRedundantHelper.prototype.removeRedundantPage = function (layout, firstRendundantPageIndex) {
        var _this = this;
        return RemoveRedundantHelper.removeRendundant(firstRendundantPageIndex, layout.pages, function (index) { return _this.changesManager.addPageChange(new page_change_1.PageChange(index, layout_change_base_1.LayoutChangeType.Deleted, [], [])); });
    };
    RemoveRedundantHelper.prototype.removeRedundantPageAreas = function (page, firstRendundantPageAreaIndex, pageChange) {
        return RemoveRedundantHelper.removeRendundant(firstRendundantPageAreaIndex, page.mainSubDocumentPageAreas, function (index) { return pageChange.mainPageAreaChanges.push(new page_area_change_1.PageAreaChange(index, layout_change_base_1.LayoutChangeType.Deleted, [])); });
    };
    RemoveRedundantHelper.prototype.removeRedundantColumnsFromArea = function (pageArea, firstRedundantColumnIndex, pageAreaChange) {
        return RemoveRedundantHelper.removeRendundant(firstRedundantColumnIndex, pageArea.columns, function (index) { return pageAreaChange.columnChanges.push(new column_change_1.ColumnChange(index, layout_change_base_1.LayoutChangeType.Deleted, [], [], [])); });
    };
    RemoveRedundantHelper.prototype.removeRedundantRowsFromColumn = function (column, firstRendundantRowIndex, columnChange) {
        return RemoveRedundantHelper.removeRendundant(firstRendundantRowIndex, column.rows, function (index) { return columnChange.rowChanges.push(new layout_change_base_1.RowChange(index, layout_change_base_1.LayoutChangeType.Deleted)); });
    };
    RemoveRedundantHelper.prototype.removeRedundantTableInfosFromColumn = function (column, firstRendundantTableIndex, columnChange) {
        return RemoveRedundantHelper.removeRendundant(firstRendundantTableIndex, column.tablesInfo, function (index) { return columnChange.tableChanges.push(new layout_change_base_1.TableChange(index, layout_change_base_1.LayoutChangeType.Deleted)); });
    };
    return RemoveRedundantHelper;
}());
exports.RemoveRedundantHelper = RemoveRedundantHelper;
