"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var polygon_1 = require("@devexpress/utils/lib/geometry/polygon");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var layout_anchored_object_box_1 = require("../../layout/main-structures/layout-boxes/layout-anchored-object-box");
var comparers_1 = require("../../model/manipulators/floating-objects/comparers");
var sub_document_1 = require("../../model/sub-document");
var SubGroupType;
(function (SubGroupType) {
    SubGroupType[SubGroupType["HeaderFooterSubDoc_Behind"] = 0] = "HeaderFooterSubDoc_Behind";
    SubGroupType[SubGroupType["HeaderFooterSubDoc_InText"] = 1] = "HeaderFooterSubDoc_InText";
    SubGroupType[SubGroupType["HeaderFooterSubDoc_InFront"] = 2] = "HeaderFooterSubDoc_InFront";
    SubGroupType[SubGroupType["MainSubDoc_Behind"] = 3] = "MainSubDoc_Behind";
    SubGroupType[SubGroupType["MainSubDoc_InText"] = 4] = "MainSubDoc_InText";
    SubGroupType[SubGroupType["MainSubDoc_InFront"] = 5] = "MainSubDoc_InFront";
})(SubGroupType || (SubGroupType = {}));
var RenderLevelCalculator = (function () {
    function RenderLevelCalculator() {
        this.maxRenderLevels = Math.max(RenderLevelCalculator.subGroupTypes.length, 9);
        this.realGroupLevelsBounds = [];
        this.renderGroupLevelsBounds = [];
    }
    Object.defineProperty(RenderLevelCalculator.prototype, "mainPageAreaLevel", {
        get: function () { return this.realGroupLevelsBounds[SubGroupType.MainSubDoc_InText]; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RenderLevelCalculator.prototype, "headerFooterPageAreasLevel", {
        get: function () { return this.realGroupLevelsBounds[SubGroupType.HeaderFooterSubDoc_InText]; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RenderLevelCalculator.prototype, "renderMainPageAreaLevel", {
        get: function () { return this.renderGroupLevelsBounds[SubGroupType.MainSubDoc_InText]; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(RenderLevelCalculator.prototype, "renderHeaderFooterPageAreasLevel", {
        get: function () { return this.renderGroupLevelsBounds[SubGroupType.HeaderFooterSubDoc_InText]; },
        enumerable: true,
        configurable: true
    });
    ;
    RenderLevelCalculator.prototype.getRenderLevel = function (realLevel) {
        var groupLevelInd = list_1.ListUtils.indexBy(this.realGroupLevelsBounds, function (b) { return realLevel < b; }, 1) - 1;
        var maxOffset = this.renderGroupLevelsBounds[groupLevelInd + 1] - this.renderGroupLevelsBounds[groupLevelInd] - 1;
        var offsetInGroup = Math.min(realLevel - this.realGroupLevelsBounds[groupLevelInd], maxOffset);
        return this.renderGroupLevelsBounds[groupLevelInd] + offsetInGroup;
    };
    RenderLevelCalculator.prototype.calcLevels = function (pageAnchoredObjectHolder, anchorObjectsPositionInfo) {
        if (number_1.NumberMapUtils.isEmpty(pageAnchoredObjectHolder.objects)) {
            this.realGroupLevelsBounds = [0, 1, 2, 3, 4, 5, 6];
            this.renderGroupLevelsBounds = [0, 1, 2, 3, 4, 5, 6];
            return;
        }
        var objects = this.getObjects(pageAnchoredObjectHolder, anchorObjectsPositionInfo);
        var groups = this.getGroups(objects);
        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {
            var group = groups_1[_i];
            var _loop_1 = function (subGroupType) {
                var subGroup = group.subGroups[subGroupType];
                if (subGroup && subGroup.objects) {
                    var groupStartLevel_1 = this_1.realGroupLevelsBounds[subGroupType];
                    list_1.ListUtils.forEach(number_1.NumberMapUtils.toList(subGroup.objects).sort(function (a, b) { return a.index - b.index; }), function (obj, objInd) {
                        obj.obj.rendererLevel = groupStartLevel_1 + objInd;
                    });
                }
            };
            var this_1 = this;
            for (var _a = 0, _b = RenderLevelCalculator.subGroupTypes; _a < _b.length; _a++) {
                var subGroupType = _b[_a];
                _loop_1(subGroupType);
            }
        }
    };
    RenderLevelCalculator.prototype.getObjects = function (pageAnchoredObjectHolder, anchorObjectsPositionInfo) {
        var objsForRenderer = number_1.NumberMapUtils.toList(pageAnchoredObjectHolder.objects)
            .sort(comparers_1.getLayoutAnchoredObjectBoxInitialComparer(anchorObjectsPositionInfo));
        var objects = list_1.ListUtils.map(objsForRenderer, function (obj, ind) { return new UnfoldedObjectInfo(obj, ind); });
        list_1.ListUtils.forEach(objects, function (obj, ind) {
            list_1.ListUtils.forEach(objects, function (subObj) {
                if (subObj.intersections[obj.index])
                    obj.intersections[subObj.index] = subObj;
            }, 0, ind);
            list_1.ListUtils.forEach(objects, function (subObj) {
                if (polygon_1.Polygon.collision(obj.obj.getRotatedPolygon(), subObj.obj.getRotatedPolygon()) != polygon_1.CollisionResult.None)
                    obj.intersections[subObj.index] = subObj;
            }, ind);
        });
        return objects;
    };
    RenderLevelCalculator.prototype.getGroups = function (objects) {
        var groups = [];
        var _loop_2 = function (obj) {
            if (!obj.group) {
                obj.group = new Group();
                obj.group.objects[obj.index] = obj;
                groups.push(obj.group);
            }
            number_1.NumberMapUtils.forEach(obj.intersections, function (intersObj) {
                obj.group.objects[intersObj.index] = intersObj;
                intersObj.group = obj.group;
            });
        };
        for (var _i = 0, objects_1 = objects; _i < objects_1.length; _i++) {
            var obj = objects_1[_i];
            _loop_2(obj);
        }
        for (var _a = 0, groups_2 = groups; _a < groups_2.length; _a++) {
            var group = groups_2[_a];
            group.fillSubGroups();
        }
        this.fillGroupsBounds(objects, groups);
        return groups;
    };
    RenderLevelCalculator.prototype.fillGroupsBounds = function (objects, groups) {
        var numObjOnSubGroup = RenderLevelCalculator.subGroupTypes.map(function (subGroupType) {
            return list_1.ListUtils.maxExtended(groups, function (group) {
                var subGroup = group.subGroups[subGroupType];
                return subGroup ? subGroup.numObjects : 0;
            }).maxValue;
        });
        var haveHeaderFooter = list_1.ListUtils.unsafeAnyOf(objects, function (obj) { return obj.obj.belongsToSubDocId != sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID; });
        if (haveHeaderFooter)
            numObjOnSubGroup[SubGroupType.HeaderFooterSubDoc_InText]++;
        numObjOnSubGroup[SubGroupType.MainSubDoc_InText]++;
        this.realGroupLevelsBounds = this.translateToBounds(numObjOnSubGroup);
        this.renderGroupLevelsBounds = this.translateToBounds(this.reduceLevels(numObjOnSubGroup));
    };
    RenderLevelCalculator.prototype.translateToBounds = function (list) {
        var result = [];
        var currLevel = 0;
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var numObjs = list_2[_i];
            result.push(currLevel);
            currLevel += numObjs;
        }
        result.push(currLevel);
        return result;
    };
    RenderLevelCalculator.prototype.reduceLevels = function (numObjOnSubGroup) {
        var lvls = list_1.ListUtils.shallowCopy(numObjOnSubGroup);
        var sumObjs = list_1.ListUtils.accumulateNumber(lvls, function (v) { return v; });
        var order = RenderLevelCalculator.reduceRenderOrder;
        for (var indInReducer = 0; sumObjs > this.maxRenderLevels; indInReducer++) {
            if (indInReducer >= order.length)
                indInReducer = 0;
            if (lvls[order[indInReducer]] > 1) {
                lvls[order[indInReducer]]--;
                sumObjs--;
            }
        }
        return lvls;
    };
    RenderLevelCalculator.subGroupTypes = [
        SubGroupType.HeaderFooterSubDoc_Behind,
        SubGroupType.HeaderFooterSubDoc_InText,
        SubGroupType.HeaderFooterSubDoc_InFront,
        SubGroupType.MainSubDoc_Behind,
        SubGroupType.MainSubDoc_InText,
        SubGroupType.MainSubDoc_InFront
    ];
    RenderLevelCalculator.reduceRenderOrder = [
        SubGroupType.HeaderFooterSubDoc_Behind,
        SubGroupType.HeaderFooterSubDoc_InFront,
        SubGroupType.HeaderFooterSubDoc_InText,
        SubGroupType.MainSubDoc_Behind,
        SubGroupType.MainSubDoc_InText,
        SubGroupType.MainSubDoc_InFront
    ];
    return RenderLevelCalculator;
}());
exports.RenderLevelCalculator = RenderLevelCalculator;
var SubGroup = (function () {
    function SubGroup() {
        this.objects = {};
        this.numObjects = 0;
    }
    SubGroup.prototype.addObject = function (obj) {
        this.objects[obj.index] = obj;
        this.numObjects++;
    };
    return SubGroup;
}());
var Group = (function () {
    function Group() {
        this.objects = {};
        this.subGroups = {};
    }
    Group.prototype.fillSubGroups = function () {
        var _this = this;
        number_1.NumberMapUtils.forEach(this.objects, function (obj) {
            var subGroupType = _this.getObjSubGroupType(obj);
            var subGroup = _this.subGroups[subGroupType];
            if (!subGroup)
                subGroup = _this.subGroups[subGroupType] = new SubGroup();
            subGroup.addObject(obj);
        });
    };
    Group.prototype.getObjSubGroupType = function (obj) {
        var offset = obj.obj.belongsToSubDocId == sub_document_1.SubDocument.MAIN_SUBDOCUMENT_ID ? 3 : 0;
        switch (obj.obj.anchorInfo.levelType) {
            case layout_anchored_object_box_1.AnchoredObjectLevelType.BehindText: return SubGroupType.HeaderFooterSubDoc_Behind + offset;
            case layout_anchored_object_box_1.AnchoredObjectLevelType.InText: return SubGroupType.HeaderFooterSubDoc_InText + offset;
            case layout_anchored_object_box_1.AnchoredObjectLevelType.BeforeText: return SubGroupType.HeaderFooterSubDoc_InFront + offset;
        }
    };
    return Group;
}());
var UnfoldedObjectInfo = (function () {
    function UnfoldedObjectInfo(obj, index) {
        this.intersections = {};
        this.obj = obj;
        this.index = index;
    }
    return UnfoldedObjectInfo;
}());
