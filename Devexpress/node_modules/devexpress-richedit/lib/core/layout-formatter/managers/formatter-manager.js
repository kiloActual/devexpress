"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var event_dispatcher_1 = require("../../../base-utils/event-dispatcher");
var batch_updatable_1 = require("@devexpress/utils/lib/class/batch-updatable");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var measure_info_1 = require("../../measurer/measure-info");
var character_properties_cache_1 = require("../../model/caches/hashed-caches/character-properties-cache");
var changes_manager_1 = require("../changes/engine/changes-manager");
var anchored_objects_manager_1 = require("../floating/anchored-objects-manager");
var base_formatter_1 = require("../formatter/base-formatter");
var main_formatter_1 = require("../formatter/main-formatter");
var model_changes_listener_1 = require("../formatter/model-changes-listener");
var other_page_area_formatter_1 = require("../formatter/other-page-area-formatter");
var bounds_calculator_1 = require("../formatter/utils/bounds-calculator");
var floating_restart_info_holder_1 = require("../formatter/utils/floating-restart-info-holder");
var layout_dependent_cache_1 = require("../formatter/utils/layout-dependent-cache");
var remove_redundant_helper_1 = require("../formatter/utils/remove-redundant-helper");
var layout_invalidator_1 = require("../invalidator/layout-invalidator");
var restart_manager_1 = require("./restart-manager");
var FormatterManager = (function (_super) {
    tslib_1.__extends(FormatterManager, _super);
    function FormatterManager(measurer, innerClientProperties, model, layout, activeSubDocumentHolder, bookmarksSettings, documentProtectionSettings, controlHeightProvider, stringResources, layoutChangesListeners) {
        var _this = _super.call(this) || this;
        _this.formatterProcessID = null;
        _this.unhideProcessID = null;
        _this._isDocumentOpened = false;
        _this.onLayoutChangedDispatcher = new event_dispatcher_1.EventDispatcher();
        _this.measurer = measurer;
        _this.innerClientProperties = innerClientProperties;
        _this.model = model;
        _this.layout = layout;
        _this.activeSubDocumentHolder = activeSubDocumentHolder;
        _this.bookmarksSettings = bookmarksSettings;
        _this.documentProtectionSettings = documentProtectionSettings;
        _this.controlHeightProvider = controlHeightProvider;
        _this.stringResources = stringResources;
        list_1.ListUtils.forEach(layoutChangesListeners, function (l) { return _this.onLayoutChangedDispatcher.add(l); });
        _this.floatingRestartInfoHolder = new floating_restart_info_holder_1.FloatingRestartInfoHolder();
        _this.mainFormatter = new main_formatter_1.MainFormatter(_this);
        _this.activeFormatter = _this.mainFormatter;
        _this.formatters = {};
        _this.changesManager = new changes_manager_1.ChangesManager();
        _this.boundsCalculator = new bounds_calculator_1.BoundsCalculator();
        _this.invalidator = new layout_invalidator_1.LayoutInvalidator(_this);
        _this.modelChangesListener = new model_changes_listener_1.ModelChangesListener(_this.invalidator);
        _this.removeRedundantHelper = new remove_redundant_helper_1.RemoveRedundantHelper(_this.changesManager);
        _this.otherPageAreaFormatter = new other_page_area_formatter_1.OtherPageAreaFormatter(_this);
        _this.layoutDependentRunCache = new layout_dependent_cache_1.LayoutDependentRunCache(_this);
        _this.restartManager = new restart_manager_1.RestartManager(_this);
        _this.anchoredObjectsManager = new anchored_objects_manager_1.AnchoredObjectsManager(_this);
        return _this;
    }
    Object.defineProperty(FormatterManager.prototype, "activeSubDocument", {
        get: function () { return this.activeSubDocumentHolder.activeSubDocument; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormatterManager.prototype, "isDocumentOpened", {
        get: function () { return this._isDocumentOpened; },
        enumerable: true,
        configurable: true
    });
    FormatterManager.prototype.dispose = function () {
        clearTimeout(this.formatterProcessID);
        clearTimeout(this.unhideProcessID);
    };
    FormatterManager.prototype.onUpdateUnlocked = function (_occurredEvents) {
        if (this._isDocumentOpened)
            this.restartManager.startFormatting();
    };
    FormatterManager.prototype.getLayoutFormatter = function (subDocumentId) {
        var formatter = this.formatters[subDocumentId];
        return formatter ? formatter : this.formatters[subDocumentId] = new base_formatter_1.BaseFormatter(this, subDocumentId);
    };
    FormatterManager.prototype.openDocument = function () {
        this._isDocumentOpened = true;
        this.activeFormatter = this.mainFormatter;
    };
    FormatterManager.prototype.closeDocument = function () {
        this._isDocumentOpened = false;
        this.stopFormatting();
        this.formatters = {};
        this.changesManager.reset();
        this.layoutDependentRunCache.reset();
        this.restartManager.reset();
    };
    FormatterManager.prototype.runFormatting = function (pageIndex) {
        if (!this._isDocumentOpened)
            return;
        if (this.isUpdateLocked())
            throw new Error(errors_1.Errors.InternalException);
        this.formatPage(pageIndex);
        this.runFormattingAsync();
    };
    FormatterManager.prototype.runFormattingAsync = function () {
        var _this = this;
        if (this.formatterProcessID || this.isUpdateLocked() || !this._isDocumentOpened)
            return;
        var asyncCalculating = function () {
            if (_this.isLocked()) {
                _this.formatterProcessID = null;
                return;
            }
            for (var numRowsFormatAtTime = 10; numRowsFormatAtTime > 0; numRowsFormatAtTime--) {
                if (!_this.mainFormatter.formatNext()) {
                    _this.formatterProcessID = null;
                    break;
                }
            }
            if (_this.formatterProcessID !== null)
                _this.formatterProcessID = setTimeout(asyncCalculating, 0);
            _this.checkMeasureValid();
        };
        this.formatterProcessID = setTimeout(asyncCalculating, 0);
    };
    FormatterManager.prototype.checkMeasureValid = function () {
        var _this = this;
        if (this.measurer.resultsIsInvalid) {
            this.stopFormatting();
            if (this.unhideProcessID === null) {
                this.unhideProcessID = setInterval(function () {
                    if (_this.measurer.resultsIsInvalid) {
                        var prop = character_properties_cache_1.CharacterPropertiesCache.getRareCharProperty(_this.model.cache.fontInfoCache.fontMeasurer);
                        prop.fontInfo.reset();
                        _this.measurer.measure([new measure_info_1.MeasureInfoText("SomeUnusualText", prop)]);
                        prop.clearSizes();
                        prop.fontInfo.reset();
                    }
                    if (!_this.measurer.resultsIsInvalid) {
                        if (_this.unhideProcessID) {
                            clearInterval(_this.unhideProcessID);
                            _this.unhideProcessID = null;
                        }
                        _this.invalidator.onChangedAllLayout();
                    }
                }, 1000);
            }
        }
    };
    FormatterManager.prototype.forceFormatPage = function (pageIndex) {
        if (!this._isDocumentOpened)
            return;
        this.suspendUpdate();
        var page = this.formatPage(pageIndex);
        this.continueUpdate();
        return page;
    };
    FormatterManager.prototype.formatSyncAllDocument = function () {
        this.suspendUpdate();
        while (this.mainFormatter.formatNext())
            ;
        this.checkMeasureValid();
        this.continueUpdate();
    };
    FormatterManager.prototype.onPagesReady = function () {
        var _this = this;
        var mergedPageChanges = this.changesManager.getMergedPageChanges();
        this.changesManager.reset();
        this.onLayoutChangedDispatcher.listeners.forEach(function (listener) { return listener.NotifyPagesReady(mergedPageChanges); });
        if (this.layout.isFullyFormatted)
            this.onLayoutChangedDispatcher.listeners.forEach(function (listener) { return listener.NotifyFullyFormatted(_this.layout.pages.length); });
    };
    FormatterManager.prototype.formatPage = function (index) {
        if (this.isUpdateLocked())
            throw new Error("isUpdateLocked(). You can't call formatNext");
        while (index >= this.layout.validPageCount && this.mainFormatter.formatNext())
            ;
        this.checkMeasureValid();
        return this.layout.pages[index];
    };
    FormatterManager.prototype.stopFormatting = function () {
        if (this.formatterProcessID) {
            clearTimeout(this.formatterProcessID);
            this.formatterProcessID = null;
        }
    };
    return FormatterManager;
}(batch_updatable_1.BatchUpdatableObject));
exports.FormatterManager = FormatterManager;
