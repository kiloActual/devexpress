"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var document_layout_details_level_1 = require("../../layout/document-layout-details-level");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var log_obj_to_str_layout_1 = require("../../rich-utils/debug/logger/layout-logger/log-obj-to-str-layout");
var position_savers_1 = require("../invalidator/position-savers");
var RestartManager = (function () {
    function RestartManager(manager) {
        this.manager = manager;
        this.reset();
    }
    RestartManager.prototype.reset = function () {
        this.layoutFormatterPositionSaver = new position_savers_1.RestartFromPositionSaver_Base(this.manager);
    };
    RestartManager.prototype.startFormatting = function () {
        this.layoutFormatterPositionSaver.restart();
        this.reset();
    };
    RestartManager.prototype.restartFromPage = function (pageIndex, minPosition, forceRestartFullPage) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.RestartManager, "restartFromPage", "pageIndex:" + pageIndex + ", minPosition:" + minPosition + ", forceRestartFullPage:" + forceRestartFullPage);
        var pos = this.manager.invalidator.extendByMultipageTables(pageIndex, minPosition, forceRestartFullPage);
        if (pos == -1) {
            this.restartTemplate(pageIndex, function () { return _this.layoutFormatterPositionSaver.restartMainSubDocumentFromPage(pageIndex); });
        }
        else {
            var lp = this.manager.invalidator.findLayoutPositionInAllLayout(this.manager.model.mainSubDocument, pos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, false, true);
            if (lp.posIsStartPage() && lp.pageIndex != 0) {
                lp.advanceToPrevRow(this.manager.layout);
                lp.rowIndex++;
                lp.row = null;
            }
            list_1.ListUtils.forEach(this.manager.layout.pages, function (page) { return page.invalidate(); }, lp.pageIndex, pageIndex);
            this.restartFromRow(lp, this.manager.invalidator.getStartModelPositionOfRow(lp));
        }
    };
    RestartManager.prototype.restartFromRow = function (lp, modelPosition) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.RestartManager, "restartFromRow", "modelPosition:" + modelPosition + ", lp:" + log_obj_to_str_layout_1.LogObjToStrLayout.layoutPositionShort(lp));
        this.restartTemplate(lp.pageIndex, function () { return _this.layoutFormatterPositionSaver.restartMainSubDocumentFromRow(lp, modelPosition); });
    };
    RestartManager.prototype.restartHeaderFooter = function (subDocument, pageIndex) {
        var _this = this;
        this.restartTemplate(pageIndex, function () { return _this.layoutFormatterPositionSaver.restartOtherSubDocument(subDocument, pageIndex); });
    };
    RestartManager.prototype.restartAllLayout = function () {
        var _this = this;
        this.restartTemplate(0, function () { return new position_savers_1.RestartFromPositionSaver_AllLayout(_this.manager); });
    };
    RestartManager.prototype.restartTemplate = function (pageIndex, getNewRestartSaver) {
        if (this.manager.layout) {
            this.manager.layout.isFullyFormatted = false;
            this.manager.layout.validPageCount = Math.min(this.manager.layout.validPageCount, pageIndex);
        }
        this.layoutFormatterPositionSaver = getNewRestartSaver();
        if (!this.manager.isUpdateLocked())
            this.manager.onUpdateUnlocked(0);
    };
    return RestartManager;
}());
exports.RestartManager = RestartManager;
