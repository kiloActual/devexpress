"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("@devexpress/utils/lib/errors");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var layout_position_creator_1 = require("../../layout-engine/layout-position-creator");
var document_layout_details_level_1 = require("../../layout/document-layout-details-level");
var layout_position_1 = require("../../layout/layout-position");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_obj_to_str_1 = require("../../rich-utils/debug/logger/base-logger/log-obj-to-str");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var header_footer_invalidator_helper_1 = require("./header-footer-invalidator-helper");
var remove_content_helper_1 = require("./remove-content-helper");
var LayoutInvalidator = (function () {
    function LayoutInvalidator(manager) {
        this.manager = manager;
    }
    Object.defineProperty(LayoutInvalidator.prototype, "model", {
        get: function () { return this.manager.model; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutInvalidator.prototype, "layout", {
        get: function () { return this.manager.layout; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LayoutInvalidator.prototype, "mainSubDoc", {
        get: function () { return this.model.mainSubDocument; },
        enumerable: true,
        configurable: true
    });
    LayoutInvalidator.prototype.onContentInserted = function (subDocumentId, logPosition, length, restartFromParagraphStart) {
        var _this = this;
        var subDocument = this.model.subDocuments[subDocumentId];
        var pages = this.layout.pages;
        if (pages.length == 0)
            return;
        if (!subDocument.isMain()) {
            log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onContentInserted(header\\footer\\textBox)", "subDocument.id:" + subDocument.id + ", logPosition:" + logPosition + ", length:" + length + ", restartFromParagraphStart:" + restartFromParagraphStart);
            this.otherSubDocChanged();
            return;
        }
        var interval = new fixed_1.FixedInterval(logPosition, length);
        if (length > 0)
            this.contentOfMainSubDocumentInsertedOrDeleted(interval, restartFromParagraphStart, function (lp) { return _this.advanceForward(lp, length); });
        else if (length < 0)
            this.contentOfMainSubDocumentInsertedOrDeleted(interval, restartFromParagraphStart, function (lp) { return remove_content_helper_1.RemoveContentHelper.deleteInterval(_this.layout, lp, interval, _this.manager.changesManager.getPageChanges()); });
        else
            throw new Error(errors_1.Errors.InternalException);
    };
    LayoutInvalidator.prototype.contentOfMainSubDocumentInsertedOrDeleted = function (interval, restartFromParagraphStart, changeLayout) {
        log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "contentInserted", "subDocument.id:" + 0 + ", logPosition:" + interval.start + ", length:" + interval.length + ", restartFromParagraphStart:" + restartFromParagraphStart);
        var positions = [];
        if (restartFromParagraphStart)
            this.addRestartFromParagraph(positions, interval.start);
        var lp = this.findLayoutPositionInAllLayout(this.mainSubDoc, interval.start, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, false, true);
        var isValid = lp.page.isValid;
        lp.page.invalidate();
        positions.push(this.prevRowPositions(lp));
        changeLayout(lp);
        if (!isValid) {
            var poss = list_1.ListUtils.last(positions);
            poss.modelPosition = poss.layoutPosition.page.getPosition();
            poss.layoutPosition.initByIndexes(poss.layoutPosition.pageIndex, 0, 0, 0);
            poss.layoutPosition.applyObjectsAsMainSubDocument(this.layout, -1);
        }
        this.callRestart(positions);
    };
    LayoutInvalidator.prototype.onIntervalChanged = function (subDocumentId, interval) {
        var subDocument = this.model.subDocuments[subDocumentId];
        if (interval.length == 0 || !this.layout.pages.length)
            return;
        if (!subDocument.isMain()) {
            log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onIntervalChanged(header\\footer)", "subDocument.id:" + subDocument.id + ", interval:" + log_obj_to_str_1.LogObjToStr.fixedInterval(interval));
            this.otherSubDocChanged();
            return;
        }
        log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onIntervalChanged", "subDocument.id:" + subDocument.id + ", interval:" + log_obj_to_str_1.LogObjToStr.fixedInterval(interval));
        var lp = this.findLayoutPositionInAllLayout(subDocument, interval.start, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, false, true);
        this.invalidatePagesByEndPosition(lp.pageIndex, interval.end);
        this.manager.restartManager.restartFromPage(lp.pageIndex, interval.start, false);
    };
    LayoutInvalidator.prototype.onChangedSections = function (startSectionIndex, endSectionIndex) {
        log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onChangedSection", "sectionIndex:" + startSectionIndex + "-" + endSectionIndex);
        var startSection = this.model.sections[startSectionIndex];
        var endSection = this.model.sections[endSectionIndex];
        var pages = this.layout.pages;
        var sectionStartPos = startSection.startLogPosition.value;
        var pageIndexStart = LayoutInvalidator.getSectionFirstPageIndex(pages, this.layout.validPageCount, startSection.startLogPosition.value);
        var secEndPos = endSection.getEndPosition();
        for (var pageIndex = pageIndexStart, page = void 0; (page = pages[pageIndex]) && page.getPosition() <= secEndPos; pageIndex++)
            page.invalidate();
        this.manager.restartManager.restartFromPage(pageIndexStart, sectionStartPos, true);
    };
    LayoutInvalidator.prototype.onListLevelChanged = function (newState) {
        var _this = this;
        log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onListLevelChanged newState\n", log_obj_to_str_1.LogObjToStr.historyItemState(log_obj_to_str_1.LogObjToStr.historyItemListLevelStateObject, newState, "\t", "\n"));
        var _loop_1 = function (obj) {
            number_1.NumberMapUtils.forEach(this_1.model.subDocuments, function (subDocument) {
                var abstractNumberingListIndex = obj.isAbstractNumberingList ?
                    obj.numberingListIndex :
                    subDocument.documentModel.numberingLists[obj.numberingListIndex].abstractNumberingListIndex;
                var listLevelIndex = obj.listLevelIndex;
                var intervals = [];
                for (var _i = 0, _a = subDocument.paragraphs; _i < _a.length; _i++) {
                    var paragraph = _a[_i];
                    if (paragraph.getAbstractNumberingListIndex() === abstractNumberingListIndex &&
                        paragraph.getListLevelIndex() === listLevelIndex)
                        intervals.push(paragraph.interval);
                }
                if (intervals.length > 0) {
                    var mergedIntervals = algorithms_1.IntervalAlgorithms.getMergedIntervals(intervals, true);
                    for (var _b = 0, mergedIntervals_1 = mergedIntervals; _b < mergedIntervals_1.length; _b++) {
                        var interval = mergedIntervals_1[_b];
                        _this.onIntervalChanged(subDocument.id, interval);
                    }
                }
            });
        };
        var this_1 = this;
        for (var _i = 0, _a = newState.objects; _i < _a.length; _i++) {
            var obj = _a[_i];
            _loop_1(obj);
        }
    };
    LayoutInvalidator.prototype.onHeaderFooterIndexChanged = function (sectionIndex, type) {
        var headerFooterInvalidatorHelper = new header_footer_invalidator_helper_1.HeaderFooterInvalidatorHelper(this.model, this.layout, type);
        headerFooterInvalidatorHelper.initBySectionIndex(sectionIndex);
        var firstPage = this.layout.pages[headerFooterInvalidatorHelper.startPageIndex];
        if (!firstPage)
            return;
        list_1.ListUtils.forEach(this.layout.pages, function (page) { return page.invalidate(); }, headerFooterInvalidatorHelper.startPageIndex, headerFooterInvalidatorHelper.endPageIndex);
        this.manager.restartManager.restartFromPage(headerFooterInvalidatorHelper.startPageIndex, firstPage.getPosition(), true);
    };
    LayoutInvalidator.prototype.onPagesChanged = function (startPageIndex, endPageIndex) {
        var firstPage = this.layout.pages[startPageIndex];
        if (!firstPage)
            return;
        list_1.ListUtils.forEach(this.layout.pages, function (page) { return page.invalidate(); }, startPageIndex, endPageIndex);
        this.manager.restartManager.restartFromPage(startPageIndex, firstPage.getPosition(), true);
    };
    LayoutInvalidator.prototype.onChangedAllLayout = function () {
        log_1.Log.print(log_source_1.LogSource.LayoutFormatterInvalidator, "onChangedAllLayout", "");
        this.manager.restartManager.restartAllLayout();
    };
    LayoutInvalidator.prototype.prevRowPositions = function (layoutPos) {
        var prevLP = layoutPos.clone();
        prevLP.advanceToPrevRow(this.layout);
        var lp = prevLP.row.tableCellInfo && (!layoutPos.row.tableCellInfo ||
            layoutPos.row.tableCellInfo.parentRow.parentTable.getTopLevelColumn() !=
                prevLP.row.tableCellInfo.parentRow.parentTable.getTopLevelColumn()) ?
            layoutPos :
            prevLP;
        return new layout_position_1.LayoutAndModelPositions(lp, this.getStartModelPositionOfRow(lp));
    };
    LayoutInvalidator.prototype.callRestart = function (positions) {
        var minMax = list_1.ListUtils.minMax(positions, function (a) { return a.modelPosition; });
        var minPageIndex = minMax.minElement.layoutPosition.pageIndex;
        list_1.ListUtils.forEach(this.layout.pages, function (page) { return page.invalidate(); }, minPageIndex, minMax.maxElement.layoutPosition.pageIndex + 1);
        if (!this.layout.pages[minPageIndex])
            return;
        this.manager.restartManager.restartFromPage(minPageIndex, minMax.minElement.modelPosition, false);
    };
    LayoutInvalidator.prototype.advanceForward = function (layoutPos, length) {
        list_1.ListUtils.forEach(this.layout.pages, function (page) { return page.setAbsolutePosition(page.getPosition() + length); }, layoutPos.pageIndex + 1);
        this.moveRowsToRight(layoutPos, length);
        this.moveColumnsToRight(layoutPos, length);
        this.movePageAreasToRight(layoutPos, length);
    };
    LayoutInvalidator.prototype.moveRowsToRight = function (layoutPosition, offset) {
        var rows = layoutPosition.column.rows;
        for (var rowIndex = layoutPosition.rowIndex + 1, row = void 0; row = rows[rowIndex]; rowIndex++)
            row.columnOffset += offset;
    };
    LayoutInvalidator.prototype.moveColumnsToRight = function (layoutPosition, offset) {
        var columns = layoutPosition.pageArea.columns;
        for (var columnIndex = layoutPosition.columnIndex + 1, column = void 0; column = columns[columnIndex]; columnIndex++)
            column.pageAreaOffset += offset;
    };
    LayoutInvalidator.prototype.movePageAreasToRight = function (layoutPosition, offset) {
        var pageAreas = layoutPosition.page.mainSubDocumentPageAreas;
        list_1.ListUtils.forEach(pageAreas, function (pa) { return pa.pageOffset += offset; }, layoutPosition.pageAreaIndex + 1);
    };
    LayoutInvalidator.prototype.otherSubDocChanged = function () {
        list_1.ListUtils.forEach(this.layout.pages, function (p) { return p.invalidate(); });
        this.manager.restartManager.restartFromPage(0, 0, true);
    };
    LayoutInvalidator.getSectionFirstPageIndex = function (pages, validPageCount, startSectionPos) {
        if (!validPageCount)
            return 0;
        var firstPageIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(pages, function (p) { return p.getPosition(); }, startSectionPos, 0, validPageCount - 1));
        return pages[firstPageIndex].getPosition() < startSectionPos ? Math.min(firstPageIndex + 1, validPageCount) : firstPageIndex;
    };
    LayoutInvalidator.prototype.invalidatePagesByEndPosition = function (startPageIndex, intervalEndPos) {
        this.invalidatePages(startPageIndex, function (page) { return intervalEndPos < page.getEndPosition(); });
    };
    LayoutInvalidator.prototype.invalidatePages = function (startPageIndex, endCondition) {
        var pages = this.layout.pages;
        for (var pageIndex = startPageIndex, page = void 0; page = pages[pageIndex]; pageIndex++) {
            page.invalidate();
            if (endCondition(page))
                break;
        }
    };
    LayoutInvalidator.prototype.findLayoutPositionInAllLayout = function (subDocument, pos, detailsLevel, endRowConflictFlags, middleRowConflictFlags) {
        var layout = this.layout;
        var realValidPageCount = layout.validPageCount;
        var realIsFullyFormatted = layout.isFullyFormatted;
        layout.validPageCount = layout.pages.length;
        layout.isFullyFormatted = true;
        var res = new layout_position_creator_1.LayoutPositionMainSubDocumentCreator(layout, subDocument, pos, detailsLevel, true)
            .create(new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(endRowConflictFlags), new layout_position_creator_1.LayoutPositionCreatorConflictFlags().setDefault(middleRowConflictFlags));
        layout.validPageCount = realValidPageCount;
        layout.isFullyFormatted = realIsFullyFormatted;
        return res;
    };
    LayoutInvalidator.prototype.getStartModelPositionOfRow = function (lp) {
        var prevLP = lp.clone();
        if (prevLP.advanceToPrevRow(this.layout)) {
            var prevLPTblCellInfo = prevLP.row.tableCellInfo;
            if (!prevLPTblCellInfo)
                return prevLP.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Row) + prevLP.row.getLastBox().getEndPosition();
            var curLPTblCellInfo = lp.row.tableCellInfo;
            var curTopLevelColumn = curLPTblCellInfo ? curLPTblCellInfo.parentRow.parentTable.getTopLevelColumn() : null;
            var prevTopLevelColumn = prevLPTblCellInfo ? prevLPTblCellInfo.parentRow.parentTable.getTopLevelColumn() : null;
            if (!curLPTblCellInfo || curTopLevelColumn.logicInfo != prevTopLevelColumn.logicInfo)
                return prevTopLevelColumn.logicInfo.grid.table.getEndPosition();
            return prevTopLevelColumn.logicInfo.grid.table.getStartPosition();
        }
        return 0;
    };
    LayoutInvalidator.prototype.extendByMultipageTables = function (pageIndex, minPosition, forceRestartFullPage) {
        var subDocument = this.model.mainSubDocument;
        if (!subDocument.tables.length)
            return -1;
        var page = this.layout.pages[pageIndex];
        if (!page)
            return -1;
        var table = this.isPageStartWithMultipageTable(page);
        if (!table)
            return -1;
        return minPosition < table.getEndPosition() || forceRestartFullPage ? table.getStartPosition() : table.getEndPosition();
    };
    LayoutInvalidator.prototype.isPageStartWithMultipageTable = function (page) {
        if (!page)
            return null;
        var fstPa = page.mainSubDocumentPageAreas[0];
        if (!fstPa)
            return null;
        var fstColumn = fstPa.columns[0];
        if (!fstColumn)
            return null;
        var fstRow = fstColumn.rows[0];
        if (!fstRow)
            return null;
        var tableCellInfo = fstRow.tableCellInfo;
        return LayoutInvalidator.isLayoutRowRowStartWithMultipageTable(fstRow) ?
            tableCellInfo.parentRow.parentTable.getTopLevelColumn().logicInfo.grid.table :
            null;
    };
    LayoutInvalidator.isLayoutRowRowStartWithMultipageTable = function (layoutRow) {
        var tableCellInfo = layoutRow.tableCellInfo;
        return tableCellInfo && (tableCellInfo.parentRow.rowIndex != 0 || tableCellInfo.parentRow.parentTable.isBoundWithPrev());
    };
    LayoutInvalidator.prototype.addRestartFromParagraph = function (positions, logPosition) {
        var parStartPos = this.mainSubDoc.getParagraphByPosition(logPosition).startLogPosition.value;
        var layPosParStart = this.findLayoutPositionInAllLayout(this.mainSubDoc, parStartPos, document_layout_details_level_1.DocumentLayoutDetailsLevel.Row, false, true);
        layPosParStart.page.invalidate();
        positions.push(this.prevRowPositions(layPosParStart));
    };
    return LayoutInvalidator;
}());
exports.LayoutInvalidator = LayoutInvalidator;
