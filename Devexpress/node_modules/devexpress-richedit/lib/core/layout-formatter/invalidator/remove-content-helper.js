"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var errors_1 = require("@devexpress/utils/lib/errors");
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var string_1 = require("@devexpress/utils/lib/utils/string");
var layout_text_box_1 = require("../../layout/main-structures/layout-boxes/layout-text-box");
var column_change_1 = require("../changes/changes/column-change");
var layout_change_base_1 = require("../changes/changes/layout-change-base");
var page_area_change_1 = require("../changes/changes/page-area-change");
var page_change_1 = require("../changes/changes/page-change");
var RemoveContentHelper = (function () {
    function RemoveContentHelper() {
    }
    RemoveContentHelper.deleteInterval = function (layout, layoutPos, deletedInterval, pageChanges) {
        RemoveContentHelper.deleteElementContent(0, [
            new RemoveLayoutContent(fixed_1.FixedInterval.fromPositions(0, deletedInterval.end), pageChanges),
            new RemovePageContent(layoutPos, layout.pages),
            new RemovePageAreaContent(layoutPos),
            new RemoveColumnContent(layoutPos),
            new RemoveRowContent(layoutPos)
        ], deletedInterval);
    };
    RemoveContentHelper.deleteElementContent = function (level, levelsInfo, deletedInterval) {
        var currLevelInfo = levelsInfo[level];
        currLevelInfo.contentDeleted = false;
        var elementInterval = currLevelInfo.getElementInterval();
        var elementStartPos = elementInterval.start;
        var intersection = algorithms_1.IntervalAlgorithms.getIntersection(elementInterval, deletedInterval);
        var correctOffsets = false;
        if (intersection && intersection.length > 0) {
            if (elementInterval.length == intersection.length && level > 0) {
                levelsInfo[level - 1].addChange(levelsInfo[level].deleteElement());
                return true;
            }
            if (level + 1 == levelsInfo.length) {
                var newRowLength = elementInterval.length - intersection.length;
                var fakeBox = new layout_text_box_1.LayoutTextBox(null, null, string_1.StringUtils.repeat(" ", newRowLength));
                fakeBox.rowOffset = 0;
                var row = currLevelInfo.getElement();
                row.boxes = [fakeBox];
                currLevelInfo.contentDeleted = true;
            }
            else {
                var lowerLevelDeletedInterval = new fixed_1.FixedInterval(intersection.start - elementStartPos, intersection.length);
                var nextLevelInfo = levelsInfo[level + 1];
                if (level > 0)
                    currLevelInfo.assignChanges(levelsInfo[level - 1]);
                while (nextLevelInfo.setElement()) {
                    if (!this.deleteElementContent(level + 1, levelsInfo, lowerLevelDeletedInterval))
                        nextLevelInfo.incElementIndex();
                    if (nextLevelInfo.contentDeleted) {
                        if (level == 1)
                            currLevelInfo.layoutPosition.page.isValid = false;
                        currLevelInfo.contentDeleted = true;
                    }
                }
                correctOffsets = true;
            }
        }
        if (intersection) {
            if (elementStartPos == intersection.start)
                currLevelInfo.setElementOffset(deletedInterval.start);
        }
        else {
            if (elementStartPos >= deletedInterval.end)
                currLevelInfo.setElementOffset(Math.max(0, elementStartPos - deletedInterval.length));
        }
        if (correctOffsets)
            currLevelInfo.correctOffsets();
        if (level == 1) {
            var change = currLevelInfo.updatePage(!!intersection);
            if (change) {
                levelsInfo[0].addChange(change);
                return true;
            }
        }
        return false;
    };
    return RemoveContentHelper;
}());
exports.RemoveContentHelper = RemoveContentHelper;
var RemoveExistanceContent = (function () {
    function RemoveExistanceContent() {
    }
    return RemoveExistanceContent;
}());
var RemoveLayoutContent = (function (_super) {
    tslib_1.__extends(RemoveLayoutContent, _super);
    function RemoveLayoutContent(delInterval, pageChanges) {
        var _this = _super.call(this) || this;
        _this.delInterval = delInterval;
        _this.pageChanges = pageChanges;
        return _this;
    }
    RemoveLayoutContent.prototype.setElement = function () {
        return null;
    };
    RemoveLayoutContent.prototype.incElementIndex = function () {
    };
    RemoveLayoutContent.prototype.getElementInterval = function () {
        return this.delInterval;
    };
    RemoveLayoutContent.prototype.setElementOffset = function (_newOffset) {
    };
    RemoveLayoutContent.prototype.deleteElement = function () {
        return null;
    };
    RemoveLayoutContent.prototype.correctOffsets = function () {
    };
    RemoveLayoutContent.prototype.addChange = function (change) {
        this.pageChanges.push(change);
    };
    RemoveLayoutContent.prototype.assignChanges = function (_topLevel) {
    };
    return RemoveLayoutContent;
}(RemoveExistanceContent));
var RemovePageContent = (function (_super) {
    tslib_1.__extends(RemovePageContent, _super);
    function RemovePageContent(layoutPosition, pages) {
        var _this = _super.call(this) || this;
        _this.layoutPosition = layoutPosition;
        _this.pages = pages;
        return _this;
    }
    RemovePageContent.prototype.updatePage = function (isMarkPageIntervalsAsIncorrect) {
        var page = this.layoutPosition.page;
        if (isMarkPageIntervalsAsIncorrect)
            page.markPageIntervalsAsIncorrect();
        var pageIndex = this.layoutPosition.pageIndex;
        var prevPage = this.pages[pageIndex - 1];
        if (prevPage && page.getPosition() <= prevPage.getPosition()) {
            page.index = pageIndex - 1;
            page.y = page.index > 0 ? this.pages[page.index - 1].bottom : 0;
            return this.deleteElement(page.index);
        }
        page.index = pageIndex;
        page.y = prevPage ? prevPage.bottom : 0;
        return null;
    };
    RemovePageContent.prototype.checkTableExceptionCase = function () {
        var pageIndex = this.layoutPosition.pageIndex;
        return pageIndex - 1 >= 0 && this.pages[pageIndex].getPosition() <= this.pages[pageIndex - 1].getPosition() ? this.deleteElement(pageIndex - 1) : null;
    };
    RemovePageContent.prototype.setElement = function () {
        return !!(this.layoutPosition.page = this.pages[this.layoutPosition.pageIndex]);
    };
    RemovePageContent.prototype.incElementIndex = function () {
        this.layoutPosition.pageIndex++;
    };
    RemovePageContent.prototype.getElementInterval = function () {
        var elem = this.layoutPosition.page;
        return fixed_1.FixedInterval.fromPositions(elem.getPosition(), elem.getEndPosition());
    };
    RemovePageContent.prototype.setElementOffset = function (newOffset) {
        this.layoutPosition.page.setAbsolutePosition(newOffset);
    };
    RemovePageContent.prototype.deleteElement = function (index) {
        if (index === void 0) { index = this.layoutPosition.pageIndex; }
        this.pages.splice(index, 1);
        return new page_change_1.PageChange(index, layout_change_base_1.LayoutChangeType.Deleted, [], []);
    };
    RemovePageContent.prototype.correctOffsets = function () {
        RemovePageContent.correctPageOffsets(this.layoutPosition.page);
    };
    RemovePageContent.prototype.addChange = function (change) {
        this.pageAreaChanges.push(change);
    };
    RemovePageContent.prototype.assignChanges = function (topLevel) {
        this.pageAreaChanges = [];
        topLevel.pageChanges.push(new page_change_1.PageChange(this.layoutPosition.pageIndex, layout_change_base_1.LayoutChangeType.Updated, this.pageAreaChanges, []));
    };
    RemovePageContent.correctPageOffsets = function (page) {
        var pageAreas = page.mainSubDocumentPageAreas;
        if (!pageAreas.length)
            return;
        var offsetFirstPageAreaFromPage = pageAreas[0].pageOffset;
        if (offsetFirstPageAreaFromPage > 0) {
            page.setAbsolutePosition(page.getPosition() + offsetFirstPageAreaFromPage);
            for (var _i = 0, pageAreas_1 = pageAreas; _i < pageAreas_1.length; _i++) {
                var pageArea = pageAreas_1[_i];
                pageArea.pageOffset -= offsetFirstPageAreaFromPage;
            }
        }
    };
    return RemovePageContent;
}(RemoveExistanceContent));
var RemovePageAreaContent = (function (_super) {
    tslib_1.__extends(RemovePageAreaContent, _super);
    function RemovePageAreaContent(layoutPosition) {
        var _this = _super.call(this) || this;
        _this.layoutPosition = layoutPosition;
        return _this;
    }
    RemovePageAreaContent.prototype.setElement = function () {
        if (this.layoutPosition.pageArea = this.layoutPosition.page.mainSubDocumentPageAreas[this.layoutPosition.pageAreaIndex])
            return true;
        else {
            this.layoutPosition.pageAreaIndex = 0;
            return false;
        }
    };
    RemovePageAreaContent.prototype.incElementIndex = function () {
        this.layoutPosition.pageAreaIndex++;
    };
    RemovePageAreaContent.prototype.getElementInterval = function () {
        var elem = this.layoutPosition.pageArea;
        return fixed_1.FixedInterval.fromPositions(elem.pageOffset, elem.getEndPosition());
    };
    RemovePageAreaContent.prototype.setElementOffset = function (newOffset) {
        this.layoutPosition.pageArea.pageOffset = newOffset;
    };
    RemovePageAreaContent.prototype.deleteElement = function () {
        var index = this.layoutPosition.pageAreaIndex;
        this.layoutPosition.page.mainSubDocumentPageAreas.splice(index, 1);
        return new page_area_change_1.PageAreaChange(index, layout_change_base_1.LayoutChangeType.Deleted, []);
    };
    RemovePageAreaContent.prototype.correctOffsets = function () {
        RemovePageAreaContent.correctColumnOffsets(this.layoutPosition.pageArea);
    };
    RemovePageAreaContent.prototype.addChange = function (change) {
        this.columnChanges.push(change);
    };
    RemovePageAreaContent.prototype.assignChanges = function (topLevel) {
        this.columnChanges = [];
        topLevel.pageAreaChanges.push(new page_area_change_1.PageAreaChange(this.layoutPosition.pageAreaIndex, layout_change_base_1.LayoutChangeType.Updated, this.columnChanges));
    };
    RemovePageAreaContent.correctColumnOffsets = function (pageArea) {
        var columns = pageArea.columns;
        if (!columns.length)
            return;
        var offsetFirstColumnFromPageArea = columns[0].pageAreaOffset;
        if (offsetFirstColumnFromPageArea > 0) {
            pageArea.pageOffset += offsetFirstColumnFromPageArea;
            for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
                var column = columns_1[_i];
                column.pageAreaOffset -= offsetFirstColumnFromPageArea;
            }
        }
    };
    return RemovePageAreaContent;
}(RemoveExistanceContent));
var RemoveColumnContent = (function (_super) {
    tslib_1.__extends(RemoveColumnContent, _super);
    function RemoveColumnContent(layoutPosition) {
        var _this = _super.call(this) || this;
        _this.layoutPosition = layoutPosition;
        return _this;
    }
    RemoveColumnContent.prototype.setElement = function () {
        if (this.layoutPosition.column = this.layoutPosition.pageArea.columns[this.layoutPosition.columnIndex])
            return true;
        else {
            this.layoutPosition.columnIndex = 0;
            return false;
        }
    };
    RemoveColumnContent.prototype.incElementIndex = function () {
        this.layoutPosition.columnIndex++;
    };
    RemoveColumnContent.prototype.getElementInterval = function () {
        var elem = this.layoutPosition.column;
        return fixed_1.FixedInterval.fromPositions(elem.pageAreaOffset, elem.getEndPosition());
    };
    RemoveColumnContent.prototype.setElementOffset = function (newOffset) {
        this.layoutPosition.column.pageAreaOffset = newOffset;
    };
    RemoveColumnContent.prototype.deleteElement = function () {
        var index = this.layoutPosition.columnIndex;
        this.layoutPosition.pageArea.columns.splice(index, 1);
        return new column_change_1.ColumnChange(index, layout_change_base_1.LayoutChangeType.Deleted, [], [], []);
    };
    RemoveColumnContent.prototype.correctOffsets = function () {
        RemoveColumnContent.correctRowOffsets(this.layoutPosition.column);
    };
    RemoveColumnContent.prototype.addChange = function (change) {
        this.rowChanges.push(change);
    };
    RemoveColumnContent.prototype.assignChanges = function (topLevel) {
        this.rowChanges = [];
        topLevel.columnChanges.push(new column_change_1.ColumnChange(this.layoutPosition.columnIndex, layout_change_base_1.LayoutChangeType.Updated, this.rowChanges, [], []));
    };
    RemoveColumnContent.correctRowOffsets = function (column) {
        var rows = column.rows;
        if (!rows.length)
            return;
        var offsetFirstRowFromColumn = rows[0].columnOffset;
        if (offsetFirstRowFromColumn > 0) {
            column.pageAreaOffset += offsetFirstRowFromColumn;
            for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                var row = rows_1[_i];
                row.columnOffset -= offsetFirstRowFromColumn;
            }
        }
    };
    return RemoveColumnContent;
}(RemoveExistanceContent));
var RemoveRowContent = (function (_super) {
    tslib_1.__extends(RemoveRowContent, _super);
    function RemoveRowContent(layoutPosition) {
        var _this = _super.call(this) || this;
        _this.layoutPosition = layoutPosition;
        return _this;
    }
    RemoveRowContent.prototype.getElement = function () {
        return this.layoutPosition.row;
    };
    RemoveRowContent.prototype.getElementParentContainer = function () {
        return this.layoutPosition.column.rows;
    };
    RemoveRowContent.prototype.setElement = function () {
        if (this.layoutPosition.row = this.layoutPosition.column.rows[this.layoutPosition.rowIndex])
            return true;
        else {
            this.layoutPosition.rowIndex = 0;
            return false;
        }
    };
    RemoveRowContent.prototype.incElementIndex = function () {
        this.layoutPosition.rowIndex++;
    };
    RemoveRowContent.prototype.getElementInterval = function () {
        var elem = this.layoutPosition.row;
        return fixed_1.FixedInterval.fromPositions(elem.columnOffset, elem.getEndPosition());
    };
    RemoveRowContent.prototype.setElementOffset = function (newOffset) {
        if (newOffset < 0)
            throw new Error(errors_1.Errors.InternalException);
        this.layoutPosition.row.columnOffset = newOffset;
    };
    RemoveRowContent.prototype.deleteElement = function () {
        var index = this.layoutPosition.rowIndex;
        this.getElementParentContainer().splice(index, 1);
        return new layout_change_base_1.RowChange(index, layout_change_base_1.LayoutChangeType.Deleted);
    };
    RemoveRowContent.prototype.correctOffsets = function () {
    };
    RemoveRowContent.prototype.addChange = function (_change) {
    };
    RemoveRowContent.prototype.assignChanges = function (_topLevel) {
    };
    return RemoveRowContent;
}(RemoveExistanceContent));
