"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_row_1 = require("../../layout/main-structures/layout-row");
var formatter_1 = require("./formatter");
var RowBaseFormatterState = (function () {
    function RowBaseFormatterState(rowFormatter) {
        this.rowFormatter = rowFormatter;
    }
    RowBaseFormatterState.prototype.addBoxAnyway = function (isFinishRow, nextState) {
        var _this = this;
        if (isFinishRow === void 0) { isFinishRow = false; }
        if (nextState === void 0) { nextState = formatter_1.TextRowFormatterState.None; }
        var setFlags = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            setFlags[_i - 2] = arguments[_i];
        }
        if (!this.rowFormatter.wordHolder.pushBoxes())
            return;
        if (!this.rowFormatter.rowSizesManager.addNumberingBoxes())
            return;
        this.rowFormatter.rowSizesManager.anywayAddBox();
        if (this.rowFormatter.manager.innerClientProperties.viewsSettings.isSimpleView)
            setFlags = list_1.ListUtils.reducedMap(setFlags, function (f) {
                return enum_1.EnumUtils.isAnyOf(f, layout_row_1.LayoutRowStateFlags.ColumnEnd, layout_row_1.LayoutRowStateFlags.PageEnd, layout_row_1.LayoutRowStateFlags.SectionEnd) ? null : f;
            });
        list_1.ListUtils.forEach(setFlags, function (flag) { return _this.rowFormatter.row.flags.set(flag, true); });
        if (nextState != formatter_1.TextRowFormatterState.None)
            this.rowFormatter.setState(nextState);
        if (isFinishRow)
            this.rowFormatter.finishRow();
    };
    RowBaseFormatterState.prototype.addAnchorObject = function () {
        if (!this.rowFormatter.wordHolder.pushBoxes())
            return;
        this.rowFormatter.addAnchorObject();
    };
    RowBaseFormatterState.prototype.addTextBox = function () {
        this.rowFormatter.wordHolder.addBox();
    };
    RowBaseFormatterState.prototype.addPictureBox = function () {
        if (!this.rowFormatter.wordHolder.pushBoxes())
            return;
        if (!this.rowFormatter.rowSizesManager.addNumberingBoxes())
            return;
        this.rowFormatter.rowSizesManager.addBox();
    };
    RowBaseFormatterState.prototype.addSpaceBox = function () {
        this.addBoxAnyway(false, formatter_1.TextRowFormatterState.Base);
    };
    RowBaseFormatterState.prototype.addTabulationBox = function () {
        if (!this.rowFormatter.wordHolder.pushBoxes())
            return;
        if (!this.rowFormatter.rowSizesManager.addNumberingBoxes())
            return;
        if (this.rowFormatter.tabInfo.addTabBox())
            this.rowFormatter.setState(formatter_1.TextRowFormatterState.Base);
        else
            this.rowFormatter.finishRow();
    };
    RowBaseFormatterState.prototype.addSectionBox = function () {
        this.addBoxAnyway(true, formatter_1.TextRowFormatterState.None, layout_row_1.LayoutRowStateFlags.ParagraphEnd, layout_row_1.LayoutRowStateFlags.SectionEnd);
    };
    RowBaseFormatterState.prototype.addLineBreakBox = function () {
        this.addBoxAnyway(true);
    };
    RowBaseFormatterState.prototype.addPageBreakBox = function () {
        this.addBoxAnyway(false, formatter_1.TextRowFormatterState.EndedWithPageBreak, layout_row_1.LayoutRowStateFlags.PageEnd);
    };
    RowBaseFormatterState.prototype.addColumnBreakBox = function () {
        this.addBoxAnyway(true, formatter_1.TextRowFormatterState.None, layout_row_1.LayoutRowStateFlags.ColumnEnd);
    };
    RowBaseFormatterState.prototype.addParagraphBox = function () {
        this.addBoxAnyway(false, formatter_1.TextRowFormatterState.EndedWithParagraphMark, layout_row_1.LayoutRowStateFlags.ParagraphEnd);
    };
    return RowBaseFormatterState;
}());
exports.RowBaseFormatterState = RowBaseFormatterState;
var RowEndedWithParagraphMarkFormatterState = (function (_super) {
    tslib_1.__extends(RowEndedWithParagraphMarkFormatterState, _super);
    function RowEndedWithParagraphMarkFormatterState(rowFormatter) {
        return _super.call(this, rowFormatter) || this;
    }
    RowEndedWithParagraphMarkFormatterState.prototype.addAnchorObject = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addTextBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addDashBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addPictureBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addSpaceBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addTabulationBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addLineBreakBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addPageBreakBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addColumnBreakBox = function () {
        this.rowFormatter.finishRow();
    };
    RowEndedWithParagraphMarkFormatterState.prototype.addParagraphBox = function () {
        this.rowFormatter.finishRow();
    };
    return RowEndedWithParagraphMarkFormatterState;
}(RowBaseFormatterState));
exports.RowEndedWithParagraphMarkFormatterState = RowEndedWithParagraphMarkFormatterState;
var RowEndedWithPageBreakState = (function (_super) {
    tslib_1.__extends(RowEndedWithPageBreakState, _super);
    function RowEndedWithPageBreakState(rowFormatter) {
        return _super.call(this, rowFormatter) || this;
    }
    RowEndedWithPageBreakState.prototype.addParagraphBox = function () {
        this.addBoxAnyway(false, formatter_1.TextRowFormatterState.EndedWithParagraphMark, layout_row_1.LayoutRowStateFlags.ParagraphEnd);
    };
    return RowEndedWithPageBreakState;
}(RowEndedWithParagraphMarkFormatterState));
exports.RowEndedWithPageBreakState = RowEndedWithPageBreakState;
