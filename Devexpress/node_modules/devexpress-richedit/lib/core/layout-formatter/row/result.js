"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var search_1 = require("@devexpress/utils/lib/utils/search");
var document_layout_details_level_1 = require("../../layout/document-layout-details-level");
var bookmark_box_1 = require("../../layout/main-structures/layout-boxes/bookmark-box");
var layout_anchored_object_box_1 = require("../../layout/main-structures/layout-boxes/layout-anchored-object-box");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var layout_row_1 = require("../../layout/main-structures/layout-row");
var box_aligner_1 = require("./utils/box-aligner");
var RowFormatterResultFlag;
(function (RowFormatterResultFlag) {
    RowFormatterResultFlag[RowFormatterResultFlag["None"] = 0] = "None";
    RowFormatterResultFlag[RowFormatterResultFlag["NotEnoughChunks"] = 1] = "NotEnoughChunks";
})(RowFormatterResultFlag = exports.RowFormatterResultFlag || (exports.RowFormatterResultFlag = {}));
var BoxBracketsType;
(function (BoxBracketsType) {
    BoxBracketsType[BoxBracketsType["None"] = 0] = "None";
    BoxBracketsType[BoxBracketsType["Open"] = 1] = "Open";
    BoxBracketsType[BoxBracketsType["Close"] = 2] = "Close";
})(BoxBracketsType = exports.BoxBracketsType || (exports.BoxBracketsType = {}));
var RowFormatterResult = (function () {
    function RowFormatterResult(rowFormatter, minY) {
        this.rowFormatter = rowFormatter;
        this.newAnchoredObjects = [];
        this.row = new layout_row_1.LayoutRow(minY);
        this.startRowFormatting(true);
    }
    Object.defineProperty(RowFormatterResult.prototype, "rowStartPos", {
        get: function () {
            return this.rowFormatter.rowSizesManager.rowStartPos;
        },
        enumerable: true,
        configurable: true
    });
    RowFormatterResult.prototype.startRowFormatting = function (deleteAnchoredObjects) {
        this.flags = new flag_1.Flag(RowFormatterResultFlag.None);
        this.row.boxes = [];
        this.rowBoxIndexStart = 0;
        if (deleteAnchoredObjects)
            this.newAnchoredObjects = [];
    };
    RowFormatterResult.prototype.finishLogicalRow = function (currLogicRowEndPos) {
        if (this.rowBoxIndexStart == this.row.boxes.length)
            return;
        this.rowFormatter.tabInfo.shiftBoxesAfterLastTab();
        var dontJustifyLinesEndingInSoftLineBreak = this.rowFormatter.manager.model.compatibilitySettings.dontJustifyLinesEndingInSoftLineBreak;
        box_aligner_1.BoxAligner.align(this.row, this.rowFormatter.paragraphProps.alignment, currLogicRowEndPos, this.rowBoxIndexStart, dontJustifyLinesEndingInSoftLineBreak);
        this.rowBoxIndexStart = this.row.boxes.length;
    };
    RowFormatterResult.prototype.deleteSomeAnchorObjects = function (index, posToRestart) {
        this.newAnchoredObjects.splice(index);
        this.rowFormatter.iterator.setPosition(posToRestart, false, false);
    };
    RowFormatterResult.prototype.finishRow = function () {
        this.finishLogicalRow(this.rowFormatter.rowSizesManager.rowFormattingInfo.lastNonEmptyInterval.end);
        var lastBoxOffset = list_1.ListUtils.last(this.row.boxes).rowOffset;
        for (var ind = 0, anc = void 0; anc = this.newAnchoredObjects[ind]; ind++) {
            if (anc.rowOffset > lastBoxOffset) {
                this.deleteSomeAnchorObjects(ind, anc.rowOffset);
                break;
            }
            if (anc.levelType == layout_anchored_object_box_1.AnchoredObjectLevelType.InText) {
                this.deleteSomeAnchorObjects(ind + 1, anc.rowOffset + 1);
                break;
            }
        }
        var paragraphs = this.rowFormatter.subDocument.paragraphs;
        this.row.applySpacingAfter(this.row.flags.get(layout_row_1.LayoutRowStateFlags.ParagraphEnd) ?
            layout_row_1.LayoutRow.getParagraphSpacingAfter(paragraphs[this.paragraphIndex], paragraphs[this.paragraphIndex + 1]) :
            0);
        var rowStartPos = this.rowFormatter.rowSizesManager.rowStartPos;
        for (var _i = 0, _a = this.row.boxes; _i < _a.length; _i++) {
            var box = _a[_i];
            box.x -= this.row.x;
            box.rowOffset -= rowStartPos;
        }
        var rowLength = this.row.boxes.length ? list_1.ListUtils.last(this.row.boxes).getEndPosition() : 0;
        this.addBrackets(rowStartPos, rowLength);
        if (this.row.numberingListBox) {
            this.row.numberingListBox.textBox.x -= this.row.x;
            if (this.row.numberingListBox.separatorBox)
                this.row.numberingListBox.separatorBox.x -= this.row.x;
        }
        this.row.columnOffset = rowStartPos -
            this.rowFormatter.manager.activeFormatter.layoutPosition.getLogPosition(document_layout_details_level_1.DocumentLayoutDetailsLevel.Column);
        var pictBox = this.onlyInlinePictureBox();
        if (pictBox && pictBox.width > this.row.width)
            this.row.width = pictBox.width;
        var currState = this.rowFormatter.rowSizesManager.heightCalculator.currState;
        this.row.increaseRowHeightFromSpacingBeforeAndAfter(currState.maxAscent, currState.maxDescent);
    };
    RowFormatterResult.prototype.onlyInlinePictureBox = function () {
        var pictBox;
        for (var ind = this.row.boxes.length - 1; ind >= 0; ind--) {
            var box = this.row.boxes[ind];
            if (box.getType() == layout_box_1.LayoutBoxType.Picture) {
                pictBox = box;
            }
            else if (!enum_1.EnumUtils.isAnyOf(box.getType(), layout_box_1.LayoutBoxType.ParagraphMark, layout_box_1.LayoutBoxType.SectionMark, layout_box_1.LayoutBoxType.LineBreak, layout_box_1.LayoutBoxType.PageBreak)) {
                return null;
            }
        }
        return pictBox;
    };
    RowFormatterResult.prototype.addBracketBox = function (boxType, color, x, layoutBox) {
        var box = new bookmark_box_1.BookmarkBox(boxType);
        box.x = x - (boxType == bookmark_box_1.LayoutBookmarkBoxType.EndBox ? bookmark_box_1.BookmarkBox.DEFAULT_BORDER_WIDTH : 0);
        box.y = this.row.baseLine - layoutBox.getAscent() - this.row.getSpacingBefore();
        box.width = bookmark_box_1.BookmarkBox.DEFAULT_WIDTH;
        box.height = layoutBox.height;
        box.color = color;
        this.row.bookmarkBoxes.push(box);
    };
    RowFormatterResult.prototype.addBrackets = function (rowStartPos, rowLength) {
        var _this = this;
        if (!this.row.boxes[0])
            return;
        var rowEndPos = rowStartPos + rowLength;
        list_1.ListUtils.forEach(this.rowFormatter.iterator.getBracketInfo(rowStartPos, rowLength), function (info) {
            var posOfCharInRow = info.absPos - rowStartPos;
            var box = _this.getBracketBox(posOfCharInRow);
            var xPos = _this.getBracketXPosition(posOfCharInRow, box);
            if (info.flags.get(BoxBracketsType.Open) && info.absPos < rowEndPos)
                _this.addBracketBox(bookmark_box_1.LayoutBookmarkBoxType.StartBox, info.color, xPos, box);
            if (info.flags.get(BoxBracketsType.Close) &&
                (info.length != 0 && info.absPos > rowStartPos || info.length == 0 && info.absPos <= rowStartPos))
                _this.addBracketBox(bookmark_box_1.LayoutBookmarkBoxType.EndBox, info.color, xPos + (info.length == 0 ? bookmark_box_1.BookmarkBox.DEFAULT_BORDER_WIDTH : 0), box);
        });
    };
    RowFormatterResult.prototype.getBracketBox = function (posOfCharInRow) {
        var boxes = this.row.boxes;
        var boxIndex = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(boxes, function (b) { return b.rowOffset; }, posOfCharInRow));
        return boxes[boxIndex];
    };
    RowFormatterResult.prototype.getBracketXPosition = function (posOfCharInRow, box) {
        var charOffset = math_1.MathUtils.restrictValue(posOfCharInRow - box.rowOffset, 0, box.getLength());
        return box.x + box.getCharOffsetXInPixels(this.rowFormatter.manager.measurer, charOffset);
    };
    return RowFormatterResult;
}());
exports.RowFormatterResult = RowFormatterResult;
