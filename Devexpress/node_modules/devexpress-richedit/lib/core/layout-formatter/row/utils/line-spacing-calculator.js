"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var paragraph_properties_1 = require("../../../model/paragraph/paragraph-properties");
var LineSpacingCalculator = (function () {
    function LineSpacingCalculator() {
    }
    LineSpacingCalculator.create = function (lineSpacing, lineSpacingType) {
        switch (lineSpacingType) {
            case paragraph_properties_1.ParagraphLineSpacingType.AtLeast:
                return new AtLeastSpacingCalculator(Math.max(1, unit_converter_1.UnitConverter.twipsToPixelsF(lineSpacing)));
            case paragraph_properties_1.ParagraphLineSpacingType.Double:
                return new DoubleSpacingCalculator();
            case paragraph_properties_1.ParagraphLineSpacingType.Exactly:
                return new ExactlySpacingCalculator(Math.max(1, unit_converter_1.UnitConverter.twipsToPixelsF(lineSpacing)));
            case paragraph_properties_1.ParagraphLineSpacingType.Multiple:
                return new MultipleSpacingCalculator(lineSpacing !== 0 ? lineSpacing : 1);
            case paragraph_properties_1.ParagraphLineSpacingType.Sesquialteral:
                return new SesquialteralSpacingCalculator();
            case paragraph_properties_1.ParagraphLineSpacingType.Single:
            default:
                return new SingleSpacingCalculator();
        }
    };
    LineSpacingCalculator.prototype.calculate = function (rowHeight, maxAscent, maxDescent, maxPictureHeight) {
        var maxTextHeight = maxAscent + maxDescent;
        if (maxTextHeight == 0)
            return rowHeight;
        var rowTextSpacing = this.calculateSpacing(maxTextHeight);
        if (!maxPictureHeight || maxAscent > maxPictureHeight)
            return rowTextSpacing;
        else {
            if (maxDescent == 0)
                return rowHeight;
            else
                return this.calculateSpacingInlineObjectCase(maxTextHeight, rowTextSpacing, maxPictureHeight, maxDescent);
        }
    };
    return LineSpacingCalculator;
}());
exports.LineSpacingCalculator = LineSpacingCalculator;
var MultipleSpacingCalculator = (function (_super) {
    tslib_1.__extends(MultipleSpacingCalculator, _super);
    function MultipleSpacingCalculator(multiplier) {
        var _this = _super.call(this) || this;
        if (multiplier <= 0)
            throw new Error(argumentException("multiplier", multiplier));
        _this.multiplier = multiplier;
        return _this;
    }
    MultipleSpacingCalculator.prototype.calculateSpacing = function (maxTextHeight) {
        return maxTextHeight * this.multiplier;
    };
    MultipleSpacingCalculator.prototype.calculateSpacingInlineObjectCase = function (maxTextHeight, rowTextSpacing, maxPictureHeight, maxDescent) {
        return maxPictureHeight + maxDescent + (rowTextSpacing - maxTextHeight);
    };
    return MultipleSpacingCalculator;
}(LineSpacingCalculator));
exports.MultipleSpacingCalculator = MultipleSpacingCalculator;
var SingleSpacingCalculator = (function (_super) {
    tslib_1.__extends(SingleSpacingCalculator, _super);
    function SingleSpacingCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingleSpacingCalculator.prototype.calculateSpacing = function (maxTextHeight) {
        return maxTextHeight;
    };
    SingleSpacingCalculator.prototype.calculateSpacingInlineObjectCase = function (_maxTextHeight, _rowTextSpacing, maxPictureHeight, maxDescent) {
        return maxPictureHeight + maxDescent;
    };
    return SingleSpacingCalculator;
}(LineSpacingCalculator));
exports.SingleSpacingCalculator = SingleSpacingCalculator;
var DoubleSpacingCalculator = (function (_super) {
    tslib_1.__extends(DoubleSpacingCalculator, _super);
    function DoubleSpacingCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DoubleSpacingCalculator.prototype.calculateSpacing = function (maxTextHeight) {
        return 2 * maxTextHeight;
    };
    DoubleSpacingCalculator.prototype.calculateSpacingInlineObjectCase = function (maxTextHeight, rowTextSpacing, maxPictureHeight, maxDescent) {
        return maxPictureHeight + maxDescent + (rowTextSpacing - maxTextHeight);
    };
    return DoubleSpacingCalculator;
}(LineSpacingCalculator));
exports.DoubleSpacingCalculator = DoubleSpacingCalculator;
var SesquialteralSpacingCalculator = (function (_super) {
    tslib_1.__extends(SesquialteralSpacingCalculator, _super);
    function SesquialteralSpacingCalculator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SesquialteralSpacingCalculator.prototype.calculateSpacing = function (maxTextHeight) {
        return 3 * maxTextHeight / 2;
    };
    SesquialteralSpacingCalculator.prototype.calculateSpacingInlineObjectCase = function (maxTextHeight, rowTextSpacing, maxPictureHeight, maxDescent) {
        return maxPictureHeight + maxDescent + (rowTextSpacing - maxTextHeight);
    };
    return SesquialteralSpacingCalculator;
}(LineSpacingCalculator));
exports.SesquialteralSpacingCalculator = SesquialteralSpacingCalculator;
var ExactlySpacingCalculator = (function (_super) {
    tslib_1.__extends(ExactlySpacingCalculator, _super);
    function ExactlySpacingCalculator(lineSpacing) {
        var _this = _super.call(this) || this;
        _this.lineSpacing = lineSpacing;
        return _this;
    }
    ExactlySpacingCalculator.prototype.calculateSpacing = function (_maxTextHeight) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    ExactlySpacingCalculator.prototype.calculateSpacingInlineObjectCase = function (_maxTextHeight, _rowTextSpacing, _maxPictureHeight, _maxDescent) {
        throw new Error(errors_1.Errors.NotImplemented);
    };
    ExactlySpacingCalculator.prototype.calculate = function (_rowHeight, _maxAscent, _maxDescent, _maxPictureHeight) {
        return this.lineSpacing;
    };
    return ExactlySpacingCalculator;
}(LineSpacingCalculator));
exports.ExactlySpacingCalculator = ExactlySpacingCalculator;
var AtLeastSpacingCalculator = (function (_super) {
    tslib_1.__extends(AtLeastSpacingCalculator, _super);
    function AtLeastSpacingCalculator(lineSpacing) {
        var _this = _super.call(this) || this;
        if (lineSpacing <= 0)
            throw new Error(argumentException("lineSpacing", lineSpacing));
        _this.lineSpacing = lineSpacing;
        return _this;
    }
    AtLeastSpacingCalculator.prototype.calculate = function (rowHeight, maxAscent, maxDescent, maxPictureHeight) {
        var result = _super.prototype.calculate.call(this, rowHeight, maxAscent, maxDescent, maxPictureHeight);
        return Math.max(result, this.lineSpacing);
    };
    return AtLeastSpacingCalculator;
}(SingleSpacingCalculator));
exports.AtLeastSpacingCalculator = AtLeastSpacingCalculator;
function argumentException(argument, value) {
    return argument + ' is not a valid value for ' + (value ? value.toString() : typeof (value));
}
