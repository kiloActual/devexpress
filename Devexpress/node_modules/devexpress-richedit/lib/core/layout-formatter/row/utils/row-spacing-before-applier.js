"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layout_row_1 = require("../../../layout/main-structures/layout-row");
var TableRowSpacingBeforeApplier = (function () {
    function TableRowSpacingBeforeApplier(lastRow, paragraphs, isFirstRowInCell, isFirstCellInRow, isFirstRowInTable) {
        this.lastRow = lastRow;
        this.paragraphs = paragraphs;
        this.isFirstRowInCell = isFirstRowInCell;
        this.isFirstCellInRow = isFirstCellInRow;
        this.isFirstRowInTable = isFirstRowInTable;
    }
    TableRowSpacingBeforeApplier.prototype.apply = function (row, rowParagraphIndex) {
        row.applySpacingBefore(this.lastRow && !this.lastRow.flags.get(layout_row_1.LayoutRowStateFlags.ParagraphEnd) ? 0 :
            layout_row_1.LayoutRow.getParagraphSpacingBefore(this.paragraphs[rowParagraphIndex], this.paragraphs[rowParagraphIndex - 1], this.isFirstRowInCell, this.isFirstCellInRow, this.isFirstRowInTable));
    };
    return TableRowSpacingBeforeApplier;
}());
exports.TableRowSpacingBeforeApplier = TableRowSpacingBeforeApplier;
var RowSpacingBeforeApplier = (function () {
    function RowSpacingBeforeApplier(lastRow, paragraphs, isFirstRowOnColumn, lastRowParagraphIndex) {
        this.lastRow = lastRow;
        this.paragraphs = paragraphs;
        this.isFirstRowOnColumn = isFirstRowOnColumn;
        this.lastRowParagraphIndex = lastRowParagraphIndex;
    }
    RowSpacingBeforeApplier.prototype.apply = function (row, rowParagraphIndex) {
        if (!this.lastRow || this.lastRow.flags.get(layout_row_1.LayoutRowStateFlags.SectionEnd) || (this.lastRow.tableCellInfo && !this.isFirstRowOnColumn)) {
            row.applySpacingBefore(layout_row_1.LayoutRow.getParagraphSpacingBefore(this.paragraphs[rowParagraphIndex], null, false, false, false));
        }
        else if (rowParagraphIndex == this.lastRowParagraphIndex || this.isFirstRowOnColumn) {
            row.applySpacingBefore(0);
        }
        else
            row.applySpacingBefore(layout_row_1.LayoutRow.getParagraphSpacingBefore(this.paragraphs[rowParagraphIndex], this.paragraphs[rowParagraphIndex - 1], false, false, false));
    };
    return RowSpacingBeforeApplier;
}());
exports.RowSpacingBeforeApplier = RowSpacingBeforeApplier;
