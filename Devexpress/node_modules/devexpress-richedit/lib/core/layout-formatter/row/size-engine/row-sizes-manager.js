"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_box_1 = require("../../../layout/main-structures/layout-boxes/layout-box");
var layout_numbering_list_box_1 = require("../../../layout/main-structures/layout-boxes/layout-numbering-list-box");
var list_level_properties_1 = require("../../../model/numbering-lists/list-level-properties");
var paragraph_properties_1 = require("../../../model/paragraph/paragraph-properties");
var box_wrap_1 = require("../../box/box-wrap");
var row_formatting_info_1 = require("./row-formatting-info");
var row_height_calculator_1 = require("./row-height-calculator");
var RowSizesManager = (function () {
    function RowSizesManager(rowFormatter, outerHorizontalRowContentBounds, minY, rowSpacingBeforeApplier, boundsOfAnchoredOblectsOnThisColumn, isFirstRowInParagraph) {
        this.rowFormatter = rowFormatter;
        this.row = this.rowFormatter.row;
        this.row.x = outerHorizontalRowContentBounds.start;
        this.row.width = outerHorizontalRowContentBounds.length;
        this.rowStartPos = this.rowFormatter.currBox.rowOffset;
        this.heightCalculator = new row_height_calculator_1.RowHeightCalculator(this.rowFormatter, rowSpacingBeforeApplier);
        if (isFirstRowInParagraph && this.rowFormatter.paragraph.isInList())
            this.addNumberingListBoxes();
        this.rowFormattingInfo = new row_formatting_info_1.RowFormattingInfo(minY, this.heightCalculator.currState.getFullRowHeight(), outerHorizontalRowContentBounds, boundsOfAnchoredOblectsOnThisColumn);
        this.rowFormattingInfo.calculate();
    }
    RowSizesManager.prototype.addNumberingListBoxes = function () {
        var paragraph = this.rowFormatter.paragraph;
        var charProp = paragraph.getNumerationCharacterProperties();
        this.row.numberingListBox = new layout_numbering_list_box_1.LayoutNumberingListBox(charProp, charProp.getLayoutColorInfo(this.rowFormatter.manager.model.colorProvider), paragraph.getNumberingListTextCore(this.rowFormatter.numberingListCountersManager.calculateCounters(this.rowFormatter.result.paragraphIndex)), paragraph.getNumberingListSeparatorChar(), this.rowFormatter.manager.model.cache.mergedCharacterPropertiesCache, paragraph.getListLevel().getListLevelProperties().alignment, this.rowFormatter.manager.model.cache.fontInfoCache);
        layout_box_1.LayoutBox.initializeWithMeasurer([new box_wrap_1.BoxWrap(this.row.numberingListBox, null)], this.rowFormatter.manager.measurer, this.rowFormatter.manager.innerClientProperties.showHiddenSymbols);
        var boxes = [this.row.numberingListBox.textBox];
        var separatorBox = this.row.numberingListBox.separatorBox;
        if (separatorBox)
            boxes.push(separatorBox);
        for (var _i = 0, boxes_1 = boxes; _i < boxes_1.length; _i++) {
            var box = boxes_1[_i];
            this.heightCalculator.applyState(this.heightCalculator.getState(box));
        }
    };
    RowSizesManager.prototype.addFullWord = function (boxes) {
        var _this = this;
        var wordWidth = list_1.ListUtils.accumulate(boxes, 0, function (width, box) { return width + box.width; });
        var currIntervalEndPos = this.rowFormattingInfo.currInterval.end;
        var indexOfFreeInterval = this.rowFormattingInfo.indexOfFreeInterval(wordWidth);
        if (indexOfFreeInterval < 0)
            return false;
        var oldHeightState = this.heightCalculator.currState;
        list_1.ListUtils.forEach(boxes, function (box) { return _this.heightCalculator.applyState(_this.heightCalculator.getState(box)); });
        var newHeightState = this.heightCalculator.currState;
        var newHeight = newHeightState.getFullRowHeight();
        this.rowFormattingInfo.intervals[indexOfFreeInterval].avaliableWidth -= wordWidth;
        if (newHeight != this.rowFormattingInfo.height && !this.rowFormattingInfo.canIncrementHeightTo(newHeight)) {
            this.rowFormattingInfo.height = newHeight;
            this.heightCalculator.currState = oldHeightState;
            this.restartAllRow();
            return null;
        }
        this.heightCalculator.applyState(newHeightState);
        if (this.rowFormattingInfo.currIndex != indexOfFreeInterval)
            this.finishLogicalRow(indexOfFreeInterval, currIntervalEndPos);
        var x = this.rowFormattingInfo.currInterval.startOfFreeSpace - wordWidth;
        for (var _i = 0, boxes_2 = boxes; _i < boxes_2.length; _i++) {
            var box = boxes_2[_i];
            box.x = x;
            x += box.width;
            this.row.boxes.push(box);
            this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        }
        return true;
    };
    RowSizesManager.prototype.addWordByChars = function (boxes) {
        var isAddAtLeastOneChar = true;
        var viewsSettings = this.rowFormatter.manager.innerClientProperties.viewsSettings;
        for (var _i = 0, boxes_3 = boxes; _i < boxes_3.length; _i++) {
            var box = boxes_3[_i];
            if (this.rowFormattingInfo.currInterval.avaliableWidth >= box.width) {
                box.x = this.rowFormattingInfo.currInterval.startOfFreeSpace;
                this.rowFormattingInfo.currInterval.avaliableWidth -= box.width;
                this.row.boxes.push(box);
                this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
                this.heightCalculator.applyState(this.heightCalculator.getState(box));
            }
            else {
                var newBox = box.splitByWidth(this.rowFormatter.manager.measurer, this.rowFormattingInfo.currInterval.avaliableWidth, isAddAtLeastOneChar);
                if (newBox) {
                    newBox.x = this.rowFormattingInfo.currInterval.startOfFreeSpace;
                    this.row.boxes.push(newBox);
                    this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
                    this.heightCalculator.applyState(this.heightCalculator.getState(newBox));
                    return newBox.getEndPosition();
                }
                return box.rowOffset;
            }
            isAddAtLeastOneChar = false;
        }
        if (viewsSettings.isSimpleView)
            return boxes[boxes.length - 1].getEndPosition();
        throw new Error(errors_1.Errors.InternalException);
    };
    RowSizesManager.prototype.addTabBox = function (box) {
        this.row.boxes.push(box);
        this.rowFormattingInfo.currInterval.avaliableWidth -= box.width;
        this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        this.rowFormatter.setBoxInfo(true);
    };
    RowSizesManager.prototype.addBox = function () {
        var currIntervalEndPos = this.rowFormattingInfo.currInterval.end;
        var box = this.rowFormatter.currBox;
        var indexOfFreeInterval = this.rowFormattingInfo.indexOfFreeInterval(box.width);
        if (indexOfFreeInterval < 0) {
            if (this.row.isEmpty()) {
                if (this.rowFormattingInfo.isFloatingIntersectRow) {
                    this.rowFormattingInfo.findNextYPos();
                    this.rowFormattingInfo.currIndex = 0;
                    this.addBox();
                }
                else {
                    box.x = this.rowFormattingInfo.intervals[0].startOfFreeSpace;
                    this.rowFormattingInfo.intervals[0].avaliableWidth -= Math.min(box.width, this.rowFormattingInfo.intervals[0].avaliableWidth);
                    this.addBoxIgnoreWidth();
                }
            }
            else
                this.rowFormatter.finishRow();
            return;
        }
        this.rowFormattingInfo.intervals[indexOfFreeInterval].avaliableWidth -= box.width;
        var newHeightState = this.heightCalculator.getState(box);
        var newHeight = newHeightState.getFullRowHeight();
        if (newHeight != this.rowFormattingInfo.height && !this.rowFormattingInfo.canIncrementHeightTo(newHeight)) {
            this.rowFormattingInfo.intervals[indexOfFreeInterval].avaliableWidth += box.width;
            this.rowFormattingInfo.height = newHeight;
            this.restartAllRow();
            return;
        }
        this.rowFormattingInfo.height = newHeight;
        this.heightCalculator.applyState(newHeightState);
        if (this.rowFormattingInfo.currIndex != indexOfFreeInterval)
            this.finishLogicalRow(indexOfFreeInterval, currIntervalEndPos);
        box.x = this.rowFormattingInfo.currInterval.startOfFreeSpace - box.width;
        this.row.boxes.push(box);
        this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        this.rowFormatter.setBoxInfo(true);
    };
    RowSizesManager.prototype.addBoxIgnoreWidth = function () {
        var box = this.rowFormatter.currBox;
        this.row.boxes.push(box);
        this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        this.heightCalculator.applyState(this.heightCalculator.getState(box));
        this.rowFormatter.setBoxInfo(true);
    };
    RowSizesManager.prototype.anywayAddBox = function () {
        var box = this.rowFormatter.currBox;
        box.x = this.rowFormattingInfo.currInterval.startOfFreeSpace;
        this.rowFormattingInfo.currInterval.avaliableWidth -= box.width;
        if (this.rowFormattingInfo.currInterval.avaliableWidth < 0)
            this.rowFormattingInfo.currInterval.avaliableWidth = 0;
        this.row.boxes.push(box);
        this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        this.rowFormatter.setBoxInfo(true);
    };
    RowSizesManager.prototype.restartAllRow = function (deleteAnchoredObjects) {
        if (deleteAnchoredObjects === void 0) { deleteAnchoredObjects = true; }
        this.rowFormatter.setPosition(this.rowStartPos, false, true);
        this.rowFormatter.setBoxInfo(false);
        this.rowFormattingInfo.calculate();
        this.rowFormattingInfo.currIndex = 0;
        this.rowFormatter.result.startRowFormatting(deleteAnchoredObjects);
        this.rowFormatter.wordHolder.restart();
        this.rowFormatter.tabInfo.restart();
    };
    RowSizesManager.prototype.finishLogicalRow = function (nextIndex, prevRowEndPos) {
        if (this.rowFormattingInfo.currInterval.isConsiderBoxes())
            this.rowFormatter.result.finishLogicalRow(prevRowEndPos);
        this.rowFormattingInfo.currIndex = nextIndex;
    };
    RowSizesManager.prototype.finishRow = function () {
        this.row.y = this.rowFormattingInfo.minY;
        if (this.heightCalculator.setFinalRowParams() ||
            this.rowFormattingInfo.canIncrementHeightTo(this.heightCalculator.currState.getFullRowHeight())) {
            this.rowFormatter.result.finishRow();
            return true;
        }
        this.rowFormattingInfo.height = this.heightCalculator.currState.getFullRowHeight();
        this.restartAllRow();
        return false;
    };
    RowSizesManager.prototype.addNumberingBoxes = function () {
        return !!this.row.boxes.length || !this.row.numberingListBox || this.tryPlaceNumberingBoxes();
    };
    RowSizesManager.prototype.getTabEndPos = function (isFirstIteration, textBoxEndPos) {
        var customTabPos = this.rowFormatter.tabInfo.getNextCustomTabPosition(textBoxEndPos);
        if (this.rowFormatter.paragraphProps.firstLineIndentType == paragraph_properties_1.ParagraphFirstLineIndent.Hanging) {
            var rightBound = this.rowFormatter.paragraphHorizontalBounds.start +
                unit_converter_1.UnitConverter.twipsToPixelsF(this.rowFormatter.paragraphProps.leftIndent);
            if (customTabPos && isFirstIteration && rightBound > textBoxEndPos &&
                fixed_1.FixedInterval.fromPositions(textBoxEndPos, rightBound).contains(customTabPos.position))
                return customTabPos.position;
            return rightBound < textBoxEndPos ? this.rowFormatter.tabInfo.getNextDefaultTabPosition(textBoxEndPos) : rightBound;
        }
        else
            return customTabPos ? customTabPos.position : this.rowFormatter.tabInfo.getNextDefaultTabPosition(textBoxEndPos);
    };
    RowSizesManager.prototype.tryPlaceNumberingBoxes = function () {
        for (var isFirstIteration = true; true; isFirstIteration = false) {
            if (!this.placeNumberingTextBox(this.row.numberingListBox))
                return false;
            var separatorBox = this.row.numberingListBox.separatorBox;
            if (!separatorBox)
                return true;
            var textBoxEndPos = this.row.numberingListBox.textBox.right;
            separatorBox.x = textBoxEndPos;
            if (separatorBox.getType() == layout_box_1.LayoutBoxType.TabSpace) {
                var tabEndPosition = this.getTabEndPos(isFirstIteration, textBoxEndPos);
                var canPlace = !this.rowFormattingInfo.isFloatingIntersectRow ||
                    this.rowFormattingInfo.currInterval.containsWithIntervalEnd(tabEndPosition);
                if (canPlace) {
                    separatorBox.width = tabEndPosition - textBoxEndPos;
                    this.rowFormattingInfo.currInterval.avaliableWidth -= separatorBox.width;
                    this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
                    return true;
                }
            }
            else {
                if (separatorBox.width <= this.rowFormattingInfo.currInterval.avaliableWidth) {
                    this.rowFormattingInfo.currInterval.avaliableWidth -= separatorBox.width;
                    this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
                    return true;
                }
            }
            this.finishLogicalRow(this.rowFormatter.rowSizesManager.rowFormattingInfo.currIndex + 1, this.rowFormatter.rowSizesManager.rowFormattingInfo.currInterval.end);
        }
    };
    RowSizesManager.prototype.applyNumberingListBoxAlignment = function (alignment, boxWidth) {
        var currentInterval = this.rowFormattingInfo.currInterval;
        var offset = 0;
        if (alignment == list_level_properties_1.ListNumberAlignment.Center / 2)
            offset = boxWidth;
        else if (alignment == list_level_properties_1.ListNumberAlignment.Right)
            offset = boxWidth;
        currentInterval.start -= offset;
        this.row.x -= offset;
    };
    RowSizesManager.prototype.placeNumberingTextBox = function (numberingListBox) {
        var box = numberingListBox.textBox;
        if (this.rowFormattingInfo.isFloatingIntersectRow) {
            var currIntervalEndPos = this.rowFormattingInfo.currInterval ? this.rowFormattingInfo.currInterval.end : -1;
            var indexOfFreeInterval = this.rowFormattingInfo.indexOfFreeInterval(box.width);
            if (indexOfFreeInterval < 0) {
                this.rowFormattingInfo.findNextYPos();
                this.rowFormattingInfo.currIndex = 0;
                this.restartAllRow();
                return false;
            }
            if (this.rowFormattingInfo.currIndex != indexOfFreeInterval)
                this.finishLogicalRow(indexOfFreeInterval, currIntervalEndPos);
        }
        this.applyNumberingListBoxAlignment(numberingListBox.alignment, box.width);
        box.x = this.rowFormattingInfo.currInterval.startOfFreeSpace;
        this.rowFormattingInfo.currInterval.avaliableWidth -= box.width;
        this.rowFormattingInfo.lastNonEmptyIntervalIndex = this.rowFormattingInfo.currIndex;
        return true;
    };
    return RowSizesManager;
}());
exports.RowSizesManager = RowSizesManager;
