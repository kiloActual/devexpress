"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var layout_anchored_object_box_1 = require("../../../layout/main-structures/layout-boxes/layout-anchored-object-box");
var layout_box_1 = require("../../../layout/main-structures/layout-boxes/layout-box");
var paragraph_properties_1 = require("../../../model/paragraph/paragraph-properties");
var line_spacing_calculator_1 = require("../utils/line-spacing-calculator");
var row_height_state_1 = require("./row-height-state");
var RowHeightCalculator = (function () {
    function RowHeightCalculator(rowFormatter, rowSpacingBeforeApplier) {
        this.rowFormatter = rowFormatter;
        this.rowSpacingBeforeApplier = rowSpacingBeforeApplier;
        this.lineSpacingCalculator = line_spacing_calculator_1.LineSpacingCalculator.create(this.rowFormatter.paragraphProps.lineSpacing, this.rowFormatter.paragraphProps.lineSpacingType);
        this.currState = new row_height_state_1.RowHeightState(0, 0, 0, 0);
        this.currState.height = 0;
        this.currState.baseLine = 0;
        this.currState.spacingBefore = 0;
        this.applyState(this.getState(this.rowFormatter.currBox));
    }
    Object.defineProperty(RowHeightCalculator.prototype, "row", {
        get: function () {
            return this.rowFormatter.row;
        },
        enumerable: true,
        configurable: true
    });
    RowHeightCalculator.prototype.getState = function (box) {
        var info;
        switch (box.getType()) {
            case layout_box_1.LayoutBoxType.Text:
            case layout_box_1.LayoutBoxType.FieldCodeStart:
            case layout_box_1.LayoutBoxType.FieldCodeEnd:
            case layout_box_1.LayoutBoxType.Dash: {
                info = new row_height_state_1.RowHeightState(Math.max(box.height, this.currState.maxBoxHeight), Math.max(box.getAscent(), this.currState.maxAscent), Math.max(box.getDescent(), this.currState.maxDescent), this.currState.maxPictureBoxHeight);
                break;
            }
            case layout_box_1.LayoutBoxType.Picture: {
                info = new row_height_state_1.RowHeightState(Math.max(box.height, this.currState.maxBoxHeight), this.currState.maxAscent, this.currState.maxDescent, Math.max(box.height, this.currState.maxPictureBoxHeight));
                break;
            }
            default:
                return this.currState;
        }
        return this.calcNewState(info);
    };
    RowHeightCalculator.prototype.calcNewState = function (newInfo) {
        if (this.currState.equalHeights(newInfo) || newInfo.maxBoxHeight == 0)
            return this.currState;
        this.calcRowParams(newInfo.maxBoxHeight, newInfo.maxAscent, newInfo.maxDescent, newInfo.maxPictureBoxHeight);
        newInfo.initFromRow(this.row);
        return newInfo;
    };
    RowHeightCalculator.prototype.applyState = function (state) {
        this.currState = state;
    };
    RowHeightCalculator.prototype.T584234 = function () {
        var _this = this;
        var row = this.row;
        if (row.boxes.length && row.boxes[0].getType() == layout_box_1.LayoutBoxType.Picture &&
            list_1.ListUtils.allOf(row.boxes, function (b) { return RowHeightCalculator.affectedBoxesT584234[b.getType()]; }, 1)) {
            var prevBox = row.boxes[0];
            var applied = false;
            for (var boxIndex = 2, box = void 0; box = row.boxes[boxIndex]; boxIndex++) {
                if (box.getType() == layout_box_1.LayoutBoxType.Picture &&
                    prevBox.getType() != layout_box_1.LayoutBoxType.Picture && RowHeightCalculator.affectedBoxesT584234[prevBox.getType()]) {
                    applied = true;
                    this.applyT584234Height(prevBox);
                }
                prevBox = box;
            }
            if (!applied) {
                list_1.ListUtils.reverseForEach(row.boxes, function (b) {
                    if (b.getType() != layout_box_1.LayoutBoxType.Picture) {
                        _this.applyT584234Height(b);
                    }
                });
            }
        }
    };
    RowHeightCalculator.prototype.applyT584234Height = function (b) {
        var info = new row_height_state_1.RowHeightState(Math.max(b.height, this.currState.maxBoxHeight), Math.max(b.getAscent(), this.currState.maxAscent), Math.max(b.getDescent(), this.currState.maxDescent), this.currState.maxPictureBoxHeight);
        this.applyState(this.calcNewState(info));
    };
    RowHeightCalculator.prototype.setFinalRowParams = function () {
        var row = this.row;
        if (this.currState.maxBoxHeight != 0) {
            this.T584234();
            this.currState.applyToRow(row);
            return true;
        }
        var lastBox = list_1.ListUtils.last(row.boxes);
        if (!lastBox && list_1.ListUtils.unsafeAnyOf(this.rowFormatter.result.newAnchoredObjects, function (obj) { return obj.levelType == layout_anchored_object_box_1.AnchoredObjectLevelType.InText; }))
            return true;
        this.calcRowParams(lastBox.height, lastBox.getAscent(), lastBox.getDescent(), this.currState.maxPictureBoxHeight);
        this.currState.initFromRow(this.row);
        return false;
    };
    RowHeightCalculator.prototype.calcRowParams = function (maxBoxHeight, maxAscent, maxDescent, maxPictureBoxHeight) {
        var row = this.row;
        row.rollbackSpacingBefore();
        row.height = this.lineSpacingCalculator.calculate(maxBoxHeight, maxAscent, maxDescent, maxPictureBoxHeight);
        switch (this.rowFormatter.paragraphProps.lineSpacingType) {
            case paragraph_properties_1.ParagraphLineSpacingType.AtLeast:
            case paragraph_properties_1.ParagraphLineSpacingType.Exactly:
                row.baseLine = Math.max(0, row.height - maxDescent);
                break;
            default:
                row.baseLine = Math.max(maxAscent, maxPictureBoxHeight);
        }
        this.rowSpacingBeforeApplier.apply(this.row, this.rowFormatter.result.paragraphIndex);
    };
    RowHeightCalculator.affectedBoxesT584234 = (_a = {},
        _a[layout_box_1.LayoutBoxType.LineBreak] = true,
        _a[layout_box_1.LayoutBoxType.ParagraphMark] = true,
        _a[layout_box_1.LayoutBoxType.TabSpace] = true,
        _a[layout_box_1.LayoutBoxType.Space] = true,
        _a[layout_box_1.LayoutBoxType.Picture] = true,
        _a);
    return RowHeightCalculator;
}());
exports.RowHeightCalculator = RowHeightCalculator;
