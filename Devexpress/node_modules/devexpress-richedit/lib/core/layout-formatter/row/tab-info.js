"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var math_1 = require("@devexpress/utils/lib/utils/math");
var search_1 = require("@devexpress/utils/lib/utils/search");
var string_1 = require("@devexpress/utils/lib/utils/string");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var layout_tab_space_box_1 = require("../../layout/main-structures/layout-boxes/layout-tab-space-box");
var paragraph_1 = require("../../model/paragraph/paragraph");
var paragraph_properties_1 = require("../../model/paragraph/paragraph-properties");
var paragraph_style_1 = require("../../model/paragraph/paragraph-style");
var box_aligner_1 = require("./utils/box-aligner");
var RowTabInfo = (function () {
    function RowTabInfo(rowFormatter, paragraphHorizontalBoundsStart) {
        this.rowFormatter = rowFormatter;
        this.paragraphHorizontalBoundsStart = paragraphHorizontalBoundsStart;
        var tabsInfo = this.rowFormatter.paragraph.getTabs();
        this.defaultTabStop = unit_converter_1.UnitConverter.twipsToPixelsF(tabsInfo.defaultTabStop);
        this.tabPositions = tabsInfo.positions;
        for (var _i = 0, _a = this.tabPositions; _i < _a.length; _i++) {
            var tabPosition = _a[_i];
            tabPosition.position = unit_converter_1.UnitConverter.twipsToPixelsF(tabPosition.position);
        }
        if (this.rowFormatter.paragraphProps.firstLineIndentType == paragraph_properties_1.ParagraphFirstLineIndent.Hanging && !this.rowFormatter.paragraph.isInList()) {
            var pos = unit_converter_1.UnitConverter.twipsToPixelsF(this.rowFormatter.paragraphProps.leftIndent);
            var ind = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(this.tabPositions, function (t) { return t.position; }, pos));
            var tab = this.tabPositions[ind];
            var oldTabPos = tab ? tab.position : Number.MAX_VALUE;
            if (oldTabPos != pos)
                this.tabPositions.splice(pos > oldTabPos ? ind + 1 : ind, 0, new paragraph_style_1.TabInfo(pos, paragraph_1.TabAlign.Left, layout_tab_space_box_1.TabLeaderType.None, false, false));
        }
        for (var _b = 0, _c = this.tabPositions; _b < _c.length; _b++) {
            var pos = _c[_b];
            pos.position += this.paragraphHorizontalBoundsStart;
        }
        this.restart();
    }
    Object.defineProperty(RowTabInfo.prototype, "row", {
        get: function () {
            return this.rowFormatter.row;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowTabInfo.prototype, "currIntervalOrLastNonEmpty", {
        get: function () {
            var currInterval = this.rowFormatter.rowSizesManager.rowFormattingInfo.currInterval;
            return currInterval ? currInterval : this.rowFormatter.rowSizesManager.rowFormattingInfo.lastNonEmptyInterval;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowTabInfo.prototype, "currInterval", {
        get: function () { return this.rowFormatter.rowSizesManager.rowFormattingInfo.currInterval; },
        enumerable: true,
        configurable: true
    });
    RowTabInfo.prototype.restart = function () {
        this.lastTabPosition = null;
        this.lastTabBoxIndex = -1;
    };
    RowTabInfo.prototype.shiftBoxesAfterLastTab = function () {
        if (!this.lastTabPosition || enum_1.EnumUtils.isAnyOf(this.lastTabPosition.alignment, paragraph_1.TabAlign.Left, paragraph_1.TabAlign.Numbering))
            return;
        var prevTabBox = this.row.boxes[this.lastTabBoxIndex];
        var prevTabNewWidth = this.calculateActualTabWidth(prevTabBox);
        if (prevTabNewWidth > 0) {
            prevTabBox.width = prevTabNewWidth;
            this.currIntervalOrLastNonEmpty.avaliableWidth -= prevTabNewWidth;
            list_1.ListUtils.forEach(this.row.boxes, function (box) { return box.x += prevTabNewWidth; }, this.lastTabBoxIndex + 1);
        }
        this.restart();
    };
    RowTabInfo.prototype.addTabBox = function () {
        var box = this.rowFormatter.currBox;
        this.shiftBoxesAfterLastTab();
        var tabPosition = this.getNextCustomTabPosition(this.currInterval.startOfFreeSpace);
        var tabXPosRelativePage = tabPosition ? tabPosition.position : this.getNextDefaultTabPosition(this.currInterval.startOfFreeSpace);
        if (tabXPosRelativePage > this.currInterval.end) {
            var ind = this.rowFormatter.rowSizesManager.rowFormattingInfo.indexOfIntervalContainsPositon(tabXPosRelativePage);
            if (ind != this.rowFormatter.rowSizesManager.rowFormattingInfo.currIndex) {
                var mustPlaceOnThisRow = tabPosition && tabPosition.alignment == paragraph_1.TabAlign.Right;
                if (mustPlaceOnThisRow)
                    tabXPosRelativePage = this.currInterval.end;
                else {
                    this.rowFormatter.rowSizesManager.finishLogicalRow(ind, this.currInterval.end);
                    tabPosition = this.getNextCustomTabPosition(this.currInterval.startOfFreeSpace);
                    tabXPosRelativePage = tabPosition ? tabPosition.position : this.getNextDefaultTabPosition(this.currInterval.startOfFreeSpace);
                }
            }
        }
        box.x = this.currInterval.startOfFreeSpace;
        box.width = !tabPosition || enum_1.EnumUtils.isAnyOf(tabPosition.alignment, paragraph_1.TabAlign.Left, paragraph_1.TabAlign.Numbering) ? tabXPosRelativePage - box.x : 0;
        var tabBox = box.getLayoutTabBox(tabPosition ? tabPosition.leader : layout_tab_space_box_1.TabLeaderType.None);
        if (tabBox.right > list_1.ListUtils.last(this.rowFormatter.rowSizesManager.rowFormattingInfo.intervals).end) {
            if (!this.row.isEmpty())
                return false;
            if (this.rowFormatter.rowSizesManager.rowFormattingInfo.isFloatingIntersectRow) {
                this.rowFormatter.rowSizesManager.rowFormattingInfo.findNextYPos();
                this.rowFormatter.rowSizesManager.restartAllRow(false);
                while (enum_1.EnumUtils.isAnyOf(this.rowFormatter.currBox.getType(), layout_box_1.LayoutBoxType.AnchorPicture, layout_box_1.LayoutBoxType.AnchorTextBox))
                    this.rowFormatter.setBoxInfo(true);
                return this.addTabBox();
            }
        }
        this.rowFormatter.rowSizesManager.addTabBox(tabBox);
        this.lastTabPosition = tabPosition ? tabPosition : new paragraph_style_1.TabInfo(tabXPosRelativePage, paragraph_1.TabAlign.Left, layout_tab_space_box_1.TabLeaderType.None, false, false);
        this.lastTabBoxIndex = this.row.boxes.length - 1;
        return true;
    };
    RowTabInfo.prototype.calculateActualTabWidth = function (prevTabBox) {
        var prevTabBoxXPos = prevTabBox.x;
        switch (this.lastTabPosition.alignment) {
            case paragraph_1.TabAlign.Decimal: {
                var decimalSeparatorChar = string_1.StringUtils.getDecimalSeparator();
                for (var i = this.lastTabBoxIndex + 1, box = void 0; box = this.row.boxes[i]; i++) {
                    var charIndex = box.getCharIndex(decimalSeparatorChar);
                    if (charIndex >= 0) {
                        var charXOffset = box.getCharOffsetXInPixels(this.rowFormatter.manager.measurer, charIndex);
                        return this.getFinalCustomTabWidth(prevTabBoxXPos, box.x + charXOffset - prevTabBoxXPos);
                    }
                }
            }
            case paragraph_1.TabAlign.Right: {
                var lastTextBoxRightBound = this.calcLastVisibleBoxRightBounds(prevTabBoxXPos);
                var tabPosition = Math.min(this.lastTabPosition.position, this.currIntervalOrLastNonEmpty.start + this.currIntervalOrLastNonEmpty.length);
                return Math.max(0, tabPosition - lastTextBoxRightBound);
            }
            case paragraph_1.TabAlign.Center: {
                var lastTextBoxRightBound = this.calcLastVisibleBoxRightBounds(prevTabBoxXPos);
                return this.getFinalCustomTabWidth(prevTabBoxXPos, Math.ceil((lastTextBoxRightBound - prevTabBoxXPos) / 2));
            }
            case paragraph_1.TabAlign.Left:
            case paragraph_1.TabAlign.Numbering:
                return 0;
            default:
                throw new Error(errors_1.Errors.InternalException);
        }
    };
    RowTabInfo.prototype.calcLastVisibleBoxRightBounds = function (prevTabBoxXPos) {
        var startIndex = this.row.boxes.length - 1;
        var endIndex = this.lastTabBoxIndex + 1;
        var lastVisibleBox = this.row.boxes[box_aligner_1.BoxAligner.findLastVisibleBoxIndex(this.row.boxes, startIndex, endIndex)];
        return lastVisibleBox ? lastVisibleBox.right : prevTabBoxXPos;
    };
    RowTabInfo.prototype.getFinalCustomTabWidth = function (prevTabBoxXPos, textLengthBetweenTabBoxAndTabMark) {
        return math_1.MathUtils.restrictValue(this.lastTabPosition.position - prevTabBoxXPos - textLengthBetweenTabBoxAndTabMark, 0, this.currIntervalOrLastNonEmpty.avaliableWidth);
    };
    RowTabInfo.prototype.getNextDefaultTabPosition = function (xOffsetRelativePage) {
        if (!this.defaultTabStop)
            return xOffsetRelativePage;
        if (xOffsetRelativePage >= this.paragraphHorizontalBoundsStart) {
            var tab = this.paragraphHorizontalBoundsStart +
                this.defaultTabStop * (Math.floor((xOffsetRelativePage - this.paragraphHorizontalBoundsStart) / this.defaultTabStop) + 1);
            return tab - xOffsetRelativePage > 1 ? tab : tab + this.defaultTabStop;
        }
        return this.paragraphHorizontalBoundsStart -
            this.defaultTabStop * Math.floor((this.paragraphHorizontalBoundsStart - xOffsetRelativePage) / this.defaultTabStop);
    };
    RowTabInfo.prototype.getNextCustomTabPosition = function (xOffsetRelativePage) {
        return list_1.ListUtils.elementBy(this.tabPositions, function (tabPos) { return xOffsetRelativePage < tabPos.position; });
    };
    return RowTabInfo;
}());
exports.RowTabInfo = RowTabInfo;
