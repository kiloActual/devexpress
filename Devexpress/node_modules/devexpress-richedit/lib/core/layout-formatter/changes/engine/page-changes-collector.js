"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var layout_box_1 = require("../../../layout/main-structures/layout-boxes/layout-box");
var column_change_1 = require("../changes/column-change");
var layout_change_base_1 = require("../changes/layout-change-base");
var page_area_change_1 = require("../changes/page-area-change");
var page_change_1 = require("../changes/page-change");
var paragraph_frame_changes_collector_1 = require("./paragraph-frame-changes-collector");
var table_cells_comparer_1 = require("./table-cells-comparer");
var PageChangesCollector = (function () {
    function PageChangesCollector() {
    }
    PageChangesCollector.collectHeaderFooterChanges = function (pageIndex, oldPageAreas, newPageAreas) {
        return new page_change_1.PageChange(pageIndex, layout_change_base_1.LayoutChangeType.Updated, [], PageChangesCollector.collectMapChanges(oldPageAreas, newPageAreas, page_area_change_1.PageAreaChange, function (_a, _b) { return true; }, PageChangesCollector.collectColumnsChanges));
    };
    PageChangesCollector.collectPageChanges = function (layoutPages, newPage) {
        var oldPage = layoutPages[newPage.index];
        if (oldPage) {
            var change = number_1.NumberMapUtils.anyOf(newPage.anchoredObjectHolder.objects, function (newObj, id) {
                var oldObj = oldPage.anchoredObjectHolder.objects[id];
                return oldObj && newObj.rendererLevel != oldObj.rendererLevel ? new page_change_1.PageChange(newPage.index, layout_change_base_1.LayoutChangeType.Replaced) : null;
            });
            if (change)
                return change;
        }
        return PageChangesCollector.makeChange(oldPage, newPage, newPage.index, page_change_1.PageChange, function (a, b) { return a.equals(b) && a.layoutPageIndex == b.layoutPageIndex; }, function (pChange, oldPage, newPage) {
            pChange.mainPageAreaChanges = PageChangesCollector.collectListChanges(oldPage.mainSubDocumentPageAreas, newPage.mainSubDocumentPageAreas, page_area_change_1.PageAreaChange, function (_a, _b) { return true; }, PageChangesCollector.collectColumnsChanges);
            pChange.anchoredPictureChanges = PageChangesCollector.collectMapChanges(PageChangesCollector.getOnlyPictureObjects(oldPage.anchoredObjectHolder.objects), PageChangesCollector.getOnlyPictureObjects(newPage.anchoredObjectHolder.objects), layout_change_base_1.AnchoredPictureChange, function (a, b) { return a.equals(b); }, function (_change, _a, _b) { });
            pChange.otherPageAreaChanges = PageChangesCollector.collectMapChanges(oldPage.otherPageAreas, newPage.otherPageAreas, page_area_change_1.PageAreaChange, function (a, b) {
                return a.subDocument.isTextBox() ?
                    oldPage.anchoredObjectHolder.getTextBoxByInternalSubDocId(a.subDocument.id)
                        .equals(newPage.anchoredObjectHolder.getTextBoxByInternalSubDocId(b.subDocument.id)) : true;
            }, PageChangesCollector.collectColumnsChanges);
        }).reduceChanges();
    };
    PageChangesCollector.getOnlyPictureObjects = function (objs) {
        return number_1.NumberMapUtils.reducedMap(objs, function (o) { return o.getType() == layout_box_1.LayoutBoxType.AnchorPicture ? o : null; });
    };
    PageChangesCollector.collectColumnsChanges = function (paChange, oldPA, newPA) {
        var tableCellsComparer = new table_cells_comparer_1.TableCellsComparer();
        paChange.columnChanges = PageChangesCollector.collectListChanges(oldPA.columns, newPA.columns, column_change_1.ColumnChange, function (_a, _b) { return true; }, function (colChange, oldCol, newCol) {
            colChange.rowChanges = PageChangesCollector.collectListChanges(oldCol.rows, newCol.rows, layout_change_base_1.RowChange, function (a, b) { return PageChangesCollector.isLayoutRowEquivalent(a, b, tableCellsComparer); }, function (_rowChange, _oldRow, _newRow) { });
            colChange.paragraphFrameChanges = paragraph_frame_changes_collector_1.ParagraphFrameChangesCollector.collect(oldCol.paragraphFrames, newCol.paragraphFrames);
            colChange.tableChanges = PageChangesCollector.collectListChanges(oldCol.tablesInfo, newCol.tablesInfo, layout_change_base_1.TableChange, function (a, b) { return a === b; }, function (_tableChange, _oldTblColInfo, _newTblColInfo) { });
        });
    };
    PageChangesCollector.collectListChanges = function (oldObjects, newObjects, changeConctructor, equals, fillChange) {
        var changes = [];
        for (var ind = 0, newObj = void 0; newObj = newObjects[ind]; ind++)
            changes.push(PageChangesCollector.makeChange(oldObjects[ind], newObj, ind, changeConctructor, function (a, b) { return a.equals(b) && equals(a, b); }, fillChange));
        list_1.ListUtils.reverseForEach(oldObjects, function (_oldObj, ind) { return changes.push(new changeConctructor(ind, layout_change_base_1.LayoutChangeType.Deleted)); }, oldObjects.length - 1, newObjects.length);
        return changes;
    };
    PageChangesCollector.collectMapChanges = function (oldObjects, newObjects, changeConctructor, equals, fillChange) {
        var changes = [];
        var tmpOldObj = number_1.NumberMapUtils.map(oldObjects, function (obj) { return obj; });
        number_1.NumberMapUtils.forEach(newObjects, function (newObj, id) {
            changes.push(PageChangesCollector.makeChange(tmpOldObj[id], newObj, id, changeConctructor, function (a, b) { return a.equals(b) && equals(a, b); }, fillChange));
            delete tmpOldObj[id];
        });
        number_1.NumberMapUtils.forEach(tmpOldObj, function (_oldObj, ind) { return changes.push(new changeConctructor(ind, layout_change_base_1.LayoutChangeType.Deleted)); });
        return changes;
    };
    PageChangesCollector.makeChange = function (oldObj, newObj, index, changeConctructor, equals, fillChange) {
        if (!oldObj) {
            return new changeConctructor(index, layout_change_base_1.LayoutChangeType.Inserted);
        }
        if (equals(oldObj, newObj)) {
            var change = new changeConctructor(index, layout_change_base_1.LayoutChangeType.Updated);
            fillChange(change, oldObj, newObj);
            return change;
        }
        return new changeConctructor(index, layout_change_base_1.LayoutChangeType.Replaced);
    };
    PageChangesCollector.isLayoutRowEquivalent = function (rowA, rowB, tableCellsComparer) {
        if (rowA.x != rowB.x || rowA.y != rowB.y || rowA.width != rowB.width ||
            rowA.height != rowB.height || rowA.baseLine != rowB.baseLine || rowA.boxes.length != rowB.boxes.length ||
            rowA.bookmarkBoxes.length != rowB.bookmarkBoxes.length ||
            (rowA.tableCellInfo ? rowA.indexInColumn != rowB.indexInColumn : false))
            return false;
        return list_1.ListUtils.anyOf2(rowA.boxes, rowB.boxes, function (boxA, boxB) { return !boxA.equals(boxB); }) ||
            list_1.ListUtils.anyOf2(rowA.bookmarkBoxes, rowB.bookmarkBoxes, function (boxA, boxB) { return !boxA.equals(boxB); }) ||
            !(rowA.numberingListBox ? rowA.numberingListBox.equals(rowB.numberingListBox) : !rowB.numberingListBox) ?
            false :
            tableCellsComparer.isEquivalent(rowA, rowB);
    };
    return PageChangesCollector;
}());
exports.PageChangesCollector = PageChangesCollector;
