"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var column_change_1 = require("../changes/column-change");
var layout_change_base_1 = require("../changes/layout-change-base");
var page_area_change_1 = require("../changes/page-area-change");
var page_change_1 = require("../changes/page-change");
var ChangesMerger = (function () {
    function ChangesMerger() {
    }
    ChangesMerger.prototype.merge = function (changes) {
        this.resultChanges = [];
        this.infos = [];
        this.fillTo(0);
        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {
            var change = changes_1[_i];
            switch (change.changeType) {
                case layout_change_base_1.LayoutChangeType.Inserted:
                    this.handleInsertedChange(change);
                    break;
                case layout_change_base_1.LayoutChangeType.Deleted:
                    this.handleDeletedChange(change);
                    break;
                case layout_change_base_1.LayoutChangeType.Replaced:
                    this.handleReplacedChange(change, ChangesMergerInfoType.Replaced);
                    break;
                case layout_change_base_1.LayoutChangeType.Updated:
                    this.handleReplacedChange(change, ChangesMergerInfoType.Updated);
                    break;
            }
        }
        this.collectFinalChanges();
        return this.resultChanges;
    };
    ChangesMerger.prototype.fillTo = function (lastIndex) {
        while (this.infos.length <= lastIndex)
            this.infos.push(new ChangesMergerInfo(ChangesMergerInfoType.None, null, 0));
    };
    ChangesMerger.prototype.handleDeletedChange = function (change) {
        this.fillTo(change.index);
        var delPageInfo = this.infos.splice(change.index + 1, 1)[0];
        this.infos[change.index].numElemsDeletedAfterThis += 1 + (delPageInfo ? delPageInfo.numElemsDeletedAfterThis : 0);
    };
    ChangesMerger.prototype.handleInsertedChange = function (change) {
        this.fillTo(change.index);
        var prevPageInfo = this.infos[change.index];
        this.infos.splice(change.index + 1, 0, prevPageInfo.numElemsDeletedAfterThis ?
            new ChangesMergerInfo(ChangesMergerInfoType.Replaced, this.changeConstructor(change.index, layout_change_base_1.LayoutChangeType.Replaced), prevPageInfo.numElemsDeletedAfterThis - 1) :
            new ChangesMergerInfo(ChangesMergerInfoType.Inserted, change, 0));
        prevPageInfo.numElemsDeletedAfterThis = 0;
    };
    ChangesMerger.prototype.handleReplacedChange = function (change, infoType) {
        this.fillTo(change.index + 1);
        var info = this.infos[change.index + 1];
        switch (info.type) {
            case ChangesMergerInfoType.Inserted:
            case ChangesMergerInfoType.Replaced:
                break;
            case ChangesMergerInfoType.None:
            case ChangesMergerInfoType.Updated:
                if (infoType == ChangesMergerInfoType.Updated && info.type == ChangesMergerInfoType.Updated) {
                    info.change.summarizeChanges(change);
                }
                else {
                    info.type = infoType;
                    info.change = change;
                }
                break;
        }
    };
    ChangesMerger.prototype.collectFinalChanges = function () {
        for (var infoIndex = 0, info = void 0; info = this.infos[infoIndex]; infoIndex++) {
            switch (info.type) {
                case ChangesMergerInfoType.Inserted:
                case ChangesMergerInfoType.Replaced:
                case ChangesMergerInfoType.Updated:
                    info.change.index = infoIndex - 1;
                    this.resultChanges.push(info.change);
                    break;
                case ChangesMergerInfoType.None:
                    break;
            }
            for (; info.numElemsDeletedAfterThis; info.numElemsDeletedAfterThis--)
                this.resultChanges.push(this.changeConstructor(infoIndex, layout_change_base_1.LayoutChangeType.Deleted));
        }
    };
    return ChangesMerger;
}());
exports.ChangesMerger = ChangesMerger;
var LayoutPageChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutPageChangesMerger, _super);
    function LayoutPageChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutPageChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new page_change_1.PageChange(index, changeType, [], []);
    };
    return LayoutPageChangesMerger;
}(ChangesMerger));
exports.LayoutPageChangesMerger = LayoutPageChangesMerger;
var LayoutPageAreaChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutPageAreaChangesMerger, _super);
    function LayoutPageAreaChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutPageAreaChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new page_area_change_1.PageAreaChange(index, changeType, []);
    };
    return LayoutPageAreaChangesMerger;
}(ChangesMerger));
exports.LayoutPageAreaChangesMerger = LayoutPageAreaChangesMerger;
var LayoutColumnChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutColumnChangesMerger, _super);
    function LayoutColumnChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutColumnChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new column_change_1.ColumnChange(index, changeType, [], [], []);
    };
    return LayoutColumnChangesMerger;
}(ChangesMerger));
exports.LayoutColumnChangesMerger = LayoutColumnChangesMerger;
var LayoutRowChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutRowChangesMerger, _super);
    function LayoutRowChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutRowChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new layout_change_base_1.RowChange(index, changeType);
    };
    return LayoutRowChangesMerger;
}(ChangesMerger));
exports.LayoutRowChangesMerger = LayoutRowChangesMerger;
var LayoutTableChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutTableChangesMerger, _super);
    function LayoutTableChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutTableChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new layout_change_base_1.TableChange(index, changeType);
    };
    return LayoutTableChangesMerger;
}(ChangesMerger));
exports.LayoutTableChangesMerger = LayoutTableChangesMerger;
var LayoutParagraphFrameChangesMerger = (function (_super) {
    tslib_1.__extends(LayoutParagraphFrameChangesMerger, _super);
    function LayoutParagraphFrameChangesMerger() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LayoutParagraphFrameChangesMerger.prototype.changeConstructor = function (index, changeType) {
        return new layout_change_base_1.ParagraphFrameChange(index, changeType);
    };
    return LayoutParagraphFrameChangesMerger;
}(ChangesMerger));
exports.LayoutParagraphFrameChangesMerger = LayoutParagraphFrameChangesMerger;
var ChangesMergerInfo = (function () {
    function ChangesMergerInfo(type, change, numElemsDeletedAfterThis) {
        this.type = type;
        this.change = change;
        this.numElemsDeletedAfterThis = numElemsDeletedAfterThis;
    }
    return ChangesMergerInfo;
}());
var ChangesMergerInfoType;
(function (ChangesMergerInfoType) {
    ChangesMergerInfoType[ChangesMergerInfoType["Replaced"] = 0] = "Replaced";
    ChangesMergerInfoType[ChangesMergerInfoType["Inserted"] = 1] = "Inserted";
    ChangesMergerInfoType[ChangesMergerInfoType["Updated"] = 2] = "Updated";
    ChangesMergerInfoType[ChangesMergerInfoType["None"] = 3] = "None";
})(ChangesMergerInfoType || (ChangesMergerInfoType = {}));
