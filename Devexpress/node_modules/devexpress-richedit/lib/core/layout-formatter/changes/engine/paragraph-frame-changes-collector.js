"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var layout_column_1 = require("../../../layout/main-structures/layout-column");
var layout_row_1 = require("../../../layout/main-structures/layout-row");
var color_1 = require("../../../model/color/color");
var paragraph_properties_1 = require("../../../model/paragraph/paragraph-properties");
var layout_change_base_1 = require("../changes/layout-change-base");
var ParagraphFrameCollector = (function () {
    function ParagraphFrameCollector() {
    }
    ParagraphFrameCollector.collect = function (colorProvider, newColumn, pageAreaOffset, paragraphs) {
        return ParagraphFrameCollector.collectNewParFrames(colorProvider, paragraphs, newColumn.rows, pageAreaOffset + newColumn.pageAreaOffset);
    };
    ParagraphFrameCollector.collectNewParFrames = function (colorProvider, paragraphs, rows, columnPos) {
        var parFrames = [];
        var firstRowStartPos = columnPos + rows[0].columnOffset;
        var parIndex = search_1.SearchUtils.normedInterpolationIndexOf(paragraphs, function (p) { return p.startLogPosition.value; }, firstRowStartPos);
        var paragraph = paragraphs[parIndex];
        var parInterval = paragraph.interval;
        var prevParIndex = parIndex - 1;
        var parProps = paragraphs[parIndex].getParagraphMergedProperties();
        var parFrame;
        var prevParColor;
        for (var rowIndex = 0, prevRow = void 0, row = void 0; row = rows[rowIndex]; rowIndex++) {
            var rowPos = columnPos + row.columnOffset;
            while (true) {
                if (parInterval.contains(rowPos)) {
                    if (parIndex != prevParIndex || parProps.firstLineIndentType != paragraph_properties_1.ParagraphFirstLineIndent.None) {
                        parFrame = new layout_column_1.ParagraphFrame();
                        parFrames.push(parFrame);
                        parFrame.paragraphColor = parProps.shadingInfo.getActualColor(colorProvider);
                        parFrame.x = row.x;
                        parFrame.width = row.right - unit_converter_1.UnitConverter.twipsToPixelsF(parProps.rightIndent) - parFrame.x;
                        parFrame.y = row.y;
                        parFrame.height = row.height;
                        if (rowIndex == 0 ||
                            prevRow && prevRow.tableCellInfo && !row.tableCellInfo ||
                            row.tableCellInfo && row.tableCellInfo.layoutRows[0] == row ||
                            (prevParColor == color_1.ColorHelper.NO_COLOR || prevParColor == color_1.ColorHelper.AUTOMATIC_COLOR)) {
                            parFrame.y += row.getSpacingBefore();
                            parFrame.height -= row.getSpacingBefore();
                        }
                        if (ParagraphFrameCollector.isRemoveSpacingAfter(colorProvider, row, rows[rowIndex + 1], paragraphs, parIndex))
                            parFrame.height -= row.getSpacingAfter();
                        prevParColor = parFrame.paragraphColor;
                    }
                    else {
                        parFrame.height = row.bottom - parFrame.y;
                        if (ParagraphFrameCollector.isRemoveSpacingAfter(colorProvider, row, rows[rowIndex + 1], paragraphs, parIndex))
                            parFrame.height -= row.getSpacingAfter();
                    }
                    prevParIndex = parIndex;
                    break;
                }
                else {
                    parIndex++;
                    paragraph = paragraphs[parIndex];
                    parInterval = paragraph.interval;
                    parProps = paragraph.getParagraphMergedProperties();
                }
            }
            prevRow = row;
        }
        return ParagraphFrameCollector.mergeParagraphFrames(parFrames);
    };
    ParagraphFrameCollector.isRemoveSpacingAfter = function (colorProvider, row, nextRow, paragraphs, parIndex) {
        var nextParColor;
        return (!nextRow ||
            row.flags.get(layout_row_1.LayoutRowStateFlags.ParagraphEnd) && (!row.tableCellInfo && nextRow.tableCellInfo ||
                row.tableCellInfo && list_1.ListUtils.last(row.tableCellInfo.layoutRows) == row ||
                ((nextParColor = paragraphs[parIndex + 1].getParagraphMergedProperties().shadingInfo.getActualColor(colorProvider)) == color_1.ColorHelper.NO_COLOR ||
                    nextParColor == color_1.ColorHelper.AUTOMATIC_COLOR)));
    };
    ParagraphFrameCollector.mergeParagraphFrames = function (paragraphFrames) {
        var mergedParFrames = [];
        var currParFrame;
        for (var parFrameIndex = 0, paragraphFrame = void 0; paragraphFrame = paragraphFrames[parFrameIndex]; parFrameIndex++) {
            if (paragraphFrame.paragraphColor == color_1.ColorHelper.NO_COLOR || paragraphFrame.paragraphColor == color_1.ColorHelper.AUTOMATIC_COLOR) {
                currParFrame = null;
                continue;
            }
            if (currParFrame &&
                paragraphFrame.paragraphColor == currParFrame.paragraphColor &&
                paragraphFrame.x == currParFrame.x &&
                paragraphFrame.width == currParFrame.width &&
                Math.abs(paragraphFrame.y - currParFrame.bottom) < 2) {
                currParFrame.height = paragraphFrame.bottom - currParFrame.y;
            }
            else {
                currParFrame = paragraphFrame;
                mergedParFrames.push(currParFrame);
            }
        }
        return mergedParFrames;
    };
    return ParagraphFrameCollector;
}());
exports.ParagraphFrameCollector = ParagraphFrameCollector;
var ParagraphFrameChangesCollector = (function () {
    function ParagraphFrameChangesCollector() {
    }
    ParagraphFrameChangesCollector.collect = function (oldParFrames, newParFrames) {
        var changes = [];
        for (var frameIndex = 0; frameIndex < newParFrames.length; frameIndex++) {
            var newParFrame = newParFrames[frameIndex];
            var oldParFrame = oldParFrames[frameIndex];
            if (!oldParFrame)
                changes.push(new layout_change_base_1.ParagraphFrameChange(frameIndex, layout_change_base_1.LayoutChangeType.Inserted));
            else {
                if (!newParFrame.equals(oldParFrame))
                    changes.push(new layout_change_base_1.ParagraphFrameChange(frameIndex, layout_change_base_1.LayoutChangeType.Replaced));
            }
        }
        for (var frameIndex = newParFrames.length; frameIndex < oldParFrames.length; frameIndex++)
            changes.push(new layout_change_base_1.ParagraphFrameChange(newParFrames.length, layout_change_base_1.LayoutChangeType.Deleted));
        return changes;
    };
    return ParagraphFrameChangesCollector;
}());
exports.ParagraphFrameChangesCollector = ParagraphFrameChangesCollector;
