"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var min_max_1 = require("../../../base-utils/min-max");
var flag_1 = require("@devexpress/utils/lib/class/flag");
var min_max_2 = require("@devexpress/utils/lib/class/min-max");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var layout_box_1 = require("../../layout/main-structures/layout-boxes/layout-box");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var log_source_1 = require("../../rich-utils/debug/logger/base-logger/log-source");
var box_infos_generator_1 = require("./generator/box-infos-generator");
var IteratorFlags;
(function (IteratorFlags) {
    IteratorFlags[IteratorFlags["None"] = 0] = "None";
    IteratorFlags[IteratorFlags["DocumentEnd"] = 1] = "DocumentEnd";
})(IteratorFlags = exports.IteratorFlags || (exports.IteratorFlags = {}));
var BoxWrapsHolder = (function () {
    function BoxWrapsHolder(manager, subDocumentId) {
        this.manager = manager;
        this.subDocument = manager.model.subDocuments[subDocumentId];
        this.boxGenerator = new box_infos_generator_1.BoxGenerator(manager, this);
    }
    BoxWrapsHolder.prototype.reset = function (pos) {
        var _this = this;
        this.wrappers = [];
        this.wrapIndex = 0;
        this.flags = new flag_1.Flag(IteratorFlags.None);
        this.boxGenerator.positionFromStartGenerate = pos;
        this.boxGenerator.waitForMoreChunks = false;
        this.boxGenerator.generate();
        this.getWrap();
        log_1.Log.print(log_source_1.LogSource.BoxWrapHolder, "reset", function () { return "wrappers.length:" + _this.wrappers.length + ", subDocId: " + _this.subDocument.id; });
    };
    BoxWrapsHolder.prototype.getWrap = function () {
        var _this = this;
        var wrap = this.wrappers[this.wrapIndex];
        if (wrap) {
            this.currPos = wrap.box.rowOffset;
            log_1.Log.print(log_source_1.LogSource.BoxWrapHolder, "getWrap", function () { return "currPos: " + _this.currPos + ", wrapInd: " + _this.wrapIndex + ", subDocId: " + _this.subDocument.id; });
            return wrap;
        }
        if (this.boxGenerator.generate()) {
            var newWrap = this.wrappers[this.wrapIndex];
            this.currPos = newWrap.box.rowOffset;
            log_1.Log.print(log_source_1.LogSource.BoxWrapHolder, "getWrap", function () { return "currPos: " + _this.currPos + ", wrapInd: " + _this.wrapIndex + ", subDocId: " + _this.subDocument.id; });
            return newWrap;
        }
        var lastWrap = list_1.ListUtils.last(this.wrappers);
        this.currPos = lastWrap ? lastWrap.box.getEndPosition() : this.subDocument.getDocumentEndPosition();
        log_1.Log.print(log_source_1.LogSource.BoxWrapHolder, "getWrap", function () { return "currPos: " + _this.currPos + ", wrapInd: " + _this.wrapIndex + ", subDocId: " + _this.subDocument.id; });
        return null;
    };
    Object.defineProperty(BoxWrapsHolder.prototype, "position", {
        get: function () {
            return this.currPos;
        },
        enumerable: true,
        configurable: true
    });
    BoxWrapsHolder.prototype.setPosition = function (pos, forceResetBoxInfos) {
        if (!forceResetBoxInfos && this.trySetPosition(pos))
            return;
        this.reset(pos);
    };
    BoxWrapsHolder.prototype.toNextWrap = function () {
        this.wrapIndex++;
        this.getWrap();
    };
    BoxWrapsHolder.prototype.setParagraphsWidthInfo = function (wrappers) {
        this.paragraphBoundsInfo = {};
        var parIndex = -1;
        var parWidthBounds = null;
        var wordWidth;
        var lineWidth;
        for (var _i = 0, wrappers_1 = wrappers; _i < wrappers_1.length; _i++) {
            var wrap = wrappers_1[_i];
            var tblPoss = wrap.info.tablePosition;
            if (tblPoss) {
                if (wrap.info.paragraphIndex != parIndex) {
                    parIndex = wrap.info.paragraphIndex;
                    parWidthBounds = new min_max_2.MinMaxNumber(0, 0);
                    this.paragraphBoundsInfo[parIndex] = parWidthBounds;
                    wordWidth = 0;
                    lineWidth = 0;
                }
                if (wrap.box.getType() == layout_box_1.LayoutBoxType.AnchorTextBox) {
                    this.manager.anchoredObjectsManager.textBoxContextSizeCalculators[wrap.box.objectId].paragraphMinMax = parWidthBounds;
                    continue;
                }
                if (wrap.box.isLineBreak())
                    lineWidth = 0;
                else {
                    if (wrap.box.getType() == layout_box_1.LayoutBoxType.AnchorPicture)
                        min_max_1.updateMinMaxBounds(parWidthBounds, new min_max_2.MinMaxNumber(wrap.box.width, wrap.box.width));
                    lineWidth += wrap.box.width;
                    parWidthBounds.maxElement = Math.max(parWidthBounds.maxElement, lineWidth);
                }
                if (wrap.box.isLineBreak() || wrap.box.isWhitespace() || wrap.box.isDashBox) {
                    wordWidth = 0;
                }
                else {
                    wordWidth += wrap.box.width;
                    parWidthBounds.minElement = Math.max(parWidthBounds.minElement, wordWidth);
                }
            }
        }
    };
    BoxWrapsHolder.prototype.setNewWrappers = function (newLayoutBoxes, generateFrom) {
        var _this = this;
        if (!newLayoutBoxes.length)
            return;
        list_1.ListUtils.addListOnTail(this.wrappers, newLayoutBoxes);
        var excessLen = this.wrappers.length - BoxWrapsHolder.MAX_BOXES_IN_LIST;
        if (excessLen > 0) {
            var prevWrap = this.wrappers[excessLen - 1];
            var nextWrap = this.wrappers[excessLen];
            if (prevWrap.box.getEndPosition() <= generateFrom && !(nextWrap && nextWrap.info.tablePosition)) {
                this.wrappers.splice(0, excessLen);
                this.wrapIndex = Math.max(0, this.wrapIndex - excessLen);
            }
        }
        log_1.Log.print(log_source_1.LogSource.BoxWrapHolder, "setNewWrappers", function () { return "wrappers.length:" + _this.wrappers.length + ", subDocId: " + _this.subDocument.id; });
        this.setParagraphsWidthInfo(this.wrappers);
    };
    BoxWrapsHolder.prototype.setNextValidWrapPosition = function (pos, nestedLevel) {
        if (this.interval.contains(pos)) {
            this.wrapIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.wrappers, function (w) { return w.box.rowOffset; }, pos);
            var currentWrap = this.wrappers[this.wrapIndex];
            var length_1 = this.wrappers.length;
            while (currentWrap.info.tablePosition.length >= nestedLevel && this.wrapIndex < length_1)
                currentWrap = this.wrappers[++this.wrapIndex];
            this.currPos = currentWrap.box.getEndPosition();
        }
        else
            this.reset(pos);
    };
    BoxWrapsHolder.prototype.trySetPosition = function (pos) {
        if (!this.interval.contains(pos))
            return false;
        this.wrapIndex = search_1.SearchUtils.normedInterpolationIndexOf(this.wrappers, function (w) { return w.box.rowOffset; }, pos);
        var wrap = this.wrappers[this.wrapIndex];
        if (pos >= wrap.box.getEndPosition()) {
            this.currPos = this.wrappers[++this.wrapIndex].box.rowOffset;
            return true;
        }
        var offsetFromStartBox = pos - wrap.box.rowOffset;
        if (offsetFromStartBox > 0)
            this.splitBoxByPosition(wrap, offsetFromStartBox);
        this.currPos = this.wrappers[this.wrapIndex].box.rowOffset;
        return true;
    };
    BoxWrapsHolder.prototype.splitBoxByPosition = function (wrap, offsetFromStartBox) {
        var next = wrap.splitByPosition(this.manager.measurer, offsetFromStartBox);
        if (!next)
            return;
        this.wrapIndex++;
        this.wrappers.splice(this.wrapIndex, 0, next);
    };
    Object.defineProperty(BoxWrapsHolder.prototype, "interval", {
        get: function () {
            if (!this.wrappers.length)
                return new fixed_1.FixedInterval(0, 0);
            return fixed_1.FixedInterval.fromPositions(this.wrappers[0].box.rowOffset, list_1.ListUtils.last(this.wrappers).box.getEndPosition());
        },
        enumerable: true,
        configurable: true
    });
    BoxWrapsHolder.AVERAGE_BOXES_ON_PAGE = 2000;
    BoxWrapsHolder.MAX_BOXES_IN_LIST_MULTIPLIER = 3;
    BoxWrapsHolder.MAX_BOXES_IN_LIST = BoxWrapsHolder.AVERAGE_BOXES_ON_PAGE * BoxWrapsHolder.MAX_BOXES_IN_LIST_MULTIPLIER;
    return BoxWrapsHolder;
}());
exports.BoxWrapsHolder = BoxWrapsHolder;
