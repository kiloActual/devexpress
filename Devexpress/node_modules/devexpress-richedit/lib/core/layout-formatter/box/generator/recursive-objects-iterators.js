"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var list_1 = require("@devexpress/utils/lib/utils/list");
var search_1 = require("@devexpress/utils/lib/utils/search");
var table_1 = require("../../../model/tables/main-structures/table");
var box_wrap_1 = require("../box-wrap");
var RecursiveObjectsIterator = (function () {
    function RecursiveObjectsIterator(objects) {
        this.objects = objects;
    }
    RecursiveObjectsIterator.prototype.getNextObjectPosition = function () {
        return this.nextObjPosition;
    };
    RecursiveObjectsIterator.prototype.init = function (pos) {
        var _this = this;
        this.indexes = [];
        var index = search_1.SearchUtils.normedInterpolationIndexOf(this.objects, function (o) { return _this.getStartPosition(o); }, pos);
        if (index < 0) {
            this.setNextInfos(0, pos);
            return;
        }
        var obj = this.objects[index];
        while (pos >= this.getEndPosition(obj)) {
            var parent_1 = this.getParent(obj);
            if (!parent_1) {
                this.setNextInfos(index + 1, pos);
                return;
            }
            obj = parent_1;
        }
        this.collectIndexes(this.getIndex(obj), pos);
    };
    RecursiveObjectsIterator.prototype.collectIndexes = function (index, pos) {
        var insertPos = this.indexes.length;
        var ind = this.correctBounds(index, pos);
        var obj = this.objects[ind];
        var leftBoundIndex = this.indexes.length ? list_1.ListUtils.last(this.indexes) : -1;
        while (true) {
            this.indexes.splice(insertPos, 0, ind);
            var parent_2 = this.getParent(obj);
            if (!parent_2 || this.getIndex(parent_2) == leftBoundIndex)
                break;
            ind = this.getIndex(parent_2);
            obj = parent_2;
        }
        this.setNextInfos(list_1.ListUtils.last(this.indexes) + 1, pos);
    };
    RecursiveObjectsIterator.prototype.update = function (newPosition) {
        if (!this.objects.length)
            return false;
        var indexesDeleted = this.popLastIndexes(newPosition);
        if (newPosition >= this.nextObjPosition) {
            this.nextObjIndex = this.correctBounds(this.nextObjIndex, newPosition);
            this.collectIndexes(this.nextObjIndex, newPosition);
            return true;
        }
        return indexesDeleted;
    };
    RecursiveObjectsIterator.prototype.setNextInfos = function (ind, pos) {
        this.nextObjIndex = ind;
        var obj = this.objects[ind];
        if (!obj || this.getStartPosition(obj) >= pos)
            this.nextObjPosition = obj ? this.getStartPosition(obj) : Number.MAX_VALUE;
        else
            this.setNextInfos(ind + 1, pos);
    };
    RecursiveObjectsIterator.prototype.popLastIndexes = function (newPosition) {
        if (!this.indexes.length || newPosition < this.getEndPosition(this.objects[list_1.ListUtils.last(this.indexes)]))
            return false;
        this.indexes.pop();
        this.popLastIndexes(newPosition);
        return true;
    };
    return RecursiveObjectsIterator;
}());
exports.RecursiveObjectsIterator = RecursiveObjectsIterator;
var TableIterator = (function (_super) {
    tslib_1.__extends(TableIterator, _super);
    function TableIterator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TableIterator.prototype.getStartPosition = function (o) {
        return o.getStartPosition();
    };
    TableIterator.prototype.getEndPosition = function (o) {
        return o.getEndPosition();
    };
    TableIterator.prototype.getParent = function (obj) {
        return obj.getParentTable();
    };
    TableIterator.prototype.getIndex = function (obj) {
        return obj.index;
    };
    TableIterator.prototype.correctBounds = function (objIndex, pos) {
        return table_1.Table.correctBoundTable(this.objects, objIndex, pos, function (i) { return ++i; }).index;
    };
    TableIterator.prototype.generateInfo = function (pos) {
        var _this = this;
        if (!this.indexes.length)
            return null;
        return list_1.ListUtils.map(this.indexes, function (ind) {
            var table = _this.objects[ind];
            var rowIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows, function (r) { return r.getStartPosition(); }, pos);
            var cellIndex = search_1.SearchUtils.normedInterpolationIndexOf(table.rows[rowIndex].cells, function (c) { return c.startParagraphPosition.value; }, pos);
            return new table_1.TablePosition(table, rowIndex, cellIndex).init();
        });
    };
    return TableIterator;
}(RecursiveObjectsIterator));
exports.TableIterator = TableIterator;
var FieldIterator = (function (_super) {
    tslib_1.__extends(FieldIterator, _super);
    function FieldIterator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldIterator.prototype.getStartPosition = function (o) {
        return o.getFieldStartPosition();
    };
    FieldIterator.prototype.getEndPosition = function (o) {
        return o.getFieldEndPosition();
    };
    FieldIterator.prototype.getParent = function (obj) {
        return obj.parent;
    };
    FieldIterator.prototype.getIndex = function (obj) {
        return obj.index;
    };
    FieldIterator.prototype.correctBounds = function (objIndex, _pos) {
        return objIndex;
    };
    FieldIterator.prototype.generateInfo = function (pos) {
        var _this = this;
        if (!this.indexes.length)
            return null;
        return list_1.ListUtils.map(this.indexes, function (ind) { return box_wrap_1.BoxWrapFieldInfo.make(_this.objects[ind], pos); });
    };
    return FieldIterator;
}(RecursiveObjectsIterator));
exports.FieldIterator = FieldIterator;
