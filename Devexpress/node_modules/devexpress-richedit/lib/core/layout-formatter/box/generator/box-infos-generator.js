"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var flag_1 = require("@devexpress/utils/lib/class/flag");
var unit_converter_1 = require("@devexpress/utils/lib/class/unit-converter");
var errors_1 = require("@devexpress/utils/lib/errors");
var point_1 = require("@devexpress/utils/lib/geometry/point");
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var list_1 = require("@devexpress/utils/lib/utils/list");
var string_1 = require("@devexpress/utils/lib/utils/string");
var layout_anchored_picture_box_1 = require("../../../layout/main-structures/layout-boxes/layout-anchored-picture-box");
var layout_anchored_text_box_1 = require("../../../layout/main-structures/layout-boxes/layout-anchored-text-box");
var layout_box_1 = require("../../../layout/main-structures/layout-boxes/layout-box");
var layout_column_break_box_1 = require("../../../layout/main-structures/layout-boxes/layout-column-break-box");
var layout_dash_box_1 = require("../../../layout/main-structures/layout-boxes/layout-dash-box");
var layout_dependent_text_box_1 = require("../../../layout/main-structures/layout-boxes/layout-dependent-text-box");
var layout_field_code_end_box_1 = require("../../../layout/main-structures/layout-boxes/layout-field-code-end-box");
var layout_field_code_start_box_1 = require("../../../layout/main-structures/layout-boxes/layout-field-code-start-box");
var layout_field_result_end_box_1 = require("../../../layout/main-structures/layout-boxes/layout-field-result-end-box");
var layout_line_break_box_1 = require("../../../layout/main-structures/layout-boxes/layout-line-break-box");
var layout_non_breaking_space_box_1 = require("../../../layout/main-structures/layout-boxes/layout-non-breaking-space-box");
var layout_page_break_box_1 = require("../../../layout/main-structures/layout-boxes/layout-page-break-box");
var layout_paragraph_mark_box_1 = require("../../../layout/main-structures/layout-boxes/layout-paragraph-mark-box");
var layout_picture_box_1 = require("../../../layout/main-structures/layout-boxes/layout-picture-box");
var layout_section_mark_box_1 = require("../../../layout/main-structures/layout-boxes/layout-section-mark-box");
var layout_space_box_1 = require("../../../layout/main-structures/layout-boxes/layout-space-box");
var layout_tab_space_box_1 = require("../../../layout/main-structures/layout-boxes/layout-tab-space-box");
var layout_text_box_1 = require("../../../layout/main-structures/layout-boxes/layout-text-box");
var model_iterator_1 = require("../../../model/model-iterator");
var bookmarks_1 = require("../../../model/options/bookmarks");
var rich_utils_1 = require("../../../model/rich-utils");
var run_type_1 = require("../../../model/runs/run-type");
var table_base_structures_1 = require("../../../model/tables/secondary-structures/table-base-structures");
var anchored_objects_manager_1 = require("../../floating/anchored-objects-manager");
var result_1 = require("../../row/result");
var box_iterator_1 = require("../box-iterator");
var box_wrap_1 = require("../box-wrap");
var box_wraps_holder_1 = require("../box-wraps-holder");
var one_dimension_itertors_1 = require("./one-dimension-itertors");
var recursive_objects_iterators_1 = require("./recursive-objects-iterators");
var BoxGenerator = (function () {
    function BoxGenerator(manager, boxesHolder) {
        var _a;
        this.positionFromStartGenerate = -1;
        this.waitForMoreChunks = false;
        if (!BoxGenerator.modelCharToLayoutBoxConverter) {
            BoxGenerator.modelCharToLayoutBoxConverter = (_a = {},
                _a[rich_utils_1.RichUtils.specialCharacters.LineBreak] = function (charProp, colorProvider) { return new layout_line_break_box_1.LayoutLineBreakBox(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a[rich_utils_1.RichUtils.specialCharacters.Space] = function (charProp, colorProvider) { return new layout_space_box_1.LayoutSpaceBox(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a[rich_utils_1.RichUtils.specialCharacters.TabMark] = function (charProp, colorProvider) { return new layout_tab_space_box_1.LayoutTabSpaceBoxJustForBoxIterator(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a[rich_utils_1.RichUtils.specialCharacters.PageBreak] = function (charProp, colorProvider) { return new layout_page_break_box_1.LayoutPageBreakBox(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a[rich_utils_1.RichUtils.specialCharacters.ColumnBreak] = function (charProp, colorProvider) { return new layout_column_break_box_1.LayoutColumnBreakBox(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a[rich_utils_1.RichUtils.specialCharacters.NonBreakingSpace] = function (charProp, colorProvider) { return new layout_non_breaking_space_box_1.LayoutNonBreakingSpaceBox(charProp, charProp.getLayoutColorInfo(colorProvider)); },
                _a);
            BoxGenerator.MapFieldCodeToLayoutDependentBoxType = {
                "PAGE": layout_dependent_text_box_1.LayoutDependentBoxType.Page,
                "NUMPAGES": layout_dependent_text_box_1.LayoutDependentBoxType.Numpages,
            };
        }
        this.manager = manager;
        this.boxWrapsHolder = boxesHolder;
    }
    Object.defineProperty(BoxGenerator, "MAX_NUM_NEW_BOXES", {
        get: function () { return box_wraps_holder_1.BoxWrapsHolder.AVERAGE_BOXES_ON_PAGE; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(BoxGenerator.prototype, "colorProvider", {
        get: function () { return this.manager.model.colorProvider; },
        enumerable: true,
        configurable: true
    });
    BoxGenerator.prototype.isNotEmptyParagraphOrSectionRunBeforeTable = function (box) {
        var hasNewWrappers = this.newWrappers && this.newWrappers.length;
        var lastWrapperNotInsideTable = hasNewWrappers && !list_1.ListUtils.last(this.newWrappers).info.tablePosition;
        return hasNewWrappers && lastWrapperNotInsideTable && (box.getType() == layout_box_1.LayoutBoxType.ParagraphMark || box.getType() != layout_box_1.LayoutBoxType.SectionMark) &&
            this.modelIterator.getAbsolutePosition() == this.tableIterator.getNextObjectPosition();
    };
    BoxGenerator.prototype.addNewBoxInfo = function (box, offsetCharAtStartRun) {
        if (offsetCharAtStartRun === void 0) { offsetCharAtStartRun = this.modelIterator.charOffset; }
        box.rowOffset = this.getAbsolutePosition(offsetCharAtStartRun) - box.getLength();
        var boxMustBeHidden = box.characterProperties.hidden && !this.manager.innerClientProperties.showHiddenSymbols &&
            this.isLastParagraphBoxInSubDocumentVisible(box) && this.isTableCellConsiderAtLeastOneBox(this.currWrapInfo, box) &&
            !this.isNotEmptyParagraphOrSectionRunBeforeTable(box);
        if (boxMustBeHidden ||
            BoxGenerator.isFieldHideElement(this.currWrapInfo, box) ||
            this.currWrapInfo.tablePosition && (list_1.ListUtils.unsafeAnyOf(this.currWrapInfo.tablePosition, function (tblPos) { return tblPos.cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue; }) ||
                enum_1.EnumUtils.isAnyOf(box.getType(), layout_box_1.LayoutBoxType.SectionMark, layout_box_1.LayoutBoxType.PageBreak, layout_box_1.LayoutBoxType.ColumnBreak))) {
            return null;
        }
        var newWrap = new box_wrap_1.BoxWrap(box, this.currWrapInfo);
        this.addToBoxFieldInfo(newWrap);
        this.newWrappers.push(newWrap);
        return newWrap;
    };
    BoxGenerator.prototype.generate = function () {
        if (!this.init())
            return false;
        var generateFrom = this.modelIterator.getAbsolutePosition();
        this.updateBracketsInfo();
        if (this.waitForMoreChunks) {
            if (list_1.ListUtils.last(this.chunks).getEndPosition() > generateFrom)
                this.updatePosSecondaryIterators(generateFrom);
        }
        else
            this.newWrappers = [];
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
        this.currBoxInfoType = layout_box_1.LayoutBoxType.Text;
        this.waitForMoreChunks = false;
        this.createNewBoxes();
        if (this.waitForMoreChunks)
            return false;
        layout_box_1.LayoutBox.initializeWithMeasurer(this.newWrappers, this.manager.measurer, this.manager.innerClientProperties.showHiddenSymbols);
        this.boxWrapsHolder.setNewWrappers(this.newWrappers, generateFrom);
        return this.newWrappers.length > 0;
    };
    BoxGenerator.prototype.updateBracketsInfo = function () {
        this.boxWrapsHolder.bracketsInfo = [];
        var bkmSettings = this.boxWrapsHolder.manager.bookmarksSettings;
        var docProtSettings = this.boxWrapsHolder.manager.documentProtectionSettings;
        if (bkmSettings.visibility == bookmarks_1.BookmarksVisibility.Visible)
            this.collectObjectBrackets(this.subDocument.bookmarks, bkmSettings.color, function (bookmark) { return !bookmark.isHidden(); });
        if (this.boxWrapsHolder.manager.documentProtectionSettings.showBrackets)
            this.collectObjectBrackets(this.subDocument.availableRangePermissions, docProtSettings.rangeHighlightBracketsColor, function () { return true; });
        var cmp = function (a, b) {
            var diff = a.absPos - b.absPos;
            return diff ? diff : (a.color == b.color ? 0 : -1);
        };
        this.boxWrapsHolder.bracketsInfo = list_1.ListUtils.merge(this.boxWrapsHolder.bracketsInfo, cmp, function (a, b) { return cmp(a, b) == 0; }, function (to, from) { return to.flags.set(from.flags.getValue(), true); });
    };
    BoxGenerator.prototype.collectObjectBrackets = function (objects, color, shouldDrawn) {
        var brInfo = this.boxWrapsHolder.bracketsInfo;
        list_1.ListUtils.forEach(objects, function (obj) {
            if (shouldDrawn(obj)) {
                brInfo.push(new box_iterator_1.BracketInfo(obj.start, new flag_1.Flag(result_1.BoxBracketsType.Open), color, obj.interval.length));
                brInfo.push(new box_iterator_1.BracketInfo(obj.end, new flag_1.Flag(result_1.BoxBracketsType.Close), color, obj.interval.length));
            }
        });
    };
    Object.defineProperty(BoxGenerator.prototype, "subDocument", {
        get: function () {
            return this.boxWrapsHolder.subDocument;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoxGenerator.prototype, "chunks", {
        get: function () {
            return this.subDocument.chunks;
        },
        enumerable: true,
        configurable: true
    });
    BoxGenerator.prototype.updatePosSecondaryIterators = function (pos) {
        this.paragraphIterator.init(pos);
        this.sectionIterator.init(pos);
        this.tableIterator.init(pos);
        this.fieldIterator.init(pos);
    };
    BoxGenerator.prototype.init = function () {
        var pos = this.positionFromStartGenerate;
        if (this.subDocument.isMain() && list_1.ListUtils.last(this.chunks).getEndPosition() == pos)
            return false;
        if (pos == -1)
            return true;
        this.modelIterator = new model_iterator_1.ModelIterator(this.subDocument, false);
        this.modelIterator.setPosition(pos);
        if (pos >= this.modelIterator.chunk.getEndPosition())
            return false;
        this.paragraphIterator = new one_dimension_itertors_1.ParagraphIterator(this.subDocument.paragraphs);
        this.sectionIterator = new one_dimension_itertors_1.SectionIterator(this.manager.model.sections);
        this.tableIterator = new recursive_objects_iterators_1.TableIterator(this.subDocument.tables);
        this.fieldIterator = new recursive_objects_iterators_1.FieldIterator(this.subDocument.fields);
        this.updatePosSecondaryIterators(pos);
        this.currWrapInfo = new box_wrap_1.BoxWrapInfo(this.paragraphIterator.index, this.sectionIterator.index, this.tableIterator.generateInfo(pos), this.fieldIterator.generateInfo(pos));
        this.positionFromStartGenerate = -1;
        var lastChunk = list_1.ListUtils.last(this.chunks);
        this.lastModelPosition = list_1.ListUtils.last(this.chunks).isLast || !this.subDocument.isMain() ?
            lastChunk.getEndPosition() - 1 : Number.MAX_VALUE;
        return true;
    };
    BoxGenerator.prototype.isLastParagraphBoxInSubDocumentVisible = function (box) {
        if (box.rowOffset != this.lastModelPosition)
            return true;
        var lastWrap = list_1.ListUtils.last(this.newWrappers);
        return lastWrap && lastWrap.box.getType() == layout_box_1.LayoutBoxType.ParagraphMark;
    };
    BoxGenerator.prototype.isTableCellConsiderAtLeastOneBox = function (info, box) {
        if (!info.tablePosition || box.getType() != layout_box_1.LayoutBoxType.ParagraphMark ||
            list_1.ListUtils.last(info.tablePosition).cell.endParagrapPosition.value - 1 != box.rowOffset)
            return true;
        for (var wrapIndex = this.newWrappers.length - 1, wrap = void 0; wrap = this.newWrappers[wrapIndex]; wrapIndex--) {
            if (!wrap || !wrap.info.tablePosition || wrap.info.tablePosition.length < info.tablePosition.length)
                break;
            if (wrap.info.tablePosition.length == info.tablePosition.length)
                return wrap.box.getType() == layout_box_1.LayoutBoxType.ParagraphMark &&
                    list_1.ListUtils.allOf2(info.tablePosition, wrap.info.tablePosition, function (tInfoA, tInfoB) { return tInfoA.equals(tInfoB); });
        }
        return false;
    };
    BoxGenerator.isFieldHideElement = function (info, box) {
        var fieldsInfo = info.fieldsInfo;
        return fieldsInfo &&
            (list_1.ListUtils.unsafeAnyOf(fieldsInfo, function (info) {
                return !info.field.showCode && info.isInCodePart ||
                    info.field.showCode && !info.isInCodePart;
            }) || box.getType() == layout_box_1.LayoutBoxType.FieldResultEnd);
    };
    BoxGenerator.prototype.addToBoxFieldInfo = function (wrap) {
        var fieldsInfo = wrap.info.fieldsInfo;
        if (!fieldsInfo)
            return;
        for (var ind = fieldsInfo.length - 1, fieldInfo = void 0; fieldInfo = fieldsInfo[ind]; ind--) {
            if (fieldInfo.field.isHyperlinkField() && !fieldInfo.isInCodePart &&
                this.boxWrapsHolder.manager.activeSubDocument === this.subDocument) {
                var hyperlinkInfo = fieldInfo.field.getHyperlinkInfo();
                if (hyperlinkInfo.tip != "")
                    wrap.box.hyperlinkTip = hyperlinkInfo.tip;
                else if (hyperlinkInfo.uri != "")
                    wrap.box.hyperlinkTip = hyperlinkInfo.uri + (hyperlinkInfo.anchor == "" ? "" : "#" + hyperlinkInfo.anchor);
                else if (hyperlinkInfo.anchor != "")
                    wrap.box.hyperlinkTip = hyperlinkInfo.anchor[0] == "_" ?
                        this.manager.stringResources.commonLabels.currentDocumentHyperlinkTooltip : "#" + hyperlinkInfo.anchor;
                else
                    wrap.box.hyperlinkTip = "";
                break;
            }
        }
        if (list_1.ListUtils.unsafeAnyOf(fieldsInfo, function (info) { return info.isInCodePart; }))
            wrap.box.fieldLevel = fieldsInfo.length;
        if (wrap.box.getType() == layout_box_1.LayoutBoxType.LayoutDependent)
            wrap.box.setType(BoxGenerator.MapFieldCodeToLayoutDependentBoxType[string_1.StringUtils.trim(this.subDocument.getText(list_1.ListUtils.last(fieldsInfo).field.getCodeInterval()).split("\\")[0]).toUpperCase()]);
    };
    BoxGenerator.prototype.getAbsolutePosition = function (offsetCharAtStartRun) {
        return this.chunk.startLogPosition.value + this.run.startOffset + offsetCharAtStartRun;
    };
    Object.defineProperty(BoxGenerator.prototype, "run", {
        get: function () {
            return this.modelIterator.run;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BoxGenerator.prototype, "chunk", {
        get: function () {
            return this.modelIterator.chunk;
        },
        enumerable: true,
        configurable: true
    });
    BoxGenerator.prototype.createNewBoxes = function () {
        while (this.newWrappers.length < BoxGenerator.MAX_NUM_NEW_BOXES || this.currWrapInfo.tablePosition ||
            this.offsetStartWordAtStartRun != this.modelIterator.charOffset) {
            if (this.modelIterator.charOffset >= this.run.getLength())
                if (!this.getNextRun()) {
                    if (this.chunk.isLast)
                        this.boxWrapsHolder.flags.set(box_wraps_holder_1.IteratorFlags.DocumentEnd, true);
                    else {
                        this.waitForMoreChunks = !!this.currWrapInfo.tablePosition;
                    }
                    return;
                }
            this.parseByChar();
        }
    };
    BoxGenerator.prototype.parseByChar = function () {
        var currChar = this.modelIterator.getCurrentChar();
        switch (currChar) {
            case rich_utils_1.RichUtils.specialCharacters.Space:
            case rich_utils_1.RichUtils.specialCharacters.NonBreakingSpace:
            case rich_utils_1.RichUtils.specialCharacters.TabMark:
            case rich_utils_1.RichUtils.specialCharacters.LineBreak:
            case rich_utils_1.RichUtils.specialCharacters.PageBreak:
            case rich_utils_1.RichUtils.specialCharacters.ColumnBreak:
                this.makeBreakBox(currChar);
                break;
            case rich_utils_1.RichUtils.specialCharacters.Dash:
            case rich_utils_1.RichUtils.specialCharacters.EmDash:
            case rich_utils_1.RichUtils.specialCharacters.EnDash:
                this.makeDashBox();
                break;
            default: this.parseByRunType();
        }
    };
    BoxGenerator.prototype.parseByRunType = function () {
        switch (this.run.getType()) {
            case run_type_1.RunType.ParagraphRun:
            case run_type_1.RunType.SectionRun:
                this.makeParagraphAndSectionBox();
                break;
            case run_type_1.RunType.InlinePictureRun:
                this.makeInlinePictureBox();
                break;
            case run_type_1.RunType.InlineTextBoxRun: throw new Error(errors_1.Errors.NotImplemented);
            case run_type_1.RunType.AnchoredPictureRun:
                this.makeAnchoredPictureRun();
                break;
            case run_type_1.RunType.AnchoredTextBoxRun:
                this.makeAnchoredTextBoxRun();
                break;
            case run_type_1.RunType.FieldCodeStartRun:
                this.makeFieldCodeStartRun();
                break;
            case run_type_1.RunType.FieldCodeEndRun:
                this.makeFieldCodeEndRun();
                break;
            case run_type_1.RunType.FieldResultEndRun:
                this.makeFieldResultEndRun();
                break;
            case run_type_1.RunType.LayoutDependentRun:
                this.makeLayoutDependentRun();
                break;
            default: this.makeDefault();
        }
    };
    BoxGenerator.prototype.makeBreakBox = function (currChar) {
        this.currWordToBox();
        this.modelIterator.charOffset++;
        this.addNewBoxInfo(BoxGenerator.modelCharToLayoutBoxConverter[currChar](this.run.getCharacterMergedProperties(), this.colorProvider));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeDashBox = function () {
        if (this.currBoxInfoType != layout_box_1.LayoutBoxType.Dash) {
            this.currWordToBox();
            this.currBoxInfoType = layout_box_1.LayoutBoxType.Dash;
            this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
        }
        this.modelIterator.charOffset++;
    };
    BoxGenerator.prototype.makeParagraphAndSectionBox = function () {
        this.modelIterator.charOffset++;
        var charProps = this.run.getCharacterMergedProperties();
        this.addNewBoxInfo(this.run.getType() == run_type_1.RunType.ParagraphRun ?
            new layout_paragraph_mark_box_1.LayoutParagraphMarkBox(charProps, charProps.getLayoutColorInfo(this.colorProvider)) :
            new layout_section_mark_box_1.LayoutSectionMarkBox(charProps, charProps.getLayoutColorInfo(this.colorProvider)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeInlinePictureBox = function () {
        var inlinePictureRun = this.run;
        this.modelIterator.charOffset++;
        var charProps = inlinePictureRun.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_picture_box_1.LayoutPictureBox(charProps, charProps.getLayoutColorInfo(this.colorProvider), inlinePictureRun.cacheInfo, inlinePictureRun.getActualSize().applyConverter(unit_converter_1.UnitConverter.twipsToPixelsF)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeAnchoredPictureRun = function () {
        var anchorPictureRun = this.run;
        this.modelIterator.charOffset++;
        if (anchorPictureRun.anchorInfo.hidden)
            return;
        var charProps = anchorPictureRun.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_anchored_picture_box_1.LayoutAnchoredPictureBox(charProps, charProps.getLayoutColorInfo(this.colorProvider), this.subDocument.id, anchorPictureRun.anchorInfo.clone(), anchorPictureRun.shape.clone().applyConverter(unit_converter_1.UnitConverter.twipsToPixelsF), anchorPictureRun.anchoredObjectID, unit_converter_1.UnitConverter.twipsToRadians(anchorPictureRun.size.rotation), anchorPictureRun.cacheInfo)
            .setPosition(new point_1.Point(0, 0))
            .setSize(anchorPictureRun.getActualSize().applyConverter(unit_converter_1.UnitConverter.twipsToPixelsF)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeAnchoredTextBoxRun = function () {
        var anchorTextBox = this.run;
        if (anchorTextBox.anchorInfo.hidden)
            return;
        this.modelIterator.charOffset++;
        var charProps = anchorTextBox.getCharacterMergedProperties();
        var textBoxWrap = this.addNewBoxInfo(new layout_anchored_text_box_1.LayoutAnchoredTextBox(anchorTextBox.getCharacterMergedProperties(), charProps.getLayoutColorInfo(this.colorProvider), this.subDocument.id, anchorTextBox.anchorInfo.clone(), anchorTextBox.shape.clone().applyConverter(unit_converter_1.UnitConverter.twipsToPixelsF), anchorTextBox.anchoredObjectID, unit_converter_1.UnitConverter.twipsToRadians(anchorTextBox.size.rotation), anchorTextBox.subDocId, anchorTextBox.textBoxProperties.clone().setMarginsToAnotherMeasuringSystem(unit_converter_1.UnitConverter.twipsToPixelsF)));
        if (textBoxWrap)
            this.manager.anchoredObjectsManager.textBoxContextSizeCalculators[anchorTextBox.anchoredObjectID] =
                new anchored_objects_manager_1.AnchoredTextBoxContextSizeCalculator(textBoxWrap, anchorTextBox.size);
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeFieldCodeStartRun = function () {
        this.modelIterator.charOffset++;
        var charProps = this.run.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_field_code_start_box_1.LayoutFieldCodeStartBox(charProps, charProps.getLayoutColorInfo(this.colorProvider)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeFieldCodeEndRun = function () {
        this.modelIterator.charOffset++;
        var charProps = this.run.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_field_code_end_box_1.LayoutFieldCodeEndBox(charProps, charProps.getLayoutColorInfo(this.colorProvider)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeFieldResultEndRun = function () {
        this.modelIterator.charOffset++;
        var charProps = this.run.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_field_result_end_box_1.LayoutFieldResultEndBox(charProps, charProps.getLayoutColorInfo(this.colorProvider)));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeLayoutDependentRun = function () {
        this.modelIterator.charOffset++;
        var charProps = this.run.getCharacterMergedProperties();
        this.addNewBoxInfo(new layout_dependent_text_box_1.LayoutDependentTextBox(this.run.getCharacterMergedProperties(), charProps.getLayoutColorInfo(this.colorProvider), this.modelIterator.getRunText()));
        this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
    };
    BoxGenerator.prototype.makeDefault = function () {
        if (this.currBoxInfoType == layout_box_1.LayoutBoxType.Dash) {
            this.currWordToBox();
            this.offsetStartWordAtStartRun = this.modelIterator.charOffset;
        }
        this.modelIterator.charOffset++;
    };
    BoxGenerator.prototype.currWordToBox = function () {
        var maxBoxLength = this.currBoxInfoType == layout_box_1.LayoutBoxType.Text ? BoxGenerator.MAX_BOX_LENGTH : 1;
        if (this.modelIterator.charOffset > this.offsetStartWordAtStartRun) {
            var currRunTextStart = this.offsetStartWordAtStartRun;
            do {
                var currBoxLength = Math.min(maxBoxLength, this.modelIterator.charOffset - currRunTextStart);
                var word = this.modelIterator.getRunText(currRunTextStart, currBoxLength);
                currRunTextStart += currBoxLength;
                var charProps = this.run.getCharacterMergedProperties();
                if (this.currBoxInfoType == layout_box_1.LayoutBoxType.Text)
                    this.addNewBoxInfo(new layout_text_box_1.LayoutTextBox(charProps, charProps.getLayoutColorInfo(this.colorProvider), word), currRunTextStart);
                else
                    this.addNewBoxInfo(new layout_dash_box_1.LayoutDashBox(charProps, charProps.getLayoutColorInfo(this.colorProvider), word), currRunTextStart);
            } while (currRunTextStart < this.modelIterator.charOffset);
        }
        this.currBoxInfoType = layout_box_1.LayoutBoxType.Text;
    };
    BoxGenerator.prototype.getNextRun = function () {
        this.currWordToBox();
        var prevRun = this.modelIterator.run;
        if (!this.modelIterator.moveToNextRun())
            return false;
        var newPos = this.modelIterator.getAbsolutePosition();
        var isNeedUpdateWrapInfo = false;
        if (this.paragraphIterator.update(newPos)) {
            if (this.subDocument.isMain())
                this.sectionIterator.update(newPos);
            this.tableIterator.update(newPos);
            isNeedUpdateWrapInfo = true;
        }
        if (this.fieldIterator.update(newPos) || prevRun.getType() == run_type_1.RunType.FieldCodeEndRun)
            isNeedUpdateWrapInfo = true;
        if (isNeedUpdateWrapInfo) {
            this.currWrapInfo = new box_wrap_1.BoxWrapInfo(this.paragraphIterator.index, this.sectionIterator.index, this.tableIterator.generateInfo(newPos), this.fieldIterator.generateInfo(newPos));
        }
        this.offsetStartWordAtStartRun = 0;
        return true;
    };
    BoxGenerator.MAX_BOX_LENGTH = 50;
    return BoxGenerator;
}());
exports.BoxGenerator = BoxGenerator;
