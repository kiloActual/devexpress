"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var search_1 = require("@devexpress/utils/lib/utils/search");
var table_1 = require("../../model/tables/main-structures/table");
var log_1 = require("../../rich-utils/debug/logger/base-logger/log");
var box_wraps_holder_1 = require("./box-wraps-holder");
var BoxIterator = (function () {
    function BoxIterator(manager, subDocumentId) {
        this.boxWrapsHolder = new box_wraps_holder_1.BoxWrapsHolder(manager, subDocumentId);
    }
    Object.defineProperty(BoxIterator.prototype, "subDocument", {
        get: function () {
            return this.boxWrapsHolder.subDocument;
        },
        enumerable: true,
        configurable: true
    });
    BoxIterator.prototype.setNextValidWrapPosition = function (pos, nestedLevel) {
        this.boxWrapsHolder.setNextValidWrapPosition(pos, nestedLevel);
    };
    BoxIterator.prototype.allBoxesGiven = function () {
        return this.boxWrapsHolder.flags.get(box_wraps_holder_1.IteratorFlags.DocumentEnd);
    };
    BoxIterator.prototype.getPosition = function () {
        return this.boxWrapsHolder.position;
    };
    BoxIterator.prototype.setPosition = function (position, forceResetBoxInfos, checkStartTable) {
        if (!forceResetBoxInfos && position == this.boxWrapsHolder.position) {
        }
        else {
            this.boxWrapsHolder.setPosition(position, forceResetBoxInfos);
        }
        if (checkStartTable && log_1.Log.isEnabled) {
            var w = this.boxWrapsHolder.getWrap();
            if (w && w.info.tablePosition && !new table_1.TablePositionIndexes(0, 0).equals(w.info.tablePosition[0])) {
            }
        }
    };
    BoxIterator.prototype.documentStart = function () {
        this.boxWrapsHolder.reset(0);
    };
    BoxIterator.prototype.getWrap = function (getNextWrap) {
        if (this.boxWrapsHolder.getWrap() && getNextWrap)
            this.boxWrapsHolder.toNextWrap();
        return this.boxWrapsHolder.getWrap();
    };
    BoxIterator.prototype.getBracketInfo = function (rowStartPos, rowLength) {
        var rowInterval = new fixed_1.FixedInterval(rowStartPos, rowLength);
        var end = rowStartPos + rowLength;
        var ind = Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(this.boxWrapsHolder.bracketsInfo, function (bInfo) { return bInfo.absPos; }, rowStartPos));
        var result = [];
        for (var bInfo = void 0; bInfo = this.boxWrapsHolder.bracketsInfo[ind]; ind++) {
            if (bInfo.absPos > end)
                break;
            if (rowInterval.containsWithIntervalEnd(bInfo.absPos))
                result.push(bInfo);
        }
        return result;
    };
    BoxIterator.prototype.getParagraphBounds = function (parIndex) {
        return this.boxWrapsHolder.paragraphBoundsInfo[parIndex];
    };
    return BoxIterator;
}());
exports.BoxIterator = BoxIterator;
var BracketInfo = (function () {
    function BracketInfo(absPos, flags, color, length) {
        this.absPos = absPos;
        this.flags = flags;
        this.color = color;
        this.length = length;
    }
    BracketInfo.prototype.addFlagValue = function (type) {
        this.flags.set(type, true);
    };
    return BracketInfo;
}());
exports.BracketInfo = BracketInfo;
