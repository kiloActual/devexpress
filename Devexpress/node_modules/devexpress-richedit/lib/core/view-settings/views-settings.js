"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var margins_1 = require("@devexpress/utils/lib/geometry/margins");
var dom_1 = require("@devexpress/utils/lib/utils/dom");
var ViewType;
(function (ViewType) {
    ViewType[ViewType["Simple"] = 0] = "Simple";
    ViewType[ViewType["PrintLayout"] = 1] = "PrintLayout";
})(ViewType = exports.ViewType || (exports.ViewType = {}));
var DEFAULT_BORDERS_WIDTH = 1;
var DEFAULT_PAGE_MARGINS = 15;
var RenderPageVertivalInfo = (function () {
    function RenderPageVertivalInfo() {
        this.topPageBorderWidth = DEFAULT_BORDERS_WIDTH;
        this.bottomPageBorderWidth = DEFAULT_BORDERS_WIDTH;
        this.topMargin = DEFAULT_PAGE_MARGINS;
        this.bottomMargin = DEFAULT_PAGE_MARGINS;
    }
    Object.defineProperty(RenderPageVertivalInfo.prototype, "betweenPageSpacing", {
        get: function () { return this.topPageBorderWidth + this.bottomPageBorderWidth + Math.max(this.topMargin, this.bottomMargin); },
        enumerable: true,
        configurable: true
    });
    RenderPageVertivalInfo.prototype.init = function (pageElementStyle) {
        this.topPageBorderWidth = dom_1.DomUtils.pxToFloat(pageElementStyle.borderTopWidth);
        this.bottomPageBorderWidth = dom_1.DomUtils.pxToFloat(pageElementStyle.borderBottomWidth);
        this.topMargin = dom_1.DomUtils.pxToFloat(pageElementStyle.marginTop);
        this.bottomMargin = dom_1.DomUtils.pxToFloat(pageElementStyle.marginBottom);
    };
    RenderPageVertivalInfo.prototype.clone = function () {
        var obj = new RenderPageVertivalInfo();
        obj.copyFrom(this);
        return obj;
    };
    RenderPageVertivalInfo.prototype.copyFrom = function (obj) {
        if (!obj)
            return;
        this.topPageBorderWidth = obj.topPageBorderWidth;
        this.bottomPageBorderWidth = obj.bottomPageBorderWidth;
        this.topMargin = obj.topMargin;
        this.bottomMargin = obj.bottomMargin;
    };
    RenderPageVertivalInfo.prototype.equals = function (obj) {
        return this.topMargin == obj.topMargin &&
            this.bottomMargin == obj.bottomMargin &&
            this.topPageBorderWidth == obj.topPageBorderWidth &&
            this.bottomPageBorderWidth == obj.bottomPageBorderWidth;
    };
    return RenderPageVertivalInfo;
}());
exports.RenderPageVertivalInfo = RenderPageVertivalInfo;
var ViewSettings = (function () {
    function ViewSettings() {
        this.viewType = ViewType.PrintLayout;
        this.paddings = new margins_1.Margins(15, 15, 15, 15);
        this.pageVerticalInfo = new RenderPageVertivalInfo();
        this.showHorizontalRuler = true;
    }
    Object.defineProperty(ViewSettings.prototype, "isFixedWidthMode", {
        get: function () { return this.fixedWidth !== undefined && this.fixedWidth !== null; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewSettings.prototype, "widthOfPage", {
        get: function () {
            return Math.max(50, this.isFixedWidthMode ? this.fixedWidth : this._widthOfPage);
        },
        set: function (val) { this._widthOfPage = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewSettings.prototype, "widthOfContent", {
        get: function () {
            return Math.max(50, this.widthOfPage - this.paddings.horizontal);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewSettings.prototype, "isSimpleView", {
        get: function () { return this.viewType == ViewType.Simple; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ViewSettings.prototype, "isPrintLayoutView", {
        get: function () { return this.viewType == ViewType.PrintLayout; },
        enumerable: true,
        configurable: true
    });
    ViewSettings.prototype.copyFrom = function (obj) {
        this.paddings = new margins_1.Margins(obj.paddings.left, obj.paddings.right, obj.paddings.top, obj.paddings.bottom);
        this.viewType = obj.viewType;
        this._widthOfPage = obj._widthOfPage;
        this.fixedWidth = obj.fixedWidth;
        this.showHorizontalRuler = obj.showHorizontalRuler;
        this.pageVerticalInfo.copyFrom(obj.pageVerticalInfo);
    };
    return ViewSettings;
}());
exports.ViewSettings = ViewSettings;
