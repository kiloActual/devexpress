"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var algorithms_1 = require("@devexpress/utils/lib/intervals/algorithms");
var boundary_1 = require("@devexpress/utils/lib/intervals/boundary");
var fixed_1 = require("@devexpress/utils/lib/intervals/fixed");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var search_1 = require("@devexpress/utils/lib/utils/search");
var cell_grid_info_manager_1 = require("../layout-formatter/table/grid-engine/cell-grid-info-manager");
var table_1 = require("../model/tables/main-structures/table");
var table_base_structures_1 = require("../model/tables/secondary-structures/table-base-structures");
var SelectedTableRowInfo = (function () {
    function SelectedTableRowInfo(rowIndex, cells) {
        this.rowIndex = rowIndex;
        this.cells = cells;
    }
    Object.defineProperty(SelectedTableRowInfo.prototype, "row", {
        get: function () { return this.cells[0].cell.parentRow; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectedTableRowInfo.prototype, "isSeries", {
        get: function () {
            var _this = this;
            return list_1.ListUtils.allOf(this.cells, function (cellInfo, cellInd) { return cellInfo.cellIndex == _this.cells[cellInd - 1].cellIndex + 1; }, 1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectedTableRowInfo.prototype, "columnCountInSeries", {
        get: function () {
            return this.isSeries ? list_1.ListUtils.accumulateNumber(this.cells, function (cellInfo) { return cellInfo.cell.columnSpan; }) : 0;
        },
        enumerable: true,
        configurable: true
    });
    return SelectedTableRowInfo;
}());
exports.SelectedTableRowInfo = SelectedTableRowInfo;
var SelectedTableCellInfo = (function () {
    function SelectedTableCellInfo(cell, cellIndex) {
        this.cell = cell;
        this.cellIndex = cellIndex;
    }
    return SelectedTableCellInfo;
}());
exports.SelectedTableCellInfo = SelectedTableCellInfo;
var TableSelectionData = (function () {
    function TableSelectionData(info, rows) {
        this.info = info;
        this.rows = rows;
        if (!rows[0]) {
            this._isSquare = false;
            this._isSelectedEntireTable = false;
            this._withoutGapByRows = false;
            this._areCellsSelectedInSeries = false;
        }
    }
    Object.defineProperty(TableSelectionData.prototype, "numRows", {
        get: function () { return this.rows.length; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "startRowIndex", {
        get: function () { return this.rows[0].rowIndex; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "isSquare", {
        get: function () { return this._isSquare === undefined ? (this._isSquare = this.calculateIsSquare()) : this._isSquare; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(TableSelectionData.prototype, "firstCell", {
        get: function () { return this.firstCellInfo.cell; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "firstCellInfo", {
        get: function () { return this.firstRowInfo.cells[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "firstRowInfo", {
        get: function () { return this.rows[0]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "lastCellInfo", {
        get: function () { return list_1.ListUtils.last(this.lastRowInfo.cells); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "lastCell", {
        get: function () { return this.lastCellInfo.cell; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "lastRowInfo", {
        get: function () { return list_1.ListUtils.last(this.rows); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "withoutGapByRows", {
        get: function () {
            var _this = this;
            return this._withoutGapByRows === undefined ?
                (this._withoutGapByRows = list_1.ListUtils.allOf(this.rows, function (row, i) { return row.rowIndex == _this.rows[i - 1].rowIndex + 1; }, 1)) : this._withoutGapByRows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "isSelectedEntireTable", {
        get: function () {
            return this._isSelectedEntireTable === undefined ?
                (this._isSelectedEntireTable = this.numRows == this.info.table.rows.length &&
                    list_1.ListUtils.allOf2(this.rows, this.info.table.rows, function (selR, modelR) { return selR.cells.length == modelR.cells.length; })) :
                this._isSelectedEntireTable;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSelectionData.prototype, "areCellsSelectedInSeries", {
        get: function () {
            var _this = this;
            return this._areCellsSelectedInSeries === undefined ?
                (this._areCellsSelectedInSeries = list_1.ListUtils.allOf(this.rows, function (rowInfo, rowInd) {
                    return (rowInd == 0 || (rowInfo.rowIndex == _this.rows[rowInd - 1].rowIndex + 1)) && rowInfo.isSeries;
                })) :
                this._areCellsSelectedInSeries;
        },
        enumerable: true,
        configurable: true
    });
    TableSelectionData.prototype.foreach = function (onEachRowCallback, onEachCellCallback) {
        for (var rowOffset = 0, rowInfo = void 0; rowInfo = this.rows[rowOffset]; rowOffset++) {
            onEachRowCallback(rowInfo);
            for (var cellOffset = 0, cellInfo = void 0; cellInfo = rowInfo.cells[cellOffset]; cellOffset++)
                onEachCellCallback(cellInfo, rowInfo);
        }
    };
    TableSelectionData.prototype.allOfCells = function (onEachCellCallback) {
        for (var rowOffset = 0, rowInfo = void 0; rowInfo = this.rows[rowOffset]; rowOffset++) {
            for (var cellOffset = 0, cellInfo = void 0; cellInfo = rowInfo.cells[cellOffset]; cellOffset++) {
                if (!onEachCellCallback(cellInfo, rowInfo))
                    return false;
            }
        }
        return true;
    };
    TableSelectionData.prototype.calculateIsSquare = function () {
        var prevInterval;
        if (!this.withoutGapByRows)
            return false;
        var _loop_1 = function (rowInfo) {
            var rowGridInfo = this_1.info.gridInfoManager.tableCellInfos[rowInfo.rowIndex];
            var spans = list_1.ListUtils.map(rowInfo.cells, function (cellInfo) {
                return new fixed_1.FixedInterval(rowGridInfo[cellInfo.cellIndex].getGridCellIndex(), cellInfo.cell.columnSpan);
            });
            var isSeriesofSpans = list_1.ListUtils.allOf(spans, function (s, i) { return s.start == spans[i - 1].end; }, 1);
            var currInterval = new boundary_1.BoundaryInterval(spans[0].start, list_1.ListUtils.last(spans).end);
            if (!isSeriesofSpans || (prevInterval && !currInterval.equals(prevInterval)))
                return { value: false };
            prevInterval = currInterval;
        };
        var this_1 = this;
        for (var _i = 0, _a = this.rows; _i < _a.length; _i++) {
            var rowInfo = _a[_i];
            var state_1 = _loop_1(rowInfo);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return true;
    };
    TableSelectionData.prototype.atLeastOneCellFullySelected = function (intervals) {
        var _this = this;
        return this.numRows > 1 || (this.numRows == 1 && this.rows[0].cells.length > 1) ||
            list_1.ListUtils.unsafeAnyOf(intervals, function (interval) { return interval.equals(_this.firstCell.interval); });
    };
    return TableSelectionData;
}());
exports.TableSelectionData = TableSelectionData;
var SelectedTableInfo = (function () {
    function SelectedTableInfo(table, gridInfoManager, rawRowsData, extendedRowsData) {
        this.table = table;
        this.gridInfoManager = gridInfoManager;
        this.rawData = new TableSelectionData(this, rawRowsData);
        this.extendedData = new TableSelectionData(this, extendedRowsData);
    }
    Object.defineProperty(SelectedTableInfo.prototype, "isSelected", {
        get: function () { return !!this.rawData.rows.length; },
        enumerable: true,
        configurable: true
    });
    return SelectedTableInfo;
}());
exports.SelectedTableInfo = SelectedTableInfo;
var SelectedCellsCalculator = (function () {
    function SelectedCellsCalculator() {
        this.map = {};
    }
    SelectedCellsCalculator.prototype.calculate = function (tables, intervals) {
        var table = this.findTable(tables, intervals);
        return table ?
            this.fillResult(table, intervals) :
            new SelectedTableInfo(null, null, [], []);
    };
    SelectedCellsCalculator.prototype.findTable = function (tables, intervals) {
        if (!tables.length)
            return null;
        var fullInterval = new boundary_1.BoundaryInterval(intervals[0].start, list_1.ListUtils.last(intervals).end);
        if (fullInterval.length == 0)
            return table_1.Table.getTableByPosition(tables, fullInterval.start, true);
        var startTable = table_1.Table.correctBoundTable(tables, Math.max(0, search_1.SearchUtils.normedInterpolationIndexOf(tables, function (t) { return t.getStartPosition(); }, fullInterval.start)), fullInterval.start, function (index) { return --index; });
        var foundTable = null;
        var numFoundTablesOnOneLevel = 0;
        for (var tbl = startTable, tblInd = tbl.index; (tbl = tables[tblInd]) && (tbl.getStartPosition() <= fullInterval.end); tblInd++) {
            var inters = algorithms_1.IntervalAlgorithms.getIntersection(tbl.interval, fullInterval);
            if (inters && (inters.length || inters.start != tbl.getEndPosition())) {
                if (!foundTable || tbl.nestedLevel < foundTable.nestedLevel) {
                    foundTable = tbl;
                    numFoundTablesOnOneLevel = 1;
                }
                else if (tbl.nestedLevel == foundTable.nestedLevel)
                    numFoundTablesOnOneLevel++;
            }
        }
        return foundTable && numFoundTablesOnOneLevel == 1 && foundTable.interval.containsInterval(fullInterval) ? foundTable : null;
    };
    SelectedCellsCalculator.prototype.fillResult = function (table, intervals) {
        var intervalInd = 0;
        var selInterval = boundary_1.BoundaryInterval.makeByConstInterval(intervals[intervalInd]);
        var tblPos = new table_1.TablePosition(table, -1, -1);
        while (tblPos.moveToNextRow()) {
            while (tblPos.moveToNextCell()) {
                var cellInterval = tblPos.cell.interval;
                var inters = algorithms_1.IntervalAlgorithms.getIntersection(selInterval, cellInterval);
                if (inters && (inters.length || !selInterval.length && inters.start < cellInterval.end)) {
                    this.add(tblPos);
                    if (tblPos.cell.endParagrapPosition.value >= selInterval.end) {
                        var nextInterval = intervals[++intervalInd];
                        if (nextInterval)
                            selInterval = boundary_1.BoundaryInterval.makeByConstInterval(nextInterval);
                        else
                            return this.extendMergedCells(table);
                    }
                }
            }
        }
        return this.extendMergedCells(table);
    };
    SelectedCellsCalculator.prototype.add = function (tblPos) {
        tblPos = tblPos.clone();
        var oldVal = this.map[tblPos.rowIndex];
        if (oldVal)
            oldVal.push(tblPos);
        else
            this.map[tblPos.rowIndex] = [tblPos];
    };
    SelectedCellsCalculator.prototype.extendMergedCells = function (table) {
        var _this = this;
        var gridInfoManager = new cell_grid_info_manager_1.CellGridInfoManager(table);
        var weakPositions = number_1.NumberMapUtils.toListBy(this.map, function (poss) { return list_1.ListUtils.deepCopy(poss); });
        list_1.ListUtils.forEach(weakPositions, function (tblPoss) {
            list_1.ListUtils.forEach(tblPoss, function (tblPos) {
                if (tblPos.cell.verticalMerging != table_base_structures_1.TableCellMergingState.None) {
                    var cellInfo_1 = gridInfoManager.gridInfosByTablePosition(tblPos);
                    list_1.ListUtils.forEachOnInterval(cellInfo_1.rowIndexesInterval, function (rowIndex) {
                        _this.add(new table_1.TablePosition(table, rowIndex, cellInfo_1.getCellIndexAbs(rowIndex)).init());
                    });
                }
            });
        });
        var rowsInfo = number_1.NumberMapUtils.toListBy(this.map, function (tblPoss) {
            return list_1.ListUtils.unique(tblPoss, function (a, b) { return a.cellIndex - b.cellIndex; });
        })
            .sort(function (a, b) { return a[0].rowIndex - b[0].rowIndex; });
        return new SelectedTableInfo(table, gridInfoManager, SelectedCellsCalculator.translateRowPositionsToSelectedInfo(weakPositions), SelectedCellsCalculator.translateRowPositionsToSelectedInfo(rowsInfo));
    };
    SelectedCellsCalculator.translateRowPositionsToSelectedInfo = function (poss) {
        return list_1.ListUtils.map(poss, function (rowCellsPoss) { return new SelectedTableRowInfo(rowCellsPoss[0].rowIndex, list_1.ListUtils.map(rowCellsPoss, function (tblPos) { return new SelectedTableCellInfo(tblPos.cell, tblPos.cellIndex); })); });
    };
    return SelectedCellsCalculator;
}());
exports.SelectedCellsCalculator = SelectedCellsCalculator;
var TableSelectionExtender = (function () {
    function TableSelectionExtender() {
    }
    TableSelectionExtender.correctIntervalDueToTables = function (subDocument, newInterval) {
        if (newInterval.length == 0 || subDocument.tables.length == 0)
            return;
        var startCell = table_1.Table.getTableCellByPosition(subDocument.tables, newInterval.start);
        var endCell = table_1.Table.getTableCellByPosition(subDocument.tables, newInterval.end);
        if (startCell == null && endCell == null)
            return;
        if (startCell == null && endCell != null) {
            if (newInterval.end != endCell.parentRow.getStartPosition())
                newInterval.expand(new fixed_1.FixedInterval(newInterval.end, endCell.parentRow.getEndPosition() - newInterval.end));
            return;
        }
        if (startCell != null && newInterval.end == startCell.endParagrapPosition.value) {
            newInterval.expand(startCell.interval);
            return;
        }
        if ((startCell != null && endCell == null) || TableSelectionExtender.firstCellIsParentCellForSecondCellsTable(endCell, startCell)) {
            if (newInterval.end != startCell.parentRow.parentTable.getEndPosition())
                newInterval.expand(new fixed_1.FixedInterval(startCell.parentRow.getStartPosition(), newInterval.start - startCell.parentRow.getStartPosition()));
            return;
        }
        var startTable = table_1.Table.getTableByPosition(subDocument.tables, newInterval.start, false);
        var endTable = table_1.Table.getTableByPosition(subDocument.tables, newInterval.end, false);
        if (startTable != endTable) {
            newInterval.expand(new fixed_1.FixedInterval(startCell.parentRow.getStartPosition(), newInterval.start - startCell.parentRow.getStartPosition()));
            if (newInterval.end != endCell.parentRow.getStartPosition())
                newInterval.expand(new fixed_1.FixedInterval(newInterval.end, endCell.parentRow.getEndPosition() - newInterval.end));
            return;
        }
        if (startCell != null && endCell != null && startCell != endCell && startCell.parentRow.parentTable == endCell.parentRow.parentTable) {
            newInterval.expand(startCell.interval);
            if (newInterval.end != endCell.startParagraphPosition.value)
                newInterval.expand(endCell.interval);
            return;
        }
    };
    TableSelectionExtender.firstCellIsParentCellForSecondCellsTable = function (firstCell, secondCell) {
        if (firstCell == null || secondCell == null || secondCell.parentRow.parentTable.parentCell == null)
            return false;
        var parentTable = secondCell.parentRow.parentTable;
        while (parentTable.parentCell != null) {
            if (parentTable.parentCell == firstCell)
                return true;
            parentTable = parentTable.parentCell.parentRow.parentTable;
        }
        return false;
    };
    return TableSelectionExtender;
}());
exports.TableSelectionExtender = TableSelectionExtender;
