"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var string_1 = require("@devexpress/utils/lib/utils/map/string");
var log_source_1 = require("./log-source");
var model_params_holder_1 = require("./model-params-holder");
var Logger = (function () {
    function Logger() {
        this._paramsHolder = new model_params_holder_1.ModelParamsHolder();
        this._isEnabled = false;
        this.isDebug = false;
        this.splitBy = ", ";
        this.SOLID_BLOCK = String.fromCharCode(0x2588);
        this.DOUBLE_SOLID_BLOCK = this.SOLID_BLOCK + this.SOLID_BLOCK;
        this.TRIPLE_SOLID_BLOCK = this.DOUBLE_SOLID_BLOCK + this.SOLID_BLOCK;
    }
    Logger.getInstance = function () {
        return Logger.instance ? Logger.instance : (Logger.instance = new Logger());
    };
    Object.defineProperty(Logger.prototype, "paramsHolder", {
        get: function () { return this._paramsHolder; },
        set: function (val) { this._paramsHolder = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "logSourceParams", {
        get: function () { return this._paramsHolder.logSourceParams; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Logger.prototype, "isEnabled", {
        get: function () { return this._isEnabled; },
        set: function (val) {
            this._isEnabled = val;
        },
        enumerable: true,
        configurable: true
    });
    ;
    Logger.prototype.disableAll = function () {
        this.isEnabled = false;
        number_1.NumberMapUtils.forEach(this.logSourceParams, function (param) { return param.setEnabled(false); });
    };
    Logger.prototype.print = function (logSource, functionInfo, valOrFunc) {
        if (!this._isEnabled)
            return false;
        var logSourceParams = this.logSourceParams[logSource];
        if (logSourceParams) {
            if (logSourceParams.isEnabled(functionInfo) && !logSourceParams.handle(functionInfo, valOrFunc))
                console.log(this.SOLID_BLOCK + " " + logSourceParams.getName() + " " + functionInfo + " " + (typeof valOrFunc == "function" ? valOrFunc() : valOrFunc));
        }
        else
            console.log("Log.print " + log_source_1.LogSource[logSource] + " not defined");
    };
    Logger.prototype.flip = function (func, aArgPos, bArgPos) {
        return function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            params.splice(bArgPos, 1, params.splice(aArgPos, 1, params[bArgPos])[0]);
            return func.apply(func, params);
        };
    };
    Logger.prototype.w = function (numFuncParams, func, currParamsStack) {
        var _this = this;
        if (currParamsStack === void 0) { currParamsStack = []; }
        return function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            var newStack = currParamsStack.concat(params.length == 0 ? undefined : params);
            if (newStack.length >= numFuncParams)
                return func.apply(func, currParamsStack.concat(params));
            return _this.w(numFuncParams, func, newStack);
        };
    };
    Logger.prototype.join = function (sep, list) {
        return list.join(sep);
    };
    Logger.prototype.map = function (func, list) {
        return list_1.ListUtils.map(list, func);
    };
    Logger.prototype.mask = function (objEnum, mask, excessNullValue) {
        if (excessNullValue === void 0) { excessNullValue = Number.MAX_VALUE; }
        var res = [];
        var isFoundNullValue = false;
        string_1.StringMapUtils.forEach(objEnum, function (_t, key) {
            var keyNum = parseInt(key);
            if (!isNaN(keyNum) && (keyNum & mask) == keyNum) {
                if (excessNullValue != keyNum)
                    res.push(objEnum[key]);
                else
                    isFoundNullValue = true;
            }
        });
        if (isFoundNullValue && !res.length)
            res.push(objEnum[excessNullValue]);
        return res.join(this.splitBy);
    };
    ;
    return Logger;
}());
exports.Logger = Logger;
