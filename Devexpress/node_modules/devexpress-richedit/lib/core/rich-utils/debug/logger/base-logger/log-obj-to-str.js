"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enums_1 = require("../../../../model/borders/enums");
var enums_2 = require("../../../../model/enums");
var enums_3 = require("../../../../model/section/enums");
var shading_pattern_1 = require("../../../../model/shadings/shading-pattern");
var table_cell_properties_merger_1 = require("../../../../model/tables/properties-mergers/table-cell-properties-merger");
var table_cell_properties_1 = require("../../../../model/tables/properties/table-cell-properties");
var table_properties_1 = require("../../../../model/tables/properties/table-properties");
var table_row_properties_1 = require("../../../../model/tables/properties/table-row-properties");
var table_base_structures_1 = require("../../../../model/tables/secondary-structures/table-base-structures");
var table_units_1 = require("../../../../model/tables/secondary-structures/table-units");
var log_1 = require("./log");
var log_list_helper_1 = require("./log-list-helper");
var LogObjToStr = (function () {
    function LogObjToStr() {
    }
    LogObjToStr.point = function (p) {
        return p ? "[x: " + p.x + ", y:" + p.y + "]" : "null";
    };
    LogObjToStr.fixedInterval = function (interval) {
        return "[" + interval.start + ", " + interval.end + "]";
    };
    LogObjToStr.tableWidthUnit = function (unit) {
        return "type: " + table_units_1.TableWidthUnitType[unit.type] + ", val: " + unit.value;
    };
    LogObjToStr.tableHeightUnit = function (unit) {
        return "type: " + table_units_1.TableHeightUnitType[unit.type] + ", val: " + unit.value;
    };
    LogObjToStr.tableMembers = function (table, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "index: " + table.index);
        result.push(prefix + "nestedLevel: " + table.nestedLevel);
        result.push(prefix + "lookTypes: " + log_1.Log.mask(table_base_structures_1.TableLookTypes, table.lookTypes));
        result.push(prefix + "preferredWidth: " + LogObjToStr.tableWidthUnit(table.preferredWidth));
        return result.join("\n");
    };
    LogObjToStr.tableProperties = function (props, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "mask: " + log_1.Log.mask(table_properties_1.TablePropertiesMask, props.mask));
        if (props.mask & table_properties_1.TablePropertiesMask.UseTopMargin)
            result.push(prefix + "cellMargins.top: " + LogObjToStr.tableWidthUnit(props.cellMargins.top));
        if (props.mask & table_properties_1.TablePropertiesMask.UseRightMargin)
            result.push(prefix + "cellMargins.right: " + LogObjToStr.tableWidthUnit(props.cellMargins.right));
        if (props.mask & table_properties_1.TablePropertiesMask.UseBottomMargin)
            result.push(prefix + "cellMargins.bottom: " + LogObjToStr.tableWidthUnit(props.cellMargins.bottom));
        if (props.mask & table_properties_1.TablePropertiesMask.UseLeftMargin)
            result.push(prefix + "cellMargins.left: " + LogObjToStr.tableWidthUnit(props.cellMargins.left));
        if (props.mask & table_properties_1.TablePropertiesMask.UseCellSpacing)
            result.push(prefix + "cellSpacing: " + LogObjToStr.tableWidthUnit(props.cellSpacing));
        if (props.mask & table_properties_1.TablePropertiesMask.UseTableIndent)
            result.push(prefix + "indent: " + LogObjToStr.tableWidthUnit(props.indent));
        if (props.mask & table_properties_1.TablePropertiesMask.UseTopBorder)
            result.push(prefix + "borders.topBorder: " + LogObjToStr.borderInfo(props.borders.topBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseRightBorder)
            result.push(prefix + "borders.rightBorder: " + LogObjToStr.borderInfo(props.borders.rightBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseBottomBorder)
            result.push(prefix + "borders.bottomBorder: " + LogObjToStr.borderInfo(props.borders.bottomBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseLeftBorder)
            result.push(prefix + "borders.leftBorder: " + LogObjToStr.borderInfo(props.borders.leftBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseInsideHorizontalBorder)
            result.push(prefix + "borders.insideHorizontalBorder: " + LogObjToStr.borderInfo(props.borders.insideHorizontalBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseInsideVerticalBorder)
            result.push(prefix + "borders.insideVerticalBorder: " + LogObjToStr.borderInfo(props.borders.insideVerticalBorder));
        if (props.mask & table_properties_1.TablePropertiesMask.UseTableStyleColBandSize)
            result.push(prefix + "tableStyleColumnBandSize: " + props.tableStyleColumnBandSize);
        if (props.mask & table_properties_1.TablePropertiesMask.UseTableStyleRowBandSize)
            result.push(prefix + "tableStyleRowBandSize: " + props.tableStyleRowBandSize);
        if (props.mask & table_properties_1.TablePropertiesMask.UseAvoidDoubleBorders)
            result.push(prefix + "avoidDoubleBorders: " + props.avoidDoubleBorders);
        if (props.mask & table_properties_1.TablePropertiesMask.UseShadingInfoIndex)
            result.push(prefix + "shadingInfo: " + LogObjToStr.shadingInfo(props.shadingInfo) + " \n");
        if (props.mask & table_properties_1.TablePropertiesMask.UseTableAlignment)
            result.push(prefix + "tableRowAlignment: " + props.tableRowAlignment + "\n");
        result.push(prefix + "layoutType: " + table_base_structures_1.TableLayoutType[props.layoutType]);
        return result.join("\n");
    };
    LogObjToStr.borderInfo = function (brd) {
        return "color: [" + LogObjToStr.colorModelInfo(brd.color) + "], width: " + brd.width + ", style: " + enums_1.BorderLineStyle[brd.style];
    };
    LogObjToStr.colorModelInfo = function (color) {
        return color.toDebugString();
    };
    LogObjToStr.shadingInfo = function (shadingInfo) {
        return "backColor: " + shadingInfo.backColor + ", foreColor: " + shadingInfo.foreColor + ", shadingPattern: " + shading_pattern_1.ShadingPattern[shadingInfo.shadingPattern];
    };
    LogObjToStr.tableCellMembers = function (cell, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "columnSpan: " + cell.columnSpan);
        result.push(prefix + "conditionalFormatting: " + log_1.Log.mask(table_base_structures_1.ConditionalTableStyleFormatting, cell.conditionalFormatting));
        result.push(prefix + "startParagraphPosition: " + cell.startParagraphPosition.value);
        result.push(prefix + "endParagrapPosition: " + cell.endParagrapPosition.value);
        result.push(prefix + "verticalMerging: " + table_base_structures_1.TableCellMergingState[cell.verticalMerging]);
        result.push(prefix + "preferredWidth: " + LogObjToStr.tableWidthUnit(cell.preferredWidth));
        return result.join("\n");
    };
    LogObjToStr.tableCellProperties = function (props, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "mask: " + log_1.Log.mask(table_cell_properties_1.TableCellPropertiesMask, props.mask));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseTopBorder)
            result.push(prefix + "borders.topBorder: " + props.borders.topBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseRightBorder)
            result.push(prefix + "borders.rightBorder: " + props.borders.rightBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseBottomBorder)
            result.push(prefix + "borders.bottomBorder: " + props.borders.bottomBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseLeftBorder)
            result.push(prefix + "borders.leftBorder: " + props.borders.leftBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseTopLeftDiagonalBorder)
            result.push(prefix + "borders.topLeftDiagonalBorder: " + props.borders.topLeftDiagonalBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseTopRightDiagonalBorder)
            result.push(prefix + "borders.topRightDiagonalBorder: " + props.borders.topRightDiagonalBorder);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseTopMargin)
            result.push(prefix + "cellMargins.top: " + LogObjToStr.tableWidthUnit(props.cellMargins.top));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseRightMargin)
            result.push(prefix + "cellMargins.right: " + LogObjToStr.tableWidthUnit(props.cellMargins.right));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseBottomMargin)
            result.push(prefix + "cellMargins.bottom: " + LogObjToStr.tableWidthUnit(props.cellMargins.bottom));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseLeftMargin)
            result.push(prefix + "cellMargins.left: " + LogObjToStr.tableWidthUnit(props.cellMargins.left));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseFitText)
            result.push(prefix + "fitText: " + props.fitText);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseHideCellMark)
            result.push(prefix + "hideCellMark: " + props.hideCellMark);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseNoWrap)
            result.push(prefix + "noWrap: " + props.noWrap);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseShadingInfoIndex)
            result.push(prefix + "shadingInfo: " + LogObjToStr.shadingInfo(props.shadingInfo));
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseTextDirection)
            result.push(prefix + "textDirection: " + table_base_structures_1.TextDirection[props.textDirection]);
        if (props.mask & table_cell_properties_1.TableCellPropertiesMask.UseVerticalAlignment)
            result.push(prefix + "verticalAlignment: " + table_base_structures_1.TableCellVerticalAlignment[props.verticalAlignment]);
        return result.join("\n");
    };
    LogObjToStr.tableRowMembers = function (row, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "conditionalFormatting: " + log_1.Log.mask(table_base_structures_1.ConditionalTableStyleFormatting, row.conditionalFormatting));
        result.push(prefix + "height: " + LogObjToStr.tableHeightUnit(row.height));
        result.push(prefix + "gridAfter: " + row.gridAfter);
        result.push(prefix + "gridBefore: " + row.gridBefore);
        result.push(prefix + "widthAfter: " + LogObjToStr.tableWidthUnit(row.widthAfter));
        result.push(prefix + "widthBefore: " + LogObjToStr.tableWidthUnit(row.widthBefore));
        return result.join("\n");
    };
    LogObjToStr.tableRowProperties = function (props, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(prefix + "mask: " + log_1.Log.mask(table_row_properties_1.TableRowPropertiesMask, props.mask));
        if (props.mask & table_row_properties_1.TableRowPropertiesMask.UseCantSplit)
            result.push(prefix + "cantSplit: " + props.cantSplit);
        if (props.mask & table_row_properties_1.TableRowPropertiesMask.UseCellSpacing)
            result.push(prefix + "cellSpacing: " + LogObjToStr.tableWidthUnit(props.cellSpacing));
        if (props.mask & table_row_properties_1.TableRowPropertiesMask.UseHeader)
            result.push(prefix + "header: " + props.header);
        if (props.mask & table_row_properties_1.TableRowPropertiesMask.UseHideCellMark)
            result.push(prefix + "hideCellMark: " + props.hideCellMark);
        if (props.mask & table_row_properties_1.TableRowPropertiesMask.UseTableRowAlignment)
            result.push(prefix + "tableRowAlignment: " + table_base_structures_1.TableRowAlignment[props.tableRowAlignment]);
        return result.join("\n");
    };
    LogObjToStr.tableConditionalStyle = function (style, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefixNext = prefix + "\t";
        var result = [];
        result.push(prefix + "tableProperties:\n" + LogObjToStr.tableProperties(style.tableProperties, prefixNext));
        result.push(prefix + "tableRowProperties:\n" + LogObjToStr.tableRowProperties(style.tableRowProperties, prefixNext));
        result.push(prefix + "tableCellProperties:\n" + LogObjToStr.tableCellProperties(style.tableCellProperties, prefixNext));
        return result.join("\n");
    };
    LogObjToStr.tableStyle = function (style, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefixNext = prefix + "\t";
        var listOfActualCondStyles = [];
        for (var _i = 0, _a = table_cell_properties_merger_1.TableCellPropertiesMerger.conditionalTableStyleFormattingPriority; _i < _a.length; _i++) {
            var styleFlag = _a[_i];
            if (style.conditionalStyles[styleFlag])
                listOfActualCondStyles.push(styleFlag);
        }
        var condStylesHandler = function (styleFlag) {
            return "" + prefix + table_base_structures_1.ConditionalTableStyleFormatting[styleFlag] + ":\n" + LogObjToStr.tableConditionalStyle(style.conditionalStyles[styleFlag], prefixNext);
        };
        var result = [];
        result.push(prefix + "name: " + style.styleName);
        result.push(prefix + "isDefault: " + style.isDefault);
        result.push(prefix + "hidden: " + style.hidden);
        result.push("" + log_1.Log.map(condStylesHandler, listOfActualCondStyles).join("\n"));
        if (style.parent)
            result.push("" + LogObjToStr.tableStyle(style.parent, prefix));
        return result.join("\n");
    };
    LogObjToStr.rectangle = function (r, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "x: " + r.x);
        result.push(prefix + "y: " + r.y);
        result.push(prefix + "width: " + r.width);
        result.push(prefix + "height: " + r.height);
        return result.join(sep);
    };
    LogObjToStr.historyItemListLevelStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "listLevelIndex: " + obj.listLevelIndex);
        result.push(prefix + "numberingListIndex: " + obj.numberingListIndex);
        result.push(prefix + "isAbstractNumberingList: " + obj.isAbstractNumberingList);
        return result.join(sep);
    };
    LogObjToStr.historyItemTableStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "value: " + obj.tableIndex);
        result.push(prefix + "value: " + obj.tableNestedLevel);
        result.push(prefix + "value: " + obj.tableStartPosition);
        return result.join(sep);
    };
    LogObjToStr.historyItemTableRowStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "value: " + obj.tableIndex);
        result.push(prefix + "value: " + obj.tableNestedLevel);
        result.push(prefix + "value: " + obj.tableStartPosition);
        result.push(prefix + "value: " + obj.rowIndex);
        return result.join(sep);
    };
    LogObjToStr.historyItemTableCellStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "value: " + obj.tableIndex);
        result.push(prefix + "value: " + obj.tableNestedLevel);
        result.push(prefix + "value: " + obj.tableStartPosition);
        result.push(prefix + "value: " + obj.rowIndex);
        result.push(prefix + "value: " + obj.cellIndex);
        return result.join(sep);
    };
    LogObjToStr.historyItemIntervalStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "interval: " + LogObjToStr.fixedInterval(obj.interval));
        return result.join(sep);
    };
    LogObjToStr.size = function (info, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "width: " + info.width);
        result.push(prefix + "height: " + info.height);
        return result.join(sep);
    };
    LogObjToStr.cacheImageInfo = function (info, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "base64Defined?: " + (info.base64 !== undefined));
        result.push(prefix + "actualId: " + info.actualId);
        result.push(prefix + "tmpId: " + info.tmpId);
        result.push(prefix + "referenceInfo: " + info.referenceInfo);
        return result.join(sep);
    };
    LogObjToStr.historyItemSectionStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "value: " + obj.value);
        result.push(prefix + "sectionIndex: " + obj.sectionIndex);
        return result.join(sep);
    };
    LogObjToStr.historyItemState = function (handler, obj, prefix, sep) {
        if (prefix === void 0) { prefix = "\t"; }
        if (sep === void 0) { sep = "\n"; }
        return log_list_helper_1.LogListHelper.level_1(log_1.Log.w(3, log_1.Log.flip(log_1.Log.flip(handler, 0, 1), 1, 2))("", ", "), obj.objects, prefix, sep);
    };
    LogObjToStr.hyperlinkInfo = function (info, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        if (info) {
            result.push(prefix + "uri: " + info.uri);
            result.push(prefix + "tip: " + info.tip);
            result.push(prefix + "anchor: " + info.anchor);
            result.push(prefix + "visited: " + info.visited);
        }
        return result.join(sep);
    };
    LogObjToStr.subDocumentInfoBase = function (info, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "subDocumentId: " + info.subDocumentId);
        result.push(prefix + "getType(): " + enums_2.SubDocumentInfoType[info.getType()]);
        return result.join(sep);
    };
    LogObjToStr.headerFooterSubDocumentInfoBase = function (info, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(LogObjToStr.subDocumentInfoBase(info, prefix, sep));
        result.push(prefix + "headerFooterType: " + enums_3.HeaderFooterType[info.headerFooterType]);
        return result.join(sep);
    };
    LogObjToStr.historyItemListLevelUseStateObject = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(LogObjToStr.historyItemListLevelStateObject(obj, prefix, sep));
        result.push(prefix + "use: " + obj.use);
        return result.join(sep);
    };
    LogObjToStr.historyItemIntervalState = function (handler, obj, prefix, sep) {
        if (prefix === void 0) { prefix = "\t"; }
        if (sep === void 0) { sep = "\n"; }
        var result = [];
        result.push(LogObjToStr.historyItemState(handler, obj, prefix, sep)());
        result.push(prefix + "interval: " + LogObjToStr.fixedInterval(obj.interval));
        return function () { return result.join(sep); };
    };
    return LogObjToStr;
}());
exports.LogObjToStr = LogObjToStr;
