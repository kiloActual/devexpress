"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var layout_change_base_1 = require("../../../../layout-formatter/changes/changes/layout-change-base");
var document_layout_details_level_1 = require("../../../../layout/document-layout-details-level");
var layout_box_1 = require("../../../../layout/main-structures/layout-boxes/layout-box");
var layout_table_cell_info_1 = require("../../../../layout/table/layout-table-cell-info");
var log_1 = require("../base-logger/log");
var log_obj_to_str_1 = require("../base-logger/log-obj-to-str");
var LogObjToStrLayout = (function () {
    function LogObjToStrLayout() {
    }
    LogObjToStrLayout.layoutPoint = function (p) {
        return p ? "[pageIndex: " + p.pageIndex + ", x: " + p.x + ", y:" + p.y + "]" : "null";
    };
    LogObjToStrLayout.layoutPosition = function (lp) {
        return LogObjToStrLayout.layoutPositionShort(lp) + (", boxInd: " + lp.boxIndex + ", charOffset:" + lp.charOffset);
    };
    LogObjToStrLayout.layoutPositionShort = function (lp) {
        return "DetLevel: " + document_layout_details_level_1.DocumentLayoutDetailsLevel[lp.detailsLevel] + ", pageIndex: " + lp.pageIndex + ", pageAreaInd: " + lp.pageAreaIndex + ", columnInd: " + lp.columnIndex + ", rowInd: " + lp.rowIndex;
    };
    LogObjToStrLayout.layoutChangeBase = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "index: " + obj.index);
        result.push("type: " + layout_change_base_1.LayoutChangeType[obj.changeType]);
        return result.join(sep);
    };
    LogObjToStrLayout.pageSelectionChange = function (change, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefix_1 = prefix + "\t";
        var prefix_2 = prefix_1 + "\t";
        var changeHandler = function (change, index) { return prefix_1 + "areaSelectionChange[" + index + "]:\n" + LogObjToStrLayout.areaSelectionChange(change, prefix_2); };
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(change, prefix));
        result.push(prefix + "pageSelectionChange:\n" + log_1.Log.join("\n", log_1.Log.map(changeHandler, change.areaChanges)));
        return result.join("\n");
    };
    LogObjToStrLayout.areaSelectionChange = function (change, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(change, prefix, ",\t"));
        result.push(log_obj_to_str_1.LogObjToStr.rectangle(change.selection, prefix, ",\t"));
        return result.join(",\t");
    };
    LogObjToStrLayout.pageChange = function (pageChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefix_1 = prefix + "\t";
        var prefix_2 = prefix_1 + "\t";
        var pageAreaChangeHandler = function (change, index) { return prefix_1 + "pageAreaChange[" + index + "]:\n" + LogObjToStrLayout.pageAreaChange(change, prefix_2); };
        var ancPicChangeHandler = function (change, index) { return prefix_1 + "pictureFloatingChange[" + index + "]:\n" + LogObjToStrLayout.anchoredPictureChange(change, prefix_2); };
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(pageChange, prefix));
        result.push(prefix + "mainPageAreaChanges:\n" + log_1.Log.join("\n", log_1.Log.map(pageAreaChangeHandler, pageChange.mainPageAreaChanges)));
        result.push(prefix + "otherPageAreaChanges:\n" + log_1.Log.join("\n", log_1.Log.map(pageAreaChangeHandler, pageChange.otherPageAreaChanges)));
        result.push(prefix + "floatingPictureChanges:\n" + log_1.Log.join("\n", log_1.Log.map(ancPicChangeHandler, pageChange.anchoredPictureChanges)));
        return result.join("\n");
    };
    LogObjToStrLayout.pageAreaChange = function (pageAreaChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefix_1 = prefix + "\t";
        var prefix_2 = prefix_1 + "\t";
        var columnChangeHandler = function (change, index) { return prefix_1 + "columnChange[" + index + "]:\n" + LogObjToStrLayout.columnChange(change, prefix_2); };
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(pageAreaChange, prefix));
        result.push(prefix + "columnChanges:\n" + log_1.Log.join("\n", log_1.Log.map(columnChangeHandler, pageAreaChange.columnChanges)));
        return result.join("\n");
    };
    LogObjToStrLayout.anchoredPictureChange = function (change, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(change, prefix));
        result.push(prefix + "objectId: " + change.index);
        return result.join("\n");
    };
    LogObjToStrLayout.columnChange = function (columnChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var prefix_1 = prefix + "\t";
        var customChangeHandler = function (_name, handler, change, index) { return prefix_1 + "[" + index + "]:\t" + handler(change, ""); };
        var changesData = [
            { name: "rowChange", getChange: function (cc) { return cc.rowChanges; }, handler: LogObjToStrLayout.rowChange },
            { name: "paragraphFrameChange", getChange: function (cc) { return cc.paragraphFrameChanges; }, handler: LogObjToStrLayout.paragraphFrameChange },
            { name: "tableChange", getChange: function (cc) { return cc.tableChanges; }, handler: LogObjToStrLayout.tableChange }
        ];
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(columnChange, prefix));
        for (var _i = 0, changesData_1 = changesData; _i < changesData_1.length; _i++) {
            var data = changesData_1[_i];
            result.push("" + prefix + data.name + "s:\n" + log_1.Log.join("\n", log_1.Log.map(log_1.Log.w(4, customChangeHandler)(data.name)(data.handler), data.getChange(columnChange))));
        }
        return result.join("\n");
    };
    LogObjToStrLayout.rowChange = function (rowChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        return LogObjToStrLayout.layoutChangeBase(rowChange, prefix);
    };
    LogObjToStrLayout.paragraphFrameChange = function (paragraphFrameChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var result = [];
        result.push(LogObjToStrLayout.layoutChangeBase(paragraphFrameChange, prefix));
        return result.join("\t");
    };
    LogObjToStrLayout.tableChange = function (tableChange, prefix) {
        if (prefix === void 0) { prefix = ""; }
        return LogObjToStrLayout.layoutChangeBase(tableChange, prefix);
    };
    LogObjToStrLayout.layoutTableColumnInfo = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var prefix_1 = prefix + "\t";
        var result = [];
        result.push(prefix + "TableIndex: " + obj.logicInfo.grid.table.index);
        result.push(prefix + "NestedLevel: " + obj.logicInfo.grid.table.nestedLevel);
        result.push(prefix + "ParentTableIndex: " + (obj.parentCell ? obj.parentCell.parentRow.parentTable.logicInfo.grid.table.index : ""));
        result.push(prefix + "NumRows: " + obj.tableRows.length);
        result.push(prefix + "Rows:\n" + list_1.ListUtils.map(obj.tableRows, function (row) { return LogObjToStrLayout.layoutTableRowInfo(row, prefix_1, sep); }).join("\n"));
        return result.join(sep);
    };
    LogObjToStrLayout.layoutTableRowInfo = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var prefix_1 = prefix + "\t";
        var result = [];
        result.push(prefix + "RowIndex: " + obj.rowIndex);
        result.push(prefix + "NumCells: " + obj.rowCells.length);
        result.push(prefix + "Cells:\n" + list_1.ListUtils.map(obj.rowCells, function (cell) { return LogObjToStrLayout.layoutTableCellInfo(cell, prefix_1, sep); }).join("\n\n"));
        return result.join(sep);
    };
    LogObjToStrLayout.layoutTableCellInfo = function (obj, prefix, sep) {
        if (prefix === void 0) { prefix = ""; }
        if (sep === void 0) { sep = "\t"; }
        var result = [];
        result.push(prefix + "CellGridIndex: " + obj.cellGridIndex);
        result.push(prefix + "Flags: " + log_1.Log.mask(layout_table_cell_info_1.TableCellBoundFlags, obj.boundFlags.getValue(), layout_table_cell_info_1.TableCellBoundFlags.StartAndEndOnOtherColumns));
        result.push(prefix + "InternalTablesIndexes: " + number_1.NumberMapUtils.toListBy(obj.internalTables, function (tbl) { return tbl.logicInfo.grid.table.index.toString(); }).join(" "));
        result.push(prefix + "NumLayoutRows: " + obj.layoutRows.length);
        result.push(prefix + "CellText: " + list_1.ListUtils.map(obj.layoutRows, function (layoutRow) {
            return list_1.ListUtils.map(layoutRow.boxes, function (box) { return box.getType() == layout_box_1.LayoutBoxType.Text ? box.text : "Â¶"; }).join("");
        }).join(""));
        return result.join(sep);
    };
    return LogObjToStrLayout;
}());
exports.LogObjToStrLayout = LogObjToStrLayout;
