"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var enum_1 = require("@devexpress/utils/lib/utils/enum");
var model_iterator_1 = require("../../model/model-iterator");
var run_type_1 = require("../../model/runs/run-type");
var debug_table_1 = require("./debug-table");
var log_1 = require("./logger/base-logger/log");
var ModelChecks = (function () {
    function ModelChecks() {
    }
    ModelChecks.DEBUG_TABLES_CHECKS = function (subDocument, forceCheck) {
        if (forceCheck === void 0) { forceCheck = false; }
        if (!forceCheck && !log_1.Log.isEnabled)
            return;
        debug_table_1.__DEBUG_TABLE.tables(subDocument);
    };
    ModelChecks.DEBUG_FIELDS_CHECKS = function (subDocument, forceCheck) {
        if (forceCheck === void 0) { forceCheck = false; }
        if (!forceCheck && !log_1.Log.isEnabled)
            return;
        var fields = subDocument.fields;
        for (var fieldIndex = 0, field; field = fields[fieldIndex]; fieldIndex++) {
            if (field.index != fieldIndex)
                throw new Error("DEBUG_FIELDS_CHECKS incorrect index " + field.index + " must be " + fieldIndex);
            var chunkAndRunInfoStartCode = subDocument.getRunAndIndexesByPosition(field.getFieldStartPosition());
            if (chunkAndRunInfoStartCode.run.getType() != run_type_1.RunType.FieldCodeStartRun)
                throw new Error("DEBUG_FIELDS_CHECKS incorrect run type");
            var chunkAndRunInfoSeparator = subDocument.getRunAndIndexesByPosition(field.getSeparatorPosition());
            if (chunkAndRunInfoSeparator.run.getType() != run_type_1.RunType.FieldCodeEndRun)
                throw new Error("DEBUG_FIELDS_CHECKS incorrect run type");
            var chunkAndRunInfoEndField = subDocument.getRunAndIndexesByPosition(field.getResultEndPosition());
            if (chunkAndRunInfoEndField.run.getType() != run_type_1.RunType.FieldResultEndRun)
                throw new Error("DEBUG_FIELDS_CHECKS incorrect run type");
            if (chunkAndRunInfoStartCode.getAbsoluteRunPosition() >= chunkAndRunInfoSeparator.getAbsoluteRunPosition() ||
                chunkAndRunInfoStartCode.getAbsoluteRunPosition() >= chunkAndRunInfoEndField.getAbsoluteRunPosition() ||
                chunkAndRunInfoSeparator.getAbsoluteRunPosition() >= chunkAndRunInfoEndField.getAbsoluteRunPosition())
                throw new Error("DEBUG_FIELDS_CHECKS incorrect some of main positions");
            if (field.parent) {
                var fieldInterval = field.getAllFieldInterval();
                if (!(field.parent.getCodeInterval().containsInterval(fieldInterval) ||
                    field.parent.getResultInterval().containsInterval(fieldInterval)))
                    throw new Error("DEBUG_FIELDS_CHECKS error with intervals");
                if (field.parent.index >= field.index)
                    throw new Error("DEBUG_FIELDS_CHECKS error with parent and current indexes");
            }
        }
        var numFieldRuns = 0;
        var it = new model_iterator_1.ModelIterator(subDocument, false);
        it.setPosition(0);
        do {
            if (enum_1.EnumUtils.isAnyOf(it.run.getType(), run_type_1.RunType.FieldCodeStartRun, run_type_1.RunType.FieldCodeEndRun, run_type_1.RunType.FieldResultEndRun))
                numFieldRuns++;
        } while (it.moveToNextRun());
        if (numFieldRuns != subDocument.fields.length * 3)
            throw new Error("DEBUG_FIELDS_CHECKS error with num runs of fields (excess runs)");
    };
    return ModelChecks;
}());
exports.ModelChecks = ModelChecks;
