"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var table_units_1 = require("../../model/tables/secondary-structures/table-units");
var errors_1 = require("@devexpress/utils/lib/errors");
var list_1 = require("@devexpress/utils/lib/utils/list");
var number_1 = require("@devexpress/utils/lib/utils/map/number");
var tables_manipulator_1 = require("../../model/manipulators/tables/tables-manipulator");
var table_base_structures_1 = require("../../model/tables/secondary-structures/table-base-structures");
var table_utils_1 = require("../../model/tables/table-utils");
var grid_1 = require("../../layout-formatter/table/grid-engine/grid");
var paragraph_manipulator_1 = require("../../model/manipulators/paragraph-manipulator/paragraph-manipulator");
var TableRestorer = (function () {
    function TableRestorer() {
    }
    TableRestorer.paragraphMarkBetween = function (model) {
        number_1.NumberMapUtils.forEach(model.subDocuments, function (sd) {
            for (var _i = 0, _a = sd.tablesByLevels; _i < _a.length; _i++) {
                var tablesOnLevel = _a[_i];
                var prevTable = tablesOnLevel[0];
                if (prevTable) {
                    for (var index = 1, table = void 0; table = tablesOnLevel[index];) {
                        if (table.getStartPosition() - prevTable.getEndPosition() == 0) {
                            TableRestorer.joinTables(sd, [prevTable, table]);
                        }
                        else {
                            prevTable = table;
                            index++;
                        }
                    }
                }
            }
        });
    };
    TableRestorer.joinTables = function (subDocument, tables) {
        if (tables.length < 2)
            throw new Error("tables.length should be > 2");
        var resultTable = tables[0];
        list_1.ListUtils.forEach(tables, function (table) {
            var isEqualProps = resultTable.properties.equals(table.properties);
            for (var _i = 0, _a = table.rows; _i < _a.length; _i++) {
                var row = _a[_i];
                resultTable.rows.push(row);
                if (!isEqualProps)
                    row.tablePropertiesException = table.properties;
            }
        }, 1);
        list_1.ListUtils.forEach(tables, function (table) { return tables_manipulator_1.TablesManipulator.removeTableCore(table, subDocument.tables, subDocument.tablesByLevels); }, 1);
        var colCount = resultTable.getTotalVirtualColumnsCount();
        for (var _i = 0, _a = resultTable.rows; _i < _a.length; _i++) {
            var row = _a[_i];
            row.gridAfter += colCount - row.getTotalCellsInRowConsiderGrid();
        }
    };
    TableRestorer.fixAllTables = function (model) {
        number_1.NumberMapUtils.forEach(model.subDocuments, function (sd) {
            TableRestorer.fixTables(sd);
        });
    };
    TableRestorer.fixTables = function (subDocument) {
        subDocument.tables.forEach(function (table) {
            TableRestorer.fixTable(table, subDocument);
        });
    };
    TableRestorer.fixLastParagraphs = function (model) {
        number_1.NumberMapUtils.forEach(model.subDocuments, function (sd) {
            TableRestorer.fixLastParagraph(sd);
        });
    };
    TableRestorer.fixLastParagraph = function (sd) {
        var endPosition = sd.interval.end;
        if (list_1.ListUtils.elementBy(sd.tables, function (table) { return table.getEndPosition() == endPosition; }))
            TableRestorer.insertParagraphInSubDocumentEnd(sd);
    };
    TableRestorer.insertParagraphInSubDocumentEnd = function (sd) {
        paragraph_manipulator_1.ParagraphManipulator.insertParagraphInEnd(sd, sd.getDocumentEndPosition(), sd.getLastRun().getCharPropsBundle(sd.documentModel));
    };
    TableRestorer.fixTable = function (table, subDocument) {
        TableRestorer.normalize(table);
        TableRestorer.normalizeRows(table, subDocument);
        TableRestorer.normalizeTableGrid(table);
        tables_manipulator_1.TablesManipulator.normalizeCellColumnSpansWithoutHistory(table, true);
    };
    TableRestorer.normalizeRows = function (table, subDocument) {
        list_1.ListUtils.reverseForEach(table.rows, function (row, rowIndex) {
            if (list_1.ListUtils.allOf(row.cells, function (cell) { return cell.verticalMerging == table_base_structures_1.TableCellMergingState.Continue; })) {
                if (rowIndex > 0) {
                    var prevRowIndex_1 = rowIndex - 1;
                    if (row.height.type != table_units_1.TableHeightUnitType.Auto)
                        table.rows[prevRowIndex_1].height.value += row.height.value;
                    tables_manipulator_1.TablesManipulator.removeRowCore(subDocument, table, rowIndex);
                    var cellInfos_1 = new grid_1.Grid(table).tableCellInfos;
                    list_1.ListUtils.forEach(table.rows[prevRowIndex_1].cells, function (cell, cellIndex) {
                        var cellInfo = cellInfos_1[prevRowIndex_1][cellIndex];
                        if (cell.verticalMerging == table_base_structures_1.TableCellMergingState.Restart && cellInfo.getStartRowIndex() == cellInfo.getEndRowIndex() - 1)
                            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
                    });
                }
            }
        });
    };
    TableRestorer.normalizeTableGrid = function (table) {
        var maxEndColumnIndex = table.getTotalVirtualColumnsCount();
        table.rows.forEach(function (row) {
            var gridAfterDelta = maxEndColumnIndex - row.getTotalCellsInRowConsiderGrid();
            if (gridAfterDelta)
                row.gridAfter += gridAfterDelta;
        });
    };
    TableRestorer.normalize = function (table) {
        if (table.rows.length == 1) {
            TableRestorer.removeInvalidVerticalSpansFromTableWithOneRow(table.rows);
            return;
        }
        table.rows.forEach(function (row, rowIndex) {
            for (var cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {
                var cell = row.cells[cellIndex];
                var mergingState = cell.verticalMerging;
                if (mergingState == table_base_structures_1.TableCellMergingState.None)
                    continue;
                if (mergingState == table_base_structures_1.TableCellMergingState.Continue)
                    TableRestorer.actualizeVerticalMergingForContinueCell(cell, rowIndex);
                else
                    TableRestorer.actualizeVerticalMergingForRestartCell(cell, rowIndex);
            }
        });
    };
    TableRestorer.getCellColumnIndexConsiderRowGrid = function (cell) {
        return table_utils_1.TableCellUtils.getStartColumnIndex(cell);
    };
    TableRestorer.getAbsoluteCellIndexInRow = function (row, columnIndex, layoutIndex) {
        if (row.cells.length == 0)
            throw new Error(errors_1.Errors.InternalException);
        var cells = row.cells;
        var cellsCount = cells.length;
        var cellIndex = 0;
        columnIndex -= layoutIndex ? row.gridBefore : row.gridBefore;
        while (columnIndex > 0 && cellIndex < cellsCount) {
            var currentCell = cells[cellIndex];
            columnIndex -= layoutIndex ? currentCell.columnSpan : currentCell.columnSpan;
            if (columnIndex >= 0)
                cellIndex++;
        }
        return cellIndex;
    };
    TableRestorer.getLowerCell = function (rows, currentRowIndex, columnIndex) {
        return TableRestorer.getCell(rows, currentRowIndex + 1, columnIndex);
    };
    TableRestorer.getUpperCell = function (rows, currentRowIndex, columnIndex) {
        return TableRestorer.getCell(rows, currentRowIndex - 1, columnIndex);
    };
    TableRestorer.getCell = function (rows, rowIndex, columnIndex) {
        var row = rows[rowIndex];
        if (row == null)
            return null;
        var index = TableRestorer.getAbsoluteCellIndexInRow(row, columnIndex, false);
        if (row.cells.length <= index)
            return TableRestorer.getCell(rows, rowIndex - 1, columnIndex);
        return row.cells[index];
    };
    TableRestorer.actualizeVerticalMergingForContinueCellCore = function (cell, rowIndex, columnIndex) {
        if (cell.parentRow.isLastRowInTable) {
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
            return;
        }
        var lowerCell = TableRestorer.getLowerCell(cell.parentRow.parentTable.rows, rowIndex, columnIndex);
        if (lowerCell == null || lowerCell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue)
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        else
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.Restart;
    };
    TableRestorer.actualizeVerticalMergingForContinueCell = function (cell, rowIndex) {
        var columnIndex = TableRestorer.getCellColumnIndexConsiderRowGrid(cell);
        if (rowIndex == 0) {
            TableRestorer.actualizeVerticalMergingForContinueCellCore(cell, rowIndex, columnIndex);
            return;
        }
        var upperCell = TableRestorer.getUpperCell(cell.parentRow.parentTable.rows, rowIndex, columnIndex);
        if (upperCell == null || upperCell.verticalMerging == table_base_structures_1.TableCellMergingState.None)
            TableRestorer.actualizeVerticalMergingForContinueCellCore(cell, rowIndex, columnIndex);
        else if (upperCell != null) {
            var expectedLeftColumn = TableRestorer.getCellColumnIndexConsiderRowGrid(upperCell);
            var expectedRightColumn = expectedLeftColumn + upperCell.columnSpan;
            var actualLeftColumn = TableRestorer.getCellColumnIndexConsiderRowGrid(cell);
            var actualRightColumn = actualLeftColumn + cell.columnSpan;
            if (expectedLeftColumn != actualLeftColumn || expectedRightColumn != actualRightColumn)
                cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        }
    };
    TableRestorer.actualizeVerticalMergingForRestartCell = function (cell, rowIndex) {
        if (cell.parentRow.isLastRowInTable) {
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
            return;
        }
        var currentCellColumnIndex = TableRestorer.getCellColumnIndexConsiderRowGrid(cell);
        var lowerCell = TableRestorer.getLowerCell(cell.parentRow.parentTable.rows, rowIndex, currentCellColumnIndex);
        if (lowerCell == null || lowerCell.verticalMerging != table_base_structures_1.TableCellMergingState.Continue || cell.columnSpan != lowerCell.columnSpan) {
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        }
        else {
            var lowerCellColumnIndex = TableRestorer.getCellColumnIndexConsiderRowGrid(lowerCell);
            if (lowerCellColumnIndex != currentCellColumnIndex)
                cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        }
    };
    TableRestorer.removeInvalidVerticalSpansFromTableWithOneRow = function (rows) {
        rows[0].cells.forEach(function (cell) {
            cell.verticalMerging = table_base_structures_1.TableCellMergingState.None;
        });
    };
    return TableRestorer;
}());
exports.TableRestorer = TableRestorer;
