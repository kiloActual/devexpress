"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var rich_utils_1 = require("../../model/rich-utils");
var StringHelper = (function () {
    function StringHelper() {
    }
    StringHelper.removeSpecialSymbols = function (text) {
        if (!StringHelper.containsSpecialSymbols(text))
            return text;
        var sb = "";
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var charCode = text.charCodeAt(i);
            if (charCode > StringHelper.lastLowSpecial && charCode < StringHelper.firstHighSpecial)
                sb += ch;
            else {
                if (charCode == StringHelper.horizontalTabulationCharCode || charCode == StringHelper.newLineCharCode
                    || charCode == StringHelper.carriageReturnCharCode)
                    sb += ch;
            }
        }
        return sb;
    };
    StringHelper.replaceParagraphMarksWithLineBreaks = function (text) {
        if (!this.containsParagraphMarksOrUnitSeparators(text))
            return text;
        var sb = [];
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var ch = text[i];
            var charCode = text.charCodeAt(i);
            if (charCode != StringHelper.newLineCharCode && charCode != StringHelper.carriageReturnCharCode
                && charCode != StringHelper.unitSeparatorCharCode && charCode != StringHelper.recordSeparatorCharCode)
                sb.push(ch);
            else if (charCode != StringHelper.unitSeparatorCharCode && charCode != StringHelper.recordSeparatorCharCode) {
                sb.push(rich_utils_1.RichUtils.specialCharacters.LineBreak);
                if (i != count - 1) {
                    var nextCh = text[i + 1];
                    var newtCharCode = text.charCodeAt(i + 1);
                    if ((newtCharCode == StringHelper.newLineCharCode || newtCharCode == StringHelper.carriageReturnCharCode) && nextCh != ch)
                        i++;
                }
            }
            else if (charCode == StringHelper.recordSeparatorCharCode) {
                sb.push(rich_utils_1.RichUtils.specialCharacters.Dash);
            }
        }
        return sb.join('');
    };
    StringHelper.containsParagraphMarksOrUnitSeparators = function (text) {
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var charCode = text.charCodeAt(i);
            if (charCode == StringHelper.newLineCharCode || charCode == StringHelper.carriageReturnCharCode
                || charCode == StringHelper.unitSeparatorCharCode || charCode == StringHelper.recordSeparatorCharCode)
                return true;
        }
        return false;
    };
    StringHelper.containsSpecialSymbols = function (text) {
        var count = text.length;
        for (var i = 0; i < count; i++) {
            var charCode = text.charCodeAt(i);
            if (charCode <= StringHelper.lastLowSpecial || charCode >= StringHelper.firstHighSpecial) {
                if (charCode != StringHelper.horizontalTabulationCharCode && charCode != StringHelper.newLineCharCode
                    && charCode != StringHelper.carriageReturnCharCode)
                    return true;
            }
        }
        return false;
    };
    StringHelper.lastLowSpecial = 0x1f;
    StringHelper.firstHighSpecial = 0xffff;
    StringHelper.horizontalTabulationCharCode = 0x09;
    StringHelper.newLineCharCode = 0x0A;
    StringHelper.carriageReturnCharCode = 0x0D;
    StringHelper.recordSeparatorCharCode = 0x1E;
    StringHelper.unitSeparatorCharCode = 0x1f;
    return StringHelper;
}());
exports.StringHelper = StringHelper;
