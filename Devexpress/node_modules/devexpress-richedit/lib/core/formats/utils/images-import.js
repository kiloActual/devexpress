"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FormatImagesImporterData = (function () {
    function FormatImagesImporterData(subDocPos, options, run) {
        this.subDocPos = subDocPos;
        this.options = options;
        this.run = run;
    }
    return FormatImagesImporterData;
}());
exports.FormatImagesImporterData = FormatImagesImporterData;
var FormatImagesImporter = (function () {
    function FormatImagesImporter() {
        this.data = [];
        this.callbackId = [];
    }
    FormatImagesImporter.prototype.dispose = function () {
        this.callbackId.forEach(function (id) { return clearTimeout(id); });
        clearTimeout(this.timeoutId);
    };
    FormatImagesImporter.prototype.whenAllPicturesLoaded = function (callback, timeout) {
        var _this = this;
        if (timeout === void 0) { timeout = 3000; }
        if (!this.data.length) {
            this.callOnImportEnd = function () { return callback(true); };
            return;
        }
        var numLoadingPictures = this.data.length;
        this.timeoutId = setTimeout(function () { return callback(false); }, timeout);
        this.data.forEach(function (data) { return data.options.imageLoadedEvent.push(function () {
            numLoadingPictures--;
            if (numLoadingPictures == 0) {
                clearTimeout(_this.timeoutId);
                _this.callbackId.push(setTimeout(function () { return callback(true); }, 0));
            }
        }); });
    };
    FormatImagesImporter.prototype.import = function (modelManipulator) {
        this.data.forEach(function (d) {
            var cacheInfo = d.run.info.cacheInfo;
            modelManipulator.picture.loader.sizeUpdater.addSizes(d.subDocPos, d.options, d.run, null);
            if (cacheInfo.isLoaded)
                modelManipulator.picture.loader.sizeUpdater.update(cacheInfo, false);
        });
        modelManipulator.model.cache.imageCache.loadAllPictures(modelManipulator.picture);
        if (this.callOnImportEnd)
            this.callOnImportEnd();
    };
    FormatImagesImporter.prototype.registerImageRun = function (data) {
        this.data.push(data);
    };
    return FormatImagesImporter;
}());
exports.FormatImagesImporter = FormatImagesImporter;
