"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("@devexpress/utils/lib/constants");
var list_1 = require("@devexpress/utils/lib/utils/list");
var NextPosition = (function () {
    function NextPosition(index, nextKeyPosition) {
        this.index = index;
        this.nextKeyPosition = nextKeyPosition;
    }
    return NextPosition;
}());
var ObjectStateInfo = (function () {
    function ObjectStateInfo(object, index) {
        this.object = object;
        this.index = index;
    }
    return ObjectStateInfo;
}());
exports.ObjectStateInfo = ObjectStateInfo;
var CrossExistingIterator = (function () {
    function CrossExistingIterator(objects) {
        this.objects = objects;
    }
    CrossExistingIterator.prototype.init = function () {
        this.clearPublicLists();
        this.currObjs = [];
        this.nextPos = this.objects[0] ?
            new NextPosition(0, this.objects[0].interval.start) :
            new NextPosition(0, constants_1.Constants.MAX_SAFE_INTEGER);
    };
    CrossExistingIterator.prototype.update = function (newPos) {
        this.clearPublicLists();
        if (newPos < this.nextPos.nextKeyPosition)
            return false;
        this.deleteObjects(newPos);
        this.addNewObjects(newPos);
        var smthChanged = !!this.deletedObjects.length || !!this.addedObjects.length;
        if (smthChanged) {
            var obj = this.objects[this.nextPos.index];
            this.nextPos.nextKeyPosition = obj ? obj.interval.start : constants_1.Constants.MAX_SAFE_INTEGER;
            for (var _i = 0, _a = this.currObjs; _i < _a.length; _i++) {
                var state = _a[_i];
                this.nextPos.nextKeyPosition = Math.min(this.nextPos.nextKeyPosition, state.object.interval.end);
            }
        }
        return smthChanged;
    };
    CrossExistingIterator.prototype.clearPublicLists = function () {
        this.deletedObjects = [];
        this.addedObjects = [];
    };
    CrossExistingIterator.prototype.deleteObjects = function (newPos) {
        var _this = this;
        this.currObjs = list_1.ListUtils.reducedMap(this.currObjs, function (state) {
            if (newPos >= state.object.interval.end) {
                _this.deletedObjects.push(state);
                return null;
            }
            else
                return state;
        });
    };
    CrossExistingIterator.prototype.addNewObjects = function (newPos) {
        var obj = this.objects[this.nextPos.index];
        while (obj && obj.interval.start == newPos) {
            var state = new ObjectStateInfo(obj, this.nextPos.index);
            if (obj.interval.length)
                this.currObjs.push(state);
            else
                this.deletedObjects.push(state);
            this.addedObjects.push(state);
            this.nextPos.index++;
            obj = this.objects[this.nextPos.index];
        }
    };
    return CrossExistingIterator;
}());
exports.CrossExistingIterator = CrossExistingIterator;
